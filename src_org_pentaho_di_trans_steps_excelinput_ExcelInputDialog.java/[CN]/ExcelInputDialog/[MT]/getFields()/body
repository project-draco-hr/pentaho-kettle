{
  RowMetaInterface fields=new RowMeta();
  ExcelInputMeta info=new ExcelInputMeta();
  getInfo(info);
  FileInputList fileList=info.getFileList(transMeta);
  for (Iterator iter=fileList.getFiles().iterator(); iter.hasNext(); ) {
    FileObject file=(FileObject)iter.next();
    try {
      Workbook workbook=Workbook.getWorkbook(KettleVFS.getInputStream(file));
      int nrSheets=workbook.getNumberOfSheets();
      for (int j=0; j < nrSheets; j++) {
        Sheet sheet=workbook.getSheet(j);
        int sheetIndex=Const.indexOfString(sheet.getName(),info.getSheetName());
        if (sheetIndex >= 0) {
          int rownr=info.getStartRow()[sheetIndex];
          int startcol=info.getStartColumn()[sheetIndex];
          boolean stop=false;
          for (int colnr=startcol; colnr < 256 && !stop; colnr++) {
            try {
              String fieldname=null;
              int fieldtype=ValueMetaInterface.TYPE_NONE;
              Cell cell=sheet.getCell(colnr,rownr);
              if (!cell.getType().equals(CellType.EMPTY)) {
                fieldname=cell.getContents();
              }
              Cell below=sheet.getCell(colnr,rownr + 1);
              if (below.getType().equals(CellType.BOOLEAN)) {
                fieldtype=ValueMetaInterface.TYPE_BOOLEAN;
              }
 else               if (below.getType().equals(CellType.DATE)) {
                fieldtype=ValueMetaInterface.TYPE_DATE;
              }
 else               if (below.getType().equals(CellType.LABEL)) {
                fieldtype=ValueMetaInterface.TYPE_STRING;
              }
 else               if (below.getType().equals(CellType.NUMBER)) {
                fieldtype=ValueMetaInterface.TYPE_NUMBER;
              }
              if (fieldname != null && fieldtype == ValueMetaInterface.TYPE_NONE) {
                fieldtype=ValueMetaInterface.TYPE_STRING;
              }
              if (fieldname != null && fieldtype != ValueMetaInterface.TYPE_NONE) {
                ValueMetaInterface field=new ValueMeta(fieldname,fieldtype);
                if (fields.indexOfValue(field.getName()) < 0)                 fields.addValueMeta(field);
              }
 else {
                if (fieldname == null)                 stop=true;
              }
            }
 catch (            ArrayIndexOutOfBoundsException aioobe) {
              stop=true;
            }
          }
        }
      }
      workbook.close();
    }
 catch (    Exception e) {
      new ErrorDialog(shell,Messages.getString("System.Dialog.Error.Title"),Messages.getString("ExcelInputDialog.ErrorReadingFile2.DialogMessage",KettleVFS.getFilename(file),e.toString()),e);
    }
  }
  if (fields.size() > 0) {
    for (int j=0; j < fields.size(); j++) {
      ValueMetaInterface field=fields.getValueMeta(j);
      wFields.add(new String[]{field.getName(),field.getTypeDesc(),"-1","-1","none","N"});
    }
    wFields.removeEmptyRows();
    wFields.setRowNums();
    wFields.optWidth(true);
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
    mb.setMessage(Messages.getString("ExcelInputDialog.UnableToFindFields.DialogMessage"));
    mb.setText(Messages.getString("ExcelInputDialog.UnableToFindFields.DialogTitle"));
    mb.open();
  }
}
