{
  Shell parent=getParent();
  display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,margin);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wMailAddress=new LabelTextVar(jobMeta,shell,BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.MailAddress.Label"),BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.MailAddress.Tooltip"));
  wMailAddress.addModifyListener(lsMod);
  fdMailAddress=new FormData();
  fdMailAddress.left=new FormAttachment(0,0);
  fdMailAddress.top=new FormAttachment(wName,margin);
  fdMailAddress.right=new FormAttachment(100,0);
  wMailAddress.setLayoutData(fdMailAddress);
  wSettingsGroup=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wSettingsGroup);
  wSettingsGroup.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.Group.SettingsAddress.Label"));
  FormLayout SettingsgroupLayout=new FormLayout();
  SettingsgroupLayout.marginWidth=10;
  SettingsgroupLayout.marginHeight=10;
  wSettingsGroup.setLayout(SettingsgroupLayout);
  wlSMTPCheck=new Label(wSettingsGroup,SWT.RIGHT);
  wlSMTPCheck.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.SMTPCheck.Label"));
  props.setLook(wlSMTPCheck);
  fdlSMTPCheck=new FormData();
  fdlSMTPCheck.left=new FormAttachment(0,0);
  fdlSMTPCheck.top=new FormAttachment(wMailAddress,margin);
  fdlSMTPCheck.right=new FormAttachment(middle,-2 * margin);
  wlSMTPCheck.setLayoutData(fdlSMTPCheck);
  wSMTPCheck=new Button(wSettingsGroup,SWT.CHECK);
  props.setLook(wSMTPCheck);
  wSMTPCheck.setToolTipText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.SMTPCheck.Tooltip"));
  fdSMTPCheck=new FormData();
  fdSMTPCheck.left=new FormAttachment(middle,-margin);
  fdSMTPCheck.top=new FormAttachment(wMailAddress,margin);
  wSMTPCheck.setLayoutData(fdSMTPCheck);
  wSMTPCheck.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeSMTPCheck();
    }
  }
);
  wlTimeOut=new Label(wSettingsGroup,SWT.RIGHT);
  wlTimeOut.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.TimeOutField.Label"));
  props.setLook(wlTimeOut);
  fdlTimeOut=new FormData();
  fdlTimeOut.left=new FormAttachment(0,0);
  fdlTimeOut.right=new FormAttachment(middle,-2 * margin);
  fdlTimeOut.top=new FormAttachment(wSMTPCheck,margin);
  wlTimeOut.setLayoutData(fdlTimeOut);
  wTimeOut=new TextVar(jobMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wTimeOut.setToolTipText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.TimeOutField.Tooltip"));
  props.setLook(wTimeOut);
  wTimeOut.addModifyListener(lsMod);
  fdTimeOut=new FormData();
  fdTimeOut.left=new FormAttachment(middle,-margin);
  fdTimeOut.top=new FormAttachment(wSMTPCheck,margin);
  fdTimeOut.right=new FormAttachment(100,0);
  wTimeOut.setLayoutData(fdTimeOut);
  wleMailSender=new Label(wSettingsGroup,SWT.RIGHT);
  wleMailSender.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.eMailSenderField.Label"));
  props.setLook(wleMailSender);
  fdleMailSender=new FormData();
  fdleMailSender.left=new FormAttachment(0,0);
  fdleMailSender.right=new FormAttachment(middle,-2 * margin);
  fdleMailSender.top=new FormAttachment(wTimeOut,margin);
  wleMailSender.setLayoutData(fdleMailSender);
  weMailSender=new TextVar(jobMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  weMailSender.setToolTipText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.eMailSenderField.Tooltip"));
  props.setLook(weMailSender);
  weMailSender.addModifyListener(lsMod);
  fdeMailSender=new FormData();
  fdeMailSender.left=new FormAttachment(middle,-margin);
  fdeMailSender.top=new FormAttachment(wTimeOut,margin);
  fdeMailSender.right=new FormAttachment(100,0);
  weMailSender.setLayoutData(fdeMailSender);
  wlDefaultSMTP=new Label(wSettingsGroup,SWT.RIGHT);
  wlDefaultSMTP.setText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.DefaultSMTPField.Label"));
  props.setLook(wlDefaultSMTP);
  fdlDefaultSMTP=new FormData();
  fdlDefaultSMTP.left=new FormAttachment(0,0);
  fdlDefaultSMTP.right=new FormAttachment(middle,-2 * margin);
  fdlDefaultSMTP.top=new FormAttachment(weMailSender,margin);
  wlDefaultSMTP.setLayoutData(fdlDefaultSMTP);
  wDefaultSMTP=new TextVar(jobMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wDefaultSMTP.setToolTipText(BaseMessages.getString(PKG,"JobEntryMailValidatorDialog.DefaultSMTPField.Tooltip"));
  props.setLook(wDefaultSMTP);
  wDefaultSMTP.addModifyListener(lsMod);
  fdDefaultSMTP=new FormData();
  fdDefaultSMTP.left=new FormAttachment(middle,-margin);
  fdDefaultSMTP.top=new FormAttachment(weMailSender,margin);
  fdDefaultSMTP.right=new FormAttachment(100,0);
  wDefaultSMTP.setLayoutData(fdDefaultSMTP);
  fdSettingsGroup=new FormData();
  fdSettingsGroup.left=new FormAttachment(0,margin);
  fdSettingsGroup.top=new FormAttachment(wMailAddress,margin);
  fdSettingsGroup.right=new FormAttachment(100,-margin);
  wSettingsGroup.setLayoutData(fdSettingsGroup);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wSettingsGroup);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  activeSMTPCheck();
  BaseStepDialog.setSize(shell);
  shell.open();
  props.setDialogSize(shell,"JobSuccessDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return jobEntry;
}
