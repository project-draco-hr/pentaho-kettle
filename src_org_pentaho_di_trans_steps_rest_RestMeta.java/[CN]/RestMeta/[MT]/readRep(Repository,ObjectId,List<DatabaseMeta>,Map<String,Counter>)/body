{
  try {
    method=rep.getStepAttributeString(id_step,"method");
    url=rep.getStepAttributeString(id_step,"url");
    urlInField=rep.getStepAttributeBoolean(id_step,"urlInField");
    methodFieldName=rep.getStepAttributeString(id_step,"methodFieldName");
    dynamicMethod=rep.getStepAttributeBoolean(id_step,"dynamicMethod");
    urlField=rep.getStepAttributeString(id_step,"urlField");
    bodyField=rep.getStepAttributeString(id_step,"bodyField");
    httpLogin=rep.getStepAttributeString(id_step,"httpLogin");
    httpPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"httpPassword"));
    proxyHost=rep.getStepAttributeString(id_step,"proxyHost");
    proxyPort=rep.getStepAttributeString(id_step,"proxyPort");
    trustStoreFile=rep.getStepAttributeString(id_step,"trustStoreFile");
    trustStorePassword=rep.getStepAttributeString(id_step,"trustStorePassword");
    preemptive=rep.getStepAttributeBoolean(id_step,"preemptive");
    int nrheaders=rep.countNrStepAttributes(id_step,"header");
    int nrparams=rep.countNrStepAttributes(id_step,"parameter");
    allocate(nrheaders,nrparams);
    for (int i=0; i < nrheaders; i++) {
      headerField[i]=rep.getStepAttributeString(id_step,i,"field");
      headerName[i]=rep.getStepAttributeString(id_step,i,"name");
    }
    for (int i=0; i < nrparams; i++) {
      parameterField[i]=rep.getStepAttributeString(id_step,i,"field");
      parameterName[i]=rep.getStepAttributeString(id_step,i,"name");
    }
    fieldName=rep.getStepAttributeString(id_step,"result_name");
    resultCodeFieldName=rep.getStepAttributeString(id_step,"result_code");
    responseTimeFieldName=rep.getStepAttributeString(id_step,"response_time");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"RestMeta.Exception.UnexpectedErrorReadingStepInfo"),e);
  }
}
