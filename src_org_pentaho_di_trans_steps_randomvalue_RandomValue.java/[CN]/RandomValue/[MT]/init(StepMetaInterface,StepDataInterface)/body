{
  meta=(RandomValueMeta)smi;
  data=(RandomValueData)sdi;
  if (super.init(smi,sdi)) {
    data.readsRows=false;
    List<StepMeta> previous=getTransMeta().findPreviousSteps(getStepMeta());
    if (previous != null && previous.size() > 0) {
      data.readsRows=true;
    }
    boolean genHmacMD5=false;
    boolean genHmacSHA1=false;
    boolean uuid4=false;
    for (int i=0; i < meta.getFieldName().length; i++) {
switch (meta.getFieldType()[i]) {
case RandomValueMeta.TYPE_RANDOM_MAC_HMACMD5:
        genHmacMD5=true;
      break;
case RandomValueMeta.TYPE_RANDOM_MAC_HMACSHA1:
    genHmacSHA1=true;
  break;
case RandomValueMeta.TYPE_RANDOM_UUID4:
uuid4=true;
break;
default :
break;
}
}
if (genHmacMD5) {
try {
data.keyGenHmacMD5=KeyGenerator.getInstance("HmacMD5");
}
 catch (NoSuchAlgorithmException s) {
log.logError(toString(),BaseMessages.getString(PKG,"RandomValue.Log.HmacMD5AlgorithmException",s.getMessage()));
return false;
}
}
if (genHmacSHA1) {
try {
data.keyGenHmacSHA1=KeyGenerator.getInstance("HmacSHA1");
}
 catch (NoSuchAlgorithmException s) {
log.logError(toString(),BaseMessages.getString(PKG,"RandomValue.Log.HmacSHA1AlgorithmException",s.getMessage()));
return false;
}
}
if (uuid4) {
data.u4=new UUID4Util();
}
return true;
}
return false;
}
