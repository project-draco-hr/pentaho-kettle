{
  try {
    this.databaseMeta=rep.loadDatabaseMetaFromStepAttribute(idStep,"connection",databases);
    this.modelName=rep.getStepAttributeString(idStep,"modelName");
    this.readBatchSize=Integer.parseInt(rep.getStepAttributeString(idStep,"readBatchSize"));
    int nrMappings=rep.countNrStepAttributes(idStep,"source_model");
    for (int i=0; i < nrMappings; i++) {
      FieldMapping map=new FieldMapping();
      map.source_model=rep.getStepAttributeString(idStep,i,"source_model");
      map.source_field=rep.getStepAttributeString(idStep,i,"source_field");
      map.source_index=Integer.valueOf(rep.getStepAttributeString(idStep,i,"source_index"));
      map.target_model=rep.getStepAttributeString(idStep,i,"target_model");
      map.target_field=rep.getStepAttributeString(idStep,i,"target_field");
      map.target_field_label=rep.getStepAttributeString(idStep,i,"target_field_label");
      map.target_field_type=Integer.valueOf(rep.getStepAttributeString(idStep,i,"target_field_type"));
      this.getMappings().add(map);
    }
    int nrFilters=rep.countNrStepAttributes(idStep,"field_name");
    for (int i=0; i < nrFilters; i++) {
      ReadFilter filter=new ReadFilter();
      filter.setOperator(rep.getStepAttributeString(idStep,i,"operator"));
      filter.setFieldName(rep.getStepAttributeString(idStep,i,"field_name"));
      filter.setComparator(rep.getStepAttributeString(idStep,i,"comparator"));
      filter.setValue(rep.getStepAttributeString(idStep,i,"value"));
      this.getFilterList().add(filter);
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
