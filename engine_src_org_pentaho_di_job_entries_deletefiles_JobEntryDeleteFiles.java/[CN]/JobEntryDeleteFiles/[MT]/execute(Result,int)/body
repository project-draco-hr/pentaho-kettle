{
  List<RowMetaAndData> resultRows=result.getRows();
  int numberOfErrFiles=0;
  result.setResult(false);
  result.setNrErrors(1);
  if (argFromPrevious && log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobEntryDeleteFiles.FoundPreviousRows",String.valueOf((resultRows != null ? resultRows.size() : 0))));
  }
  Multimap<String,String> pathToMaskMap=populateDataForJobExecution(resultRows);
  for (  Map.Entry<String,String> pathToMask : pathToMaskMap.entries()) {
    final String filePath=environmentSubstitute(pathToMask.getKey());
    if (filePath.trim().isEmpty()) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryDeleteFiles.NoPathProvided"));
      }
    }
 else {
      final String fileMask=environmentSubstitute(pathToMask.getValue());
      if (parentJob.isStopped()) {
        break;
      }
      if (!processFile(filePath,fileMask,parentJob)) {
        numberOfErrFiles++;
      }
    }
  }
  if (numberOfErrFiles == 0) {
    result.setResult(true);
    result.setNrErrors(0);
  }
 else {
    result.setNrErrors(numberOfErrFiles);
    result.setResult(false);
  }
  return result;
}
