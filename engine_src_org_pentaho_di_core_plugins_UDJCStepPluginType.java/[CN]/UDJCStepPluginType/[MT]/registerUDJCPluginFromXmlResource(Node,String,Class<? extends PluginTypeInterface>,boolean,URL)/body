{
  try {
    String name=getTagContent(pluginNode,"name");
    String id=name.replace(" ","");
    String description=getTagContent(pluginNode,"description");
    String endDir=path.substring(path.indexOf(Const.FILE_SEPARATOR + "plugins"));
    String[] paths=endDir.split(StringEscapeUtils.escapeJava(Const.FILE_SEPARATOR));
    int numLevelsDeep=paths.length - 1;
    StringBuffer iconfileBuf=new StringBuffer(StringUtils.repeat("../",numLevelsDeep));
    iconfileBuf.append("ui/images/sScript.png");
    String iconfile=iconfileBuf.toString().replace("/",File.separator);
    String tooltip=description;
    String category="Scripting";
    String errorHelpfile=getTagOrAttribute(pluginNode,"errorhelpfile");
    String documentationUrl=getTagOrAttribute(pluginNode,"documentation_url");
    String casesUrl=getTagOrAttribute(pluginNode,"cases_url");
    String forumUrl=getTagOrAttribute(pluginNode,"forum_url");
    UserDefinedJavaClassMeta udjcm=new UserDefinedJavaClassMeta();
    udjcm.loadXML(pluginNode,null,(IMetaStore)null);
    Class<? extends UDJCStepBase> udjcStepClass=cookClasses(udjcm);
    if (udjcStepClass == null)     throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.NoValidClassRequested.PLUGINREGISTRY002",udjcm.getName()));
    Node libsnode=XMLHandler.getSubNode(pluginNode,"libraries");
    int nrlibs=XMLHandler.countNodes(libsnode,"library");
    List<String> jarFiles=new ArrayList<String>();
    if (path != null) {
      for (int j=0; j < nrlibs; j++) {
        Node libnode=XMLHandler.getSubNodeByNr(libsnode,"library",j);
        String jarfile=XMLHandler.getTagAttribute(libnode,"name");
        jarFiles.add(new File(path + Const.FILE_SEPARATOR + jarfile).getAbsolutePath());
      }
    }
    String newClassName=createClassNameFromStepName(udjcStepClass.getName());
    if (newClassName.equals("UserDefinedClass")) {
      newClassName="NewUdjc";
    }
    Class<? extends UDJCStepMetaBase> udjcMetaClass=createMetaClass(udjcStepClass.getClassLoader(),udjcm,newClassName);
    Map<String,String> localizedCategories=readPluginLocale(pluginNode,"localized_category","category");
    category=getAlternativeTranslation(category,localizedCategories);
    description=newClassName;
    id=newClassName;
    Map<String,String> localizedTooltips=readPluginLocale(pluginNode,"localized_tooltip","tooltip");
    tooltip=getAlternativeTranslation(tooltip,localizedTooltips);
    if (tooltip == null)     tooltip=description;
    String iconFilename=(path == null) ? iconfile : path + Const.FILE_SEPARATOR + iconfile;
    String errorHelpFileFull=errorHelpfile;
    if (!Const.isEmpty(errorHelpfile))     errorHelpFileFull=(path == null) ? errorHelpfile : path + Const.FILE_SEPARATOR + errorHelpfile;
    Map<Class<?>,String> classMap=new HashMap<Class<?>,String>();
    PluginMainClassType mainClassTypesAnnotation=pluginType.getAnnotation(PluginMainClassType.class);
    classMap.put(mainClassTypesAnnotation.value(),udjcMetaClass.getName());
    PluginExtraClassTypes classTypesAnnotation=pluginType.getAnnotation(PluginExtraClassTypes.class);
    if (classTypesAnnotation != null) {
      for (int i=0; i < classTypesAnnotation.classTypes().length; i++) {
        Class<?> classType=classTypesAnnotation.classTypes()[i];
        String className=getTagOrAttribute(pluginNode,classTypesAnnotation.xmlNodeNames()[i]);
        classMap.put(classType,className);
      }
    }
    Map<Class<?>,String> objectMap=getAdditionalRuntimeObjectTypes();
    for (    Map.Entry<Class<?>,String> entry : objectMap.entrySet()) {
      String clzName=getTagOrAttribute(pluginNode,entry.getValue());
      classMap.put(entry.getKey(),clzName);
    }
    PluginInterface pluginInterface=new Plugin(id.split(","),pluginType,mainClassTypesAnnotation.value(),category,description,description,iconFilename,false,nativePlugin,classMap,jarFiles,errorHelpFileFull,pluginFolder,documentationUrl,casesUrl,forumUrl);
    registry.registerPlugin(pluginType,pluginInterface);
    URLClassLoader ucl=new URLClassLoader(new URL[]{},udjcMetaClass.getClassLoader());
    registry.addClassLoader(ucl,pluginInterface);
    return pluginInterface;
  }
 catch (  Throwable e) {
    throw new KettlePluginException(BaseMessages.getString(PKG,"BasePluginType.RuntimeError.UnableToReadPluginXML.PLUGIN0001"),e);
  }
}
