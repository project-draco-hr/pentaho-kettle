{
  meta=(MergeJoinMeta)smi;
  data=(MergeJoinData)sdi;
  int compare;
  if (first) {
    first=false;
    data.one=getRowFrom(meta.getStepName1());
    data.two=getRowFrom(meta.getStepName2());
    if (!isInputLayoutValid(data.one,data.two)) {
      throw new KettleException(Messages.getString("MergeJoin.Exception.InvalidLayoutDetected"));
    }
    if (data.one != null) {
      data.keyNrs1=new int[meta.getKeyFields1().length];
      for (int i=0; i < data.keyNrs1.length; i++) {
        data.keyNrs1[i]=data.one.searchValueIndex(meta.getKeyFields1()[i]);
        if (data.keyNrs1[i] < 0) {
          String message=Messages.getString("MergeJoin.Exception.UnableToFindFieldInReferenceStream",meta.getKeyFields1()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
    if (data.two != null) {
      data.keyNrs2=new int[meta.getKeyFields2().length];
      for (int i=0; i < data.keyNrs2.length; i++) {
        data.keyNrs2[i]=data.two.searchValueIndex(meta.getKeyFields2()[i]);
        if (data.keyNrs2[i] < 0) {
          String message=Messages.getString("MergeJoin.Exception.UnableToFindFieldInReferenceStream",meta.getKeyFields2()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
    Value v;
    if (data.one != null) {
      data.one_dummy=new Row(data.one);
    }
 else {
      data.one_dummy=new Row(getTransMeta().getStepFields(meta.getStepMeta1()));
    }
    for (int i=0; i < data.one_dummy.size(); ++i) {
      v=data.one_dummy.getValue(i);
      v.setNull();
      data.one_dummy.setValue(i,v);
    }
    if (data.two != null) {
      data.two_dummy=new Row(data.two);
    }
 else {
      data.two_dummy=new Row(getTransMeta().getStepFields(meta.getStepMeta2()));
    }
    for (int i=0; i < data.two_dummy.size(); ++i) {
      v=data.two_dummy.getValue(i);
      v.setNull();
      data.two_dummy.setValue(i,v);
    }
  }
  if (log.isRowLevel())   logRowlevel(Messages.getString("MergeJoin.Log.DataInfo",data.one + "") + data.two);
  if ((data.one == null && data.two == null) || (data.one == null && data.one_optional == false) || (data.two == null && data.two_optional == false)) {
    setOutputDone();
    return false;
  }
  if (data.one == null) {
    compare=-1;
  }
 else {
    if (data.two == null) {
      compare=1;
    }
 else {
      int cmp=data.one.compare(data.two,data.keyNrs1,data.keyNrs2,null,null);
      compare=cmp > 0 ? 1 : cmp < 0 ? -1 : 0;
    }
  }
switch (compare) {
case 0:
    data.one_next=getRowFrom(meta.getStepName1());
  data.two_next=getRowFrom(meta.getStepName2());
int compare1=(data.one_next == null) ? -1 : data.one.compare(data.one_next,data.keyNrs1,data.keyNrs1,null,null);
int compare2=(data.two_next == null) ? -1 : data.two.compare(data.two_next,data.keyNrs2,data.keyNrs2,null,null);
if (compare1 == 0 || compare2 == 0) {
if (data.ones == null) data.ones=new ArrayList();
 else data.ones.clear();
if (data.twos == null) data.twos=new ArrayList();
 else data.twos.clear();
data.ones.add(data.one);
if (compare1 == 0) {
data.ones.add(data.one_next);
for (; ; ) {
  data.one_next=getRowFrom(meta.getStepName1());
  if (0 != ((data.one_next == null) ? -1 : data.one.compare(data.one_next,data.keyNrs1,data.keyNrs1,null,null)))   break;
  data.ones.add(data.one_next);
}
}
data.twos.add(data.two);
if (compare2 == 0) {
data.twos.add(data.two_next);
for (; ; ) {
  data.two_next=getRowFrom(meta.getStepName2());
  if (0 != ((data.two_next == null) ? -1 : data.two.compare(data.two_next,data.keyNrs2,data.keyNrs2,null,null)))   break;
  data.twos.add(data.two_next);
}
}
Iterator one_iter=data.ones.iterator();
while (one_iter.hasNext()) {
Row one=(Row)one_iter.next();
Iterator two_iter=data.twos.iterator();
while (two_iter.hasNext()) {
  Row combi=new Row(one);
  combi.addRow((Row)two_iter.next());
  putRow(combi);
}
}
data.ones.clear();
data.twos.clear();
}
 else {
data.one.addRow(data.two);
putRow(data.one);
}
data.one=data.one_next;
data.two=data.two_next;
break;
case 1:
logDebug("First stream has missing key");
if (data.one_optional == true) {
if (data.two != null) {
Row combi=new Row(data.one_dummy);
combi.addRow(data.two);
putRow(combi);
data.two=getRowFrom(meta.getStepName2());
}
 else if (data.two_optional == false) {
setOutputDone();
return false;
}
 else {
Row combi=new Row(data.one);
combi.addRow(data.two_dummy);
putRow(combi);
data.one=getRowFrom(meta.getStepName1());
}
}
 else if (data.two == null && data.two_optional == true) {
Row combi=new Row(data.one);
combi.addRow(data.two_dummy);
putRow(combi);
data.one=getRowFrom(meta.getStepName1());
}
 else if (data.two != null) {
data.two=getRowFrom(meta.getStepName2());
}
break;
case -1:
logDebug("Second stream has missing key");
if (data.two_optional == true) {
if (data.one != null) {
Row combi=new Row(data.one);
combi.addRow(data.two_dummy);
putRow(combi);
data.one=getRowFrom(meta.getStepName1());
}
 else if (data.one_optional == false) {
setOutputDone();
return false;
}
 else {
Row combi=new Row(data.one_dummy);
combi.addRow(data.two);
putRow(combi);
data.two=getRowFrom(meta.getStepName2());
}
}
 else if (data.one == null && data.one_optional == true) {
Row combi=new Row(data.one_dummy);
combi.addRow(data.two);
putRow(combi);
data.two=getRowFrom(meta.getStepName2());
}
 else if (data.one != null) {
data.one=getRowFrom(meta.getStepName1());
}
break;
default :
logDebug("We shouldn't be here!!");
data.one=getRowFrom(meta.getStepName1());
data.two=getRowFrom(meta.getStepName2());
break;
}
if (checkFeedback(linesRead)) logBasic(Messages.getString("MergeJoin.LineNumber") + linesRead);
return true;
}
