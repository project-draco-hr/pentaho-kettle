{
  List<String> groupFields=new ArrayList<String>();
  List<String> aggFields=new ArrayList<String>();
  List<String> aggSubjects=new ArrayList<String>();
  List<Integer> aggTypes=new ArrayList<Integer>();
  List<String> aggValues=new ArrayList<String>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null)     continue;
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case GROUP_FIELDS:
{
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry == Entry.GROUP_FIELD) {
            String groupFieldname=null;
            List<StepInjectionMetaEntry> entries=lookField.getDetails();
            for (            StepInjectionMetaEntry entry : entries) {
              Entry metaEntry=Entry.findEntry(entry.getKey());
              if (metaEntry != null) {
                String value=(String)entry.getValue();
switch (metaEntry) {
case GROUP_FIELDNAME:
                  groupFieldname=value;
                break;
            }
          }
        }
        groupFields.add(groupFieldname);
      }
    }
  }
break;
case AGG_FIELDS:
{
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
  Entry fieldEntry=Entry.findEntry(lookField.getKey());
  if (fieldEntry == Entry.AGG_FIELD) {
    String aggFieldname=null;
    String aggSubject=null;
    int aggType=-1;
    String aggValue=null;
    List<StepInjectionMetaEntry> entries=lookField.getDetails();
    for (    StepInjectionMetaEntry entry : entries) {
      Entry metaEntry=Entry.findEntry(entry.getKey());
      if (metaEntry != null) {
        String value=(String)entry.getValue();
switch (metaEntry) {
case AGG_FIELDNAME:
          aggFieldname=value;
        break;
case AGG_SUBJECT:
      aggSubject=value;
    break;
case AGG_TYPE:
  aggType=GroupByMeta.getType(value);
break;
case AGG_VALUE:
aggValue=value;
break;
}
}
}
aggFields.add(aggFieldname);
aggSubjects.add(aggSubject);
aggTypes.add(aggType);
aggValues.add(aggValue);
}
}
}
break;
case PASS_ALL_ROWS:
meta.setPassAllRows("Y".equalsIgnoreCase(lookValue));
break;
case TEMP_DIRECTORY:
meta.setDirectory(lookValue);
break;
case TEMP_FILE_PREFIX:
meta.setPrefix(lookValue);
break;
case GROUP_LINE_NUMBER_ENABLED:
meta.setAddingLineNrInGroup("Y".equalsIgnoreCase(lookValue));
break;
case GROUP_LINE_NUMBER_FIELDNAME:
meta.setLineNrInGroupField(lookValue);
break;
case ALLWAYS_PASS_A_ROW:
meta.setAlwaysGivingBackOneRow("Y".equalsIgnoreCase(lookValue));
break;
}
}
if (groupFields.size() > 0) {
meta.setGroupField(groupFields.toArray(new String[groupFields.size()]));
}
if (aggFields.size() > 0) {
meta.setAggregateField(aggFields.toArray(new String[aggFields.size()]));
meta.setSubjectField(aggSubjects.toArray(new String[aggSubjects.size()]));
int[] types=new int[aggTypes.size()];
for (int i=0; i < types.length; i++) {
types[i]=aggTypes.get(i);
}
meta.setAggregateType(types);
meta.setValueField(aggValues.toArray(new String[aggValues.size()]));
}
}
