{
  try {
    String stype=XMLHandler.getTagValue(entrynode,"type");
    PluginRegistry registry=PluginRegistry.getInstance();
    PluginInterface jobPlugin=registry.findPluginWithId(JobEntryPluginType.class,stype);
    if (jobPlugin == null) {
      throw new KettlePluginLoaderException(stype,"No valid step/plugin specified (jobPlugin=null) for " + stype);
    }
    entry=registry.loadClass(jobPlugin,JobEntryInterface.class);
    if (entry != null) {
      entry.setPluginId(jobPlugin.getIds()[0]);
      entry.setMetaStore(metaStore);
      entry.loadXML(entrynode,databases,slaveServers,rep,metaStore);
      compatibleLoadXml(entrynode,databases,slaveServers,rep);
      setNr(Const.toInt(XMLHandler.getTagValue(entrynode,"nr"),0));
      setLaunchingInParallel("Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"parallel")));
      setDrawn("Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"draw")));
      int x=Const.toInt(XMLHandler.getTagValue(entrynode,"xloc"),0);
      int y=Const.toInt(XMLHandler.getTagValue(entrynode,"yloc"),0);
      setLocation(x,y);
      attributesMap=AttributesUtil.loadAttributes(XMLHandler.getSubNode(entrynode,AttributesUtil.XML_TAG));
    }
  }
 catch (  Throwable e) {
    String message="Unable to read Job Entry copy info from XML node : " + e.toString();
    throw new KettleXMLException(message,e);
  }
}
