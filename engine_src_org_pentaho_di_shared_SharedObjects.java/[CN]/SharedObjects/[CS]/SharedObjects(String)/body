{
  try {
    this.filename=createFilename(sharedObjectsFile);
    this.objectsMap=new Hashtable<SharedEntry,SharedObjectInterface>();
    LogChannel log=new LogChannel(this);
    FileObject file=getFileObjectFromKettleVFS(filename);
    if (file.exists()) {
      Document document=XMLHandler.loadXMLFile(file);
      Node sharedObjectsNode=XMLHandler.getSubNode(document,XML_TAG);
      if (sharedObjectsNode != null) {
        List<SlaveServer> privateSlaveServers=new ArrayList<SlaveServer>();
        List<DatabaseMeta> privateDatabases=new ArrayList<DatabaseMeta>();
        NodeList childNodes=sharedObjectsNode.getChildNodes();
        for (int i=0; i < childNodes.getLength(); i++) {
          Node node=childNodes.item(i);
          String nodeName=node.getNodeName();
          SharedObjectInterface isShared=null;
          if (nodeName.equals(DatabaseMeta.XML_TAG)) {
            try {
              DatabaseMeta sharedDatabaseMeta=new DatabaseMeta(node);
              isShared=sharedDatabaseMeta;
              privateDatabases.add(sharedDatabaseMeta);
            }
 catch (            KettleXMLException kxe) {
              Throwable firstCause=kxe.getCause();
              if (firstCause != null) {
                Throwable secondCause=firstCause.getCause();
                if (secondCause == null || !(secondCause instanceof KettleDatabaseException)) {
                  throw kxe;
                }
 else {
                  log.logBasic(kxe.getLocalizedMessage());
                }
              }
 else {
                throw kxe;
              }
            }
          }
 else           if (nodeName.equals(SlaveServer.XML_TAG)) {
            SlaveServer sharedSlaveServer=new SlaveServer(node);
            isShared=sharedSlaveServer;
            privateSlaveServers.add(sharedSlaveServer);
          }
          if (isShared != null) {
            isShared.setShared(true);
            storeObject(isShared);
          }
        }
        for (int i=0; i < childNodes.getLength(); i++) {
          Node node=childNodes.item(i);
          String nodeName=node.getNodeName();
          SharedObjectInterface isShared=null;
          if (nodeName.equals(StepMeta.XML_TAG)) {
            StepMeta stepMeta=new StepMeta(node,privateDatabases,(IMetaStore)null);
            stepMeta.setDraw(false);
            isShared=stepMeta;
          }
 else           if (nodeName.equals(PartitionSchema.XML_TAG)) {
            isShared=new PartitionSchema(node);
          }
 else           if (nodeName.equals(ClusterSchema.XML_TAG)) {
            isShared=new ClusterSchema(node,privateSlaveServers);
          }
          if (isShared != null) {
            isShared.setShared(true);
            storeObject(isShared);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"SharedOjects.Readingfile.UnexpectedError",sharedObjectsFile),e);
  }
}
