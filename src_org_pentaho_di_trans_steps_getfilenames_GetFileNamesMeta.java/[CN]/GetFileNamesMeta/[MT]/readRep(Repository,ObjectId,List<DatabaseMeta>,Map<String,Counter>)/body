{
  try {
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    fileTypeFilter=FileInputList.FileTypeFilter.getByName(rep.getStepAttributeString(id_step,"filterfiletype"));
    dynamicFilenameField=rep.getStepAttributeString(id_step,"filename_Field");
    dynamicWildcardField=rep.getStepAttributeString(id_step,"wildcard_Field");
    dynamicExcludeWildcardField=rep.getStepAttributeString(id_step,"exclude_wildcard_Field");
    dynamicIncludeSubFolders=rep.getStepAttributeBoolean(id_step,"dynamic_include_subfolders");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    isaddresult=rep.getStepAttributeBoolean(id_step,rep.getStepAttributeString(id_step,"isaddresult"));
    filefield=rep.getStepAttributeBoolean(id_step,"filefield");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    allocate(nrfiles);
    for (int i=0; i < nrfiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i]))       fileRequired[i]=NO;
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i]))       includeSubFolders[i]=NO;
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
