{
  try {
    Node filternode=XMLHandler.getSubNode(stepnode,"filter");
    Node filterfiletypenode=XMLHandler.getSubNode(filternode,"filterfiletype");
    fileTypeFilter=FileInputList.FileTypeFilter.getByName(XMLHandler.getNodeValue(filterfiletypenode));
    includeRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    isaddresult="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"isaddresult"));
    filefield="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"filefield"));
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    dynamicFilenameField=XMLHandler.getTagValue(stepnode,"filename_Field");
    dynamicWildcardField=XMLHandler.getTagValue(stepnode,"wildcard_Field");
    dynamicIncludeSubFolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include_subfolders"));
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0L);
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    int nrfiles=XMLHandler.countNodes(filenode,"name");
    allocate(nrfiles);
    for (int i=0; i < nrfiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      Node fileRequirednode=XMLHandler.getSubNodeByNr(filenode,"file_required",i);
      Node includeSubFoldersnode=XMLHandler.getSubNodeByNr(filenode,"include_subfolders",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
      fileRequired[i]=XMLHandler.getNodeValue(fileRequirednode);
      includeSubFolders[i]=XMLHandler.getNodeValue(includeSubFoldersnode);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
