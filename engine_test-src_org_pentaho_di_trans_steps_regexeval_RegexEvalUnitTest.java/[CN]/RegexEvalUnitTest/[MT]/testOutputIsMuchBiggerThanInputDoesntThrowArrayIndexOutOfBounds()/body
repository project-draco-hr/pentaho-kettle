{
  RegexEval regexEval=new RegexEval(stepMockHelper.stepMeta,stepMockHelper.stepDataInterface,0,stepMockHelper.transMeta,stepMockHelper.trans);
  when(stepMockHelper.processRowsStepMetaInterface.isAllowCaptureGroupsFlagSet()).thenReturn(true);
  String[] outFields=new String[]{"a","b","c","d","e","f","g","h","i","j","k"};
  when(stepMockHelper.processRowsStepMetaInterface.getFieldName()).thenReturn(outFields);
  when(stepMockHelper.processRowsStepMetaInterface.getMatcher()).thenReturn("\\.+");
  stepMockHelper.processRowsStepDataInterface.pattern=Pattern.compile("(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)");
  Object[] inputRow=new Object[]{};
  RowSet inputRowSet=stepMockHelper.getMockInputRowSet(inputRow);
  RowMetaInterface mockInputRowMeta=mock(RowMetaInterface.class);
  RowMetaInterface mockOutputRoMeta=mock(RowMetaInterface.class);
  when(mockOutputRoMeta.size()).thenReturn(outFields.length);
  when(mockInputRowMeta.size()).thenReturn(0);
  when(inputRowSet.getRowMeta()).thenReturn(mockInputRowMeta);
  when(mockInputRowMeta.clone()).thenReturn(mockOutputRoMeta);
  when(mockInputRowMeta.isNull(any(Object[].class),anyInt())).thenReturn(true);
  regexEval.getInputRowSets().add(inputRowSet);
  regexEval.init(stepMockHelper.initStepMetaInterface,stepMockHelper.initStepDataInterface);
  regexEval.processRow(stepMockHelper.processRowsStepMetaInterface,stepMockHelper.processRowsStepDataInterface);
}
