{
  if (level > 5)   return;
  if (stepPluginPackages == null) {
    stepPluginPackages=StepLoader.getInstance().getPluginPackages();
  }
  if (jobEntryPluginPackages == null) {
    jobEntryPluginPackages=JobEntryLoader.getInstance().getPluginPackages();
  }
  Class<? extends Object> baseClass=object.getClass();
  Field[] fields=baseClass.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    boolean processThisOne=true;
    if ((field.getModifiers() & Modifier.FINAL) > 0)     processThisOne=false;
    if ((field.getModifiers() & Modifier.STATIC) > 0)     processThisOne=false;
    if (field.toString().indexOf("Interface") >= 0) {
      System.out.println("OK");
    }
    if (field.toString().indexOf("attributes") >= 0) {
      System.out.println("OK");
    }
    boolean sanctionedPackage=false;
    if (field.toString().indexOf(LOCAL_PACKAGE) >= 0)     sanctionedPackage=true;
    for (int x=0; x < JAVA_PACKAGES.length && !sanctionedPackage; x++) {
      if (field.toString().indexOf(JAVA_PACKAGES[x]) >= 0) {
        sanctionedPackage=true;
      }
    }
    for (int x=0; x < stepPluginPackages.length && !sanctionedPackage; x++) {
      if (field.toString().indexOf(stepPluginPackages[x]) >= 0)       sanctionedPackage=true;
    }
    for (int x=0; x < jobEntryPluginPackages.length && !sanctionedPackage; x++) {
      if (field.toString().indexOf(jobEntryPluginPackages[x]) >= 0)       sanctionedPackage=true;
    }
    if (!sanctionedPackage)     processThisOne=false;
    if (processThisOne) {
      try {
        Object obj=field.get(object);
        if (obj != null) {
          stringSearchInObject(obj,level,stringList,parentObject,grandParentObject,field);
        }
      }
 catch (      IllegalAccessException e) {
        Method method=findMethod(baseClass,field.getName());
        if (method != null) {
          String fullMethod=baseClass.getName() + "." + method.getName()+ "()";
          try {
            Object string=method.invoke(object,(Object[])null);
            if (string != null) {
              stringSearchInObject(string,level,stringList,parentObject,grandParentObject,field);
            }
          }
 catch (          Exception ex) {
            LogWriter.getInstance().logDebug("StringSearcher",Const.rightPad(" ",level) + "    Unable to get access to method " + fullMethod+ " : "+ e.toString());
          }
        }
      }
    }
  }
}
