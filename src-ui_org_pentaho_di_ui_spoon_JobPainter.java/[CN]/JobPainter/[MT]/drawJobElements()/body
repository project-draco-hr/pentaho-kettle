{
  if (!shadow && gridSize > 1) {
    drawGrid();
  }
  gc.setFont(EFont.NOTE);
  for (int i=0; i < jobMeta.nrNotes(); i++) {
    NotePadMeta ni=jobMeta.getNote(i);
    drawNote(ni);
  }
  gc.setFont(EFont.GRAPH);
  for (int i=0; i < jobMeta.nrJobHops(); i++) {
    JobHopMeta hi=jobMeta.getJobHop(i);
    drawJobHop(hi,false);
  }
  if (candidate != null) {
    drawJobHop(candidate,true);
  }
 else {
    if (startHopEntry != null && endHopLocation != null) {
      Point fr=startHopEntry.getLocation();
      Point to=endHopLocation;
      if (endHopEntry == null) {
        gc.setForeground(EColor.GRAY);
      }
 else {
        gc.setForeground(EColor.BLUE);
      }
      drawArrow(fr.x + iconsize / 2,fr.y + iconsize / 2,to.x,to.y,theta,calcArrowLength(),1.2,null,startHopEntry,endHopEntry == null ? endHopLocation : endHopEntry);
    }
 else     if (endHopEntry != null && endHopLocation != null) {
      Point fr=endHopLocation;
      Point to=endHopEntry.getLocation();
      if (startHopEntry == null) {
        gc.setForeground(EColor.GRAY);
      }
 else {
        gc.setForeground(EColor.BLUE);
      }
      drawArrow(fr.x,fr.y,to.x + iconsize / 2,to.y + iconsize / 2,theta,calcArrowLength(),1.2,null,startHopEntry == null ? endHopLocation : startHopEntry,endHopEntry);
    }
  }
  for (int j=0; j < jobMeta.nrJobEntries(); j++) {
    JobEntryCopy je=jobMeta.getJobEntry(j);
    drawJobEntryCopy(je);
  }
  if (noInputEntry != null) {
    gc.setLineWidth(2);
    gc.setForeground(EColor.RED);
    Point n=noInputEntry.getLocation();
    gc.drawLine(n.x - 5,n.y - 5,n.x + iconsize + 10,n.y + iconsize + 10);
    gc.drawLine(n.x - 5,n.y + iconsize + 5,n.x + iconsize + 5,n.y - 5);
  }
  if (drop_candidate != null) {
    gc.setLineStyle(ELineStyle.SOLID);
    gc.setForeground(EColor.BLACK);
    Point screen=real2screen(drop_candidate.x,drop_candidate.y,offset);
    gc.drawRectangle(screen.x,screen.y,iconsize,iconsize);
  }
  if (!shadow) {
    drawRect(selrect);
  }
}
