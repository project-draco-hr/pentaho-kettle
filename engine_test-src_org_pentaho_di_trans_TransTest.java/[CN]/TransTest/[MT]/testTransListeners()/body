{
  TransMeta TransMeta=new TransMeta();
  StepMeta oldFormStep=new StepMeta();
  oldFormStep.setName("Generate_1");
  StepMeta newFormStep=new StepMeta();
  newFormStep.setName("Generate_2");
  StepMeta toStep=new StepMeta();
  toStep.setStepMetaInterface(new MetaInjectMeta());
  toStep.setName("ETL Inject Metadata");
  StepMeta deletedStep=new StepMeta();
  deletedStep.setStepMetaInterface(new MetaInjectMeta());
  deletedStep.setName("ETL Inject Metadata for delete");
  TransMeta.addStep(oldFormStep);
  TransMeta.addStep(toStep);
  TransMeta.addStep(deletedStep);
  assertEquals(TransMeta.nrStepChangeListeners(),2);
  TransMeta.removeStepChangeListener((StepMetaChangeListenerInterface)deletedStep.getStepMetaInterface());
  assertEquals(TransMeta.nrStepChangeListeners(),1);
  TransMeta.removeStep(2);
  TransHopMeta hi=new TransHopMeta(oldFormStep,toStep);
  TransMeta.addTransHop(hi);
  MetaInjectMeta toMeta=(MetaInjectMeta)toStep.getStepMetaInterface();
  Map<TargetStepAttribute,SourceStepField> sourceMapping=new HashMap<TargetStepAttribute,SourceStepField>();
  TargetStepAttribute keyTest=new TargetStepAttribute("File","key",true);
  SourceStepField valueTest=new SourceStepField(oldFormStep.getName(),oldFormStep.getName());
  sourceMapping.put(keyTest,valueTest);
  toMeta.setTargetSourceMapping(sourceMapping);
  TransMeta.notifyAllListeners(oldFormStep,newFormStep);
  sourceMapping=toMeta.getTargetSourceMapping();
  for (  Entry<TargetStepAttribute,SourceStepField> entry : sourceMapping.entrySet()) {
    SourceStepField value=entry.getValue();
    if (!value.getStepname().equals(newFormStep.getName())) {
      fail();
    }
  }
  TransMeta.addStep(1,deletedStep);
  assertEquals(TransMeta.nrSteps(),3);
  assertEquals(TransMeta.nrStepChangeListeners(),2);
  TransMeta.removeStep(0);
  assertEquals(TransMeta.nrSteps(),2);
}
