{
  RowMetaInterface rowMeta=new RowMeta();
  Object[] rowData=RowDataUtil.allocateRowData(meta.getFieldName().length);
  for (int i=0; i < meta.getFieldName().length; i++) {
    int valtype=ValueMeta.getType(meta.getFieldType()[i]);
    if (meta.getFieldName()[i] != null) {
      ValueMetaInterface valueMeta=new ValueMeta(meta.getFieldName()[i],valtype);
      valueMeta.setLength(meta.getFieldLength()[i]);
      valueMeta.setPrecision(meta.getFieldPrecision()[i]);
      valueMeta.setConversionMask(meta.getFieldFormat()[i]);
      valueMeta.setGroupingSymbol(meta.getGroup()[i]);
      valueMeta.setDecimalSymbol(meta.getDecimal()[i]);
      ValueMetaInterface stringMeta=(ValueMetaInterface)valueMeta.clone();
      stringMeta.setType(ValueMetaInterface.TYPE_STRING);
      String stringValue=meta.getValue()[i];
      if (Const.isEmpty(stringValue)) {
        rowData[i]=null;
        if (valueMeta.getType() == ValueMetaInterface.TYPE_NONE) {
          String message=Messages.getString("RowGenerator.CheckResult.SpecifyTypeError",valueMeta.getName(),stringValue);
          remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
        }
      }
 else {
        try {
          rowData[i]=valueMeta.convertData(stringMeta,stringValue);
        }
 catch (        KettleValueException e) {
switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
{
              String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Number",valueMeta.getName(),stringValue,e.toString());
              remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
            }
          break;
case ValueMetaInterface.TYPE_DATE:
{
          String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Date",valueMeta.getName(),stringValue,e.toString());
          remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
        }
      break;
case ValueMetaInterface.TYPE_INTEGER:
{
      String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Integer",valueMeta.getName(),stringValue,e.toString());
      remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
    }
  break;
case ValueMetaInterface.TYPE_BIGNUMBER:
{
  String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.BigNumber",valueMeta.getName(),stringValue,e.toString());
  remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
}
break;
default :
{
String message=Messages.getString("RowGenerator.CheckResult.SpecifyTypeError",valueMeta.getName(),stringValue);
remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
}
break;
}
}
}
rowMeta.addValueMeta(valueMeta);
}
}
return new RowMetaAndData(rowMeta,rowData);
}
