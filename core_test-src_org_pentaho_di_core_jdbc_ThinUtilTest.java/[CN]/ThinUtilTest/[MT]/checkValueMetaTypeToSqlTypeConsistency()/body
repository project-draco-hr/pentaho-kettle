{
class TypeMap {
    ValueMetaInterface valueMeta;
    int sqlType;
    String sqlDesc;
    TypeMap(    int valueMetaType,    int sqlType,    String desc){
      this.valueMeta=mock(ValueMetaInterface.class);
      when(valueMeta.getType()).thenReturn(valueMetaType);
      this.sqlType=sqlType;
      this.sqlDesc=desc;
    }
  }
  TypeMap[] typeMaps=new TypeMap[]{new TypeMap(ValueMetaInterface.TYPE_STRING,Types.VARCHAR,"VARCHAR"),new TypeMap(ValueMetaInterface.TYPE_DATE,Types.TIMESTAMP,"TIMESTAMP"),new TypeMap(ValueMetaInterface.TYPE_INTEGER,Types.BIGINT,"BIGINT"),new TypeMap(ValueMetaInterface.TYPE_NUMBER,Types.DOUBLE,"DOUBLE"),new TypeMap(ValueMetaInterface.TYPE_BIGNUMBER,Types.DECIMAL,"DECIMAL"),new TypeMap(ValueMetaInterface.TYPE_BOOLEAN,Types.BOOLEAN,"BOOLEAN"),new TypeMap(ValueMetaInterface.TYPE_BINARY,Types.BLOB,"BLOB"),new TypeMap(ValueMetaInterface.TYPE_NONE,Types.OTHER,"OTHER")};
  for (  TypeMap map : typeMaps) {
    assertEquals(map.sqlDesc,ThinUtil.getSqlTypeDesc(map.valueMeta));
    assertEquals(map.sqlType,ThinUtil.getSqlType(map.valueMeta));
    assertEquals(map.valueMeta.getType(),ThinUtil.getValueMeta("test",map.sqlType).getType());
  }
}
