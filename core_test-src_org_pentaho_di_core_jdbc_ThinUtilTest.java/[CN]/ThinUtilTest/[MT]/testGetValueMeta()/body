{
  ValueMetaInterface testValue;
  String expectedName="testName";
  testValue=ThinUtil.getValueMeta(expectedName,Types.BIGINT);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_INTEGER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.INTEGER);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_INTEGER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.SMALLINT);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_INTEGER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.CHAR);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_STRING,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.VARCHAR);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_STRING,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.CLOB);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_STRING,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.DATE);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_DATE,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.TIMESTAMP);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_DATE,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.TIME);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_DATE,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.DECIMAL);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_BIGNUMBER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.DOUBLE);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_NUMBER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.FLOAT);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_NUMBER,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.BOOLEAN);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_BOOLEAN,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.BIT);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_BOOLEAN,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.BINARY);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_BINARY,testValue.getType());
  testValue=ThinUtil.getValueMeta(expectedName,Types.BLOB);
  assertEquals(expectedName,testValue.getName());
  assertEquals(ValueMetaInterface.TYPE_BINARY,testValue.getType());
  try {
    testValue=ThinUtil.getValueMeta(expectedName,Integer.MIN_VALUE);
    fail();
  }
 catch (  SQLException expected) {
  }
}
