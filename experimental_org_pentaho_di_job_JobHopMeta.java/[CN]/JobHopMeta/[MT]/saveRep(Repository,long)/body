{
  try {
    long id_jobentry_from=-1, id_jobentry_to=-1;
    id_jobentry_from=from_entry == null ? -1 : from_entry.getID();
    id_jobentry_to=to_entry == null ? -1 : to_entry.getID();
    setID(rep.insertJobHop(id_job,id_jobentry_from,id_jobentry_to,enabled,evaluation,unconditional));
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save job hop with id_job = " + id_job,dbe);
  }
}
