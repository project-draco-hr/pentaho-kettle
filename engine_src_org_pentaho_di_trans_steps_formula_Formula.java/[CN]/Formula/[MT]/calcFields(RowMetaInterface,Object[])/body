{
  try {
    Object[] outputRowData=RowDataUtil.createResizedCopy(r,data.outputRowMeta.size());
    int tempIndex=rowMeta.size();
    data.context.setRowData(outputRowData);
    if (data.formulas == null) {
      data.formulas=new org.pentaho.reporting.libraries.formula.Formula[meta.getFormula().length];
      for (int i=0; i < meta.getFormula().length; i++) {
        FormulaMetaFunction fn=meta.getFormula()[i];
        if (!Const.isEmpty(fn.getFieldName())) {
          data.formulas[i]=data.createFormula(meta.getFormula()[i].getFormula());
        }
 else {
          throw new KettleException("Unable to find field name for formula [" + Const.NVL(fn.getFormula(),"") + "]");
        }
      }
    }
    for (int i=0; i < meta.getFormula().length; i++) {
      FormulaMetaFunction fn=meta.getFormula()[i];
      if (!Const.isEmpty(fn.getFieldName())) {
        if (data.formulas[i] == null) {
          data.formulas[i]=data.createFormula(meta.getFormula()[i].getFormula());
        }
        Object value=null;
        Object formulaResult=data.formulas[i].evaluate();
        if (data.returnType[i] < 0) {
          if (formulaResult instanceof String) {
            data.returnType[i]=FormulaData.RETURN_TYPE_STRING;
            if (fn.getValueType() != ValueMetaInterface.TYPE_STRING) {
              throw new KettleValueException("Please specify a String type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof Number) {
            data.returnType[i]=FormulaData.RETURN_TYPE_NUMBER;
            if (fn.getValueType() != ValueMetaInterface.TYPE_NUMBER) {
              throw new KettleValueException("Please specify a Number type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof Integer) {
            data.returnType[i]=FormulaData.RETURN_TYPE_INTEGER;
            if (fn.getValueType() != ValueMetaInterface.TYPE_INTEGER) {
              throw new KettleValueException("Please specify an Integer type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof Long) {
            data.returnType[i]=FormulaData.RETURN_TYPE_LONG;
            if (fn.getValueType() != ValueMetaInterface.TYPE_INTEGER) {
              throw new KettleValueException("Please specify an Integer type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof Date) {
            data.returnType[i]=FormulaData.RETURN_TYPE_DATE;
            if (fn.getValueType() != ValueMetaInterface.TYPE_DATE) {
              throw new KettleValueException("Please specify a Date type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof BigDecimal) {
            data.returnType[i]=FormulaData.RETURN_TYPE_BIGDECIMAL;
            if (fn.getValueType() != ValueMetaInterface.TYPE_BIGNUMBER) {
              throw new KettleValueException("Please specify a BigNumber type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof byte[]) {
            data.returnType[i]=FormulaData.RETURN_TYPE_BYTE_ARRAY;
            if (fn.getValueType() != ValueMetaInterface.TYPE_BINARY) {
              throw new KettleValueException("Please specify a Binary type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else           if (formulaResult instanceof Boolean) {
            data.returnType[i]=FormulaData.RETURN_TYPE_BOOLEAN;
            if (fn.getValueType() != ValueMetaInterface.TYPE_BOOLEAN) {
              throw new KettleValueException("Please specify a Boolean type for field [" + fn.getFieldName() + "] as a result of formula ["+ fn.getFormula()+ "]");
            }
          }
 else {
            data.returnType[i]=FormulaData.RETURN_TYPE_STRING;
          }
        }
switch (data.returnType[i]) {
case FormulaData.RETURN_TYPE_STRING:
          if (formulaResult != null) {
            value=formulaResult.toString();
          }
 else {
            value=null;
          }
        break;
case FormulaData.RETURN_TYPE_NUMBER:
      value=new Double(((Number)formulaResult).doubleValue());
    break;
case FormulaData.RETURN_TYPE_INTEGER:
  value=new Long(((Integer)formulaResult).intValue());
break;
case FormulaData.RETURN_TYPE_LONG:
value=formulaResult;
break;
case FormulaData.RETURN_TYPE_DATE:
value=formulaResult;
break;
case FormulaData.RETURN_TYPE_BIGDECIMAL:
value=formulaResult;
break;
case FormulaData.RETURN_TYPE_BYTE_ARRAY:
value=formulaResult;
break;
case FormulaData.RETURN_TYPE_BOOLEAN:
value=formulaResult;
break;
default :
value=null;
}
if (data.replaceIndex[i] < 0) {
outputRowData[tempIndex++]=value;
}
 else {
outputRowData[data.replaceIndex[i]]=value;
}
}
}
return outputRowData;
}
 catch (Throwable e) {
throw new KettleValueException(e);
}
}
