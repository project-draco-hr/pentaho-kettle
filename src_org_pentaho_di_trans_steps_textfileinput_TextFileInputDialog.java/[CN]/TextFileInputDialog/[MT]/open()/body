{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("TextFileInputDialog.DialogTitle"));
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(Messages.getString("System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  addFilesTab();
  addContentTab();
  addErrorTab();
  addFiltersTabs();
  addFieldsTabs();
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(Messages.getString("TextFileInputDialog.Preview.Button"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wPreview,wCancel},margin,wTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsFirst=new Listener(){
    public void handleEvent(    Event e){
      first(false);
    }
  }
;
  lsFirstHeader=new Listener(){
    public void handleEvent(    Event e){
      first(true);
    }
  }
;
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wFirst.addListener(SWT.Selection,lsFirst);
  wFirstHeader.addListener(SWT.Selection,lsFirstHeader);
  wGet.addListener(SWT.Selection,lsGet);
  wPreview.addListener(SWT.Selection,lsPreview);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wAccFilenames.addSelectionListener(lsDef);
  wStepname.addSelectionListener(lsDef);
  wSeparator.addSelectionListener(lsDef);
  wLimit.addSelectionListener(lsDef);
  wInclRownumField.addSelectionListener(lsDef);
  wInclFilenameField.addSelectionListener(lsDef);
  wNrHeader.addSelectionListener(lsDef);
  wNrFooter.addSelectionListener(lsDef);
  wNrWraps.addSelectionListener(lsDef);
  wWarnDestDir.addSelectionListener(lsDef);
  wWarnExt.addSelectionListener(lsDef);
  wErrorDestDir.addSelectionListener(lsDef);
  wErrorExt.addSelectionListener(lsDef);
  wLineNrDestDir.addSelectionListener(lsDef);
  wLineNrExt.addSelectionListener(lsDef);
  wAccField.addSelectionListener(lsDef);
  SelectionAdapter selA=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      wFilenameList.add(new String[]{wFilename.getText(),wFilemask.getText()});
      wFilename.setText("");
      wFilemask.setText("");
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
      wFilenameList.optWidth(true);
    }
  }
;
  wbaFilename.addSelectionListener(selA);
  wFilename.addSelectionListener(selA);
  wbdFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx[]=wFilenameList.getSelectionIndices();
      wFilenameList.remove(idx);
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbeFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx=wFilenameList.getSelectionIndex();
      if (idx >= 0) {
        String string[]=wFilenameList.getItem(idx);
        wFilename.setText(string[0]);
        wFilemask.setText(string[1]);
        wFilenameList.remove(idx);
      }
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbShowFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      showFiles();
    }
  }
);
  wbSeparator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      wSeparator.insert("\t");
    }
  }
);
  SelectionAdapter lsFlags=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFlags();
    }
  }
;
  wInclFilename.addSelectionListener(lsFlags);
  wInclRownum.addSelectionListener(lsFlags);
  wRownumByFile.addSelectionListener(lsFlags);
  wErrorIgnored.addSelectionListener(lsFlags);
  wHeader.addSelectionListener(lsFlags);
  wFooter.addSelectionListener(lsFlags);
  wWraps.addSelectionListener(lsFlags);
  wLayoutPaged.addSelectionListener(lsFlags);
  wAccFilenames.addSelectionListener(lsFlags);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (wFilemask.getText() != null && wFilemask.getText().length() > 0) {
        DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
        if (wFilename.getText() != null) {
          String fpath=transMeta.environmentSubstitute(wFilename.getText());
          dialog.setFilterPath(fpath);
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath();
          wFilename.setText(str);
        }
      }
 else {
        FileDialog dialog=new FileDialog(shell,SWT.OPEN);
        if (!wCompression.getText().equals("None")) {
          dialog.setFilterExtensions(new String[]{"*.zip;*.gz","*.txt;*.csv","*.csv","*.txt","*"});
        }
 else {
          dialog.setFilterExtensions(new String[]{"*.txt;*.csv","*.csv","*.txt","*"});
        }
        if (wFilename.getText() != null) {
          String fname=transMeta.environmentSubstitute(wFilename.getText());
          dialog.setFileName(fname);
        }
        if (!wCompression.getText().equals("None")) {
          dialog.setFilterNames(new String[]{Messages.getString("System.FileType.ZIPFiles"),Messages.getString("TextFileInputDialog.FileType.TextAndCSVFiles"),Messages.getString("System.FileType.CSVFiles"),Messages.getString("System.FileType.TextFiles"),Messages.getString("System.FileType.AllFiles")});
        }
 else {
          dialog.setFilterNames(new String[]{Messages.getString("TextFileInputDialog.FileType.TextAndCSVFiles"),Messages.getString("System.FileType.CSVFiles"),Messages.getString("System.FileType.TextFiles"),Messages.getString("System.FileType.AllFiles")});
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName();
          wFilename.setText(str);
        }
      }
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  getData(input);
  setSize();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
