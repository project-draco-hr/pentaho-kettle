{
  TextFileInputMeta meta=new TextFileInputMeta();
  getInfo(meta);
  FileInputList textFileList=meta.getTextFileList();
  InputStream fileInputStream=null;
  ZipInputStream zipInputStream=null;
  GZIPInputStream gzipInputStream=null;
  InputStream inputStream=null;
  StringBuffer lineStringBuffer=new StringBuffer(256);
  int fileFormatType=meta.getFileFormatTypeNr();
  if (textFileList.nrOfFiles() > 0) {
    int clearFields=meta.hasHeader() ? SWT.YES : SWT.NO;
    int nrInputFields=meta.getInputFields().length;
    if (meta.hasHeader() && nrInputFields > 0) {
      MessageBox mb=new MessageBox(shell,SWT.YES | SWT.NO | SWT.ICON_QUESTION);
      mb.setMessage(Messages.getString("TextFileInputDialog.ClearFieldList.DialogMessage"));
      mb.setText(Messages.getString("TextFileInputDialog.ClearFieldList.DialogTitle"));
      clearFields=mb.open();
    }
    try {
      if (clearFields == SWT.YES) {
        wFields.table.removeAll();
      }
      FileObject fileObject=textFileList.getFile(0);
      fileInputStream=fileObject.getContent().getInputStream();
      Table table=wFields.table;
      if (meta.getFileCompression().equals("Zip")) {
        zipInputStream=new ZipInputStream(fileInputStream);
        zipInputStream.getNextEntry();
        inputStream=zipInputStream;
      }
 else       if (meta.getFileCompression().equals("GZip")) {
        gzipInputStream=new GZIPInputStream(fileInputStream);
        inputStream=gzipInputStream;
      }
 else {
        inputStream=fileInputStream;
      }
      InputStreamReader reader;
      if (meta.getEncoding() != null && meta.getEncoding().length() > 0) {
        reader=new InputStreamReader(inputStream,meta.getEncoding());
      }
 else {
        reader=new InputStreamReader(inputStream);
      }
      if (clearFields == SWT.YES || !meta.hasHeader() || nrInputFields > 0) {
        String line=null;
        if (meta.hasHeader() || meta.getInputFields().length == 0) {
          line=TextFileInput.getLine(log,reader,fileFormatType,lineStringBuffer);
          if (line != null) {
            String[] fields=TextFileInput.convertLineToStrings(line,meta);
            for (int i=0; i < fields.length; i++) {
              String field=fields[i];
              if (field == null || field.length() == 0 || (nrInputFields == 0 && !meta.hasHeader())) {
                field="Field" + (i + 1);
              }
 else {
                field=Const.trim(field);
                field=Const.replace(field," ","_");
                field=Const.replace(field,"-","_");
              }
              TableItem item=new TableItem(table,SWT.NONE);
              item.setText(1,field);
              item.setText(2,"String");
              getInfo(meta);
            }
          }
        }
        String shellText=Messages.getString("TextFileInputDialog.LinesToSample.DialogTitle");
        String lineText=Messages.getString("TextFileInputDialog.LinesToSample.DialogMessage");
        EnterNumberDialog end=new EnterNumberDialog(shell,100,shellText,lineText);
        int samples=end.open();
        if (samples >= 0) {
          getInfo(meta);
          TextFileCSVImportProgressDialog pd=new TextFileCSVImportProgressDialog(shell,meta,reader,samples,clearFields);
          String message=pd.open();
          if (message != null) {
            getData(meta);
            wFields.removeEmptyRows();
            wFields.setRowNums();
            wFields.optWidth(true);
            EnterTextDialog etd=new EnterTextDialog(shell,Messages.getString("TextFileInputDialog.ScanResults.DialogTitle"),Messages.getString("TextFileInputDialog.ScanResults.DialogMessage"),message,true);
            etd.setReadOnly();
            etd.open();
          }
        }
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(Messages.getString("TextFileInputDialog.UnableToReadHeaderLine.DialogMessage"));
        mb.setText(Messages.getString("System.Dialog.Error.Title"));
        mb.open();
      }
    }
 catch (    IOException e) {
      new ErrorDialog(shell,Messages.getString("TextFileInputDialog.IOError.DialogTitle"),Messages.getString("TextFileInputDialog.IOError.DialogMessage"),e);
    }
catch (    KettleException e) {
      new ErrorDialog(shell,Messages.getString("System.Dialog.Error.Title"),Messages.getString("TextFileInputDialog.ErrorGettingFileDesc.DialogMessage"),e);
    }
 finally {
      try {
        if (meta.getFileCompression().equals("Zip") && zipInputStream != null) {
          zipInputStream.closeEntry();
          zipInputStream.close();
        }
 else         if (meta.getFileCompression().equals("GZip") && gzipInputStream != null) {
          gzipInputStream.close();
        }
        inputStream.close();
      }
 catch (      Exception e) {
      }
    }
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
    mb.setMessage(Messages.getString("TextFileInputDialog.NoValidFileFound.DialogMessage"));
    mb.setText(Messages.getString("System.Dialog.Error.Title"));
    mb.open();
  }
}
