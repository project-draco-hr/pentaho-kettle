{
  if (kidElementCache != null && !kidElementCache.isEmpty()) {
    return kidElementCache;
  }
  if (kidElementCache == null) {
    kidElementCache=new UIRepositoryObjects();
  }
  for (  UIRepositoryObject child : getChildren()) {
    kidElementCache.add(child);
  }
  List<? extends RepositoryElementMetaInterface> jobsAndTransformations=getDirectory().getRepositoryObjects();
  if (jobsAndTransformations == null || jobsAndTransformations.size() == 0) {
    jobsAndTransformations=rep.getJobAndTransformationObjects(new StringObjectId(getId()),false);
  }
  for (  RepositoryElementMetaInterface child : jobsAndTransformations) {
    if (child.getObjectType().equals(RepositoryObjectType.TRANSFORMATION)) {
      try {
        kidElementCache.add(UIObjectRegistry.getInstance().constructUITransformation(child,this,rep));
      }
 catch (      UIObjectCreationException e) {
        kidElementCache.add(new UITransformation(child,this,rep));
      }
    }
 else     if (child.getObjectType().equals(RepositoryObjectType.JOB)) {
      try {
        kidElementCache.add(UIObjectRegistry.getInstance().constructUIJob(child,this,rep));
      }
 catch (      UIObjectCreationException e) {
        kidElementCache.add(new UIJob(child,this,rep));
      }
    }
  }
  return kidElementCache;
}
