{
  try {
    if (meta.isFileField()) {
      while ((data.readrow == null || ((data.recordLDIF=data.InputLDIF.nextRecord()) == null))) {
        if (!openNextFile())         return null;
      }
    }
 else {
      while ((data.file == null) || ((data.recordLDIF=data.InputLDIF.nextRecord()) == null)) {
        if (!openNextFile())         return null;
      }
    }
  }
 catch (  Exception IO) {
    return null;
  }
  LDIFContent contentLDIF=data.recordLDIF.getContent();
  String contentTYPE="ATTRIBUTE_CONTENT";
switch (contentLDIF.getType()) {
case LDIFContent.DELETE_CONTENT:
    if (isDetailed())     logDetailed(BaseMessages.getString(PKG,"LDIFInput.Log.ContentType","DELETE_CONTENT"));
  contentTYPE="DELETE_CONTENT";
break;
case LDIFContent.ADD_CONTENT:
if (isDetailed()) logDetailed(BaseMessages.getString(PKG,"LDIFInput.Log.ContentType","ADD_CONTENT"));
contentTYPE="ADD_CONTENT";
break;
case LDIFContent.MODDN_CONTENT:
if (isDetailed()) logDetailed(BaseMessages.getString(PKG,"LDIFInput.Log.ContentType","MODDN_CONTENT"));
contentTYPE="MODDN_CONTENT";
break;
case LDIFContent.MODIFICATION_CONTENT:
if (isDetailed()) logDetailed(BaseMessages.getString(PKG,"LDIFInput.Log.ContentType","MODIFICATION_CONTENT"));
contentTYPE="MODIFICATION_CONTENT";
break;
default :
if (isDetailed()) logDetailed(BaseMessages.getString(PKG,"LDIFInput.Log.ContentType","ATTRIBUTE_CONTENT"));
break;
}
LDIFAttributeContent attrContentLDIF=(LDIFAttributeContent)contentLDIF;
data.attributes_LDIF=attrContentLDIF.getAttributes();
Object[] outputRowData=buildEmptyRow();
if (meta.isFileField()) System.arraycopy(data.readrow,0,outputRowData,0,data.readrow.length);
try {
for (int i=0; i < meta.getInputFields().length; i++) {
LDIFInputField ldifInputField=meta.getInputFields()[i];
String AttributValue=environmentSubstitute(ldifInputField.getAttribut());
String Value=GetValue(data.attributes_LDIF,AttributValue);
switch (ldifInputField.getTrimType()) {
case LDIFInputField.TYPE_TRIM_LEFT:
Value=Const.ltrim(Value);
break;
case LDIFInputField.TYPE_TRIM_RIGHT:
Value=Const.rtrim(Value);
break;
case LDIFInputField.TYPE_TRIM_BOTH:
Value=Const.trim(Value);
break;
default :
break;
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(data.totalpreviousfields + i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(data.totalpreviousfields + i);
outputRowData[data.totalpreviousfields + i]=targetValueMeta.convertData(sourceValueMeta,Value);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(Value)) {
outputRowData[data.totalpreviousfields + i]=data.previousRow[data.totalpreviousfields + i];
}
}
}
int rowIndex=data.totalpreviousfields + meta.getInputFields().length;
if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
outputRowData[rowIndex++]=data.filename;
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[data.totalpreviousfields + rowIndex++]=new Long(data.rownr);
}
if (meta.includeContentType() && !Const.isEmpty(meta.getContentTypeField())) {
outputRowData[data.totalpreviousfields + rowIndex++]=contentTYPE;
}
if (meta.IncludeDN() && !Const.isEmpty(meta.getDNField())) {
outputRowData[data.totalpreviousfields + rowIndex++]=data.recordLDIF.getDN();
}
if (meta.getShortFileNameField() != null && meta.getShortFileNameField().length() > 0) {
outputRowData[rowIndex++]=data.shortFilename;
}
if (meta.getExtensionField() != null && meta.getExtensionField().length() > 0) {
outputRowData[rowIndex++]=data.extension;
}
if (meta.getPathField() != null && meta.getPathField().length() > 0) {
outputRowData[rowIndex++]=data.path;
}
if (meta.getSizeField() != null && meta.getSizeField().length() > 0) {
outputRowData[rowIndex++]=new Long(data.size);
}
if (meta.isHiddenField() != null && meta.isHiddenField().length() > 0) {
outputRowData[rowIndex++]=new Boolean(data.hidden);
}
if (meta.getLastModificationDateField() != null && meta.getLastModificationDateField().length() > 0) {
outputRowData[rowIndex++]=data.lastModificationDateTime;
}
if (meta.getUriField() != null && meta.getUriField().length() > 0) {
outputRowData[rowIndex++]=data.uriName;
}
if (meta.getRootUriField() != null && meta.getRootUriField().length() > 0) {
outputRowData[rowIndex++]=data.rootUriName;
}
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : (Object[])irow.cloneRow(outputRowData);
incrementLinesInput();
data.rownr++;
}
 catch (Exception e) {
throw new KettleException(BaseMessages.getString(PKG,"LDIFInput.Exception.UnableToReadFile",data.file.toString()),e);
}
return outputRowData;
}
