{
  super(parent,SWT.NONE);
  this.shell=parent.getShell();
  this.spoon=spoon;
  this.transMeta=transMeta;
  try {
    File xulFile=new File("ui/menus.xul");
    if (xulFile.exists()) {
      XulMessages xulMessages=new XulMessages();
      Document doc=XMLHandler.loadXMLFile(xulFile);
      List<String> ids=new ArrayList<String>();
      ids.add("trans-graph-hop");
      ids.add("trans-graph-entry");
      ids.add("trans-graph-background");
      ids.add("trans-graph-note");
      menuMap=MenuObject.createPopupMenusFromXul(doc,shell,xulMessages,ids);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  setLayout(new FillLayout());
  canvas=new Canvas(this,SWT.V_SCROLL | SWT.H_SCROLL | SWT.NO_BACKGROUND);
  iconsize=spoon.props.getIconSize();
  clearSettings();
  remarks=new ArrayList<CheckResult>();
  impact=new ArrayList<DatabaseImpact>();
  impactFinished=false;
  hori=canvas.getHorizontalBar();
  vert=canvas.getVerticalBar();
  hori.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  vert.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  hori.setThumb(100);
  vert.setThumb(100);
  hori.setVisible(true);
  vert.setVisible(true);
  setVisible(true);
  newProps();
  canvas.setBackground(GUIResource.getInstance().getColorBackground());
  canvas.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      if (!spoon.isStopped())       TransGraph.this.paintControl(e);
    }
  }
);
  selected_steps=null;
  lastclick=null;
  addKeyListener(spoon.modKeys);
  canvas.addKeyListener(spoon.modKeys);
  canvas.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      clearSettings();
      Point real=screen2real(e.x,e.y);
      StepMeta stepMeta=transMeta.getStep(real.x,real.y,iconsize);
      if (stepMeta != null) {
        if (e.button == 1)         editStep(stepMeta);
 else         editDescription(stepMeta);
      }
 else {
        TransHopMeta online=findHop(real.x,real.y);
        if (online != null) {
          editHop(online);
        }
 else {
          NotePadMeta ni=transMeta.getNote(real.x,real.y);
          if (ni != null) {
            selected_note=null;
            editNote(ni);
          }
        }
      }
    }
    public void mouseDown(    MouseEvent e){
      clearSettings();
      boolean alt=(e.stateMask & SWT.ALT) != 0;
      boolean control=(e.stateMask & SWT.CONTROL) != 0;
      last_button=e.button;
      Point real=screen2real(e.x,e.y);
      lastclick=new Point(real.x,real.y);
      setToolTipText(null);
      if (e.button == 3) {
        setMenu(real.x,real.y);
        return;
      }
      StepMeta stepMeta=transMeta.getStep(real.x,real.y,iconsize);
      if (stepMeta != null) {
        if (e.button == 1 && alt && stepMeta.supportsErrorHandling()) {
          spoon.editStepErrorHandling(transMeta,stepMeta);
          return;
        }
        selected_steps=transMeta.getSelectedSteps();
        selected_step=stepMeta;
        previous_step_locations=transMeta.getSelectedStepLocations();
        Point p=stepMeta.getLocation();
        iconoffset=new Point(real.x - p.x,real.y - p.y);
      }
 else {
        NotePadMeta ni=transMeta.getNote(real.x,real.y);
        if (ni != null && last_button == 1) {
          selected_notes=transMeta.getSelectedNotes();
          selected_note=ni;
          Point loc=ni.getLocation();
          previous_note_locations=transMeta.getSelectedNoteLocations();
          noteoffset=new Point(real.x - loc.x,real.y - loc.y);
        }
 else {
          if (!control)           selrect=new Rectangle(real.x,real.y,0,0);
        }
      }
      redraw();
    }
    public void mouseUp(    MouseEvent e){
      boolean control=(e.stateMask & SWT.CONTROL) != 0;
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point real=screen2real(e.x,e.y);
      Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
      if (candidate != null) {
        if (transMeta.findTransHop(candidate) == null) {
          spoon.newHop(transMeta,candidate);
        }
        candidate=null;
        selected_steps=null;
        last_button=0;
        redraw();
      }
 else       if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        transMeta.unselectAll();
        transMeta.selectInRect(selrect);
        selrect=null;
        redraw();
      }
 else       if (selected_step != null) {
        if (e.button == 1) {
          Point realclick=screen2real(e.x,e.y);
          if (lastclick.x == realclick.x && lastclick.y == realclick.y) {
            if (control) {
              selected_step.flipSelected();
            }
 else {
              transMeta.unselectAll();
              selected_step.setSelected(true);
            }
          }
 else {
            selected_steps=transMeta.getSelectedSteps();
            selected_notes=transMeta.getSelectedNotes();
            boolean also=false;
            if (selected_notes != null && previous_note_locations != null) {
              int indexes[]=transMeta.getNoteIndexes(selected_notes);
              addUndoPosition(selected_notes,indexes,previous_note_locations,transMeta.getSelectedNoteLocations(),also);
              also=selected_steps != null && selected_steps.length > 0;
            }
            if (selected_steps != null && previous_step_locations != null) {
              int indexes[]=transMeta.getStepIndexes(selected_steps);
              addUndoPosition(selected_steps,indexes,previous_step_locations,transMeta.getSelectedStepLocations(),also);
            }
          }
        }
        if (split_hop) {
          TransHopMeta hi=findHop(icon.x + iconsize / 2,icon.y + iconsize / 2);
          if (hi != null) {
            int id=0;
            if (!spoon.props.getAutoSplit()) {
              MessageDialogWithToggle md=new MessageDialogWithToggle(shell,Messages.getString("SpoonGraph.Dialog.SplitHop.Title"),null,Messages.getString("SpoonGraph.Dialog.SplitHop.Message") + Const.CR + hi.toString(),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No")},0,Messages.getString("SpoonGraph.Dialog.Option.SplitHop.DoNotAskAgain"),spoon.props.getAutoSplit());
              id=md.open();
              spoon.props.setAutoSplit(md.getToggleState());
            }
            if ((id & 0xFF) == 0) {
              TransHopMeta newhop1=new TransHopMeta(hi.getFromStep(),selected_step);
              transMeta.addTransHop(newhop1);
              spoon.addUndoNew(transMeta,new TransHopMeta[]{newhop1},new int[]{transMeta.indexOfTransHop(newhop1)},true);
              TransHopMeta newhop2=new TransHopMeta(selected_step,hi.getToStep());
              transMeta.addTransHop(newhop2);
              spoon.addUndoNew(transMeta,new TransHopMeta[]{newhop2},new int[]{transMeta.indexOfTransHop(newhop2)},true);
              int idx=transMeta.indexOfTransHop(hi);
              spoon.addUndoDelete(transMeta,new TransHopMeta[]{hi},new int[]{idx},true);
              transMeta.removeTransHop(idx);
              spoon.refreshTree();
            }
          }
          split_hop=false;
        }
        selected_steps=null;
        selected_notes=null;
        selected_step=null;
        selected_note=null;
        redraw();
      }
 else       if (selected_note != null) {
        if (e.button == 1) {
          if (lastclick.x == e.x && lastclick.y == e.y) {
            if (control) {
              selected_note.flipSelected();
            }
 else {
              transMeta.unselectAll();
              selected_note.setSelected(true);
            }
          }
 else {
            selected_steps=transMeta.getSelectedSteps();
            selected_notes=transMeta.getSelectedNotes();
            boolean also=false;
            if (selected_notes != null && previous_note_locations != null) {
              int indexes[]=transMeta.getNoteIndexes(selected_notes);
              addUndoPosition(selected_notes,indexes,previous_note_locations,transMeta.getSelectedNoteLocations(),also);
              also=selected_steps != null && selected_steps.length > 0;
            }
            if (selected_steps != null && previous_step_locations != null) {
              int indexes[]=transMeta.getStepIndexes(selected_steps);
              addUndoPosition(selected_steps,indexes,previous_step_locations,transMeta.getSelectedStepLocations(),also);
            }
          }
        }
        selected_notes=null;
        selected_steps=null;
        selected_step=null;
        selected_note=null;
      }
    }
  }
);
  canvas.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      boolean shift=(e.stateMask & SWT.SHIFT) != 0;
      lastMove=new Point(e.x,e.y);
      Point real=screen2real(e.x,e.y);
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
      if (noteoffset == null)       noteoffset=new Point(0,0);
      Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
      setToolTip(real.x,real.y);
      if (selected_step != null && !selected_step.isSelected()) {
        transMeta.unselectAll();
        selected_step.setSelected(true);
        selected_steps=new StepMeta[]{selected_step};
        previous_step_locations=new Point[]{selected_step.getLocation()};
      }
      if (selected_note != null && !selected_note.isSelected()) {
        transMeta.unselectAll();
        selected_note.setSelected(true);
        selected_notes=new NotePadMeta[]{selected_note};
        previous_note_locations=new Point[]{selected_note.getLocation()};
      }
      if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        redraw();
      }
 else       if (selected_step != null) {
        if (last_button == 1 && !shift) {
          int dx=icon.x - selected_step.getLocation().x;
          int dy=icon.y - selected_step.getLocation().y;
          TransHopMeta hi=findHop(icon.x + iconsize / 2,icon.y + iconsize / 2);
          if (hi != null) {
            if (!hi.getFromStep().equals(selected_step) && !hi.getToStep().equals(selected_step)) {
              split_hop=true;
              last_hop_split=hi;
              hi.split=true;
            }
          }
 else {
            if (last_hop_split != null) {
              last_hop_split.split=false;
              last_hop_split=null;
              split_hop=false;
            }
          }
          selected_notes=transMeta.getSelectedNotes();
          selected_steps=transMeta.getSelectedSteps();
          if (selected_steps != null)           for (int i=0; i < selected_steps.length; i++) {
            StepMeta stepMeta=selected_steps[i];
            stepMeta.setLocation(stepMeta.getLocation().x + dx,stepMeta.getLocation().y + dy);
          }
          if (selected_notes != null)           for (int i=0; i < selected_notes.length; i++) {
            NotePadMeta ni=selected_notes[i];
            ni.setLocation(ni.getLocation().x + dx,ni.getLocation().y + dy);
          }
          redraw();
        }
 else         if (last_button == 2 || (last_button == 1 && shift)) {
          StepMeta stepMeta=transMeta.getStep(real.x,real.y,iconsize);
          if (stepMeta != null && !selected_step.equals(stepMeta)) {
            if (candidate == null) {
              candidate=new TransHopMeta(selected_step,stepMeta);
              redraw();
            }
          }
 else {
            if (candidate != null) {
              candidate=null;
              redraw();
            }
          }
        }
      }
 else       if (selected_note != null) {
        if (last_button == 1 && !shift) {
          int dx=note.x - selected_note.getLocation().x;
          int dy=note.y - selected_note.getLocation().y;
          selected_notes=transMeta.getSelectedNotes();
          selected_steps=transMeta.getSelectedSteps();
          if (selected_steps != null)           for (int i=0; i < selected_steps.length; i++) {
            StepMeta stepMeta=selected_steps[i];
            stepMeta.setLocation(stepMeta.getLocation().x + dx,stepMeta.getLocation().y + dy);
          }
          if (selected_notes != null)           for (int i=0; i < selected_notes.length; i++) {
            NotePadMeta ni=selected_notes[i];
            ni.setLocation(ni.getLocation().x + dx,ni.getLocation().y + dy);
          }
          redraw();
        }
      }
    }
  }
);
  Transfer[] ttypes=new Transfer[]{XMLTransfer.getInstance()};
  DropTarget ddTarget=new DropTarget(canvas,DND.DROP_MOVE);
  ddTarget.setTransfer(ttypes);
  ddTarget.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
      clearSettings();
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void dragLeave(    DropTargetEvent event){
      drop_candidate=null;
      redraw();
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Point p=getRealPosition(canvas,event.x,event.y);
      try {
        DragAndDropContainer container=(DragAndDropContainer)event.data;
        StepMeta stepMeta=null;
        boolean newstep=false;
switch (container.getType()) {
case DragAndDropContainer.TYPE_STEP:
{
            stepMeta=transMeta.findStep(container.getData());
            if (stepMeta != null) {
              if (stepMeta.isDrawn() || transMeta.isStepUsedInTransHops(stepMeta)) {
                MessageBox mb=new MessageBox(shell,SWT.OK);
                mb.setMessage(Messages.getString("SpoonGraph.Dialog.StepIsAlreadyOnCanvas.Message"));
                mb.setText(Messages.getString("SpoonGraph.Dialog.StepIsAlreadyOnCanvas.Title"));
                mb.open();
                return;
              }
            }
 else {
              return;
            }
          }
        break;
case DragAndDropContainer.TYPE_BASE_STEP_TYPE:
{
        String steptype=container.getData();
        stepMeta=spoon.newStep(transMeta,steptype,steptype,false,true);
        if (stepMeta != null) {
          newstep=true;
        }
 else {
          return;
        }
      }
    break;
case DragAndDropContainer.TYPE_DATABASE_CONNECTION:
{
    newstep=true;
    String connectionName=container.getData();
    TableInputMeta tii=new TableInputMeta();
    tii.setDatabaseMeta(transMeta.findDatabase(connectionName));
    StepLoader steploader=StepLoader.getInstance();
    String stepID=steploader.getStepPluginID(tii);
    StepPlugin stepPlugin=steploader.findStepPluginWithID(stepID);
    String stepName=transMeta.getAlternativeStepname(stepPlugin.getDescription());
    stepMeta=new StepMeta(stepID,stepName,tii);
    if (spoon.editStep(transMeta,stepMeta) != null) {
      transMeta.addStep(stepMeta);
      spoon.refreshTree();
      spoon.refreshGraph();
    }
 else {
      return;
    }
  }
break;
case DragAndDropContainer.TYPE_TRANS_HOP:
{
newHop();
return;
}
default :
{
MessageBox mb=new MessageBox(shell,SWT.OK);
mb.setMessage(Messages.getString("SpoonGraph.Dialog.ItemCanNotBePlacedOnCanvas.Message"));
mb.setText(Messages.getString("SpoonGraph.Dialog.ItemCanNotBePlacedOnCanvas.Title"));
mb.open();
return;
}
}
transMeta.unselectAll();
StepMeta before=(StepMeta)stepMeta.clone();
stepMeta.drawStep();
stepMeta.setSelected(true);
stepMeta.setLocation(p.x,p.y);
if (newstep) {
spoon.addUndoNew(transMeta,new StepMeta[]{stepMeta},new int[]{transMeta.indexOfStep(stepMeta)});
}
 else {
spoon.addUndoChange(transMeta,new StepMeta[]{before},new StepMeta[]{(StepMeta)stepMeta.clone()},new int[]{transMeta.indexOfStep(stepMeta)});
}
canvas.forceFocus();
redraw();
}
 catch (Exception e) {
new ErrorDialog(shell,Messages.getString("SpoonGraph.Dialog.ErrorDroppingObject.Message"),Messages.getString("SpoonGraph.Dialog.ErrorDroppingObject.Title"),e);
}
}
public void dropAccept(DropTargetEvent event){
}
}
);
addKeyListener(canvas);
addKeyListener(this);
canvas.addKeyListener(spoon.defKeys);
setBackground(GUIResource.getInstance().getColorBackground());
}
