{
  wTree=new Tree(shell,SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL| SWT.H_SCROLL| SWT.BORDER);
  FormData fdTree=new FormData();
  fdTree.left=new FormAttachment(0,0);
  fdTree.right=new FormAttachment(100,0);
  fdTree.top=new FormAttachment(lastControl,2 * margin);
  fdTree.bottom=new FormAttachment(wOK,-2 * margin);
  wTree.setLayoutData(fdTree);
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"MetaInjectDialog.Column.TargetStep"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(BaseMessages.getString(PKG,"MetaInjectDialog.Column.TargetDescription"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(BaseMessages.getString(PKG,"MetaInjectDialog.Column.SourceStep"),ColumnInfo.COLUMN_TYPE_CCOMBO,false,true),new ColumnInfo(BaseMessages.getString(PKG,"MetaInjectDialog.Column.SourceField"),ColumnInfo.COLUMN_TYPE_CCOMBO,false,true)};
  wTree.setHeaderVisible(true);
  for (int i=0; i < colinf.length; i++) {
    ColumnInfo columnInfo=colinf[i];
    TreeColumn treeColumn=new TreeColumn(wTree,columnInfo.getAllignement());
    treeColumn.setText(columnInfo.getName());
    treeColumn.setWidth(200);
  }
  wTree.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      try {
        Point point=new Point(event.x,event.y);
        TreeItem item=wTree.getItem(point);
        if (item != null) {
          TargetStepAttribute target=treeItemTargetMap.get(item);
          if (target != null) {
            SourceStepField source=targetSourceMapping.get(target);
            String[] prevStepNames=transMeta.getPrevStepNames(stepMeta);
            Arrays.sort(prevStepNames);
            Map<String,SourceStepField> fieldMap=new HashMap<String,SourceStepField>();
            for (            String prevStepName : prevStepNames) {
              RowMetaInterface fields=transMeta.getStepFields(prevStepName);
              for (              ValueMetaInterface field : fields.getValueMetaList()) {
                String key=buildStepFieldKey(prevStepName,field.getName());
                fieldMap.put(key,new SourceStepField(prevStepName,field.getName()));
              }
            }
            String[] sourceFields=fieldMap.keySet().toArray(new String[fieldMap.size()]);
            Arrays.sort(sourceFields);
            EnterSelectionDialog selectSourceField=new EnterSelectionDialog(shell,sourceFields,"Select source field","Select the source field (cancel=clear)");
            if (source != null && !Const.isEmpty(source.getStepname())) {
              String key=buildStepFieldKey(source.getStepname(),source.getField());
              int index=Const.indexOfString(key,sourceFields);
              if (index >= 0) {
                selectSourceField.setSelectedNrs(new int[]{index});
              }
            }
            String selectedStepField=selectSourceField.open();
            if (selectedStepField != null) {
              SourceStepField newSource=fieldMap.get(selectedStepField);
              item.setText(2,newSource.getStepname());
              item.setText(3,newSource.getField());
              targetSourceMapping.put(target,newSource);
            }
 else {
              item.setText(2,"");
              item.setText(3,"");
              targetSourceMapping.remove(target);
            }
          }
        }
      }
 catch (      Exception e) {
        new ErrorDialog(shell,"Oops","Unexpected Error",e);
      }
    }
  }
);
}
