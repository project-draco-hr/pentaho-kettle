{
  if (databases != null) {
    try {
      List<DatabaseMeta> dbs=new ArrayList<DatabaseMeta>();
      for (int i=0; i < databases.size(); i++) {
        if (((databases.get(i)).getDatabaseInterface().isExplorable())) {
          dbs.add(databases.get(i));
        }
      }
      String conn[]=new String[dbs.size()];
      for (int i=0; i < conn.length; i++)       conn[i]=(dbs.get(i)).getName();
      EnterSelectionDialog esd=new EnterSelectionDialog(this.dbExplorerDialog.getShell(),conn,BaseMessages.getString(PKG,"DatabaseExplorerDialog.TargetDatabase.Title"),BaseMessages.getString(PKG,"DatabaseExplorerDialog.TargetDatabase.Message"));
      String target=esd.open();
      if (target != null) {
        DatabaseMeta targetdbi=DatabaseMeta.findDatabase(dbs,target);
        Database targetdb=new Database(null,targetdbi);
        try {
          targetdb.connect();
          String tableName=getSchemaAndTable(model);
          RowMetaInterface r=targetdb.getTableFields(tableName);
          String sql=targetdb.getCreateTableStatement(tableName,r,null,false,null,true);
          SQLEditor se=new SQLEditor(this.getDatabaseMeta(),this.dbExplorerDialog.getShell(),SWT.NONE,this.model.getDatabaseMeta(),this.dbcache,sql);
          se.open();
        }
  finally {
          targetdb.disconnect();
        }
      }
    }
 catch (    KettleDatabaseException dbe) {
      new ErrorDialog(this.dbExplorerDialog.getShell(),BaseMessages.getString(PKG,"Dialog.Error.Header"),BaseMessages.getString(PKG,"DatabaseExplorerDialog.Error.GenDDL"),dbe);
    }
  }
 else {
    MessageBox mb=new MessageBox(this.dbExplorerDialog.getShell(),SWT.NONE | SWT.ICON_INFORMATION);
    mb.setMessage(BaseMessages.getString(PKG,"DatabaseExplorerDialog.NoConnectionsKnown.Message"));
    mb.setText(BaseMessages.getString(PKG,"DatabaseExplorerDialog.NoConnectionsKnown.Title"));
    mb.open();
  }
}
