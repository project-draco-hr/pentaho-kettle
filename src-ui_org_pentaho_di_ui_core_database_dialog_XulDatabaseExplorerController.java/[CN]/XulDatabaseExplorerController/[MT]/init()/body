{
  SwtButton theAcceptButton=(SwtButton)this.document.getElementById("databaseExplorerDialog_accept");
  SwtButton theCancelButton=(SwtButton)this.document.getElementById("databaseExplorerDialog_cancel");
  if (this.isJustLook) {
    theAcceptButton.setVisible(false);
    theCancelButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"));
    theAcceptButton.setDisabled(false);
  }
 else {
    theAcceptButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"));
    theCancelButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Cancel"));
    theAcceptButton.setDisabled(true);
  }
  this.dbExplorerDialog=(SwtDialog)this.document.getElementById("databaseExplorerDialog");
  createDatabaseNodes();
  this.bf.setDocument(super.document);
  this.bf.setBindingType(Type.ONE_WAY);
  this.expandCollapseButton=(XulButton)document.getElementById("expandCollapseButton");
  this.databaseTree=(XulTree)document.getElementById("databaseTree");
  this.databaseTreeBinding=bf.createBinding(this.model,"database",this.databaseTree,"elements");
  bf.createBinding(model,"table",theAcceptButton,"disabled",new BindingConvertor<DatabaseExplorerNode,Boolean>(){
    @Override public Boolean sourceToTarget(    DatabaseExplorerNode arg0){
      return (!isJustLook && arg0 == null);
    }
    @Override public DatabaseExplorerNode targetToSource(    Boolean arg0){
      return null;
    }
  }
);
  BindingConvertor<DatabaseExplorerNode,String> theTableNameConvertor=new BindingConvertor<DatabaseExplorerNode,String>(){
    public String sourceToTarget(    DatabaseExplorerNode aValue){
      String theTable=null;
      if (aValue != null && aValue.isTable()) {
        theTable=aValue.getName();
      }
      return theTable;
    }
    public DatabaseExplorerNode targetToSource(    String aValue){
      return null;
    }
  }
;
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  this.bf.createBinding(this.databaseTree,"selectedItems",this.model,"table",new BindingConvertor<List<DatabaseExplorerNode>,DatabaseExplorerNode>(){
    @Override public DatabaseExplorerNode sourceToTarget(    List<DatabaseExplorerNode> arg0){
      if (arg0 == null || arg0.size() == 0) {
        return null;
      }
      DatabaseExplorerNode node=arg0.get(0);
      if (node.isTable()) {
        return node;
      }
      return null;
    }
    @Override public List<DatabaseExplorerNode> targetToSource(    DatabaseExplorerNode arg0){
      return Collections.singletonList(arg0);
    }
  }
);
  this.bf.createBinding(this.databaseTree,"selectedItems",this.model,"schema",new BindingConvertor<List<DatabaseExplorerNode>,DatabaseExplorerNode>(){
    @Override public DatabaseExplorerNode sourceToTarget(    List<DatabaseExplorerNode> arg0){
      if (arg0 == null || arg0.size() == 0) {
        return null;
      }
      DatabaseExplorerNode node=arg0.get(0);
      if (node.isSchema()) {
        return node;
      }
 else       if (node.isTable()) {
        return (DatabaseExplorerNode)node.getParent();
      }
      return null;
    }
    @Override public List<DatabaseExplorerNode> targetToSource(    DatabaseExplorerNode arg0){
      return Collections.singletonList(arg0);
    }
  }
);
  BindingConvertor<DatabaseExplorerNode,Boolean> isDisabledConvertor=new BindingConvertor<DatabaseExplorerNode,Boolean>(){
    public Boolean sourceToTarget(    DatabaseExplorerNode value){
      return !(value != null && value.isTable());
    }
    public DatabaseExplorerNode targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.setBindingType(Binding.Type.ONE_WAY);
  this.bf.createBinding(this.databaseTree,"selectedItem","buttonMenuPopUp","disabled",isDisabledConvertor);
  this.bf.createBinding(this.databaseTree,"selectedItem","buttonMenuPopUpImg","disabled",isDisabledConvertor);
  fireBindings();
}
