{
  try {
    includeFilename=rep.getStepAttributeBoolean(id_step,INCLUDE);
    filenameField=rep.getStepAttributeString(id_step,INCLUDE_FIELD);
    addresultfile=rep.getStepAttributeBoolean(id_step,ADDRESULTFILE);
    IsIgnoreEmptyFile=rep.getStepAttributeBoolean(id_step,IS_IGNORE_EMPTY_FILE);
    includeRowNumber=rep.getStepAttributeBoolean(id_step,ROWNUM);
    rowNumberField=rep.getStepAttributeString(id_step,ROWNUM_FIELD);
    rowLimit=rep.getStepAttributeInteger(id_step,LIMIT);
    encoding=rep.getStepAttributeString(id_step,ENCODING);
    int nrFiles=rep.countNrStepAttributes(id_step,FILE_NAME_REP);
    int nrFields=rep.countNrStepAttributes(id_step,FIELD_NAME_REP);
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,FILE_NAME_REP);
      fileMask[i]=rep.getStepAttributeString(id_step,i,FILE_MASK_REP);
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,EXCLUDEFILE_MASK_REP);
      fileRequired[i]=rep.getStepAttributeString(id_step,i,FILE_REQUIRED);
      if (!YES.equalsIgnoreCase(fileRequired[i])) {
        fileRequired[i]=NO;
      }
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,INCLUDE_SUBFOLDERS);
      if (!YES.equalsIgnoreCase(includeSubFolders[i])) {
        includeSubFolders[i]=NO;
      }
    }
    for (int i=0; i < nrFields; i++) {
      LoadFileInputField field=new LoadFileInputField();
      field.setName(rep.getStepAttributeString(id_step,i,FIELD_NAME_REP));
      field.setElementType(LoadFileInputField.getElementTypeByCode(rep.getStepAttributeString(id_step,i,ELEMENT_TYPE_REP)));
      field.setType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,FIELD_TYPE_REP)));
      field.setFormat(rep.getStepAttributeString(id_step,i,FIELD_FORMAT_REP));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,FIELD_CURRENCY_REP));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,FIELD_DECIMAL_REP));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,FIELD_GROUP_REP));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,FIELD_LENGTH_REP));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,FIELD_PRECISION_REP));
      field.setTrimType(LoadFileInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,FIELD_TRIM_TYPE_REP)));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,FIELD_REPEAT_REP));
      inputFields[i]=field;
    }
    fileinfield=rep.getStepAttributeBoolean(id_step,IS_IN_FIELDS);
    DynamicFilenameField=rep.getStepAttributeString(id_step,DYNAMIC_FILENAME_FIELD);
    shortFileFieldName=rep.getStepAttributeString(id_step,SHORT_FILE_FIELD_NAME);
    pathFieldName=rep.getStepAttributeString(id_step,PATH_FIELD_NAME);
    hiddenFieldName=rep.getStepAttributeString(id_step,HIDDEN_FIELD_NAME);
    lastModificationTimeFieldName=rep.getStepAttributeString(id_step,LAST_MODIFICATION_TIME_FIELD_NAME);
    rootUriNameFieldName=rep.getStepAttributeString(id_step,ROOT_URI_NAME_FIELD_NAME);
    uriNameFieldName=rep.getStepAttributeString(id_step,URI_NAME_FIELD_NAME);
    extensionFieldName=rep.getStepAttributeString(id_step,EXTENSION_FIELD_NAME);
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LoadFileInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
