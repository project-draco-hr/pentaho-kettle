{
  InputStream inputStream=null;
  try {
    CsvInputMeta meta=new CsvInputMeta();
    getInfo(meta);
    String filename=transMeta.environmentSubstitute(meta.getFilename());
    String delimiter=transMeta.environmentSubstitute(meta.getDelimiter());
    FileObject fileObject=KettleVFS.getFileObject(filename);
    if (!(fileObject instanceof LocalFile)) {
      throw new KettleException(BaseMessages.getString(PKG,"CsvInput.Log.OnlyLocalFilesAreSupported"));
    }
    wFields.table.removeAll();
    inputStream=KettleVFS.getInputStream(fileObject);
    String realEncoding=transMeta.environmentSubstitute(meta.getEncoding());
    InputStreamReader reader;
    if (Const.isEmpty(realEncoding)) {
      reader=new InputStreamReader(inputStream);
    }
 else {
      reader=new InputStreamReader(inputStream,realEncoding);
    }
    EncodingType encodingType=EncodingType.guessEncodingType(reader.getEncoding());
    String line=TextFileInput.getLine(log,reader,encodingType,TextFileInputMeta.FILE_FORMAT_MIXED,new StringBuilder(1000));
    String[] fieldNames=CsvInput.guessStringsFromLine(log,line,delimiter,meta.getEnclosure(),meta.getEscapeCharacter());
    if (!meta.isHeaderPresent()) {
      DecimalFormat df=new DecimalFormat("000");
      for (int i=0; i < fieldNames.length; i++) {
        fieldNames[i]="Field_" + df.format(i);
      }
    }
 else {
      if (!Const.isEmpty(meta.getEnclosure())) {
        for (int i=0; i < fieldNames.length; i++) {
          if (fieldNames[i].startsWith(meta.getEnclosure()) && fieldNames[i].endsWith(meta.getEnclosure()) && fieldNames[i].length() > 1) {
            fieldNames[i]=fieldNames[i].substring(1,fieldNames[i].length() - 1);
          }
        }
      }
    }
    for (int i=0; i < fieldNames.length; i++) {
      fieldNames[i]=Const.trim(fieldNames[i]);
    }
    for (int i=0; i < fieldNames.length; i++) {
      TableItem item=new TableItem(wFields.table,SWT.NONE);
      item.setText(1,fieldNames[i]);
      item.setText(2,ValueMeta.getTypeDesc(ValueMetaInterface.TYPE_STRING));
    }
    wFields.removeEmptyRows();
    wFields.setRowNums();
    wFields.optWidth(true);
    String shellText=BaseMessages.getString(PKG,"CsvInputDialog.LinesToSample.DialogTitle");
    String lineText=BaseMessages.getString(PKG,"CsvInputDialog.LinesToSample.DialogMessage");
    EnterNumberDialog end=new EnterNumberDialog(shell,100,shellText,lineText);
    int samples=end.open();
    if (samples >= 0) {
      getInfo(meta);
      TextFileCSVImportProgressDialog pd=new TextFileCSVImportProgressDialog(shell,meta,transMeta,reader,samples,true);
      String message=pd.open();
      if (message != null) {
        wFields.removeAll();
        getData(meta,false);
        wFields.removeEmptyRows();
        wFields.setRowNums();
        wFields.optWidth(true);
        EnterTextDialog etd=new EnterTextDialog(shell,BaseMessages.getString(PKG,"CsvInputDialog.ScanResults.DialogTitle"),BaseMessages.getString(PKG,"CsvInputDialog.ScanResults.DialogMessage"),message,true);
        etd.setReadOnly();
        etd.open();
      }
    }
  }
 catch (  IOException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"CsvInputDialog.IOError.DialogTitle"),BaseMessages.getString(PKG,"CsvInputDialog.IOError.DialogMessage"),e);
  }
catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"CsvInputDialog.ErrorGettingFileDesc.DialogMessage"),e);
  }
 finally {
    try {
      inputStream.close();
    }
 catch (    Exception e) {
    }
  }
}
