{
  boolean retval=true;
  StyledTextComp wScript=getStyledTextComp();
  String scr=wScript.getText();
  String errorMessage="";
  Context jscx;
  Scriptable jsscope;
  refreshScripts();
  jscx=Context.enter();
  jscx.setOptimizationLevel(-1);
  jsscope=jscx.initStandardObjects(null);
  for (int i=0; i < folder.getItemCount(); i++) {
    StyledTextComp sItem=getStyledTextComp(folder.getItem(i));
    Scriptable jsR=Context.toObject(sItem.getText(),jsscope);
    jsscope.put(folder.getItem(i).getText(),jsscope,jsR);
  }
  jsscope.put("_TransformationName_",jsscope,new String(this.stepname));
  ScriptValuesModDummy dummyStep=new ScriptValuesModDummy();
  Scriptable jsvalue=Context.toObject(dummyStep,jsscope);
  jsscope.put("_step_",jsscope,jsvalue);
  try {
    RowMetaInterface rowMeta=transMeta.getPrevStepFields(stepname);
    if (rowMeta != null) {
      try {
        if (input.getAddClasses() != null) {
          for (int i=0; i < input.getAddClasses().length; i++) {
            Object jsOut=Context.javaToJS(input.getAddClasses()[i].getAddObject(),jsscope);
            ScriptableObject.putProperty(jsscope,input.getAddClasses()[i].getJSName(),jsOut);
          }
        }
      }
 catch (      Exception e) {
        errorMessage="Couldn't add JavaClasses to Context! Error:" + Const.CR + e.toString();
        retval=false;
      }
      try {
        Context.javaToJS(ScriptValuesAddedFunctions.class,jsscope);
        ((ScriptableObject)jsscope).defineFunctionProperties(jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
      }
 catch (      Exception ex) {
        errorMessage="Couldn't add Default Functions! Error:" + Const.CR + ex.toString();
        retval=false;
      }
      ;
      try {
        jsscope.put("SKIP_TRANSFORMATION",jsscope,new Integer(SKIP_TRANSFORMATION));
        jsscope.put("ABORT_TRANSFORMATION",jsscope,new Integer(ABORT_TRANSFORMATION));
        jsscope.put("ERROR_TRANSFORMATION",jsscope,new Integer(ERROR_TRANSFORMATION));
        jsscope.put("CONTINUE_TRANSFORMATION",jsscope,new Integer(CONTINUE_TRANSFORMATION));
      }
 catch (      Exception ex) {
        errorMessage="Couldn't add Transformation Constants! Error:" + Const.CR + ex.toString();
        retval=false;
      }
      ;
      try {
        Object[] row=new Object[rowMeta.size()];
        Scriptable jsRowMeta=Context.toObject(rowMeta,jsscope);
        jsscope.put("rowMeta",jsscope,jsRowMeta);
        for (int i=0; i < rowMeta.size(); i++) {
          ValueMetaInterface valueMeta=rowMeta.getValueMeta(i);
          Object valueData=null;
          if (valueMeta.isDate())           valueData=new Date();
          if (valueMeta.isString())           valueData="test value test value test value test value test value test value test value test value test value test value";
          if (valueMeta.isInteger())           valueData=new Long(0L);
          if (valueMeta.isNumber())           valueData=new Double(0.0);
          if (valueMeta.isBigNumber())           valueData=new BigDecimal(0.0);
          if (valueMeta.isBoolean())           valueData=new Boolean(true);
          if (valueMeta.isBinary())           valueData=new byte[]{0,1,2,3,4,5,6,7,8,9};
          row[i]=valueData;
          if (wCompatible.getSelection()) {
            Value value=valueMeta.createOriginalValue(valueData);
            Scriptable jsarg=Context.toObject(value,jsscope);
            jsscope.put(valueMeta.getName(),jsscope,jsarg);
          }
 else {
            Scriptable jsarg=Context.toObject(valueData,jsscope);
            jsscope.put(valueMeta.getName(),jsscope,jsarg);
          }
        }
        Scriptable jsval=Context.toObject(Value.class,jsscope);
        jsscope.put("Value",jsscope,jsval);
        if (wCompatible.getSelection()) {
          Row v2Row=RowMeta.createOriginalRow(rowMeta,row);
          Scriptable jsV2Row=Context.toObject(v2Row,jsscope);
          jsscope.put("row",jsscope,jsV2Row);
        }
 else {
          Scriptable jsRow=Context.toObject(row,jsscope);
          jsscope.put("row",jsscope,jsRow);
        }
      }
 catch (      Exception ev) {
        errorMessage="Couldn't add Input fields to Script! Error:" + Const.CR + ev.toString();
        retval=false;
      }
      try {
        if (strActiveStartScript != null && !folder.getSelection().getText().equals(strActiveStartScript) && strActiveStartScript.length() > 0) {
          String strStartScript=getStyledTextComp(folder.getItem(getCTabPosition(strActiveStartScript))).getText();
          jscx.evaluateString(jsscope,strStartScript,"trans_Start",1,null);
        }
      }
 catch (      Exception e) {
        errorMessage="Couldn't process Start Script! Error:" + Const.CR + e.toString();
        retval=false;
      }
      ;
      try {
        Script evalScript=jscx.compileString(scr,"script",1,null);
        evalScript.exec(jscx,jsscope);
        if (getvars) {
          ScriptOrFnNode tree=parseVariables(jscx,jsscope,scr,"script",1,null);
          for (int i=0; i < tree.getParamAndVarCount(); i++) {
            String varname=tree.getParamOrVarName(i);
            if (!varname.equalsIgnoreCase("row") && !varname.equalsIgnoreCase("trans_Status") && rowMeta.indexOfValue(varname) < 0) {
              int type=ValueMetaInterface.TYPE_STRING;
              int length=-1, precision=-1;
              Object result=jsscope.get(varname,jsscope);
              if (result != null) {
                String classname=result.getClass().getName();
                if (classname.equalsIgnoreCase("java.lang.Byte")) {
                  type=ValueMetaInterface.TYPE_INTEGER;
                  length=3;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Integer")) {
                  type=ValueMetaInterface.TYPE_INTEGER;
                  length=9;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Long")) {
                  type=ValueMetaInterface.TYPE_INTEGER;
                  length=18;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Double")) {
                  type=ValueMetaInterface.TYPE_NUMBER;
                  length=16;
                  precision=2;
                }
 else                 if (classname.equalsIgnoreCase("org.mozilla.javascript.NativeDate") || classname.equalsIgnoreCase("java.util.Date")) {
                  type=ValueMetaInterface.TYPE_DATE;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Boolean")) {
                  type=ValueMetaInterface.TYPE_BOOLEAN;
                }
              }
              TableItem ti=new TableItem(wFields.table,SWT.NONE);
              ti.setText(1,varname);
              ti.setText(2,varname);
              ti.setText(3,ValueMeta.getTypeDesc(type));
              ti.setText(4,"" + length);
              ti.setText(5,"" + precision);
            }
          }
          wFields.removeEmptyRows();
          wFields.setRowNums();
          wFields.optWidth(true);
        }
      }
 catch (      JavaScriptException jse) {
        errorMessage=Messages.getString("ScriptValuesDialogMod.Exception.CouldNotExecuteScript") + Const.CR + jse.toString();
        retval=false;
      }
catch (      Exception e) {
        errorMessage=Messages.getString("ScriptValuesDialogMod.Exception.CouldNotExecuteScript2") + Const.CR + e.toString();
        retval=false;
      }
    }
 else {
      errorMessage=Messages.getString("ScriptValuesDialogMod.Exception.CouldNotGetFields");
      retval=false;
    }
    if (popup) {
      if (retval) {
        if (!getvars) {
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_INFORMATION);
          mb.setMessage("This script compiled without problems." + Const.CR);
          mb.setText("OK");
          mb.open();
        }
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(errorMessage);
        mb.setText("ERROR");
        mb.open();
      }
    }
  }
 catch (  KettleException ke) {
    retval=false;
    new ErrorDialog(shell,Messages.getString("ScriptValuesDialogMod.TestFailed.DialogTitle"),Messages.getString("ScriptValuesDialogMod.TestFailed.DialogMessage"),ke);
  }
 finally {
    if (jscx != null)     Context.exit();
  }
  return retval;
}
