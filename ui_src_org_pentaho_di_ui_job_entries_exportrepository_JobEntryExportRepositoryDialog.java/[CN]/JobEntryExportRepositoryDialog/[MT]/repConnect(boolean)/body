{
  boolean retval=false;
  RepositoriesMeta repositoriesMeta=null;
  RepositoryMeta repositoryMeta=null;
  Repository repos=null;
  try {
    repositoriesMeta=new RepositoriesMeta();
    try {
      repositoriesMeta.readData();
    }
 catch (    Exception e) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepsDefined"),BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepsDefinedMsg"),true);
    }
    repositoryMeta=repositoriesMeta.findRepository(jobMeta.environmentSubstitute(wRepositoryname.getText()));
    if (repositoryMeta == null) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRep"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRepMsg",wRepositoryname.getText()),true);
      return false;
    }
    repos=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,repositoryMeta,Repository.class);
    repos.init(repositoryMeta);
    try {
      repos.connect(jobMeta.environmentSubstitute(wUserName.getText()),jobMeta.environmentSubstitute(wPassword.getText()));
    }
 catch (    Exception e) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnect"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnectMsg",wRepositoryname.getText()),true);
      return false;
    }
    repos.disconnect();
    repos=null;
    if (displaySuccess) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Connected.Title.Ok"),BaseMessages.getString(PKG,"JobExportRepository.Connected.OK",wRepositoryname.getText()),false);
    }
    retval=true;
  }
 catch (  Exception e) {
    displayMsg(BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"JobExportRepository.ErrorConnecting",wRepositoryname.getText()),true);
  }
 finally {
    if (repos != null) {
      repos.disconnect();
      repos=null;
    }
    if (repositoryMeta != null) {
      repositoryMeta=null;
    }
    repositoriesMeta.clear();
  }
  return retval;
}
