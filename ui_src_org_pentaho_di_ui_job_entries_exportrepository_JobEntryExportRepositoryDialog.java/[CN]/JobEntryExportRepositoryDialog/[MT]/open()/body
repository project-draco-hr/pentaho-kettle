{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobExportRepository.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobExportRepository.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(BaseMessages.getString(PKG,"JobExportRepository.Tab.General.Label"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout generalLayout=new FormLayout();
  generalLayout.marginWidth=3;
  generalLayout.marginHeight=3;
  wGeneralComp.setLayout(generalLayout);
  wRepositoryInfos=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wRepositoryInfos);
  wRepositoryInfos.setText(BaseMessages.getString(PKG,"JobExportRepository.RepositoryInfos.Group.Label"));
  FormLayout RepositoryInfosgroupLayout=new FormLayout();
  RepositoryInfosgroupLayout.marginWidth=10;
  RepositoryInfosgroupLayout.marginHeight=10;
  wRepositoryInfos.setLayout(RepositoryInfosgroupLayout);
  wlRepositoryname=new Label(wRepositoryInfos,SWT.RIGHT);
  wlRepositoryname.setText(BaseMessages.getString(PKG,"JobExportRepository.Repositoryname.Label"));
  props.setLook(wlRepositoryname);
  fdlRepositoryname=new FormData();
  fdlRepositoryname.left=new FormAttachment(0,margin);
  fdlRepositoryname.top=new FormAttachment(wName,margin);
  fdlRepositoryname.right=new FormAttachment(middle,-margin);
  wlRepositoryname.setLayoutData(fdlRepositoryname);
  wbRepositoryname=new Button(wRepositoryInfos,SWT.PUSH | SWT.CENTER);
  props.setLook(wbRepositoryname);
  wbRepositoryname.setText(BaseMessages.getString(PKG,"JobExportRepository.ListRepositories.Label"));
  wbRepositoryname.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.ListRepositories.Tooltip"));
  fdbRepositoryname=new FormData();
  fdbRepositoryname.right=new FormAttachment(100,0);
  fdbRepositoryname.top=new FormAttachment(wName,0);
  wbRepositoryname.setLayoutData(fdbRepositoryname);
  wbRepositoryname.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getListRepositories();
    }
  }
);
  wRepositoryname=new TextVar(jobMeta,wRepositoryInfos,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wRepositoryname);
  wRepositoryname.addModifyListener(lsMod);
  fdRepositoryname=new FormData();
  fdRepositoryname.left=new FormAttachment(middle,margin);
  fdRepositoryname.top=new FormAttachment(wName,margin);
  fdRepositoryname.right=new FormAttachment(wbRepositoryname,-margin);
  wRepositoryname.setLayoutData(fdRepositoryname);
  wRepositoryname.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wRepositoryname.setToolTipText(jobMeta.environmentSubstitute(wRepositoryname.getText()));
    }
  }
);
  wUserName=new LabelTextVar(jobMeta,wRepositoryInfos,BaseMessages.getString(PKG,"JobExportRepository.User.Label"),BaseMessages.getString(PKG,"JobExportRepository.User.Tooltip"));
  props.setLook(wUserName);
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(0,0);
  fdUserName.top=new FormAttachment(wRepositoryname,margin);
  fdUserName.right=new FormAttachment(100,0);
  wUserName.setLayoutData(fdUserName);
  wPassword=new LabelTextVar(jobMeta,wRepositoryInfos,BaseMessages.getString(PKG,"JobExportRepository.Password.Label"),BaseMessages.getString(PKG,"JobExportRepository.Password.Tooltip"));
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(0,0);
  fdPassword.top=new FormAttachment(wUserName,margin);
  fdPassword.right=new FormAttachment(100,0);
  wPassword.setLayoutData(fdPassword);
  wPassword.getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkPasswordVisible();
    }
  }
);
  wTest=new Button(wRepositoryInfos,SWT.PUSH);
  wTest.setText(BaseMessages.getString(PKG,"JobExportRepository.TestConnection.Label"));
  props.setLook(wTest);
  fdTest=new FormData();
  wTest.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.TestConnection.Tooltip"));
  fdTest.top=new FormAttachment(wPassword,2 * margin);
  fdTest.right=new FormAttachment(100,0);
  wTest.setLayoutData(fdTest);
  fdRepositoryInfos=new FormData();
  fdRepositoryInfos.left=new FormAttachment(0,margin);
  fdRepositoryInfos.top=new FormAttachment(wName,margin);
  fdRepositoryInfos.right=new FormAttachment(100,-margin);
  wRepositoryInfos.setLayoutData(fdRepositoryInfos);
  wSettings=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wSettings);
  wSettings.setText(BaseMessages.getString(PKG,"JobExportRepository.Settings.Group.Label"));
  FormLayout SettingsgroupLayout=new FormLayout();
  SettingsgroupLayout.marginWidth=10;
  SettingsgroupLayout.marginHeight=10;
  wSettings.setLayout(SettingsgroupLayout);
  wlExportType=new Label(wSettings,SWT.RIGHT);
  wlExportType.setText(BaseMessages.getString(PKG,"JobExportRepository.ExportType.Label"));
  props.setLook(wlExportType);
  fdlExportType=new FormData();
  fdlExportType.left=new FormAttachment(0,0);
  fdlExportType.right=new FormAttachment(middle,0);
  fdlExportType.top=new FormAttachment(wRepositoryInfos,margin);
  wlExportType.setLayoutData(fdlExportType);
  wExportType=new CCombo(wSettings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wExportType.add(BaseMessages.getString(PKG,"JobExportRepository.Export_All.Label"));
  wExportType.add(BaseMessages.getString(PKG,"JobExportRepository.Export_Jobs.Label"));
  wExportType.add(BaseMessages.getString(PKG,"JobExportRepository.Export_Trans.Label"));
  wExportType.add(BaseMessages.getString(PKG,"JobExportRepository.Export_By_Folder.Label"));
  wExportType.add(BaseMessages.getString(PKG,"JobExportRepository.Export_One_Folder.Label"));
  wExportType.select(0);
  props.setLook(wExportType);
  fdExportType=new FormData();
  fdExportType.left=new FormAttachment(middle,margin);
  fdExportType.top=new FormAttachment(wTargetFilename,margin);
  fdExportType.right=new FormAttachment(100,0);
  wExportType.setLayoutData(fdExportType);
  wExportType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeOneFolder();
    }
  }
);
  wlFoldername=new Label(wSettings,SWT.RIGHT);
  wlFoldername.setText(BaseMessages.getString(PKG,"JobExportRepository.Foldername.Label"));
  props.setLook(wlFoldername);
  fdlFoldername=new FormData();
  fdlFoldername.left=new FormAttachment(0,margin);
  fdlFoldername.top=new FormAttachment(wExportType,margin);
  fdlFoldername.right=new FormAttachment(middle,-margin);
  wlFoldername.setLayoutData(fdlFoldername);
  wbFoldername=new Button(wSettings,SWT.PUSH | SWT.CENTER);
  props.setLook(wbFoldername);
  wbFoldername.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.ListFolders.Tooltip"));
  wbFoldername.setImage(GUIResource.getInstance().getImageBol());
  fdbFoldername=new FormData();
  fdbFoldername.right=new FormAttachment(100,0);
  fdbFoldername.top=new FormAttachment(wExportType,0);
  wbFoldername.setLayoutData(fdbFoldername);
  wbFoldername.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      displaydirectoryList();
    }
  }
);
  wFoldername=new TextVar(jobMeta,wSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFoldername);
  wFoldername.addModifyListener(lsMod);
  fdFoldername=new FormData();
  fdFoldername.left=new FormAttachment(middle,margin);
  fdFoldername.top=new FormAttachment(wExportType,margin);
  fdFoldername.right=new FormAttachment(wbFoldername,-margin);
  wFoldername.setLayoutData(fdFoldername);
  wFoldername.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFoldername.setToolTipText(jobMeta.environmentSubstitute(wFoldername.getText()));
    }
  }
);
  wlNewFolder=new Label(wSettings,SWT.RIGHT);
  wlNewFolder.setText(BaseMessages.getString(PKG,"JobExportRepository.NewFolder.Label"));
  props.setLook(wlNewFolder);
  fdlNewFolder=new FormData();
  fdlNewFolder.left=new FormAttachment(0,0);
  fdlNewFolder.top=new FormAttachment(wFoldername,margin);
  fdlNewFolder.right=new FormAttachment(middle,-margin);
  wlNewFolder.setLayoutData(fdlNewFolder);
  wNewFolder=new Button(wSettings,SWT.CHECK);
  props.setLook(wNewFolder);
  wNewFolder.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.NewFolder.Tooltip"));
  fdNewFolder=new FormData();
  fdNewFolder.left=new FormAttachment(middle,margin);
  fdNewFolder.top=new FormAttachment(wFoldername,margin);
  fdNewFolder.right=new FormAttachment(100,0);
  wNewFolder.setLayoutData(fdNewFolder);
  wNewFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  fdSettings=new FormData();
  fdSettings.left=new FormAttachment(0,margin);
  fdSettings.top=new FormAttachment(wRepositoryInfos,margin);
  fdSettings.right=new FormAttachment(100,-margin);
  wSettings.setLayoutData(fdSettings);
  wTarget=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wTarget);
  wTarget.setText(BaseMessages.getString(PKG,"JobExportRepository.Target.Group.Label"));
  FormLayout TargetgroupLayout=new FormLayout();
  TargetgroupLayout.marginWidth=10;
  TargetgroupLayout.marginHeight=10;
  wTarget.setLayout(TargetgroupLayout);
  wlTargetFilename=new Label(wTarget,SWT.RIGHT);
  wlTargetFilename.setText(BaseMessages.getString(PKG,"JobExportRepository.TargetFilename.Label"));
  props.setLook(wlTargetFilename);
  fdlTargetFilename=new FormData();
  fdlTargetFilename.left=new FormAttachment(0,0);
  fdlTargetFilename.top=new FormAttachment(wSettings,margin);
  fdlTargetFilename.right=new FormAttachment(middle,-margin);
  wlTargetFilename.setLayoutData(fdlTargetFilename);
  wbTargetFilename=new Button(wTarget,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTargetFilename);
  wbTargetFilename.setText(BaseMessages.getString(PKG,"JobExportRepository.BrowseFolders.Label"));
  fdbTargetFilename=new FormData();
  fdbTargetFilename.right=new FormAttachment(100,0);
  fdbTargetFilename.top=new FormAttachment(wSettings,margin);
  wbTargetFilename.setLayoutData(fdbTargetFilename);
  wbTargetFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wTargetFilename.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wTargetFilename.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wTargetFilename.setText(dir);
      }
    }
  }
);
  wbTargetFoldername=new Button(wTarget,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTargetFoldername);
  wbTargetFoldername.setText(BaseMessages.getString(PKG,"JobExportRepository.BrowseFiles.Label"));
  fdbTargetFoldername=new FormData();
  fdbTargetFoldername.right=new FormAttachment(wbTargetFilename,-margin);
  fdbTargetFoldername.top=new FormAttachment(wSettings,margin);
  wbTargetFoldername.setLayoutData(fdbTargetFoldername);
  wbTargetFoldername.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.SAVE);
      dialog.setFilterExtensions(new String[]{"*.xml",".*"});
      if (wTargetFilename.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wTargetFilename.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wTargetFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wTargetFilename=new TextVar(jobMeta,wTarget,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTargetFilename);
  wTargetFilename.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.TargetFilename.Tooltip"));
  wTargetFilename.addModifyListener(lsMod);
  fdTargetFilename=new FormData();
  fdTargetFilename.left=new FormAttachment(middle,margin);
  fdTargetFilename.top=new FormAttachment(wSettings,margin);
  fdTargetFilename.right=new FormAttachment(wbTargetFoldername,-margin);
  wTargetFilename.setLayoutData(fdTargetFilename);
  wlcreateFolder=new Label(wTarget,SWT.RIGHT);
  wlcreateFolder.setText(BaseMessages.getString(PKG,"JobExportRepository.createFolder.Label"));
  props.setLook(wlcreateFolder);
  fdlcreateFolder=new FormData();
  fdlcreateFolder.left=new FormAttachment(0,0);
  fdlcreateFolder.top=new FormAttachment(wTargetFilename,margin);
  fdlcreateFolder.right=new FormAttachment(middle,-margin);
  wlcreateFolder.setLayoutData(fdlcreateFolder);
  wcreateFolder=new Button(wTarget,SWT.CHECK);
  props.setLook(wcreateFolder);
  wcreateFolder.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.createFolder.Tooltip"));
  fdcreateFolder=new FormData();
  fdcreateFolder.left=new FormAttachment(middle,margin);
  fdcreateFolder.top=new FormAttachment(wTargetFilename,margin);
  fdcreateFolder.right=new FormAttachment(100,0);
  wcreateFolder.setLayoutData(fdcreateFolder);
  wcreateFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddDate=new Label(wTarget,SWT.RIGHT);
  wlAddDate.setText(BaseMessages.getString(PKG,"JobExportRepository.AddDate.Label"));
  props.setLook(wlAddDate);
  fdlAddDate=new FormData();
  fdlAddDate.left=new FormAttachment(0,0);
  fdlAddDate.top=new FormAttachment(wcreateFolder,margin);
  fdlAddDate.right=new FormAttachment(middle,-margin);
  wlAddDate.setLayoutData(fdlAddDate);
  wAddDate=new Button(wTarget,SWT.CHECK);
  props.setLook(wAddDate);
  wAddDate.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.AddDate.Tooltip"));
  fdAddDate=new FormData();
  fdAddDate.left=new FormAttachment(middle,margin);
  fdAddDate.top=new FormAttachment(wcreateFolder,margin);
  fdAddDate.right=new FormAttachment(100,0);
  wAddDate.setLayoutData(fdAddDate);
  wAddDate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddTime=new Label(wTarget,SWT.RIGHT);
  wlAddTime.setText(BaseMessages.getString(PKG,"JobExportRepository.AddTime.Label"));
  props.setLook(wlAddTime);
  fdlAddTime=new FormData();
  fdlAddTime.left=new FormAttachment(0,0);
  fdlAddTime.top=new FormAttachment(wAddDate,margin);
  fdlAddTime.right=new FormAttachment(middle,-margin);
  wlAddTime.setLayoutData(fdlAddTime);
  wAddTime=new Button(wTarget,SWT.CHECK);
  props.setLook(wAddTime);
  wAddTime.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.AddTime.Tooltip"));
  fdAddTime=new FormData();
  fdAddTime.left=new FormAttachment(middle,margin);
  fdAddTime.top=new FormAttachment(wAddDate,margin);
  fdAddTime.right=new FormAttachment(100,0);
  wAddTime.setLayoutData(fdAddTime);
  wAddTime.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlSpecifyFormat=new Label(wTarget,SWT.RIGHT);
  wlSpecifyFormat.setText(BaseMessages.getString(PKG,"JobExportRepository.SpecifyFormat.Label"));
  props.setLook(wlSpecifyFormat);
  fdlSpecifyFormat=new FormData();
  fdlSpecifyFormat.left=new FormAttachment(0,0);
  fdlSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdlSpecifyFormat.right=new FormAttachment(middle,-margin);
  wlSpecifyFormat.setLayoutData(fdlSpecifyFormat);
  wSpecifyFormat=new Button(wTarget,SWT.CHECK);
  props.setLook(wSpecifyFormat);
  wSpecifyFormat.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.SpecifyFormat.Tooltip"));
  fdSpecifyFormat=new FormData();
  fdSpecifyFormat.left=new FormAttachment(middle,margin);
  fdSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdSpecifyFormat.right=new FormAttachment(100,0);
  wSpecifyFormat.setLayoutData(fdSpecifyFormat);
  wSpecifyFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setDateTimeFormat();
    }
  }
);
  wlDateTimeFormat=new Label(wTarget,SWT.RIGHT);
  wlDateTimeFormat.setText(BaseMessages.getString(PKG,"JobExportRepository.DateTimeFormat.Label"));
  props.setLook(wlDateTimeFormat);
  fdlDateTimeFormat=new FormData();
  fdlDateTimeFormat.left=new FormAttachment(0,0);
  fdlDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdlDateTimeFormat.right=new FormAttachment(middle,-margin);
  wlDateTimeFormat.setLayoutData(fdlDateTimeFormat);
  wDateTimeFormat=new CCombo(wTarget,SWT.BORDER | SWT.READ_ONLY);
  wDateTimeFormat.setEditable(true);
  props.setLook(wDateTimeFormat);
  wDateTimeFormat.addModifyListener(lsMod);
  fdDateTimeFormat=new FormData();
  fdDateTimeFormat.left=new FormAttachment(middle,margin);
  fdDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdDateTimeFormat.right=new FormAttachment(100,0);
  wDateTimeFormat.setLayoutData(fdDateTimeFormat);
  String dats[]=Const.getDateFormats();
  for (int x=0; x < dats.length; x++)   wDateTimeFormat.add(dats[x]);
  wlIfFileExists=new Label(wTarget,SWT.RIGHT);
  wlIfFileExists.setText(BaseMessages.getString(PKG,"JobExportRepository.IfFileExists.Label"));
  props.setLook(wlIfFileExists);
  fdlIfFileExists=new FormData();
  fdlIfFileExists.left=new FormAttachment(0,0);
  fdlIfFileExists.right=new FormAttachment(middle,0);
  fdlIfFileExists.top=new FormAttachment(wDateTimeFormat,margin);
  wlIfFileExists.setLayoutData(fdlIfFileExists);
  wIfFileExists=new CCombo(wTarget,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wIfFileExists.add(BaseMessages.getString(PKG,"JobExportRepository.Do_Nothing_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobExportRepository.Overwrite_File_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobExportRepository.Unique_Name_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobExportRepository.Fail_IfFileExists.Label"));
  wIfFileExists.select(0);
  props.setLook(wIfFileExists);
  fdIfFileExists=new FormData();
  fdIfFileExists.left=new FormAttachment(middle,margin);
  fdIfFileExists.top=new FormAttachment(wDateTimeFormat,margin);
  fdIfFileExists.right=new FormAttachment(100,0);
  wIfFileExists.setLayoutData(fdIfFileExists);
  wlAddFileToResult=new Label(wTarget,SWT.RIGHT);
  wlAddFileToResult.setText(BaseMessages.getString(PKG,"JobExportRepository.AddFileToResult.Label"));
  props.setLook(wlAddFileToResult);
  fdlAddFileToResult=new FormData();
  fdlAddFileToResult.left=new FormAttachment(0,0);
  fdlAddFileToResult.top=new FormAttachment(wIfFileExists,margin);
  fdlAddFileToResult.right=new FormAttachment(middle,-margin);
  wlAddFileToResult.setLayoutData(fdlAddFileToResult);
  wAddFileToResult=new Button(wTarget,SWT.CHECK);
  props.setLook(wAddFileToResult);
  wAddFileToResult.setToolTipText(BaseMessages.getString(PKG,"JobExportRepository.AddFileToResult.Tooltip"));
  fdAddFileToResult=new FormData();
  fdAddFileToResult.left=new FormAttachment(middle,margin);
  fdAddFileToResult.top=new FormAttachment(wIfFileExists,margin);
  fdAddFileToResult.right=new FormAttachment(100,0);
  wAddFileToResult.setLayoutData(fdAddFileToResult);
  wAddFileToResult.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  fdTarget=new FormData();
  fdTarget.left=new FormAttachment(0,margin);
  fdTarget.top=new FormAttachment(wSettings,margin);
  fdTarget.right=new FormAttachment(100,-margin);
  wTarget.setLayoutData(fdTarget);
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(0,0);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  props.setLook(wGeneralComp);
  wAdvancedTab=new CTabItem(wTabFolder,SWT.NONE);
  wAdvancedTab.setText(BaseMessages.getString(PKG,"JobExportRepository.Tab.Advanced.Label"));
  FormLayout contentLayout=new FormLayout();
  contentLayout.marginWidth=3;
  contentLayout.marginHeight=3;
  wAdvancedComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wAdvancedComp);
  wAdvancedComp.setLayout(contentLayout);
  wSuccessOn=new Group(wAdvancedComp,SWT.SHADOW_NONE);
  props.setLook(wSuccessOn);
  wSuccessOn.setText(BaseMessages.getString(PKG,"JobExportRepository.SuccessOn.Group.Label"));
  FormLayout successongroupLayout=new FormLayout();
  successongroupLayout.marginWidth=10;
  successongroupLayout.marginHeight=10;
  wSuccessOn.setLayout(successongroupLayout);
  wlSuccessCondition=new Label(wSuccessOn,SWT.RIGHT);
  wlSuccessCondition.setText(BaseMessages.getString(PKG,"JobExportRepository.SuccessCondition.Label"));
  props.setLook(wlSuccessCondition);
  fdlSuccessCondition=new FormData();
  fdlSuccessCondition.left=new FormAttachment(0,0);
  fdlSuccessCondition.right=new FormAttachment(middle,0);
  fdlSuccessCondition.top=new FormAttachment(0,margin);
  wlSuccessCondition.setLayoutData(fdlSuccessCondition);
  wSuccessCondition=new CCombo(wSuccessOn,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wSuccessCondition.add(BaseMessages.getString(PKG,"JobExportRepository.SuccessWhenAllWorksFine.Label"));
  wSuccessCondition.add(BaseMessages.getString(PKG,"JobExportRepository.SuccessWhenErrorsLessThan.Label"));
  wSuccessCondition.select(0);
  props.setLook(wSuccessCondition);
  fdSuccessCondition=new FormData();
  fdSuccessCondition.left=new FormAttachment(middle,0);
  fdSuccessCondition.top=new FormAttachment(0,margin);
  fdSuccessCondition.right=new FormAttachment(100,0);
  wSuccessCondition.setLayoutData(fdSuccessCondition);
  wSuccessCondition.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeSuccessCondition();
    }
  }
);
  wlLimit=new Label(wSuccessOn,SWT.RIGHT);
  wlLimit.setText(BaseMessages.getString(PKG,"JobExportRepository.Limit.Label"));
  props.setLook(wlLimit);
  fdlLimit=new FormData();
  fdlLimit.left=new FormAttachment(0,0);
  fdlLimit.top=new FormAttachment(wSuccessCondition,margin);
  fdlLimit.right=new FormAttachment(middle,-margin);
  wlLimit.setLayoutData(fdlLimit);
  wLimit=new TextVar(jobMeta,wSuccessOn,SWT.SINGLE | SWT.LEFT | SWT.BORDER,BaseMessages.getString(PKG,"JobExportRepository.NrLimit.Tooltip"));
  props.setLook(wLimit);
  wLimit.addModifyListener(lsMod);
  fdLimit=new FormData();
  fdLimit.left=new FormAttachment(middle,0);
  fdLimit.top=new FormAttachment(wSuccessCondition,margin);
  fdLimit.right=new FormAttachment(100,-margin);
  wLimit.setLayoutData(fdLimit);
  fdSuccessOn=new FormData();
  fdSuccessOn.left=new FormAttachment(0,margin);
  fdSuccessOn.top=new FormAttachment(0,margin);
  fdSuccessOn.right=new FormAttachment(100,-margin);
  wSuccessOn.setLayoutData(fdSuccessOn);
  fdAdvancedComp=new FormData();
  fdAdvancedComp.left=new FormAttachment(0,0);
  fdAdvancedComp.top=new FormAttachment(0,0);
  fdAdvancedComp.right=new FormAttachment(100,0);
  fdAdvancedComp.bottom=new FormAttachment(100,0);
  wAdvancedComp.setLayoutData(wAdvancedComp);
  wAdvancedComp.layout();
  wAdvancedTab.setControl(wAdvancedComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wName,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wTabFolder);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsTest=new Listener(){
    public void handleEvent(    Event e){
      repConnect(true);
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  wTest.addListener(SWT.Selection,lsTest);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wRepositoryname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  activeOneFolder();
  setDateTimeFormat();
  activeSuccessCondition();
  wTabFolder.setSelection(0);
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
