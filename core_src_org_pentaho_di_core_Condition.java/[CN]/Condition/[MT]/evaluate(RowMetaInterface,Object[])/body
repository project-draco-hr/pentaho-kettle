{
  boolean retval=false;
  try {
    if (isAtomic()) {
      if (function == FUNC_TRUE)       return true;
      if (left_valuename != null && left_valuename.length() > 0 && left_fieldnr < -1)       left_fieldnr=rowMeta.indexOfValue(left_valuename);
      if (right_valuename != null && right_valuename.length() > 0 && right_fieldnr < -1)       right_fieldnr=rowMeta.indexOfValue(right_valuename);
      ValueMetaInterface fieldMeta=null;
      Object field=null;
      if (left_fieldnr >= 0) {
        fieldMeta=rowMeta.getValueMeta(left_fieldnr);
        field=r[left_fieldnr];
      }
 else       return false;
      ValueMetaInterface fieldMeta2=right_exact != null ? right_exact.getValueMeta() : null;
      Object field2=right_exact != null ? right_exact.getValueData() : null;
      if (field2 == null && right_fieldnr >= 0) {
        fieldMeta2=rowMeta.getValueMeta(right_fieldnr);
        field2=r[right_fieldnr];
      }
switch (function) {
case FUNC_EQUAL:
        retval=(fieldMeta.compare(field,fieldMeta2,field2) == 0);
      break;
case FUNC_NOT_EQUAL:
    retval=(fieldMeta.compare(field,fieldMeta2,field2) != 0);
  break;
case FUNC_SMALLER:
retval=(fieldMeta.compare(field,fieldMeta2,field2) < 0);
break;
case FUNC_SMALLER_EQUAL:
retval=(fieldMeta.compare(field,fieldMeta2,field2) <= 0);
break;
case FUNC_LARGER:
retval=(fieldMeta.compare(field,fieldMeta2,field2) > 0);
break;
case FUNC_LARGER_EQUAL:
retval=(fieldMeta.compare(field,fieldMeta2,field2) >= 0);
break;
case FUNC_REGEXP:
if (fieldMeta.isNull(field) || field2 == null) {
retval=false;
}
 else {
retval=Pattern.matches(fieldMeta2.getCompatibleString(field2),fieldMeta.getCompatibleString(field));
}
break;
case FUNC_NULL:
retval=(fieldMeta.isNull(field));
break;
case FUNC_NOT_NULL:
retval=(!fieldMeta.isNull(field));
break;
case FUNC_IN_LIST:
if (inList == null || right_fieldnr >= 0) {
inList=Const.splitString(fieldMeta2.getString(field2),';');
Arrays.sort(inList);
}
String searchString=fieldMeta.getCompatibleString(field);
int inIndex=-1;
if (searchString != null) {
inIndex=Arrays.binarySearch(inList,searchString);
}
retval=Boolean.valueOf(inIndex >= 0);
break;
case FUNC_CONTAINS:
retval=fieldMeta.getCompatibleString(field) != null ? fieldMeta.getCompatibleString(field).indexOf(fieldMeta2.getCompatibleString(field2)) >= 0 : false;
break;
case FUNC_STARTS_WITH:
retval=fieldMeta.getCompatibleString(field) != null ? fieldMeta.getCompatibleString(field).startsWith(fieldMeta2.getCompatibleString(field2)) : false;
break;
case FUNC_ENDS_WITH:
String string=fieldMeta.getCompatibleString(field);
if (!Const.isEmpty(string)) {
if (right_string == null && field2 != null) right_string=fieldMeta2.getCompatibleString(field2);
if (right_string != null) {
retval=string.endsWith(fieldMeta2.getCompatibleString(field2));
}
 else {
retval=false;
}
}
 else {
retval=false;
}
break;
case FUNC_LIKE:
if (fieldMeta.isNull(field) || field2 == null) {
retval=false;
}
 else {
String regex=fieldMeta2.getCompatibleString(field2);
regex=regex.replace("%",".*");
regex=regex.replace("?",".");
retval=Pattern.matches(regex,fieldMeta.getCompatibleString(field));
}
break;
default :
break;
}
if (isNegated()) retval=!retval;
}
 else {
Condition cb0=list.get(0);
retval=cb0.evaluate(rowMeta,r);
for (int i=1; i < list.size(); i++) {
Condition cb=list.get(i);
switch (cb.getOperator()) {
case Condition.OPERATOR_OR:
retval=retval || cb.evaluate(rowMeta,r);
break;
case Condition.OPERATOR_AND:
retval=retval && cb.evaluate(rowMeta,r);
break;
case Condition.OPERATOR_OR_NOT:
retval=retval || (!cb.evaluate(rowMeta,r));
break;
case Condition.OPERATOR_AND_NOT:
retval=retval && (!cb.evaluate(rowMeta,r));
break;
case Condition.OPERATOR_XOR:
retval=retval ^ cb.evaluate(rowMeta,r);
break;
default :
break;
}
}
if (isNegated()) retval=!retval;
}
}
 catch (Exception e) {
throw new RuntimeException("Unexpected error evaluation condition [" + toString() + "]",e);
}
return retval;
}
