{
  if (transMeta == null) {
    return;
  }
  StepMeta stepMeta=transMeta.findStep(stepname);
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.StartingBuffersAllocation"));
  }
  List<StepMeta> previousSteps=transMeta.findPreviousSteps(stepMeta,true);
  List<StepMeta> succeedingSteps=transMeta.findNextSteps(stepMeta);
  int nrInput=previousSteps.size();
  int nrOutput=succeedingSteps.size();
  inputRowSets=new ArrayList<RowSet>();
  outputRowSets=new ArrayList<RowSet>();
  errorRowSet=null;
  prevSteps=new StepMeta[nrInput];
  nextSteps=new StepMeta[nrOutput];
  currentInputRowSetNr=0;
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.StepInfo",String.valueOf(nrInput),String.valueOf(nrOutput)));
  }
  for (int i=0; i < previousSteps.size(); i++) {
    prevSteps[i]=previousSteps.get(i);
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.GotPreviousStep",stepname,String.valueOf(i),prevSteps[i].getName()));
    }
    int prevCopies=prevSteps[i].getCopies();
    int nextCopies=stepMeta.getCopies();
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.InputRowInfo",String.valueOf(prevCopies),String.valueOf(nextCopies)));
    }
    int nrCopies;
    int dispatchType;
    if (prevCopies == 1 && nextCopies == 1) {
      dispatchType=Trans.TYPE_DISP_1_1;
      nrCopies=1;
    }
 else {
      if (prevCopies == 1 && nextCopies > 1) {
        dispatchType=Trans.TYPE_DISP_1_N;
        nrCopies=1;
      }
 else {
        if (prevCopies > 1 && nextCopies == 1) {
          dispatchType=Trans.TYPE_DISP_N_1;
          nrCopies=prevCopies;
        }
 else {
          if (prevCopies == nextCopies) {
            if (stepMeta.isPartitioned() && !prevSteps[i].isPartitioned()) {
              dispatchType=Trans.TYPE_DISP_N_M;
              nrCopies=nextCopies;
            }
 else {
              dispatchType=Trans.TYPE_DISP_N_N;
              nrCopies=1;
            }
          }
 else {
            dispatchType=Trans.TYPE_DISP_N_M;
            nrCopies=prevCopies;
          }
        }
      }
    }
    for (int c=0; c < nrCopies; c++) {
      RowSet rowSet=null;
switch (dispatchType) {
case Trans.TYPE_DISP_1_1:
        rowSet=trans.findRowSet(prevSteps[i].getName(),0,stepname,0);
      break;
case Trans.TYPE_DISP_1_N:
    rowSet=trans.findRowSet(prevSteps[i].getName(),0,stepname,getCopy());
  break;
case Trans.TYPE_DISP_N_1:
rowSet=trans.findRowSet(prevSteps[i].getName(),c,stepname,0);
break;
case Trans.TYPE_DISP_N_N:
rowSet=trans.findRowSet(prevSteps[i].getName(),getCopy(),stepname,getCopy());
break;
case Trans.TYPE_DISP_N_M:
rowSet=trans.findRowSet(prevSteps[i].getName(),c,stepname,getCopy());
break;
default :
break;
}
if (rowSet != null) {
inputRowSets.add(rowSet);
if (log.isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.FoundInputRowset",rowSet.getName()));
}
}
 else {
if (!prevSteps[i].isMapping() && !stepMeta.isMapping()) {
logError(BaseMessages.getString(PKG,"BaseStep.Log.UnableToFindInputRowset"));
setErrors(1);
stopAll();
return;
}
}
}
}
for (int i=0; i < nrOutput; i++) {
nextSteps[i]=succeedingSteps.get(i);
int prevCopies=stepMeta.getCopies();
int nextCopies=nextSteps[i].getCopies();
if (log.isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.OutputRowInfo",String.valueOf(prevCopies),String.valueOf(nextCopies)));
}
int nrCopies;
int dispatchType;
if (prevCopies == 1 && nextCopies == 1) {
dispatchType=Trans.TYPE_DISP_1_1;
nrCopies=1;
}
 else {
if (prevCopies == 1 && nextCopies > 1) {
dispatchType=Trans.TYPE_DISP_1_N;
nrCopies=nextCopies;
}
 else {
if (prevCopies > 1 && nextCopies == 1) {
dispatchType=Trans.TYPE_DISP_N_1;
nrCopies=1;
}
 else {
if (prevCopies == nextCopies) {
if (!stepMeta.isPartitioned() && nextSteps[i].isPartitioned()) {
dispatchType=Trans.TYPE_DISP_N_M;
nrCopies=nextCopies;
}
 else {
dispatchType=Trans.TYPE_DISP_N_N;
nrCopies=1;
}
}
 else {
dispatchType=Trans.TYPE_DISP_N_M;
nrCopies=nextCopies;
}
}
}
}
for (int c=0; c < nrCopies; c++) {
RowSet rowSet=null;
switch (dispatchType) {
case Trans.TYPE_DISP_1_1:
rowSet=trans.findRowSet(stepname,0,nextSteps[i].getName(),0);
break;
case Trans.TYPE_DISP_1_N:
rowSet=trans.findRowSet(stepname,0,nextSteps[i].getName(),c);
break;
case Trans.TYPE_DISP_N_1:
rowSet=trans.findRowSet(stepname,getCopy(),nextSteps[i].getName(),0);
break;
case Trans.TYPE_DISP_N_N:
rowSet=trans.findRowSet(stepname,getCopy(),nextSteps[i].getName(),getCopy());
break;
case Trans.TYPE_DISP_N_M:
rowSet=trans.findRowSet(stepname,getCopy(),nextSteps[i].getName(),c);
break;
default :
break;
}
if (rowSet != null) {
outputRowSets.add(rowSet);
if (log.isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.FoundOutputRowset",rowSet.getName()));
}
}
 else {
if (!stepMeta.isMapping() && !nextSteps[i].isMapping()) {
logError(BaseMessages.getString(PKG,"BaseStep.Log.UnableToFindOutputRowset"));
setErrors(1);
stopAll();
return;
}
}
}
}
if (stepMeta.getTargetStepPartitioningMeta() != null) {
nextStepPartitioningMeta=stepMeta.getTargetStepPartitioningMeta();
}
if (log.isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.FinishedDispatching"));
}
}
