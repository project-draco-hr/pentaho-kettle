{
  while (paused.get() && !stopped.get()) {
    try {
      Thread.sleep(1);
    }
 catch (    InterruptedException e) {
      throw new KettleStepException(e);
    }
  }
  if (stopped.get()) {
    if (log.isDebug()) {
      logDebug(BaseMessages.getString(PKG,"BaseStep.Log.StopPuttingARow"));
    }
    stopAll();
    return;
  }
  if (this.checkTransRunning == false) {
    while (!trans.isRunning() && !stopped.get()) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
      }
    }
    this.checkTransRunning=true;
  }
synchronized (rowListeners) {
    for (int i=0; i < rowListeners.size(); i++) {
      RowListener rowListener=rowListeners.get(i);
      rowListener.rowWrittenEvent(rowMeta,row);
    }
  }
  if (terminator && terminator_rows != null) {
    try {
      terminator_rows.add(rowMeta.cloneRow(row));
    }
 catch (    KettleValueException e) {
      throw new KettleStepException("Unable to clone row while adding rows to the terminator rows.",e);
    }
  }
  if (outputRowSets.isEmpty()) {
    incrementLinesWritten();
    return;
  }
switch (repartitioning) {
case StepPartitioningMeta.PARTITIONING_METHOD_NONE:
    noPartitioning(rowMeta,row);
  break;
case StepPartitioningMeta.PARTITIONING_METHOD_SPECIAL:
specialPartitioning(rowMeta,row);
break;
case StepPartitioningMeta.PARTITIONING_METHOD_MIRROR:
mirrorPartitioning(rowMeta,row);
break;
default :
throw new KettleStepException("Internal error: invalid repartitioning type: " + repartitioning);
}
}
