{
  sdi.setStatus(StepExecutionStatus.STATUS_INIT);
  String slaveNr=transMeta.getVariable(Const.INTERNAL_VARIABLE_SLAVE_SERVER_NUMBER);
  String clusterSize=transMeta.getVariable(Const.INTERNAL_VARIABLE_CLUSTER_SIZE);
  boolean master="Y".equalsIgnoreCase(transMeta.getVariable(Const.INTERNAL_VARIABLE_CLUSTER_MASTER));
  if (!Const.isEmpty(slaveNr) && !Const.isEmpty(clusterSize) && !master) {
    this.slaveNr=Integer.parseInt(slaveNr);
    this.clusterSize=Integer.parseInt(clusterSize);
    if (log.isDetailed()) {
      logDetailed("Running on slave server #" + slaveNr + "/"+ clusterSize+ ".");
    }
  }
 else {
    this.slaveNr=0;
    this.clusterSize=0;
  }
  SlaveStepCopyPartitionDistribution partitionDistribution=transMeta.getSlaveStepCopyPartitionDistribution();
  if (stepMeta.isPartitioned()) {
    if (partitionDistribution != null && !partitionDistribution.getDistribution().isEmpty()) {
      String slaveServerName=getVariable(Const.INTERNAL_VARIABLE_SLAVE_SERVER_NAME);
      int stepCopyNr=stepcopy;
      PartitionSchema partitionSchema=stepMeta.getStepPartitioningMeta().getPartitionSchema();
      int partitionNr=partitionDistribution.getPartition(slaveServerName,partitionSchema.getName(),stepCopyNr);
      if (partitionNr >= 0) {
        String partitionNrString=new DecimalFormat("000").format(partitionNr);
        setVariable(Const.INTERNAL_VARIABLE_STEP_PARTITION_NR,partitionNrString);
        if (partitionDistribution.getOriginalPartitionSchemas() != null) {
          String partitionSchemaName=stepMeta.getStepPartitioningMeta().getPartitionSchema().getName();
          for (          PartitionSchema originalPartitionSchema : partitionDistribution.getOriginalPartitionSchemas()) {
            String slavePartitionSchemaName=TransSplitter.createSlavePartitionSchemaName(originalPartitionSchema.getName());
            if (slavePartitionSchemaName.equals(partitionSchemaName)) {
              PartitionSchema schema=(PartitionSchema)originalPartitionSchema.clone();
              if (schema.isDynamicallyDefined()) {
                schema.expandPartitionsDynamically(this.clusterSize,this);
              }
              String partID=schema.getPartitionIDs().get(partitionNr);
              setVariable(Const.INTERNAL_VARIABLE_STEP_PARTITION_ID,partID);
              break;
            }
          }
        }
      }
    }
 else {
      int partitionNr=stepcopy;
      String partitionNrString=new DecimalFormat("000").format(partitionNr);
      setVariable(Const.INTERNAL_VARIABLE_STEP_PARTITION_NR,partitionNrString);
      String partitionID=stepMeta.getStepPartitioningMeta().getPartitionSchema().getPartitionIDs().get(partitionNr);
      setVariable(Const.INTERNAL_VARIABLE_STEP_PARTITION_ID,partitionID);
    }
  }
 else   if (!Const.isEmpty(partitionID)) {
    setVariable(Const.INTERNAL_VARIABLE_STEP_PARTITION_ID,partitionID);
  }
  uniqueStepNrAcrossSlaves=this.slaveNr * getStepMeta().getCopies() + stepcopy;
  uniqueStepCountAcrossSlaves=this.clusterSize <= 1 ? getStepMeta().getCopies() : this.clusterSize * getStepMeta().getCopies();
  if (uniqueStepCountAcrossSlaves == 0) {
    uniqueStepCountAcrossSlaves=1;
  }
  setVariable(Const.INTERNAL_VARIABLE_STEP_UNIQUE_NUMBER,Integer.toString(uniqueStepNrAcrossSlaves));
  setVariable(Const.INTERNAL_VARIABLE_STEP_UNIQUE_COUNT,Integer.toString(uniqueStepCountAcrossSlaves));
  setVariable(Const.INTERNAL_VARIABLE_STEP_COPYNR,Integer.toString(stepcopy));
  try {
    remoteOutputSteps=new ArrayList<RemoteStep>();
    for (int i=0; i < stepMeta.getRemoteOutputSteps().size(); i++) {
      RemoteStep remoteStep=stepMeta.getRemoteOutputSteps().get(i);
      if (getCopy() == remoteStep.getSourceStepCopyNr()) {
        RemoteStep copy=(RemoteStep)remoteStep.clone();
        try {
          if (log.isDetailed()) {
            logDetailed("Selected remote output step [" + copy + "] to open a server socket to remote step ["+ copy.getTargetStep()+ "]."+ copy.getTargetStepCopyNr()+ " on port "+ copy.getPort());
          }
          copy.openServerSocket(this);
          if (log.isDetailed()) {
            logDetailed("Opened a server socket connection to " + copy);
          }
        }
 catch (        Exception e) {
          logError("Unable to open server socket during step initialisation: " + copy.toString(),e);
          throw e;
        }
        remoteOutputSteps.add(copy);
      }
    }
  }
 catch (  Exception e) {
    for (    RemoteStep remoteStep : remoteOutputSteps) {
      if (remoteStep.getServerSocket() != null) {
        try {
          ServerSocket serverSocket=remoteStep.getServerSocket();
          getTrans().getSocketRepository().releaseSocket(serverSocket.getLocalPort());
        }
 catch (        IOException e1) {
          logError("Unable to close server socket after error during step initialisation",e);
        }
      }
    }
    return false;
  }
  try {
    remoteInputSteps=new ArrayList<RemoteStep>();
    if ((stepMeta.isPartitioned() && getClusterSize() > 1) || stepMeta.getCopies() > 1) {
      for (int i=0; i < stepMeta.getRemoteInputSteps().size(); i++) {
        RemoteStep remoteStep=stepMeta.getRemoteInputSteps().get(i);
        if (remoteStep.getTargetStepCopyNr() == stepcopy) {
          RemoteStep copy=(RemoteStep)remoteStep.clone();
          remoteInputSteps.add(copy);
        }
      }
    }
 else {
      for (      RemoteStep remoteStep : stepMeta.getRemoteInputSteps()) {
        RemoteStep copy=(RemoteStep)remoteStep.clone();
        remoteInputSteps.add(copy);
      }
    }
  }
 catch (  Exception e) {
    logError("Unable to initialize remote input steps during step initialisation",e);
    return false;
  }
  StepErrorMeta stepErrorMeta=stepMeta.getStepErrorMeta();
  if (stepErrorMeta != null) {
    boolean envSubFailed=false;
    try {
      maxErrors=(!Const.isEmpty(stepErrorMeta.getMaxErrors()) ? Long.valueOf(trans.environmentSubstitute(stepErrorMeta.getMaxErrors())) : -1L);
    }
 catch (    NumberFormatException nfe) {
      log.logError(BaseMessages.getString(PKG,"BaseStep.Log.NumberFormatException",BaseMessages.getString(PKG,"BaseStep.Property.MaxErrors.Name"),this.stepname,(stepErrorMeta.getMaxErrors() != null ? stepErrorMeta.getMaxErrors() : "")));
      envSubFailed=true;
    }
    try {
      minRowsForMaxErrorPercent=(!Const.isEmpty(stepErrorMeta.getMinPercentRows()) ? Long.valueOf(trans.environmentSubstitute(stepErrorMeta.getMinPercentRows())) : -1L);
    }
 catch (    NumberFormatException nfe) {
      log.logError(BaseMessages.getString(PKG,"BaseStep.Log.NumberFormatException",BaseMessages.getString(PKG,"BaseStep.Property.MinRowsForErrorsPercentCalc.Name"),this.stepname,(stepErrorMeta.getMinPercentRows() != null ? stepErrorMeta.getMinPercentRows() : "")));
      envSubFailed=true;
    }
    try {
      maxPercentErrors=(!Const.isEmpty(stepErrorMeta.getMaxPercentErrors()) ? Integer.valueOf(trans.environmentSubstitute(stepErrorMeta.getMaxPercentErrors())) : -1);
    }
 catch (    NumberFormatException nfe) {
      log.logError(BaseMessages.getString(PKG,"BaseStep.Log.NumberFormatException",BaseMessages.getString(PKG,"BaseStep.Property.MaxPercentErrors.Name"),this.stepname,(stepErrorMeta.getMaxPercentErrors() != null ? stepErrorMeta.getMaxPercentErrors() : "")));
      envSubFailed=true;
    }
    if (envSubFailed) {
      return false;
    }
  }
  return true;
}
