{
  String expression=expressionEditor.getText();
  int expressionLength=expression.length();
  Map<String,FormulaMessage> messages=evaluator.evaluateFormula(expression);
  Vector<StyleRange> styles=new Vector<StyleRange>();
  StringBuffer report=new StringBuffer();
  for (  FormulaMessage message : messages.values()) {
    ParsePosition position=message.getPosition();
    PositionAndLength positionAndLength=PositionAndLength.calculatePositionAndLength(expression,position);
    int pos=positionAndLength.getPosition();
    int length=positionAndLength.getLength();
    if (pos < expressionLength) {
switch (message.getType()) {
case FormulaMessage.TYPE_ERROR:
        report.append(message.toString()).append(Const.CR);
      StyleRange styleRangeRed=new StyleRange(pos,length,red,null,SWT.BOLD);
    styleRangeRed.underline=true;
  styles.add(styleRangeRed);
break;
case FormulaMessage.TYPE_FUNCTION:
styles.add(new StyleRange(pos,length,black,null,SWT.BOLD));
break;
case FormulaMessage.TYPE_FIELD:
break;
case FormulaMessage.TYPE_STATIC_NUMBER:
case FormulaMessage.TYPE_STATIC_STRING:
case FormulaMessage.TYPE_STATIC_DATE:
case FormulaMessage.TYPE_STATIC_LOGICAL:
styles.add(new StyleRange(pos,length,blue,gray,SWT.BOLD | SWT.ITALIC));
break;
default :
break;
}
}
}
message.setText(report.toString());
Collections.sort(styles,new Comparator<StyleRange>(){
public int compare(StyleRange o1,StyleRange o2){
return o1.start - o2.start;
}
}
);
StyleRange[] styleRanges=new StyleRange[styles.size()];
styles.copyInto(styleRanges);
expressionEditor.setStyleRanges(styleRanges);
}
