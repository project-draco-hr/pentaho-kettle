{
  RepositoriesMeta repositoriesMeta=new RepositoriesMeta();
  boolean singleDiServerInstance="true".equals(PentahoSystem.getSystemSetting(SINGLE_DI_SERVER_INSTANCE,"true"));
  try {
    if (singleDiServerInstance) {
      String repositoriesXml="<?xml version=\"1.0\" encoding=\"UTF-8\"?><repositories>" + "<repository><id>PentahoEnterpriseRepository</id>" + "<name>" + SINGLE_DI_SERVER_INSTANCE + "</name>"+ "<description>"+ SINGLE_DI_SERVER_INSTANCE+ "</description>"+ "<repository_location_url>"+ PentahoSystem.getApplicationContext().getFullyQualifiedServerURL()+ "</repository_location_url>"+ "<version_comment_mandatory>N</version_comment_mandatory>"+ "</repository>"+ "</repositories>";
      ByteArrayInputStream sbis=new ByteArrayInputStream(repositoriesXml.getBytes("UTF8"));
      repositoriesMeta.readDataFromInputStream(sbis);
    }
 else {
      repositoriesMeta.readData();
    }
  }
 catch (  Exception e) {
    throw new KettleException("Meta repository not populated",e);
  }
  RepositoryMeta repositoryMeta=null;
  try {
    if (singleDiServerInstance) {
      repositoryMeta=repositoriesMeta.findRepository(SINGLE_DI_SERVER_INSTANCE);
    }
 else {
      repositoryMeta=repositoriesMeta.findRepository(repositoryName);
    }
  }
 catch (  Exception e) {
    throw new KettleException("Repository not found",e);
  }
  if (repositoryMeta == null) {
    throw new KettleException("RepositoryMeta is null");
  }
  Repository repository=null;
  try {
    repository=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,repositoryMeta.getId(),Repository.class);
    repository.init(repositoryMeta);
  }
 catch (  Exception e) {
    throw new KettleException("Could not get repository instance",e);
  }
  repository.connect(PentahoSessionHolder.getSession().getName(),"password");
  return repository;
}
