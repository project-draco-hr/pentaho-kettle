{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    databaseMeta=DatabaseMeta.findDatabase(databases,id_connection);
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    commitSize=(int)rep.getStepAttributeInteger(id_step,"commit");
    update=rep.getStepAttributeBoolean(id_step,"update");
    int nrkeys=rep.countNrStepAttributes(id_step,"lookup_key_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrkeys,nrfields);
    for (int i=0; i < nrkeys; i++) {
      keyStream[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name");
      keyLookup[i]=rep.getStepAttributeString(id_step,i,"lookup_key_field");
    }
    dateField=rep.getStepAttributeString(id_step,"date_name");
    dateFrom=rep.getStepAttributeString(id_step,"date_from");
    dateTo=rep.getStepAttributeString(id_step,"date_to");
    for (int i=0; i < nrfields; i++) {
      fieldStream[i]=rep.getStepAttributeString(id_step,i,"field_name");
      fieldLookup[i]=rep.getStepAttributeString(id_step,i,"field_lookup");
      fieldUpdate[i]=getUpdateType(update,rep.getStepAttributeString(id_step,i,"field_update"));
    }
    keyField=rep.getStepAttributeString(id_step,"return_name");
    keyRename=rep.getStepAttributeString(id_step,"return_rename");
    autoIncrement=rep.getStepAttributeBoolean(id_step,"use_autoinc");
    versionField=rep.getStepAttributeString(id_step,"version_field");
    techKeyCreation=rep.getStepAttributeString(id_step,"creation_method");
    sequenceName=rep.getStepAttributeString(id_step,"sequence");
    minYear=(int)rep.getStepAttributeInteger(id_step,"min_year");
    maxYear=(int)rep.getStepAttributeInteger(id_step,"max_year");
    cacheSize=(int)rep.getStepAttributeInteger(id_step,"cache_size");
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("DimensionLookupMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
