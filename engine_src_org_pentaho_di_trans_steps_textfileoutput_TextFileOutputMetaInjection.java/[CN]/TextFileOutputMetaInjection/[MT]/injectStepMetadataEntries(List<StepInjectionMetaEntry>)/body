{
  List<String> outputFields=new ArrayList<String>();
  List<String> outputTypes=new ArrayList<String>();
  List<String> outputLengths=new ArrayList<String>();
  List<String> outputFormats=new ArrayList<String>();
  List<String> outputPrecisions=new ArrayList<String>();
  List<String> outputCurrencies=new ArrayList<String>();
  List<String> outputDecimals=new ArrayList<String>();
  List<String> outputGroups=new ArrayList<String>();
  List<String> outputTrims=new ArrayList<String>();
  List<String> outputNulls=new ArrayList<String>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null) {
      continue;
    }
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case OUTPUT_FIELDS:
      for (      StepInjectionMetaEntry lookField : lookFields.getDetails()) {
        Entry fieldEntry=Entry.findEntry(lookField.getKey());
        if (fieldEntry == Entry.OUTPUT_FIELD) {
          String outputFieldname=null;
          String outputType=null;
          String outputLength=null;
          String outputFormat=null;
          String outputPrecision=null;
          String outputCurrency=null;
          String outputDecimal=null;
          String outputGroup=null;
          String outputTrim=null;
          String outputNull=null;
          List<StepInjectionMetaEntry> entries=lookField.getDetails();
          for (          StepInjectionMetaEntry entry : entries) {
            Entry metaEntry=Entry.findEntry(entry.getKey());
            if (metaEntry != null) {
              String value=(String)entry.getValue();
switch (metaEntry) {
case OUTPUT_FIELDNAME:
                outputFieldname=value;
              break;
case OUTPUT_TYPE:
            outputType=value;
          break;
case OUTPUT_LENGTH:
        outputLength=value;
      break;
case OUTPUT_FORMAT:
    outputFormat=value;
  break;
case OUTPUT_PRECISION:
outputPrecision=value;
break;
case OUTPUT_CURRENCY:
outputCurrency=value;
break;
case OUTPUT_DECIMAL:
outputDecimal=value;
break;
case OUTPUT_GROUP:
outputGroup=value;
break;
case OUTPUT_TRIM:
outputTrim=value;
break;
case OUTPUT_NULL:
outputNull=value;
break;
default :
break;
}
}
}
outputFields.add(outputFieldname);
outputTypes.add(outputType);
outputLengths.add(outputLength);
outputFormats.add(outputFormat);
outputPrecisions.add(outputPrecision);
outputCurrencies.add(outputCurrency);
outputDecimals.add(outputDecimal);
outputGroups.add(outputGroup);
outputTrims.add(outputTrim);
outputNulls.add(outputNull);
}
}
break;
case FILENAME:
meta.setFileName(lookValue);
break;
case RUN_AS_COMMAND:
meta.setFileAsCommand("Y".equalsIgnoreCase(lookValue));
break;
case PASS_TO_SERVLET:
meta.setServletOutput("Y".equalsIgnoreCase(lookValue));
break;
case CREATE_PARENT_FOLDER:
meta.setCreateParentFolder("Y".equalsIgnoreCase(lookValue));
break;
case FILENAME_IN_FIELD:
meta.setFileNameInField("Y".equalsIgnoreCase(lookValue));
break;
case FILENAME_FIELD:
meta.setFileNameField(lookValue);
break;
case EXTENSION:
meta.setExtension(lookValue);
break;
case INC_STEPNR_IN_FILENAME:
meta.setStepNrInFilename("Y".equalsIgnoreCase(lookValue));
break;
case INC_PARTNR_IN_FILENAME:
meta.setPartNrInFilename("Y".equalsIgnoreCase(lookValue));
break;
case INC_DATE_IN_FILENAME:
meta.setDateInFilename("Y".equalsIgnoreCase(lookValue));
break;
case INC_TIME_IN_FILENAME:
meta.setTimeInFilename("Y".equalsIgnoreCase(lookValue));
break;
case SPECIFY_DATE_FORMAT:
meta.setSpecifyingFormat("Y".equalsIgnoreCase(lookValue));
break;
case DATE_FORMAT:
meta.setDateTimeFormat(lookValue);
break;
case ADD_TO_RESULT:
meta.setAddToResultFiles("Y".equalsIgnoreCase(lookValue));
break;
case APPEND:
meta.setFileAppended("Y".equalsIgnoreCase(lookValue));
break;
case SEPARATOR:
meta.setSeparator(lookValue);
break;
case ENCLOSURE:
meta.setEnclosure(lookValue);
break;
case FORCE_ENCLOSURE:
meta.setEnclosureForced("Y".equalsIgnoreCase(lookValue));
break;
case DISABLE_ENCLOSURE_FIX:
meta.setEnclosureFixDisabled("Y".equalsIgnoreCase(lookValue));
break;
case HEADER:
meta.setHeaderEnabled("Y".equalsIgnoreCase(lookValue));
break;
case FOOTER:
meta.setFooterEnabled("Y".equalsIgnoreCase(lookValue));
break;
case FORMAT:
meta.setFileFormat(lookValue);
break;
case COMPRESSION:
meta.setFileCompression(lookValue);
break;
case ENCODING:
meta.setEncoding(lookValue);
break;
case RIGHT_PAD_FIELDS:
meta.setPadded("Y".equalsIgnoreCase(lookValue));
break;
case FAST_DATA_DUMP:
meta.setFastDump("Y".equalsIgnoreCase(lookValue));
break;
case SPLIT_EVERY:
meta.setSplitEvery(Const.toInt(lookValue,0));
break;
case ADD_ENDING_LINE:
meta.setEndedLine(lookValue);
break;
default :
break;
}
}
if (outputFields.size() > 0) {
TextFileField[] tff=new TextFileField[outputFields.size()];
Iterator<String> iOutputFields=outputFields.iterator();
Iterator<String> iOutputTypes=outputTypes.iterator();
Iterator<String> iOutputLengths=outputLengths.iterator();
Iterator<String> iOutputFormats=outputFormats.iterator();
Iterator<String> iOutputPrecisions=outputPrecisions.iterator();
Iterator<String> iOutputCurrencies=outputCurrencies.iterator();
Iterator<String> iOutputDecimals=outputDecimals.iterator();
Iterator<String> iOutputGroups=outputGroups.iterator();
Iterator<String> iOutputTrims=outputTrims.iterator();
Iterator<String> iOutputNulls=outputNulls.iterator();
int i=0;
while (iOutputFields.hasNext()) {
TextFileField field=new TextFileField();
field.setName(iOutputFields.next());
field.setType(ValueMeta.getType(iOutputTypes.next()));
field.setFormat(iOutputFormats.next());
field.setLength(Const.toInt(iOutputLengths.next(),-1));
field.setPrecision(Const.toInt(iOutputPrecisions.next(),-1));
field.setCurrencySymbol(iOutputCurrencies.next());
field.setDecimalSymbol(iOutputDecimals.next());
field.setGroupingSymbol(iOutputGroups.next());
field.setNullString(iOutputNulls.next());
field.setTrimType(ValueMeta.getTrimTypeByDesc(iOutputTrims.next()));
tff[i]=field;
i++;
}
meta.setOutputFields(tff);
}
}
