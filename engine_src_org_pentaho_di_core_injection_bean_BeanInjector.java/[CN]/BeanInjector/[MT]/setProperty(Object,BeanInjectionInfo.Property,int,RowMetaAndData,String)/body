{
  Object obj=root;
  for (int i=1; i < prop.path.size(); i++) {
    BeanLevelInfo s=prop.path.get(i);
    if (i < prop.path.size() - 1) {
      if (s.array) {
        Object existArray=extendArray(s,obj,index + 1);
        Object next=Array.get(existArray,index);
        if (next == null) {
          for (          Constructor<?> c : s.leafClass.getConstructors()) {
            if (c.getParameterTypes().length == 0) {
              next=s.leafClass.newInstance();
              break;
            }
 else             if (c.getParameterTypes().length == 1 && c.getParameterTypes()[0].isAssignableFrom(info.clazz)) {
              next=c.newInstance(root);
              break;
            }
          }
          if (next == null) {
            throw new KettleException("Empty constructor not found for " + s.leafClass);
          }
          Array.set(existArray,index,next);
        }
        obj=next;
      }
 else {
        if (s.field != null) {
          Object next=s.field.get(obj);
          if (next == null) {
            next=s.leafClass.newInstance();
            s.field.set(obj,next);
          }
          obj=next;
        }
 else         if (s.getter != null) {
          Object next=s.getter.invoke(obj);
          if (next == null) {
            if (s.setter == null) {
              throw new KettleException("No setter defined for " + root.getClass());
            }
            next=s.leafClass.newInstance();
            s.setter.invoke(obj,next);
          }
          obj=next;
        }
 else {
          throw new KettleException("No field or getter defined for " + root.getClass());
        }
      }
    }
 else {
      if (s.array) {
        Object existArray=extendArray(s,obj,index + 1);
        Object value=data.getAsJavaType(dataName,s.leafClass);
        if (value != null) {
          Array.set(existArray,index,value);
        }
      }
 else {
        if (s.field != null) {
          Object value=data.getAsJavaType(dataName,s.leafClass);
          if (value != null) {
            s.field.set(obj,value);
          }
        }
 else         if (s.setter != null) {
          Object value=data.getAsJavaType(dataName,s.leafClass);
          if (value != null) {
            if (s.setter.getParameterTypes().length == 2) {
              s.setter.invoke(obj,index,value);
            }
 else {
              s.setter.invoke(obj,value);
            }
          }
        }
 else {
          throw new KettleException("No field or setter defined for " + root.getClass());
        }
      }
    }
  }
}
