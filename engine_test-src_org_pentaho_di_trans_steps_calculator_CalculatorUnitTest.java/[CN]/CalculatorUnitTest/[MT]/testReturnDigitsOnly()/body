{
  RowMeta inputRowMeta=new RowMeta();
  ValueMetaString nameMeta=new ValueMetaString("Name");
  inputRowMeta.addValueMeta(nameMeta);
  ValueMetaString valueMeta=new ValueMetaString("Value");
  inputRowMeta.addValueMeta(valueMeta);
  RowSet inputRowSet=smh.getMockInputRowSet(new Object[][]{{"name1","qwe123asd456zxc"},{"name2",null}});
  inputRowSet.setRowMeta(inputRowMeta);
  Calculator calculator=new Calculator(smh.stepMeta,smh.stepDataInterface,0,smh.transMeta,smh.trans);
  calculator.getInputRowSets().add(inputRowSet);
  calculator.setInputRowMeta(inputRowMeta);
  calculator.init(smh.initStepMetaInterface,smh.initStepDataInterface);
  CalculatorMeta meta=new CalculatorMeta();
  meta.setCalculation(new CalculatorMetaFunction[]{new CalculatorMetaFunction("digits",CalculatorMetaFunction.CALC_GET_ONLY_DIGITS,"Value",null,null,ValueMetaInterface.TYPE_STRING,0,0,false,"","","","")});
  try {
    calculator.addRowListener(new RowAdapter(){
      @Override public void rowWrittenEvent(      RowMetaInterface rowMeta,      Object[] row) throws KettleStepException {
        assertEquals("123456",row[2]);
      }
    }
);
    calculator.processRow(meta,new CalculatorData());
  }
 catch (  KettleException ke) {
    ke.printStackTrace();
    fail();
  }
}
