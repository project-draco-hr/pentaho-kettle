{
{
    final double resultValue=expectedResult.doubleValue();
    assertRoundGeneral(resultValue,calcFunction,value.doubleValue(),precision,roundingMode,ValueMetaInterface.TYPE_NUMBER,ValueMetaInterface.TYPE_NUMBER);
    assertRoundGeneral(resultValue,calcFunction,new BigDecimal(String.valueOf(value.doubleValue())),precision,roundingMode,ValueMetaInterface.TYPE_BIGNUMBER,ValueMetaInterface.TYPE_NUMBER);
    if (isInt(value)) {
      assertRoundGeneral(resultValue,calcFunction,value.longValue(),precision,roundingMode,ValueMetaInterface.TYPE_INTEGER,ValueMetaInterface.TYPE_NUMBER);
    }
  }
{
    final BigDecimal resultValue=BigDecimal.valueOf(expectedResult.doubleValue());
    assertRoundGeneral(resultValue,calcFunction,value.doubleValue(),precision,roundingMode,ValueMetaInterface.TYPE_NUMBER,ValueMetaInterface.TYPE_BIGNUMBER);
    assertRoundGeneral(resultValue,calcFunction,new BigDecimal(String.valueOf(value.doubleValue())),precision,roundingMode,ValueMetaInterface.TYPE_BIGNUMBER,ValueMetaInterface.TYPE_BIGNUMBER);
    if (isInt(value)) {
      assertRoundGeneral(resultValue,calcFunction,value.longValue(),precision,roundingMode,ValueMetaInterface.TYPE_INTEGER,ValueMetaInterface.TYPE_BIGNUMBER);
    }
  }
  if (isInt(expectedResult)) {
    final Long resultValue=expectedResult.longValue();
    assertRoundGeneral(resultValue,calcFunction,value.doubleValue(),precision,roundingMode,ValueMetaInterface.TYPE_NUMBER,ValueMetaInterface.TYPE_INTEGER);
    assertRoundGeneral(resultValue,calcFunction,new BigDecimal(String.valueOf(value.doubleValue())),precision,roundingMode,ValueMetaInterface.TYPE_BIGNUMBER,ValueMetaInterface.TYPE_INTEGER);
    if (isInt(value)) {
      assertRoundGeneral(resultValue,calcFunction,value.longValue(),precision,roundingMode,ValueMetaInterface.TYPE_INTEGER,ValueMetaInterface.TYPE_INTEGER);
    }
  }
}
