{
  ZipOutputStream out=null;
  try {
    Map<String,ResourceDefinition> definitions=new HashMap<String,ResourceDefinition>();
    ResourceNamingInterface namingInterface=new SequenceResourceNaming();
    String topLevelResource=resourceExportInterface.exportResources(space,definitions,namingInterface,repository);
    if (topLevelResource != null && !definitions.isEmpty()) {
      FileObject fileObject=KettleVFS.getFileObject(zipFilename);
      out=new ZipOutputStream(KettleVFS.getOutputStream(fileObject,false));
      for (      String filename : definitions.keySet()) {
        ResourceDefinition resourceDefinition=definitions.get(filename);
        ZipEntry zipEntry=new ZipEntry(resourceDefinition.getFilename());
        String comment=Messages.getString("ResourceUtil.SerializeResourceExportInterface.ZipEntryComment.OriginatingFile",filename,Const.NVL(resourceDefinition.getOrigin(),"-"));
        zipEntry.setComment(comment);
        out.putNextEntry(zipEntry);
        out.write(resourceDefinition.getContent().getBytes());
        out.closeEntry();
      }
      return "zip:" + fileObject.getName().toString() + "!"+ topLevelResource;
    }
 else {
      throw new KettleException(Messages.getString("ResourceUtil.Exception.NoResourcesFoundToExport"));
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("ResourceUtil.Exception.ErrorSerializingExportInterface",resourceExportInterface.toString()),e);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e) {
        throw new KettleException(Messages.getString("ResourceUtil.Exception.ErrorClosingZipStream",zipFilename));
      }
    }
  }
}
