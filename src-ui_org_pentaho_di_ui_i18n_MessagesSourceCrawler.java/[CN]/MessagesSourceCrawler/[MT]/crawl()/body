{
  String[] dirs=new String[sourceDirectories.size()];
  String[] masks=new String[sourceDirectories.size()];
  String[] req=new String[sourceDirectories.size()];
  boolean[] subdirs=new boolean[sourceDirectories.size()];
  for (int i=0; i < masks.length; i++) {
    dirs[i]=sourceDirectories.get(i);
    masks[i]=".*\\.java$";
    req[i]="N";
    subdirs[i]=true;
  }
  FileInputList fileInputList=FileInputList.createFileList(new Variables(),dirs,masks,req,subdirs);
  for (  FileObject fileObject : new ArrayList<FileObject>(fileInputList.getFiles())) {
    for (    String filename : filesToAvoid) {
      if (fileObject.getName().getBaseName().equals(filename)) {
        fileInputList.getFiles().remove(fileObject);
      }
    }
  }
  for (  FileObject fileObject : fileInputList.getFiles()) {
    lookForOccurrencesInFile(fileObject);
  }
  for (  SourceCrawlerXMLFolder xmlFolder : xmlFolders) {
    String[] xmlDirs={xmlFolder.getFolder()};
    String[] xmlMasks={xmlFolder.getWildcard()};
    String[] xmlReq={"N"};
    boolean[] xmlSubdirs={true};
    FileInputList xulFileInputList=FileInputList.createFileList(new Variables(),xmlDirs,xmlMasks,xmlReq,xmlSubdirs);
    for (    FileObject fileObject : xulFileInputList.getFiles()) {
      try {
        Document doc=XMLHandler.loadXMLFile(fileObject);
        for (        SourceCrawlerXMLElement xmlElement : xmlFolder.getElements()) {
          addLabelOccurrences(fileObject,doc.getElementsByTagName(xmlElement.getElement()),xmlElement.getLabel(),xmlFolder.getDefaultPackage(),xmlFolder.getPackageExceptions());
        }
      }
 catch (      KettleXMLException e) {
        LogWriter.getInstance().logError(toString(),"Unable to open XUL / XML document: " + fileObject);
      }
    }
  }
}
