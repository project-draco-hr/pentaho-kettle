{
  try {
    Object rowobj[]=reader.nextRecord();
    if (rowobj == null)     return null;
    for (int i=0; i < reader.getFieldCount(); i++) {
switch (datatype[i]) {
case DBFField.FIELD_TYPE_M:
        if (rowobj[i] != null) {
          r[i]=(String)rowobj[i];
        }
      break;
case DBFField.FIELD_TYPE_C:
    r[i]=Const.rtrim((String)rowobj[i]);
  break;
case DBFField.FIELD_TYPE_N:
try {
  if (rowobj[i] != null) {
    r[i]=(Double)rowobj[i];
  }
}
 catch (NumberFormatException e) {
  throw new KettleException("Error parsing field #" + (i + 1) + " : "+ reader.getField(i).getName(),e);
}
break;
case DBFField.FIELD_TYPE_F:
try {
if (rowobj[i] != null) {
r[i]=new Double((Float)rowobj[i]);
}
}
 catch (NumberFormatException e) {
throw new KettleException("Error parsing field #" + (i + 1) + " : "+ reader.getField(i).getName(),e);
}
break;
case DBFField.FIELD_TYPE_L:
r[i]=(Boolean)rowobj[i];
break;
case DBFField.FIELD_TYPE_D:
r[i]=(Date)rowobj[i];
break;
default :
break;
}
}
}
 catch (DBFException e) {
log.logError("Unable to read row : " + e.toString());
error=true;
throw new KettleException("Unable to read row from XBase file",e);
}
catch (Exception e) {
log.logError("Unexpected error while reading row: " + e.toString());
error=true;
throw new KettleException("Unable to read row from XBase file",e);
}
return r;
}
