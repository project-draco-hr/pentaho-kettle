{
  boolean retval=false;
  data.writer=null;
  try {
    if (meta.isServletOutput()) {
      data.writer=XML_OUT_FACTORY.createXMLStreamWriter(getTrans().getServletPrintWriter());
      if (meta.getEncoding() != null && meta.getEncoding().length() > 0) {
        data.writer.writeStartDocument(meta.getEncoding(),"1.0");
      }
 else {
        data.writer.writeStartDocument(Const.XML_ENCODING,"1.0");
      }
      data.writer.writeCharacters(Const.CR);
    }
 else {
      FileObject file=KettleVFS.getFileObject(buildFilename(true),getTransMeta());
      if (meta.isAddToResultFiles()) {
        ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,file,getTransMeta().getName(),getStepname());
        resultFile.setComment("This file was created with a xml output step");
        addResultFile(resultFile);
      }
      OutputStream outputStream;
      if (meta.isZipped()) {
        OutputStream fos=KettleVFS.getOutputStream(file,false);
        data.zip=new ZipOutputStream(fos);
        File entry=new File(buildFilename(false));
        ZipEntry zipentry=new ZipEntry(entry.getName());
        zipentry.setComment("Compressed by Kettle");
        data.zip.putNextEntry(zipentry);
        outputStream=data.zip;
      }
 else {
        OutputStream fos=KettleVFS.getOutputStream(file,false);
        outputStream=fos;
      }
      if (meta.getEncoding() != null && meta.getEncoding().length() > 0) {
        logBasic("Opening output stream in encoding: " + meta.getEncoding());
        data.writer=XML_OUT_FACTORY.createXMLStreamWriter(outputStream,meta.getEncoding());
        data.writer.writeStartDocument(meta.getEncoding(),"1.0");
      }
 else {
        logBasic("Opening output stream in default encoding : " + Const.XML_ENCODING);
        data.writer=XML_OUT_FACTORY.createXMLStreamWriter(outputStream);
        data.writer.writeStartDocument(Const.XML_ENCODING,"1.0");
      }
      data.writer.writeCharacters(Const.CR);
    }
    data.writer.writeStartElement(meta.getMainElement());
    if ((meta.getNameSpace() != null) && (!"".equals(meta.getNameSpace()))) {
      data.writer.writeDefaultNamespace(meta.getNameSpace());
    }
    data.writer.writeCharacters(Const.CR);
    retval=true;
  }
 catch (  Exception e) {
    logError("Error opening new file : " + e.toString());
  }
  data.splitnr++;
  return retval;
}
