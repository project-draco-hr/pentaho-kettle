{
  if (plugin.getIds()[0] == null) {
    throw new KettlePluginException("Not a valid id specified in plugin :" + plugin);
  }
  if (plugin.getName().startsWith("i18n:")) {
    System.out.println("i18n untranslated key detected: " + plugin.getName());
  }
  if (plugin.getName().startsWith("!") && plugin.getName().endsWith("!")) {
    System.out.println("i18n untranslated key detected: " + plugin.getName());
  }
  List<PluginInterface> list=pluginMap.get(pluginType);
  if (list == null) {
    list=new ArrayList<PluginInterface>();
    pluginMap.put(pluginType,list);
    classLoaderMap.put(pluginType,new HashMap<PluginInterface,URLClassLoader>());
  }
  int index=list.indexOf(plugin);
  if (index < 0) {
    list.add(plugin);
  }
 else {
    list.set(index,plugin);
  }
  Collections.sort(list,new Comparator<PluginInterface>(){
    public int compare(    PluginInterface p1,    PluginInterface p2){
      return p1.getName().compareToIgnoreCase(p2.getName());
    }
  }
);
  if (!Const.isEmpty(plugin.getCategory())) {
    List<String> categories=categoryMap.get(pluginType);
    if (!categories.contains(plugin.getCategory())) {
      categories.add(plugin.getCategory());
      final String[] naturalOrder=pluginType.getNaturalCategoriesOrder();
      if (naturalOrder != null) {
        Collections.sort(categories,new Comparator<String>(){
          public int compare(          String one,          String two){
            int idx1=Const.indexOfString(one,naturalOrder);
            int idx2=Const.indexOfString(two,naturalOrder);
            return idx1 - idx2;
          }
        }
);
      }
    }
  }
}
