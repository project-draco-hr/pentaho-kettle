{
  try {
    usePaging="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"usepaging"));
    pagesize=XMLHandler.getTagValue(stepnode,"pagesize");
    useAuthentication="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"useauthentication"));
    includeRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    Host=XMLHandler.getTagValue(stepnode,"host");
    userName=XMLHandler.getTagValue(stepnode,"username");
    setPassword(Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(stepnode,"password")));
    port=XMLHandler.getTagValue(stepnode,"port");
    filterString=XMLHandler.getTagValue(stepnode,"filterstring");
    searchBase=XMLHandler.getTagValue(stepnode,"searchbase");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrFields=XMLHandler.countNodes(fields,"field");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      inputFields[i]=new LDAPInputField();
      inputFields[i].setName(XMLHandler.getTagValue(fnode,"name"));
      inputFields[i].setAttribute(XMLHandler.getTagValue(fnode,"attribute"));
      inputFields[i].setType(ValueMeta.getType(XMLHandler.getTagValue(fnode,"type")));
      inputFields[i].setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      inputFields[i].setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      String srepeat=XMLHandler.getTagValue(fnode,"repeat");
      inputFields[i].setTrimType(getTrimTypeByCode(XMLHandler.getTagValue(fnode,"trim_type")));
      if (srepeat != null)       inputFields[i].setRepeated(YES.equalsIgnoreCase(srepeat));
 else       inputFields[i].setRepeated(false);
      inputFields[i].setFormat(XMLHandler.getTagValue(fnode,"format"));
      inputFields[i].setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      inputFields[i].setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      inputFields[i].setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
    }
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0L);
    timeLimit=Const.toInt(XMLHandler.getTagValue(stepnode,"timelimit"),0);
    multiValuedSeparator=XMLHandler.getTagValue(stepnode,"multivaluedseparator");
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"LDAPInputMeta.UnableToLoadFromXML"),e);
  }
}
