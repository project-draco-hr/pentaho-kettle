{
  GetterSetterTester<UnivariateStatsMetaFunction> getterSetterTest=new GetterSetterTester<UnivariateStatsMetaFunction>(UnivariateStatsMetaFunction.class);
  ObjectTester<Boolean> primitiveBooleanTester=new ObjectTesterBuilder<Boolean>().addObject(true).addObject(false).build();
  getterSetterTest.addObjectTester("sourceFieldName",new ObjectTesterBuilder<String>().addObject(null).addObject(UUID.randomUUID().toString()).build());
  getterSetterTest.addObjectTester("calcN",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcMean",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcStdDev",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcMin",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcMax",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcMedian",primitiveBooleanTester);
  getterSetterTest.addObjectTester("interpolatePercentile",primitiveBooleanTester);
  getterSetterTest.addObjectTester("calcPercentile",new ObjectTesterBuilder<Double>().addObject(-100.0).addObject(0.0).addObject(55.5).addObject(100.0).setValidator(new ObjectValidator<Double>(){
    @Override public void validate(    Double expected,    Object actual){
      assertEquals(Double.class,actual.getClass());
      double actualValue=((Double)actual).doubleValue();
      if (0 <= expected && expected <= 100) {
        assertEquals(expected / 100.0,actualValue,0);
      }
 else {
        assertEquals(-1.0,actualValue,0);
      }
    }
  }
).build());
  getterSetterTest.test(new UnivariateStatsMetaFunction(null,false,false,false,false,false,false,0,false));
}
