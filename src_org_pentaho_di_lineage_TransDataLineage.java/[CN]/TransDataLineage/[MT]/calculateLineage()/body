{
  final Map<StepMeta,Map<StepMeta,Boolean>> stepMap=transMeta.sortStepsNatural();
  Map<StepMeta,List<StepMeta>> previousStepListMap=new HashMap<StepMeta,List<StepMeta>>();
  for (  StepMeta stepMeta : stepMap.keySet()) {
    List<StepMeta> previousSteps=new ArrayList<StepMeta>();
    previousStepListMap.put(stepMeta,previousSteps);
    previousSteps.addAll(stepMap.get(stepMeta).keySet());
    Collections.sort(previousSteps,new Comparator<StepMeta>(){
      public int compare(      StepMeta o1,      StepMeta o2){
        Map<StepMeta,Boolean> beforeMap=stepMap.get(o1);
        if (beforeMap != null) {
          if (beforeMap.get(o2) == null) {
            return -1;
          }
 else {
            return 1;
          }
        }
 else {
          return o1.getName().compareToIgnoreCase(o2.getName());
        }
      }
    }
);
    System.out.println("Step considered: " + stepMeta.getName());
    for (    StepMeta prev : previousSteps) {
      System.out.println("      --> previous step: " + prev.getName());
    }
  }
  fieldStepsMap=new HashMap<ValueMetaInterface,List<StepMeta>>();
  List<StepMeta> usedSteps=transMeta.getUsedSteps();
  for (  StepMeta stepMeta : usedSteps) {
    calculateLineage(stepMeta);
  }
}
