{
  if ((folderType != JobEntryGetPOP.FOLDER_OUTPUT) && (folderType != JobEntryGetPOP.FOLDER_ATTACHMENTS)) {
    throw new IllegalArgumentException("Invalid folderType argument");
  }
  String folderName="";
switch (folderType) {
case JobEntryGetPOP.FOLDER_OUTPUT:
    folderName=getRealOutputDirectory();
  break;
case JobEntryGetPOP.FOLDER_ATTACHMENTS:
if (isSaveAttachment() && isDifferentFolderForAttachment()) {
  folderName=getRealAttachmentFolder();
}
 else {
  folderName=getRealOutputDirectory();
}
break;
}
if (Utils.isEmpty(folderName)) {
switch (folderType) {
case JobEntryGetPOP.FOLDER_OUTPUT:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.OutputFolderEmpty"));
case JobEntryGetPOP.FOLDER_ATTACHMENTS:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderEmpty"));
}
}
FileObject folder=KettleVFS.getFileObject(folderName,this);
if (folder.exists()) {
if (folder.getType() != FileType.FOLDER) {
switch (folderType) {
case JobEntryGetPOP.FOLDER_OUTPUT:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.NotAFolderNot",folderName));
case JobEntryGetPOP.FOLDER_ATTACHMENTS:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderNotAFolder",folderName));
}
}
if (isDebug()) {
switch (folderType) {
case JobEntryGetPOP.FOLDER_OUTPUT:
logDebug(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Log.OutputFolderExists",folderName));
break;
case JobEntryGetPOP.FOLDER_ATTACHMENTS:
logDebug(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Log.AttachmentFolderExists",folderName));
break;
}
}
}
 else {
if (isCreateLocalFolder()) {
folder.createFolder();
}
 else {
switch (folderType) {
case JobEntryGetPOP.FOLDER_OUTPUT:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.OutputFolderNotExist",folderName));
case JobEntryGetPOP.FOLDER_ATTACHMENTS:
throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderNotExist",folderName));
}
}
}
String returnValue=KettleVFS.getFilename(folder);
try {
folder.close();
}
 catch (IOException ignore) {
}
return returnValue;
}
