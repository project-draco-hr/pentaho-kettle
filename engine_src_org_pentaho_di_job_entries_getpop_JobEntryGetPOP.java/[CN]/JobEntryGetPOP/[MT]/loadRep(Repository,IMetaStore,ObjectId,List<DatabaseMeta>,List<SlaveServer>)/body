{
  try {
    servername=rep.getJobEntryAttributeString(id_jobentry,"servername");
    username=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    usessl=rep.getJobEntryAttributeBoolean(id_jobentry,"usessl");
    sslport=rep.getJobEntryAttributeString(id_jobentry,"sslport");
    outputdirectory=rep.getJobEntryAttributeString(id_jobentry,"outputdirectory");
    filenamepattern=rep.getJobEntryAttributeString(id_jobentry,"filenamepattern");
    if (Utils.isEmpty(filenamepattern)) {
      filenamepattern=DEFAULT_FILE_NAME_PATTERN;
    }
    retrievemails=(int)rep.getJobEntryAttributeInteger(id_jobentry,"retrievemails");
    firstmails=rep.getJobEntryAttributeString(id_jobentry,"firstmails");
    delete=rep.getJobEntryAttributeBoolean(id_jobentry,"delete");
    protocol=Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"protocol"),MailConnectionMeta.PROTOCOL_STRING_POP3);
    String sv=rep.getJobEntryAttributeString(id_jobentry,"savemessage");
    if (Utils.isEmpty(sv)) {
      savemessage=true;
    }
 else {
      savemessage=rep.getJobEntryAttributeBoolean(id_jobentry,"savemessage");
    }
    String sa=rep.getJobEntryAttributeString(id_jobentry,"saveattachment");
    if (Utils.isEmpty(sa)) {
      saveattachment=true;
    }
 else {
      saveattachment=rep.getJobEntryAttributeBoolean(id_jobentry,"saveattachment");
    }
    usedifferentfolderforattachment=rep.getJobEntryAttributeBoolean(id_jobentry,"usedifferentfolderforattachment");
    attachmentfolder=rep.getJobEntryAttributeString(id_jobentry,"attachmentfolder");
    attachmentwildcard=rep.getJobEntryAttributeString(id_jobentry,"attachmentwildcard");
    valueimaplist=MailConnectionMeta.getValueListImapListByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"valueimaplist"),""));
    imapfirstmails=rep.getJobEntryAttributeString(id_jobentry,"imapfirstmails");
    imapfolder=rep.getJobEntryAttributeString(id_jobentry,"imapfolder");
    senderSearch=rep.getJobEntryAttributeString(id_jobentry,"sendersearch");
    notTermSenderSearch=rep.getJobEntryAttributeBoolean(id_jobentry,"nottermsendersearch");
    receipientSearch=rep.getJobEntryAttributeString(id_jobentry,"receipientsearch");
    notTermReceipientSearch=rep.getJobEntryAttributeBoolean(id_jobentry,"nottermreceipientsearch");
    subjectSearch=rep.getJobEntryAttributeString(id_jobentry,"subjectsearch");
    notTermSubjectSearch=rep.getJobEntryAttributeBoolean(id_jobentry,"nottermsubjectsearch");
    bodySearch=rep.getJobEntryAttributeString(id_jobentry,"bodysearch");
    notTermBodySearch=rep.getJobEntryAttributeBoolean(id_jobentry,"nottermbodysearch");
    conditionReceivedDate=MailConnectionMeta.getConditionByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"conditionreceiveddate"),""));
    notTermReceivedDateSearch=rep.getJobEntryAttributeBoolean(id_jobentry,"nottermreceiveddatesearch");
    receivedDate1=rep.getJobEntryAttributeString(id_jobentry,"receiveddate1");
    receivedDate2=rep.getJobEntryAttributeString(id_jobentry,"receiveddate2");
    actiontype=MailConnectionMeta.getActionTypeByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"actiontype"),""));
    moveToIMAPFolder=rep.getJobEntryAttributeString(id_jobentry,"movetoimapfolder");
    createmovetofolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createmovetofolder");
    createlocalfolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createlocalfolder");
    aftergetimap=MailConnectionMeta.getAfterGetIMAPByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"aftergetimap"),""));
    includesubfolders=rep.getJobEntryAttributeBoolean(id_jobentry,"includesubfolders");
    useproxy=rep.getJobEntryAttributeBoolean(id_jobentry,"useproxy");
    proxyusername=rep.getJobEntryAttributeString(id_jobentry,"proxyusername");
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'get pop' exists from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
