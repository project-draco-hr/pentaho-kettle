{
  Result result=previousResult;
  int NrErrors=0;
  int NrSuccess=0;
  int nrOutputProps=getOutputPropertyName() == null ? 0 : getOutputPropertyName().length;
  if (nrOutputProps > 0) {
    outputProperties=new Properties();
    for (int i=0; i < nrOutputProps; i++) {
      outputProperties.put(getOutputPropertyName()[i],environmentSubstitute(getOutputPropertyValue()[i]));
    }
    setOutputProperties=true;
  }
  nrParams=getParameterField() == null ? 0 : getParameterField().length;
  if (nrParams > 0) {
    nameOfParams=new String[nrParams];
    valueOfParams=new String[nrParams];
    for (int i=0; i < nrParams; i++) {
      String name=environmentSubstitute(getParameterName()[i]);
      String value=environmentSubstitute(getParameterField()[i]);
      if (Utils.isEmpty(value)) {
        throw new KettleStepException(BaseMessages.getString(PKG,"Xslt.Exception.ParameterFieldMissing",name,i));
      }
      nameOfParams[i]=name;
      valueOfParams[i]=value;
    }
    useParameters=true;
  }
  List<RowMetaAndData> rows=result.getRows();
  if (isFilenamesFromPrevious()) {
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobEntryXSLT.Log.ArgFromPrevious.Found",(rows != null ? rows.size() : 0) + ""));
    }
  }
  if (isFilenamesFromPrevious() && rows != null) {
    RowMetaAndData resultRow=null;
    for (int iteration=0; iteration < rows.size() && !parentJob.isStopped(); iteration++) {
      resultRow=rows.get(iteration);
      String xmlfilename_previous=resultRow.getString(0,null);
      String xslfilename_previous=resultRow.getString(1,null);
      String ouputfilename_previous=resultRow.getString(2,null);
      if (!Utils.isEmpty(xmlfilename_previous) && !Utils.isEmpty(xslfilename_previous) && !Utils.isEmpty(ouputfilename_previous)) {
        if (processOneXMLFile(xmlfilename_previous,xslfilename_previous,ouputfilename_previous,result,parentJob)) {
          NrSuccess++;
        }
 else {
          NrErrors++;
        }
      }
 else {
        logError(BaseMessages.getString(PKG,"JobEntryXSLT.AllFilesNotNull.Label"));
        NrErrors++;
      }
    }
  }
 else {
    String realxmlfilename=getRealxmlfilename();
    String realxslfilename=getRealxslfilename();
    String realoutputfilename=getoutputfilename();
    if (!Utils.isEmpty(realxmlfilename) && !Utils.isEmpty(realxslfilename) && !Utils.isEmpty(realoutputfilename)) {
      if (processOneXMLFile(realxmlfilename,realxslfilename,realoutputfilename,result,parentJob)) {
        NrSuccess++;
      }
 else {
        NrErrors++;
      }
    }
 else {
      logError(BaseMessages.getString(PKG,"JobEntryXSLT.AllFilesNotNull.Label"));
      NrErrors++;
    }
  }
  result.setResult(NrErrors == 0);
  result.setNrErrors(NrErrors);
  result.setNrLinesWritten(NrSuccess);
  return result;
}
