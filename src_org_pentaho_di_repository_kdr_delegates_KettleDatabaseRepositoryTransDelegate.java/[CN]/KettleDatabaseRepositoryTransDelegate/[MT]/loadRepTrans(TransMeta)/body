{
  try {
    RowMetaAndData r=getTransformation(transMeta.getObjectId());
    if (r != null) {
      transMeta.setName(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_NAME,null));
      transMeta.setDescription(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_DESCRIPTION,null));
      transMeta.setExtendedDescription(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_EXTENDED_DESCRIPTION,null));
      transMeta.setTransversion(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_TRANS_VERSION,null));
      transMeta.setTransstatus((int)r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_TRANS_STATUS,-1L));
      TransLogTable logTable=transMeta.getTransLogTable();
      logTable.findField(TransLogTable.ID.LINES_READ).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_READ,-1L))));
      logTable.findField(TransLogTable.ID.LINES_READ).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_WRITE,-1L))));
      logTable.findField(TransLogTable.ID.LINES_READ).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_INPUT,-1L))));
      logTable.findField(TransLogTable.ID.LINES_READ).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_OUTPUT,-1L))));
      logTable.findField(TransLogTable.ID.LINES_READ).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_UPDATE,-1L))));
      long id_rejected=getTransAttributeInteger(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_ID_STEP_REJECTED);
      if (id_rejected > 0) {
        logTable.findField(TransLogTable.ID.LINES_REJECTED).setSubject(StepMeta.findStep(transMeta.getSteps(),new LongObjectId(id_rejected)));
      }
      DatabaseMeta logDb=DatabaseMeta.findDatabase(transMeta.getDatabases(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DATABASE_LOG,-1L)));
      logTable.setConnectionName(logDb.getName());
      logTable.setTableName(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_TABLE_NAME_LOG,null));
      logTable.setBatchIdUsed(r.getBoolean(KettleDatabaseRepository.FIELD_TRANSFORMATION_USE_BATCHID,false));
      logTable.setLogFieldUsed(r.getBoolean(KettleDatabaseRepository.FIELD_TRANSFORMATION_USE_LOGFIELD,false));
      transMeta.setMaxDateConnection(DatabaseMeta.findDatabase(transMeta.getDatabases(),new LongObjectId(r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DATABASE_MAXDATE,-1L))));
      transMeta.setMaxDateTable(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_TABLE_NAME_MAXDATE,null));
      transMeta.setMaxDateField(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_FIELD_NAME_MAXDATE,null));
      transMeta.setMaxDateOffset(r.getNumber(KettleDatabaseRepository.FIELD_TRANSFORMATION_OFFSET_MAXDATE,0.0));
      transMeta.setMaxDateDifference(r.getNumber(KettleDatabaseRepository.FIELD_TRANSFORMATION_DIFF_MAXDATE,0.0));
      transMeta.setCreatedUser(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_CREATED_USER,null));
      transMeta.setCreatedDate(r.getDate(KettleDatabaseRepository.FIELD_TRANSFORMATION_CREATED_DATE,null));
      transMeta.setModifiedUser(r.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_USER,null));
      transMeta.setModifiedDate(r.getDate(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_DATE,null));
      transMeta.setSizeRowset(Const.ROWS_IN_ROWSET);
      Long val_size_rowset=r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_SIZE_ROWSET);
      if (val_size_rowset != null) {
        transMeta.setSizeRowset(val_size_rowset.intValue());
      }
      long id_directory=r.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DIRECTORY,-1L);
      if (id_directory >= 0) {
        if (log.isDetailed())         log.logDetailed("ID_DIRECTORY=" + id_directory);
        transMeta.setRepositoryDirectory(repository.loadRepositoryDirectoryTree().findDirectory(new LongObjectId(id_directory)));
      }
      transMeta.setUsingUniqueConnections(getTransAttributeBoolean(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_UNIQUE_CONNECTIONS));
      transMeta.setFeedbackShown(!"N".equalsIgnoreCase(getTransAttributeString(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_FEEDBACK_SHOWN)));
      transMeta.setFeedbackSize((int)getTransAttributeInteger(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_FEEDBACK_SIZE));
      transMeta.setUsingThreadPriorityManagment(!"N".equalsIgnoreCase(getTransAttributeString(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_USING_THREAD_PRIORITIES)));
      transMeta.setCapturingStepPerformanceSnapShots(getTransAttributeBoolean(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_CAPTURE_STEP_PERFORMANCE));
      transMeta.setStepPerformanceCapturingDelay(getTransAttributeInteger(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_CAPTURING_DELAY));
      transMeta.getPerformanceLogTable().setTableName(getTransAttributeString(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_LOG_TABLE));
      transMeta.getTransLogTable().setLogSizeLimit(getTransAttributeString(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_LOG_SIZE_LIMIT));
      transMeta.getTransLogTable().setLogInterval(getTransAttributeString(transMeta.getObjectId(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_LOG_INTERVAL));
      loadRepParameters(transMeta);
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"TransMeta.Exception.UnableToLoadTransformationInfoFromRepository"),dbe);
  }
 finally {
    transMeta.initializeVariablesFrom(null);
    transMeta.setInternalKettleVariables();
  }
}
