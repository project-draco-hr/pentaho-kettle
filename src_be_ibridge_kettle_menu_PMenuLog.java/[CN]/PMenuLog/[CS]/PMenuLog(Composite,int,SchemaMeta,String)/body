{
  super(parent,style);
  shell=parent.getShell();
  schema=sch;
  log=LogWriter.getInstance();
  display=shell.getDisplay();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  setLayout(formLayout);
  setVisible(true);
  white=Display.getCurrent().getSystemColor(SWT.COLOR_WHITE);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      white.dispose();
    }
  }
);
  wText=new Text(this,SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL| SWT.READ_ONLY);
  wText.setBackground(white);
  wText.setVisible(true);
  fdText=new FormData();
  fdText.left=new FormAttachment(0,0);
  fdText.top=new FormAttachment(0,0);
  fdText.right=new FormAttachment(100,0);
  fdText.bottom=new FormAttachment(100,-40);
  wText.setLayoutData(fdText);
  wRefresh=new Button(this,SWT.PUSH);
  wRefresh.setText("&Refresh log");
  wClear=new Button(this,SWT.PUSH);
  wClear.setText("&Clear log");
  wLog=new Button(this,SWT.PUSH);
  wLog.setText("&Log settings");
  fdRefresh=new FormData();
  fdClear=new FormData();
  fdLog=new FormData();
  fdRefresh.left=new FormAttachment(25,10);
  fdRefresh.bottom=new FormAttachment(100,0);
  wRefresh.setLayoutData(fdRefresh);
  fdClear.left=new FormAttachment(wRefresh,10);
  fdClear.bottom=new FormAttachment(100,0);
  wClear.setLayoutData(fdClear);
  fdLog.left=new FormAttachment(wClear,10);
  fdLog.bottom=new FormAttachment(100,0);
  wLog.setLayoutData(fdLog);
  pack();
  try {
    in=log.getFileInputStream();
  }
 catch (  Exception e) {
    System.out.println("Couldn't create input-pipe connection to output-pipe!");
  }
  lsRefresh=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      readLog();
    }
  }
;
  final Timer tim=new Timer();
  TimerTask timtask=new TimerTask(){
    public void run(){
      if (display != null && !display.isDisposed())       display.asyncExec(new Runnable(){
        public void run(){
          readLog();
        }
      }
);
    }
  }
;
  tim.schedule(timtask,2000L,2000L);
  lsClear=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clearLog();
    }
  }
;
  lsLog=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setLog();
    }
  }
;
  wRefresh.addSelectionListener(lsRefresh);
  wClear.addSelectionListener(lsClear);
  wLog.addSelectionListener(lsLog);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      tim.cancel();
    }
  }
);
}
