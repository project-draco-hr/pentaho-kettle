{
  meta=(SetValueConstantMeta)smi;
  data=(SetValueConstantData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.convertRowMeta=data.outputRowMeta.clone();
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++) {
      data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    }
    if (meta.getFieldName() != null && meta.getFieldName().length > 0) {
      data.fieldnrs=new int[meta.getFieldName().length];
      data.realReplaceByvalues=new String[meta.getReplaceValue().length];
      for (int i=0; i < meta.getFieldName().length; i++) {
        for (int j=0; j < meta.getFieldName().length; j++) {
          if (meta.getFieldName()[j].equals(meta.getFieldName()[i])) {
            if (j != i)             throw new KettleException(BaseMessages.getString(PKG,"SetValueConstant.Log.FieldSpecifiedMoreThatOne",meta.getFieldName()[i],"" + i,"" + j));
          }
        }
        data.fieldnrs[i]=data.outputRowMeta.indexOfValue(meta.getFieldName()[i]);
        if (data.fieldnrs[i] < 0) {
          logError(BaseMessages.getString(PKG,"SetValueConstant.Log.CanNotFindField",meta.getFieldName()[i]));
          throw new KettleException(BaseMessages.getString(PKG,"SetValueConstant.Log.CanNotFindField",meta.getFieldName()[i]));
        }
        if (meta.isUseVars())         data.realReplaceByvalues[i]=environmentSubstitute(meta.getReplaceValue()[i]);
 else         data.realReplaceByvalues[i]=meta.getReplaceValue()[i];
      }
    }
 else     throw new KettleException(BaseMessages.getString(PKG,"SetValueConstant.Log.SelectFieldsEmpty"));
    data.fieldnr=data.fieldnrs.length;
  }
  try {
    updateField(r);
    putRow(data.outputRowMeta,r);
  }
 catch (  Exception e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"SetValueConstant.Log.ErrorInStep",e.getMessage()));
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(data.outputRowMeta,r,1,errorMessage,null,"SVC001");
    }
  }
  return true;
}
