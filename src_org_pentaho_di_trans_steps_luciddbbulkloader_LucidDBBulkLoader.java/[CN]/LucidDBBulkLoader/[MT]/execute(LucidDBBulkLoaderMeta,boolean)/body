{
  Runtime rt=Runtime.getRuntime();
  try {
    String tableName=environmentSubstitute(meta.getTableName());
    String fifoVfsDirectory=environmentSubstitute(meta.getFifoDirectory());
    FileObject directory=KettleVFS.getFileObject(fifoVfsDirectory);
    directory.createFolder();
    String fifoDirectory=KettleVFS.getFilename(directory);
    data.fifoFilename=KettleVFS.getFilename(directory) + Const.FILE_SEPARATOR + tableName+ ".csv";
    data.bcpFilename=KettleVFS.getFilename(directory) + Const.FILE_SEPARATOR + tableName+ ".bcp";
    File fifoFile=new File(data.fifoFilename);
    if (!fifoFile.exists()) {
      String mkFifoCmd="mkfifo " + data.fifoFilename + "";
      logBasic("Creating FIFO file using this command : " + mkFifoCmd);
      Process mkFifoProcess=rt.exec(mkFifoCmd);
      StreamLogger errorLogger=new StreamLogger(mkFifoProcess.getErrorStream(),"mkFifoError");
      StreamLogger outputLogger=new StreamLogger(mkFifoProcess.getInputStream(),"mkFifoOuptut");
      new Thread(errorLogger).start();
      new Thread(outputLogger).start();
      int result=mkFifoProcess.waitFor();
      if (result != 0) {
        throw new Exception("Return code " + result + " received from statement : "+ mkFifoCmd);
      }
    }
    DBCache.getInstance().clear(meta.getDatabaseMeta().getName());
    data.db=new Database(meta.getDatabaseMeta());
    data.db.shareVariablesWith(this);
    if (getTransMeta().isUsingUniqueConnections()) {
synchronized (getTrans()) {
        data.db.connect(getTrans().getThreadName(),getPartitionID());
      }
    }
 else {
      data.db.connect(getPartitionID());
    }
    logBasic("Connected to LucidDB");
    String fifoServerStatement="";
    fifoServerStatement+="create or replace server " + meta.getFifoServerName() + Const.CR;
    fifoServerStatement+="foreign data wrapper sys_file_wrapper" + Const.CR;
    fifoServerStatement+="options (" + Const.CR;
    fifoServerStatement+="directory '" + fifoDirectory + "',"+ Const.CR;
    fifoServerStatement+="file_extension 'csv'," + Const.CR;
    fifoServerStatement+="with_header 'no'," + Const.CR;
    fifoServerStatement+="num_rows_scan '0'," + Const.CR;
    fifoServerStatement+="lenient 'no');" + Const.CR;
    logBasic("Creating LucidDB fifo_server with the following command: " + fifoServerStatement);
    data.db.execStatements(fifoServerStatement);
    String errorMaxStatement="";
    errorMaxStatement+="alter session set \"errorMax\" = " + meta.getMaxErrors() + ";"+ Const.CR;
    logBasic("Setting error limit in LucidDB session with the following command: " + errorMaxStatement);
    data.db.execStatements(errorMaxStatement);
    createBulkLoadConfigFile(data.bcpFilename);
    executeLoadCommand(tableName);
    data.fifoStream=new BufferedOutputStream(new FileOutputStream(fifoFile));
  }
 catch (  Exception ex) {
    throw new KettleException(ex);
  }
  return true;
}
