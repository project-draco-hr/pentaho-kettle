{
  final Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  shell.setImage(GUIResource.getInstance().getImageSpoon());
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(getClass(),"CapabilityManager.Dialog.Title"));
  int margin=Const.MARGIN;
  Button closeButton=new Button(shell,SWT.PUSH);
  closeButton.setText(BaseMessages.getString(getClass(),"System.Button.Close"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{closeButton},margin,null);
  closeButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      shell.dispose();
    }
  }
);
  ScrolledComposite scrollpane=new ScrolledComposite(shell,SWT.BORDER | SWT.V_SCROLL);
  FormData treeFormData=new FormData();
  treeFormData.left=new FormAttachment(0,0);
  treeFormData.top=new FormAttachment(0,0);
  treeFormData.right=new FormAttachment(100,0);
  Label label=new Label(shell,SWT.NONE);
  label.setText("Capabilities:");
  label.setLayoutData(treeFormData);
  treeFormData=new FormData();
  treeFormData.left=new FormAttachment(0,0);
  treeFormData.top=new FormAttachment(label,0);
  treeFormData.right=new FormAttachment(100,0);
  treeFormData.bottom=new FormAttachment(closeButton,-margin * 2);
  scrollpane.setLayoutData(treeFormData);
  scrollpane.setExpandVertical(true);
  scrollpane.setExpandHorizontal(true);
  scrollpane.setAlwaysShowScrollBars(true);
  Composite mainPanel=new Composite(scrollpane,SWT.NONE);
  scrollpane.setContent(mainPanel);
  scrollpane.setSize(250,400);
  mainPanel.setLayout(new GridLayout(1,false));
  Set<ICapability> allCapabilities=DefaultCapabilityManager.getInstance().getAllCapabilities();
  SortedSet<ICapability> capabilitySortedSet=new TreeSet<ICapability>(allCapabilities);
  for (  final ICapability capability : capabilitySortedSet) {
    final Button button=new Button(mainPanel,SWT.CHECK);
    button.setLayoutData(new GridData(GridData.FILL_BOTH,SWT.BEGINNING,false,false));
    button.setSelection(capability.isInstalled());
    button.setText(capability.getId());
    buttons.add(button);
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent selectionEvent){
        final boolean selected=((Button)selectionEvent.widget).getSelection();
        new Thread(new Runnable(){
          @Override public void run(){
            final Future<Boolean> future=(selected) ? capability.install() : capability.uninstall();
            try {
              final Boolean successful=future.get();
              display.asyncExec(new Runnable(){
                @Override public void run(){
                  button.setSelection(successful);
                  if (!successful) {
                    MessageDialog dialog=new MessageDialog(shell,"Capability Install Error",null,"Error Installing Capability:\n\n" + capability.getId(),MessageDialog.ERROR,new String[]{"OK"},0);
                    dialog.open();
                  }
 else {
                    MessageDialog dialog=new MessageDialog(shell,"Capability Install Success",null,capability.getId() + " " + ((!selected) ? "un" : "")+ "installed successfully",MessageDialog.INFORMATION,new String[]{"OK"},0);
                    dialog.open();
                  }
                  updateAllCheckboxes();
                }
              }
);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
catch (            ExecutionException e) {
              e.printStackTrace();
            }
          }
        }
).run();
      }
    }
);
  }
  mainPanel.setSize(mainPanel.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  scrollpane.setMinSize(mainPanel.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  BaseStepDialog.setSize(shell,250,400,false);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
}
