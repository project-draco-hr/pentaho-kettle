{
  for (  StepInjectionMetaEntry entry : metadata) {
    KettleAttributeInterface attr=findAttribute(entry.getKey());
    if (entry.getValueType() != ValueMetaInterface.TYPE_NONE) {
      if (entry.getKey().equals("SELECT_UNSPECIFIED")) {
        selectingAndSortingUnspecifiedFields=(Boolean)entry.getValue();
      }
 else {
        throw new RuntimeException("Unhandled metadata injection of attribute: " + attr.toString() + " - "+ attr.getDescription());
      }
    }
 else {
      if (attr.getKey().equals("FIELDS")) {
        List<StepInjectionMetaEntry> selectFields=entry.getDetails();
        allocateSelect(selectFields.size());
        for (int row=0; row < selectFields.size(); row++) {
          StepInjectionMetaEntry selectField=selectFields.get(row);
          List<StepInjectionMetaEntry> fieldAttributes=selectField.getDetails();
          for (int i=0; i < fieldAttributes.size(); i++) {
            StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
            KettleAttributeInterface fieldAttr=findAttribute(fieldAttribute.getKey());
            String attributeValue=(String)fieldAttribute.getValue();
            if (fieldAttr.getKey().equals("FIELD_NAME")) {
              getSelectName()[row]=attributeValue;
            }
 else             if (fieldAttr.getKey().equals("FIELD_RENAME")) {
              getSelectRename()[row]=attributeValue;
            }
 else             if (fieldAttr.getKey().equals("FIELD_LENGTH")) {
              getSelectLength()[row]=attributeValue == null ? -1 : Integer.parseInt(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("FIELD_PRECISION")) {
              getSelectPrecision()[row]=attributeValue == null ? -1 : Integer.parseInt(attributeValue);
            }
 else {
              throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.toString() + " - "+ fieldAttr.getDescription());
            }
          }
        }
      }
 else       if (attr.getKey().equals("REMOVES")) {
        List<StepInjectionMetaEntry> removeFields=entry.getDetails();
        allocateRemove(removeFields.size());
        for (int row=0; row < removeFields.size(); row++) {
          StepInjectionMetaEntry removeField=removeFields.get(row);
          List<StepInjectionMetaEntry> fieldAttributes=removeField.getDetails();
          for (int i=0; i < fieldAttributes.size(); i++) {
            StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
            KettleAttributeInterface fieldAttr=findAttribute(fieldAttribute.getKey());
            String attributeValue=(String)fieldAttribute.getValue();
            if (fieldAttr.getKey().equals("REMOVE_NAME")) {
              getDeleteName()[row]=attributeValue;
            }
 else {
              throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.toString() + " - "+ fieldAttr.getDescription());
            }
          }
        }
      }
 else       if (attr.getKey().equals("METAS")) {
        List<StepInjectionMetaEntry> metaFields=entry.getDetails();
        allocateMeta(metaFields.size());
        for (int row=0; row < metaFields.size(); row++) {
          StepInjectionMetaEntry metaField=metaFields.get(row);
          SelectMetadataChange metaChange=new SelectMetadataChange(this);
          List<StepInjectionMetaEntry> fieldAttributes=metaField.getDetails();
          for (int i=0; i < fieldAttributes.size(); i++) {
            StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
            KettleAttributeInterface fieldAttr=findAttribute(fieldAttribute.getKey());
            String attributeValue=(String)fieldAttribute.getValue();
            if (fieldAttr.getKey().equals("META_NAME")) {
              metaChange.setName(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_RENAME")) {
              metaChange.setRename(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_TYPE")) {
              metaChange.setType(ValueMeta.getType(attributeValue));
            }
 else             if (fieldAttr.getKey().equals("META_LENGTH")) {
              metaChange.setLength(attributeValue == null ? -1 : Integer.parseInt(attributeValue));
            }
 else             if (fieldAttr.getKey().equals("META_PRECISION")) {
              metaChange.setPrecision(attributeValue == null ? -1 : Integer.parseInt(attributeValue));
            }
 else             if (fieldAttr.getKey().equals("META_STORAGE_TYPE")) {
              metaChange.setStorageType(ValueMeta.getStorageType(attributeValue));
            }
 else             if (fieldAttr.getKey().equals("META_CONVERSION_MASK")) {
              metaChange.setConversionMask(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_DATE_FORMAT_LENIENT")) {
              metaChange.setDateFormatLenient(ValueMeta.convertStringToBoolean(attributeValue) == null ? false : true);
            }
 else             if (fieldAttr.getKey().equals("META_DATE_FORMAT_LOCALE")) {
              metaChange.setDateFormatLocale(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_DATE_FORMAT_TIMEZONE")) {
              metaChange.setDateFormatTimeZone(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_LENIENT_STRING_TO_NUMBER")) {
              metaChange.setLenientStringToNumber(ValueMeta.convertStringToBoolean(attributeValue) == null ? false : true);
            }
 else             if (fieldAttr.getKey().equals("META_DECIMAL")) {
              metaChange.setDecimalSymbol(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_GROUPING")) {
              metaChange.setGroupingSymbol(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_CURRENCY")) {
              metaChange.setCurrencySymbol(attributeValue);
            }
 else             if (fieldAttr.getKey().equals("META_ENCODING")) {
              metaChange.setEncoding(attributeValue);
            }
 else {
              throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.getKey() + " - "+ fieldAttr.getDescription());
            }
          }
          meta[row]=metaChange;
        }
        break;
      }
    }
  }
}
