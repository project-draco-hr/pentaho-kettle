{
  try {
    Node fields=XMLHandler.getSubNode(step,"fields");
    int nrfields=XMLHandler.countNodes(fields,"field");
    int nrremove=XMLHandler.countNodes(fields,"remove");
    int nrmeta=XMLHandler.countNodes(fields,SelectMetadataChange.XML_TAG);
    allocate(nrfields,nrremove,nrmeta);
    for (int i=0; i < nrfields; i++) {
      Node line=XMLHandler.getSubNodeByNr(fields,"field",i);
      selectFields[i]=new SelectField();
      selectFields[i].setName(XMLHandler.getTagValue(line,"name"));
      selectFields[i].setRename(XMLHandler.getTagValue(line,"rename"));
      selectFields[i].setLength(Const.toInt(XMLHandler.getTagValue(line,"length"),UNDEFINED));
      selectFields[i].setPrecision(Const.toInt(XMLHandler.getTagValue(line,"precision"),UNDEFINED));
    }
    selectingAndSortingUnspecifiedFields="Y".equalsIgnoreCase(XMLHandler.getTagValue(fields,"select_unspecified"));
    for (int i=0; i < nrremove; i++) {
      Node line=XMLHandler.getSubNodeByNr(fields,"remove",i);
      deleteName[i]=XMLHandler.getTagValue(line,"name");
    }
    for (int i=0; i < nrmeta; i++) {
      Node metaNode=XMLHandler.getSubNodeByNr(fields,SelectMetadataChange.XML_TAG,i);
      meta[i]=new SelectMetadataChange(this);
      meta[i].loadXML(metaNode);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"SelectValuesMeta.Exception.UnableToReadStepInfoFromXML"),e);
  }
}
