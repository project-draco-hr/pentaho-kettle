{
  EnvUtil.environmentInit();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("regexeval1");
  StepLoader steploader=StepLoader.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=steploader.getStepPluginID(im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
  transMeta.addStep(injectorStep);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=steploader.getStepPluginID(dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,(StepMetaInterface)dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hi=new TransHopMeta(injectorStep,dummyStep1);
  transMeta.addTransHop(hi);
  String regexEvalName="regexeval step";
  RegexEvalMeta re=new RegexEvalMeta();
  re.setScript("[a-z]*");
  re.setMatcher("field1");
  re.setResultFieldname("res");
  re.setUseVar(false);
  re.setCanoneq(false);
  re.setCaseinsensitive(false);
  re.setComment(false);
  re.setDotAll(false);
  re.setMultiLine(false);
  re.setUnicode(false);
  re.setUnix(false);
  String regexEvalPid=steploader.getStepPluginID(re);
  StepMeta regexEvalStep=new StepMeta(regexEvalPid,regexEvalName,(StepMetaInterface)re);
  transMeta.addStep(regexEvalStep);
  TransHopMeta hi2=new TransHopMeta(dummyStep1,regexEvalStep);
  transMeta.addTransHop(hi2);
  String dummyStepname2="dummy step 2";
  DummyTransMeta dm2=new DummyTransMeta();
  String dummyPid2=steploader.getStepPluginID(dm2);
  StepMeta dummyStep2=new StepMeta(dummyPid2,dummyStepname2,(StepMetaInterface)dm2);
  transMeta.addStep(dummyStep2);
  TransHopMeta hi3=new TransHopMeta(regexEvalStep,dummyStep2);
  transMeta.addTransHop(hi3);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector dummyRc1=new RowStepCollector();
  si.addRowListener(dummyRc1);
  si=trans.getStepInterface(regexEvalName,0);
  RowStepCollector nullIfRc=new RowStepCollector();
  si.addRowListener(nullIfRc);
  si=trans.getStepInterface(dummyStepname2,0);
  RowStepCollector dummyRc=new RowStepCollector();
  si.addRowListener(dummyRc);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createData();
  Iterator<RowMetaAndData> it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows=dummyRc.getRowsWritten();
  List<RowMetaAndData> goldenImageRows=createResultData1();
  checkRows(goldenImageRows,resultRows);
}
