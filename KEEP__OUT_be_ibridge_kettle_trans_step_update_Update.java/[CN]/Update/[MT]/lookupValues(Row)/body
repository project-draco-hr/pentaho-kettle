{
  Row lu;
  Row add;
  if (first) {
    first=false;
    data.dblup.setLookup(meta.getSchemaName(),meta.getTableName(),meta.getKeyLookup(),meta.getKeyCondition(),meta.getUpdateLookup(),null,null);
    data.dbupd.prepareUpdate(meta.getSchemaName(),meta.getTableName(),meta.getKeyLookup(),meta.getKeyCondition(),meta.getUpdateLookup());
    if (log.isDetailed())     logDetailed(Messages.getString("Update.Log.CheckingRow") + row.toString());
    data.keynrs=new int[meta.getKeyStream().length];
    data.keynrs2=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("Update.Exception.FieldRequired",meta.getKeyStream()[i]));
      }
      data.keynrs2[i]=row.searchValueIndex(meta.getKeyStream2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("Update.Exception.FieldRequired",meta.getKeyStream2()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("Update.Log.FieldHasDataNumbers",meta.getKeyStream()[i]) + "" + data.keynrs[i]);
    }
    data.valuenrs=new int[meta.getUpdateLookup().length];
    for (int i=0; i < meta.getUpdateLookup().length; i++) {
      data.valuenrs[i]=row.searchValueIndex(meta.getUpdateStream()[i]);
      if (data.valuenrs[i] < 0) {
        throw new KettleStepException(Messages.getString("Update.Exception.FieldRequired",meta.getUpdateStream()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("Update.Log.FieldHasDataNumbers",meta.getUpdateStream()[i]) + "" + data.valuenrs[i]);
    }
  }
  lu=new Row();
  for (int i=0; i < meta.getKeyStream().length; i++) {
    if (data.keynrs[i] >= 0) {
      lu.addValue(row.getValue(data.keynrs[i]));
    }
    if (data.keynrs2[i] >= 0) {
      lu.addValue(row.getValue(data.keynrs2[i]));
    }
  }
  data.dblup.setValuesLookup(lu);
  if (log.isDebug())   logDebug(Messages.getString("Update.Log.ValuesSetForLookup",lu.toString(),"" + row));
  add=data.dblup.getLookup();
  linesInput++;
  if (add == null) {
    if (!meta.isErrorIgnored()) {
      if (getStepMeta().isDoingErrorHandling()) {
        row.setIgnore();
        if (data.stringErrorKeyNotFound == null) {
          data.stringErrorKeyNotFound=Messages.getString("Update.Exception.KeyCouldNotFound") + lu;
          data.stringFieldnames="";
          for (int i=0; i < lu.size(); i++) {
            if (i > 0)             data.stringFieldnames+=", ";
            data.stringFieldnames+=lu.getValue(i).getName();
          }
        }
        putError(row,1L,data.stringErrorKeyNotFound,data.stringFieldnames,"UPD001");
      }
 else {
        throw new KettleDatabaseException(Messages.getString("Update.Exception.KeyCouldNotFound") + lu);
      }
    }
 else {
      log.logDetailed(toString(),Messages.getString("Update.Log.KeyCouldNotFound") + lu);
      if (meta.getIgnoreFlagField() != null && meta.getIgnoreFlagField().length() > 0) {
        row.addValue(new Value(meta.getIgnoreFlagField(),false));
      }
    }
  }
 else {
    if (log.isRowLevel())     logRowlevel(Messages.getString("Update.Log.FoundRow") + add.toString());
    boolean update=false;
    for (int i=0; i < data.valuenrs.length; i++) {
      Value rowvalue=row.getValue(data.valuenrs[i]);
      lu.addValue(i,rowvalue);
      Value retvalue=add.getValue(i);
      if (!rowvalue.equals(retvalue)) {
        update=true;
      }
    }
    if (update) {
      if (log.isRowLevel())       logRowlevel(Messages.getString("Update.Log.UpdateRow") + lu.toString());
      data.dbupd.setValuesUpdate(lu);
      data.dbupd.updateRow();
      linesUpdated++;
    }
 else {
      linesSkipped++;
    }
    if (meta.getIgnoreFlagField() != null && meta.getIgnoreFlagField().length() > 0) {
      row.addValue(new Value(meta.getIgnoreFlagField(),true));
    }
  }
}
