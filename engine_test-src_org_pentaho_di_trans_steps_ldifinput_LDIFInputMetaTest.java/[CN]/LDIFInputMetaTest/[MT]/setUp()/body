{
  List<String> attributes=Arrays.asList("includeFilename","filenameField","includeRowNumber","rowNumberField","rowLimit","addtoresultfilename","multiValuedSeparator","includeContentType","contentTypeField","DNField","includeDN","filefield","dynamicFilenameField","shortFileFieldName","pathFieldName","hiddenFieldName","lastModificationTimeFieldName","uriNameFieldName","rootUriNameFieldName","extensionFieldName","sizeFieldName","fileRequired","includeSubFolders","fileName","fileMask","excludeFileMask","inputFields");
  Map<String,String> getterMap=new HashMap<String,String>(){
{
      put("includeFilename","getIncludeFilename");
      put("filenameField","getFilenameField");
      put("includeRowNumber","getIncludeRowNumber");
      put("rowNumberField","getRowNumberField");
      put("rowLimit","getRowLimit");
      put("addtoresultfilename","getAddToResultFilename");
      put("multiValuedSeparator","getMultiValuedSeparator");
      put("includeContentType","getIncludeContentType");
      put("contentTypeField","getContentTypeField");
      put("DNField","getDNField");
      put("includeDN","getIncludeDN");
      put("filefield","isFileField");
      put("dynamicFilenameField","getDynamicFilenameField");
      put("shortFileFieldName","getShortFileNameField");
      put("pathFieldName","getPathField");
      put("hiddenFieldName","getHiddenField");
      put("lastModificationTimeFieldName","getLastModificationDateField");
      put("uriNameFieldName","getUriField");
      put("rootUriNameFieldName","getRootUriField");
      put("extensionFieldName","getExtensionField");
      put("sizeFieldName","getSizeField");
      put("fileRequired","getFileRequired");
      put("includeSubFolders","getIncludeSubFolders");
      put("fileName","getFileName");
      put("fileMask","getFileMask");
      put("excludeFileMask","getExcludeFileMask");
      put("inputFields","getInputFields");
    }
  }
;
  Map<String,String> setterMap=new HashMap<String,String>(){
{
      put("includeFilename","setIncludeFilename");
      put("filenameField","setFilenameField");
      put("includeRowNumber","setIncludeRowNumber");
      put("rowNumberField","setRowNumberField");
      put("rowLimit","setRowLimit");
      put("addtoresultfilename","setAddToResultFilename");
      put("multiValuedSeparator","setMultiValuedSeparator");
      put("includeContentType","setIncludeContentType");
      put("contentTypeField","setContentTypeField");
      put("DNField","setDNField");
      put("includeDN","setIncludeDN");
      put("filefield","setFileField");
      put("dynamicFilenameField","setDynamicFilenameField");
      put("shortFileFieldName","setShortFileNameField");
      put("pathFieldName","setPathField");
      put("hiddenFieldName","setHiddenField");
      put("lastModificationTimeFieldName","setLastModificationDateField");
      put("uriNameFieldName","setUriField");
      put("rootUriNameFieldName","setRootUriField");
      put("extensionFieldName","setExtensionField");
      put("sizeFieldName","setSizeField");
      put("fileRequired","setFileRequired");
      put("includeSubFolders","setIncludeSubFolders");
      put("fileName","setFileName");
      put("fileMask","setFileMask");
      put("excludeFileMask","setExcludeFileMask");
      put("inputFields","setInputFields");
    }
  }
;
  FieldLoadSaveValidator<String[]> stringArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new StringLoadSaveValidator(),5);
  FieldLoadSaveValidator<LDIFInputField[]> liflsv=new ArrayLoadSaveValidator<LDIFInputField>(new LDIFInputFieldLoadSaveValidator(),5);
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  attrValidatorMap.put("fileName",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fileMask",stringArrayLoadSaveValidator);
  attrValidatorMap.put("excludeFileMask",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fileRequired",stringArrayLoadSaveValidator);
  attrValidatorMap.put("includeSubFolders",stringArrayLoadSaveValidator);
  attrValidatorMap.put("inputFields",liflsv);
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  loadSaveTester=new LoadSaveTester(MockLDIFInputMeta.class,attributes,getterMap,setterMap,attrValidatorMap,typeValidatorMap);
}
