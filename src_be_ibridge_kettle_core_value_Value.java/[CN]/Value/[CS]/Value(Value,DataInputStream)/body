{
  setValue(metaData);
  setName(metaData.getName());
  try {
    setNull(dis.readBoolean());
    if (!isNull()) {
switch (getType()) {
case VALUE_TYPE_STRING:
        int stringLength=dis.readInt();
      if (stringLength < 0) {
        setValue((String)null);
      }
 else {
        StringBuffer buffer=new StringBuffer();
        for (int i=0; i < stringLength; i++)         buffer.append(dis.readChar());
        setValue(buffer.toString());
      }
    break;
case VALUE_TYPE_BIGNUMBER:
  int bnLength=dis.readInt();
if (bnLength < 0) {
  setValue((BigDecimal)null);
}
 else {
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < bnLength; i++)   buffer.append(dis.readChar());
  setValue(buffer.toString());
  try {
    convertString(VALUE_TYPE_BIGNUMBER);
  }
 catch (  KettleValueException e) {
    throw new IOException("Unable to convert String to BigNumber while reading from data input stream [" + getString() + "]");
  }
}
break;
case VALUE_TYPE_DATE:
if (dis.readBoolean()) {
setValue(new Date(dis.readLong()));
}
break;
case VALUE_TYPE_NUMBER:
setValue(dis.readDouble());
break;
case VALUE_TYPE_INTEGER:
setValue(dis.readLong());
break;
case VALUE_TYPE_BOOLEAN:
setValue(dis.readBoolean());
break;
default :
break;
}
}
}
 catch (EOFException e) {
throw new KettleEOFException("End of file reached while reading value",e);
}
catch (Exception e) {
throw new KettleEOFException("Error reading value data from stream",e);
}
}
