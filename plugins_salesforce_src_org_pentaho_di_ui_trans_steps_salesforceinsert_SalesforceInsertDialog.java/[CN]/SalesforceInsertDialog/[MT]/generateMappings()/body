{
  if (!checkInput()) {
    return;
  }
  RowMetaInterface sourceFields;
  RowMetaInterface targetFields=new RowMeta();
  try {
    sourceFields=transMeta.getPrevStepFields(stepMeta);
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.UnableToFindSourceFields.Title"),BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.UnableToFindSourceFields.Message"),e);
    return;
  }
  try {
    SalesforceConnection connection=getConnection();
    Field[] fields=connection.getObjectFields(transMeta.environmentSubstitute(wModule.getText()));
    String[] fieldNames=connection.getFields(fields);
    FieldType dateType=FieldType.fromString("date");
    for (int i=0; i < fields.length; i++) {
      if (dateType.equals(fields[i].getType())) {
        targetFields.addValueMeta(ValueMetaFactory.createValueMeta(fieldNames[i],ValueMetaInterface.TYPE_DATE));
      }
 else {
        targetFields.addValueMeta(new ValueMetaNone(fieldNames[i]));
      }
    }
  }
 catch (  Exception e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.UnableToFindTargetFields.Title"),BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.UnableToFindTargetFields.Message"),e);
    return;
  }
  String[] inputNames=new String[sourceFields.size()];
  for (int i=0; i < sourceFields.size(); i++) {
    ValueMetaInterface value=sourceFields.getValueMeta(i);
    inputNames[i]=value.getName() + EnterMappingDialog.STRING_ORIGIN_SEPARATOR + value.getOrigin()+ ")";
  }
  List<SourceToTargetMapping> mappings=new ArrayList<SourceToTargetMapping>();
  StringBuffer missingSourceFields=new StringBuffer();
  StringBuffer missingTargetFields=new StringBuffer();
  int nrFields=wReturn.nrNonEmpty();
  for (int i=0; i < nrFields; i++) {
    TableItem item=wReturn.getNonEmpty(i);
    String source=item.getText(2);
    String target=item.getText(1);
    int sourceIndex=sourceFields.indexOfValue(source);
    if (sourceIndex < 0) {
      missingSourceFields.append(Const.CR + "   " + source+ " --> "+ target);
    }
    int targetIndex=targetFields.indexOfValue(target);
    if (targetIndex < 0) {
      missingTargetFields.append(Const.CR + "   " + source+ " --> "+ target);
    }
    if (sourceIndex < 0 || targetIndex < 0) {
      continue;
    }
    SourceToTargetMapping mapping=new SourceToTargetMapping(sourceIndex,targetIndex);
    mappings.add(mapping);
  }
  if (missingSourceFields.length() > 0 || missingTargetFields.length() > 0) {
    String message="";
    if (missingSourceFields.length() > 0) {
      message+=BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.SomeSourceFieldsNotFound",missingSourceFields.toString()) + Const.CR;
    }
    if (missingTargetFields.length() > 0) {
      message+=BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.SomeTargetFieldsNotFound",missingSourceFields.toString()) + Const.CR;
    }
    message+=Const.CR;
    message+=BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.SomeFieldsNotFoundContinue") + Const.CR;
    MessageDialog.setDefaultImage(GUIResource.getInstance().getImageSpoon());
    boolean goOn=MessageDialog.openConfirm(shell,BaseMessages.getString(PKG,"SalesforceInsertDialog.DoMapping.SomeFieldsNotFoundTitle"),message);
    if (!goOn) {
      return;
    }
  }
  EnterMappingDialog d=new EnterMappingDialog(SalesforceInsertDialog.this.shell,sourceFields.getFieldNames(),targetFields.getFieldNames(),mappings);
  mappings=d.open();
  if (mappings != null) {
    wReturn.table.removeAll();
    wReturn.table.setItemCount(mappings.size());
    for (int i=0; i < mappings.size(); i++) {
      SourceToTargetMapping mapping=mappings.get(i);
      TableItem item=wReturn.table.getItem(i);
      item.setText(2,sourceFields.getValueMeta(mapping.getSourcePosition()).getName());
      item.setText(1,targetFields.getValueMeta(mapping.getTargetPosition()).getName());
    }
    wReturn.setRowNums();
    wReturn.optWidth(true);
  }
}
