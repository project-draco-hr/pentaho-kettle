{
  GetFileNamesMeta meta=new GetFileNamesMeta();
  meta.setDefault();
  meta.allocate(1);
  meta.setFileName(new String[]{"${MY_FOLDER_PARAM}"});
  meta.setFileMask(new String[]{".*"});
  meta.setExcludeFileMask(new String[]{""});
  meta.setFileRequired(new String[]{"Y"});
  meta.setIncludeSubFolders(new String[]{"N"});
  TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,STEPNAME);
  TransHopMeta injectHop=transMeta.findTransHop(transMeta.findStep(TransTestFactory.INJECTOR_STEPNAME),transMeta.findStep(STEPNAME));
  transMeta.removeTransHop(transMeta.indexOfTransHop(injectHop));
  transMeta.addParameterDefinition("MY_FOLDER_PARAM","C:\\ThisFolderDoesNotExist","The folder to look in for files");
  Variables varSpace=new Variables();
  varSpace.setVariable("MY_FOLDER_PARAM",tempFolder.getRoot().getAbsolutePath());
  String expectedFilename="PDI14800_test.tmp";
  tempFolder.newFile(expectedFilename);
  List<RowMetaAndData> result=TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,STEPNAME,TransTestFactory.DUMMY_STEPNAME,new ArrayList<RowMetaAndData>(),null,varSpace);
  assertNotNull(result);
  assertEquals(1,result.size());
  assertTrue(result.get(0).getRowMeta().indexOfValue("short_filename") >= 0);
  assertEquals(expectedFilename,result.get(0).getString("short_filename","failure"));
}
