{
  File masterZipfile=null;
  Properties props=new Properties();
  if (Utils.isEmpty(server)) {
    logError(BaseMessages.getString(PKG,"JobMail.Error.HostNotSpecified"));
    result.setNrErrors(1L);
    result.setResult(false);
    return result;
  }
  String protocol="smtp";
  if (usingSecureAuthentication) {
    if (secureConnectionType.equals("TLS")) {
      props.put("mail.smtp.starttls.enable","true");
    }
 else {
      protocol="smtps";
      props.put("mail.smtps.quitwait","false");
    }
  }
  props.put("mail." + protocol + ".host",environmentSubstitute(server));
  if (!Utils.isEmpty(port)) {
    props.put("mail." + protocol + ".port",environmentSubstitute(port));
  }
  if (log.isDebug()) {
    props.put("mail.debug","true");
  }
  if (usingAuthentication) {
    props.put("mail." + protocol + ".auth","true");
  }
  Session session=Session.getInstance(props);
  session.setDebug(log.isDebug());
  try {
    Message msg=new MimeMessage(session);
    if (usePriority) {
      String priority_int="1";
      if (priority.equals("low")) {
        priority_int="3";
      }
      if (priority.equals("normal")) {
        priority_int="2";
      }
      msg.setHeader("X-Priority",priority_int);
      msg.setHeader("Importance",importance);
      msg.setHeader("Sensitivity",sensitivity);
    }
    String sender_address=environmentSubstitute(replyAddress);
    if (!Utils.isEmpty(sender_address)) {
      String sender_name=environmentSubstitute(replyName);
      if (!Utils.isEmpty(sender_name)) {
        sender_address=sender_name + '<' + sender_address+ '>';
      }
      msg.setFrom(new InternetAddress(sender_address));
    }
 else {
      throw new MessagingException(BaseMessages.getString(PKG,"JobMail.Error.ReplyEmailNotFilled"));
    }
    String reply_to_address=environmentSubstitute(replyToAddresses);
    if (!Utils.isEmpty(reply_to_address)) {
      String[] reply_Address_List=environmentSubstitute(reply_to_address).split(" ");
      InternetAddress[] address=new InternetAddress[reply_Address_List.length];
      for (int i=0; i < reply_Address_List.length; i++) {
        address[i]=new InternetAddress(reply_Address_List[i]);
      }
      msg.setReplyTo(address);
    }
    String[] destinations=environmentSubstitute(destination).split(" ");
    InternetAddress[] address=new InternetAddress[destinations.length];
    for (int i=0; i < destinations.length; i++) {
      address[i]=new InternetAddress(destinations[i]);
    }
    msg.setRecipients(Message.RecipientType.TO,address);
    String realCC=environmentSubstitute(getDestinationCc());
    if (!Utils.isEmpty(realCC)) {
      String[] destinationsCc=realCC.split(" ");
      InternetAddress[] addressCc=new InternetAddress[destinationsCc.length];
      for (int i=0; i < destinationsCc.length; i++) {
        addressCc[i]=new InternetAddress(destinationsCc[i]);
      }
      msg.setRecipients(Message.RecipientType.CC,addressCc);
    }
    String realBCc=environmentSubstitute(getDestinationBCc());
    if (!Utils.isEmpty(realBCc)) {
      String[] destinationsBCc=realBCc.split(" ");
      InternetAddress[] addressBCc=new InternetAddress[destinationsBCc.length];
      for (int i=0; i < destinationsBCc.length; i++) {
        addressBCc[i]=new InternetAddress(destinationsBCc[i]);
      }
      msg.setRecipients(Message.RecipientType.BCC,addressBCc);
    }
    String realSubject=environmentSubstitute(subject);
    if (!Utils.isEmpty(realSubject)) {
      msg.setSubject(realSubject);
    }
    msg.setSentDate(new Date());
    StringBuilder messageText=new StringBuilder();
    String endRow=isUseHTML() ? "<br>" : Const.CR;
    String realComment=environmentSubstitute(comment);
    if (!Utils.isEmpty(realComment)) {
      messageText.append(realComment).append(Const.CR).append(Const.CR);
    }
    if (!onlySendComment) {
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.Job")).append(endRow);
      messageText.append("-----").append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.JobName") + "    : ").append(parentJob.getJobMeta().getName()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.JobDirectory") + "  : ").append(parentJob.getJobMeta().getRepositoryDirectory()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.JobEntry") + "   : ").append(getName()).append(endRow);
      messageText.append(Const.CR);
    }
    if (includeDate) {
      messageText.append(endRow).append(BaseMessages.getString(PKG,"JobMail.Log.Comment.MsgDate") + ": ").append(XMLHandler.date2string(new Date())).append(endRow).append(endRow);
    }
    if (!onlySendComment && result != null) {
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.PreviousResult") + ":").append(endRow);
      messageText.append("-----------------").append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.JobEntryNr") + "         : ").append(result.getEntryNr()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.Errors") + "               : ").append(result.getNrErrors()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesRead") + "           : ").append(result.getNrLinesRead()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesWritten") + "        : ").append(result.getNrLinesWritten()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesInput") + "          : ").append(result.getNrLinesInput()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesOutput") + "         : ").append(result.getNrLinesOutput()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesUpdated") + "        : ").append(result.getNrLinesUpdated()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.LinesRejected") + "       : ").append(result.getNrLinesRejected()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.Status") + "  : ").append(result.getExitStatus()).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.Result") + "               : ").append(result.getResult()).append(endRow);
      messageText.append(endRow);
    }
    if (!onlySendComment && (!Utils.isEmpty(environmentSubstitute(contactPerson)) || !Utils.isEmpty(environmentSubstitute(contactPhone)))) {
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.ContactInfo") + " :").append(endRow);
      messageText.append("---------------------").append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.PersonToContact") + " : ").append(environmentSubstitute(contactPerson)).append(endRow);
      messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.Tel") + "  : ").append(environmentSubstitute(contactPhone)).append(endRow);
      messageText.append(endRow);
    }
    if (!onlySendComment) {
      JobTracker jobTracker=parentJob.getJobTracker();
      if (jobTracker != null) {
        messageText.append(BaseMessages.getString(PKG,"JobMail.Log.Comment.PathToJobentry") + ":").append(endRow);
        messageText.append("------------------------").append(endRow);
        addBacktracking(jobTracker,messageText);
        if (isUseHTML()) {
          messageText.replace(0,messageText.length(),messageText.toString().replace(Const.CR,endRow));
        }
      }
    }
    MimeMultipart parts=new MimeMultipart();
    MimeBodyPart part1=new MimeBodyPart();
    int nrattachedFiles=0;
    if (useHTML) {
      if (!Utils.isEmpty(getEncoding())) {
        part1.setContent(messageText.toString(),"text/html; " + "charset=" + getEncoding());
      }
 else {
        part1.setContent(messageText.toString(),"text/html; " + "charset=ISO-8859-1");
      }
    }
 else {
      part1.setText(messageText.toString());
    }
    parts.addBodyPart(part1);
    if (includingFiles && result != null) {
      List<ResultFile> resultFiles=result.getResultFilesList();
      if (resultFiles != null && !resultFiles.isEmpty()) {
        if (!zipFiles) {
          for (          ResultFile resultFile : resultFiles) {
            FileObject file=resultFile.getFile();
            if (file != null && file.exists()) {
              boolean found=false;
              for (int i=0; i < fileType.length; i++) {
                if (fileType[i] == resultFile.getType()) {
                  found=true;
                }
              }
              if (found) {
                MimeBodyPart files=new MimeBodyPart();
                URLDataSource fds=new URLDataSource(file.getURL());
                files.setDataHandler(new DataHandler(fds));
                files.setFileName(file.getName().getBaseName());
                files.addHeader("Content-Transfer-Encoding","base64");
                parts.addBodyPart(files);
                nrattachedFiles++;
                logBasic("Added file '" + fds.getName() + "' to the mail message.");
              }
            }
          }
        }
 else {
          masterZipfile=new File(System.getProperty("java.io.tmpdir") + Const.FILE_SEPARATOR + environmentSubstitute(zipFilename));
          ZipOutputStream zipOutputStream=null;
          try {
            zipOutputStream=new ZipOutputStream(new FileOutputStream(masterZipfile));
            for (            ResultFile resultFile : resultFiles) {
              boolean found=false;
              for (int i=0; i < fileType.length; i++) {
                if (fileType[i] == resultFile.getType()) {
                  found=true;
                }
              }
              if (found) {
                FileObject file=resultFile.getFile();
                ZipEntry zipEntry=new ZipEntry(file.getName().getBaseName());
                zipOutputStream.putNextEntry(zipEntry);
                BufferedInputStream inputStream=new BufferedInputStream(KettleVFS.getInputStream(file));
                try {
                  int c;
                  while ((c=inputStream.read()) >= 0) {
                    zipOutputStream.write(c);
                  }
                }
  finally {
                  inputStream.close();
                }
                zipOutputStream.closeEntry();
                nrattachedFiles++;
                logBasic("Added file '" + file.getName().getURI() + "' to the mail message in a zip archive.");
              }
            }
          }
 catch (          Exception e) {
            logError("Error zipping attachement files into file [" + masterZipfile.getPath() + "] : "+ e.toString());
            logError(Const.getStackTracker(e));
            result.setNrErrors(1);
          }
 finally {
            if (zipOutputStream != null) {
              try {
                zipOutputStream.finish();
                zipOutputStream.close();
              }
 catch (              IOException e) {
                logError("Unable to close attachement zip file archive : " + e.toString());
                logError(Const.getStackTracker(e));
                result.setNrErrors(1);
              }
            }
          }
          if (result.getNrErrors() == 0) {
            MimeBodyPart files=new MimeBodyPart();
            FileDataSource fds=new FileDataSource(masterZipfile);
            files.setDataHandler(new DataHandler(fds));
            files.setFileName(fds.getName());
            parts.addBodyPart(files);
          }
        }
      }
    }
    int nrEmbeddedImages=0;
    if (embeddedimages != null && embeddedimages.length > 0) {
      FileObject imageFile=null;
      for (int i=0; i < embeddedimages.length; i++) {
        String realImageFile=environmentSubstitute(embeddedimages[i]);
        String realcontenID=environmentSubstitute(contentids[i]);
        if (messageText.indexOf("cid:" + realcontenID) < 0) {
          if (log.isDebug()) {
            log.logDebug("Image [" + realImageFile + "] is not used in message body!");
          }
        }
 else {
          try {
            boolean found=false;
            imageFile=KettleVFS.getFileObject(realImageFile,this);
            if (imageFile.exists() && imageFile.getType() == FileType.FILE) {
              found=true;
            }
 else {
              log.logError("We can not find [" + realImageFile + "] or it is not a file");
            }
            if (found) {
              MimeBodyPart messageBodyPart=new MimeBodyPart();
              URLDataSource fds=new URLDataSource(imageFile.getURL());
              messageBodyPart.setDataHandler(new DataHandler(fds));
              messageBodyPart.setHeader("Content-ID","<" + realcontenID + ">");
              parts.addBodyPart(messageBodyPart);
              nrEmbeddedImages++;
              log.logBasic("Image '" + fds.getName() + "' was embedded in message.");
            }
          }
 catch (          Exception e) {
            log.logError("Error embedding image [" + realImageFile + "] in message : "+ e.toString());
            log.logError(Const.getStackTracker(e));
            result.setNrErrors(1);
          }
 finally {
            if (imageFile != null) {
              try {
                imageFile.close();
              }
 catch (              Exception e) {
              }
            }
          }
        }
      }
    }
    if (nrEmbeddedImages > 0 && nrattachedFiles == 0) {
      parts.setSubType("related");
    }
    msg.setContent(parts);
    Transport transport=null;
    try {
      transport=session.getTransport(protocol);
      String authPass=getPassword(authenticationPassword);
      if (usingAuthentication) {
        if (!Utils.isEmpty(port)) {
          transport.connect(environmentSubstitute(Const.NVL(server,"")),Integer.parseInt(environmentSubstitute(Const.NVL(port,""))),environmentSubstitute(Const.NVL(authenticationUser,"")),authPass);
        }
 else {
          transport.connect(environmentSubstitute(Const.NVL(server,"")),environmentSubstitute(Const.NVL(authenticationUser,"")),authPass);
        }
      }
 else {
        transport.connect();
      }
      transport.sendMessage(msg,msg.getAllRecipients());
    }
  finally {
      if (transport != null) {
        transport.close();
      }
    }
  }
 catch (  IOException e) {
    logError("Problem while sending message: " + e.toString());
    result.setNrErrors(1);
  }
catch (  MessagingException mex) {
    logError("Problem while sending message: " + mex.toString());
    result.setNrErrors(1);
    Exception ex=mex;
    do {
      if (ex instanceof SendFailedException) {
        SendFailedException sfex=(SendFailedException)ex;
        Address[] invalid=sfex.getInvalidAddresses();
        if (invalid != null) {
          logError("    ** Invalid Addresses");
          for (int i=0; i < invalid.length; i++) {
            logError("         " + invalid[i]);
            result.setNrErrors(1);
          }
        }
        Address[] validUnsent=sfex.getValidUnsentAddresses();
        if (validUnsent != null) {
          logError("    ** ValidUnsent Addresses");
          for (int i=0; i < validUnsent.length; i++) {
            logError("         " + validUnsent[i]);
            result.setNrErrors(1);
          }
        }
        Address[] validSent=sfex.getValidSentAddresses();
        if (validSent != null) {
          for (int i=0; i < validSent.length; i++) {
            logError("         " + validSent[i]);
            result.setNrErrors(1);
          }
        }
      }
      if (ex instanceof MessagingException) {
        ex=((MessagingException)ex).getNextException();
      }
 else {
        ex=null;
      }
    }
 while (ex != null);
  }
 finally {
    if (masterZipfile != null && masterZipfile.exists()) {
      masterZipfile.delete();
    }
  }
  if (result.getNrErrors() > 0) {
    result.setResult(false);
  }
 else {
    result.setResult(true);
  }
  return result;
}
