{
  int c=0;
  line.setLength(0);
  try {
switch (formatNr) {
case TextFileInputMeta.FILE_FORMAT_DOS:
      while (c >= 0) {
        c=reader.read();
        if (encodingType.isReturn(c) || encodingType.isLinefeed(c)) {
          c=reader.read();
          if (!encodingType.isReturn(c) && !encodingType.isLinefeed(c)) {
            throw new KettleFileException(BaseMessages.getString(PKG,"TextFileInput.Log.SingleLineFound"));
          }
          return line.toString();
        }
        if (c >= 0) {
          line.append((char)c);
        }
      }
    break;
case TextFileInputMeta.FILE_FORMAT_UNIX:
  while (c >= 0) {
    c=reader.read();
    if (encodingType.isLinefeed(c) || encodingType.isReturn(c)) {
      return line.toString();
    }
    if (c >= 0) {
      line.append((char)c);
    }
  }
break;
case TextFileInputMeta.FILE_FORMAT_MIXED:
while (c >= 0) {
c=reader.read();
if (encodingType.isLinefeed(c)) {
  return line.toString();
}
 else if (!encodingType.isReturn(c)) {
  if (c >= 0) {
    line.append((char)c);
  }
}
}
break;
default :
break;
}
}
 catch (KettleFileException e) {
throw e;
}
catch (Exception e) {
if (line.length() == 0) {
throw new KettleFileException(BaseMessages.getString(PKG,"TextFileInput.Log.Error.ExceptionReadingLine",e.toString()),e);
}
return line.toString();
}
if (line.length() > 0) {
return line.toString();
}
return null;
}
