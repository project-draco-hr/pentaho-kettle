{
  meta=(SSHMeta)smi;
  data=(SSHData)sdi;
  Object[] row;
  if (meta.isDynamicCommand()) {
    row=getRow();
    if (row == null) {
      setOutputDone();
      return false;
    }
    if (first) {
      first=false;
      data.outputRowMeta=getInputRowMeta().clone();
      data.nrInputFields=data.outputRowMeta.size();
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
      data.nrOutputFields=data.outputRowMeta.size();
      if (meta.isDynamicCommand()) {
        if (Const.isEmpty(meta.getcommandfieldname())) {
          throw new KettleException(BaseMessages.getString(PKG,"SSH.Error.CommandFieldMissing"));
        }
        data.indexOfCommand=data.outputRowMeta.indexOfValue(meta.getcommandfieldname());
        if (data.indexOfCommand < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"SSH.Exception.CouldnotFindField",meta.getcommandfieldname()));
        }
      }
    }
  }
 else {
    if (!data.wroteOneRow) {
      row=new Object[]{};
      incrementLinesRead();
      data.wroteOneRow=true;
      if (first) {
        first=false;
        data.outputRowMeta=new RowMeta();
        data.nrInputFields=0;
        meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
        data.nrOutputFields=data.outputRowMeta.size();
        data.commands=environmentSubstitute(meta.getCommand());
      }
    }
 else {
      setOutputDone();
      return false;
    }
  }
  RowMetaInterface imeta=getInputRowMeta();
  if (imeta == null) {
    imeta=new RowMeta();
    this.setInputRowMeta(imeta);
  }
  Object[] rowData=new Object[data.nrOutputFields];
  for (int i=0; i < data.nrInputFields; i++) {
    rowData[i]=row[i];
  }
  int index=data.nrInputFields;
  Session session=null;
  try {
    if (meta.isDynamicCommand()) {
      data.commands=data.outputRowMeta.getString(row,data.indexOfCommand);
      if (Const.isEmpty(data.commands)) {
        throw new KettleException(BaseMessages.getString(PKG,"SSH.Error.MessageEmpty"));
      }
    }
    session=data.conn.openSession();
    if (log.isDebug())     logDebug(BaseMessages.getString(PKG,"SSH.Log.SessionOpened"));
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"SSH.Log.RunningCommand",data.commands));
    session.execCommand(data.commands);
    SessionResult sessionresult=new SessionResult(session);
    if (log.isDebug())     logDebug(BaseMessages.getString(PKG,"SSH.Log.CommandRunnedCommand",data.commands,sessionresult.getStdOut(),sessionresult.getStdErr()));
    rowData[index++]=sessionresult.getStd();
    if (!Const.isEmpty(data.stdTypeField)) {
      rowData[index++]=sessionresult.isStdTypeErr();
    }
    if (log.isRowLevel())     logRowlevel(BaseMessages.getString(PKG,"SSH.Log.OutputLine",data.outputRowMeta.getString(rowData)));
    putRow(data.outputRowMeta,rowData);
    if (checkFeedback(getLinesRead())) {
      if (log.isDetailed())       logDetailed(BaseMessages.getString(PKG,"SSH.LineNumber","" + getLinesRead()));
    }
  }
 catch (  Exception e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"SSH.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),row,1,errorMessage,null,"SSH001");
    }
  }
 finally {
    if (session != null) {
      session.close();
      if (log.isDebug())       logDebug(BaseMessages.getString(PKG,"SSH.Log.SessionClosed"));
    }
  }
  return true;
}
