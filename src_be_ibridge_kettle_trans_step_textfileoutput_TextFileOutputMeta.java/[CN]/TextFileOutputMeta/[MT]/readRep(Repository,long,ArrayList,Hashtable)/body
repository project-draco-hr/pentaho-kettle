{
  try {
    separator=rep.getStepAttributeString(id_step,"separator");
    enclosure=rep.getStepAttributeString(id_step,"enclosure");
    enclosureForced=rep.getStepAttributeBoolean(id_step,"enclosure_forced");
    headerEnabled=rep.getStepAttributeBoolean(id_step,"header");
    footerEnabled=rep.getStepAttributeBoolean(id_step,"footer");
    fileFormat=rep.getStepAttributeString(id_step,"format");
    fileCompression=rep.getStepAttributeString(id_step,"compression");
    if (fileCompression == null) {
      if (rep.getStepAttributeBoolean(id_step,"zipped")) {
        fileCompression="Zip";
      }
    }
    encoding=rep.getStepAttributeString(id_step,"encoding");
    fileName=rep.getStepAttributeString(id_step,"file_name");
    fileAsCommand=rep.getStepAttributeBoolean(id_step,"file_is_command");
    extension=rep.getStepAttributeString(id_step,"file_extention");
    fileAppended=rep.getStepAttributeBoolean(id_step,"file_append");
    splitEvery=(int)rep.getStepAttributeInteger(id_step,"file_split");
    stepNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_stepnr");
    partNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_partnr");
    dateInFilename=rep.getStepAttributeBoolean(id_step,"file_add_date");
    timeInFilename=rep.getStepAttributeBoolean(id_step,"file_add_time");
    padded=rep.getStepAttributeBoolean(id_step,"file_pad");
    fastDump=rep.getStepAttributeBoolean(id_step,"file_fast_dump");
    newline=getNewLine(fileFormat);
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new TextFileField();
      outputFields[i].setName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setType(rep.getStepAttributeString(id_step,i,"field_type"));
      outputFields[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      outputFields[i].setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      outputFields[i].setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      outputFields[i].setGroupingSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      outputFields[i].setNullString(rep.getStepAttributeString(id_step,i,"field_nullif"));
      outputFields[i].setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      outputFields[i].setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
    }
    endedLine=rep.getStepAttributeString(id_step,"endedLine");
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
