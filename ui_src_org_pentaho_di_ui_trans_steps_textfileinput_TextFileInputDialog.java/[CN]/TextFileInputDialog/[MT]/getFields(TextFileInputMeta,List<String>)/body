{
  Vector<TextFileInputFieldInterface> fields=new Vector<TextFileInputFieldInterface>();
  int maxsize=0;
  for (  String row : rows) {
    int len=row.length();
    if (len > maxsize) {
      maxsize=len;
    }
  }
  int prevEnd=0;
  int dummynr=1;
  for (int i=0; i < info.inputFiles.inputFields.length; i++) {
    TextFileInputField f=info.inputFiles.inputFields[i];
    if (f.getPosition() != prevEnd) {
      TextFileInputField field=new TextFileInputField("Dummy" + dummynr,prevEnd,f.getPosition() - prevEnd);
      field.setIgnored(true);
      fields.add(field);
      dummynr++;
    }
    TextFileInputField field=new TextFileInputField(f.getName(),f.getPosition(),f.getLength());
    field.setType(f.getType());
    field.setIgnored(false);
    field.setFormat(f.getFormat());
    field.setPrecision(f.getPrecision());
    field.setTrimType(f.getTrimType());
    field.setDecimalSymbol(f.getDecimalSymbol());
    field.setGroupSymbol(f.getGroupSymbol());
    field.setCurrencySymbol(f.getCurrencySymbol());
    field.setRepeated(f.isRepeated());
    field.setNullString(f.getNullString());
    fields.add(field);
    prevEnd=field.getPosition() + field.getLength();
  }
  if (info.inputFiles.inputFields.length == 0) {
    TextFileInputField field=new TextFileInputField("Field1",0,maxsize);
    fields.add(field);
  }
 else {
    TextFileInputField f=info.inputFiles.inputFields[info.inputFiles.inputFields.length - 1];
    int pos=f.getPosition();
    int len=f.getLength();
    if (pos + len < maxsize) {
      TextFileInputField field=new TextFileInputField("Dummy" + dummynr,pos + len,maxsize - pos - len);
      field.setIgnored(true);
      fields.add(field);
    }
  }
  Collections.sort(fields);
  return fields;
}
