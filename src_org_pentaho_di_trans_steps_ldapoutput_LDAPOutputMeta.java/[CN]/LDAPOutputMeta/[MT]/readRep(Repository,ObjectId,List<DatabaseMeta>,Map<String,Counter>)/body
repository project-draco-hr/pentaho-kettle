{
  try {
    useAuthentication=rep.getStepAttributeBoolean(id_step,"useauthentication");
    Host=rep.getStepAttributeString(id_step,"host");
    userName=rep.getStepAttributeString(id_step,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"password"));
    port=rep.getStepAttributeString(id_step,"port");
    dnFieldName=rep.getStepAttributeString(id_step,"dnFieldName");
    failIfNotExist=rep.getStepAttributeBoolean(id_step,"failIfNotExist");
    operationType=getOperationTypeByCode(Const.NVL(rep.getStepAttributeString(id_step,"operationType"),""));
    multiValuedSeparator=rep.getStepAttributeString(id_step,"multivaluedseparator");
    searchBase=rep.getStepAttributeString(id_step,"searchBase");
    referralType=getReferralTypeByCode(Const.NVL(rep.getStepAttributeString(id_step,"referralType"),""));
    derefAliasesType=getDerefAliasesTypeByCode(Const.NVL(rep.getStepAttributeString(id_step,"referralType"),""));
    newDnFieldName=rep.getStepAttributeString(id_step,"newDnFieldName");
    oldDnFieldName=rep.getStepAttributeString(id_step,"oldDnFieldName");
    deleteRDN=rep.getStepAttributeBoolean(id_step,"deleteRDN");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      updateLookup[i]=rep.getStepAttributeString(id_step,i,"field_name");
      updateStream[i]=rep.getStepAttributeString(id_step,i,"field_attribut");
      update[i]=Boolean.valueOf(rep.getStepAttributeBoolean(id_step,i,"value_update",true));
    }
    protocol=rep.getStepAttributeString(id_step,"protocol");
    trustStorePath=rep.getStepAttributeString(id_step,"trustStorePath");
    trustStorePassword=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"trustStorePassword"));
    trustAllCertificates=rep.getStepAttributeBoolean(id_step,"trustAllCertificates");
    useCertificate=rep.getStepAttributeBoolean(id_step,"useCertificate");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LDAPOutputMeta.Exception.ErrorReadingRepository"),e);
  }
}
