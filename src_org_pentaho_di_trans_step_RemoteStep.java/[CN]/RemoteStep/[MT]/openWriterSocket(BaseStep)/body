{
  this.baseStep=baseStep;
  socket=serverSocket.accept();
  System.out.println("Server socket accepted for port [" + port + "]");
  outputStream=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(),5000));
  first=true;
  final RowSet rowSet=new RowSet(baseStep.getTransMeta().getSizeRowset());
  rowSet.setThreadNameFromToCopy(sourceStep,sourceStepCopyNr,targetStep,targetStepCopyNr);
  rowSet.setRemoteSlaveServerName(targetSlaveServerName);
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        Object[] rowData=baseStep.getRowFrom(rowSet);
        while (rowData != null && !baseStep.isStopped()) {
          sendRow(rowSet.getRowMeta(),rowData);
synchronized (rowSet) {
            rowData=baseStep.getRowFrom(rowSet);
          }
        }
      }
 catch (      Exception e) {
        LogWriter.getInstance().logError(baseStep.toString(),"Error writing to remote step",e);
        LogWriter.getInstance().logError(baseStep.toString(),Const.getStackTracker(e));
        baseStep.setErrors(1);
        baseStep.stopAll();
      }
 finally {
        try {
          socket.close();
        }
 catch (        IOException e) {
          LogWriter.getInstance().logError(baseStep.toString(),"Error closing client socket to remote step",e);
          baseStep.setErrors(1);
          baseStep.stopAll();
        }
        try {
          serverSocket.close();
        }
 catch (        IOException e) {
          LogWriter.getInstance().logError(baseStep.toString(),"Error closing client socket to remote step",e);
          baseStep.setErrors(1);
          baseStep.stopAll();
        }
      }
    }
  }
;
  new Thread(runnable).start();
  return rowSet;
}
