{
  socket=serverSocket.accept();
  baseStep.logDetailed("Server socket accepted for port [" + port + "]");
  if (compressingStreams) {
    gzipOutputStream=new GZIPOutputStream(socket.getOutputStream());
    bufferedOutputStream=new BufferedOutputStream(gzipOutputStream,bufferSize);
  }
 else {
    gzipOutputStream=null;
    bufferedOutputStream=new BufferedOutputStream(socket.getOutputStream(),bufferSize);
  }
  outputStream=new DataOutputStream(bufferedOutputStream);
  first=true;
  final RowSet rowSet=new RowSet(baseStep.getTransMeta().getSizeRowset());
  rowSet.setThreadNameFromToCopy(sourceStep,sourceStepCopyNr,targetStep,targetStepCopyNr);
  rowSet.setRemoteSlaveServerName(targetSlaveServerName);
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        Object[] rowData=baseStep.getRowFrom(rowSet);
        while (rowData != null && !baseStep.isStopped()) {
          sendRow(rowSet.getRowMeta(),rowData);
          rowData=baseStep.getRowFrom(rowSet);
        }
        if (gzipOutputStream != null)         gzipOutputStream.flush();
        bufferedOutputStream.flush();
        outputStream.flush();
      }
 catch (      Exception e) {
        baseStep.logError("Error writing to remote step",e);
        baseStep.setErrors(1);
        baseStep.stopAll();
      }
 finally {
        try {
          socket.close();
        }
 catch (        IOException e) {
          baseStep.logError("Error closing client socket to remote step",e);
          baseStep.setErrors(1);
          baseStep.stopAll();
        }
      }
    }
  }
;
  new Thread(runnable).start();
  return rowSet;
}
