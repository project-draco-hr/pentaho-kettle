{
  assertEquals("ALTER TABLE FOO ACTIVATE NOT LOGGED INITIALLY WITH EMPTY TABLE",nativeMeta.getTruncateTableStatement("FOO"));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR CLOB",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",nativeMeta.getMaxVARCHARLength() + 2,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR BLOB(" + (nativeMeta.getMaxVARCHARLength() + 2) + ")",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBinary("BAR",nativeMeta.getMaxVARCHARLength() + 2,10),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR BLOB",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBinary("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR CHAR(200) FOR BIT DATA",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBinary("BAR",200,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR VARCHAR(15)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR TIMESTAMP",nativeMeta.getAddColumnStatement("FOO",new ValueMetaDate("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR TIMESTAMP",nativeMeta.getAddColumnStatement("FOO",new ValueMetaTimestamp("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR CHARACTER(1)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBoolean("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR FLOAT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",0,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR INTEGER",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR DECIMAL(10)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",10,-7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR DECIMAL(22, 7)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",22,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR FLOAT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",-10,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR DECIMAL(5, 7)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",5,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR  UNKNOWN",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInternetAddress("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 0, INCREMENT BY 1, NOCACHE)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR"),"BAR",true,"",false));
  assertEquals("ALTER TABLE FOO ADD COLUMN BAR BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 0, INCREMENT BY 1, NOCACHE)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",26,8),"BAR",true,"",false));
  String lineSep=System.getProperty("line.separator");
  assertEquals("ALTER TABLE FOO DROP COLUMN BAR" + lineSep,nativeMeta.getDropColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",true));
  assertEquals("ALTER TABLE FOO DROP COLUMN BAR" + lineSep + ";"+ lineSep+ "ALTER TABLE FOO ADD COLUMN BAR VARCHAR(15)",nativeMeta.getModifyColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",true));
  assertEquals("LOCK TABLE FOO IN SHARE MODE;" + lineSep + "LOCK TABLE BAR IN SHARE MODE;"+ lineSep,nativeMeta.getSQLLockTables(new String[]{"FOO","BAR"}));
  assertNull(nativeMeta.getSQLUnlockTables(new String[]{"FOO","BAR"}));
  assertEquals("SELECT SEQNAME FROM SYSCAT.SEQUENCES",nativeMeta.getSQLListOfSequences());
  assertEquals("SELECT * FROM SYSCAT.SEQUENCES WHERE SEQNAME = 'FOO'",nativeMeta.getSQLSequenceExists("FOO"));
  assertEquals("SELECT * FROM SYSCAT.SEQUENCES WHERE SEQSCHEMA = 'FOO' AND SEQNAME = 'BAR'",nativeMeta.getSQLSequenceExists("FOO.BAR"));
  assertEquals("SELECT PREVIOUS VALUE FOR FOO FROM SYSIBM.SYSDUMMY1",nativeMeta.getSQLCurrentSequenceValue("FOO"));
  assertEquals("SELECT NEXT VALUE FOR FOO FROM SYSIBM.SYSDUMMY1",nativeMeta.getSQLNextSequenceValue("FOO"));
  assertEquals("insert into FOO(FOOVERSION) values (1)",nativeMeta.getSQLInsertAutoIncUnknownDimensionRow("FOO","FOOKEY","FOOVERSION"));
}
