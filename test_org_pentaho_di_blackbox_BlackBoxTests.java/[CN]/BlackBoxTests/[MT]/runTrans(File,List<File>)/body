{
  System.out.println("Running: " + getPath(transFile));
  LogWriter log;
  log=LogWriter.getInstance(LogWriter.LOG_LEVEL_ERROR);
  Log4jBufferAppender bufferAppender=CentralLogStore.getAppender();
  log.addAppender(bufferAppender);
  LogChannelInterface logChannel=new LogChannel("BlackBoxTest [" + transFile.toString() + "]");
  int failsIn=failures;
  Result result=new Result();
  try {
    currentFile=transFile;
    if (!transFile.exists()) {
      logChannel.logError("Transformation does not exist: " + getPath(transFile));
      addFailure("Transformation does not exist: " + getPath(transFile));
    }
    if (expectedFiles.isEmpty()) {
      fail("No expected output files found: " + getPath(transFile));
      addFailure("No expected output files found: " + getPath(transFile));
    }
    try {
      result=runTrans(transFile.getAbsolutePath(),logChannel);
      for (int i=0; i < expectedFiles.size(); i++) {
        File expected=expectedFiles.get(i);
        String actualFile=expected.getAbsolutePath();
        actualFile=actualFile.replaceFirst(".expected.",".actual.");
        actualFile=actualFile.replaceFirst(".expected_" + i + ".",".actual_" + i + ".");
        File actual=new File(actualFile);
        if (!result.getResult()) {
          fileCompare(expected,actual,logChannel);
        }
      }
    }
 catch (    KettleException ke) {
    }
catch (    AssertionFailedError failure) {
    }
catch (    Throwable t) {
    }
  }
 catch (  AssertionFailedError failure) {
    System.err.println(failure.getMessage());
    result.setResult(false);
  }
  log.removeAppender(bufferAppender);
  if (!result.getResult() && expectedFiles.size() == 1) {
    File expected=expectedFiles.get(0);
    String logStr=CentralLogStore.getAppender().getBuffer(result.getLogChannelId(),true).toString();
    String tmpFileName=transFile.getAbsolutePath().substring(0,transFile.getAbsolutePath().length() - 4) + "-log.txt";
    File logFile=new File(tmpFileName);
    writeLog(logFile,logStr);
    try {
      if (fileCompare(expected,logFile,logChannel)) {
        failures=failsIn;
      }
    }
 catch (    IOException e) {
      addFailure("Could not compare log files: " + getPath(logFile) + ""+ e.getMessage());
      fail("Could not compare log files: " + getPath(logFile) + ""+ e.getMessage());
    }
  }
}
