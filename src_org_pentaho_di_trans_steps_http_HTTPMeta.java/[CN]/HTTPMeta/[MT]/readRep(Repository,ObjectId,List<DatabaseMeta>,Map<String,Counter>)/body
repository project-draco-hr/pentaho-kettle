{
  try {
    url=rep.getStepAttributeString(id_step,"url");
    urlInField=rep.getStepAttributeBoolean(id_step,"urlInField");
    urlField=rep.getStepAttributeString(id_step,"urlField");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    httpLogin=rep.getStepAttributeString(id_step,"httpLogin");
    httpPassword=rep.getStepAttributeString(id_step,"httpPassword");
    proxyHost=rep.getStepAttributeString(id_step,"proxyHost");
    proxyPort=rep.getStepAttributeString(id_step,"proxyPort");
    int nrargs=rep.countNrStepAttributes(id_step,"arg_name");
    int nrheaders=rep.countNrStepAttributes(id_step,"header_name");
    allocate(nrargs,nrheaders);
    for (int i=0; i < nrargs; i++) {
      argumentField[i]=rep.getStepAttributeString(id_step,i,"arg_name");
      argumentParameter[i]=rep.getStepAttributeString(id_step,i,"arg_parameter");
    }
    for (int i=0; i < nrheaders; i++) {
      headerField[i]=rep.getStepAttributeString(id_step,i,"header_name");
      headerParameter[i]=rep.getStepAttributeString(id_step,i,"header_parameter");
    }
    fieldName=rep.getStepAttributeString(id_step,"result_name");
    resultCodeFieldName=rep.getStepAttributeString(id_step,"result_code");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTPMeta.Exception.UnexpectedErrorReadingStepInfo"),e);
  }
}
