{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      closeMailConnection();
      input.setChanged();
    }
  }
;
  SelectionListener lsSelection=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      closeMailConnection();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"MailInputdialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"MailInputdialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(BaseMessages.getString(PKG,"MailInput.Tab.General.Label"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout generalLayout=new FormLayout();
  generalLayout.marginWidth=3;
  generalLayout.marginHeight=3;
  wGeneralComp.setLayout(generalLayout);
  wServerSettings=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wServerSettings);
  wServerSettings.setText(BaseMessages.getString(PKG,"MailInput.ServerSettings.Group.Label"));
  FormLayout ServerSettingsgroupLayout=new FormLayout();
  ServerSettingsgroupLayout.marginWidth=10;
  ServerSettingsgroupLayout.marginHeight=10;
  wServerSettings.setLayout(ServerSettingsgroupLayout);
  wlServerName=new Label(wServerSettings,SWT.RIGHT);
  wlServerName.setText(BaseMessages.getString(PKG,"MailInput.Server.Label"));
  props.setLook(wlServerName);
  fdlServerName=new FormData();
  fdlServerName.left=new FormAttachment(0,0);
  fdlServerName.top=new FormAttachment(0,2 * margin);
  fdlServerName.right=new FormAttachment(middle,-margin);
  wlServerName.setLayoutData(fdlServerName);
  wServerName=new TextVar(transMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wServerName);
  wServerName.addModifyListener(lsMod);
  fdServerName=new FormData();
  fdServerName.left=new FormAttachment(middle,0);
  fdServerName.top=new FormAttachment(0,2 * margin);
  fdServerName.right=new FormAttachment(100,0);
  wServerName.setLayoutData(fdServerName);
  wlUseSSL=new Label(wServerSettings,SWT.RIGHT);
  wlUseSSL.setText(BaseMessages.getString(PKG,"MailInput.UseSSLMails.Label"));
  props.setLook(wlUseSSL);
  fdlUseSSL=new FormData();
  fdlUseSSL.left=new FormAttachment(0,0);
  fdlUseSSL.top=new FormAttachment(wServerName,margin);
  fdlUseSSL.right=new FormAttachment(middle,-margin);
  wlUseSSL.setLayoutData(fdlUseSSL);
  wUseSSL=new Button(wServerSettings,SWT.CHECK);
  props.setLook(wUseSSL);
  fdUseSSL=new FormData();
  wUseSSL.setToolTipText(BaseMessages.getString(PKG,"MailInput.UseSSLMails.Tooltip"));
  fdUseSSL.left=new FormAttachment(middle,0);
  fdUseSSL.top=new FormAttachment(wServerName,margin);
  fdUseSSL.right=new FormAttachment(100,0);
  wUseSSL.setLayoutData(fdUseSSL);
  wUseSSL.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      closeMailConnection();
      refreshPort(true);
    }
  }
);
  wlPort=new Label(wServerSettings,SWT.RIGHT);
  wlPort.setText(BaseMessages.getString(PKG,"MailInput.SSLPort.Label"));
  props.setLook(wlPort);
  fdlPort=new FormData();
  fdlPort.left=new FormAttachment(0,0);
  fdlPort.top=new FormAttachment(wUseSSL,margin);
  fdlPort.right=new FormAttachment(middle,-margin);
  wlPort.setLayoutData(fdlPort);
  wPort=new TextVar(transMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPort);
  wPort.setToolTipText(BaseMessages.getString(PKG,"MailInput.SSLPort.Tooltip"));
  wPort.addModifyListener(lsMod);
  fdPort=new FormData();
  fdPort.left=new FormAttachment(middle,0);
  fdPort.top=new FormAttachment(wUseSSL,margin);
  fdPort.right=new FormAttachment(100,0);
  wPort.setLayoutData(fdPort);
  wlUserName=new Label(wServerSettings,SWT.RIGHT);
  wlUserName.setText(BaseMessages.getString(PKG,"MailInput.Username.Label"));
  props.setLook(wlUserName);
  fdlUserName=new FormData();
  fdlUserName.left=new FormAttachment(0,0);
  fdlUserName.top=new FormAttachment(wPort,margin);
  fdlUserName.right=new FormAttachment(middle,-margin);
  wlUserName.setLayoutData(fdlUserName);
  wUserName=new TextVar(transMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wUserName);
  wUserName.setToolTipText(BaseMessages.getString(PKG,"MailInput.Username.Tooltip"));
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(middle,0);
  fdUserName.top=new FormAttachment(wPort,margin);
  fdUserName.right=new FormAttachment(100,0);
  wUserName.setLayoutData(fdUserName);
  wlPassword=new Label(wServerSettings,SWT.RIGHT);
  wlPassword.setText(BaseMessages.getString(PKG,"MailInput.Password.Label"));
  props.setLook(wlPassword);
  fdlPassword=new FormData();
  fdlPassword.left=new FormAttachment(0,0);
  fdlPassword.top=new FormAttachment(wUserName,margin);
  fdlPassword.right=new FormAttachment(middle,-margin);
  wlPassword.setLayoutData(fdlPassword);
  wPassword=new TextVar(transMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(middle,0);
  fdPassword.top=new FormAttachment(wUserName,margin);
  fdPassword.right=new FormAttachment(100,0);
  wPassword.setLayoutData(fdPassword);
  wPassword.getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkPasswordVisible();
    }
  }
);
  wlUseProxy=new Label(wServerSettings,SWT.RIGHT);
  wlUseProxy.setText(BaseMessages.getString(PKG,"MailInput.UseProxyMails.Label"));
  props.setLook(wlUseProxy);
  fdlUseProxy=new FormData();
  fdlUseProxy.left=new FormAttachment(0,0);
  fdlUseProxy.top=new FormAttachment(wPassword,2 * margin);
  fdlUseProxy.right=new FormAttachment(middle,-margin);
  wlUseProxy.setLayoutData(fdlUseProxy);
  wUseProxy=new Button(wServerSettings,SWT.CHECK);
  props.setLook(wUseProxy);
  fdUseProxy=new FormData();
  wUseProxy.setToolTipText(BaseMessages.getString(PKG,"MailInput.UseProxyMails.Tooltip"));
  fdUseProxy.left=new FormAttachment(middle,0);
  fdUseProxy.top=new FormAttachment(wPassword,2 * margin);
  fdUseProxy.right=new FormAttachment(100,0);
  wUseProxy.setLayoutData(fdUseProxy);
  wUseProxy.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setUserProxy();
      input.setChanged();
    }
  }
);
  wlProxyUsername=new Label(wServerSettings,SWT.RIGHT);
  wlProxyUsername.setText(BaseMessages.getString(PKG,"MailInput.ProxyUsername.Label"));
  wProxyUsername=new TextVar(transMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wProxyUsername.setToolTipText(BaseMessages.getString(PKG,"MailInput.ProxyUsername.Tooltip"));
  wProxyUsername.addModifyListener(lsMod);
  addLabelInputPairBelow(wlProxyUsername,wProxyUsername,wUseProxy);
  Label wlUseBatch=new Label(wServerSettings,SWT.RIGHT);
  wlUseBatch.setText(BaseMessages.getString(PKG,"MailInputDialog.UseBatch.Label"));
  wUseBatch=new Button(wServerSettings,SWT.CHECK);
  wUseBatch.setToolTipText(BaseMessages.getString(PKG,"MailInputDialog.UseBatch.Tooltip"));
  wUseBatch.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setBatchSettingsEnabled();
    }
  }
);
  addLabelInputPairBelow(wlUseBatch,wUseBatch,wProxyUsername);
  wlIgnoreFieldErrors=new Label(wServerSettings,SWT.RIGHT);
  wlIgnoreFieldErrors.setText(BaseMessages.getString(PKG,"MailInput.IgnoreFieldErrors.Label"));
  wIgnoreFieldErrors=new Button(wServerSettings,SWT.CHECK);
  wIgnoreFieldErrors.setToolTipText(BaseMessages.getString(PKG,"MailInput.IgnoreFieldErrors.Tooltip"));
  addLabelInputPairBelow(wlIgnoreFieldErrors,wIgnoreFieldErrors,wUseBatch);
  wlProtocol=new Label(wServerSettings,SWT.RIGHT);
  wlProtocol.setText(BaseMessages.getString(PKG,"MailInput.Protocol.Label"));
  wProtocol=new CCombo(wServerSettings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wProtocol.setItems(MailConnectionMeta.protocolCodes);
  wProtocol.select(0);
  wProtocol.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshProtocol(true);
    }
  }
);
  addLabelInputPairBelow(wlProtocol,wProtocol,wIgnoreFieldErrors);
  wTest=new Button(wServerSettings,SWT.PUSH);
  wTest.setText(BaseMessages.getString(PKG,"MailInput.TestConnection.Label"));
  props.setLook(wTest);
  fdTest=new FormData();
  wTest.setToolTipText(BaseMessages.getString(PKG,"MailInput.TestConnection.Tooltip"));
  fdTest.top=new FormAttachment(wProtocol,margin);
  fdTest.right=new FormAttachment(100,0);
  wTest.setLayoutData(fdTest);
  fdServerSettings=new FormData();
  fdServerSettings.left=new FormAttachment(0,margin);
  fdServerSettings.top=new FormAttachment(wProtocol,margin);
  fdServerSettings.right=new FormAttachment(100,-margin);
  wServerSettings.setLayoutData(fdServerSettings);
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(wStepname,0);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  props.setLook(wGeneralComp);
  wSettingsTab=new CTabItem(wTabFolder,SWT.NONE);
  wSettingsTab.setText(BaseMessages.getString(PKG,"MailInput.Tab.Pop.Label"));
  wSettingsComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wSettingsComp);
  FormLayout PopLayout=new FormLayout();
  PopLayout.marginWidth=3;
  PopLayout.marginHeight=3;
  wSettingsComp.setLayout(PopLayout);
  wlPOP3Message=new Label(wSettingsComp,SWT.RIGHT);
  wlPOP3Message.setText(BaseMessages.getString(PKG,"MailInput.POP3Message.Label"));
  props.setLook(wlPOP3Message);
  fdlPOP3Message=new FormData();
  fdlPOP3Message.left=new FormAttachment(0,margin);
  fdlPOP3Message.top=new FormAttachment(0,3 * margin);
  wlPOP3Message.setLayoutData(fdlPOP3Message);
  wlPOP3Message.setForeground(GUIResource.getInstance().getColorOrange());
  wPOP3Settings=new Group(wSettingsComp,SWT.SHADOW_NONE);
  props.setLook(wPOP3Settings);
  wPOP3Settings.setText(BaseMessages.getString(PKG,"MailInput.POP3Settings.Group.Label"));
  FormLayout POP3SettingsgroupLayout=new FormLayout();
  POP3SettingsgroupLayout.marginWidth=10;
  POP3SettingsgroupLayout.marginHeight=10;
  wPOP3Settings.setLayout(POP3SettingsgroupLayout);
  wlListmails=new Label(wPOP3Settings,SWT.RIGHT);
  wlListmails.setText(BaseMessages.getString(PKG,"MailInput.Listmails.Label"));
  props.setLook(wlListmails);
  fdlListmails=new FormData();
  fdlListmails.left=new FormAttachment(0,0);
  fdlListmails.right=new FormAttachment(middle,0);
  fdlListmails.top=new FormAttachment(wlPOP3Message,2 * margin);
  wlListmails.setLayoutData(fdlListmails);
  wListmails=new CCombo(wPOP3Settings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wListmails.add(BaseMessages.getString(PKG,"MailInput.RetrieveAllMails.Label"));
  wListmails.add(BaseMessages.getString(PKG,"MailInput.RetrieveUnreadMails.Label"));
  wListmails.add(BaseMessages.getString(PKG,"MailInput.RetrieveFirstMails.Label"));
  wListmails.select(0);
  props.setLook(wListmails);
  fdListmails=new FormData();
  fdListmails.left=new FormAttachment(middle,0);
  fdListmails.top=new FormAttachment(wlPOP3Message,2 * margin);
  fdListmails.right=new FormAttachment(100,0);
  wListmails.setLayoutData(fdListmails);
  wListmails.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      chooseListMails();
    }
  }
);
  wlFirstmails=new Label(wPOP3Settings,SWT.RIGHT);
  wlFirstmails.setText(BaseMessages.getString(PKG,"MailInput.Firstmails.Label"));
  props.setLook(wlFirstmails);
  fdlFirstmails=new FormData();
  fdlFirstmails.left=new FormAttachment(0,0);
  fdlFirstmails.right=new FormAttachment(middle,-margin);
  fdlFirstmails.top=new FormAttachment(wListmails,margin);
  wlFirstmails.setLayoutData(fdlFirstmails);
  wFirstmails=new TextVar(transMeta,wPOP3Settings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFirstmails);
  wFirstmails.addModifyListener(lsMod);
  fdFirstmails=new FormData();
  fdFirstmails.left=new FormAttachment(middle,0);
  fdFirstmails.top=new FormAttachment(wListmails,margin);
  fdFirstmails.right=new FormAttachment(100,0);
  wFirstmails.setLayoutData(fdFirstmails);
  fdPOP3Settings=new FormData();
  fdPOP3Settings.left=new FormAttachment(0,margin);
  fdPOP3Settings.top=new FormAttachment(wlPOP3Message,2 * margin);
  fdPOP3Settings.right=new FormAttachment(100,-margin);
  wPOP3Settings.setLayoutData(fdPOP3Settings);
  wIMAPSettings=new Group(wSettingsComp,SWT.SHADOW_NONE);
  props.setLook(wIMAPSettings);
  wIMAPSettings.setText(BaseMessages.getString(PKG,"MailInput.IMAPSettings.Groupp.Label"));
  FormLayout IMAPSettingsgroupLayout=new FormLayout();
  IMAPSettingsgroupLayout.marginWidth=10;
  IMAPSettingsgroupLayout.marginHeight=10;
  wIMAPSettings.setLayout(IMAPSettingsgroupLayout);
  wldynamicFolder=new Label(wIMAPSettings,SWT.RIGHT);
  wldynamicFolder.setText(BaseMessages.getString(PKG,"MailInput.dynamicFolder.Label"));
  props.setLook(wldynamicFolder);
  fdldynamicFolder=new FormData();
  fdldynamicFolder.left=new FormAttachment(0,0);
  fdldynamicFolder.top=new FormAttachment(0,margin);
  fdldynamicFolder.right=new FormAttachment(middle,-margin);
  wldynamicFolder.setLayoutData(fdldynamicFolder);
  wdynamicFolder=new Button(wIMAPSettings,SWT.CHECK);
  props.setLook(wdynamicFolder);
  wdynamicFolder.setToolTipText(BaseMessages.getString(PKG,"MailInput.dynamicFolder.Tooltip"));
  fddynamicFolder=new FormData();
  fddynamicFolder.left=new FormAttachment(middle,0);
  fddynamicFolder.top=new FormAttachment(0,margin);
  wdynamicFolder.setLayoutData(fddynamicFolder);
  SelectionAdapter lsxmlstream=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      activedynamicFolder();
      input.setChanged();
    }
  }
;
  wdynamicFolder.addSelectionListener(lsxmlstream);
  wlFolderField=new Label(wIMAPSettings,SWT.RIGHT);
  wlFolderField.setText(BaseMessages.getString(PKG,"MailInput.wlFolderField.Label"));
  props.setLook(wlFolderField);
  fdlFolderField=new FormData();
  fdlFolderField.left=new FormAttachment(0,0);
  fdlFolderField.top=new FormAttachment(wdynamicFolder,margin);
  fdlFolderField.right=new FormAttachment(middle,-margin);
  wlFolderField.setLayoutData(fdlFolderField);
  wFolderField=new CCombo(wIMAPSettings,SWT.BORDER | SWT.READ_ONLY);
  wFolderField.setEditable(true);
  props.setLook(wFolderField);
  wFolderField.addModifyListener(lsMod);
  fdFolderField=new FormData();
  fdFolderField.left=new FormAttachment(middle,0);
  fdFolderField.top=new FormAttachment(wdynamicFolder,margin);
  fdFolderField.right=new FormAttachment(100,-margin);
  wFolderField.setLayoutData(fdFolderField);
  wFolderField.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      setFolderField();
    }
  }
);
  wSelectFolder=new Button(wIMAPSettings,SWT.PUSH);
  wSelectFolder.setImage(GUIResource.getInstance().getImageBol());
  wSelectFolder.setToolTipText(BaseMessages.getString(PKG,"MailInput.SelectFolderConnection.Label"));
  props.setLook(wSelectFolder);
  fdSelectFolder=new FormData();
  wSelectFolder.setToolTipText(BaseMessages.getString(PKG,"MailInput.SelectFolderConnection.Tooltip"));
  fdSelectFolder.top=new FormAttachment(wFolderField,margin);
  fdSelectFolder.right=new FormAttachment(100,0);
  wSelectFolder.setLayoutData(fdSelectFolder);
  wTestIMAPFolder=new Button(wIMAPSettings,SWT.PUSH);
  wTestIMAPFolder.setText(BaseMessages.getString(PKG,"MailInput.TestIMAPFolderConnection.Label"));
  props.setLook(wTestIMAPFolder);
  fdTestIMAPFolder=new FormData();
  wTestIMAPFolder.setToolTipText(BaseMessages.getString(PKG,"MailInput.TestIMAPFolderConnection.Tooltip"));
  fdTestIMAPFolder.top=new FormAttachment(wFolderField,margin);
  fdTestIMAPFolder.right=new FormAttachment(wSelectFolder,-margin);
  wTestIMAPFolder.setLayoutData(fdTestIMAPFolder);
  wlIMAPFolder=new Label(wIMAPSettings,SWT.RIGHT);
  wlIMAPFolder.setText(BaseMessages.getString(PKG,"MailInput.IMAPFolder.Label"));
  props.setLook(wlIMAPFolder);
  fdlIMAPFolder=new FormData();
  fdlIMAPFolder.left=new FormAttachment(0,0);
  fdlIMAPFolder.top=new FormAttachment(wFolderField,margin);
  fdlIMAPFolder.right=new FormAttachment(middle,-margin);
  wlIMAPFolder.setLayoutData(fdlIMAPFolder);
  wIMAPFolder=new TextVar(transMeta,wIMAPSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wIMAPFolder);
  wIMAPFolder.setToolTipText(BaseMessages.getString(PKG,"MailInput.IMAPFolder.Tooltip"));
  wIMAPFolder.addModifyListener(lsMod);
  fdIMAPFolder=new FormData();
  fdIMAPFolder.left=new FormAttachment(middle,0);
  fdIMAPFolder.top=new FormAttachment(wFolderField,margin);
  fdIMAPFolder.right=new FormAttachment(wTestIMAPFolder,-margin);
  wIMAPFolder.setLayoutData(fdIMAPFolder);
  wlIncludeSubFolders=new Label(wIMAPSettings,SWT.RIGHT);
  wlIncludeSubFolders.setText(BaseMessages.getString(PKG,"MailInput.IncludeSubFoldersMails.Label"));
  props.setLook(wlIncludeSubFolders);
  fdlIncludeSubFolders=new FormData();
  fdlIncludeSubFolders.left=new FormAttachment(0,0);
  fdlIncludeSubFolders.top=new FormAttachment(wIMAPFolder,margin);
  fdlIncludeSubFolders.right=new FormAttachment(middle,-margin);
  wlIncludeSubFolders.setLayoutData(fdlIncludeSubFolders);
  wIncludeSubFolders=new Button(wIMAPSettings,SWT.CHECK);
  props.setLook(wIncludeSubFolders);
  fdIncludeSubFolders=new FormData();
  wIncludeSubFolders.setToolTipText(BaseMessages.getString(PKG,"MailInput.IncludeSubFoldersMails.Tooltip"));
  fdIncludeSubFolders.left=new FormAttachment(middle,0);
  fdIncludeSubFolders.top=new FormAttachment(wIMAPFolder,margin);
  fdIncludeSubFolders.right=new FormAttachment(100,0);
  wIncludeSubFolders.setLayoutData(fdIncludeSubFolders);
  wIncludeSubFolders.addSelectionListener(lsSelection);
  wlIMAPListmails=new Label(wIMAPSettings,SWT.RIGHT);
  wlIMAPListmails.setText(BaseMessages.getString(PKG,"MailInput.IMAPListmails.Label"));
  props.setLook(wlIMAPListmails);
  fdlIMAPListmails=new FormData();
  fdlIMAPListmails.left=new FormAttachment(0,0);
  fdlIMAPListmails.right=new FormAttachment(middle,-margin);
  fdlIMAPListmails.top=new FormAttachment(wIncludeSubFolders,margin);
  wlIMAPListmails.setLayoutData(fdlIMAPListmails);
  wIMAPListmails=new CCombo(wIMAPSettings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wIMAPListmails.setItems(MailConnectionMeta.valueIMAPListDesc);
  wIMAPListmails.select(0);
  props.setLook(wIMAPListmails);
  fdIMAPListmails=new FormData();
  fdIMAPListmails.left=new FormAttachment(middle,0);
  fdIMAPListmails.top=new FormAttachment(wIncludeSubFolders,margin);
  fdIMAPListmails.right=new FormAttachment(100,0);
  wIMAPListmails.setLayoutData(fdIMAPListmails);
  wIMAPListmails.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  wlIMAPFirstmails=new Label(wIMAPSettings,SWT.RIGHT);
  wlIMAPFirstmails.setText(BaseMessages.getString(PKG,"MailInput.IMAPFirstmails.Label"));
  props.setLook(wlIMAPFirstmails);
  fdlIMAPFirstmails=new FormData();
  fdlIMAPFirstmails.left=new FormAttachment(0,0);
  fdlIMAPFirstmails.right=new FormAttachment(middle,-margin);
  fdlIMAPFirstmails.top=new FormAttachment(wIMAPListmails,margin);
  wlIMAPFirstmails.setLayoutData(fdlIMAPFirstmails);
  wIMAPFirstmails=new TextVar(transMeta,wIMAPSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wIMAPFirstmails);
  wIMAPFirstmails.addModifyListener(lsMod);
  fdIMAPFirstmails=new FormData();
  fdIMAPFirstmails.left=new FormAttachment(middle,0);
  fdIMAPFirstmails.top=new FormAttachment(wIMAPListmails,margin);
  fdIMAPFirstmails.right=new FormAttachment(100,0);
  wIMAPFirstmails.setLayoutData(fdIMAPFirstmails);
  fdIMAPSettings=new FormData();
  fdIMAPSettings.left=new FormAttachment(0,margin);
  fdIMAPSettings.top=new FormAttachment(wPOP3Settings,2 * margin);
  fdIMAPSettings.right=new FormAttachment(100,-margin);
  wIMAPSettings.setLayoutData(fdIMAPSettings);
  wBatchSettingsGroup=createGroup(wSettingsComp,wIMAPSettings,BaseMessages.getString(PKG,"MailInputDialog.BatchSettingsGroup.Label"));
  Label wlBatchSize=new Label(wBatchSettingsGroup,SWT.RIGHT);
  wlBatchSize.setText(BaseMessages.getString(PKG,"MailInputDialog.BatchSize.Label"));
  wBatchSize=new Text(wBatchSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  addLabelInputPairBelow(wlBatchSize,wBatchSize,wBatchSettingsGroup);
  Label wlStartMessage=new Label(wBatchSettingsGroup,SWT.RIGHT);
  wlStartMessage.setText(BaseMessages.getString(PKG,"MailInputDialog.StartMessage.Label"));
  wStartMessage=new TextVar(transMeta,wBatchSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  addLabelInputPairBelow(wlStartMessage,wStartMessage,wBatchSize);
  Label wlEndMessage=new Label(wBatchSettingsGroup,SWT.RIGHT);
  wlEndMessage.setText(BaseMessages.getString(PKG,"MailInputDialog.EndMessage.Label"));
  wEndMessage=new TextVar(transMeta,wBatchSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  addLabelInputPairBelow(wlEndMessage,wEndMessage,wStartMessage);
  fdSettingsComp=new FormData();
  fdSettingsComp.left=new FormAttachment(0,0);
  fdSettingsComp.top=new FormAttachment(wStepname,0);
  fdSettingsComp.right=new FormAttachment(100,0);
  fdSettingsComp.bottom=new FormAttachment(100,0);
  wSettingsComp.setLayoutData(fdSettingsComp);
  wSettingsComp.layout();
  wSettingsTab.setControl(wSettingsComp);
  props.setLook(wSettingsComp);
  wSearchTab=new CTabItem(wTabFolder,SWT.NONE);
  wSearchTab.setText(BaseMessages.getString(PKG,"MailInput.Tab.Search.Label"));
  wSearchComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wSearchComp);
  FormLayout searchLayout=new FormLayout();
  searchLayout.marginWidth=3;
  searchLayout.marginHeight=3;
  wSearchComp.setLayout(searchLayout);
  wHeader=new Group(wSearchComp,SWT.SHADOW_NONE);
  props.setLook(wHeader);
  wHeader.setText(BaseMessages.getString(PKG,"MailInput.Header.Group.Label"));
  FormLayout HeadergroupLayout=new FormLayout();
  HeadergroupLayout.marginWidth=10;
  HeadergroupLayout.marginHeight=10;
  wHeader.setLayout(HeadergroupLayout);
  wNegateSender=new Button(wHeader,SWT.CHECK);
  props.setLook(wNegateSender);
  fdNegateSender=new FormData();
  wNegateSender.setToolTipText(BaseMessages.getString(PKG,"MailInput.NegateSender.Tooltip"));
  fdNegateSender.top=new FormAttachment(0,margin);
  fdNegateSender.right=new FormAttachment(100,-margin);
  wNegateSender.setLayoutData(fdNegateSender);
  wlSender=new Label(wHeader,SWT.RIGHT);
  wlSender.setText(BaseMessages.getString(PKG,"MailInput.wSender.Label"));
  props.setLook(wlSender);
  fdlSender=new FormData();
  fdlSender.left=new FormAttachment(0,0);
  fdlSender.top=new FormAttachment(0,margin);
  fdlSender.right=new FormAttachment(middle,-margin);
  wlSender.setLayoutData(fdlSender);
  wSender=new TextVar(transMeta,wHeader,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSender);
  wSender.addModifyListener(lsMod);
  fdSender=new FormData();
  fdSender.left=new FormAttachment(middle,0);
  fdSender.top=new FormAttachment(0,margin);
  fdSender.right=new FormAttachment(wNegateSender,-margin);
  wSender.setLayoutData(fdSender);
  wNegateReceipient=new Button(wHeader,SWT.CHECK);
  props.setLook(wNegateReceipient);
  fdNegateReceipient=new FormData();
  wNegateReceipient.setToolTipText(BaseMessages.getString(PKG,"MailInput.NegateReceipient.Tooltip"));
  fdNegateReceipient.top=new FormAttachment(wSender,margin);
  fdNegateReceipient.right=new FormAttachment(100,-margin);
  wNegateReceipient.setLayoutData(fdNegateReceipient);
  wlReceipient=new Label(wHeader,SWT.RIGHT);
  wlReceipient.setText(BaseMessages.getString(PKG,"MailInput.Receipient.Label"));
  props.setLook(wlReceipient);
  fdlReceipient=new FormData();
  fdlReceipient.left=new FormAttachment(0,0);
  fdlReceipient.top=new FormAttachment(wSender,margin);
  fdlReceipient.right=new FormAttachment(middle,-margin);
  wlReceipient.setLayoutData(fdlReceipient);
  wReceipient=new TextVar(transMeta,wHeader,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wReceipient);
  wReceipient.addModifyListener(lsMod);
  fdReceipient=new FormData();
  fdReceipient.left=new FormAttachment(middle,0);
  fdReceipient.top=new FormAttachment(wSender,margin);
  fdReceipient.right=new FormAttachment(wNegateReceipient,-margin);
  wReceipient.setLayoutData(fdReceipient);
  wNegateSubject=new Button(wHeader,SWT.CHECK);
  props.setLook(wNegateSubject);
  fdNegateSubject=new FormData();
  wNegateSubject.setToolTipText(BaseMessages.getString(PKG,"MailInput.NegateSubject.Tooltip"));
  fdNegateSubject.top=new FormAttachment(wReceipient,margin);
  fdNegateSubject.right=new FormAttachment(100,-margin);
  wNegateSubject.setLayoutData(fdNegateSubject);
  wlSubject=new Label(wHeader,SWT.RIGHT);
  wlSubject.setText(BaseMessages.getString(PKG,"MailInput.Subject.Label"));
  props.setLook(wlSubject);
  fdlSubject=new FormData();
  fdlSubject.left=new FormAttachment(0,0);
  fdlSubject.top=new FormAttachment(wReceipient,margin);
  fdlSubject.right=new FormAttachment(middle,-margin);
  wlSubject.setLayoutData(fdlSubject);
  wSubject=new TextVar(transMeta,wHeader,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSubject);
  wSubject.addModifyListener(lsMod);
  fdSubject=new FormData();
  fdSubject.left=new FormAttachment(middle,0);
  fdSubject.top=new FormAttachment(wReceipient,margin);
  fdSubject.right=new FormAttachment(wNegateSubject,-margin);
  wSubject.setLayoutData(fdSubject);
  fdHeader=new FormData();
  fdHeader.left=new FormAttachment(0,margin);
  fdHeader.top=new FormAttachment(wReceipient,2 * margin);
  fdHeader.right=new FormAttachment(100,-margin);
  wHeader.setLayoutData(fdHeader);
  wReceivedDate=new Group(wSearchComp,SWT.SHADOW_NONE);
  props.setLook(wReceivedDate);
  wReceivedDate.setText(BaseMessages.getString(PKG,"MailInput.ReceivedDate.Group.Label"));
  FormLayout ReceivedDategroupLayout=new FormLayout();
  ReceivedDategroupLayout.marginWidth=10;
  ReceivedDategroupLayout.marginHeight=10;
  wReceivedDate.setLayout(ReceivedDategroupLayout);
  wNegateReceivedDate=new Button(wReceivedDate,SWT.CHECK);
  props.setLook(wNegateReceivedDate);
  fdNegateReceivedDate=new FormData();
  wNegateReceivedDate.setToolTipText(BaseMessages.getString(PKG,"MailInput.NegateReceivedDate.Tooltip"));
  fdNegateReceivedDate.top=new FormAttachment(wHeader,margin);
  fdNegateReceivedDate.right=new FormAttachment(100,-margin);
  wNegateReceivedDate.setLayoutData(fdNegateReceivedDate);
  wlConditionOnReceivedDate=new Label(wReceivedDate,SWT.RIGHT);
  wlConditionOnReceivedDate.setText(BaseMessages.getString(PKG,"MailInput.ConditionOnReceivedDate.Label"));
  props.setLook(wlConditionOnReceivedDate);
  fdlConditionOnReceivedDate=new FormData();
  fdlConditionOnReceivedDate.left=new FormAttachment(0,0);
  fdlConditionOnReceivedDate.right=new FormAttachment(middle,-margin);
  fdlConditionOnReceivedDate.top=new FormAttachment(wHeader,margin);
  wlConditionOnReceivedDate.setLayoutData(fdlConditionOnReceivedDate);
  wConditionOnReceivedDate=new CCombo(wReceivedDate,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wConditionOnReceivedDate.setItems(MailConnectionMeta.conditionDateDesc);
  wConditionOnReceivedDate.select(0);
  props.setLook(wConditionOnReceivedDate);
  fdConditionOnReceivedDate=new FormData();
  fdConditionOnReceivedDate.left=new FormAttachment(middle,0);
  fdConditionOnReceivedDate.top=new FormAttachment(wHeader,margin);
  fdConditionOnReceivedDate.right=new FormAttachment(wNegateReceivedDate,-margin);
  wConditionOnReceivedDate.setLayoutData(fdConditionOnReceivedDate);
  wConditionOnReceivedDate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      conditionReceivedDate();
      input.setChanged();
    }
  }
);
  open=new Button(wReceivedDate,SWT.PUSH);
  open.setImage(GUIResource.getInstance().getImageCalendar());
  open.setToolTipText(BaseMessages.getString(PKG,"MailInput.OpenCalendar"));
  FormData fdlButton=new FormData();
  fdlButton.top=new FormAttachment(wConditionOnReceivedDate,margin);
  fdlButton.right=new FormAttachment(100,0);
  open.setLayoutData(fdlButton);
  open.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      final Shell dialog=new Shell(shell,SWT.DIALOG_TRIM);
      dialog.setText(BaseMessages.getString(PKG,"MailInput.SelectDate"));
      dialog.setImage(GUIResource.getInstance().getImageSpoon());
      dialog.setLayout(new GridLayout(3,false));
      final DateTime calendar=new DateTime(dialog,SWT.CALENDAR);
      final DateTime time=new DateTime(dialog,SWT.TIME | SWT.TIME);
      new Label(dialog,SWT.NONE);
      new Label(dialog,SWT.NONE);
      Button ok=new Button(dialog,SWT.PUSH);
      ok.setText(BaseMessages.getString(PKG,"System.Button.OK"));
      ok.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
      ok.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          Calendar cal=Calendar.getInstance();
          cal.set(Calendar.YEAR,calendar.getYear());
          cal.set(Calendar.MONTH,calendar.getMonth());
          cal.set(Calendar.DAY_OF_MONTH,calendar.getDay());
          cal.set(Calendar.HOUR_OF_DAY,time.getHours());
          cal.set(Calendar.MINUTE,time.getMinutes());
          cal.set(Calendar.SECOND,time.getSeconds());
          wReadFrom.setText(new SimpleDateFormat(MailInputMeta.DATE_PATTERN).format(cal.getTime()));
          dialog.close();
        }
      }
);
      dialog.setDefaultButton(ok);
      dialog.pack();
      dialog.open();
    }
  }
);
  wlReadFrom=new Label(wReceivedDate,SWT.RIGHT);
  wlReadFrom.setText(BaseMessages.getString(PKG,"MailInput.ReadFrom.Label"));
  props.setLook(wlReadFrom);
  fdlReadFrom=new FormData();
  fdlReadFrom.left=new FormAttachment(0,0);
  fdlReadFrom.top=new FormAttachment(wConditionOnReceivedDate,margin);
  fdlReadFrom.right=new FormAttachment(middle,-margin);
  wlReadFrom.setLayoutData(fdlReadFrom);
  wReadFrom=new TextVar(transMeta,wReceivedDate,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wReadFrom.setToolTipText(BaseMessages.getString(PKG,"MailInput.ReadFrom.Tooltip"));
  props.setLook(wReadFrom);
  wReadFrom.addModifyListener(lsMod);
  fdReadFrom=new FormData();
  fdReadFrom.left=new FormAttachment(middle,0);
  fdReadFrom.top=new FormAttachment(wConditionOnReceivedDate,margin);
  fdReadFrom.right=new FormAttachment(open,-margin);
  wReadFrom.setLayoutData(fdReadFrom);
  opento=new Button(wReceivedDate,SWT.PUSH);
  opento.setImage(GUIResource.getInstance().getImageCalendar());
  opento.setToolTipText(BaseMessages.getString(PKG,"MailInput.OpenCalendar"));
  FormData fdlButtonto=new FormData();
  fdlButtonto.top=new FormAttachment(wReadFrom,2 * margin);
  fdlButtonto.right=new FormAttachment(100,0);
  opento.setLayoutData(fdlButtonto);
  opento.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      final Shell dialogto=new Shell(shell,SWT.DIALOG_TRIM);
      dialogto.setText(BaseMessages.getString(PKG,"MailInput.SelectDate"));
      dialogto.setImage(GUIResource.getInstance().getImageSpoon());
      dialogto.setLayout(new GridLayout(3,false));
      final DateTime calendarto=new DateTime(dialogto,SWT.CALENDAR | SWT.BORDER);
      final DateTime timeto=new DateTime(dialogto,SWT.TIME | SWT.TIME);
      new Label(dialogto,SWT.NONE);
      new Label(dialogto,SWT.NONE);
      Button okto=new Button(dialogto,SWT.PUSH);
      okto.setText(BaseMessages.getString(PKG,"System.Button.OK"));
      okto.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
      okto.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          Calendar cal=Calendar.getInstance();
          cal.set(Calendar.YEAR,calendarto.getYear());
          cal.set(Calendar.MONTH,calendarto.getMonth());
          cal.set(Calendar.DAY_OF_MONTH,calendarto.getDay());
          cal.set(Calendar.HOUR_OF_DAY,timeto.getHours());
          cal.set(Calendar.MINUTE,timeto.getMinutes());
          cal.set(Calendar.SECOND,timeto.getSeconds());
          wReadTo.setText(new SimpleDateFormat(MailInputMeta.DATE_PATTERN).format(cal.getTime()));
          dialogto.close();
        }
      }
);
      dialogto.setDefaultButton(okto);
      dialogto.pack();
      dialogto.open();
    }
  }
);
  wlReadTo=new Label(wReceivedDate,SWT.RIGHT);
  wlReadTo.setText(BaseMessages.getString(PKG,"MailInput.ReadTo.Label"));
  props.setLook(wlReadTo);
  fdlReadTo=new FormData();
  fdlReadTo.left=new FormAttachment(0,0);
  fdlReadTo.top=new FormAttachment(wReadFrom,2 * margin);
  fdlReadTo.right=new FormAttachment(middle,-margin);
  wlReadTo.setLayoutData(fdlReadTo);
  wReadTo=new TextVar(transMeta,wReceivedDate,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wReadTo.setToolTipText(BaseMessages.getString(PKG,"MailInput.ReadTo.Tooltip"));
  props.setLook(wReadTo);
  wReadTo.addModifyListener(lsMod);
  fdReadTo=new FormData();
  fdReadTo.left=new FormAttachment(middle,0);
  fdReadTo.top=new FormAttachment(wReadFrom,2 * margin);
  fdReadTo.right=new FormAttachment(opento,-margin);
  wReadTo.setLayoutData(fdReadTo);
  fdReceivedDate=new FormData();
  fdReceivedDate.left=new FormAttachment(0,margin);
  fdReceivedDate.top=new FormAttachment(wHeader,margin);
  fdReceivedDate.right=new FormAttachment(100,-margin);
  wReceivedDate.setLayoutData(fdReceivedDate);
  wlLimit=new Label(wSearchComp,SWT.RIGHT);
  wlLimit.setText(BaseMessages.getString(PKG,"MailInput.Limit.Label"));
  props.setLook(wlLimit);
  fdlLimit=new FormData();
  fdlLimit.left=new FormAttachment(0,0);
  fdlLimit.top=new FormAttachment(wReceivedDate,2 * margin);
  fdlLimit.right=new FormAttachment(middle,-margin);
  wlLimit.setLayoutData(fdlLimit);
  wLimit=new Text(wSearchComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wLimit);
  wLimit.addModifyListener(lsMod);
  fdLimit=new FormData();
  fdLimit.left=new FormAttachment(middle,0);
  fdLimit.top=new FormAttachment(wReceivedDate,2 * margin);
  fdLimit.right=new FormAttachment(100,0);
  wLimit.setLayoutData(fdLimit);
  fdSearchComp=new FormData();
  fdSearchComp.left=new FormAttachment(0,0);
  fdSearchComp.top=new FormAttachment(wStepname,0);
  fdSearchComp.right=new FormAttachment(100,0);
  fdSearchComp.bottom=new FormAttachment(100,0);
  wSearchComp.setLayoutData(fdSearchComp);
  wSearchComp.layout();
  wSearchTab.setControl(wSearchComp);
  props.setLook(wSearchComp);
  wFieldsTab=new CTabItem(wTabFolder,SWT.NONE);
  wFieldsTab.setText(BaseMessages.getString(PKG,"MailInputdialog.Fields.Tab"));
  FormLayout fieldsLayout=new FormLayout();
  fieldsLayout.marginWidth=Const.FORM_MARGIN;
  fieldsLayout.marginHeight=Const.FORM_MARGIN;
  wFieldsComp=new Composite(wTabFolder,SWT.NONE);
  wFieldsComp.setLayout(fieldsLayout);
  props.setLook(wFieldsComp);
  wGet=new Button(wFieldsComp,SWT.PUSH);
  wGet.setText(BaseMessages.getString(PKG,"MailInputdialog.GetFields.Button"));
  fdGet=new FormData();
  fdGet.left=new FormAttachment(50,0);
  fdGet.bottom=new FormAttachment(100,0);
  wGet.setLayoutData(fdGet);
  final int FieldsRows=input.getInputFields().length;
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"MailInputdialog.FieldsTable.Name.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"MailInputdialog.FieldsTable.Column.Column"),ColumnInfo.COLUMN_TYPE_CCOMBO,MailInputField.ColumnDesc,true)};
  colinf[0].setUsingVariables(true);
  colinf[0].setToolTip(BaseMessages.getString(PKG,"MailInputdialog.FieldsTable.Name.Column.Tooltip"));
  colinf[1].setToolTip(BaseMessages.getString(PKG,"MailInputdialog.FieldsTable.Column.Column.Tooltip"));
  wFields=new TableView(transMeta,wFieldsComp,SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(0,0);
  fdFields.right=new FormAttachment(100,0);
  fdFields.bottom=new FormAttachment(wGet,-margin);
  wFields.setLayoutData(fdFields);
  fdFieldsComp=new FormData();
  fdFieldsComp.left=new FormAttachment(0,0);
  fdFieldsComp.top=new FormAttachment(0,0);
  fdFieldsComp.right=new FormAttachment(100,0);
  fdFieldsComp.bottom=new FormAttachment(100,0);
  wFieldsComp.setLayoutData(fdFieldsComp);
  wFieldsComp.layout();
  wFieldsTab.setControl(wFieldsComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(BaseMessages.getString(PKG,"MailInputDialog.Preview"));
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wPreview,wCancel},margin,wTabFolder);
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      getFields();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  lsTest=new Listener(){
    public void handleEvent(    Event e){
      test();
    }
  }
;
  wTest.addListener(SWT.Selection,lsTest);
  wPreview.addListener(SWT.Selection,lsPreview);
  wGet.addListener(SWT.Selection,lsGet);
  lsTestIMAPFolder=new Listener(){
    public void handleEvent(    Event e){
      checkFolder(transMeta.environmentSubstitute(wIMAPFolder.getText()));
    }
  }
;
  wTestIMAPFolder.addListener(SWT.Selection,lsTestIMAPFolder);
  lsSelectFolder=new Listener(){
    public void handleEvent(    Event e){
      selectFolder(wIMAPFolder);
    }
  }
;
  wSelectFolder.addListener(SWT.Selection,lsSelectFolder);
  wStepname.addSelectionListener(lsDef);
  wServerName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  setUserProxy();
  chooseListMails();
  refreshProtocol(false);
  conditionReceivedDate();
  wTabFolder.setSelection(0);
  BaseStepDialog.setSize(shell);
  shell.open();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
