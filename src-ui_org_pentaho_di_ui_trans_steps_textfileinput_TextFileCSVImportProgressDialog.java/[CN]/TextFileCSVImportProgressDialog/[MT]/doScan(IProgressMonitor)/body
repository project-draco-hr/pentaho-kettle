{
  if (samples > 0)   monitor.beginTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningFile"),samples + 1);
 else   monitor.beginTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningFile"),2);
  String line="";
  long fileLineNumber=0;
  DecimalFormatSymbols dfs=new DecimalFormatSymbols();
  int nrfields=meta.getInputFields().length;
  RowMetaInterface outputRowMeta=new RowMeta();
  meta.getFields(outputRowMeta,null,null,null,transMeta);
  for (  ValueMetaInterface valueMeta : outputRowMeta.getValueMetaList()) {
    valueMeta.setStorageMetadata(null);
    valueMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
  }
  RowMetaInterface convertRowMeta=outputRowMeta.clone();
  for (int i=0; i < convertRowMeta.size(); i++)   convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
  int nrnull[]=new int[nrfields];
  String minstr[]=new String[nrfields];
  String maxstr[]=new String[nrfields];
  boolean firststr[]=new boolean[nrfields];
  boolean isDate[]=new boolean[nrfields];
  int dateFormatCount[]=new int[nrfields];
  boolean dateFormat[][]=new boolean[nrfields][Const.getDateFormats().length];
  Date minDate[][]=new Date[nrfields][Const.getDateFormats().length];
  Date maxDate[][]=new Date[nrfields][Const.getDateFormats().length];
  boolean isNumber[]=new boolean[nrfields];
  int numberFormatCount[]=new int[nrfields];
  boolean numberFormat[][]=new boolean[nrfields][Const.getNumberFormats().length];
  double minValue[][]=new double[nrfields][Const.getDateFormats().length];
  double maxValue[][]=new double[nrfields][Const.getDateFormats().length];
  int numberPrecision[][]=new int[nrfields][Const.getNumberFormats().length];
  int numberLength[][]=new int[nrfields][Const.getNumberFormats().length];
  for (int i=0; i < nrfields; i++) {
    TextFileInputField field=meta.getInputFields()[i];
    if (log.isDebug())     debug="init field #" + i;
    if (replaceMeta) {
      field.setName(meta.getInputFields()[i].getName());
      field.setType(meta.getInputFields()[i].getType());
      field.setFormat("");
      field.setLength(-1);
      field.setPrecision(-1);
      field.setCurrencySymbol(dfs.getCurrencySymbol());
      field.setDecimalSymbol("" + dfs.getDecimalSeparator());
      field.setGroupSymbol("" + dfs.getGroupingSeparator());
      field.setNullString("-");
      field.setTrimType(ValueMetaInterface.TRIM_TYPE_NONE);
    }
    nrnull[i]=0;
    minstr[i]="";
    maxstr[i]="";
    firststr[i]=true;
    isDate[i]=true;
    for (int j=0; j < Const.getDateFormats().length; j++) {
      dateFormat[i][j]=true;
      minDate[i][j]=Const.MAX_DATE;
      maxDate[i][j]=Const.MIN_DATE;
    }
    dateFormatCount[i]=Const.getDateFormats().length;
    isNumber[i]=true;
    for (int j=0; j < Const.getNumberFormats().length; j++) {
      numberFormat[i][j]=true;
      minValue[i][j]=Double.MAX_VALUE;
      maxValue[i][j]=-Double.MAX_VALUE;
      numberPrecision[i][j]=-1;
      numberLength[i][j]=-1;
    }
    numberFormatCount[i]=Const.getNumberFormats().length;
  }
  InputFileMetaInterface strinfo=(InputFileMetaInterface)meta.clone();
  for (int i=0; i < nrfields; i++)   strinfo.getInputFields()[i].setType(ValueMetaInterface.TYPE_STRING);
  debug="get first line";
  StringBuilder lineBuffer=new StringBuilder(256);
  int fileFormatType=meta.getFileFormatTypeNr();
  line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
  fileLineNumber++;
  int skipped=1;
  if (meta.hasHeader()) {
    while (line != null && skipped < meta.getNrHeaderLines()) {
      line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
      skipped++;
      fileLineNumber++;
    }
  }
  int linenr=1;
  List<StringEvaluator> evaluators=new ArrayList<StringEvaluator>();
  DecimalFormat df2=(DecimalFormat)NumberFormat.getInstance();
  DecimalFormatSymbols dfs2=new DecimalFormatSymbols();
  SimpleDateFormat daf2=new SimpleDateFormat();
  boolean errorFound=false;
  while (!errorFound && line != null && (linenr <= samples || samples == 0) && !monitor.isCanceled()) {
    monitor.subTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningLine","" + linenr));
    if (samples > 0)     monitor.worked(1);
    if (log.isDebug())     debug="convert line #" + linenr + " to row";
    RowMetaInterface rowMeta=new RowMeta();
    meta.getFields(rowMeta,"stepname",null,null,transMeta);
    for (    ValueMetaInterface valueMeta : rowMeta.getValueMetaList()) {
      valueMeta.setStorageMetadata(null);
      valueMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
    }
    String delimiter=transMeta.environmentSubstitute(meta.getSeparator());
    Object[] r=TextFileInput.convertLineToRow(log,new TextFileLine(line,fileLineNumber,null),strinfo,null,0,outputRowMeta,convertRowMeta,meta.getFilePaths(transMeta)[0],rownumber,delimiter,null);
    if (r == null) {
      errorFound=true;
      continue;
    }
    rownumber++;
    for (int i=0; i < nrfields && i < r.length; i++) {
      StringEvaluator evaluator;
      if (i >= evaluators.size()) {
        evaluator=new StringEvaluator(true);
        evaluators.add(evaluator);
      }
 else {
        evaluator=evaluators.get(i);
      }
      String string=rowMeta.getString(r,i);
      evaluator.evaluateString(string);
    }
    fileLineNumber++;
    if (r != null) {
      linenr++;
    }
 else {
      rownumber--;
    }
    line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
  }
  monitor.worked(1);
  monitor.setTaskName(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.AnalyzingResults"));
  StringBuilder message=new StringBuilder();
  message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.ResultAfterScanning","" + (linenr - 1)));
  message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.HorizontalLine"));
  for (int i=0; i < nrfields; i++) {
    TextFileInputField field=meta.getInputFields()[i];
    StringEvaluator evaluator=evaluators.get(i);
    List<StringEvaluationResult> evaluationResults=evaluator.getStringEvaluationResults();
    if (evaluationResults.isEmpty()) {
      field.setType(ValueMetaInterface.TYPE_STRING);
      field.setLength(evaluator.getMaxLength());
    }
 else {
      StringEvaluationResult result=evaluator.getAdvicedResult();
      ValueMetaInterface conversionMeta=result.getConversionMeta();
      field.setType(conversionMeta.getType());
      field.setTrimType(conversionMeta.getTrimType());
      field.setFormat(conversionMeta.getConversionMask());
      field.setDecimalSymbol(conversionMeta.getDecimalSymbol());
      field.setGroupSymbol(conversionMeta.getGroupingSymbol());
      field.setLength(conversionMeta.getLength());
    }
  }
  monitor.worked(1);
  monitor.done();
  return message.toString();
}
