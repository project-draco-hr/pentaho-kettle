{
  TextFileInputMeta meta=new TextFileInputMeta();
  getInfo(meta);
  FileInputList textFileList=meta.getTextFileList(transMeta);
  InputStream fi=null;
  ZipInputStream zi=null;
  GZIPInputStream gzi=null;
  InputStream f=null;
  StringBuilder lineStringBuilder=new StringBuilder(256);
  int fileFormatType=meta.getFileFormatTypeNr();
  List<String> retval=new ArrayList<String>();
  if (textFileList.nrOfFiles() > 0) {
    FileObject file=textFileList.getFile(0);
    try {
      fi=KettleVFS.getInputStream(file);
      if (meta.getFileCompression().equals("Zip")) {
        zi=new ZipInputStream(fi);
        zi.getNextEntry();
        f=zi;
      }
 else       if (meta.getFileCompression().equals("GZip")) {
        gzi=new GZIPInputStream(fi);
        f=gzi;
      }
 else       if (meta.getFileCompression().equals("Hadoop-snappy") && HadoopCompression.isHadoopSnappyAvailable()) {
        f=HadoopCompression.getSnappyInputStream(fi);
      }
 else {
        f=fi;
      }
      InputStreamReader reader;
      if (meta.getEncoding() != null && meta.getEncoding().length() > 0) {
        reader=new InputStreamReader(f,meta.getEncoding());
      }
 else {
        reader=new InputStreamReader(f);
      }
      EncodingType encodingType=EncodingType.guessEncodingType(reader.getEncoding());
      int linenr=0;
      int maxnr=nrlines + (meta.hasHeader() ? meta.getNrHeaderLines() : 0);
      if (skipHeaders) {
        if (meta.isLayoutPaged() && meta.getNrLinesDocHeader() > 0) {
          int skipped=0;
          String line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
          while (line != null && skipped < meta.getNrLinesDocHeader() - 1) {
            skipped++;
            line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
          }
        }
        if (meta.hasHeader() && meta.getNrHeaderLines() > 0) {
          int skipped=0;
          String line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
          while (line != null && skipped < meta.getNrHeaderLines() - 1) {
            skipped++;
            line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
          }
        }
      }
      String line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
      while (line != null && (linenr < maxnr || nrlines == 0)) {
        retval.add(line);
        linenr++;
        line=TextFileInput.getLine(log,reader,encodingType,fileFormatType,lineStringBuilder);
      }
    }
 catch (    Exception e) {
      throw new KettleException(BaseMessages.getString(PKG,"TextFileInputDialog.Exception.ErrorGettingFirstLines","" + nrlines,file.getName().getURI()),e);
    }
 finally {
      try {
        if (meta.getFileCompression().equals("Zip") && zi != null) {
          zi.closeEntry();
          zi.close();
        }
 else         if (meta.getFileCompression().equals("GZip") && gzi != null) {
          gzi.close();
        }
        f.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return retval;
}
