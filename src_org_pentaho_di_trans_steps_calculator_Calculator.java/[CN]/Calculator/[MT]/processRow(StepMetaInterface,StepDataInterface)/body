{
  meta=(CalculatorMeta)smi;
  data=(CalculatorData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.calcRowMeta=meta.getAllFields(getInputRowMeta());
    data.fieldIndexes=new FieldIndexes[meta.getCalculation().length];
    List<Integer> tempIndexes=new ArrayList<Integer>();
    for (int i=0; i < meta.getCalculation().length; i++) {
      CalculatorMetaFunction function=meta.getCalculation()[i];
      data.fieldIndexes[i]=new FieldIndexes();
      if (!Const.isEmpty(function.getFieldName())) {
        data.fieldIndexes[i].indexName=data.calcRowMeta.indexOfValue(function.getFieldName());
        if (data.fieldIndexes[i].indexName < 0) {
          throw new KettleStepException("Unable to find the specified fieldname '" + function.getFieldName() + "' for calculation #"+ (i + 1));
        }
      }
 else {
        throw new KettleStepException("There is no name specified for calculated field #" + (i + 1));
      }
      if (!Const.isEmpty(function.getFieldA())) {
        if (function.getCalcType() != CalculatorMetaFunction.CALC_CONSTANT) {
          data.fieldIndexes[i].indexA=data.calcRowMeta.indexOfValue(function.getFieldA());
          if (data.fieldIndexes[i].indexA < 0) {
            throw new KettleStepException("Unable to find the first argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
          }
        }
 else {
          data.fieldIndexes[i].indexA=-1;
        }
      }
 else {
        throw new KettleStepException("There is no first argument specified for calculated field #" + (i + 1));
      }
      if (!Const.isEmpty(function.getFieldB())) {
        data.fieldIndexes[i].indexB=data.calcRowMeta.indexOfValue(function.getFieldB());
        if (data.fieldIndexes[i].indexB < 0) {
          throw new KettleStepException("Unable to find the second argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
        }
      }
      if (!Const.isEmpty(function.getFieldC())) {
        data.fieldIndexes[i].indexC=data.calcRowMeta.indexOfValue(function.getFieldC());
        if (data.fieldIndexes[i].indexC < 0) {
          throw new KettleStepException("Unable to find the third argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
        }
      }
      if (function.isRemovedFromResult()) {
        tempIndexes.add(Integer.valueOf(getInputRowMeta().size() + i));
      }
    }
    data.tempIndexes=new int[tempIndexes.size()];
    for (int i=0; i < data.tempIndexes.length; i++) {
      data.tempIndexes[i]=((Integer)tempIndexes.get(i)).intValue();
    }
  }
  if (log.isRowLevel())   log.logRowlevel(toString(),"Read row #" + linesRead + " : "+ getInputRowMeta().getString(r));
  Object[] row=calcFields(getInputRowMeta(),r);
  putRow(data.outputRowMeta,row);
  if (log.isRowLevel())   log.logRowlevel(toString(),"Wrote row #" + linesWritten + " : "+ getInputRowMeta().getString(r));
  if (checkFeedback(linesRead))   logBasic("Linenr " + linesRead);
  return true;
}
