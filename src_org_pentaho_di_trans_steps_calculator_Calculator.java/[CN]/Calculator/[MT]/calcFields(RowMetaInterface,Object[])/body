{
  Object[] calcData=RowDataUtil.resizeArray(r,data.calcRowMeta.size());
  for (int i=0, index=inputRowMeta.size() + i; i < meta.getCalculation().length; i++, index++) {
    CalculatorMetaFunction fn=meta.getCalculation()[i];
    if (!Const.isEmpty(fn.getFieldName())) {
      ValueMetaInterface targetMeta=data.calcRowMeta.getValueMeta(index);
      ValueMetaInterface metaA=null;
      Object dataA=null;
      if (data.fieldIndexes[i].indexA >= 0) {
        metaA=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexA);
        dataA=calcData[data.fieldIndexes[i].indexA];
      }
      ValueMetaInterface metaB=null;
      Object dataB=null;
      if (data.fieldIndexes[i].indexB >= 0) {
        metaB=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexB);
        dataB=calcData[data.fieldIndexes[i].indexB];
      }
      ValueMetaInterface metaC=null;
      Object dataC=null;
      if (data.fieldIndexes[i].indexC >= 0) {
        metaC=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexC);
        dataC=calcData[data.fieldIndexes[i].indexC];
      }
      int resultType;
      if (metaA != null) {
        resultType=metaA.getType();
      }
 else {
        resultType=ValueMetaInterface.TYPE_NONE;
      }
switch (fn.getCalcType()) {
case CalculatorMetaFunction.CALC_NONE:
        break;
case CalculatorMetaFunction.CALC_COPY_OF_FIELD:
{
        calcData[index]=dataA;
      }
    break;
case CalculatorMetaFunction.CALC_ADD:
{
    calcData[index]=ValueDataUtil.plus(metaA,dataA,metaB,dataB);
    if (metaA.isString() || metaB.isString())     resultType=ValueMetaInterface.TYPE_STRING;
  }
break;
case CalculatorMetaFunction.CALC_SUBTRACT:
{
calcData[index]=ValueDataUtil.minus(metaA,dataA,metaB,dataB);
if (metaA.isDate()) resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_MULTIPLY:
{
calcData[index]=ValueDataUtil.multiply(metaA,dataA,metaB,dataB);
if (metaA.isString() || metaB.isString()) resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_DIVIDE:
{
calcData[index]=ValueDataUtil.divide(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_SQUARE:
{
calcData[index]=ValueDataUtil.multiply(metaA,dataA,metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_SQUARE_ROOT:
{
calcData[index]=ValueDataUtil.sqrt(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_1:
{
calcData[index]=ValueDataUtil.percent1(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_2:
{
calcData[index]=ValueDataUtil.percent2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_3:
{
calcData[index]=ValueDataUtil.percent2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_1:
{
calcData[index]=ValueDataUtil.combination1(metaA,dataA,metaB,dataB,metaC,dataC);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_2:
{
calcData[index]=ValueDataUtil.combination2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_ROUND_1:
{
calcData[index]=ValueDataUtil.round(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_ROUND_2:
{
calcData[index]=ValueDataUtil.round(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_CONSTANT:
{
calcData[index]=fn.getFieldA();
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_NVL:
{
calcData[index]=ValueDataUtil.nvl(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_ADD_DAYS:
{
calcData[index]=ValueDataUtil.addDays(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE:
{
calcData[index]=ValueDataUtil.yearOfDate(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_MONTH_OF_DATE:
{
calcData[index]=ValueDataUtil.monthOfDate(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_YEAR:
{
calcData[index]=ValueDataUtil.dayOfYear(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_MONTH:
{
calcData[index]=ValueDataUtil.dayOfMonth(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_WEEK:
{
calcData[index]=ValueDataUtil.dayOfWeek(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR:
{
calcData[index]=ValueDataUtil.weekOfYear(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR_ISO8601:
{
calcData[index]=ValueDataUtil.weekOfYearISO8601(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE_ISO8601:
{
calcData[index]=ValueDataUtil.yearOfDateISO8601(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_BYTE_TO_HEX_ENCODE:
{
calcData[index]=ValueDataUtil.byteToHexEncode(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_HEX_TO_BYTE_DECODE:
{
calcData[index]=ValueDataUtil.hexToByteDecode(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_CHAR_TO_HEX_ENCODE:
{
calcData[index]=ValueDataUtil.charToHexEncode(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_HEX_TO_CHAR_DECODE:
{
calcData[index]=ValueDataUtil.hexToCharDecode(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_CRC32:
{
calcData[index]=ValueDataUtil.ChecksumCRC32(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_ADLER32:
{
calcData[index]=ValueDataUtil.ChecksumAdler32(metaA,dataA);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_MD5:
{
calcData[index]=ValueDataUtil.createChecksum(metaA,dataA,"MD5");
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_SHA1:
{
calcData[index]=ValueDataUtil.createChecksum(metaA,dataA,"SHA-1");
resultType=ValueMetaInterface.TYPE_STRING;
}
case CalculatorMetaFunction.CALC_LEVENSHTEIN_DISTANCE:
{
calcData[index]=ValueDataUtil.getLevenshtein_Distance(metaA,dataA,metaB,dataB);
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_METAPHONE:
{
calcData[index]=ValueDataUtil.get_Metaphone(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_DOUBLE_METAPHONE:
{
calcData[index]=ValueDataUtil.get_Double_Metaphone(metaA,dataA);
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
default :
throw new KettleValueException(Messages.getString("Calculator.Log.UnknownCalculationType") + fn.getCalcType());
}
if (targetMeta.getType() == ValueMetaInterface.TYPE_NONE) {
throw new KettleValueException(Messages.getString("Calculator.Log.NoType") + (i + 1) + " : "+ fn.getFieldName()+ " = "+ fn.getCalcTypeDesc()+ " / "+ fn.getCalcTypeLongDesc());
}
if (calcData[index] != null) {
if (targetMeta.getType() != resultType) {
ValueMetaInterface resultMeta=new ValueMeta("result",resultType);
resultMeta.setConversionMask(fn.getConversionMask());
resultMeta.setGroupingSymbol(fn.getGroupingSymbol());
resultMeta.setDecimalSymbol(fn.getDecimalSymbol());
resultMeta.setCurrencySymbol(fn.getCurrencySymbol());
calcData[index]=targetMeta.convertData(resultMeta,calcData[index]);
}
}
}
}
return RowDataUtil.removeItems(calcData,data.tempIndexes);
}
