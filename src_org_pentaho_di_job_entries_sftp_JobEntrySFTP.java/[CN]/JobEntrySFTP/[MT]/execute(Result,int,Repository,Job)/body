{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  long filesRetrieved=0;
  if (log.isDetailed())   log.logDetailed(toString(),"Start of SFTP job entry");
  SFTPClient sftpclient=null;
  String realServerName=environmentSubstitute(serverName);
  String realServerPort=environmentSubstitute(serverPort);
  String realUsername=environmentSubstitute(userName);
  String realPassword=environmentSubstitute(password);
  String realSftpDirString=environmentSubstitute(sftpDirectory);
  String realWildcard=environmentSubstitute(wildcard);
  String realTargetDirectory=environmentSubstitute(targetDirectory);
  FileObject TargetFolder=null;
  try {
    if (!Const.isEmpty(realTargetDirectory)) {
      TargetFolder=KettleVFS.getFileObject(realTargetDirectory);
      boolean TargetFolderExists=TargetFolder.exists();
      if (TargetFolderExists) {
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("SFTP.Log.TargetFolderExists",realTargetDirectory));
      }
 else {
        log.logError(toString(),Messages.getString("JobSFTP.Error.TargetFolderNotExists",realTargetDirectory));
        if (!createtargetfolder) {
          result.setNrErrors(1);
          return result;
        }
 else {
          TargetFolder.createFolder();
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobSFTP.Log.TargetFolderCreated",realTargetDirectory));
        }
      }
    }
    if (TargetFolder != null) {
      TargetFolder.close();
      TargetFolder=null;
    }
    sftpclient=new SFTPClient(InetAddress.getByName(realServerName),Const.toInt(realServerPort,22),realUsername);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobSFTP.Log.OpenedConnection",realServerName,realServerPort,realUsername));
    sftpclient.login(realPassword);
    if (!Const.isEmpty(realSftpDirString)) {
      try {
        sftpclient.chdir(realSftpDirString);
      }
 catch (      Exception e) {
        log.logError(toString(),Messages.getString("JobSFTP.Error.CanNotFindRemoteFolder",realSftpDirString));
        throw new Exception(e);
      }
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobSFTP.Log.ChangedDirectory",realSftpDirString));
    }
    String[] filelist=sftpclient.dir();
    if (filelist == null) {
      result.setResult(true);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobSFTP.Log.Found","" + 0));
      return result;
    }
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobSFTP.Log.Found","" + filelist.length));
    Pattern pattern=null;
    if (!Const.isEmpty(realWildcard)) {
      pattern=Pattern.compile(realWildcard);
    }
    for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
      boolean getIt=true;
      if (pattern != null) {
        Matcher matcher=pattern.matcher(filelist[i]);
        getIt=matcher.matches();
      }
      if (getIt) {
        if (log.isDebug())         log.logDebug(toString(),Messages.getString("JobSFTP.Log.GettingFiles",filelist[i],realTargetDirectory));
        String targetFilename=realTargetDirectory + Const.FILE_SEPARATOR + filelist[i];
        sftpclient.get(targetFilename,filelist[i]);
        filesRetrieved++;
        if (isaddresult) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(targetFilename),parentJob.getJobname(),toString());
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobSFTP.Log.FilenameAddedToResultFilenames",filelist[i]));
        }
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobSFTP.Log.TransferedFile",filelist[i]));
        if (remove) {
          sftpclient.delete(filelist[i]);
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobSFTP.Log.DeletedFile",filelist[i]));
        }
      }
    }
    result.setResult(true);
    result.setNrFilesRetrieved(filesRetrieved);
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    log.logError(toString(),Messages.getString("JobSFTP.Error.GettingFiles",e.getMessage()));
    log.logError(toString(),Const.getStackTracker(e));
  }
 finally {
    try {
      if (sftpclient != null)       sftpclient.disconnect();
    }
 catch (    Exception e) {
    }
    try {
      if (TargetFolder != null) {
        TargetFolder.close();
        TargetFolder=null;
      }
    }
 catch (    Exception e) {
    }
  }
  return result;
}
