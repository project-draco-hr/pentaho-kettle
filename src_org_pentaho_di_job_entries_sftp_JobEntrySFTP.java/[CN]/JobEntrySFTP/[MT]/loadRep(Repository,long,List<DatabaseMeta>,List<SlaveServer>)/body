{
  try {
    super.loadRep(rep,id_jobentry,databases,slaveServers);
    serverName=rep.getJobEntryAttributeString(id_jobentry,"servername");
    int intServerPort=(int)rep.getJobEntryAttributeInteger(id_jobentry,"serverport");
    serverPort=rep.getJobEntryAttributeString(id_jobentry,"serverport");
    if (intServerPort > 0 && Const.isEmpty(serverPort))     serverPort=Integer.toString(intServerPort);
    userName=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    sftpDirectory=rep.getJobEntryAttributeString(id_jobentry,"sftpdirectory");
    targetDirectory=rep.getJobEntryAttributeString(id_jobentry,"targetdirectory");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    remove=rep.getJobEntryAttributeBoolean(id_jobentry,"remove");
    String addToResult=rep.getStepAttributeString(id_jobentry,"add_to_result_filenames");
    if (Const.isEmpty(addToResult))     isaddresult=true;
 else     isaddresult=rep.getStepAttributeBoolean(id_jobentry,"add_to_result_filenames");
    createtargetfolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createtargetfolder");
    copyprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"copyprevious");
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'SFTP' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
