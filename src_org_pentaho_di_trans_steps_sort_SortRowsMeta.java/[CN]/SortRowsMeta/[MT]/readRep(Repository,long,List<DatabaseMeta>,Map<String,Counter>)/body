{
  try {
    directory=rep.getStepAttributeString(id_step,"directory");
    prefix=rep.getStepAttributeString(id_step,"prefix");
    int sortSizeInt=(int)rep.getStepAttributeInteger(id_step,"sort_size");
    if (sortSizeInt > 0) {
      sortSize=Integer.toString(sortSizeInt);
    }
 else {
      sortSize=rep.getStepAttributeString(id_step,"sort_size");
    }
    if (Const.isEmpty(sortSize))     sortSize=Integer.toString(Const.SORT_SIZE);
    compressFiles=rep.getStepAttributeBoolean(id_step,"compress");
    compressFilesVariable=rep.getStepAttributeString(id_step,"compress_variable");
    onlyPassingUniqueRows=rep.getStepAttributeBoolean(id_step,"unique_rows");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldName[i]=rep.getStepAttributeString(id_step,i,"field_name");
      ascending[i]=rep.getStepAttributeBoolean(id_step,i,"field_ascending");
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
