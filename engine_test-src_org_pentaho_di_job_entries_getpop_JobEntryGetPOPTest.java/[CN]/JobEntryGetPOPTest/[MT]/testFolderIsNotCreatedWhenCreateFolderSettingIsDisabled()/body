{
  File outputDir=new File(TestUtils.createTempDir());
  File attachmentsDir=new File(TestUtils.createTempDir());
  outputDir.delete();
  attachmentsDir.delete();
  entry.setCreateLocalFolder(false);
  entry.setSaveAttachment(true);
  entry.setOutputDirectory(outputDir.getAbsolutePath());
  entry.setDifferentFolderForAttachment(true);
  entry.setAttachmentFolder(attachmentsDir.getAbsolutePath());
  try {
    entry.createOutputDirectory(JobEntryGetPOP.FOLDER_OUTPUT);
    fail("A KettleException should have been thrown");
  }
 catch (  Exception e) {
    if (e instanceof KettleException) {
      assertTrue("Output Folder should not be created",BaseMessages.getString(JobEntryGetPOP.class,"JobGetMailsFromPOP.Error.OutputFolderNotExist",outputDir.getAbsolutePath()).equals(Const.trim(e.getMessage())));
    }
 else {
      fail("Output Folder should not have been created: " + e.getLocalizedMessage());
    }
  }
  try {
    entry.createOutputDirectory(JobEntryGetPOP.FOLDER_ATTACHMENTS);
    fail("A KettleException should have been thrown");
  }
 catch (  Exception e) {
    if (e instanceof KettleException) {
      assertTrue("Output Folder should not be created",BaseMessages.getString(JobEntryGetPOP.class,"JobGetMailsFromPOP.Error.AttachmentFolderNotExist",attachmentsDir.getAbsolutePath()).equals(Const.trim(e.getMessage())));
    }
 else {
      fail("Attachments Folder should not have been created: " + e.getLocalizedMessage());
    }
  }
}
