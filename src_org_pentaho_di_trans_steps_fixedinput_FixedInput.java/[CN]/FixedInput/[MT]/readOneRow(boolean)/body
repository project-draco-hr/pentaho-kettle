{
  try {
    if (meta.isRunningInParallel()) {
      if (getLinesInput() >= data.rowsToRead) {
        return null;
      }
    }
    Object[] outputRowData=RowDataUtil.allocateRowData(data.convertRowMeta.size());
    int outputIndex=0;
    if (data.stopReading) {
      return null;
    }
    for (int i=0; i < meta.getFieldDefinition().length; i++) {
      FixedFileInputField fieldDefinition=meta.getFieldDefinition()[i];
      int fieldWidth=fieldDefinition.getWidth();
      data.endBuffer=data.startBuffer + fieldWidth;
      if (data.endBuffer > data.bufferSize) {
        data.resizeByteBuffer();
        data.readBufferFromFile();
      }
      if (data.endBuffer > data.bufferSize) {
        fieldWidth=data.endBuffer - data.bufferSize;
        if (fieldWidth < 0)         fieldWidth=0;
      }
      byte[] field=new byte[fieldWidth];
      System.arraycopy(data.byteBuffer,data.startBuffer,field,0,fieldWidth);
      if (doConversions) {
        if (meta.isLazyConversionActive()) {
          outputRowData[outputIndex++]=field;
        }
 else {
          ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(outputIndex);
          outputRowData[outputIndex++]=sourceValueMeta.convertBinaryStringToNativeType(field);
        }
      }
 else {
        outputRowData[outputIndex++]=null;
      }
      data.startBuffer=data.endBuffer;
    }
    if (meta.isLineFeedPresent()) {
      data.endBuffer+=2;
      if (data.endBuffer >= data.bufferSize) {
        data.resizeByteBuffer();
        data.readBufferFromFile();
      }
      if (data.byteBuffer[data.startBuffer] == '\n' || data.byteBuffer[data.startBuffer] == '\r') {
        data.startBuffer++;
        if (data.byteBuffer[data.startBuffer] == '\n' || data.byteBuffer[data.startBuffer] == '\r') {
          data.startBuffer++;
        }
      }
      data.endBuffer=data.startBuffer;
    }
    incrementLinesInput();
    return outputRowData;
  }
 catch (  Exception e) {
    throw new KettleFileException("Exception reading line using NIO: " + e.toString(),e);
  }
}
