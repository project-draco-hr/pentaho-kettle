{
  try {
    Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    int outputIndex=0;
    if (data.stopReading) {
      return null;
    }
    for (int i=0; i < meta.getFieldNames().length; i++) {
      int fieldWidth=meta.getFieldWidth()[i];
      if (data.endBuffer + meta.getFieldWidth()[i] >= data.bufferSize) {
        data.resizeByteBuffer();
        data.readBufferFromFile();
      }
      if (data.endBuffer + fieldWidth >= data.bufferSize) {
        fieldWidth=data.bufferSize - data.endBuffer;
        if (fieldWidth < 0)         fieldWidth=0;
      }
      byte[] field=new byte[fieldWidth];
      System.arraycopy(data.byteBuffer,data.startBuffer,field,0,fieldWidth);
      if (doConversions) {
        if (meta.isLazyConversionActive()) {
          outputRowData[outputIndex++]=field;
        }
 else {
          ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(outputIndex);
          ValueMetaInterface sourceValueMeta=targetValueMeta.getStorageMetadata();
          outputRowData[outputIndex++]=targetValueMeta.convertData(sourceValueMeta,field);
        }
      }
 else {
        outputRowData[outputIndex++]=null;
      }
      data.endBuffer+=meta.getFieldWidth()[i];
      data.startBuffer=data.endBuffer;
    }
    if (meta.isLineFeedPresent()) {
      while (data.byteBuffer[data.endBuffer] == '\n' || data.byteBuffer[data.endBuffer] == '\r') {
        data.endBuffer++;
        if (data.endBuffer >= data.bufferSize) {
          data.resizeByteBuffer();
          data.readBufferFromFile();
        }
      }
    }
    linesInput++;
    return outputRowData;
  }
 catch (  Exception e) {
    throw new KettleFileException("Exception reading line using NIO: " + e.toString());
  }
}
