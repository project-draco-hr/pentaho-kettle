{
  meta=(FixedInputMeta)smi;
  data=(FixedInputData)sdi;
  if (super.init(smi,sdi)) {
    try {
      data.preferredBufferSize=Integer.parseInt(environmentSubstitute(meta.getBufferSize()));
      data.lineWidth=Integer.parseInt(environmentSubstitute(meta.getLineWidth()));
      data.filename=environmentSubstitute(meta.getFilename());
      if (Const.isEmpty(data.filename)) {
        logError(Messages.getString("FixedInput.MissingFilename.Message"));
        return false;
      }
      FileObject fileObject=KettleVFS.getFileObject(data.filename);
      try {
        FileInputStream fileInputStream=KettleVFS.getFileInputStream(fileObject);
        data.fc=fileInputStream.getChannel();
        data.bb=ByteBuffer.allocateDirect(data.preferredBufferSize);
      }
 catch (      IOException e) {
        logError(e.toString());
        return false;
      }
      logBasic("Opened file with name [" + data.filename + "]");
      data.stopReading=false;
      if (meta.isRunningInParallel()) {
        data.stepNumber=getUniqueStepNrAcrossSlaves();
        data.totalNumberOfSteps=getUniqueStepCountAcrossSlaves();
        data.fileSize=fileObject.getContent().getSize();
      }
      if (meta.isRunningInParallel()) {
        int totalLineWidth=data.lineWidth + meta.getLineSeparatorLength();
        long nrRows=data.fileSize / totalLineWidth;
        long rowsToSkip=Math.round(data.stepNumber * nrRows / (double)data.totalNumberOfSteps);
        long nextRowsToSkip=Math.round((data.stepNumber + 1) * nrRows / (double)data.totalNumberOfSteps);
        data.rowsToRead=nextRowsToSkip - rowsToSkip;
        long bytesToSkip=rowsToSkip * totalLineWidth;
        logBasic("Step #" + data.stepNumber + " is skipping "+ bytesToSkip+ " to position in file, then it's reading "+ data.rowsToRead+ " rows.");
        data.fc.position(bytesToSkip);
      }
      return true;
    }
 catch (    IOException e) {
      logError("Error opening file '" + meta.getFilename() + "' : "+ e.toString());
      logError(Const.getStackTracker(e));
    }
  }
  return false;
}
