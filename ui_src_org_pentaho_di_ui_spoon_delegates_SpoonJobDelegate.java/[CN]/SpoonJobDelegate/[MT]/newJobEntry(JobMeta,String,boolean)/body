{
  PluginRegistry registry=PluginRegistry.getInstance();
  PluginInterface jobPlugin=null;
  try {
    jobPlugin=PluginRegistry.getInstance().findPluginWithName(JobEntryPluginType.class,type_desc);
    if (jobPlugin == null) {
      if (JobMeta.STRING_SPECIAL_START.equals(type_desc) || JobMeta.STRING_SPECIAL_DUMMY.equals(type_desc)) {
        jobPlugin=registry.findPluginWithId(JobEntryPluginType.class,JobMeta.STRING_SPECIAL);
      }
    }
    if (jobPlugin != null) {
      String basename=type_desc;
      String entry_name=basename;
      int nr=2;
      JobEntryCopy check=jobMeta.findJobEntry(entry_name,0,true);
      while (check != null) {
        entry_name=basename + " " + nr++;
        check=jobMeta.findJobEntry(entry_name,0,true);
      }
      JobEntryInterface jei=(JobEntryInterface)registry.loadClass(jobPlugin);
      jei.setPluginId(jobPlugin.getIds()[0]);
      jei.setName(entry_name);
      if (jei.isSpecial()) {
        if (JobMeta.STRING_SPECIAL_START.equals(type_desc)) {
          if (jobMeta.findStart() != null) {
            JobGraph.showOnlyStartOnceMessage(spoon.getShell());
            return null;
          }
          ((JobEntrySpecial)jei).setStart(true);
          jei.setName(JobMeta.STRING_SPECIAL_START);
        }
        if (JobMeta.STRING_SPECIAL_DUMMY.equals(type_desc)) {
          ((JobEntrySpecial)jei).setDummy(true);
        }
      }
      if (openit) {
        JobEntryDialogInterface d=getJobEntryDialog(jei,jobMeta);
        if (d != null && d.open() != null) {
          JobEntryCopy jge=new JobEntryCopy();
          jge.setEntry(jei);
          jge.setLocation(50,50);
          jge.setNr(0);
          jobMeta.addJobEntry(jge);
          jobMeta.renameJobEntryIfNameCollides(jge);
          spoon.addUndoNew(jobMeta,new JobEntryCopy[]{jge},new int[]{jobMeta.indexOfJobEntry(jge)});
          spoon.refreshGraph();
          spoon.refreshTree();
          return jge;
        }
 else {
          return null;
        }
      }
 else {
        JobEntryCopy jge=new JobEntryCopy();
        jge.setEntry(jei);
        jge.setLocation(50,50);
        jge.setNr(0);
        jobMeta.addJobEntry(jge);
        spoon.addUndoNew(jobMeta,new JobEntryCopy[]{jge},new int[]{jobMeta.indexOfJobEntry(jge)});
        spoon.refreshGraph();
        spoon.refreshTree();
        return jge;
      }
    }
 else {
      return null;
    }
  }
 catch (  Throwable e) {
    new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.ErrorDialog.UnexpectedErrorCreatingNewJobGraphEntry.Title"),BaseMessages.getString(PKG,"Spoon.ErrorDialog.UnexpectedErrorCreatingNewJobGraphEntry.Message"),new Exception(e));
    return null;
  }
}
