{
  try {
    Document doc=XMLHandler.loadXMLString(clipcontent);
    jobMeta.unselectAll();
    Node entriesnode=XMLHandler.getSubNode(doc,Spoon.XML_TAG_JOB_JOB_ENTRIES);
    int nr=XMLHandler.countNodes(entriesnode,"entry");
    spoon.getLog().logDebug(spoon.toString(),"I found " + nr + " job entries to paste on location: "+ loc);
    List<JobEntryCopy> entryList=new ArrayList<JobEntryCopy>(nr);
    Point min=new Point(99999999,99999999);
    for (int i=0; i < nr; i++) {
      Node entrynode=XMLHandler.getSubNodeByNr(entriesnode,"entry",i);
      JobEntryCopy copy=new JobEntryCopy(entrynode,jobMeta.getDatabases(),jobMeta.getSlaveServers(),spoon.getRepository());
      if (copy.isStart() && (jobMeta.findStart() != null)) {
        JobGraph.showOnlyStartOnceMessage(spoon.getShell());
        continue;
      }
      String name=jobMeta.getAlternativeJobentryName(copy.getName());
      copy.setName(name);
      if (loc != null) {
        Point p=copy.getLocation();
        if (min.x > p.x)         min.x=p.x;
        if (min.y > p.y)         min.y=p.y;
      }
      entryList.add(copy);
    }
    JobEntryCopy entries[]=entryList.toArray(new JobEntryCopy[]{});
    Point offset=new Point(loc.x - min.x,loc.y - min.y);
    int position[]=new int[entries.length];
    for (int i=0; i < entries.length; i++) {
      Point p=entries[i].getLocation();
      String name=entries[i].getName();
      entries[i].setLocation(p.x + offset.x,p.y + offset.y);
      entries[i].setName(jobMeta.getAlternativeJobentryName(name));
      jobMeta.addJobEntry(entries[i]);
      position[i]=jobMeta.indexOfJobEntry(entries[i]);
    }
    spoon.addUndoNew(jobMeta,entries,position);
    if (jobMeta.hasChanged()) {
      spoon.refreshTree();
      spoon.refreshGraph();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.ErrorDialog.ErrorPasingJobEntries.Title"),BaseMessages.getString(PKG,"Spoon.ErrorDialog.ErrorPasingJobEntries.Message"),e);
  }
}
