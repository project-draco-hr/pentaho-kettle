{
switch (transAction.getType()) {
case TransAction.TYPE_ACTION_NEW_JOB_ENTRY:
{
      int[] idx=transAction.getCurrentIndex();
      for (int i=idx.length - 1; i >= 0; i--) {
        jobMeta.removeJobEntry(idx[i]);
      }
      spoon.refreshTree();
      spoon.refreshGraph();
    }
  break;
case TransAction.TYPE_ACTION_NEW_NOTE:
{
  int[] idx=transAction.getCurrentIndex();
  for (int i=idx.length - 1; i >= 0; i--) {
    jobMeta.removeNote(idx[i]);
  }
  spoon.refreshTree();
  spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_NEW_JOB_HOP:
{
int[] idx=transAction.getCurrentIndex();
for (int i=idx.length - 1; i >= 0; i--) {
jobMeta.removeJobHop(idx[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_STEP:
{
JobEntryCopy[] ce=(JobEntryCopy[])transAction.getCurrent();
int[] idx=transAction.getCurrentIndex();
for (int i=0; i < ce.length; i++) {
jobMeta.addJobEntry(idx[i],ce[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_NOTE:
{
NotePadMeta[] ni=(NotePadMeta[])transAction.getCurrent();
int[] idx=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) {
jobMeta.addNote(idx[i],ni[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_JOB_HOP:
{
JobHopMeta[] hi=(JobHopMeta[])transAction.getCurrent();
int[] idx=transAction.getCurrentIndex();
for (int i=0; i < hi.length; i++) {
jobMeta.addJobHop(idx[i],hi[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_JOB_ENTRY:
{
for (int i=0; i < transAction.getPrevious().length; i++) {
JobEntryCopy copy=(JobEntryCopy)((JobEntryCopy)transAction.getPrevious()[i]).clone();
jobMeta.getJobEntry(transAction.getCurrentIndex()[i]).replaceMeta(copy);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_NOTE:
{
NotePadMeta[] prev=(NotePadMeta[])transAction.getPrevious();
int[] idx=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) {
jobMeta.removeNote(idx[i]);
jobMeta.addNote(idx[i],prev[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_JOB_HOP:
{
JobHopMeta[] prev=(JobHopMeta[])transAction.getPrevious();
int[] idx=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) {
jobMeta.removeJobHop(idx[i]);
jobMeta.addJobHop(idx[i],prev[i]);
}
spoon.refreshTree();
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_POSITION_JOB_ENTRY:
{
int[] idx=transAction.getCurrentIndex();
Point[] p=transAction.getPreviousLocation();
for (int i=0; i < p.length; i++) {
JobEntryCopy entry=jobMeta.getJobEntry(idx[i]);
entry.setLocation(p[i]);
}
spoon.refreshGraph();
}
break;
case TransAction.TYPE_ACTION_POSITION_NOTE:
int[] idx=transAction.getCurrentIndex();
Point[] prev=transAction.getPreviousLocation();
for (int i=0; i < idx.length; i++) {
NotePadMeta npi=jobMeta.getNote(idx[i]);
npi.setLocation(prev[i]);
}
spoon.refreshGraph();
break;
default :
break;
}
}
