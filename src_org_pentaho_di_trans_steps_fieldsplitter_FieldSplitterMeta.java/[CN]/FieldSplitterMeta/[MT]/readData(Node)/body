{
  try {
    splitField=XMLHandler.getTagValue(stepnode,"splitfield");
    delimiter=XMLHandler.getTagValue(stepnode,"delimiter");
    final Node fields=XMLHandler.getSubNode(stepnode,"fields");
    final int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      final Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      fieldName[i]=XMLHandler.getTagValue(fnode,"name");
      fieldID[i]=XMLHandler.getTagValue(fnode,"id");
      final String sidrem=XMLHandler.getTagValue(fnode,"idrem");
      final String stype=XMLHandler.getTagValue(fnode,"type");
      fieldFormat[i]=XMLHandler.getTagValue(fnode,"format");
      fieldGroup[i]=XMLHandler.getTagValue(fnode,"group");
      fieldDecimal[i]=XMLHandler.getTagValue(fnode,"decimal");
      fieldCurrency[i]=XMLHandler.getTagValue(fnode,"currency");
      final String slen=XMLHandler.getTagValue(fnode,"length");
      final String sprc=XMLHandler.getTagValue(fnode,"precision");
      fieldNullIf[i]=XMLHandler.getTagValue(fnode,"nullif");
      fieldIfNull[i]=XMLHandler.getTagValue(fnode,"ifnull");
      final String trim=XMLHandler.getTagValue(fnode,"trimtype");
      fieldRemoveID[i]="Y".equalsIgnoreCase(sidrem);
      fieldType[i]=ValueMeta.getType(stype);
      fieldLength[i]=Const.toInt(slen,-1);
      fieldPrecision[i]=Const.toInt(sprc,-1);
      fieldTrimType[i]=ValueMeta.getTrimTypeByCode(trim);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"FieldSplitterMeta.Exception.UnableToLoadStepInfoFromXML"),e);
  }
}
