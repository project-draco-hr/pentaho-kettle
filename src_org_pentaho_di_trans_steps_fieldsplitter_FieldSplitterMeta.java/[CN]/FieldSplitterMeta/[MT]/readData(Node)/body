{
  try {
    splitField=XMLHandler.getTagValue(stepnode,"splitfield");
    delimiter=XMLHandler.getTagValue(stepnode,"delimiter");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      field[i]=XMLHandler.getTagValue(fnode,"name");
      fieldID[i]=XMLHandler.getTagValue(fnode,"id");
      String sidrem=XMLHandler.getTagValue(fnode,"idrem");
      String stype=XMLHandler.getTagValue(fnode,"type");
      fieldFormat[i]=XMLHandler.getTagValue(fnode,"format");
      fieldGroup[i]=XMLHandler.getTagValue(fnode,"group");
      fieldDecimal[i]=XMLHandler.getTagValue(fnode,"decimal");
      fieldCurrency[i]=XMLHandler.getTagValue(fnode,"currency");
      String slen=XMLHandler.getTagValue(fnode,"length");
      String sprc=XMLHandler.getTagValue(fnode,"precision");
      fieldDefault[i]=XMLHandler.getTagValue(fnode,"nullif");
      removeID[i]="Y".equalsIgnoreCase(sidrem);
      fieldType[i]=ValueMeta.getType(stype);
      fieldLength[i]=Const.toInt(slen,-1);
      fieldPrecision[i]=Const.toInt(sprc,-1);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(Messages.getString("FieldSplitterMeta.Exception.UnableToLoadStepInfoFromXML"),e);
  }
}
