{
  this();
  transName=XMLHandler.getTagValue(transStatusNode,"transname");
  statusDescription=XMLHandler.getTagValue(transStatusNode,"status_desc");
  errorDescription=XMLHandler.getTagValue(transStatusNode,"error_desc");
  Node statusListNode=XMLHandler.getSubNode(transStatusNode,"stepstatuslist");
  int nr=XMLHandler.countNodes(statusListNode,StepStatus.XML_TAG);
  for (int i=0; i < nr; i++) {
    Node stepStatusNode=XMLHandler.getSubNodeByNr(statusListNode,StepStatus.XML_TAG,i);
    stepStatusList.add(new StepStatus(stepStatusNode));
    LogWriter.getInstance().logBasic("SlaveServerTransStatus","7-" + i);
  }
  LogWriter.getInstance().logBasic("SlaveServerTransStatus","8");
  String loggingString64=XMLHandler.getTagValue(transStatusNode,"logging_string");
  try {
    byte[] bytes=Base64.decodeBase64(loggingString64.getBytes());
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    GZIPInputStream gzip=new GZIPInputStream(bais);
    int c;
    StringBuffer buffer=new StringBuffer();
    while ((c=gzip.read()) != -1)     buffer.append((char)c);
    gzip.close();
    loggingString=buffer.toString();
    System.out.println("Found logging: " + Const.CR + loggingString);
  }
 catch (  IOException e) {
    loggingString="Unable to decode logging from remote server : " + e.toString() + Const.CR+ Const.getStackTracker(e);
  }
}
