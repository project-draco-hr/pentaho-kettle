{
  final Spoon spoon=((Spoon)SpoonFactory.getInstance());
  try {
    getDbController();
    dbExplorerController.close();
    final DatabaseMeta dbMeta=dbExplorerController.getDatabaseMeta();
    final String tableName=dbExplorerController.getSelectedTable();
    final String schemaName=dbExplorerController.getSelectedSchema();
    final String schemaTable=dbMeta.getQuotedSchemaTableCombination(schemaName,tableName);
    AnalyzerBeansConfiguration abc=new AnalyzerBeansConfigurationImpl();
    AnalysisJobBuilder analysisJobBuilder=new AnalysisJobBuilder(abc);
    Datastore datastore=new JdbcDatastore(dbMeta.getName(),dbMeta.getURL(),dbMeta.getDriverClass(),dbMeta.getUsername(),dbMeta.getPassword(),false);
    analysisJobBuilder.setDatastore(datastore);
    DatastoreConnection connection=null;
    try {
      connection=datastore.openConnection();
      DataContext dataContext=connection.getDataContext();
      Column[] customerColumns=dataContext.getTableByQualifiedLabel(schemaTable).getColumns();
      analysisJobBuilder.addSourceColumns(customerColumns);
      List<InputColumn<?>> numberColumns=analysisJobBuilder.getAvailableInputColumns(Number.class);
      if (!numberColumns.isEmpty()) {
        analysisJobBuilder.addAnalyzer(NumberAnalyzer.class).addInputColumns(numberColumns);
      }
      List<InputColumn<?>> dateColumns=analysisJobBuilder.getAvailableInputColumns(Date.class);
      if (!dateColumns.isEmpty()) {
        analysisJobBuilder.addAnalyzer(DateAndTimeAnalyzer.class).addInputColumns(dateColumns);
      }
      List<InputColumn<?>> booleanColumns=analysisJobBuilder.getAvailableInputColumns(Boolean.class);
      if (!booleanColumns.isEmpty()) {
        analysisJobBuilder.addAnalyzer(BooleanAnalyzer.class).addInputColumns(booleanColumns);
      }
      List<InputColumn<?>> stringColumns=analysisJobBuilder.getAvailableInputColumns(String.class);
      if (!stringColumns.isEmpty()) {
        analysisJobBuilder.addAnalyzer(StringAnalyzer.class).addInputColumns(stringColumns);
      }
      final FileObject jobFile=KettleVFS.createTempFile("datacleaner-job",".xml",System.getProperty("java.io.tmpdir"),new Variables());
      OutputStream jobOutputStream=null;
      try {
        jobOutputStream=KettleVFS.getOutputStream(jobFile,false);
        new JaxbJobWriter(abc).write(analysisJobBuilder.toAnalysisJob(),jobOutputStream);
        jobOutputStream.close();
      }
  finally {
        if (jobOutputStream != null) {
          jobOutputStream.close();
        }
      }
      String confXml=generateConfXml(dbMeta.getName(),schemaTable,dbMeta.getURL(),dbMeta.getDriverClass(),dbMeta.getUsername(),dbMeta.getPassword());
      final FileObject confFile=KettleVFS.createTempFile("datacleaner-conf",".xml",System.getProperty("java.io.tmpdir"),new Variables());
      OutputStream confOutputStream=null;
      try {
        confOutputStream=KettleVFS.getOutputStream(confFile,false);
        confOutputStream.write(confXml.getBytes(Const.XML_ENCODING));
        confOutputStream.close();
      }
  finally {
        if (confOutputStream != null) {
          confOutputStream.close();
        }
      }
      Spoon.getInstance().getDisplay().syncExec(new Runnable(){
        public void run(){
          new Thread(){
            public void run(){
              ModelerHelper.launchDataCleaner(KettleVFS.getFilename(confFile),KettleVFS.getFilename(jobFile),dbMeta.getName(),null);
            }
          }
.start();
        }
      }
);
    }
  finally {
      if (connection != null) {
        connection.close();
      }
    }
  }
 catch (  final Exception ex) {
    new ErrorDialog(spoon.getShell(),"Error","unexpected error occurred",ex);
  }
}
