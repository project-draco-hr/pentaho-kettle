{
  if (data.file != null) {
    data.jsonReader.readFile(data.filename);
  }
 else {
    if (meta.isReadUrl()) {
      data.jsonReader.readUrl(data.stringToParse);
    }
 else {
      data.jsonReader.readString(data.stringToParse);
    }
  }
  List<NJSONArray> resultList=new ArrayList<NJSONArray>();
  data.nrrecords=-1;
  data.recordnr=0;
  String prevPath="";
  for (int i=0; i < data.nrInputFields; i++) {
    String path=meta.getInputFields()[i].getPath();
    NJSONArray ja=data.jsonReader.getPath(path);
    if (data.nrrecords != -1 && data.nrrecords != ja.size()) {
      throw new KettleException(BaseMessages.getString(PKG,"JsonInput.Error.BadStructure",ja.size(),path,prevPath,data.nrrecords));
    }
    resultList.add(ja);
    if (data.nrrecords == -1 && !ja.isNull()) {
      data.nrrecords=ja.size();
    }
    prevPath=path;
  }
  data.resultList=new ArrayList<NJSONArray>();
  Iterator<NJSONArray> it=resultList.iterator();
  while (it.hasNext()) {
    NJSONArray j=it.next();
    if (j.isNull()) {
      j=new NJSONArray();
      for (int i=0; i < data.nrrecords; i++) {
        j.add(null);
      }
    }
    data.resultList.add(j);
  }
  resultList=null;
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JsonInput.Log.NrRecords",data.nrrecords));
  }
}
