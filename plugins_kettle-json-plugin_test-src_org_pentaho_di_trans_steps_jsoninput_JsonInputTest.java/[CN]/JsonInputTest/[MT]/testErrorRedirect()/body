{
  JsonInputField field=new JsonInputField("value");
  field.setPath("$.value");
  field.setType(ValueMetaInterface.TYPE_STRING);
  String input1="{{";
  String input2="{ \"value\": \"ok\" }";
  JsonInputMeta meta=createSimpleMeta("json",field);
  meta.setRemoveSourceField(true);
  when(helper.stepMeta.isDoingErrorHandling()).thenReturn(true);
  JsonInput jsonInput=createJsonInput("json",meta,new Object[]{input1},new Object[]{input2});
  StepErrorMeta errMeta=new StepErrorMeta(jsonInput,helper.stepMeta);
  errMeta.setEnabled(true);
  errMeta.setErrorFieldsValuename("err field");
  when(helper.stepMeta.getStepErrorMeta()).thenReturn(errMeta);
  final List<Object[]> errorLines=new ArrayList<>();
  jsonInput.addRowListener(new RowComparatorListener(new Object[]{"ok"}){
    @Override public void errorRowWrittenEvent(    RowMetaInterface rowMeta,    Object[] row) throws KettleStepException {
      errorLines.add(row);
    }
  }
);
  processRows(jsonInput,3);
  Assert.assertEquals("fwd error",1,errorLines.size());
  Assert.assertEquals("input in err line",input1,errorLines.get(0)[0]);
  Assert.assertEquals("rows written",1,jsonInput.getLinesWritten());
}
