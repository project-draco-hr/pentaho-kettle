{
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  helper.redirectLog(out,LogLevel.ERROR);
  final String input="{ \"results\": [" + "  { \"badger\": 1 }," + "  { \"badger\": 2 },"+ "  { \"badger\": 3, \"mushroom\" : 1 }]}";
  JsonInputField badger=new JsonInputField("badger");
  badger.setPath("$..results[*].badger");
  badger.setType(ValueMetaInterface.TYPE_INTEGER);
  JsonInputField mushroom=new JsonInputField("mushroom");
  mushroom.setPath("$..results[*].mushroom");
  mushroom.setType(ValueMetaInterface.TYPE_INTEGER);
  JsonInputMeta meta=createSimpleMeta("json",badger,mushroom);
  meta.setDefaultPathLeafToNull(true);
  meta.setRemoveSourceField(true);
  JsonInput jsonInput=createJsonInput("json",meta,new Object[]{input});
  RowComparatorListener rowComparator=new RowComparatorListener(new Object[]{1L,null},new Object[]{2L,null},new Object[]{3L,1L});
  jsonInput.addRowListener(rowComparator);
  processRows(jsonInput,5);
  Assert.assertEquals(out.toString(),0,jsonInput.getErrors());
  Assert.assertEquals("rows written",3,jsonInput.getLinesWritten());
}
