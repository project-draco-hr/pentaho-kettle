{
  CheckResult cr;
  if (databaseMeta != null) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Connection exists",stepMeta);
    remarks.add(cr);
    Database db=new Database(loggingObject,databaseMeta);
    db.shareVariablesWith(transMeta);
    databases=new Database[]{db};
    try {
      db.connect();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Connection to database OK",stepMeta);
      remarks.add(cr);
      if (sql != null && sql.length() != 0) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"SQL statement is entered",stepMeta);
        remarks.add(cr);
      }
 else {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"SQL statement is missing.",stepMeta);
        remarks.add(cr);
      }
    }
 catch (    KettleException e) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"An error occurred: " + e.getMessage(),stepMeta);
      remarks.add(cr);
    }
 finally {
      db.disconnect();
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Please select or create a connection to use",stepMeta);
    remarks.add(cr);
  }
  StreamInterface infoStream=getStepIOMeta().getInfoStreams().get(0);
  if (!Utils.isEmpty(infoStream.getStepname())) {
    boolean found=false;
    for (int i=0; i < input.length; i++) {
      if (infoStream.getStepname().equalsIgnoreCase(input[i])) {
        found=true;
      }
    }
    if (found) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Previous step to read info from [" + infoStream.getStepname() + "] is found.",stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Previous step to read info from [" + infoStream.getStepname() + "] is not found.",stepMeta);
      remarks.add(cr);
    }
    int count=0;
    for (int i=0; i < sql.length(); i++) {
      char c=sql.charAt(i);
      if (c == '\'') {
        do {
          i++;
          c=sql.charAt(i);
        }
 while (c != '\'');
      }
      if (c == '?') {
        count++;
      }
    }
    if (info != null) {
      if (count == info.size()) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"This step is expecting and receiving " + info.size() + " fields of input from the previous step.",stepMeta);
        remarks.add(cr);
      }
 else {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"This step is receiving " + info.size() + " but not the expected "+ count+ " fields of input from the previous step.",stepMeta);
        remarks.add(cr);
      }
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Input step name is not recognized!",stepMeta);
      remarks.add(cr);
    }
  }
 else {
    if (input.length > 0) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Step is not expecting info from input steps.",stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"No input expected, no input provided.",stepMeta);
      remarks.add(cr);
    }
  }
}
