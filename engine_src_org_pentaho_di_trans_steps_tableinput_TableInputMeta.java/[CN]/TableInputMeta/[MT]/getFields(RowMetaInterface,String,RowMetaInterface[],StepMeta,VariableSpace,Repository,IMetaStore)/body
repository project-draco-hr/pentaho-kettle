{
  if (databaseMeta == null) {
    return;
  }
  boolean param=false;
  Database db=getDatabase();
  databases=new Database[]{db};
  String sNewSQL=sql;
  if (isVariableReplacementActive()) {
    sNewSQL=db.environmentSubstitute(sql);
    if (space != null) {
      sNewSQL=space.environmentSubstitute(sNewSQL);
    }
  }
  RowMetaInterface add=null;
  try {
    add=db.getQueryFields(sNewSQL,param);
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleStepException("Unable to get queryfields for SQL: " + Const.CR + sNewSQL,dbe);
  }
  if (add != null) {
    for (int i=0; i < add.size(); i++) {
      ValueMetaInterface v=add.getValueMeta(i);
      v.setOrigin(origin);
    }
    row.addRowMeta(add);
  }
 else {
    try {
      db.connect();
      RowMetaInterface paramRowMeta=null;
      Object[] paramData=null;
      StreamInterface infoStream=getStepIOMeta().getInfoStreams().get(0);
      if (!Utils.isEmpty(infoStream.getStepname())) {
        param=true;
        if (info.length >= 0 && info[0] != null) {
          paramRowMeta=info[0];
          paramData=RowDataUtil.allocateRowData(paramRowMeta.size());
        }
      }
      add=db.getQueryFields(sNewSQL,param,paramRowMeta,paramData);
      if (add == null) {
        return;
      }
      for (int i=0; i < add.size(); i++) {
        ValueMetaInterface v=add.getValueMeta(i);
        v.setOrigin(origin);
      }
      row.addRowMeta(add);
    }
 catch (    KettleException ke) {
      throw new KettleStepException("Unable to get queryfields for SQL: " + Const.CR + sNewSQL,ke);
    }
 finally {
      db.disconnect();
    }
  }
  if (isLazyConversionActive()) {
    for (int i=0; i < row.size(); i++) {
      ValueMetaInterface v=row.getValueMeta(i);
      try {
        if (v.getType() == ValueMetaInterface.TYPE_STRING) {
          ValueMetaInterface storageMeta=ValueMetaFactory.cloneValueMeta(v);
          storageMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
          v.setStorageMetadata(storageMeta);
          v.setStorageType(ValueMetaInterface.STORAGE_TYPE_BINARY_STRING);
        }
      }
 catch (      KettlePluginException e) {
        throw new KettleStepException("Unable to clone meta for lazy conversion: " + Const.CR + v,e);
      }
    }
  }
}
