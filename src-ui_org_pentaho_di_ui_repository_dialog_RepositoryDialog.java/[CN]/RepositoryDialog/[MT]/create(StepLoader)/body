{
  System.out.println("Loading repository info...");
  RepositoryMeta repinfo=new RepositoryMeta();
  getInfo(repinfo);
  if (repinfo.getConnection() != null) {
    if (repinfo.getConnection().getAccessType() == DatabaseMeta.TYPE_ACCESS_ODBC) {
      System.out.println("Show ODBC warning...");
      MessageBox qmb=new MessageBox(shell,SWT.ICON_WARNING | SWT.YES | SWT.NO);
      qmb.setMessage(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.ODBCIsNotSafe.Message",Const.CR,Const.CR));
      qmb.setText(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.ODBCIsNotSafe.Title"));
      int answer=qmb.open();
      if (answer != SWT.YES) {
        return;
      }
    }
    System.out.println("Allocating repository...");
    Repository rep=new Repository(log,repinfo,null);
    System.out.println("Connecting to database for repository creation...");
    try {
      rep.connect(true,false,getClass().getName(),true);
      boolean upgrade=false;
      String cu=BaseMessages.getString(PKG,"RepositoryDialog.Dialog.CreateUpgrade.Create");
      try {
        String userTableName=rep.getDatabaseMeta().quoteField(Repository.TABLE_R_USER);
        upgrade=rep.getDatabase().checkTableExists(userTableName);
        if (upgrade)         cu=BaseMessages.getString(PKG,"RepositoryDialog.Dialog.CreateUpgrade.Upgrade");
      }
 catch (      KettleDatabaseException dbe) {
        rep.rollback();
      }
      MessageBox qmb=new MessageBox(shell,SWT.ICON_WARNING | SWT.YES | SWT.NO);
      qmb.setMessage(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.CreateUpgrade.Message1") + cu + BaseMessages.getString(PKG,"RepositoryDialog.Dialog.CreateUpgrade.Message2"));
      qmb.setText(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.CreateUpgrade.Title"));
      int answer=qmb.open();
      if (answer == SWT.YES) {
        boolean goAhead=!upgrade;
        if (!goAhead) {
          EnterPasswordDialog etd=new EnterPasswordDialog(shell,BaseMessages.getString(PKG,"RepositoryDialog.Dialog.EnterPassword.Title"),BaseMessages.getString(PKG,"RepositoryDialog.Dialog.EnterPassword.Message"),"");
          String pwd=etd.open();
          if (pwd != null) {
            try {
              UserInfo ui=new UserInfo(rep,"admin");
              if (pwd.equalsIgnoreCase(ui.getPassword())) {
                goAhead=true;
              }
 else {
                MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
                mb.setMessage(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UpgradePasswordNotCorrect.Message"));
                mb.setText(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UpgradePasswordNotCorrect.Title"));
                mb.open();
              }
            }
 catch (            KettleException e) {
              new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UnableToVerifyUser.Title"),BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UnableToVerifyUser.Message"),e);
            }
          }
        }
        if (goAhead) {
          System.out.println(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.TryingToUpgradeRepository.Message1") + cu + BaseMessages.getString(PKG,"RepositoryDialog.Dialog.TryingToUpgradeRepository.Message2"));
          UpgradeRepositoryProgressDialog urpd=new UpgradeRepositoryProgressDialog(shell,rep,upgrade);
          if (urpd.open()) {
            if (urpd.isDryRun()) {
              StringBuffer sql=new StringBuffer();
              sql.append("-- Repository creation/upgrade DDL: ").append(Const.CR);
              sql.append("--").append(Const.CR);
              sql.append("-- Nothing was created nor modified in the target repository database.").append(Const.CR);
              sql.append("-- Hit the OK button to execute the generated SQL or Close to reject the changes.").append(Const.CR);
              sql.append("-- Please note that it is possible to change/edit the generated SQL before execution.").append(Const.CR);
              sql.append("--").append(Const.CR);
              for (              String statement : urpd.getGeneratedStatements()) {
                if (statement.endsWith(";")) {
                  sql.append(statement).append(Const.CR);
                }
 else {
                  sql.append(statement).append(";").append(Const.CR).append(Const.CR);
                }
              }
              SQLEditor editor=new SQLEditor(shell,SWT.NONE,rep.getDatabaseMeta(),DBCache.getInstance(),sql.toString());
              editor.open();
            }
 else {
              MessageBox mb=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
              mb.setMessage(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UpgradeFinished.Message1") + cu + BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UpgradeFinished.Message2"));
              mb.setText(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UpgradeFinished.Title"));
              mb.open();
            }
          }
        }
      }
      rep.disconnect();
    }
 catch (    KettleException ke) {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UnableToConnectToUpgrade.Title"),BaseMessages.getString(PKG,"RepositoryDialog.Dialog.UnableToConnectToUpgrade.Message") + Const.CR,ke);
    }
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    mb.setMessage(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.FirstCreateAValidConnection.Message"));
    mb.setText(BaseMessages.getString(PKG,"RepositoryDialog.Dialog.FirstCreateAValidConnection.Title"));
    mb.open();
  }
}
