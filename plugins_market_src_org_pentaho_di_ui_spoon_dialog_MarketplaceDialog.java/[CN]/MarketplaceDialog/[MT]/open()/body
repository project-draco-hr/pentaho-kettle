{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  shell.setImage(GUIResource.getInstance().getImageSpoon());
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(MARKET_PKG,"Marketplace.Dialog.Title"));
  shell.setImage(GUIResource.getInstance().getImageLogoSmall());
  margin=Const.MARGIN;
  middle=props.getMiddlePct();
  wlMarketplaces=new Label(shell,SWT.NONE);
  wlMarketplaces.setText(BaseMessages.getString(MARKET_PKG,"Marketplace.Dialog.DetectedPlugins"));
  props.setLook(wlMarketplaces);
  FormData fdlMarketplaces=new FormData();
  fdlMarketplaces.left=new FormAttachment(0,0);
  fdlMarketplaces.top=new FormAttachment(0,margin);
  wlMarketplaces.setLayoutData(fdlMarketplaces);
  selectionFilter=new Text(shell,SWT.SINGLE | SWT.BORDER | SWT.LEFT| SWT.SEARCH| SWT.ICON_SEARCH| SWT.ICON_CANCEL);
  selectionFilter.setFont(GUIResource.getInstance().getFontSmall());
  selectionFilter.setToolTipText(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.Filter.Tooltip"));
  FormData fdSelectionFilter=new FormData();
  fdSelectionFilter.top=new FormAttachment(0,margin);
  fdSelectionFilter.right=new FormAttachment(100,0);
  fdSelectionFilter.left=new FormAttachment(wlMarketplaces,10);
  selectionFilter.setLayoutData(fdSelectionFilter);
  selectionFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      filter();
    }
  }
);
  expandBar=new ExpandBar(shell,SWT.V_SCROLL | SWT.H_SCROLL);
  expandBar.addExpandListener(new ExpandListener(){
    public void itemCollapsed(    ExpandEvent e){
    }
    public void itemExpanded(    ExpandEvent e){
      ExpandItem item=(ExpandItem)(e.item == null ? e.getSource() : e.item);
      if (item.getControl() != null)       return;
      initExpandItemControl(item);
    }
  }
);
  FormData fdBar=new FormData();
  fdBar.left=new FormAttachment(0,0);
  fdBar.top=new FormAttachment(wlMarketplaces,margin);
  fdBar.right=new FormAttachment(100,0);
  fdBar.bottom=new FormAttachment(100,-50);
  expandBar.setLayoutData(fdBar);
  pmd=new ProgressMonitorDialog(shell);
  upgradeSelectionListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        final Button button=(Button)(e.item == null ? e.getSource() : e.item);
        final Composite composite=button.getParent();
        final MarketEntry marketEntry=(MarketEntry)composite.getData("marketEntry");
        if (marketEntry.getId().equals("market")) {
          MessageBox mb=new MessageBox(shell,SWT.NO | SWT.YES | SWT.ICON_WARNING);
          mb.setMessage(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.UpgradeMarket.Message"));
          mb.setText(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.UpgradeMarket.Title"));
          int id=mb.open();
          if (id == SWT.YES) {
            dispose();
            Market.upgradeMarket(marketEntry);
          }
        }
 else {
          try {
            pmd.run(true,true,new ProgressMonitorRunner(new Runnable(){
              public void run(){
                try {
                  Market.install(marketEntry,pmd);
                  button.setEnabled(false);
                }
 catch (                KettleException ke) {
                  new ErrorDialog(shell,BaseMessages.getString(MARKET_PKG,"Market.error"),BaseMessages.getString(MARKET_PKG,"Market.installUninstall.error"),ke);
                }
              }
            }
));
          }
 catch (          Exception ex) {
            new ErrorDialog(shell,"Error with Progress Monitor Dialog","Error with Progress Monitor Dialog",ex);
          }
        }
      }
 catch (      KettleException ke) {
        new ErrorDialog(shell,BaseMessages.getString(MARKET_PKG,"Market.error"),BaseMessages.getString(MARKET_PKG,"Market.installUninstall.error"),ke);
      }
    }
  }
;
  installSelectionListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        final Button button=(Button)(e.item == null ? e.getSource() : e.item);
        final Composite composite=button.getParent();
        final MarketEntry marketEntry=(MarketEntry)composite.getData("marketEntry");
        if (marketEntry.getId().equals("market")) {
          MessageBox mb=new MessageBox(shell,SWT.NO | SWT.YES | SWT.ICON_WARNING);
          mb.setMessage(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.UninstallMarket.Message"));
          mb.setText(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.UninstallMarket.Title"));
          int id=mb.open();
          if (id == SWT.YES) {
            dispose();
            pmd.run(true,true,new ProgressMonitorRunner(new Runnable(){
              public void run(){
                try {
                  Market.uninstallMarket();
                }
 catch (                KettleException ke) {
                  new ErrorDialog(shell,BaseMessages.getString(MARKET_PKG,"Market.error"),BaseMessages.getString(MARKET_PKG,"Market.installUninstall.error"),ke);
                }
              }
            }
));
          }
        }
 else {
          pmd.run(true,true,new ProgressMonitorRunner(new Runnable(){
            public void run(){
              try {
                Market.installUninstall(marketEntry,marketEntry.isInstalled(),pmd);
                Market.discoverInstalledVersion(marketEntry);
                setButtonLabel(button,marketEntry.isInstalled());
                setPluginName(marketEntry);
                Button upgradeButton=null;
                for (                Control control : composite.getChildren()) {
                  if (control instanceof Button && "upgradeButton".equals((String)control.getData("id"))) {
                    upgradeButton=(Button)control;
                    break;
                  }
                }
                if (upgradeButton != null) {
                  upgradeButton.setVisible(marketEntry.isInstalled());
                }
              }
 catch (              KettleException ke) {
                new ErrorDialog(shell,BaseMessages.getString(MARKET_PKG,"Market.error"),BaseMessages.getString(MARKET_PKG,"Market.installUninstall.error"),ke);
              }
            }
          }
));
        }
      }
 catch (      Throwable ke) {
        new ErrorDialog(shell,BaseMessages.getString(MARKET_PKG,"Market.error"),BaseMessages.getString(MARKET_PKG,"Market.installUninstall.error"),ke);
      }
    }
  }
;
  addMarketPlaceEntries();
  SelectionAdapter checkListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      filter();
    }
  }
;
  checkInstalled=new Button(shell,SWT.CHECK);
  checkInstalled.setText(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.CheckInstalled"));
  checkInstalled.setSelection(true);
  checkInstalled.addSelectionListener(checkListener);
  FormData fdInstalled=new FormData();
  fdInstalled.left=new FormAttachment(0,0);
  fdInstalled.top=new FormAttachment(expandBar,margin);
  fdInstalled.right=new FormAttachment(100,0);
  fdInstalled.bottom=new FormAttachment(100,-35);
  checkInstalled.setLayoutData(fdInstalled);
  checkNotinstalled=new Button(shell,SWT.CHECK);
  checkNotinstalled.setText(BaseMessages.getString(MARKET_PKG,"MarketplacesDialog.CheckNotinstalled"));
  checkNotinstalled.setSelection(true);
  checkNotinstalled.addSelectionListener(checkListener);
  FormData fdNotinstalled=new FormData();
  fdNotinstalled.left=new FormAttachment(0,0);
  fdNotinstalled.top=new FormAttachment(checkInstalled,margin);
  fdNotinstalled.right=new FormAttachment(100,0);
  fdNotinstalled.bottom=new FormAttachment(100,-20);
  checkNotinstalled.setLayoutData(fdNotinstalled);
  wClose=new Button(shell,SWT.PUSH);
  wClose.setText(BaseMessages.getString(MARKET_PKG,"System.Button.Close"));
  wClose.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dispose();
    }
  }
);
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wClose},margin,null);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      dispose();
    }
  }
);
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
}
