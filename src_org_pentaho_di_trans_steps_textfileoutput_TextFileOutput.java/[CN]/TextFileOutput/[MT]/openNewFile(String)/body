{
  data.writer=null;
  ResultFile resultFile=null;
  String filename=buildFilename(environmentSubstitute(baseFilename),true);
  try {
    if (meta.isFileAsCommand()) {
      if (log.isDebug())       logDebug("Spawning external process");
      if (data.cmdProc != null) {
        logError("Previous command not correctly terminated");
        setErrors(1);
      }
      String cmdstr=environmentSubstitute(meta.getFileName());
      if (Const.getOS().equals("Windows 95")) {
        cmdstr="command.com /C " + cmdstr;
      }
 else {
        if (Const.getOS().startsWith("Windows")) {
          cmdstr="cmd.exe /C " + cmdstr;
        }
      }
      if (log.isDebug())       logDetailed("Starting: " + cmdstr);
      Runtime r=Runtime.getRuntime();
      data.cmdProc=r.exec(cmdstr,EnvUtil.getEnvironmentVariablesForRuntimeExec());
      data.writer=data.cmdProc.getOutputStream();
      StreamLogger stdoutLogger=new StreamLogger(data.cmdProc.getInputStream(),"(stdout)");
      StreamLogger stderrLogger=new StreamLogger(data.cmdProc.getErrorStream(),"(stderr)");
      new Thread(stdoutLogger).start();
      new Thread(stderrLogger).start();
    }
 else {
      resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(filename),getTransMeta().getName(),getStepname());
      resultFile.setComment("This file was created with a text file output step");
      addResultFile(resultFile);
      OutputStream outputStream;
      if (!Const.isEmpty(meta.getFileCompression()) && !meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_NONE)) {
        if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_ZIP)) {
          if (log.isDetailed())           log.logDetailed(toString(),"Opening output stream in zipped mode");
          if (checkPreviouslyOpened(filename)) {
            data.fos=KettleVFS.getOutputStream(filename,true);
          }
 else {
            data.fos=KettleVFS.getOutputStream(filename,meta.isFileAppended());
          }
          data.zip=new ZipOutputStream(data.fos);
          File entry=new File(filename);
          ZipEntry zipentry=new ZipEntry(entry.getName());
          zipentry.setComment("Compressed by Kettle");
          data.zip.putNextEntry(zipentry);
          outputStream=data.zip;
        }
 else         if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_GZIP)) {
          if (log.isDetailed())           log.logDetailed(toString(),"Opening output stream in gzipped mode");
          if (checkPreviouslyOpened(filename)) {
            data.fos=KettleVFS.getOutputStream(filename,true);
          }
 else {
            data.fos=KettleVFS.getOutputStream(filename,meta.isFileAppended());
          }
          data.gzip=new GZIPOutputStream(data.fos);
          outputStream=data.gzip;
        }
 else {
          throw new KettleFileException("No compression method specified!");
        }
      }
 else {
        if (log.isDetailed())         log.logDetailed(toString(),"Opening output stream in nocompress mode");
        if (checkPreviouslyOpened(filename)) {
          data.fos=KettleVFS.getOutputStream(filename,true);
        }
 else {
          data.fos=KettleVFS.getOutputStream(filename,meta.isFileAppended());
        }
        outputStream=data.fos;
      }
      if (!Const.isEmpty(meta.getEncoding())) {
        if (log.isBasic())         log.logBasic(toString(),"Opening output stream in encoding: " + meta.getEncoding());
        data.writer=new BufferedOutputStream(outputStream,5000);
      }
 else {
        if (log.isBasic())         log.logBasic(toString(),"Opening output stream in default encoding");
        data.writer=new BufferedOutputStream(outputStream,5000);
      }
      if (log.isDetailed())       logDetailed("Opened new file with name [" + filename + "]");
    }
  }
 catch (  Exception e) {
    throw new KettleException("Error opening new file : " + e.toString());
  }
  data.splitnr++;
  if (resultFile != null && meta.isAddToResultFiles()) {
    addResultFile(resultFile);
  }
}
