{
  databaseMeta=mock(DatabaseMeta.class);
  doReturn("").when(databaseMeta).quoteField(anyString());
  dimensionLookupMeta=mock(DimensionLookupMeta.class);
  doReturn(databaseMeta).when(dimensionLookupMeta).getDatabaseMeta();
  doReturn(new String[]{}).when(dimensionLookupMeta).getKeyLookup();
  doReturn(new String[]{}).when(dimensionLookupMeta).getFieldLookup();
  doReturn(new int[]{}).when(dimensionLookupMeta).getFieldUpdate();
  stepMeta=mock(StepMeta.class);
  doReturn("step").when(stepMeta).getName();
  doReturn(mock(StepPartitioningMeta.class)).when(stepMeta).getTargetStepPartitioningMeta();
  doReturn(dimensionLookupMeta).when(stepMeta).getStepMetaInterface();
  Database db=mock(Database.class);
  doReturn(mock(Connection.class)).when(db).getConnection();
  dimensionLookupData=mock(DimensionLookupData.class);
  dimensionLookupData.db=db;
  dimensionLookupData.keynrs=new int[]{};
  dimensionLookupData.fieldnrs=new int[]{};
  TransMeta transMeta=mock(TransMeta.class);
  doReturn(stepMeta).when(transMeta).findStep(anyString());
  dimensionLookup=new DimensionLookup(stepMeta,dimensionLookupData,1,transMeta,mock(Trans.class));
  dimensionLookup.setData(dimensionLookupData);
  dimensionLookup.setMeta(dimensionLookupMeta);
  dimensionLookupSpy=spy(dimensionLookup);
  doReturn(stepMeta).when(dimensionLookupSpy).getStepMeta();
  doReturn(false).when(dimensionLookupSpy).isRowLevel();
  doReturn(false).when(dimensionLookupSpy).isDebug();
  doReturn(true).when(dimensionLookupSpy).isAutoIncrement();
  doNothing().when(dimensionLookupSpy).logDetailed(anyString());
}
