{
  System.out.println("getColumns(" + catalog + ", "+ schemaPattern+ ", "+ tableNamePattern+ ", "+ columnNamePattern+ ")");
  try {
    List<ThinServiceInformation> services=getServiceInformation();
    RowMetaInterface rowMeta=new RowMeta();
    rowMeta.addValueMeta(new ValueMeta("TABLE_CAT",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("TABLE_SCHEM",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("TABLE_NAME",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("COLUMN_NAME",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("DATA_TYPE",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("TYPE_NAME",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("COLUMN_SIZE",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("BUFFER_LENGTH",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("DECIMAL_DIGITS",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("NUM_PREC_RADIX",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("NULLABLE",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("REMARKS",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("COLUMN_DEF",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("SQL_DATA_TYPE",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("SQL_DATATIME_SUB",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("CHAR_OCTET_LENGTH",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("ORDINAL_POSITION",ValueMetaInterface.TYPE_INTEGER));
    rowMeta.addValueMeta(new ValueMeta("IS_NULLABLE",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("SCOPE_CATALOG",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("SCOPE_SCHEMA",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("SCOPE_TABLE",ValueMetaInterface.TYPE_STRING));
    rowMeta.addValueMeta(new ValueMeta("SOURCE_DATA_TYPE",ValueMetaInterface.TYPE_STRING));
    List<Object[]> rows=new ArrayList<Object[]>();
    for (    ThinServiceInformation service : services) {
      if (Const.isEmpty(tableNamePattern) || service.getName().equalsIgnoreCase(tableNamePattern)) {
        int ordinal=1;
        for (        ValueMetaInterface valueMeta : service.getServiceFields().getValueMetaList()) {
          if (Const.isEmpty(columnNamePattern) || valueMeta.getName().equalsIgnoreCase(columnNamePattern)) {
            Object[] row=RowDataUtil.allocateRowData(rowMeta.size());
            int index=0;
            row[index++]=null;
            row[index++]=SCHEMA_NAME_KETTLE;
            row[index++]=service.getName();
            row[index++]=valueMeta.getName();
            row[index++]=Long.valueOf(ThinUtil.getSqlType(valueMeta));
            row[index++]=ThinUtil.getSqlTypeDesc(valueMeta);
            row[index++]=Long.valueOf(valueMeta.getLength());
            row[index++]=null;
            row[index++]=Long.valueOf(valueMeta.getPrecision());
            row[index++]=Long.valueOf(10);
            row[index++]=DatabaseMetaData.columnNullableUnknown;
            row[index++]=valueMeta.getComments();
            row[index++]=null;
            row[index++]=null;
            row[index++]=null;
            row[index++]=Long.valueOf(valueMeta.getLength());
            row[index++]=Long.valueOf(ordinal);
            row[index++]="";
            row[index++]=null;
            row[index++]=null;
            row[index++]=null;
            row[index++]=valueMeta.getTypeDesc();
            rows.add(row);
          }
          ordinal++;
        }
      }
    }
    return new RowsResultSet(rowMeta,rows);
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}
