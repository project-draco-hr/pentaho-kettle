{
  super(par,SWT.NONE);
  shell=par.getShell();
  this.log=spoon.getLog();
  this.spoon=spoon;
  this.jobMeta=jobMeta;
  this.props=PropsUI.getInstance();
  this.areaOwners=new ArrayList<AreaOwner>();
  this.mouseOverEntries=new ArrayList<JobEntryCopy>();
  this.delayTimers=new HashMap<JobEntryCopy,DelayTimer>();
  jobLogDelegate=new JobLogDelegate(spoon,this);
  jobHistoryDelegate=new JobHistoryDelegate(spoon,this);
  jobGridDelegate=new JobGridDelegate(spoon,this);
  refreshListeners=new ArrayList<RefreshListener>();
  try {
    XulLoader loader=new SwtXulLoader();
    ResourceBundle bundle=new XulSpoonResourceBundle(JobGraph.class);
    XulDomContainer container=loader.loadXul(XUL_FILE_JOB_GRAPH,bundle);
    container.addEventHandler(this);
    for (    XulOverlay overlay : SpoonPluginManager.getInstance().getOverlaysforContainer("job-graph")) {
      xulDomContainer.loadOverlay(overlay.getOverlayUri());
    }
    for (    XulEventHandler handler : SpoonPluginManager.getInstance().getEventHandlersforContainer("job-graph")) {
      xulDomContainer.addEventHandler(handler);
    }
    setXulDomContainer(container);
  }
 catch (  XulException e1) {
    log.logError(toString(),Const.getStackTracker(e1));
  }
  setLayout(new FormLayout());
  addToolBar();
  mainComposite=new Composite(this,SWT.NONE);
  mainComposite.setLayout(new FillLayout());
  Control toolbarControl=(Control)toolbar.getManagedObject();
  toolbarControl.setLayoutData(new FormData());
  toolbarControl.setParent(this);
  FormData fdMainComposite=new FormData();
  fdMainComposite.left=new FormAttachment(0,0);
  fdMainComposite.top=new FormAttachment((Control)toolbar.getManagedObject(),0);
  fdMainComposite.right=new FormAttachment(100,0);
  fdMainComposite.bottom=new FormAttachment(100,0);
  mainComposite.setLayoutData(fdMainComposite);
  sashForm=new SashForm(mainComposite,SWT.VERTICAL);
  canvas=new Canvas(sashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.NO_BACKGROUND| SWT.BORDER);
  sashForm.setWeights(new int[]{100});
  try {
    Document doc=xulDomContainer.getDocumentRoot();
    menuMap.put("job-graph-hop",(XulMenupopup)doc.getElementById("job-graph-hop"));
    menuMap.put("job-graph-note",(XulMenupopup)doc.getElementById("job-graph-note"));
    menuMap.put("job-graph-background",(XulMenupopup)doc.getElementById("job-graph-background"));
    menuMap.put("job-graph-entry",(XulMenupopup)doc.getElementById("job-graph-entry"));
  }
 catch (  Throwable t) {
    log.logError(Const.getStackTracker(t));
    new ErrorDialog(shell,BaseMessages.getString(PKG,"JobGraph.Exception.ErrorReadingXULFile.Title"),BaseMessages.getString(PKG,"JobGraph.Exception.ErrorReadingXULFile.Message",Spoon.XUL_FILE_MENUS),new Exception(t));
  }
  toolTip=new DefaultToolTip(canvas,ToolTip.NO_RECREATE,true);
  toolTip.setRespectMonitorBounds(true);
  toolTip.setRespectDisplayBounds(true);
  toolTip.setPopupDelay(350);
  toolTip.setShift(new org.eclipse.swt.graphics.Point(ConstUI.TOOLTIP_OFFSET,ConstUI.TOOLTIP_OFFSET));
  helpTip=new CheckBoxToolTip(canvas);
  helpTip.addCheckBoxToolTipListener(new CheckBoxToolTipListener(){
    public void checkBoxSelected(    boolean enabled){
      spoon.props.setShowingHelpToolTips(enabled);
    }
  }
);
  newProps();
  selectionRegion=null;
  hop_candidate=null;
  last_hop_split=null;
  selectedEntries=null;
  selectedNote=null;
  hori=canvas.getHorizontalBar();
  vert=canvas.getVerticalBar();
  hori.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  vert.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  hori.setThumb(100);
  vert.setThumb(100);
  hori.setVisible(true);
  vert.setVisible(true);
  setVisible(true);
  canvas.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      JobGraph.this.paintControl(e);
    }
  }
);
  selectedEntries=null;
  lastclick=null;
  canvas.addMouseListener(this);
  canvas.addMouseMoveListener(this);
  canvas.addMouseTrackListener(this);
  canvas.addMouseWheelListener(this);
  Transfer[] ttypes=new Transfer[]{XMLTransfer.getInstance()};
  DropTarget ddTarget=new DropTarget(canvas,DND.DROP_MOVE);
  ddTarget.setTransfer(ttypes);
  ddTarget.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
      drop_candidate=PropsUI.calculateGridPosition(getRealPosition(canvas,event.x,event.y));
      redraw();
    }
    public void dragLeave(    DropTargetEvent event){
      drop_candidate=null;
      redraw();
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
      drop_candidate=PropsUI.calculateGridPosition(getRealPosition(canvas,event.x,event.y));
      redraw();
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Point p=getRealPosition(canvas,event.x,event.y);
      try {
        DragAndDropContainer container=(DragAndDropContainer)event.data;
        String entry=container.getData();
switch (container.getType()) {
case DragAndDropContainer.TYPE_BASE_JOB_ENTRY:
{
            JobEntryCopy jge=spoon.newJobEntry(jobMeta,entry,false);
            if (jge != null) {
              PropsUI.setLocation(jge,p.x,p.y);
              jge.setDrawn();
              redraw();
              if (jobMeta.nrJobEntries() > 1 && jobMeta.nrJobEntries() < 5 && spoon.props.isShowingHelpToolTips()) {
                showHelpTip(p.x,p.y,BaseMessages.getString(PKG,"JobGraph.HelpToolTip.CreatingHops.Title"),BaseMessages.getString(PKG,"JobGraph.HelpToolTip.CreatingHops.Message"));
              }
            }
          }
        break;
case DragAndDropContainer.TYPE_JOB_ENTRY:
{
        JobEntryCopy jge=jobMeta.findJobEntry(entry,0,true);
        if (jge != null) {
          if (jge.isStart() && jge.isDrawn()) {
            showOnlyStartOnceMessage(shell);
            return;
          }
          boolean jge_changed=false;
          JobEntryCopy before=(JobEntryCopy)jge.clone_deep();
          JobEntryCopy newjge=jge;
          if (jge.isDrawn()) {
            newjge=(JobEntryCopy)jge.clone();
            if (newjge != null) {
              if (log.isDebug())               log.logDebug("entry aft = " + ((Object)jge.getEntry()).toString());
              newjge.setNr(jobMeta.findUnusedNr(newjge.getName()));
              jobMeta.addJobEntry(newjge);
              spoon.addUndoNew(jobMeta,new JobEntryCopy[]{newjge},new int[]{jobMeta.indexOfJobEntry(newjge)});
            }
 else {
              if (log.isDebug())               log.logDebug("jge is not cloned!");
            }
          }
 else {
            if (log.isDebug())             log.logDebug(jge.toString() + " is not drawn");
            jge_changed=true;
          }
          PropsUI.setLocation(newjge,p.x,p.y);
          newjge.setDrawn();
          if (jge_changed) {
            spoon.addUndoChange(jobMeta,new JobEntryCopy[]{before},new JobEntryCopy[]{newjge},new int[]{jobMeta.indexOfJobEntry(newjge)});
          }
          redraw();
          spoon.refreshTree();
          log.logBasic("DropTargetEvent","DROP " + newjge.toString() + "!, type="+ newjge.getEntry().getTypeId());
        }
 else {
          log.logError("Unknown job entry dropped onto the canvas.");
        }
      }
    break;
default :
  break;
}
}
 catch (Exception e) {
new ErrorDialog(shell,BaseMessages.getString(PKG,"JobGraph.Dialog.ErrorDroppingObject.Message"),BaseMessages.getString(PKG,"JobGraph.Dialog.ErrorDroppingObject.Title"),e);
}
}
public void dropAccept(DropTargetEvent event){
drop_candidate=null;
}
}
);
canvas.addKeyListener(this);
setBackground(GUIResource.getInstance().getColorBackground());
setControlStates();
final Timer timer=new Timer();
TimerTask timerTask=new TimerTask(){
public void run(){
setControlStates();
}
}
;
timer.schedule(timerTask,2000,1000);
addDisposeListener(new DisposeListener(){
public void widgetDisposed(DisposeEvent arg0){
timer.cancel();
}
}
);
}
