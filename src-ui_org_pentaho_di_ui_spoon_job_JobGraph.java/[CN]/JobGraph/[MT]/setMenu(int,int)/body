{
  currentMouseX=x;
  currentMouseY=y;
  final JobEntryCopy jobEntry=jobMeta.getJobEntryCopy(x,y,iconsize);
  setJobEntry(jobEntry);
  Document doc=xulDomContainer.getDocumentRoot();
  if (jobEntry != null) {
    XulMenupopup menu=(XulMenupopup)doc.getElementById("job-graph-entry");
    if (menu != null) {
      List<JobEntryCopy> selection=jobMeta.getSelectedEntries();
      int sels=selection.size();
      XulMenuitem item=(XulMenuitem)doc.getElementById("job-graph-entry-newhop");
      item.setDisabled(sels < 2);
      item=(XulMenuitem)doc.getElementById("job-graph-entry-checkpoint");
      item.setDisabled(!jobMeta.getCheckpointLogTable().isDefined());
      item.setSelected(jobEntry.isCheckpoint());
      JfaceMenupopup launchMenu=(JfaceMenupopup)doc.getElementById("job-graph-entry-launch-popup");
      String[] referencedObjects=jobEntry.getEntry().getReferencedObjectDescriptions();
      boolean[] enabledObjects=jobEntry.getEntry().isReferencedObjectEnabled();
      launchMenu.setDisabled(Const.isEmpty(referencedObjects));
      launchMenu.removeChildren();
      if (!Const.isEmpty(referencedObjects)) {
        for (int i=0; i < referencedObjects.length; i++) {
          final int index=i;
          String referencedObject=referencedObjects[i];
          Action action=new Action(referencedObject,Action.AS_DROP_DOWN_MENU){
            public void run(){
              loadReferencedObject(jobEntry,index);
            }
          }
;
          JfaceMenuitem child=new JfaceMenuitem(null,launchMenu,xulDomContainer,referencedObject,i,action);
          child.setLabel(referencedObject);
          child.setDisabled(!enabledObjects[i]);
        }
      }
      item=(XulMenuitem)doc.getElementById("job-graph-entry-align-snap");
      item.setAcceltext("ALT-HOME");
      item.setLabel(BaseMessages.getString(PKG,"JobGraph.PopupMenu.JobEntry.AllignDistribute.SnapToGrid") + ConstUI.GRID_SIZE + ")");
      item.setAccesskey("alt-home");
      XulMenu aMenu=(XulMenu)doc.getElementById("job-graph-entry-align");
      if (aMenu != null) {
        aMenu.setDisabled(sels < 1);
      }
      item=(XulMenuitem)doc.getElementById("job-graph-entry-detach");
      if (item != null) {
        item.setDisabled(!jobMeta.isEntryUsedInHops(jobEntry));
      }
      item=(XulMenuitem)doc.getElementById("job-graph-entry-hide");
      if (item != null) {
        item.setDisabled(!(jobEntry.isDrawn() && !jobMeta.isEntryUsedInHops(jobEntry)));
      }
      item=(XulMenuitem)doc.getElementById("job-graph-entry-delete");
      if (item != null) {
        item.setDisabled(!jobEntry.isDrawn());
      }
      item=(XulMenuitem)doc.getElementById("job-graph-entry-parallel");
      if (item != null) {
        item.setSelected(jobEntry.isLaunchingInParallel());
      }
      ConstUI.displayMenu(menu,canvas);
    }
  }
 else {
    final JobHopMeta hi=findJobHop(x,y);
    setCurrentHop(hi);
    if (hi != null) {
      XulMenupopup menu=(XulMenupopup)doc.getElementById("job-graph-hop");
      if (menu != null) {
        XulMenuitem miPopEvalUncond=(XulMenuitem)doc.getElementById("job-graph-hop-evaluation-uncond");
        XulMenuitem miPopEvalTrue=(XulMenuitem)doc.getElementById("job-graph-hop-evaluation-true");
        XulMenuitem miPopEvalFalse=(XulMenuitem)doc.getElementById("job-graph-hop-evaluation-false");
        XulMenuitem miDisHop=(XulMenuitem)doc.getElementById("job-graph-hop-enabled");
        if (miPopEvalUncond != null && miPopEvalTrue != null && miPopEvalFalse != null) {
          if (hi.isUnconditional()) {
            miPopEvalUncond.setSelected(true);
            miPopEvalTrue.setSelected(false);
            miPopEvalFalse.setSelected(false);
          }
 else {
            if (hi.getEvaluation()) {
              miPopEvalUncond.setSelected(false);
              miPopEvalTrue.setSelected(true);
              miPopEvalFalse.setSelected(false);
            }
 else {
              miPopEvalUncond.setSelected(false);
              miPopEvalTrue.setSelected(false);
              miPopEvalFalse.setSelected(true);
            }
          }
          if (!hi.getFromEntry().evaluates()) {
            miPopEvalTrue.setDisabled(true);
            miPopEvalFalse.setDisabled(true);
          }
 else {
            miPopEvalTrue.setDisabled(false);
            miPopEvalFalse.setDisabled(false);
          }
          if (!hi.getFromEntry().isUnconditional()) {
            miPopEvalUncond.setDisabled(true);
          }
 else {
            miPopEvalUncond.setDisabled(false);
          }
        }
        if (miDisHop != null) {
          if (hi.isEnabled())           miDisHop.setLabel(BaseMessages.getString(PKG,"JobGraph.PopupMenu.Hop.Disable"));
 else           miDisHop.setLabel(BaseMessages.getString(PKG,"JobGraph.PopupMenu.Hop.Enable"));
        }
        ConstUI.displayMenu((Menu)menu.getManagedObject(),canvas);
      }
    }
 else {
      final NotePadMeta ni=jobMeta.getNote(x,y);
      setCurrentNote(ni);
      if (ni != null) {
        XulMenupopup menu=(XulMenupopup)doc.getElementById("job-graph-note");
        if (menu != null) {
          ConstUI.displayMenu((Menu)menu.getManagedObject(),canvas);
        }
      }
 else {
        XulMenupopup menu=(XulMenupopup)doc.getElementById("job-graph-background");
        if (menu != null) {
          final String clipcontent=spoon.fromClipboard();
          XulMenuitem item=(XulMenuitem)doc.getElementById("job-graph-note-paste");
          if (item != null) {
            item.setDisabled(clipcontent == null);
          }
          ConstUI.displayMenu(menu,canvas);
        }
      }
    }
  }
}
