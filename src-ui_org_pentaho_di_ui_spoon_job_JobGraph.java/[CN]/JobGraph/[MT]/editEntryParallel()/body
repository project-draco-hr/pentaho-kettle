{
  JobEntryCopy je=getJobEntry();
  JobEntryCopy jeOld=(JobEntryCopy)je.clone_deep();
  je.setLaunchingInParallel(!je.isLaunchingInParallel());
  JobEntryCopy jeNew=(JobEntryCopy)je.clone_deep();
  spoon.addUndoChange(jobMeta,new JobEntryCopy[]{jeOld},new JobEntryCopy[]{jeNew},new int[]{jobMeta.indexOfJobEntry(jeNew)});
  jobMeta.setChanged();
  if (getJobEntry().isLaunchingInParallel()) {
    if ("Y".equalsIgnoreCase(spoon.props.getCustomParameter(STRING_PARALLEL_WARNING_PARAMETER,"Y"))) {
      MessageDialogWithToggle md=new MessageDialogWithToggle(shell,BaseMessages.getString(PKG,"JobGraph.ParallelJobEntriesWarning.DialogTitle"),null,BaseMessages.getString(PKG,"JobGraph.ParallelJobEntriesWarning.DialogMessage",Const.CR) + Const.CR,MessageDialog.WARNING,new String[]{BaseMessages.getString(PKG,"JobGraph.ParallelJobEntriesWarning.Option1")},0,BaseMessages.getString(PKG,"JobGraph.ParallelJobEntriesWarning.Option2"),"N".equalsIgnoreCase(spoon.props.getCustomParameter(STRING_PARALLEL_WARNING_PARAMETER,"Y")));
      MessageDialogWithToggle.setDefaultImage(GUIResource.getInstance().getImageSpoon());
      md.open();
      spoon.props.setCustomParameter(STRING_PARALLEL_WARNING_PARAMETER,md.getToggleState() ? "N" : "Y");
      spoon.props.saveProps();
    }
  }
  spoon.refreshGraph();
}
