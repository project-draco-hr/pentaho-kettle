{
  FieldAccessorUtl.ensureEmptyStringIsNotNull(false);
  final String fConcat="[" + KEY_ARG + "] & ["+ KEY_ARG2+ "]";
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"a","2"},"a2");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"a"," "},"a ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"a",""},"a");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"a",null},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{" ","2"}," 2");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{" "," "},"  ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{" ",""}," ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{" ",null},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"","2"},"2");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{""," "}," ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"",""},"");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{"",null},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{null,"2"},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{null," "},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{null,""},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),new ValueMetaString(KEY_ARG2)),new Object[]{null,null},null);
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_NONE)),new Object[]{" a  ","    2        "}," a      2        ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_LEFT)),new Object[]{" a  ","    2        "}," a  2        ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_RIGHT)),new Object[]{" a  ","    2        "}," a      2");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_BOTH)),new Object[]{" a  ","    2        "}," a  2");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_BOTH)),new Object[]{" a  "," "}," a  ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_BOTH)),new Object[]{" a  ",""}," a  ");
  assertStringFormula(fConcat,buildRowMeta(new ValueMetaString(KEY_ARG),buildVMString(KEY_ARG2,TRIM_TYPE_BOTH)),new Object[]{" a  ",null},null);
}
