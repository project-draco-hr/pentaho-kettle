{
  final int formulaType=ValueMetaInterface.TYPE_STRING;
  final FormulaMetaFunction function=new FormulaMetaFunction(KEY_RESULT,formula,formulaType,-1,-1,null);
  Assert.assertEquals(msg + ". check input data size",inputRowMeta.size(),inputRowData.length);
  final int inputSize=inputRowMeta.size();
  final FormulaMeta meta=new FormulaMeta();
  meta.setFormula(new FormulaMetaFunction[]{function});
  final TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,stepName);
  final List<RowMetaAndData> inputList=java.util.Collections.singletonList(new RowMetaAndData(inputRowMeta,inputRowData));
  List<RowMetaAndData> ret=TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,stepName,TransTestFactory.DUMMY_STEPNAME,inputList);
  Assert.assertNotNull(msg + ". So we have some results",ret);
  Assert.assertEquals(msg + ". We have one result row",1,ret.size());
  int resultIndex=inputSize;
  RowMetaAndData rmd=ret.get(0);
  Assert.assertEquals(msg + ". Result row includes input plus result columns",inputSize + 1,rmd.size());
  ValueMetaInterface resultValueMeta=rmd.getValueMeta(resultIndex);
  Assert.assertNotNull(resultValueMeta);
  Assert.assertEquals(msg + ". resultType",formulaType,resultValueMeta.getType());
  Assert.assertEquals(msg + ". resultName",KEY_RESULT,resultValueMeta.getName());
  Assert.assertEquals(msg + ". expectedResult.0",expectedResult,rmd.getString(resultIndex,null));
  Assert.assertEquals(msg + ". expectedResult.1",expectedResult,rmd.getString(KEY_RESULT,null));
}
