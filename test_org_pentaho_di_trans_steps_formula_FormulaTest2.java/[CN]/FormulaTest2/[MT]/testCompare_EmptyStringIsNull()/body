{
  FieldAccessorUtl.ensureEmptyStringIsNotNull(false);
  assertBooleanOperator("a","=","a",true);
  assertBooleanOperator("a","=","2",false);
  assertBooleanOperator("a","="," ",false);
  assertBooleanOperator("a","=","",false);
  assertBooleanOperator("a","=",null,null);
  assertBooleanOperator("2","=","a",false);
  assertBooleanOperator("2","=","2",true);
  assertBooleanOperator("2","="," ",false);
  assertBooleanOperator("2","=","",false);
  assertBooleanOperator("2","=",null,null);
  assertBooleanOperator(" ","=","a",false);
  assertBooleanOperator(" ","=","2",false);
  assertBooleanOperator(" ","="," ",true);
  assertBooleanOperator(" ","=","",false);
  assertBooleanOperator(" ","=",null,null);
  assertBooleanOperator("","=","a",false);
  assertBooleanOperator("","=","2",false);
  assertBooleanOperator("","="," ",false);
  assertBooleanOperator("","=","",true);
  assertBooleanOperator("","=",null,null);
  assertBooleanOperator(null,"=","a",null);
  assertBooleanOperator(null,"=","2",null);
  assertBooleanOperator(null,"="," ",null);
  assertBooleanOperator(null,"=","",null);
  assertBooleanOperator(null,"=",null,null);
  final String fEq="[" + KEY_ARG + "] = ["+ KEY_ARG2+ "]";
  assertBooleanFormula(fEq,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_RIGHT)),new Object[]{"  a","a        "},true);
  assertBooleanFormula(fEq,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_NONE)),new Object[]{"  ",""},true);
  assertBooleanOperator("a","<>","a",false);
  assertBooleanOperator("a","<>","2",true);
  assertBooleanOperator("a","<>"," ",true);
  assertBooleanOperator("a","<>","",true);
  assertBooleanOperator("a","<>",null,null);
  assertBooleanOperator("2","<>","a",true);
  assertBooleanOperator("2","<>","2",false);
  assertBooleanOperator("2","<>"," ",true);
  assertBooleanOperator("2","<>","",true);
  assertBooleanOperator("2","<>",null,null);
  assertBooleanOperator(" ","<>","a",true);
  assertBooleanOperator(" ","<>","2",true);
  assertBooleanOperator(" ","<>"," ",false);
  assertBooleanOperator(" ","<>","",true);
  assertBooleanOperator(" ","<>",null,null);
  assertBooleanOperator("","<>","a",true);
  assertBooleanOperator("","<>","2",true);
  assertBooleanOperator("","<>"," ",true);
  assertBooleanOperator("","<>","",false);
  assertBooleanOperator("","<>",null,null);
  assertBooleanOperator(null,"<>","a",null);
  assertBooleanOperator(null,"<>","2",null);
  assertBooleanOperator(null,"<>"," ",null);
  assertBooleanOperator(null,"<>","",null);
  assertBooleanOperator(null,"<>",null,null);
  final String fNeq="[" + KEY_ARG + "] <> ["+ KEY_ARG2+ "]";
  assertBooleanFormula(fNeq,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_RIGHT)),new Object[]{"  a","a        "},false);
  assertBooleanFormula(fNeq,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_NONE)),new Object[]{"  ",""},false);
  assertBooleanOperator("a","<","a",false);
  assertBooleanOperator("a","<","2",false);
  assertBooleanOperator("a","<"," ",false);
  assertBooleanOperator("a","<","",false);
  assertBooleanOperator("a","<",null,null);
  assertBooleanOperator("2","<","a",true);
  assertBooleanOperator("2","<","2",false);
  assertBooleanOperator("2","<"," ",false);
  assertBooleanOperator("2","<","",false);
  assertBooleanOperator("2","<",null,null);
  assertBooleanOperator(" ","<","a",true);
  assertBooleanOperator(" ","<","2",true);
  assertBooleanOperator(" ","<"," ",false);
  assertBooleanOperator(" ","<","",false);
  assertBooleanOperator(" ","<",null,null);
  assertBooleanOperator("","<","a",true);
  assertBooleanOperator("","<","2",true);
  assertBooleanOperator("","<"," ",true);
  assertBooleanOperator("","<","",false);
  assertBooleanOperator("","<",null,null);
  assertBooleanOperator(null,"<","a",null);
  assertBooleanOperator(null,"<","2",null);
  assertBooleanOperator(null,"<"," ",null);
  assertBooleanOperator(null,"<","",null);
  assertBooleanOperator(null,"<",null,null);
  final String fLt="[" + KEY_ARG + "] <> ["+ KEY_ARG2+ "]";
  assertBooleanFormula(fLt,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_RIGHT)),new Object[]{"  a","a        "},false);
  assertBooleanFormula(fLt,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_NONE)),new Object[]{"  ",""},false);
  assertBooleanFormula(fLt,buildRowMeta(buildVMString(KEY_ARG,TRIM_TYPE_LEFT),buildVMString(KEY_ARG2,TRIM_TYPE_NONE)),new Object[]{"  ","  "},true);
}
