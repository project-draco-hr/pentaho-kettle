{
  OperatingSystemMXBean operatingSystemMXBean=java.lang.management.ManagementFactory.getOperatingSystemMXBean();
  ThreadMXBean threadMXBean=java.lang.management.ManagementFactory.getThreadMXBean();
  RuntimeMXBean runtimeMXBean=java.lang.management.ManagementFactory.getRuntimeMXBean();
  int cores=Runtime.getRuntime().availableProcessors();
  long freeMemory=Runtime.getRuntime().freeMemory();
  long totalMemory=Runtime.getRuntime().totalMemory();
  String osArch=operatingSystemMXBean.getArch();
  String osName=operatingSystemMXBean.getName();
  String osVersion=operatingSystemMXBean.getVersion();
  double loadAvg=operatingSystemMXBean.getSystemLoadAverage();
  int threadCount=threadMXBean.getThreadCount();
  long allThreadsCpuTime=0L;
  long[] threadIds=threadMXBean.getAllThreadIds();
  for (int i=0; i < threadIds.length; i++) {
    allThreadsCpuTime+=threadMXBean.getThreadCpuTime(threadIds[i]);
  }
  long uptime=runtimeMXBean.getUptime();
  serverStatus.setCpuCores(cores);
  serverStatus.setCpuProcessTime(allThreadsCpuTime);
  serverStatus.setUptime(uptime);
  serverStatus.setThreadCount(threadCount);
  serverStatus.setLoadAvg(loadAvg);
  serverStatus.setOsName(osName);
  serverStatus.setOsVersion(osVersion);
  serverStatus.setOsArchitecture(osArch);
  serverStatus.setMemoryFree(freeMemory);
  serverStatus.setMemoryTotal(totalMemory);
}
