{
  CheckResult cr;
  if (prev != null && prev.size() > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is connected to previous one, receiving " + prev.size() + " fields",stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (int i=0; i < fieldName.length; i++) {
      int idx=prev.searchValueIndex(fieldName[i]);
      if (idx < 0) {
        error_message+="\t\t" + fieldName[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message="Sort keys that were not found in input stream:" + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      if (fieldName.length > 0) {
        cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All sort keys are found in the input stream.",stepMeta);
        remarks.add(cr);
      }
 else {
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No sort keys are entered.",stepMeta);
        remarks.add(cr);
      }
    }
    File f=new File(Const.replEnv(directory));
    if (f.exists()) {
      if (f.isDirectory()) {
        cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"[" + directory + "] exists and is a directory",stepMeta);
        remarks.add(cr);
      }
 else {
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"[" + directory + "] exists but is not a directory",stepMeta);
        remarks.add(cr);
      }
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Directory [" + directory + "] doesn't exist!",stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Couldn't find fields from previous steps, check the hops...!",stepMeta);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from other steps.",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No input received from other steps!",stepMeta);
    remarks.add(cr);
  }
}
