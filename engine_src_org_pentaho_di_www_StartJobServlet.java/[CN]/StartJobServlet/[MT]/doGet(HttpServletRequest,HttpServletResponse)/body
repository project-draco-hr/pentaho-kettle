{
  if (isJettyMode() && !request.getContextPath().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"StartJobServlet.Log.StartJobRequested"));
  String jobName=request.getParameter("name");
  String id=request.getParameter("id");
  boolean useXML="Y".equalsIgnoreCase(request.getParameter("xml"));
  response.setStatus(HttpServletResponse.SC_OK);
  Encoder encoder=ESAPI.encoder();
  PrintWriter out=response.getWriter();
  if (useXML) {
    response.setContentType("text/xml");
    response.setCharacterEncoding(Const.XML_ENCODING);
    out.print(XMLHandler.getXMLHeader(Const.XML_ENCODING));
  }
 else {
    response.setContentType("text/html;charset=UTF-8");
    out.println("<HTML>");
    out.println("<HEAD>");
    out.println("<TITLE>Start job</TITLE>");
    out.println("<META http-equiv=\"Refresh\" content=\"2;url=" + convertContextPath(GetStatusServlet.CONTEXT_PATH) + "?name="+ URLEncoder.encode(jobName,"UTF-8")+ "\">");
    out.println("<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
    out.println("</HEAD>");
    out.println("<BODY>");
  }
  try {
    Job job;
    CarteObjectEntry entry;
    if (Const.isEmpty(id)) {
      entry=getJobMap().getFirstCarteObjectEntry(jobName);
      if (entry == null) {
        job=null;
      }
 else {
        id=entry.getId();
        job=getJobMap().getJob(entry);
      }
    }
 else {
      entry=new CarteObjectEntry(jobName,id);
      job=getJobMap().getJob(entry);
    }
    if (job != null) {
      if (job.isInitialized() && !job.isActive()) {
        if (job.getRep() != null && !job.getRep().isConnected()) {
          if (job.getRep().getUserInfo() != null) {
            job.getRep().connect(job.getRep().getUserInfo().getLogin(),job.getRep().getUserInfo().getPassword());
          }
 else {
            job.getRep().connect(null,null);
          }
        }
synchronized (getJobMap()) {
          JobConfiguration jobConfiguration=getJobMap().getConfiguration(jobName);
          String carteObjectId=UUID.randomUUID().toString();
          SimpleLoggingObject servletLoggingObject=new SimpleLoggingObject(CONTEXT_PATH,LoggingObjectType.CARTE,null);
          servletLoggingObject.setContainerObjectId(carteObjectId);
          Job newJob=new Job(job.getRep(),job.getJobMeta(),servletLoggingObject);
          newJob.setLogLevel(job.getLogLevel());
          CentralLogStore.discardLines(job.getLogChannelId(),true);
          getJobMap().replaceJob(entry,newJob,jobConfiguration);
          job=newJob;
        }
      }
      runJob(job);
      String message=BaseMessages.getString(PKG,"StartJobServlet.Log.JobStarted",jobName);
      if (useXML) {
        out.println(new WebResult(WebResult.STRING_OK,message,id).getXML());
      }
 else {
        out.println("<H1>" + encoder.encodeForHTML(message) + "</H1>");
        out.println("<a href=\"" + convertContextPath(GetJobStatusServlet.CONTEXT_PATH) + "?name="+ URLEncoder.encode(jobName,"UTF-8")+ "&id="+ URLEncoder.encode(id,"UTF-8")+ "\">"+ BaseMessages.getString(PKG,"JobStatusServlet.BackToJobStatusPage")+ "</a><p>");
      }
    }
 else {
      String message=BaseMessages.getString(PKG,"StartJobServlet.Log.SpecifiedJobNotFound",jobName);
      if (useXML) {
        out.println(new WebResult(WebResult.STRING_ERROR,message));
      }
 else {
        out.println("<H1>" + encoder.encodeForHTML(message) + "</H1>");
        out.println("<a href=\"" + convertContextPath(GetStatusServlet.CONTEXT_PATH) + "\">"+ BaseMessages.getString(PKG,"TransStatusServlet.BackToStatusPage")+ "</a><p>");
      }
    }
  }
 catch (  Exception ex) {
    if (useXML) {
      out.println(new WebResult(WebResult.STRING_ERROR,BaseMessages.getString(PKG,"StartJobServlet.Error.UnexpectedError",Const.CR + Const.getStackTracker(ex))));
    }
 else {
      out.println("<p>");
      out.println("<pre>");
      out.println(encoder.encodeForHTML(Const.getStackTracker(ex)));
      out.println("</pre>");
    }
  }
  if (!useXML) {
    out.println("<p>");
    out.println("</BODY>");
    out.println("</HTML>");
  }
}
