{
  ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.keyFieldNr);
  Object valueData=rowData[data.keyFieldNr];
  String key=valueMeta.getCompatibleString(valueData);
  if (Utils.isEmpty(key)) {
    return;
  }
  List<Integer> indexes=data.keyValue.get(key);
  if (indexes == null) {
    return;
  }
  for (  Integer keyNr : indexes) {
    if (keyNr == null) {
      continue;
    }
    int idx=keyNr.intValue();
    DenormaliserTargetField field=meta.getDenormaliserTargetField()[idx];
    ValueMetaInterface sourceMeta=rowMeta.getValueMeta(data.fieldNameIndex[idx]);
    Object sourceData=rowData[data.fieldNameIndex[idx]];
    Object targetData;
    ValueMetaInterface targetMeta=data.outputRowMeta.getValueMeta(data.inputRowMeta.size() - data.removeNrs.length + idx);
    Object prevTargetData=data.targetResult[idx];
    ValueMetaInterface origSourceMeta=sourceMeta;
    if (targetMeta.isDate()) {
      sourceMeta=origSourceMeta.clone();
      sourceMeta.setConversionMetadata(getConversionMeta(field.getTargetFormat()));
    }
switch (field.getTargetAggregationType()) {
case DenormaliserTargetField.TYPE_AGGR_SUM:
      targetData=targetMeta.convertData(sourceMeta,sourceData);
    if (prevTargetData != null) {
      prevTargetData=ValueDataUtil.sum(targetMeta,prevTargetData,targetMeta,targetData);
    }
 else {
      prevTargetData=targetData;
    }
  break;
case DenormaliserTargetField.TYPE_AGGR_MIN:
if (sourceData == null && !minNullIsValued) {
  break;
}
if (sourceMeta.compare(sourceData,targetMeta,prevTargetData) < 0) {
prevTargetData=targetMeta.convertData(sourceMeta,sourceData);
}
break;
case DenormaliserTargetField.TYPE_AGGR_MAX:
if (sourceMeta.compare(sourceData,targetMeta,prevTargetData) > 0) {
prevTargetData=targetMeta.convertData(sourceMeta,sourceData);
}
break;
case DenormaliserTargetField.TYPE_AGGR_COUNT_ALL:
prevTargetData=++data.counters[idx];
break;
case DenormaliserTargetField.TYPE_AGGR_AVERAGE:
targetData=targetMeta.convertData(sourceMeta,sourceData);
if (!sourceMeta.isNull(sourceData)) {
prevTargetData=data.counters[idx]++;
if (data.sum[idx] == null) {
data.sum[idx]=targetData;
}
 else {
data.sum[idx]=ValueDataUtil.plus(targetMeta,data.sum[idx],targetMeta,targetData);
}
}
break;
case DenormaliserTargetField.TYPE_AGGR_CONCAT_COMMA:
String separator=",";
targetData=targetMeta.convertData(sourceMeta,sourceData);
if (prevTargetData != null) {
prevTargetData=prevTargetData + separator + targetData;
}
 else {
prevTargetData=targetData;
}
break;
case DenormaliserTargetField.TYPE_AGGR_NONE:
default :
prevTargetData=targetMeta.convertData(sourceMeta,sourceData);
break;
}
data.targetResult[idx]=prevTargetData;
}
}
