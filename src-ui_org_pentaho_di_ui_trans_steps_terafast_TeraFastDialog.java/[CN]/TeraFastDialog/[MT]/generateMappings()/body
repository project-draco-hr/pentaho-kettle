{
  RowMetaInterface sourceFields;
  RowMetaInterface targetFields;
  try {
    sourceFields=this.transMeta.getPrevStepFields(this.stepMeta);
  }
 catch (  KettleException e) {
    new ErrorDialog(this.shell,BaseMessages.getString(PKG,"TeraFastDialog.DoMapping.UnableToFindSourceFields.Title"),BaseMessages.getString(PKG,"TeraFastDialog.DoMapping.UnableToFindSourceFields.Message"),e);
    return;
  }
  this.meta.getTargetTable().setValue(this.wTable.getText());
  try {
    targetFields=this.meta.getRequiredFields(this.transMeta);
  }
 catch (  KettleException e) {
    new ErrorDialog(this.shell,BaseMessages.getString(PKG,"TeraFastDialog.DoMapping.UnableToFindTargetFields.Title"),BaseMessages.getString(PKG,"TeraFastDialog.DoMapping.UnableToFindTargetFields.Message"),e);
    return;
  }
  String[] inputNames=new String[sourceFields.size()];
  for (int i=0; i < sourceFields.size(); i++) {
    ValueMetaInterface value=sourceFields.getValueMeta(i);
    inputNames[i]=value.getName() + EnterMappingDialog.STRING_ORIGIN_SEPARATOR + value.getOrigin()+ ")";
  }
  List<SourceToTargetMapping> mappings=new ArrayList<SourceToTargetMapping>();
  StringBuffer missingSourceFields=new StringBuffer();
  StringBuffer missingTargetFields=new StringBuffer();
  int nrFields=this.wReturn.nrNonEmpty();
  for (int i=0; i < nrFields; i++) {
    TableItem item=this.wReturn.getNonEmpty(i);
    String source=item.getText(2);
    String target=item.getText(1);
    int sourceIndex=sourceFields.indexOfValue(source);
    if (sourceIndex < 0) {
      missingSourceFields.append(Const.CR + "   " + source+ " --> "+ target);
    }
    int targetIndex=targetFields.indexOfValue(target);
    if (targetIndex < 0) {
      missingTargetFields.append(Const.CR + "   " + source+ " --> "+ target);
    }
    if (sourceIndex < 0 || targetIndex < 0) {
      continue;
    }
    SourceToTargetMapping mapping=new SourceToTargetMapping(sourceIndex,targetIndex);
    mappings.add(mapping);
  }
  EnterMappingDialog d=new EnterMappingDialog(TeraFastDialog.this.shell,sourceFields.getFieldNames(),targetFields.getFieldNames(),mappings);
  mappings=d.open();
  if (mappings != null) {
    this.wReturn.table.removeAll();
    this.wReturn.table.setItemCount(mappings.size());
    for (int i=0; i < mappings.size(); i++) {
      SourceToTargetMapping mapping=mappings.get(i);
      TableItem item=this.wReturn.table.getItem(i);
      item.setText(2,sourceFields.getValueMeta(mapping.getSourcePosition()).getName());
      item.setText(1,targetFields.getValueMeta(mapping.getTargetPosition()).getName());
    }
    this.wReturn.setRowNums();
    this.wReturn.optWidth(true);
  }
}
