{
  TransExecutorParameters parameters=transExecutorMeta.getParameters();
  int nrLines=wTransExecutorParameters.nrNonEmpty();
  String variables[]=new String[nrLines];
  String fields[]=new String[nrLines];
  String input[]=new String[nrLines];
  parameters.setVariable(variables);
  parameters.setField(fields);
  parameters.setInput(input);
  for (int i=0; i < nrLines; i++) {
    TableItem item=wTransExecutorParameters.getNonEmpty(i);
    variables[i]=item.getText(1);
    fields[i]=item.getText(2);
    input[i]=item.getText(3);
  }
  parameters.setInheritingAllVariables(wInheritAll.getSelection());
  transExecutorMeta.setGroupSize(wGroupSize.getText());
  transExecutorMeta.setGroupField(wGroupField.getText());
  transExecutorMeta.setGroupTime(wGroupTime.getText());
  transExecutorMeta.setExecutionResultTargetStep(wExecutionResultTarget.getText());
  transExecutorMeta.setExecutionResultTargetStepMeta(transMeta.findStep(wExecutionResultTarget.getText()));
  transExecutorMeta.setExecutionTimeField(wExecutionTimeField.getText());
  transExecutorMeta.setExecutionResultField(wExecutionResultField.getText());
  transExecutorMeta.setExecutionNrErrorsField(wExecutionNrErrorsField.getText());
  transExecutorMeta.setExecutionLinesReadField(wExecutionLinesReadField.getText());
  transExecutorMeta.setExecutionLinesWrittenField(wExecutionLinesWrittenField.getText());
  transExecutorMeta.setExecutionLinesInputField(wExecutionLinesInputField.getText());
  transExecutorMeta.setExecutionLinesOutputField(wExecutionLinesOutputField.getText());
  transExecutorMeta.setExecutionLinesRejectedField(wExecutionLinesRejectedField.getText());
  transExecutorMeta.setExecutionLinesUpdatedField(wExecutionLinesUpdatedField.getText());
  transExecutorMeta.setExecutionLinesDeletedField(wExecutionLinesDeletedField.getText());
  transExecutorMeta.setExecutionFilesRetrievedField(wExecutionFilesRetrievedField.getText());
  transExecutorMeta.setExecutionExitStatusField(wExecutionExitStatusField.getText());
  transExecutorMeta.setExecutionLogTextField(wExecutionLogTextField.getText());
  transExecutorMeta.setExecutionLogChannelIdField(wExecutionLogChannelIdField.getText());
  transExecutorMeta.setResultFilesTargetStep(wResultFilesTarget.getText());
  transExecutorMeta.setResultFilesTargetStepMeta(transMeta.findStep(wResultFilesTarget.getText()));
  transExecutorMeta.setResultFilesFileNameField(wResultFileNameField.getText());
  transExecutorMeta.setResultRowsTargetStep(wResultRowsTarget.getText());
  transExecutorMeta.setResultRowsTargetStepMeta(transMeta.findStep(wResultRowsTarget.getText()));
  int nrFields=wResultRowsFields.nrNonEmpty();
  transExecutorMeta.setResultRowsField(new String[nrFields]);
  transExecutorMeta.setResultRowsType(new int[nrFields]);
  transExecutorMeta.setResultRowsLength(new int[nrFields]);
  transExecutorMeta.setResultRowsPrecision(new int[nrFields]);
  for (int i=0; i < nrFields; i++) {
    TableItem item=wResultRowsFields.getNonEmpty(i);
    transExecutorMeta.getResultRowsField()[i]=item.getText(1);
    transExecutorMeta.getResultRowsType()[i]=ValueMeta.getType(item.getText(2));
    transExecutorMeta.getResultRowsLength()[i]=Const.toInt(item.getText(3),-1);
    transExecutorMeta.getResultRowsPrecision()[i]=Const.toInt(item.getText(4),-1);
  }
}
