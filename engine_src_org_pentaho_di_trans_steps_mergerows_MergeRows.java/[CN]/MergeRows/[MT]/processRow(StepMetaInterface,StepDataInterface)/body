{
  meta=(MergeRowsMeta)smi;
  data=(MergeRowsData)sdi;
  if (first) {
    first=false;
    List<StreamInterface> infoStreams=meta.getStepIOMeta().getInfoStreams();
    data.oneRowSet=findInputRowSet(infoStreams.get(0).getStepname());
    data.twoRowSet=findInputRowSet(infoStreams.get(1).getStepname());
    data.one=getRowFrom(data.oneRowSet);
    data.two=getRowFrom(data.twoRowSet);
    try {
      checkInputLayoutValid(data.oneRowSet.getRowMeta(),data.twoRowSet.getRowMeta());
    }
 catch (    KettleRowException e) {
      throw new KettleException(BaseMessages.getString(PKG,"MergeRows.Exception.InvalidLayoutDetected"),e);
    }
    if (data.one != null) {
      data.keyNrs=new int[meta.getKeyFields().length];
      for (int i=0; i < data.keyNrs.length; i++) {
        data.keyNrs[i]=data.oneRowSet.getRowMeta().indexOfValue(meta.getKeyFields()[i]);
        if (data.keyNrs[i] < 0) {
          String message=BaseMessages.getString(PKG,"MergeRows.Exception.UnableToFindFieldInReferenceStream",meta.getKeyFields()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
    if (data.two != null) {
      data.valueNrs=new int[meta.getValueFields().length];
      for (int i=0; i < data.valueNrs.length; i++) {
        data.valueNrs[i]=data.twoRowSet.getRowMeta().indexOfValue(meta.getValueFields()[i]);
        if (data.valueNrs[i] < 0) {
          String message=BaseMessages.getString(PKG,"MergeRows.Exception.UnableToFindFieldInReferenceStream",meta.getValueFields()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
  }
  if (log.isRowLevel())   logRowlevel(BaseMessages.getString(PKG,"MergeRows.Log.DataInfo",data.one + "") + data.two);
  if (data.one == null && data.two == null) {
    setOutputDone();
    return false;
  }
  if (data.outputRowMeta == null) {
    data.outputRowMeta=new RowMeta();
    if (data.one != null) {
      meta.getFields(data.outputRowMeta,getStepname(),new RowMetaInterface[]{data.oneRowSet.getRowMeta()},null,this);
    }
 else {
      meta.getFields(data.outputRowMeta,getStepname(),new RowMetaInterface[]{data.twoRowSet.getRowMeta()},null,this);
    }
  }
  Object[] outputRow;
  int outputIndex;
  String flagField=null;
  if (data.one == null && data.two != null) {
    outputRow=data.two;
    outputIndex=data.twoRowSet.getRowMeta().size();
    flagField=VALUE_NEW;
    data.two=getRowFrom(data.twoRowSet);
  }
 else   if (data.one != null && data.two == null) {
    outputRow=data.one;
    outputIndex=data.oneRowSet.getRowMeta().size();
    flagField=VALUE_DELETED;
    data.one=getRowFrom(data.oneRowSet);
  }
 else {
    int compare=data.oneRowSet.getRowMeta().compare(data.one,data.two,data.keyNrs);
    if (compare == 0) {
      int compareValues=data.oneRowSet.getRowMeta().compare(data.one,data.two,data.valueNrs);
      if (compareValues == 0) {
        outputRow=data.one;
        outputIndex=data.oneRowSet.getRowMeta().size();
        flagField=VALUE_IDENTICAL;
      }
 else {
        outputRow=data.two;
        outputIndex=data.twoRowSet.getRowMeta().size();
        flagField=VALUE_CHANGED;
      }
      data.one=getRowFrom(data.oneRowSet);
      data.two=getRowFrom(data.twoRowSet);
    }
 else {
      if (compare < 0) {
        outputRow=data.one;
        outputIndex=data.oneRowSet.getRowMeta().size();
        flagField=VALUE_DELETED;
        data.one=getRowFrom(data.oneRowSet);
      }
 else {
        outputRow=data.two;
        outputIndex=data.twoRowSet.getRowMeta().size();
        flagField=VALUE_NEW;
        data.two=getRowFrom(data.twoRowSet);
      }
    }
  }
  putRow(data.outputRowMeta,RowDataUtil.addValueData(outputRow,outputIndex,flagField));
  if (checkFeedback(getLinesRead())) {
    if (log.isBasic())     logBasic(BaseMessages.getString(PKG,"MergeRows.LineNumber") + getLinesRead());
  }
  return true;
}
