{
  CheckResult cr;
  String error_message="";
  if (databaseMeta != null) {
    Database db=new Database(this,databaseMeta);
    db.shareVariablesWith(transMeta);
    try {
      db.connect();
      if (!Const.isEmpty(tableName)) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.TableNameOK"),stepMeta);
        remarks.add(cr);
        boolean first=true;
        boolean error_found=false;
        error_message="";
        String schemaTable=databaseMeta.getQuotedSchemaTableCombination(transMeta.environmentSubstitute(schemaName),transMeta.environmentSubstitute(tableName));
        RowMetaInterface r=db.getTableFields(schemaTable);
        if (r != null) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.TableExists"),stepMeta);
          remarks.add(cr);
          first=true;
          error_found=false;
          error_message="";
          for (int i=0; i < fieldTable.length; i++) {
            String field=fieldTable[i];
            ValueMetaInterface v=r.searchValueMeta(field);
            if (v == null) {
              if (first) {
                first=false;
                error_message+=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.MissingFieldsToLoadInTargetTable") + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + field + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.AllFieldsFoundInTargetTable"),stepMeta);
          }
          remarks.add(cr);
        }
 else {
          error_message=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.CouldNotReadTableInfo");
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
          remarks.add(cr);
        }
      }
      if (prev != null && prev.size() > 0) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.StepReceivingDatas",prev.size() + ""),stepMeta);
        remarks.add(cr);
        boolean first=true;
        error_message="";
        boolean error_found=false;
        for (int i=0; i < fieldStream.length; i++) {
          ValueMetaInterface v=prev.searchValueMeta(fieldStream[i]);
          if (v == null) {
            if (first) {
              first=false;
              error_message+=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.MissingFieldsInInput") + Const.CR;
            }
            error_found=true;
            error_message+="\t\t" + fieldStream[i] + Const.CR;
          }
        }
        if (error_found) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
        }
 else {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.AllFieldsFoundInInput"),stepMeta);
        }
        remarks.add(cr);
      }
 else {
        error_message=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.MissingFieldsInInput3") + Const.CR;
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
    }
 catch (    KettleException e) {
      error_message=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.DatabaseErrorOccurred") + e.getMessage();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 finally {
      db.disconnect();
    }
  }
 else {
    error_message=BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.InvalidConnection");
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.StepReceivingInfoFromOtherSteps"),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"LucidDBBulkLoaderMeta.CheckResult.NoInputError"),stepMeta);
    remarks.add(cr);
  }
}
