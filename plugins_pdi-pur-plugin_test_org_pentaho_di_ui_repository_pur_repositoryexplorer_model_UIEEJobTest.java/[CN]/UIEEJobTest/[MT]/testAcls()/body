{
  final String owner="owner";
  final String role="role";
  ObjectRecipient mockObjectRecipient=mock(ObjectRecipient.class);
  when(mockObjectRecipient.getName()).thenReturn(owner);
  ObjectAcl mockAcl=mock(ObjectAcl.class);
  when(mockAcl.getOwner()).thenReturn(mockObjectRecipient);
  when(mockAclService.getAcl(mockObjectId,false)).thenReturn(mockAcl);
  uiJob.clearAcl();
  UIRepositoryObjectAcls acls=new UIRepositoryObjectAcls();
  uiJob.getAcls(acls);
  verify(mockAclService).getAcl(mockObjectId,false);
  assertEquals(owner,acls.getOwner().getName());
  acls=new UIRepositoryObjectAcls();
  RepositoryObjectAcl repObjectAcl=new RepositoryObjectAcl(new RepositoryObjectRecipient(role,Type.ROLE));
  acls.setObjectAcl(new RepositoryObjectAcl(new RepositoryObjectRecipient(role,Type.ROLE)));
  uiJob.setAcls(acls);
  verify(mockAclService).setAcl(mockObjectId,repObjectAcl);
  when(mockAclService.getAcl(mockObjectId,false)).thenThrow(new KettleException(""));
  uiJob.clearAcl();
  try {
    uiJob.getAcls(acls);
    fail("Expected an exception");
  }
 catch (  AccessDeniedException e) {
  }
  doThrow(new KettleException("")).when(mockAclService).setAcl(any(ObjectId.class),any(RepositoryObjectAcl.class));
  try {
    uiJob.setAcls(acls);
    fail("Expected an exception");
  }
 catch (  AccessDeniedException e) {
  }
}
