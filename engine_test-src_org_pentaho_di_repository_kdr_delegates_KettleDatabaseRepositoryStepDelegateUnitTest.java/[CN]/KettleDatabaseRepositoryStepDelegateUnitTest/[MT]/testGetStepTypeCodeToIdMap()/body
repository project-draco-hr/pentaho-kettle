{
  KettleDatabaseRepository repository=mock(KettleDatabaseRepository.class);
  KettleDatabaseRepositoryConnectionDelegate connectionDelegate=mock(KettleDatabaseRepositoryConnectionDelegate.class);
  repository.connectionDelegate=connectionDelegate;
  DatabaseMeta databaseMeta=mock(DatabaseMeta.class);
  when(connectionDelegate.getDatabaseMeta()).thenReturn(databaseMeta);
  when(databaseMeta.quoteField(anyString())).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return "QUOTE_" + String.valueOf(invocationOnMock.getArguments()[0] + "_QUOTE");
    }
  }
);
  when(databaseMeta.getQuotedSchemaTableCombination(anyString(),anyString())).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return "QUOTE_" + String.valueOf(invocationOnMock.getArguments()[0]) + "____"+ String.valueOf(invocationOnMock.getArguments()[1] + "_QUOTE");
    }
  }
);
  when(connectionDelegate.getDatabaseMeta()).thenReturn(databaseMeta);
  KettleDatabaseRepositoryStepDelegate kettleDatabaseRepositoryStepDelegate=new KettleDatabaseRepositoryStepDelegate(repository);
  Map map=mock(Map.class);
  when(connectionDelegate.getValueToIdMap(kettleDatabaseRepositoryStepDelegate.quoteTable(KettleDatabaseRepository.TABLE_R_STEP_TYPE),kettleDatabaseRepositoryStepDelegate.quote(KettleDatabaseRepository.FIELD_STEP_TYPE_ID_STEP_TYPE),kettleDatabaseRepositoryStepDelegate.quote(KettleDatabaseRepository.FIELD_STEP_TYPE_CODE))).thenReturn(map);
  assertEquals(map,kettleDatabaseRepositoryStepDelegate.getStepTypeCodeToIdMap());
}
