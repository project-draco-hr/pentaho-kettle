{
  String value=null;
  JsonNode jsonDoc;
  if (!data.realBlocName.isEmpty()) {
    ObjectNode jsonObj=data.mapper.createObjectNode();
    if (data.nrRowsInBloc == 1) {
      if (data.jsonArray.size() > 0) {
        jsonObj.put(data.realBlocName,data.jsonArray.get(0));
      }
 else {
        jsonObj.put(data.realBlocName,data.mapper.createObjectNode());
      }
    }
 else {
      jsonObj.put(data.realBlocName,data.jsonArray);
    }
    jsonDoc=jsonObj;
  }
 else {
    if (data.nrRowsInBloc == 1) {
      if (data.jsonArray.size() > 0) {
        jsonDoc=data.jsonArray.get(0);
      }
 else {
        jsonDoc=data.mapper.createObjectNode();
      }
    }
 else {
      jsonDoc=data.jsonArray;
    }
  }
  try {
    value=data.mapper.writeValueAsString(jsonDoc);
  }
 catch (  Exception e) {
    throw new KettleStepException("Cannot encode JSON",e);
  }
  boolean notLastCall=rowData != null;
  if (notLastCall && data.outputValue) {
    Object[] outputRowData=RowDataUtil.addValueData(rowData,data.inputRowMetaSize,value);
    putRow(data.outputRowMeta,outputRowData);
    incrementLinesOutput();
  }
  if (data.writeToFile) {
    if (!openNewFile()) {
      throw new KettleStepException(BaseMessages.getString(PKG,"JsonOutput.Error.OpenNewFile",buildFilename()));
    }
    try {
      System.out.println(value);
      data.writer.write(value);
    }
 catch (    Exception e) {
      throw new KettleStepException(BaseMessages.getString(PKG,"JsonOutput.Error.Writing"),e);
    }
  }
  data.rowsAreSafe=true;
  if (notLastCall) {
    data.jsonArray=data.mapper.createArrayNode();
  }
}
