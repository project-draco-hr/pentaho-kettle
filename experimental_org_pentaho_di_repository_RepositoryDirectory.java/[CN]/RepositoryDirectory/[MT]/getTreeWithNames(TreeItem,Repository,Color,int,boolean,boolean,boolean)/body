{
  ti.setText(getDirectoryName());
  ti.setForeground(dircolor);
  for (int i=0; i < getNrSubdirectories(); i++) {
    RepositoryDirectory subdir=getSubdirectory(i);
    TreeItem subti=new TreeItem(ti,SWT.NONE);
    subdir.getTreeWithNames(subti,rep,dircolor,sortPosition,ascending,getTransformations,getJobs);
  }
  try {
    List repositoryObjects=new ArrayList();
    if (getTransformations) {
      List repositoryTransformations=rep.getTransformationObjects(getID());
      if (repositoryTransformations != null) {
        repositoryObjects.addAll(repositoryTransformations);
      }
    }
    if (getJobs) {
      List repositoryJobs=rep.getJobObjects(getID());
      if (repositoryJobs != null) {
        repositoryObjects.addAll(repositoryJobs);
      }
    }
    RepositoryObject.sortRepositoryObjects(repositoryObjects,sortPosition,ascending);
    for (int i=0; i < repositoryObjects.size(); i++) {
      TreeItem tiObject=new TreeItem(ti,SWT.NONE);
      RepositoryObject repositoryObject=(RepositoryObject)repositoryObjects.get(i);
      repositoryObject.setTreeItem(tiObject);
    }
  }
 catch (  KettleException dbe) {
    throw new KettleDatabaseException("Unable to populate tree with repository objects",dbe);
  }
  ti.setExpanded(isRoot());
}
