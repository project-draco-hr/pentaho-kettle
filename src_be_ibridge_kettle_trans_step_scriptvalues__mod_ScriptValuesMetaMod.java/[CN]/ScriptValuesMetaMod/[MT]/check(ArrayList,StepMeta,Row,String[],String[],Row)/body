{
  boolean error_found=false;
  String error_message="";
  CheckResult cr;
  Context jscx;
  Scriptable jsscope;
  Script jsscript;
  jscx=Context.enter();
  jsscope=jscx.initStandardObjects(null);
  jscx.setOptimizationLevel(-1);
  String strActiveStartScriptName="";
  String strActiveEndScriptName="";
  String strActiveScript="";
  String strActiveStartScript="";
  String strActiveEndScript="";
  if (jsScripts.length > 0) {
    for (int i=0; i < jsScripts.length; i++) {
      if (jsScripts[i].isTransformScript()) {
        strActiveScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isStartScript()) {
        strActiveStartScriptName=jsScripts[i].getScriptName();
        strActiveStartScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isEndScript()) {
        strActiveEndScriptName=jsScripts[i].getScriptName();
        strActiveEndScript=jsScripts[i].getScript();
      }
    }
  }
  if (prev != null && prev.size() > 0 && strActiveScript.length() > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,("ScriptValuesMeta.CheckResult.ConnectedStepOK"),stepinfo);
    remarks.add(cr);
    for (int i=0; i < getNumberOfJSScripts(); i++) {
      Scriptable jsR=Context.toObject(jsScripts[i].getScript(),jsscope);
      jsscope.put(jsScripts[i].getScriptName(),jsscope,jsR);
    }
    try {
      if (getAddClasses() != null) {
        for (int i=0; i < getAddClasses().length; i++) {
          Object jsOut=Context.javaToJS(getAddClasses()[i].getAddObject(),jsscope);
          ScriptableObject.putProperty(jsscope,getAddClasses()[i].getJSName(),jsOut);
        }
      }
    }
 catch (    Exception e) {
      error_message=("Coundln't not add JavaClasses to Context! Error:");
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    try {
      Context.javaToJS(ScriptValuesAddedFunctions.class,jsscope);
      ((ScriptableObject)jsscope).defineFunctionProperties(ScriptValuesAddedFunctions.jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
    }
 catch (    Exception ex) {
      error_message="Coundln't not add Default Functions! Error:" + Const.CR + ex.toString();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      jsscope.put("SKIP_TRANSFORMATION",jsscope,new Integer(ScriptValuesMod.SKIP_TRANSFORMATION));
      jsscope.put("ABORT_TRANSFORMATION",jsscope,new Integer(ScriptValuesMod.ABORT_TRANSFORMATION));
      jsscope.put("ERROR_TRANSFORMATION",jsscope,new Integer(ScriptValuesMod.ERROR_TRANSFORMATION));
      jsscope.put("CONTINUE_TRANSFORMATION",jsscope,new Integer(ScriptValuesMod.CONTINUE_TRANSFORMATION));
    }
 catch (    Exception ex) {
      error_message="Coundln't not add Transformation Constants! Error:" + Const.CR + ex.toString();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      ScriptableObject.defineClass(jsscope,tranVar.class);
      for (int i=0; i < prev.size(); i++) {
        Value val=prev.getValue(i);
        if (val.isDate())         val.setValue(new Date());
        if (val.isString())         val.setValue("000000000");
        Object[] arg={new String(val.getName())};
        tranVar objTV=(tranVar)jscx.newObject(jsscope,"tranVar",arg);
        objTV.setValue(val);
        jsscope.put(val.getName(),jsscope,objTV);
      }
    }
 catch (    Exception ev) {
      error_message="Coundln't not add Input fields to Script! Error:" + Const.CR + ev.toString();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    try {
      if (strActiveStartScript != null && strActiveStartScript.length() > 0) {
        jscx.evaluateString(jsscope,strActiveStartScript,"trans_Start",1,null);
        error_message="Found Start Script. " + strActiveStartScriptName + " Processing OK";
        cr=new CheckResult(CheckResult.TYPE_RESULT_OK,error_message,stepinfo);
        remarks.add(cr);
      }
    }
 catch (    Exception e) {
      error_message="Coundln't not processing Start Script! Error:" + Const.CR + e.toString();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      jsscript=jscx.compileString(strActiveScript,"script",1,null);
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"ScriptValuesMeta.CheckResult.ScriptCompiledOK",stepinfo);
      remarks.add(cr);
      try {
        jsscript.exec(jscx,jsscope);
        cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"ScriptValuesMeta.CheckResult.ScriptCompiledOK2",stepinfo);
        remarks.add(cr);
        if (name.length > 0) {
          StringBuffer message=new StringBuffer("ScriptValuesMeta.CheckResult.FailedToGetValues");
          if (error_found) {
            cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,message.toString(),stepinfo);
          }
 else {
            cr=new CheckResult(CheckResult.TYPE_RESULT_OK,message.toString(),stepinfo);
          }
          remarks.add(cr);
        }
      }
 catch (      JavaScriptException jse) {
        Context.exit();
        error_message=("ScriptValuesMeta.CheckResult.CouldNotExecuteScript") + Const.CR + jse.toString();
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
catch (      Exception e) {
        Context.exit();
        error_message=("ScriptValuesMeta.CheckResult.CouldNotExecuteScript2") + Const.CR + e.toString();
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
      try {
        if (strActiveEndScript != null && strActiveEndScript.length() > 0) {
          jscx.evaluateString(jsscope,strActiveEndScript,"trans_End",1,null);
          error_message="Found End Script. " + strActiveEndScriptName + " Processing OK";
          cr=new CheckResult(CheckResult.TYPE_RESULT_OK,error_message,stepinfo);
          remarks.add(cr);
        }
      }
 catch (      Exception e) {
        error_message="Coundln't not processing End Script! Error:" + Const.CR + e.toString();
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
      ;
    }
 catch (    Exception e) {
      Context.exit();
      error_message=("ScriptValuesMeta.CheckResult.CouldNotCompileScript") + Const.CR + e.toString();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
  }
 else {
    Context.exit();
    error_message=("ScriptValuesMeta.CheckResult.CouldNotGetFieldsFromPreviousStep");
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,("ScriptValuesMeta.CheckResult.ConnectedStepOK2"),stepinfo);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,("ScriptValuesMeta.CheckResult.NoInputReceived"),stepinfo);
    remarks.add(cr);
  }
}
