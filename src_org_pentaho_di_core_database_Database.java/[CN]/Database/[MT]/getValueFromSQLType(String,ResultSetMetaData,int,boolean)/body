{
  int length=-1;
  int precision=-1;
  int valtype=ValueMetaInterface.TYPE_NONE;
  boolean isClob=false;
  int type=rm.getColumnType(i);
switch (type) {
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.LONGVARCHAR:
    valtype=ValueMetaInterface.TYPE_STRING;
  if (!ignoreLength)   length=rm.getColumnDisplaySize(i);
break;
case java.sql.Types.CLOB:
valtype=ValueMetaInterface.TYPE_STRING;
length=DatabaseMeta.CLOB_LENGTH;
isClob=true;
break;
case java.sql.Types.BIGINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=15;
break;
case java.sql.Types.INTEGER:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=9;
break;
case java.sql.Types.SMALLINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=4;
break;
case java.sql.Types.TINYINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=2;
break;
case java.sql.Types.DECIMAL:
case java.sql.Types.DOUBLE:
case java.sql.Types.FLOAT:
case java.sql.Types.REAL:
case java.sql.Types.NUMERIC:
valtype=ValueMetaInterface.TYPE_NUMBER;
length=rm.getPrecision(i);
precision=rm.getScale(i);
if (length >= 126) length=-1;
if (precision >= 126) precision=-1;
if (type == java.sql.Types.DOUBLE || type == java.sql.Types.FLOAT || type == java.sql.Types.REAL) {
if (precision == 0) {
precision=-1;
}
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_POSTGRES && type == java.sql.Types.DOUBLE && precision == 16 && length == 16) {
precision=-1;
length=-1;
}
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_MYSQL) {
if (precision >= length) {
precision=-1;
length=-1;
}
}
}
 else {
if (precision == 0 && length < 18 && length > 0) {
valtype=ValueMetaInterface.TYPE_INTEGER;
}
}
if (length > 18 || precision > 18) valtype=ValueMetaInterface.TYPE_BIGNUMBER;
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE) {
if (precision == 0 && length == 38) {
valtype=ValueMetaInterface.TYPE_INTEGER;
}
if (precision <= 0 && length <= 0) {
valtype=ValueMetaInterface.TYPE_BIGNUMBER;
length=-1;
precision=-1;
}
}
break;
case java.sql.Types.DATE:
case java.sql.Types.TIME:
case java.sql.Types.TIMESTAMP:
valtype=ValueMetaInterface.TYPE_DATE;
break;
case java.sql.Types.BOOLEAN:
case java.sql.Types.BIT:
valtype=ValueMetaInterface.TYPE_BOOLEAN;
break;
case java.sql.Types.BINARY:
case java.sql.Types.BLOB:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
valtype=ValueMetaInterface.TYPE_BINARY;
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_DB2 && (2 * rm.getPrecision(i)) == rm.getColumnDisplaySize(i)) {
length=rm.getPrecision(i);
}
 else if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE && (type == java.sql.Types.VARBINARY || type == java.sql.Types.LONGVARBINARY)) {
valtype=ValueMetaInterface.TYPE_STRING;
length=rm.getColumnDisplaySize(i);
}
 else {
length=-1;
}
precision=-1;
break;
default :
valtype=ValueMetaInterface.TYPE_STRING;
precision=rm.getScale(i);
break;
}
String comments=rm.getColumnLabel(i);
ValueMetaInterface v=new ValueMeta(name,valtype);
v.setLength(length);
v.setPrecision(precision);
v.setComments(comments);
v.setLargeTextField(isClob);
return v;
}
