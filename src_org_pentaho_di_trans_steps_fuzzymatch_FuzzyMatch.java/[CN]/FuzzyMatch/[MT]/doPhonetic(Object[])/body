{
  Object[] rowData=buildEmptyRow();
  Iterator<Object[]> it=data.look.iterator();
  String lookupValueMF=null;
  Object o=row[data.indexOfMainField];
  String lookupvalue=(String)o;
  lookupValueMF=(new Metaphone()).metaphone(lookupvalue);
  while (it.hasNext()) {
    Object[] cachedData=(Object[])it.next();
    String cacheValue=(String)cachedData[0];
    String cacheValueMF="";
switch (meta.getAlgorithmType()) {
case FuzzyMatchMeta.OPERATION_TYPE_METAPHONE:
      cacheValueMF=(new Metaphone()).metaphone(cacheValue);
    break;
case FuzzyMatchMeta.OPERATION_TYPE_DOUBLE_METAPHONE:
  cacheValueMF=((new DoubleMetaphone()).doubleMetaphone(cacheValue));
break;
case FuzzyMatchMeta.OPERATION_TYPE_SOUNDEX:
cacheValueMF=(new Soundex()).encode(cacheValue);
break;
case FuzzyMatchMeta.OPERATION_TYPE_REFINED_SOUNDEX:
cacheValueMF=(new RefinedSoundex()).encode(cacheValue);
break;
default :
break;
}
if (lookupValueMF.equals(cacheValueMF)) {
int index=0;
rowData[index++]=cacheValue;
if (data.addValueFieldName) {
rowData[index++]=cacheValueMF;
}
if (data.addAdditionalFields) {
for (int i=0; i < meta.getValue().length; i++) {
int nf=i + index;
int nr=i + 1;
rowData[nf]=cachedData[nr];
}
}
}
}
return rowData;
}
