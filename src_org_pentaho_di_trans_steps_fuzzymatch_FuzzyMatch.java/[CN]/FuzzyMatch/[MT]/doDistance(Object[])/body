{
  Object[] rowData=buildEmptyRow();
  Iterator<Object[]> it=data.look.iterator();
  long distance=-1;
  Object o=row[data.indexOfMainField];
  String lookupvalue=(o == null ? "" : (String)o);
  while (it.hasNext()) {
    Object[] cachedData=(Object[])it.next();
    String cacheValue=(String)cachedData[0];
    int cdistance=-1;
    String usecacheValue=cacheValue;
    String uselookupvalue=lookupvalue;
    if (!meta.isCaseSensitive()) {
      usecacheValue=cacheValue.toLowerCase();
      uselookupvalue=lookupvalue.toLowerCase();
    }
switch (meta.getAlgorithmType()) {
case FuzzyMatchMeta.OPERATION_TYPE_DAMERAU_LEVENSHTEIN:
      cdistance=Utils.getDamerauLevenshteinDistance(usecacheValue,uselookupvalue);
    break;
case FuzzyMatchMeta.OPERATION_TYPE_NEEDLEMAN_WUNSH:
  cdistance=Math.abs((int)new NeedlemanWunsch().score(usecacheValue,uselookupvalue));
break;
default :
cdistance=StringUtils.getLevenshteinDistance(usecacheValue,uselookupvalue);
break;
}
if (data.minimalDistance <= cdistance && cdistance <= data.maximalDistance) {
if (meta.isGetCloserValue()) {
if (cdistance < distance || distance == -1) {
distance=cdistance;
int index=0;
rowData[index++]=cacheValue;
if (data.addValueFieldName) {
rowData[index++]=distance;
}
if (data.addAdditionalFields) {
for (int i=0; i < meta.getValue().length; i++) {
  int nr=i + 1;
  int nf=i + index;
  rowData[nf]=cachedData[nr];
}
}
}
}
 else {
if (rowData[0] == null) rowData[0]=cacheValue;
 else rowData[0]=(String)rowData[0] + data.valueSeparator + cacheValue;
}
}
}
return rowData;
}
