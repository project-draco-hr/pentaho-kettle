{
  meta=(CsvInputMeta)smi;
  data=(CsvInputData)sdi;
  if (first) {
    first=false;
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (data.filenames == null) {
      getFilenamesFromPreviousSteps();
    }
    data.parallel=meta.isRunningInParallel() && data.totalNumberOfSteps > 1;
    data.convertRowMeta=data.outputRowMeta.clone();
    for (    ValueMetaInterface valueMeta : data.convertRowMeta.getValueMetaList()) {
      valueMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_BINARY_STRING);
    }
    data.filenameFieldIndex=-1;
    if (!Const.isEmpty(meta.getFilenameField()) && meta.isIncludingFilename()) {
      data.filenameFieldIndex=meta.getInputFields().length;
    }
    data.rownumFieldIndex=-1;
    if (!Const.isEmpty(meta.getRowNumField())) {
      data.rownumFieldIndex=meta.getInputFields().length;
      if (data.filenameFieldIndex >= 0) {
        data.rownumFieldIndex++;
      }
    }
    if (data.parallel) {
      prepareToRunInParallel();
    }
    if (!openNextFile()) {
      setOutputDone();
      return false;
    }
  }
  if (data.parallel) {
    if (data.totalBytesRead > data.blockToRead) {
      setOutputDone();
      return false;
    }
  }
  try {
    Object[] outputRowData=readOneRow(true);
    if (outputRowData == null) {
      if (openNextFile()) {
        return true;
      }
 else {
        setOutputDone();
        return false;
      }
    }
 else {
      putRow(data.outputRowMeta,outputRowData);
      if (checkFeedback(getLinesInput())) {
        if (log.isBasic()) {
          logBasic(BaseMessages.getString(PKG,"CsvInput.Log.LineNumber",Long.toString(getLinesInput())));
        }
      }
    }
  }
 catch (  KettleConversionException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      StringBuffer errorDescriptions=new StringBuffer(100);
      StringBuffer errorFields=new StringBuffer(50);
      for (int i=0; i < e.getCauses().size(); i++) {
        if (i > 0) {
          errorDescriptions.append(", ");
          errorFields.append(", ");
        }
        errorDescriptions.append(e.getCauses().get(i).getMessage());
        errorFields.append(e.getFields().get(i).toStringMeta());
      }
      putError(data.outputRowMeta,e.getRowData(),e.getCauses().size(),errorDescriptions.toString(),errorFields.toString(),"CSVINPUT001");
    }
 else {
      throw new KettleException(e.getMessage(),e.getCauses().get(0));
    }
  }
  return true;
}
