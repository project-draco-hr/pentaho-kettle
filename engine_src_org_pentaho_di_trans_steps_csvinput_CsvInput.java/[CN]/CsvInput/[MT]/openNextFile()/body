{
  try {
    data.closeFile();
    if (data.filenr >= data.filenames.length) {
      return false;
    }
    FileObject fileObject=KettleVFS.getFileObject(data.filenames[data.filenr],getTransMeta());
    if (!(fileObject instanceof LocalFile)) {
      throw new KettleException(BaseMessages.getString(PKG,"CsvInput.Log.OnlyLocalFilesAreSupported"));
    }
    if (meta.isLazyConversionActive()) {
      data.binaryFilename=data.filenames[data.filenr].getBytes();
    }
    data.fis=new FileInputStream(KettleVFS.getFilename(fileObject));
    data.fc=data.fis.getChannel();
    data.bb=ByteBuffer.allocateDirect(data.preferredBufferSize);
    if (data.parallel) {
      if (data.bytesToSkipInFirstFile > 0) {
        data.fc.position(data.bytesToSkipInFirstFile);
        if (needToSkipRow()) {
          readOneRow(true,true);
        }
      }
    }
    if (meta.isAddResultFile()) {
      ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,fileObject,getTransMeta().getName(),toString());
      resultFile.setComment("File was read by a Csv input step");
      addResultFile(resultFile);
    }
    data.filenr++;
    if (meta.isHeaderPresent()) {
      if (!data.parallel || data.bytesToSkipInFirstFile <= 0) {
        readOneRow(true,false);
        logBasic(BaseMessages.getString(PKG,"CsvInput.Log.HeaderRowSkipped",data.filenames[data.filenr - 1]));
      }
    }
    data.rowNumber=1L;
    data.bytesToSkipInFirstFile=-1L;
    return true;
  }
 catch (  KettleException e) {
    throw e;
  }
catch (  Exception e) {
    throw new KettleException(e);
  }
}
