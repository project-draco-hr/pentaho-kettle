{
  meta=(RssOutputMeta)smi;
  data=(RssOutputData)sdi;
  Object[] r=getRow();
  if (r == null) {
    if (!first) {
      if (!meta.isCustomRss()) {
        WriteToFile(data.channeltitlevalue,data.channellinkvalue,data.channeldescriptionvalue,data.channelpubdatevalue,data.channelcopyrightvalue,data.channelimagelinkvalue,data.channelimagedescriptionvalue,data.channelimagelinkvalue,data.channelimageurlvalue,data.channellanguagevalue,data.channelauthorvalue);
      }
 else {
        OutputFormat format=org.dom4j.io.OutputFormat.createPrettyPrint();
        if (Utils.isEmpty(meta.getEncoding())) {
          format.setEncoding("iso-8859-1");
        }
 else {
          format.setEncoding(meta.getEncoding());
        }
        try {
          XMLWriter writer=new XMLWriter(new FileWriter(new File(data.filename)),format);
          writer.write(data.document);
          writer.close();
        }
 catch (        Exception e) {
        }
 finally {
          data.document=null;
        }
      }
    }
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.outputRowMeta=data.inputRowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isFilenameInField()) {
      if (Utils.isEmpty(meta.getFileNameField())) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.FilenameFieldMissing"));
        setErrors(1);
        stopAll();
        return false;
      }
      data.indexOfFieldfilename=data.inputRowMeta.indexOfValue(meta.getFileNameField());
      if (data.indexOfFieldfilename < 0) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getFileNameField()));
        throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getFileNameField()));
      }
    }
 else {
      data.filename=buildFilename();
    }
    if (Utils.isEmpty(data.filename)) {
      logError(BaseMessages.getString(PKG,"RssOutput.Log.FilenameEmpty"));
      throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.FilenameEmpty"));
    }
    if (meta.isCreateParentFolder()) {
      FileObject parentfolder=null;
      try {
        parentfolder=KettleVFS.getFileObject(data.filename,getTransMeta()).getParent();
        if (!parentfolder.exists()) {
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"RssOutput.Log.ParentFolderExists",parentfolder.getName().toString()));
          }
          parentfolder.createFolder();
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"RssOutput.Log.CanNotCreateParentFolder",parentfolder.getName().toString()));
          }
        }
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.CanNotCreateParentFolder",parentfolder.getName().toString()));
        throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.CanNotCreateParentFolder",parentfolder.getName().toString()));
      }
 finally {
        if (parentfolder != null) {
          try {
            parentfolder.close();
          }
 catch (          Exception ex) {
          }
        }
      }
    }
    if (!meta.isCustomRss()) {
      if (Utils.isEmpty(meta.getChannelTitle())) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ChannelTitleMissing"));
        setErrors(1);
        stopAll();
        return false;
      }
      if (Utils.isEmpty(meta.getChannelDescription())) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ChannelDescription"));
        setErrors(1);
        stopAll();
        return false;
      }
      if (Utils.isEmpty(meta.getChannelLink())) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ChannelLink"));
        setErrors(1);
        stopAll();
        return false;
      }
      data.indexOfFieldchanneltitle=data.inputRowMeta.indexOfValue(meta.getChannelTitle());
      if (data.indexOfFieldchanneltitle < 0) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelTitle()));
        throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelTitle()));
      }
      data.channeltitlevalue=data.inputRowMeta.getString(r,data.indexOfFieldchanneltitle);
      data.indexOfFieldchanneldescription=data.inputRowMeta.indexOfValue(meta.getChannelDescription());
      if (data.indexOfFieldchanneldescription < 0) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelDescription()));
        throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelDescription()));
      }
      data.channeldescriptionvalue=data.inputRowMeta.getString(r,data.indexOfFieldchanneldescription);
      data.indexOfFieldchannellink=data.inputRowMeta.indexOfValue(meta.getChannelLink());
      if (data.indexOfFieldchannellink < 0) {
        logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelLink()));
        throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelLink()));
      }
      data.channellinkvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannellink);
      if (!Utils.isEmpty(meta.getItemTitle())) {
        data.indexOfFielditemtitle=data.inputRowMeta.indexOfValue(meta.getItemTitle());
        if (data.indexOfFielditemtitle < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemTitle()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemTitle()));
        }
      }
      if (!Utils.isEmpty(meta.getItemDescription())) {
        data.indexOfFielditemdescription=data.inputRowMeta.indexOfValue(meta.getItemDescription());
        if (data.indexOfFielditemdescription < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemDescription()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemDescription()));
        }
      }
      if (meta.AddGeoRSS()) {
        if (Utils.isEmpty(meta.getGeoPointLong())) {
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.GeoPointLatEmpty"));
        }
        if (Utils.isEmpty(meta.getGeoPointLong())) {
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.GeoPointLongEmpty"));
        }
        data.indexOfFielditempointx=data.inputRowMeta.indexOfValue(meta.getGeoPointLat());
        if (data.indexOfFielditempointx < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getGeoPointLat()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getGeoPointLat()));
        }
        data.indexOfFielditempointy=data.inputRowMeta.indexOfValue(meta.getGeoPointLong());
        if (data.indexOfFielditempointy < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getGeoPointLong()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getGeoPointLong()));
        }
      }
      if (!Utils.isEmpty(meta.getChannelPubDate())) {
        data.indexOfFieldchannelpubdate=data.inputRowMeta.indexOfValue(meta.getChannelPubDate());
        if (data.indexOfFieldchannelpubdate < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelPubDate()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelPubDate()));
        }
        data.channelpubdatevalue=data.inputRowMeta.getDate(r,data.indexOfFieldchannelpubdate);
      }
      if (!Utils.isEmpty(meta.getChannelLanguage())) {
        data.indexOfFieldchannellanguage=data.inputRowMeta.indexOfValue(meta.getChannelLanguage());
        if (data.indexOfFieldchannellanguage < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelLanguage()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelLanguage()));
        }
        data.channellanguagevalue=data.inputRowMeta.getString(r,data.indexOfFieldchannellanguage);
      }
      if (!Utils.isEmpty(meta.getChannelCopyright())) {
        data.indexOfFieldchannelcopyright=data.inputRowMeta.indexOfValue(meta.getChannelCopyright());
        if (data.indexOfFieldchannelcopyright < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelCopyright()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelCopyright()));
        }
        data.channelcopyrightvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelcopyright);
      }
      if (!Utils.isEmpty(meta.getChannelAuthor())) {
        data.indexOfFieldchannelauthor=data.inputRowMeta.indexOfValue(meta.getChannelAuthor());
        if (data.indexOfFieldchannelauthor < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelAuthor()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelAuthor()));
        }
        data.channelauthorvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelauthor);
      }
      if (meta.AddImage()) {
        if (!Utils.isEmpty(meta.getChannelImageTitle())) {
          data.indexOfFieldchannelimagetitle=data.inputRowMeta.indexOfValue(meta.getChannelImageTitle());
          if (data.indexOfFieldchannelimagetitle < 0) {
            logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageTitle()));
            throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageTitle()));
          }
          data.channelimagetitlevalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelimagetitle);
        }
        if (!Utils.isEmpty(meta.getChannelImageLink())) {
          data.indexOfFieldchannelimagelink=data.inputRowMeta.indexOfValue(meta.getChannelImageLink());
          if (data.indexOfFieldchannelimagelink < 0) {
            logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageLink()));
            throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageLink()));
          }
          data.channelimagelinkvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelimagelink);
        }
        if (!Utils.isEmpty(meta.getChannelImageUrl())) {
          data.indexOfFieldchannelimageurl=data.inputRowMeta.indexOfValue(meta.getChannelImageUrl());
          if (data.indexOfFieldchannelimageurl < 0) {
            logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageUrl()));
            throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageUrl()));
          }
          data.channelimageurlvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelimageurl);
        }
        if (!Utils.isEmpty(meta.getChannelImageDescription())) {
          data.indexOfFieldchannelimagedescription=data.inputRowMeta.indexOfValue(meta.getChannelImageDescription());
          if (data.indexOfFieldchannelimagedescription < 0) {
            logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageDescription()));
            throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getChannelImageDescription()));
          }
          data.channelimagedescriptionvalue=data.inputRowMeta.getString(r,data.indexOfFieldchannelimagedescription);
        }
      }
      if (!Utils.isEmpty(meta.getItemLink())) {
        data.indexOfFielditemlink=data.inputRowMeta.indexOfValue(meta.getItemLink());
        if (data.indexOfFielditemlink < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemLink()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemLink()));
        }
      }
      if (!Utils.isEmpty(meta.getItemPubDate())) {
        data.indexOfFielditempubdate=data.inputRowMeta.indexOfValue(meta.getItemPubDate());
        if (data.indexOfFielditempubdate < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemPubDate()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemPubDate()));
        }
      }
      if (!Utils.isEmpty(meta.getItemAuthor())) {
        data.indexOfFielditemauthor=data.inputRowMeta.indexOfValue(meta.getItemAuthor());
        if (data.indexOfFielditemauthor < 0) {
          logError(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemAuthor()));
          throw new KettleException(BaseMessages.getString(PKG,"RssOutput.Log.ErrorFindingField",meta.getItemAuthor()));
        }
      }
    }
 else {
      data.customchannels=new int[meta.getChannelCustomFields().length];
      for (int i=0; i < meta.getChannelCustomFields().length; i++) {
        data.customchannels[i]=data.inputRowMeta.indexOfValue(meta.getChannelCustomFields()[i]);
        if (data.customchannels[i] < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"RssOutput.Exception.FieldRequired",meta.getChannelCustomFields()[i]));
        }
      }
      data.customitems=new int[meta.getItemCustomFields().length];
      for (int i=0; i < meta.getItemCustomFields().length; i++) {
        data.customitems[i]=data.inputRowMeta.indexOfValue(meta.getItemCustomFields()[i]);
        if (data.customitems[i] < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"RssOutput.Exception.FieldRequired",meta.getItemCustomFields()[i]));
        }
      }
      data.document=DocumentHelper.createDocument();
      data.rssElement=data.document.addElement("rss");
      data.rssElement.addAttribute("version","2.0");
      for (int i=0; i < meta.getNameSpaces().length; i++) {
        data.rssElement.addNamespace(environmentSubstitute(meta.getNameSpacesTitle()[i]),environmentSubstitute(meta.getNameSpaces()[i]));
      }
      data.channel=data.rssElement.addElement("channel");
      for (int i=0; i < data.customchannels.length; i++) {
        String channelname=environmentSubstitute(meta.getChannelCustomTags()[i]);
        String channelvalue=data.inputRowMeta.getString(r,data.customchannels[i]);
        if (log.isDetailed()) {
          logDetailed("outputting channel value <" + channelname + ">"+ channelvalue+ "<"+ channelname+ "/>");
        }
        Element channeltag=data.channel.addElement(channelname);
        channeltag.setText(channelvalue);
      }
    }
  }
  if (!meta.isCustomRss()) {
    String itemtitlevalue=null;
    String itemauthorvalue=null;
    String itemlinkvalue=null;
    Date itemdatevalue=null;
    String itemdescvalue=null;
    String itemgeopointx=null;
    String itemgeopointy=null;
    if (data.indexOfFielditemtitle > -1) {
      itemtitlevalue=data.inputRowMeta.getString(r,data.indexOfFielditemtitle);
    }
    if (data.indexOfFielditemauthor > -1) {
      itemauthorvalue=data.inputRowMeta.getString(r,data.indexOfFielditemauthor);
    }
    if (data.indexOfFielditemlink > -1) {
      itemlinkvalue=data.inputRowMeta.getString(r,data.indexOfFielditemlink);
    }
    if (data.indexOfFielditempubdate > -1) {
      itemdatevalue=data.inputRowMeta.getDate(r,data.indexOfFielditempubdate);
    }
    if (data.indexOfFielditemdescription > -1) {
      itemdescvalue=data.inputRowMeta.getString(r,data.indexOfFielditemdescription);
    }
    if (data.indexOfFielditempointx > -1) {
      itemgeopointx=data.inputRowMeta.getString(r,data.indexOfFielditempointx);
    }
    if (data.indexOfFielditempointy > -1) {
      itemgeopointy=data.inputRowMeta.getString(r,data.indexOfFielditempointy);
    }
    if (!createEntry(itemauthorvalue,itemtitlevalue,itemlinkvalue,itemdatevalue,itemdescvalue,itemgeopointx,itemgeopointy)) {
      throw new KettleException("Error adding item to feed");
    }
  }
 else {
    if (meta.isDisplayItem()) {
      data.itemtag=data.channel.addElement("item");
    }
    for (int i=0; i < data.customitems.length; i++) {
      String itemname=environmentSubstitute(meta.getItemCustomTags()[i]);
      String itemvalue=data.inputRowMeta.getString(r,data.customitems[i]);
      if (log.isDetailed()) {
        logDetailed("outputting item value <" + itemname + ">"+ itemvalue+ "<"+ itemname+ "/>");
      }
      if (meta.isDisplayItem()) {
        Element itemtagsub=data.itemtag.addElement(itemname);
        itemtagsub.setText(itemvalue);
      }
 else {
        Element temp=data.channel.addElement(itemname);
        temp.setText(itemvalue);
      }
    }
  }
  try {
    putRow(data.outputRowMeta,r);
    incrementLinesOutput();
    if (checkFeedback(getLinesOutput())) {
      if (log.isDebug()) {
        logDebug(BaseMessages.getString(PKG,"RssOutput.Log.Linenr","" + getLinesOutput()));
      }
    }
  }
 catch (  KettleStepException e) {
    logError(BaseMessages.getString(PKG,"RssOutputMeta.Log.ErrorInStep") + e.getMessage());
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  return true;
}
