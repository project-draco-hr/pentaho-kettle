{
  if (subject == null || subject instanceof StepPerformanceSnapShot) {
    StepPerformanceSnapShot snapShot=(StepPerformanceSnapShot)subject;
    RowMetaAndData row=new RowMetaAndData();
    for (    LogTableField field : fields) {
      if (field.isEnabled()) {
        Object value=null;
        if (subject != null) {
switch (ID.valueOf(field.getId())) {
case ID_BATCH:
            value=new Long(snapShot.getBatchId());
          break;
case SEQ_NR:
        value=new Long(snapShot.getSeqNr());
      break;
case LOGDATE:
    value=snapShot.getDate();
  break;
case TRANSNAME:
value=snapShot.getTransName();
break;
case STEPNAME:
value=snapShot.getStepName();
break;
case STEP_COPY:
value=new Long(snapShot.getStepCopy());
break;
case LINES_READ:
value=new Long(snapShot.getLinesRead());
break;
case LINES_WRITTEN:
value=new Long(snapShot.getLinesWritten());
break;
case LINES_INPUT:
value=new Long(snapShot.getLinesInput());
break;
case LINES_OUTPUT:
value=new Long(snapShot.getLinesOutput());
break;
case LINES_UPDATED:
value=new Long(snapShot.getLinesUpdated());
break;
case LINES_REJECTED:
value=new Long(snapShot.getLinesRejected());
break;
case ERRORS:
value=new Long(snapShot.getErrors());
break;
case INPUT_BUFFER_ROWS:
value=new Long(snapShot.getInputBufferSize());
break;
case OUTPUT_BUFFER_ROWS:
value=new Long(snapShot.getOutputBufferSize());
break;
}
}
row.addValue(field.getFieldName(),field.getDataType(),value);
row.getRowMeta().getValueMeta(row.size() - 1).setLength(field.getLength());
}
}
return row;
}
 else {
return null;
}
}
