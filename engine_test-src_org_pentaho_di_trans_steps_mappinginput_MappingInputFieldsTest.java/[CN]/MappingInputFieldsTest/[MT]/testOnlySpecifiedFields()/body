{
  meta.setSelectingAndSortingUnspecifiedFields(false);
  MappingInputData sdi=new MappingInputData();
  sdi.linked=true;
  sdi.valueRenames=new ArrayList<MappingValueRename>();
  sdi.valueRenames.add(new MappingValueRename("number2","n2"));
  sdi.valueRenames.add(new MappingValueRename("number4","n4"));
  BlockingRowSet in=new BlockingRowSet(10);
  BlockingRowSet out=new BlockingRowSet(10);
  RowMeta rm=new RowMeta();
  rm.addValueMeta(new ValueMeta("string",ValueMetaInterface.TYPE_STRING));
  rm.addValueMeta(new ValueMeta("number1",ValueMetaInterface.TYPE_INTEGER));
  rm.addValueMeta(new ValueMeta("number2",ValueMetaInterface.TYPE_INTEGER));
  rm.addValueMeta(new ValueMeta("number3",ValueMetaInterface.TYPE_INTEGER));
  rm.addValueMeta(new ValueMeta("number",ValueMetaInterface.TYPE_INTEGER));
  rm.addValueMeta(new ValueMeta("number4",ValueMetaInterface.TYPE_INTEGER));
  rm.addValueMeta(new ValueMeta("number5",ValueMetaInterface.TYPE_INTEGER));
  in.putRow(rm,new Object[]{"str",new Integer(100501),new Integer(100502),new Integer(100503),new Integer(100500),new Integer(100504),new Integer(100505)});
  in.putRow(rm,new Object[]{"str_1",new Integer(200501),new Integer(200502),new Integer(200503),new Integer(200500),new Integer(200504),new Integer(200505)});
  step.getInputRowSets().add(in);
  step.getOutputRowSets().add(out);
  assertTrue(step.init(meta,sdi));
  assertTrue(step.processRow(meta,sdi));
  Object[] outRowData=out.getRow();
  RowMetaInterface outMeta=out.getRowMeta();
  assertEquals("All fields are expected.",7,outMeta.size());
  int i=0;
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_STRING,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","string",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number1",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","n2",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number3",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","n4",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number5",outMeta.getValueMeta(i++).getName());
  assertEquals("the field value mismatch.","str",outRowData[0]);
  assertEquals("the field value mismatch.",new Integer(100501),outRowData[1]);
  assertEquals("the field value mismatch.",new Integer(100502),outRowData[2]);
  assertEquals("the field value mismatch.",new Integer(100503),outRowData[3]);
  assertEquals("the field value mismatch.",new Integer(100500),outRowData[4]);
  assertEquals("the field value mismatch.",new Integer(100504),outRowData[5]);
  assertEquals("the field value mismatch.",new Integer(100505),outRowData[6]);
  assertTrue(step.processRow(meta,sdi));
  outRowData=out.getRow();
  outMeta=out.getRowMeta();
  assertEquals("All fields are expected.",7,outMeta.size());
  i=0;
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_STRING,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","string",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number1",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","n2",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number3",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","n4",outMeta.getValueMeta(i++).getName());
  assertEquals("the field type-meta mismatch.",ValueMetaInterface.TYPE_INTEGER,outMeta.getValueMeta(i).getType());
  assertEquals("the field name-meta mismatch.","number5",outMeta.getValueMeta(i++).getName());
  assertEquals("the field value mismatch.","str_1",outRowData[0]);
  assertEquals("the field value mismatch.",new Integer(200501),outRowData[1]);
  assertEquals("the field value mismatch.",new Integer(200502),outRowData[2]);
  assertEquals("the field value mismatch.",new Integer(200503),outRowData[3]);
  assertEquals("the field value mismatch.",new Integer(200500),outRowData[4]);
  assertEquals("the field value mismatch.",new Integer(200504),outRowData[5]);
  assertEquals("the field value mismatch.",new Integer(200505),outRowData[6]);
}
