{
  if (transMeta == null)   return;
  TransExecutionConfiguration executionConfiguration=spoon.getExecutionConfiguration();
  executionConfiguration.setExecutingLocally(local);
  executionConfiguration.setExecutingRemotely(remote);
  executionConfiguration.setExecutingClustered(cluster);
  Object data[]=spoon.variables.getData();
  String fields[]=spoon.variables.getRowMeta().getFieldNames();
  Map<String,String> variableMap=new HashMap<String,String>();
  for (int idx=0; idx < fields.length; idx++) {
    variableMap.put(fields[idx],data[idx].toString());
  }
  executionConfiguration.getUsedVariables(transMeta);
  executionConfiguration.getUsedArguments(transMeta,spoon.getArguments());
  executionConfiguration.setVariables(variableMap);
  executionConfiguration.setReplayDate(replayDate);
  executionConfiguration.setLocalPreviewing(preview);
  executionConfiguration.setLogLevel(spoon.getLog().getLogLevel());
  TransExecutionConfigurationDialog dialog=new TransExecutionConfigurationDialog(spoon.getShell(),executionConfiguration,transMeta);
  if (dialog.open()) {
    addTransLog(transMeta,!executionConfiguration.isLocalPreviewing());
    TransLog transLog=spoon.getActiveTransLog();
    if (executionConfiguration.isExecutingLocally()) {
      if (executionConfiguration.isLocalPreviewing()) {
        transLog.preview(executionConfiguration);
      }
 else {
        transLog.start(executionConfiguration);
      }
    }
 else     if (executionConfiguration.isExecutingRemotely()) {
      if (executionConfiguration.getRemoteServer() != null) {
        spoon.sendXMLToSlaveServer(transMeta,executionConfiguration);
        spoon.addSpoonSlave(executionConfiguration.getRemoteServer());
      }
 else {
        MessageBox mb=new MessageBox(spoon.getShell(),SWT.OK | SWT.ICON_INFORMATION);
        mb.setMessage(Messages.getString("Spoon.Dialog.NoRemoteServerSpecified.Message"));
        mb.setText(Messages.getString("Spoon.Dialog.NoRemoteServerSpecified.Title"));
        mb.open();
      }
    }
 else     if (executionConfiguration.isExecutingClustered()) {
      splitTrans(transMeta,executionConfiguration.isClusterShowingTransformation(),executionConfiguration.isClusterPosting(),executionConfiguration.isClusterPreparing(),executionConfiguration.isClusterStarting());
    }
  }
}
