{
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    determineUsedFields(rowMeta);
    data.replaceIndex=new int[meta.getFieldname().length];
    for (int i=0; i < meta.getFieldname().length; i++) {
      if (meta.getReplace()[i]) {
        data.replaceIndex[i]=rowMeta.indexOfValue(meta.getFieldname()[i]);
        if (data.replaceIndex[i] < 0) {
          if (Const.isEmpty(meta.getFieldname()[i])) {
            throw new KettleStepException(BaseMessages.getString(PKG,"ScriptValuesMetaMod.Exception.FieldToReplaceNotFound",meta.getFieldname()[i]));
          }
          data.replaceIndex[i]=rowMeta.indexOfValue(meta.getRename()[i]);
          if (data.replaceIndex[i] < 0) {
            throw new KettleStepException(BaseMessages.getString(PKG,"ScriptValuesMetaMod.Exception.FieldToReplaceNotFound",meta.getRename()[i]));
          }
        }
      }
 else {
        data.replaceIndex[i]=-1;
      }
    }
    data.cx=ScriptMeta.createNewScriptEngine(getStepname());
    data.scope=data.cx.getBindings(ScriptContext.ENGINE_SCOPE);
    bFirstRun=true;
    data.scope.put("_step_",this);
    for (int i=0; i < meta.getNumberOfJSScripts(); i++) {
      data.scope.put(jsScripts[i].getScriptName(),jsScripts[i].getScript());
    }
    data.scope.put("_TransformationName_",this.getStepname());
    try {
      data.scope.put("row",row);
      for (int i=0; i < data.fields_used.length; i++) {
        ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.fields_used[i]);
        Object valueData=row[data.fields_used[i]];
        Object normalStorageValueData=valueMeta.convertToNormalStorageType(valueData);
        data.scope.put(valueMeta.getName(),normalStorageValueData);
      }
      data.scope.put("rowMeta",rowMeta);
      try {
        if (meta.getAddClasses() != null) {
          for (int i=0; i < meta.getAddClasses().length; i++) {
            data.scope.put(meta.getAddClasses()[i].getJSName(),meta.getAddClasses()[i].getAddObject());
          }
        }
      }
 catch (      Exception e) {
        throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.CouldNotAttachAdditionalScripts"),e);
      }
      try {
        data.scope.put("SKIP_TRANSFORMATION",Integer.valueOf(SKIP_TRANSFORMATION));
        data.scope.put("ABORT_TRANSFORMATION",Integer.valueOf(ABORT_TRANSFORMATION));
        data.scope.put("ERROR_TRANSFORMATION",Integer.valueOf(ERROR_TRANSFORMATION));
        data.scope.put("CONTINUE_TRANSFORMATION",Integer.valueOf(CONTINUE_TRANSFORMATION));
      }
 catch (      Exception ex) {
        throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.CouldNotAddDefaultConstants"),ex);
      }
      ;
      try {
        if (strStartScript != null && strStartScript.length() > 0) {
          CompiledScript startScript=((Compilable)data.cx).compile(strStartScript);
          startScript.eval(data.scope);
          if (log.isDetailed())           logDetailed(("Start Script found!"));
        }
 else {
          if (log.isDetailed())           logDetailed(("No starting Script found!"));
        }
      }
 catch (      Exception es) {
        throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.ErrorProcessingStartScript"),es);
      }
      data.script=((Compilable)data.cx).compile(strTransformScript);
    }
 catch (    Exception e) {
      throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.CouldNotCompileJavascript"),e);
    }
  }
  Object[] outputRow=RowDataUtil.resizeArray(row,data.outputRowMeta.size());
  int outputIndex=rowMeta.size();
  try {
    try {
      data.scope.put("row",row);
      for (int i=0; i < data.fields_used.length; i++) {
        ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.fields_used[i]);
        Object valueData=row[data.fields_used[i]];
        Object normalStorageValueData=valueMeta.convertToNormalStorageType(valueData);
        data.scope.put(valueMeta.getName(),normalStorageValueData);
      }
      data.scope.put("rowMeta",rowMeta);
    }
 catch (    Exception e) {
      throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.UnexpectedeError"),e);
    }
    data.script.eval(data.scope);
    if (bFirstRun) {
      bFirstRun=false;
      Object tran_stat=data.scope.get("trans_Status");
      if (tran_stat != null) {
        bWithTransStat=true;
        if (log.isDetailed())         logDetailed(("tran_Status found. Checking transformation status while script execution."));
      }
 else {
        if (log.isDetailed())         logDetailed(("No tran_Status found. Transformation status checking not available."));
        bWithTransStat=false;
      }
    }
    if (bWithTransStat) {
      iTranStat=(Integer)data.scope.get("trans_Status");
    }
 else {
      iTranStat=CONTINUE_TRANSFORMATION;
    }
    if (iTranStat == CONTINUE_TRANSFORMATION) {
      bRC=true;
      for (int i=0; i < meta.getFieldname().length; i++) {
        Object result=data.scope.get(meta.getFieldname()[i]);
        Object valueData=getValueFromJScript(result,i);
        if (data.replaceIndex[i] < 0) {
          outputRow[outputIndex++]=valueData;
        }
 else {
          outputRow[data.replaceIndex[i]]=valueData;
        }
      }
      putRow(data.outputRowMeta,outputRow);
    }
 else {
switch (iTranStat) {
case SKIP_TRANSFORMATION:
        bRC=true;
      break;
case ABORT_TRANSFORMATION:
    if (data.cx != null)     stopAll();
  setOutputDone();
bRC=false;
break;
case ERROR_TRANSFORMATION:
if (data.cx != null) setErrors(1);
stopAll();
bRC=false;
break;
}
}
}
 catch (ScriptException e) {
throw new KettleValueException(BaseMessages.getString(PKG,"Script.Log.JavascriptError"),e);
}
return bRC;
}
