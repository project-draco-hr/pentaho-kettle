{
  Object[] row=new Object[data.outputRowMeta.size()];
  for (int i=0; i < inputRowMeta.size(); i++) {
    row[i]=inputRowData[i];
  }
  for (int i=0, index=inputRowMeta.size(); i < meta.getFieldName().length; i++, index++) {
    Calendar cal;
    int argnr=0;
switch (meta.getFieldType()[i]) {
case SystemDataMeta.TYPE_SYSTEM_INFO_SYSTEM_START:
      row[index]=getTrans().getCurrentDate();
    break;
case SystemDataMeta.TYPE_SYSTEM_INFO_SYSTEM_DATE:
  row[index]=new Date();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TRANS_DATE_FROM:
row[index]=getTrans().getStartDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TRANS_DATE_TO:
row[index]=getTrans().getEndDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JOB_DATE_FROM:
row[index]=getTrans().getJobStartDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JOB_DATE_TO:
row[index]=getTrans().getJobEndDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_DAY_START:
cal=Calendar.getInstance();
cal.add(Calendar.DAY_OF_MONTH,-1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_DAY_END:
cal=Calendar.getInstance();
cal.add(Calendar.DAY_OF_MONTH,-1);
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_DAY_START:
cal=Calendar.getInstance();
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_DAY_END:
cal=Calendar.getInstance();
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_DAY_START:
cal=Calendar.getInstance();
cal.add(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_DAY_END:
cal=Calendar.getInstance();
cal.add(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_MONTH_START:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,-1);
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_MONTH_END:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,-1);
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_MONTH_START:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_MONTH_END:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_MONTH_START:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,1);
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_MONTH_END:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,1);
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_COPYNR:
row[index]=new Long(getCopy());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TRANS_NAME:
row[index]=getTransMeta().getName();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_MODIFIED_USER:
row[index]=getTransMeta().getModifiedUser();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_MODIFIED_DATE:
row[index]=getTransMeta().getModifiedDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TRANS_BATCH_ID:
row[index]=new Long(getTrans().getBatchId());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JOB_BATCH_ID:
row[index]=new Long(getTrans().getPassedBatchId());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_HOSTNAME:
row[index]=Const.getHostname();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_IP_ADDRESS:
try {
row[index]=Const.getIPAddress();
}
 catch (Exception e) {
throw new KettleException(e);
}
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_FILENAME:
row[index]=getTransMeta().getFilename();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_01:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_02:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_03:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_04:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_05:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_06:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_07:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_08:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_09:
case SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_10:
argnr=meta.getFieldType()[i] - SystemDataMeta.TYPE_SYSTEM_INFO_ARGUMENT_01;
if (argnr < getTransMeta().getArguments().length) {
row[index]=getTransMeta().getArguments()[argnr];
}
 else {
row[index]=null;
}
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_KETTLE_VERSION:
row[index]=Const.VERSION;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_KETTLE_BUILD_VERSION:
row[index]=new Long(BuildVersion.getInstance().getVersion());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_KETTLE_BUILD_DATE:
row[index]=BuildVersion.getInstance().getBuildDate();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_CURRENT_PID:
row[index]=new Long(Management.getPID());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JVM_TOTAL_MEMORY:
row[index]=Runtime.getRuntime().totalMemory();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JVM_FREE_MEMORY:
row[index]=Runtime.getRuntime().freeMemory();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JVM_MAX_MEMORY:
row[index]=Runtime.getRuntime().maxMemory();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JVM_AVAILABLE_MEMORY:
Runtime rt=Runtime.getRuntime();
row[index]=rt.freeMemory() + (rt.maxMemory() - rt.totalMemory());
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_AVAILABLE_PROCESSORS:
row[index]=(long)Runtime.getRuntime().availableProcessors();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_JVM_CPU_TIME:
row[index]=Management.getJVMCpuTime() / 1000000;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TOTAL_PHYSICAL_MEMORY_SIZE:
row[index]=Management.getTotalPhysicalMemorySize();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_TOTAL_SWAP_SPACE_SIZE:
row[index]=Management.getTotalSwapSpaceSize();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_COMMITTED_VIRTUAL_MEMORY_SIZE:
row[index]=Management.getCommittedVirtualMemorySize();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_FREE_PHYSICAL_MEMORY_SIZE:
row[index]=Management.getFreePhysicalMemorySize();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_FREE_SWAP_SPACE_SIZE:
row[index]=Management.getFreeSwapSpaceSize();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_WEEK_START:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,-1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_WEEK_END:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_WEEK_OPEN_END:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
cal.add(Calendar.DAY_OF_WEEK,-2);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_WEEK_START_US:
cal=Calendar.getInstance(Locale.US);
cal.add(Calendar.WEEK_OF_YEAR,-1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_WEEK_END_US:
cal=Calendar.getInstance(Locale.US);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_WEEK_START:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_WEEK_END:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_WEEK_OPEN_END:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
cal.add(Calendar.DAY_OF_WEEK,-2);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_WEEK_START_US:
cal=Calendar.getInstance(Locale.US);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_WEEK_END_US:
cal=Calendar.getInstance(Locale.US);
cal.add(Calendar.WEEK_OF_YEAR,1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_WEEK_START:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_WEEK_END:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,2);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_WEEK_OPEN_END:
cal=Calendar.getInstance();
cal.add(Calendar.WEEK_OF_YEAR,2);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
cal.add(Calendar.DAY_OF_WEEK,-2);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_WEEK_START_US:
cal=Calendar.getInstance(Locale.US);
cal.add(Calendar.WEEK_OF_YEAR,1);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_WEEK_END_US:
cal=Calendar.getInstance(Locale.US);
cal.add(Calendar.WEEK_OF_YEAR,2);
cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,-1);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_QUARTER_START:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,-3 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_QUARTER_END:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,-1 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_QUARTER_START:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,0 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_QUARTER_END:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,2 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_QUARTER_START:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,3 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,1);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_QUARTER_END:
cal=Calendar.getInstance();
cal.add(Calendar.MONTH,5 - (cal.get(Calendar.MONTH) % 3));
cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_YEAR_START:
cal=Calendar.getInstance();
cal.add(Calendar.YEAR,-1);
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREV_YEAR_END:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.add(Calendar.DAY_OF_YEAR,-1);
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_YEAR_START:
cal=Calendar.getInstance();
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_THIS_YEAR_END:
cal=Calendar.getInstance();
cal.add(Calendar.YEAR,1);
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.add(Calendar.DAY_OF_YEAR,-1);
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_YEAR_START:
cal=Calendar.getInstance();
cal.add(Calendar.YEAR,1);
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_NEXT_YEAR_END:
cal=Calendar.getInstance();
cal.add(Calendar.YEAR,2);
cal.set(Calendar.DAY_OF_YEAR,cal.getActualMinimum(Calendar.DATE));
cal.add(Calendar.DAY_OF_YEAR,-1);
cal.set(Calendar.HOUR_OF_DAY,23);
cal.set(Calendar.MINUTE,59);
cal.set(Calendar.SECOND,59);
cal.set(Calendar.MILLISECOND,999);
row[index]=cal.getTime();
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_RESULT:
Result previousResult=getTransMeta().getPreviousResult();
boolean result=false;
if (previousResult != null) {
result=previousResult.getResult();
}
row[index]=result;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_EXIT_STATUS:
previousResult=getTransMeta().getPreviousResult();
long value=0;
if (previousResult != null) {
value=previousResult.getExitStatus();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_ENTRY_NR:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getEntryNr();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_FILES:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getResultFiles().size();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_FILES_RETRIEVED:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrFilesRetrieved();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_DELETED:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesDeleted();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_INPUT:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesInput();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_OUTPUT:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesOutput();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_READ:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesRead();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_REJETED:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesRejected();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_UPDATED:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesUpdated();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_LINES_WRITTEN:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrLinesWritten();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_ROWS:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getRows().size();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_IS_STOPPED:
previousResult=getTransMeta().getPreviousResult();
boolean stop=false;
if (previousResult != null) {
stop=previousResult.isStopped();
}
row[index]=stop;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_NR_ERRORS:
previousResult=getTransMeta().getPreviousResult();
value=0;
if (previousResult != null) {
value=previousResult.getNrErrors();
}
row[index]=value;
break;
case SystemDataMeta.TYPE_SYSTEM_INFO_PREVIOUS_RESULT_LOG_TEXT:
previousResult=getTransMeta().getPreviousResult();
String errorReason=null;
if (previousResult != null) {
errorReason=previousResult.getLogText();
}
row[index]=errorReason;
break;
default :
break;
}
}
return row;
}
