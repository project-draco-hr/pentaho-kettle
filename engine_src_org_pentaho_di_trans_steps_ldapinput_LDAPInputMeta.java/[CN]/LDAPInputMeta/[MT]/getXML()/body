{
  StringBuilder retval=new StringBuilder(500);
  retval.append("    ").append(XMLHandler.addTagValue("usepaging",usePaging));
  retval.append("    ").append(XMLHandler.addTagValue("pagesize",pagesize));
  retval.append("    ").append(XMLHandler.addTagValue("useauthentication",useAuthentication));
  retval.append("    ").append(XMLHandler.addTagValue("rownum",includeRowNumber));
  retval.append("    ").append(XMLHandler.addTagValue("rownum_field",rowNumberField));
  retval.append("    ").append(XMLHandler.addTagValue("host",Host));
  retval.append("    ").append(XMLHandler.addTagValue("username",userName));
  retval.append("    ").append(XMLHandler.addTagValue("password",Encr.encryptPasswordIfNotUsingVariables(password)));
  retval.append("    ").append(XMLHandler.addTagValue("port",port));
  retval.append("    ").append(XMLHandler.addTagValue("filterstring",filterString));
  retval.append("    ").append(XMLHandler.addTagValue("searchbase",searchBase));
  retval.append("    <fields>").append(Const.CR);
  for (int i=0; i < inputFields.length; i++) {
    retval.append("      <field>").append(Const.CR);
    retval.append("        ").append(XMLHandler.addTagValue("name",inputFields[i].getName()));
    retval.append("        ").append(XMLHandler.addTagValue("attribute",inputFields[i].getAttribute()));
    retval.append("        ").append(XMLHandler.addTagValue("attribute_fetch_as",inputFields[i].getFetchAttributeAsCode()));
    retval.append("        ").append(XMLHandler.addTagValue("sorted_key",inputFields[i].isSortedKey()));
    retval.append("        ").append(XMLHandler.addTagValue("type",inputFields[i].getTypeDesc()));
    retval.append("        ").append(XMLHandler.addTagValue("format",inputFields[i].getFormat()));
    retval.append("        ").append(XMLHandler.addTagValue("length",inputFields[i].getLength()));
    retval.append("        ").append(XMLHandler.addTagValue("precision",inputFields[i].getPrecision()));
    retval.append("        ").append(XMLHandler.addTagValue("currency",inputFields[i].getCurrencySymbol()));
    retval.append("        ").append(XMLHandler.addTagValue("decimal",inputFields[i].getDecimalSymbol()));
    retval.append("        ").append(XMLHandler.addTagValue("group",inputFields[i].getGroupSymbol()));
    retval.append("        ").append(XMLHandler.addTagValue("trim_type",inputFields[i].getTrimTypeCode()));
    retval.append("        ").append(XMLHandler.addTagValue("repeat",inputFields[i].isRepeated()));
    retval.append("      </field>").append(Const.CR);
  }
  retval.append("    </fields>").append(Const.CR);
  retval.append("    ").append(XMLHandler.addTagValue("limit",rowLimit));
  retval.append("    ").append(XMLHandler.addTagValue("timelimit",timeLimit));
  retval.append("    ").append(XMLHandler.addTagValue("multivaluedseparator",multiValuedSeparator));
  retval.append("    ").append(XMLHandler.addTagValue("dynamicsearch",dynamicSearch));
  retval.append("    ").append(XMLHandler.addTagValue("dynamicseachfieldname",dynamicSeachFieldName));
  retval.append("    ").append(XMLHandler.addTagValue("dynamicfilter",dynamicFilter));
  retval.append("    ").append(XMLHandler.addTagValue("dynamicfilterfieldname",dynamicFilterFieldName));
  retval.append("    ").append(XMLHandler.addTagValue("searchScope",getSearchScopeCode(searchScope)));
  retval.append("    ").append(XMLHandler.addTagValue("protocol",protocol));
  retval.append("    ").append(XMLHandler.addTagValue("trustStorePath",trustStorePath));
  retval.append("    ").append(XMLHandler.addTagValue("trustStorePassword",Encr.encryptPasswordIfNotUsingVariables(trustStorePassword)));
  retval.append("    ").append(XMLHandler.addTagValue("trustAllCertificates",trustAllCertificates));
  retval.append("    ").append(XMLHandler.addTagValue("useCertificate",useCertificate));
  return retval.toString();
}
