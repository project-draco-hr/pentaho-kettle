{
  final String key=createKey(server,port);
  MLLPSocketCacheEntry s=map.get(key);
  if (s != null) {
    return s;
  }
  ServerSocket serverSocket=new ServerSocket(port);
  StreamSource streamSource=new ServerSocketStreamSource(serverSocket,server);
  MLLPTransport transport=new MLLPTransport(streamSource);
  transport.connect();
  final MLLPSocketCacheEntry entry=new MLLPSocketCacheEntry(serverSocket,streamSource,transport);
  entry.setJobListener(new JobAdapter(){
    @Override public void jobFinished(    Job job) throws KettleException {
      KettleException exception=null;
      try {
        entry.getTransport().disconnect();
      }
 catch (      Exception e) {
        exception=new KettleException(e);
      }
      try {
        entry.getStreamSource().disconnect();
      }
 catch (      Exception e) {
        exception=new KettleException(e);
      }
      try {
        entry.getServerSocket().close();
      }
 catch (      Exception e) {
        exception=new KettleException(e);
      }
      map.remove(key);
      if (exception != null) {
        throw exception;
      }
    }
  }
);
  map.put(key,new MLLPSocketCacheEntry(serverSocket,streamSource,transport));
  return entry;
}
