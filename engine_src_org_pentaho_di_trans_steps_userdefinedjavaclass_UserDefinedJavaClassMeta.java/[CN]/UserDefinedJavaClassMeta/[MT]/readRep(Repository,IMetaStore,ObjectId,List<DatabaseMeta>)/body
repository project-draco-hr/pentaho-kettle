{
  try {
    int nrScripts=rep.countNrStepAttributes(id_step,ElementNames.class_name.name());
    for (int i=0; i < nrScripts; i++) {
      definitions.add(new UserDefinedJavaClassDef(UserDefinedJavaClassDef.ClassType.valueOf(rep.getStepAttributeString(id_step,i,ElementNames.class_type.name())),rep.getStepAttributeString(id_step,i,ElementNames.class_name.name()),rep.getStepAttributeString(id_step,i,ElementNames.class_source.name())));
    }
    int nrfields=rep.countNrStepAttributes(id_step,ElementNames.field_name.name());
    for (int i=0; i < nrfields; i++) {
      fields.add(new FieldInfo(rep.getStepAttributeString(id_step,i,ElementNames.field_name.name()),ValueMeta.getType(rep.getStepAttributeString(id_step,i,ElementNames.field_type.name())),(int)rep.getStepAttributeInteger(id_step,i,ElementNames.field_length.name()),(int)rep.getStepAttributeInteger(id_step,i,ElementNames.field_precision.name())));
    }
    clearingResultFields=rep.getStepAttributeBoolean(id_step,ElementNames.clear_result_fields.name());
    int nrInfos=rep.countNrStepAttributes(id_step,ElementNames.info_.name() + ElementNames.step_name.name());
    for (int i=0; i < nrInfos; i++) {
      StepDefinition stepDefinition=new StepDefinition();
      stepDefinition.tag=rep.getStepAttributeString(id_step,i,ElementNames.info_.name() + ElementNames.step_tag.name());
      stepDefinition.stepName=rep.getStepAttributeString(id_step,i,ElementNames.info_.name() + ElementNames.step_name.name());
      stepDefinition.description=rep.getStepAttributeString(id_step,i,ElementNames.info_.name() + ElementNames.step_description.name());
      infoStepDefinitions.add(stepDefinition);
    }
    int nrTargets=rep.countNrStepAttributes(id_step,ElementNames.target_.name() + ElementNames.step_name.name());
    for (int i=0; i < nrTargets; i++) {
      StepDefinition stepDefinition=new StepDefinition();
      stepDefinition.tag=rep.getStepAttributeString(id_step,i,ElementNames.target_.name() + ElementNames.step_tag.name());
      stepDefinition.stepName=rep.getStepAttributeString(id_step,i,ElementNames.target_.name() + ElementNames.step_name.name());
      stepDefinition.description=rep.getStepAttributeString(id_step,i,ElementNames.target_.name() + ElementNames.step_description.name());
      targetStepDefinitions.add(stepDefinition);
    }
    int nrParameters=rep.countNrStepAttributes(id_step,ElementNames.parameter_tag.name());
    for (int i=0; i < nrParameters; i++) {
      UsageParameter usageParameter=new UsageParameter();
      usageParameter.tag=rep.getStepAttributeString(id_step,i,ElementNames.parameter_tag.name());
      usageParameter.value=rep.getStepAttributeString(id_step,i,ElementNames.parameter_value.name());
      usageParameter.description=rep.getStepAttributeString(id_step,i,ElementNames.parameter_description.name());
      usageParameters.add(usageParameter);
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"UserDefinedJavaClassMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
