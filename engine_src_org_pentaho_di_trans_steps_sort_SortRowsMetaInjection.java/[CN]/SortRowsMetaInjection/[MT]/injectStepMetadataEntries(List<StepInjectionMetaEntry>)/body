{
  List<String> sortNames=new ArrayList<String>();
  List<Boolean> sortAscs=new ArrayList<Boolean>();
  List<Boolean> sortCases=new ArrayList<Boolean>();
  List<Boolean> sortPresorteds=new ArrayList<Boolean>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
      String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case FIELDS:
{
          for (          StepInjectionMetaEntry lookField : lookFields.getDetails()) {
            Entry fieldEntry=Entry.findEntry(lookField.getKey());
            if (fieldEntry != null) {
              if (fieldEntry == Entry.FIELD) {
                String sortName=null;
                boolean sortAsc=false;
                boolean sortCase=false;
                boolean sortPresorted=false;
                List<StepInjectionMetaEntry> entries=lookField.getDetails();
                for (                StepInjectionMetaEntry entry : entries) {
                  Entry metaEntry=Entry.findEntry(entry.getKey());
                  if (metaEntry != null) {
                    String value=(String)entry.getValue();
switch (metaEntry) {
case NAME:
                      sortName=value;
                    break;
case SORT_ASCENDING:
                  sortAsc="Y".equalsIgnoreCase(value);
                break;
case IGNORE_CASE:
              sortCase="Y".equalsIgnoreCase(value);
            break;
case PRESORTED:
          sortPresorted="Y".equalsIgnoreCase(value);
        break;
    }
  }
}
sortNames.add(sortName);
sortAscs.add(sortAsc);
sortCases.add(sortCase);
sortPresorteds.add(sortPresorted);
}
}
}
}
break;
case COMPRESS_TEMP_FILES:
meta.setCompressFiles("Y".equalsIgnoreCase(lookValue));
break;
case ONLY_PASS_UNIQUE_ROWS:
meta.setOnlyPassingUniqueRows("Y".equalsIgnoreCase(lookValue));
break;
case SORT_SIZE_ROWS:
meta.setSortSize(lookValue);
break;
case SORT_DIRECTORY:
meta.setDirectory(lookValue);
break;
case SORT_FILE_PREFIX:
meta.setPrefix(lookValue);
break;
case FREE_MEMORY_TRESHOLD:
meta.setFreeMemoryLimit(lookValue);
break;
default :
break;
}
}
}
meta.setFieldName(sortNames.toArray(new String[sortNames.size()]));
boolean ascending[]=new boolean[sortAscs.size()];
boolean cases[]=new boolean[sortCases.size()];
boolean presorteds[]=new boolean[sortPresorteds.size()];
for (int i=0; i < ascending.length; i++) {
ascending[i]=sortAscs.get(i);
cases[i]=sortCases.get(i);
presorteds[i]=sortPresorteds.get(i);
}
meta.setAscending(ascending);
meta.setCaseSensitive(cases);
meta.setPreSortedField(presorteds);
}
