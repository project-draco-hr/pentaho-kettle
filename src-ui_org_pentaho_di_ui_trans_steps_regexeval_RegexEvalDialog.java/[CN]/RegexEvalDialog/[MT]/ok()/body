{
  if (Const.isEmpty(wStepname.getText()))   return;
  stepname=wStepname.getText();
  setRegexOptions(input);
  input.setUseVariableInterpolationFlag(wUseVar.getSelection());
  input.setAllowCaptureGroupsFlag(wAllowCaptureGroups.getSelection());
  input.setCanonicalEqualityFlag(wCanonEq.getSelection());
  input.setCaseInsensitiveFlag(wCaseInsensitive.getSelection());
  input.setCommentFlag(wComment.getSelection());
  input.setDotAllFlag(wDotAll.getSelection());
  int nrfields=wFields.nrNonEmpty();
  input.allocate(nrfields);
  for (int i=0; i < input.getFieldName().length; i++) {
    TableItem ti=wFields.getNonEmpty(i);
    input.getFieldName()[i]=ti.getText(1);
    input.getFieldType()[i]=ValueMeta.getType(ti.getText(2));
    input.getFieldLength()[i]=Const.toInt(ti.getText(3),-1);
    input.getFieldPrecision()[i]=Const.toInt(ti.getText(4),-1);
    input.getFieldFormat()[i]=ti.getText(5);
    input.getFieldGroup()[i]=ti.getText(6);
    input.getFieldDecimal()[i]=ti.getText(7);
    input.getFieldCurrency()[i]=ti.getText(8);
    input.getFieldNullIf()[i]=ti.getText(9);
    input.getFieldIfNull()[i]=ti.getText(10);
    input.getFieldTrimType()[i]=ValueMeta.getTrimTypeByDesc(ti.getText(11));
  }
  dispose();
}
