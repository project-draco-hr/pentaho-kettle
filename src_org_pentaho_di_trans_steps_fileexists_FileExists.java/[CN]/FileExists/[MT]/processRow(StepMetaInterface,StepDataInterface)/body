{
  meta=(FileExistsMeta)smi;
  data=(FileExistsData)sdi;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  boolean fileexists=false;
  String filetype=null;
  try {
    if (first) {
      first=false;
      data.previousRowMeta=getInputRowMeta().clone();
      data.NrPrevFields=data.previousRowMeta.size();
      data.outputRowMeta=data.previousRowMeta;
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
      if (Const.isEmpty(meta.getDynamicFilenameField())) {
        logError(Messages.getString("FileExists.Error.FilenameFieldMissing"));
        throw new KettleException(Messages.getString("FileExists.Error.FilenameFieldMissing"));
      }
      if (data.indexOfFileename < 0) {
        data.indexOfFileename=data.previousRowMeta.indexOfValue(meta.getDynamicFilenameField());
        if (data.indexOfFileename < 0) {
          logError(Messages.getString("FileExists.Exception.CouldnotFindField") + "[" + meta.getDynamicFilenameField()+ "]");
          throw new KettleException(Messages.getString("FileExists.Exception.CouldnotFindField",meta.getDynamicFilenameField()));
        }
      }
    }
    Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    for (int i=0; i < data.NrPrevFields; i++) {
      outputRow[i]=r[i];
    }
    String filename=data.previousRowMeta.getString(r,data.indexOfFileename);
    if (!Const.isEmpty(filename)) {
      data.file=KettleVFS.getFileObject(filename);
      fileexists=data.file.exists();
      if (meta.includeFileType() && fileexists && !Const.isEmpty(meta.getFileTypeFieldName()))       filetype=data.file.getType().toString();
      if (meta.addResultFilenames() && fileexists && data.file.getType() == FileType.FILE) {
        ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,data.file,getTransMeta().getName(),getStepname());
        resultFile.setComment(Messages.getString("FileExists.Log.FileAddedResult"));
        addResultFile(resultFile);
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("FileExists.Log.FilenameAddResult",data.file.toString()));
      }
    }
    outputRow[data.NrPrevFields]=fileexists;
    int rowIndex=data.NrPrevFields;
    rowIndex++;
    if (meta.includeFileType() && !Const.isEmpty(meta.getFileTypeFieldName()))     outputRow[rowIndex]=filetype;
    putRow(data.outputRowMeta,outputRow);
    if (log.isRowLevel())     log.logRowlevel(toString(),Messages.getString("FileExists.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(Messages.getString("FileExists.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,meta.getResultFieldName(),"FileExistsO01");
    }
  }
  return true;
}
