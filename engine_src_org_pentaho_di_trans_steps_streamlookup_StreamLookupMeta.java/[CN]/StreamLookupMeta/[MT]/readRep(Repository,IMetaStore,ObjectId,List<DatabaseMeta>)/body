{
  try {
    String lookupFromStepname=rep.getStepAttributeString(id_step,"lookup_from_step");
    StreamInterface infoStream=getStepIOMeta().getInfoStreams().get(0);
    infoStream.setSubject(lookupFromStepname);
    setInputSorted(rep.getStepAttributeBoolean(id_step,"input_sorted"));
    setMemoryPreservationActive(rep.getStepAttributeBoolean(id_step,"preserve_memory"));
    setUsingSortedList(rep.getStepAttributeBoolean(id_step,"sorted_list"));
    setUsingIntegerPair(rep.getStepAttributeBoolean(id_step,"integer_pair"));
    int nrkeys=rep.countNrStepAttributes(id_step,"lookup_key_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"return_value_name");
    allocate(nrkeys,nrvalues);
    for (int i=0; i < nrkeys; i++) {
      getKeystream()[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name");
      getKeylookup()[i]=rep.getStepAttributeString(id_step,i,"lookup_key_field");
    }
    for (int i=0; i < nrvalues; i++) {
      getValue()[i]=rep.getStepAttributeString(id_step,i,"return_value_name");
      getValueName()[i]=rep.getStepAttributeString(id_step,i,"return_value_rename");
      getValueDefault()[i]=rep.getStepAttributeString(id_step,i,"return_value_default");
      getValueDefaultType()[i]=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"return_value_type"));
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"StreamLookupMeta.Exception.UnexpecteErrorReadingStepInfoFromRepository"),e);
  }
}
