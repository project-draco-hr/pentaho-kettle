{
  try {
    StreamInterface infoStream=getStepIOMeta().getInfoStreams().get(0);
    rep.saveStepAttribute(id_transformation,id_step,"lookup_from_step",infoStream.getStepname());
    rep.saveStepAttribute(id_transformation,id_step,"input_sorted",isInputSorted());
    rep.saveStepAttribute(id_transformation,id_step,"preserve_memory",isMemoryPreservationActive());
    rep.saveStepAttribute(id_transformation,id_step,"sorted_list",isUsingSortedList());
    rep.saveStepAttribute(id_transformation,id_step,"integer_pair",isUsingIntegerPair());
    for (int i=0; i < getKeystream().length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"lookup_key_name",getKeystream()[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"lookup_key_field",getKeylookup()[i]);
    }
    for (int i=0; i < getValue().length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"return_value_name",getValue()[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"return_value_rename",getValueName()[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"return_value_default",getValueDefault()[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"return_value_type",ValueMeta.getTypeDesc(getValueDefaultType()[i]));
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"StreamLookupMeta.Exception.UnableToSaveStepInfoToRepository") + id_step,e);
  }
}
