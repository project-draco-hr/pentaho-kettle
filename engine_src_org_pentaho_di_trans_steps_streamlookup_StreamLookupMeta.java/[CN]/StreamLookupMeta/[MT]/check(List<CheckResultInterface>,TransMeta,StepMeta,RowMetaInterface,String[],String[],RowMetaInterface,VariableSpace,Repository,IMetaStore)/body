{
  CheckResult cr;
  if (prev != null && prev.size() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.StepReceivingFields",prev.size() + ""),stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (    String aKeystream : getKeystream()) {
      int idx=prev.indexOfValue(aKeystream);
      if (idx < 0) {
        error_message+="\t\t" + aKeystream + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.FieldsNotFound") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.AllFieldsFound"),stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.CouldNotFindFieldsFromPreviousSteps"),stepMeta);
    remarks.add(cr);
  }
  if (info != null && info.size() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.StepReceivingLookupData",info.size() + ""),stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (    String aKeylookup : getKeylookup()) {
      int idx=info.indexOfValue(aKeylookup);
      if (idx < 0) {
        error_message+="\t\t" + aKeylookup + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.FieldsNotFoundInLookupStream") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.AllFieldsFoundInTheLookupStream"),stepMeta);
      remarks.add(cr);
    }
    for (    String aValue : getValue()) {
      int idx=info.indexOfValue(aValue);
      if (idx < 0) {
        error_message+="\t\t" + aValue + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.FieldsNotFoundInLookupStream2") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.AllFieldsFoundInTheLookupStream2"),stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.FieldsNotFoundFromInLookupSep"),stepMeta);
    remarks.add(cr);
  }
  StreamInterface infoStream=getStepIOMeta().getInfoStreams().get(0);
  if (infoStream.getStepMeta() == null) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.SourceStepNotSelected"),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.SourceStepIsSelected"),stepMeta);
    remarks.add(cr);
    if (info != null) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.SourceStepExist",infoStream.getStepname()),stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.SourceStepDoesNotExist",infoStream.getStepname()),stepMeta);
      remarks.add(cr);
    }
  }
  if (input.length >= 2) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.StepReceivingInfoFromInputSteps",input.length + ""),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"StreamLookupMeta.CheckResult.NeedAtLeast2InputStreams",Const.CR,Const.CR),stepMeta);
    remarks.add(cr);
  }
}
