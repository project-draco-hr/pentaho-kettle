{
  try {
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldDefinitions[i].setFieldName(rep.getStepAttributeString(id_step,i,"field_name"));
      fieldDefinitions[i].setVariableString(rep.getStepAttributeString(id_step,i,"field_variable"));
      fieldDefinitions[i].setFieldType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,"field_type")));
      fieldDefinitions[i].setFieldFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      fieldDefinitions[i].setCurrency(rep.getStepAttributeString(id_step,i,"field_currency"));
      fieldDefinitions[i].setDecimal(rep.getStepAttributeString(id_step,i,"field_decimal"));
      fieldDefinitions[i].setGroup(rep.getStepAttributeString(id_step,i,"field_group"));
      fieldDefinitions[i].setFieldLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      fieldDefinitions[i].setFieldPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      fieldDefinitions[i].setTrimType(ValueMetaString.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      int fieldType=fieldDefinitions[i].getFieldType();
      if (fieldType == ValueMetaInterface.TYPE_NONE) {
        fieldDefinitions[i].setFieldType(ValueMetaInterface.TYPE_STRING);
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
