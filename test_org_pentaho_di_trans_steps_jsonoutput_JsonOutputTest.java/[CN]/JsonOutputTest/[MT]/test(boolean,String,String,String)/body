{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("testJsonOutput");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepName="injector step";
  StepMeta injectorStep=TestUtilities.createInjectorStep(injectorStepName,registry);
  transMeta.addStep(injectorStep);
  StepMeta rowGeneratorStep=createRowGeneratorStep("Create rows for testJsonOutput1",registry,amount);
  transMeta.addStep(rowGeneratorStep);
  TransHopMeta hop_injectory_rowGenerator=new TransHopMeta(injectorStep,rowGeneratorStep);
  transMeta.addTransHop(hop_injectory_rowGenerator);
  String jsonFileName=TestUtilities.createEmptyTempFile("testJsonOutput1_");
  StepMeta jsonOutputStep=createJsonOutputStep("json output step",jsonFileName,registry,jsonBlock);
  ((JsonOutputMeta)jsonOutputStep.getStepMetaInterface()).setCompatibilityMode(compatibilityMode);
  ((JsonOutputMeta)jsonOutputStep.getStepMetaInterface()).setNrRowsInBloc(nbrRowsInBlock);
  transMeta.addStep(jsonOutputStep);
  TransHopMeta hop_RowGenerator_outputTextFile=new TransHopMeta(rowGeneratorStep,jsonOutputStep);
  transMeta.addTransHop(hop_RowGenerator_outputTextFile);
  String dummyStepName="dummy step";
  StepMeta dummyStep=createDummyStep(dummyStepName,registry);
  transMeta.addStep(dummyStep);
  TransHopMeta hop_outputJson_dummyStep=new TransHopMeta(jsonOutputStep,dummyStep);
  transMeta.addTransHop(hop_outputJson_dummyStep);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface dummyStepInterface=trans.getStepInterface(dummyStepName,0);
  RowStepCollector dummyRowCollector=new RowStepCollector();
  dummyStepInterface.addRowListener(dummyRowCollector);
  trans.startThreads();
  trans.waitUntilFinished();
  File outputFile=new File(jsonFileName + ".js");
  String jsonStructure=FileUtils.readFileToString(outputFile);
  return jsonStructure;
}
