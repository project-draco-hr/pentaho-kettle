{
  FieldSplitterMeta meta=new FieldSplitterMeta();
  meta.allocate(2);
  meta.setDelimiter(" ");
  meta.setEnclosure("");
  meta.setSplitField("split");
  meta.setFieldName(new String[]{"key","val"});
  meta.setFieldType(new int[]{ValueMetaInterface.TYPE_STRING,ValueMetaInterface.TYPE_STRING});
  FieldSplitter step=new FieldSplitter(smh.stepMeta,smh.stepDataInterface,0,smh.transMeta,smh.trans);
  step.init(meta,smh.stepDataInterface);
  RowMetaInterface rowMeta=new RowMeta();
  rowMeta.addValueMeta(new ValueMetaString("key"));
  rowMeta.addValueMeta(new ValueMetaString("val"));
  rowMeta.addValueMeta(new ValueMetaString("split"));
  step.setInputRowMeta(rowMeta);
  step.getInputRowSets().add(smh.getMockInputRowSet(new Object[]{"key","string","part1 part2"}));
  step.getOutputRowSets().add(new SingleRowRowSet());
  assertTrue(step.processRow(meta,smh.stepDataInterface));
  RowSet rs=step.getOutputRowSets().get(0);
  Object[] row=rs.getRow();
  RowMetaInterface rm=rs.getRowMeta();
  assertArrayEquals(new Object[]{"key","string","part1","part2"},Arrays.copyOf(row,4));
  assertArrayEquals(new Object[]{"key","val","key_1","val_1"},rm.getFieldNames());
}
