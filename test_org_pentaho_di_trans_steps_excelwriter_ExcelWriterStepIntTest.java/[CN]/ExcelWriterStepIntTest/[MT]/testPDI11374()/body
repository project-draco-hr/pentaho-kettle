{
  String stepName="Excel Writer";
  ExcelWriterStepMeta meta=new ExcelWriterStepMeta();
  meta.setDefault();
  File tempOutputFile=File.createTempFile("testPDI11374",".xlsx");
  tempOutputFile.deleteOnExit();
  meta.setFileName(tempOutputFile.getAbsolutePath().replace(".xlsx",""));
  meta.setExtension("xlsx");
  meta.setSheetname("Sheet10");
  meta.setOutputFields(new ExcelWriterStepField[]{});
  meta.setHeaderEnabled(true);
  TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,stepName);
  List<RowMetaAndData> inputList=getPDI11374RowMetaAndData();
  TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,stepName,TransTestFactory.DUMMY_STEPNAME,inputList);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ignore) {
  }
  String checkStepName="Excel Input";
  ExcelInputMeta excelInput=new ExcelInputMeta();
  excelInput.setFileName(new String[]{tempOutputFile.getAbsolutePath()});
  excelInput.setFileMask(new String[]{""});
  excelInput.setExcludeFileMask(new String[]{""});
  excelInput.setFileRequired(new String[]{"N"});
  excelInput.setIncludeSubFolders(new String[]{"N"});
  excelInput.setSpreadSheetType(SpreadSheetType.POI);
  excelInput.setSheetName(new String[]{"Sheet10"});
  excelInput.setStartColumn(new int[]{0});
  excelInput.setStartRow(new int[]{0});
  excelInput.setStartsWithHeader(false);
  ExcelInputField[] fields=new ExcelInputField[5];
  for (int i=0; i < 5; i++) {
    fields[i]=new ExcelInputField();
    fields[i].setName("field" + (i + 1));
  }
  excelInput.setField(fields);
  transMeta=TransTestFactory.generateTestTransformation(null,excelInput,checkStepName);
  TransHopMeta injectHop=transMeta.findTransHop(transMeta.findStep(TransTestFactory.INJECTOR_STEPNAME),transMeta.findStep(stepName));
  transMeta.removeTransHop(transMeta.indexOfTransHop(injectHop));
  inputList=new ArrayList<RowMetaAndData>();
  List<RowMetaAndData> result=TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,stepName,TransTestFactory.DUMMY_STEPNAME,inputList);
  assertNotNull(result);
  assertEquals(2,result.size());
  assertEquals(5,result.get(0).getRowMeta().size());
  assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(0).getType());
  assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(1).getType());
  assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(2).getType());
  assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(3).getType());
  assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(4).getType());
  assertEquals("col1",result.get(0).getString(0,"default-value"));
  assertEquals("col2",result.get(0).getString(1,"default-value"));
  assertEquals("col3",result.get(0).getString(2,"default-value"));
  assertEquals("col4",result.get(0).getString(3,"default-value"));
  assertEquals("col5",result.get(0).getString(4,"default-value"));
  assertEquals("data1",result.get(1).getString(0,"default-value"));
  assertEquals("data2",result.get(1).getString(1,"default-value"));
  assertEquals("data3",result.get(1).getString(2,"default-value"));
  assertEquals("data4",result.get(1).getString(3,"default-value"));
  assertEquals("data5",result.get(1).getString(4,"default-value"));
}
