{
  int valtype=Value.getType(wValueType.getText());
  Value val=new Value(valuename,wInputString.getText());
switch (valtype) {
case Value.VALUE_TYPE_NUMBER:
    try {
      df.applyPattern(wFormat.getText());
      double d=df.parse(Const.trim(wInputString.getText())).doubleValue();
      val.setValue(d);
    }
 catch (    ParseException e) {
      val.setType(valtype);
      val.setNull();
      val.setOrigin(e.toString());
    }
  break;
case Value.VALUE_TYPE_DATE:
try {
  val.trim();
  daf.applyPattern(wFormat.getText());
  val.setValue(daf.parse(wInputString.getText()));
}
 catch (ParseException e) {
  val.setType(valtype);
  val.setNull();
  val.setOrigin(e.toString());
}
break;
case Value.VALUE_TYPE_STRING:
break;
case Value.VALUE_TYPE_BOOLEAN:
val.trim();
val.setValue(val.getBoolean());
break;
case Value.VALUE_TYPE_INTEGER:
val.trim();
val.setValue(val.getInteger());
break;
case Value.VALUE_TYPE_BIGNUMBER:
val.trim();
val.setValue(val.getBigNumber());
break;
default :
break;
}
int length=Const.toInt(wLength.getText(),-1);
int precision=Const.toInt(wPrecision.getText(),-1);
val.setLength(length,precision);
return val;
}
