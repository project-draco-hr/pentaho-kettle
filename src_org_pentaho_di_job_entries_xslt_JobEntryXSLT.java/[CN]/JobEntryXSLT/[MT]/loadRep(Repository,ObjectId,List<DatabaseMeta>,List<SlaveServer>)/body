{
  try {
    xmlfilename=rep.getJobEntryAttributeString(id_jobentry,"xmlfilename");
    xslfilename=rep.getJobEntryAttributeString(id_jobentry,"xslfilename");
    outputfilename=rep.getJobEntryAttributeString(id_jobentry,"outputfilename");
    iffileexists=(int)rep.getJobEntryAttributeInteger(id_jobentry,"iffileexists");
    addfiletoresult=rep.getJobEntryAttributeBoolean(id_jobentry,"addfiletoresult");
    filenamesfromprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"filenamesfromprevious");
    xsltfactory=rep.getJobEntryAttributeString(id_jobentry,"xsltfactory");
    if (xsltfactory == null)     xsltfactory=FACTORY_JAXP;
    int nrparams=rep.countNrJobEntryAttributes(id_jobentry,"param_name");
    int nroutputprops=rep.countNrJobEntryAttributes(id_jobentry,"output_property_name");
    allocate(nrparams,nroutputprops);
    for (int i=0; i < nrparams; i++) {
      parameterField[i]=rep.getJobEntryAttributeString(id_jobentry,i,"param_field");
      parameterName[i]=rep.getJobEntryAttributeString(id_jobentry,i,"param_name");
    }
    for (int i=0; i < nroutputprops; i++) {
      outputPropertyName[i]=rep.getJobEntryAttributeString(id_jobentry,i,"output_property_name");
      outputPropertyValue[i]=rep.getJobEntryAttributeString(id_jobentry,i,"output_property_value");
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'xslt' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
