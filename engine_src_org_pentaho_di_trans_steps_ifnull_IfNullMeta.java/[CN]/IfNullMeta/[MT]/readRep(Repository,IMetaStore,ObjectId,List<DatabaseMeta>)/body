{
  try {
    replaceAllByValue=rep.getStepAttributeString(id_step,"replaceAllByValue");
    replaceAllMask=rep.getStepAttributeString(id_step,"replaceAllMask");
    selectFields=rep.getStepAttributeBoolean(id_step,"selectFields");
    selectValuesType=rep.getStepAttributeBoolean(id_step,"selectValuesType");
    setEmptyStringAll=rep.getStepAttributeBoolean(id_step,0,"setEmptyStringAll",false);
    int nrtypes=rep.countNrStepAttributes(id_step,"type_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrtypes,nrfields);
    for (int i=0; i < nrtypes; i++) {
      valueTypes[i].setTypeName(rep.getStepAttributeString(id_step,i,"type_name"));
      valueTypes[i].setTypereplaceValue(rep.getStepAttributeString(id_step,i,"type_replace_value"));
      valueTypes[i].setTypereplaceMask(rep.getStepAttributeString(id_step,i,"type_replace_mask"));
      valueTypes[i].setTypeEmptyString(rep.getStepAttributeBoolean(id_step,i,"set_type_empty_string",false));
    }
    for (int i=0; i < nrfields; i++) {
      fields[i].setFieldName(rep.getStepAttributeString(id_step,i,"field_name"));
      fields[i].setReplaceValue(rep.getStepAttributeString(id_step,i,"replace_value"));
      fields[i].setReplaceMask(rep.getStepAttributeString(id_step,i,"replace_mask"));
      fields[i].setEmptyString(rep.getStepAttributeBoolean(id_step,i,"set_empty_string",false));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
