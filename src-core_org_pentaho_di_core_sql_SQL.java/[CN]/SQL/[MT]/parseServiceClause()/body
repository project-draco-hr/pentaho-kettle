{
  if (Const.isEmpty(serviceClause)) {
    serviceName="dual";
    return;
  }
  List<String> parts=ThinUtil.splitClause(serviceClause,' ','"');
  if (parts.size() >= 1) {
    List<String> list=ThinUtil.splitClause(parts.get(0),'.','"');
    if (list.size() == 1) {
      namespace=null;
      serviceName=ThinUtil.stripQuotes(list.get(0),'"');
    }
    if (list.size() == 2) {
      namespace=ThinUtil.stripQuotes(list.get(0),'"');
      serviceName=ThinUtil.stripQuotes(list.get(1),'"');
    }
    if (list.size() > 2) {
      throw new KettleSQLException("Too many parts detected in table name specification [" + serviceClause + "]");
    }
  }
  if (parts.size() == 2) {
    serviceAlias=ThinUtil.stripQuotes(parts.get(1),'"');
  }
  if (parts.size() == 3) {
    if (parts.get(1).equalsIgnoreCase("AS")) {
      serviceAlias=ThinUtil.stripQuotes(parts.get(2),'"');
    }
 else {
      throw new KettleSQLException("AS expected in from clause: " + serviceClause);
    }
  }
  if (parts.size() > 3) {
    throw new KettleSQLException("Found " + parts.size() + " parts for the FROM clause when only a table name and optionally an alias is supported: "+ serviceClause);
  }
  serviceAlias=Const.NVL(serviceAlias,serviceName);
}
