{
  this.config=config;
  allOK=true;
  CarteSingleton.setSlaveServerConfig(config);
  LogChannelInterface log=CarteSingleton.getInstance().getLog();
  final TransformationMap transformationMap=CarteSingleton.getInstance().getTransformationMap();
  transformationMap.setSlaveServerConfig(config);
  final JobMap jobMap=CarteSingleton.getInstance().getJobMap();
  jobMap.setSlaveServerConfig(config);
  List<SlaveServerDetection> detections=Collections.synchronizedList(new ArrayList<SlaveServerDetection>());
  SocketRepository socketRepository=CarteSingleton.getInstance().getSocketRepository();
  SlaveServer slaveServer=config.getSlaveServer();
  String hostname=slaveServer.getHostname();
  int port=WebServer.PORT;
  if (!Const.isEmpty(slaveServer.getPort())) {
    try {
      port=Integer.parseInt(slaveServer.getPort());
    }
 catch (    Exception e) {
      log.logError(BaseMessages.getString(PKG,"Carte.Error.CanNotPartPort",slaveServer.getHostname(),"" + port),e);
      allOK=false;
    }
  }
  Properties masterProperties=null;
  if (config.isReportingToMasters()) {
    final SlaveServer client=new SlaveServer("Dynamic slave [" + hostname + ":"+ port+ "]",hostname,"" + port,slaveServer.getUsername(),slaveServer.getPassword());
    String propertiesMaster=slaveServer.getPropertiesMasterName();
    for (    final SlaveServer master : config.getMasters()) {
      try {
        SlaveServerDetection slaveServerDetection=new SlaveServerDetection(client);
        master.sendXML(slaveServerDetection.getXML(),RegisterSlaveServlet.CONTEXT_PATH + "/");
        log.logBasic("Registered this slave server to master slave server [" + master.toString() + "] on address ["+ master.getServerAndPort()+ "]");
      }
 catch (      Exception e) {
        log.logError("Unable to register to master slave server [" + master.toString() + "] on address ["+ master.getServerAndPort()+ "]");
        allOK=false;
      }
      try {
        if (!StringUtils.isBlank(propertiesMaster) && propertiesMaster.equalsIgnoreCase(master.getName())) {
          if (masterProperties != null) {
            log.logError("More than one primary master server. Master name is " + propertiesMaster);
          }
 else {
            masterProperties=master.getKettleProperties();
            log.logBasic("Got properties from master server [" + master.toString() + "], address ["+ master.getServerAndPort()+ "]");
          }
        }
      }
 catch (      Exception e) {
        log.logError("Unable to get properties from master server [" + master.toString() + "], address ["+ master.getServerAndPort()+ "]");
        allOK=false;
      }
    }
  }
  if (masterProperties != null) {
    EnvUtil.applyKettleProperties(masterProperties,slaveServer.isOverrideExistingProperties());
  }
  if (allOK) {
    boolean shouldJoin=config.isJoining();
    if (joinOverride != null) {
      shouldJoin=joinOverride;
    }
    this.webServer=new WebServer(log,transformationMap,jobMap,socketRepository,detections,hostname,port,shouldJoin,config.getPasswordFile(),slaveServer.getSslConfig());
  }
}
