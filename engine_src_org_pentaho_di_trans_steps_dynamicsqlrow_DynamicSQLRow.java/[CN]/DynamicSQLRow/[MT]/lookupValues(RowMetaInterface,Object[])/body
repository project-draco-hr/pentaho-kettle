{
  boolean loadFromBuffer=true;
  if (first) {
    first=false;
    data.outputRowMeta=rowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),new RowMetaInterface[]{meta.getTableFields()},null,this,repository,metaStore);
    loadFromBuffer=false;
  }
  if (log.isDetailed())   logDetailed(BaseMessages.getString(PKG,"DynamicSQLRow.Log.CheckingRow") + rowMeta.getString(rowData));
  String sqlTemp=getInputRowMeta().getString(rowData,data.indexOfSQLField);
  String sql=null;
  if (meta.isVariableReplace()) {
    sql=environmentSubstitute(sqlTemp);
  }
 else {
    sql=sqlTemp;
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"DynamicSQLRow.Log.SQLStatement",sql));
  if (meta.isQueryOnlyOnChange()) {
    if (loadFromBuffer) {
      if (!data.previousSQL.equals(sql))       loadFromBuffer=false;
    }
  }
 else   loadFromBuffer=false;
  if (loadFromBuffer) {
    incrementLinesInput();
    if (!data.skipPreviousRow) {
      Object[] newRow=RowDataUtil.resizeArray(rowData,data.outputRowMeta.size());
      int newIndex=rowMeta.size();
      RowMetaInterface addMeta=data.db.getReturnRowMeta();
      for (int p=0; p < data.previousrowbuffer.size(); p++) {
        Object[] getBufferRow=(Object[])data.previousrowbuffer.get(p);
        for (int i=0; i < addMeta.size(); i++) {
          newRow[newIndex++]=getBufferRow[i];
        }
        putRow(data.outputRowMeta,data.outputRowMeta.cloneRow(newRow));
      }
    }
  }
 else {
    if (meta.isQueryOnlyOnChange())     data.previousrowbuffer.clear();
    ResultSet rs=data.db.openQuery(sql);
    Object[] add=data.db.getRow(rs);
    RowMetaInterface addMeta=data.db.getReturnRowMeta();
    if (add != null) {
      int nrTemplateFields=data.outputRowMeta.size() - getInputRowMeta().size();
      if (addMeta.size() != nrTemplateFields) {
        throw new KettleException(BaseMessages.getString(PKG,"DynamicSQLRow.Exception.IncorrectNrTemplateFields",nrTemplateFields,addMeta.size(),sql));
      }
      StringBuilder typeErrors=new StringBuilder();
      for (int i=0; i < addMeta.size(); i++) {
        ValueMetaInterface templateValueMeta=addMeta.getValueMeta(i);
        ValueMetaInterface outputValueMeta=data.outputRowMeta.getValueMeta(getInputRowMeta().size() + i);
        if (templateValueMeta.getType() != outputValueMeta.getType()) {
          if (typeErrors.length() > 0) {
            typeErrors.append(Const.CR);
          }
          typeErrors.append(BaseMessages.getString(PKG,"DynamicSQLRow.Exception.TemplateReturnDataTypeError",templateValueMeta.toString(),outputValueMeta.toString()));
        }
      }
      if (typeErrors.length() > 0) {
        throw new KettleException(typeErrors.toString());
      }
    }
    incrementLinesInput();
    int counter=0;
    while (add != null && (meta.getRowLimit() == 0 || counter < meta.getRowLimit())) {
      counter++;
      Object[] newRow=RowDataUtil.resizeArray(rowData,data.outputRowMeta.size());
      int newIndex=rowMeta.size();
      for (int i=0; i < addMeta.size(); i++) {
        newRow[newIndex++]=add[i];
      }
      putRow(data.outputRowMeta,data.outputRowMeta.cloneRow(newRow));
      if (meta.isQueryOnlyOnChange()) {
        data.previousrowbuffer.add(add);
        data.skipPreviousRow=false;
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"DynamicSQLRow.Log.PutoutRow") + data.outputRowMeta.getString(newRow));
      if (meta.getRowLimit() == 0 || counter < meta.getRowLimit()) {
        add=data.db.getRow(rs);
        incrementLinesInput();
      }
    }
    if (counter == 0 && meta.isOuterJoin()) {
      if (data.notfound == null) {
        data.notfound=new Object[data.db.getReturnRowMeta().size()];
      }
      Object[] newRow=RowDataUtil.resizeArray(rowData,data.outputRowMeta.size());
      int newIndex=rowMeta.size();
      for (int i=0; i < data.notfound.length; i++) {
        newRow[newIndex++]=data.notfound[i];
      }
      putRow(data.outputRowMeta,newRow);
      if (meta.isQueryOnlyOnChange()) {
        data.previousrowbuffer.add(data.notfound);
        data.skipPreviousRow=false;
      }
    }
 else {
      if (meta.isQueryOnlyOnChange() && counter == 0 && !meta.isOuterJoin()) {
        data.skipPreviousRow=true;
      }
    }
    if (data.db != null)     data.db.closeQuery(rs);
  }
  if (meta.isQueryOnlyOnChange()) {
    data.previousSQL=sql;
  }
}
