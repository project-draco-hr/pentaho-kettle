{
  while (data.itemPosition >= data.itemCount || data.file == null) {
    data.file=null;
    if (!openNextFile()) {
      return null;
    }
  }
  Object[] outputRowData=buildEmptyRow();
  Node itemNode;
  if (meta.getInputPosition().length > 1) {
    itemNode=XMLHandler.getSubNodeByNr(data.section,data.itemElement,data.itemPosition);
  }
 else {
    itemNode=data.section;
  }
  data.itemPosition++;
  for (int i=0; i < meta.getInputFields().length; i++) {
    Node node=itemNode;
    XMLInputField xmlInputField=meta.getInputFields()[i];
    String value=null;
    for (int p=0; (value == null) && node != null && p < xmlInputField.getFieldPosition().length; p++) {
      XMLInputFieldPosition pos=xmlInputField.getFieldPosition()[p];
switch (pos.getType()) {
case XMLInputFieldPosition.XML_ELEMENT:
{
          if (pos.getElementNr() <= 1) {
            Node subNode=XMLHandler.getSubNode(node,pos.getName());
            if (subNode != null) {
              if (p == xmlInputField.getFieldPosition().length - 1) {
                value=XMLHandler.getNodeValue(subNode);
              }
            }
 else {
              if (log.isDebug()) {
                logDebug(BaseMessages.getString(PKG,"XMLInput.Log.UnableToFindPosition",pos.toString(),node.toString()));
              }
            }
            node=subNode;
          }
 else {
            Node subNode=XMLHandler.getSubNodeByNr(node,pos.getName(),pos.getElementNr() - 1,false);
            if (subNode != null) {
              if (p == xmlInputField.getFieldPosition().length - 1) {
                value=XMLHandler.getNodeValue(subNode);
              }
            }
 else {
              if (log.isDebug()) {
                logDebug(BaseMessages.getString(PKG,"XMLInput.Log.UnableToFindPosition",pos.toString(),node.toString()));
              }
            }
            node=subNode;
          }
        }
      break;
case XMLInputFieldPosition.XML_ATTRIBUTE:
{
      value=XMLHandler.getTagAttribute(node,pos.getName());
    }
  break;
case XMLInputFieldPosition.XML_ROOT:
{
  value=XMLHandler.getNodeValue(node);
}
break;
default :
break;
}
}
switch (xmlInputField.getTrimType()) {
case XMLInputField.TYPE_TRIM_LEFT:
value=Const.ltrim(value);
break;
case XMLInputField.TYPE_TRIM_RIGHT:
value=Const.rtrim(value);
break;
case XMLInputField.TYPE_TRIM_BOTH:
value=Const.trim(value);
break;
default :
break;
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(i);
outputRowData[i]=targetValueMeta.convertData(sourceValueMeta,value);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(value)) {
outputRowData[i]=data.previousRow[i];
}
}
}
int outputIndex=meta.getInputFields().length;
if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
outputRowData[outputIndex++]=KettleVFS.getFilename(data.file);
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[outputIndex++]=new Long(data.rownr);
}
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : (Object[])irow.cloneRow(outputRowData);
data.rownr++;
NodeList nodeList=itemNode.getChildNodes();
for (int i=0; i < nodeList.getLength(); i++) {
itemNode.removeChild(nodeList.item(i));
}
return outputRowData;
}
