{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("JobSQL.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,null);
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(Messages.getString("JobSQL.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,margin);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlConnection=new Label(shell,SWT.RIGHT);
  wlConnection.setText(Messages.getString("JobSQL.Connection.Label"));
  props.setLook(wlConnection);
  fdlConnection=new FormData();
  fdlConnection.left=new FormAttachment(0,0);
  fdlConnection.right=new FormAttachment(middle,0);
  fdlConnection.top=new FormAttachment(wName,margin);
  wlConnection.setLayoutData(fdlConnection);
  wbConnection=new Button(shell,SWT.PUSH);
  wbConnection.setText(Messages.getString("System.Button.New") + "...");
  wbConnection.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DatabaseMeta databaseMeta=new DatabaseMeta();
      databaseMeta.shareVariablesWith(jobMeta);
      DatabaseDialog cid=new DatabaseDialog(shell,databaseMeta);
      cid.setModalDialog(true);
      if (cid.open() != null) {
        jobMeta.addDatabase(databaseMeta);
        wConnection.add(databaseMeta.getName());
        wConnection.select(wConnection.getItemCount() - 1);
      }
    }
  }
);
  fdbConnection=new FormData();
  fdbConnection.right=new FormAttachment(100,0);
  fdbConnection.top=new FormAttachment(wName,margin);
  fdbConnection.height=20;
  wbConnection.setLayoutData(fdbConnection);
  wConnection=new CCombo(shell,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wConnection);
  for (int i=0; i < jobMeta.nrDatabases(); i++) {
    DatabaseMeta ci=jobMeta.getDatabase(i);
    wConnection.add(ci.getName());
  }
  wConnection.select(0);
  wConnection.addModifyListener(lsMod);
  fdConnection=new FormData();
  fdConnection.left=new FormAttachment(middle,margin);
  fdConnection.top=new FormAttachment(wName,margin);
  fdConnection.right=new FormAttachment(wbConnection,-margin);
  wConnection.setLayoutData(fdConnection);
  wlUseSubs=new Label(shell,SWT.RIGHT);
  wlUseSubs.setText(Messages.getString("JobSQL.UseVariableSubst.Label"));
  props.setLook(wlUseSubs);
  fdlUseSubs=new FormData();
  fdlUseSubs.left=new FormAttachment(0,0);
  fdlUseSubs.top=new FormAttachment(wConnection,margin);
  fdlUseSubs.right=new FormAttachment(middle,-margin);
  wlUseSubs.setLayoutData(fdlUseSubs);
  wUseSubs=new Button(shell,SWT.CHECK);
  props.setLook(wUseSubs);
  wUseSubs.setToolTipText(Messages.getString("JobSQL.UseVariableSubst.Tooltip"));
  fdUseSubs=new FormData();
  fdUseSubs.left=new FormAttachment(middle,margin);
  fdUseSubs.top=new FormAttachment(wConnection,margin);
  fdUseSubs.right=new FormAttachment(100,0);
  wUseSubs.setLayoutData(fdUseSubs);
  wUseSubs.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setUseVariableSubstitution(!jobEntry.getUseVariableSubstitution());
      jobEntry.setChanged();
    }
  }
);
  wlPosition=new Label(shell,SWT.NONE);
  wlPosition.setText(Messages.getString("JobSQL.LineNr.Label","0"));
  props.setLook(wlPosition);
  fdlPosition=new FormData();
  fdlPosition.left=new FormAttachment(0,0);
  fdlPosition.bottom=new FormAttachment(wOK,-margin);
  wlPosition.setLayoutData(fdlPosition);
  wlSQL=new Label(shell,SWT.NONE);
  wlSQL.setText(Messages.getString("JobSQL.Script.Label"));
  props.setLook(wlSQL);
  fdlSQL=new FormData();
  fdlSQL.left=new FormAttachment(0,0);
  fdlSQL.top=new FormAttachment(wConnection,margin);
  wlSQL.setLayoutData(fdlSQL);
  wSQL=new Text(shell,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);
  props.setLook(wSQL,Props.WIDGET_STYLE_FIXED);
  wSQL.addModifyListener(lsMod);
  fdSQL=new FormData();
  fdSQL.left=new FormAttachment(0,0);
  fdSQL.top=new FormAttachment(wlSQL,margin);
  fdSQL.right=new FormAttachment(100,-5);
  fdSQL.bottom=new FormAttachment(wlPosition,-margin);
  wSQL.setLayoutData(fdSQL);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wSQL.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      int linenr=wSQL.getCaretLineNumber() + 1;
      wlPosition.setText(Messages.getString("JobSQL.LineNr.Label",Integer.toString(linenr)));
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  props.setDialogSize(shell,"JobSQLDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
