{
  this.exception=null;
  final int tasksAmount=monitoredTasks.size() + backgroundTasks.size();
  final ExecutorService executors=Executors.newFixedThreadPool(tasksAmount);
  try {
    List<Future<B>> background=new ArrayList<Future<B>>(backgroundTasks.size());
    for (    Callable<B> task : backgroundTasks) {
      background.add(executors.submit(task));
    }
    List<Future<M>> monitored=new ArrayList<Future<M>>(monitoredTasks.size());
    for (    Callable<M> task : monitoredTasks) {
      monitored.add(executors.submit(task));
    }
    try {
      final long start=System.currentTimeMillis();
      while (condition.get() && !isDone(monitored) && checkTimeout(start)) {
        Thread.sleep(200);
      }
    }
 catch (    Exception e) {
      exception=e;
    }
    condition.set(false);
    for (int i=0; i < monitored.size(); i++) {
      Future<M> future=monitored.get(i);
      monitoredResults.put(monitoredTasks.get(i),ExecutionResult.from(future));
    }
    for (int i=0; i < background.size(); i++) {
      Future<B> future=background.get(i);
      while (!future.isDone()) {
      }
      backgroundResults.put(backgroundTasks.get(i),ExecutionResult.from(future));
    }
  }
  finally {
    executors.shutdown();
  }
}
