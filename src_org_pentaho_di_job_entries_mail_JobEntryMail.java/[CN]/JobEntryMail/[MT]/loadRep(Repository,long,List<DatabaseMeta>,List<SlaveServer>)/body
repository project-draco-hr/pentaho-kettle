{
  try {
    server=rep.getJobEntryAttributeString(id_jobentry,"server");
    port=rep.getJobEntryAttributeString(id_jobentry,"port");
    destination=rep.getJobEntryAttributeString(id_jobentry,"destination");
    destinationCc=rep.getJobEntryAttributeString(id_jobentry,"destinationCc");
    destinationBCc=rep.getJobEntryAttributeString(id_jobentry,"destinationBCc");
    replyAddress=rep.getJobEntryAttributeString(id_jobentry,"replyto");
    replyName=rep.getJobEntryAttributeString(id_jobentry,"replytoname");
    subject=rep.getJobEntryAttributeString(id_jobentry,"subject");
    includeDate=rep.getJobEntryAttributeBoolean(id_jobentry,"include_date");
    contactPerson=rep.getJobEntryAttributeString(id_jobentry,"contact_person");
    contactPhone=rep.getJobEntryAttributeString(id_jobentry,"contact_phone");
    comment=rep.getJobEntryAttributeString(id_jobentry,"comment");
    encoding=rep.getJobEntryAttributeString(id_jobentry,"encoding");
    priority=rep.getJobEntryAttributeString(id_jobentry,"priority");
    importance=rep.getJobEntryAttributeString(id_jobentry,"importance");
    includingFiles=rep.getJobEntryAttributeBoolean(id_jobentry,"include_files");
    usingAuthentication=rep.getJobEntryAttributeBoolean(id_jobentry,"use_auth");
    usingSecureAuthentication=rep.getJobEntryAttributeBoolean(id_jobentry,"use_secure_auth");
    authenticationUser=rep.getJobEntryAttributeString(id_jobentry,"auth_user");
    authenticationPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"auth_password"));
    onlySendComment=rep.getJobEntryAttributeBoolean(id_jobentry,"only_comment");
    useHTML=rep.getJobEntryAttributeBoolean(id_jobentry,"use_HTML");
    usePriority=rep.getJobEntryAttributeBoolean(id_jobentry,"use_Priority");
    secureConnectionType=rep.getJobEntryAttributeString(id_jobentry,"secureconnectiontype");
    int nrTypes=rep.countNrJobEntryAttributes(id_jobentry,"file_type");
    allocate(nrTypes);
    for (int i=0; i < nrTypes; i++) {
      String typeCode=rep.getJobEntryAttributeString(id_jobentry,i,"file_type");
      fileType[i]=ResultFile.getType(typeCode);
    }
    zipFiles=rep.getJobEntryAttributeBoolean(id_jobentry,"zip_files");
    zipFilename=rep.getJobEntryAttributeString(id_jobentry,"zip_name");
    replyToAddresses=rep.getJobEntryAttributeString(id_jobentry,"replyToAddresses");
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to load job entry of type 'mail' from the repository with id_jobentry=" + id_jobentry,dbe);
  }
}
