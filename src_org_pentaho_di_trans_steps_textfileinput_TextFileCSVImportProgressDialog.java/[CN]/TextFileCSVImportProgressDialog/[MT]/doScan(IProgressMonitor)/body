{
  if (samples > 0)   monitor.beginTask(Messages.getString("TextFileCSVImportProgressDialog.Task.ScanningFile"),samples + 1);
 else   monitor.beginTask(Messages.getString("TextFileCSVImportProgressDialog.Task.ScanningFile"),2);
  LogWriter log=LogWriter.getInstance();
  String line="";
  long fileLineNumber=0;
  DecimalFormatSymbols dfs=new DecimalFormatSymbols();
  int nrfields=meta.getInputFields().length;
  RowMetaInterface outputRowMeta=new RowMeta();
  meta.getFields(outputRowMeta,null,null,null,transMeta);
  RowMetaInterface convertRowMeta=(RowMetaInterface)outputRowMeta.clone();
  for (int i=0; i < convertRowMeta.size(); i++)   convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
  int nrnull[]=new int[nrfields];
  String minstr[]=new String[nrfields];
  String maxstr[]=new String[nrfields];
  boolean firststr[]=new boolean[nrfields];
  boolean isDate[]=new boolean[nrfields];
  int dateFormatCount[]=new int[nrfields];
  boolean dateFormat[][]=new boolean[nrfields][Const.getDateFormats().length];
  Date minDate[][]=new Date[nrfields][Const.getDateFormats().length];
  Date maxDate[][]=new Date[nrfields][Const.getDateFormats().length];
  boolean isNumber[]=new boolean[nrfields];
  int numberFormatCount[]=new int[nrfields];
  boolean numberFormat[][]=new boolean[nrfields][Const.getNumberFormats().length];
  double minValue[][]=new double[nrfields][Const.getDateFormats().length];
  double maxValue[][]=new double[nrfields][Const.getDateFormats().length];
  int numberPrecision[][]=new int[nrfields][Const.getNumberFormats().length];
  int numberLength[][]=new int[nrfields][Const.getNumberFormats().length];
  for (int i=0; i < nrfields; i++) {
    TextFileInputField field=meta.getInputFields()[i];
    if (log.isDebug())     debug="init field #" + i;
    if (clearFields == SWT.YES) {
      field.setName(meta.getInputFields()[i].getName());
      field.setType(meta.getInputFields()[i].getType());
      field.setFormat("");
      field.setLength(-1);
      field.setPrecision(-1);
      field.setCurrencySymbol(dfs.getCurrencySymbol());
      field.setDecimalSymbol("" + dfs.getDecimalSeparator());
      field.setGroupSymbol("" + dfs.getGroupingSeparator());
      field.setNullString("-");
      field.setTrimType(ValueMetaInterface.TRIM_TYPE_NONE);
    }
    nrnull[i]=0;
    minstr[i]="";
    maxstr[i]="";
    firststr[i]=true;
    isDate[i]=true;
    for (int j=0; j < Const.getDateFormats().length; j++) {
      dateFormat[i][j]=true;
      minDate[i][j]=Const.MAX_DATE;
      maxDate[i][j]=Const.MIN_DATE;
    }
    dateFormatCount[i]=Const.getDateFormats().length;
    isNumber[i]=true;
    for (int j=0; j < Const.getNumberFormats().length; j++) {
      numberFormat[i][j]=true;
      minValue[i][j]=Double.MAX_VALUE;
      maxValue[i][j]=-Double.MAX_VALUE;
      numberPrecision[i][j]=-1;
      numberLength[i][j]=-1;
    }
    numberFormatCount[i]=Const.getNumberFormats().length;
  }
  TextFileInputMeta strinfo=(TextFileInputMeta)meta.clone();
  for (int i=0; i < nrfields; i++)   strinfo.getInputFields()[i].setType(ValueMetaInterface.TYPE_STRING);
  debug="get first line";
  StringBuffer lineBuffer=new StringBuffer(256);
  int fileFormatType=meta.getFileFormatTypeNr();
  if (meta.hasHeader()) {
    line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
    fileLineNumber++;
    int skipped=1;
    while (line != null && skipped < meta.getNrHeaderLines()) {
      line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
      skipped++;
      fileLineNumber++;
    }
  }
  int linenr=1;
  DecimalFormat df2=(DecimalFormat)NumberFormat.getInstance();
  DecimalFormatSymbols dfs2=new DecimalFormatSymbols();
  SimpleDateFormat daf2=new SimpleDateFormat();
  boolean errorFound=false;
  while (!errorFound && line != null && (linenr <= samples || samples == 0) && !monitor.isCanceled()) {
    monitor.subTask(Messages.getString("TextFileCSVImportProgressDialog.Task.ScanningLine","" + linenr));
    if (samples > 0)     monitor.worked(1);
    if (log.isDebug())     debug="convert line #" + linenr + " to row";
    RowMetaInterface rowMeta=new RowMeta();
    meta.getFields(rowMeta,"stepname",null,null,transMeta);
    Object[] r=TextFileInput.convertLineToRow(new TextFileLine(line,fileLineNumber,null),strinfo,outputRowMeta,convertRowMeta,meta.getFilePaths(transMeta)[0],rownumber,null);
    rownumber++;
    for (int i=0; i < nrfields && i < r.length; i++) {
      TextFileInputField field=meta.getInputFields()[i];
      if (log.isDebug())       debug="Start of for loop, get new value " + i;
      ValueMetaInterface v=rowMeta.getValueMeta(i);
      if (log.isDebug())       debug="Start of for loop over " + r.length + " elements in Row r, now at #"+ i+ " containing value : ["+ v.toString()+ "]";
      if (r[i] != null) {
        String fieldValue=rowMeta.getString(r,i);
        int trimthis=ValueMetaInterface.TRIM_TYPE_NONE;
        boolean spacesBefore=Const.nrSpacesBefore(fieldValue) > 0;
        boolean spacesAfter=Const.nrSpacesAfter(fieldValue) > 0;
        fieldValue=Const.trim(fieldValue);
        if (spacesBefore)         trimthis|=ValueMetaInterface.TRIM_TYPE_LEFT;
        if (spacesAfter)         trimthis|=ValueMetaInterface.TRIM_TYPE_RIGHT;
        if (log.isDebug())         debug="change trim type[" + i + "]";
        field.setTrimType(field.getTrimType() | trimthis);
        if (log.isDebug())         debug="Field #" + i + " has type : "+ ValueMeta.getTypeDesc(field.getType());
        if (isNumber[i]) {
          if (log.isDebug())           debug="Number checking of [" + fieldValue + "] on line #"+ linenr;
          boolean containsDot=false;
          boolean containsComma=false;
          for (int x=0; x < fieldValue.length() && field.getType() == ValueMetaInterface.TYPE_NUMBER; x++) {
            char ch=fieldValue.charAt(x);
            if (!Character.isDigit(ch) && ch != '.' && ch != ',' && (ch != '-' || x > 0) && ch != 'E' && ch != 'e') {
              isNumber[i]=false;
            }
 else {
              if (ch == '.')               containsDot=true;
              if (ch == ',')               containsComma=true;
            }
          }
          if (isNumber[i]) {
            if (containsDot && !containsComma) {
              dfs2.setDecimalSeparator('.');
              field.setDecimalSymbol(".");
              dfs2.setGroupingSeparator(',');
              field.setGroupSymbol(",");
            }
 else             if (!containsDot && containsComma) {
              dfs2.setDecimalSeparator(',');
              field.setDecimalSymbol(",");
              dfs2.setGroupingSeparator('.');
              field.setGroupSymbol(".");
            }
 else             if (containsDot && containsComma) {
              int indexDot=fieldValue.indexOf(".");
              int indexComma=fieldValue.indexOf(",");
              if (indexDot > indexComma) {
                dfs2.setDecimalSeparator('.');
                field.setDecimalSymbol(".");
                dfs2.setGroupingSeparator(',');
                field.setGroupSymbol(",");
              }
 else {
                dfs2.setDecimalSeparator(',');
                field.setDecimalSymbol(",");
                dfs2.setGroupingSeparator('.');
                field.setGroupSymbol(".");
              }
            }
            for (int x=0; x < Const.getNumberFormats().length; x++) {
              if (numberFormat[i][x]) {
                try {
                  df2.setDecimalFormatSymbols(dfs2);
                  df2.applyPattern(Const.getNumberFormats()[x]);
                  double d=df2.parse(fieldValue).doubleValue();
                  int prec=TextFileInputDialog.guessPrecision(d);
                  if (prec > numberPrecision[i][x])                   numberPrecision[i][x]=prec;
                  int leng=TextFileInputDialog.guessLength(d) + prec;
                  if (leng > numberLength[i][x])                   numberLength[i][x]=leng;
                  if (d < minValue[i][x])                   minValue[i][x]=d;
                  if (d > maxValue[i][x])                   maxValue[i][x]=d;
                }
 catch (                Exception e) {
                  numberFormat[i][x]=false;
                  numberFormatCount[i]--;
                }
              }
            }
            if (numberFormatCount[i] == 0) {
              isNumber[i]=false;
            }
          }
        }
        if (log.isDebug())         debug="Check max length on field #" + i + " called "+ field.getName()+ " : ["+ fieldValue+ "]";
        if (fieldValue.length() > field.getLength())         field.setLength(fieldValue.length());
        if (isDate[i]) {
          for (int x=0; x < Const.getDateFormats().length; x++) {
            if (dateFormat[i][x]) {
              try {
                daf2.applyPattern(Const.getDateFormats()[x]);
                Date date=daf2.parse(fieldValue);
                Calendar cal=Calendar.getInstance();
                cal.setTime(date);
                int year=cal.get(Calendar.YEAR);
                if (year < 1800 || year > 2200) {
                  dateFormat[i][x]=false;
                  dateFormatCount[i]--;
                }
                if (minDate[i][x].compareTo(date) > 0)                 minDate[i][x]=date;
                if (maxDate[i][x].compareTo(date) < 0)                 maxDate[i][x]=date;
              }
 catch (              Exception e) {
                dateFormat[i][x]=false;
                dateFormatCount[i]--;
              }
            }
          }
          if (dateFormatCount[i] == 0) {
            isDate[i]=false;
          }
        }
        if (firststr[i]) {
          firststr[i]=false;
          minstr[i]=fieldValue;
          maxstr[i]=fieldValue;
        }
        if (minstr[i].compareTo(fieldValue) > 0)         minstr[i]=fieldValue;
        if (maxstr[i].compareTo(fieldValue) < 0)         maxstr[i]=fieldValue;
        debug="End of for loop";
      }
 else {
        nrnull[i]++;
      }
    }
    fileLineNumber++;
    if (r != null)     linenr++;
 else     rownumber--;
    debug="Grab another line";
    line=TextFileInput.getLine(log,reader,fileFormatType,lineBuffer);
    debug="End of while loop";
  }
  monitor.worked(1);
  monitor.setTaskName(Messages.getString("TextFileCSVImportProgressDialog.Task.AnalyzingResults"));
  for (int i=0; i < nrfields; i++) {
    TextFileInputField field=meta.getInputFields()[i];
    if (field.getType() == ValueMetaInterface.TYPE_STRING) {
      if (isDate[i]) {
        field.setType(ValueMetaInterface.TYPE_DATE);
        for (int x=Const.getDateFormats().length - 1; x >= 0; x--) {
          if (dateFormat[i][x]) {
            field.setFormat(Const.getDateFormats()[x]);
            field.setLength(TextFileInputDialog.dateLengths[x]);
            field.setPrecision(-1);
          }
        }
      }
 else       if (isNumber[i]) {
        field.setType(ValueMetaInterface.TYPE_NUMBER);
        for (int x=Const.getNumberFormats().length - 1; x >= 0; x--) {
          if (numberFormat[i][x]) {
            field.setFormat(Const.getNumberFormats()[x]);
            field.setLength(numberLength[i][x]);
            field.setPrecision(numberPrecision[i][x]);
            if (field.getPrecision() == 0 && field.getLength() < 18) {
              field.setType(ValueMetaInterface.TYPE_INTEGER);
              field.setFormat("");
            }
          }
        }
      }
 else {
        field.setDecimalSymbol("");
        field.setGroupSymbol("");
        field.setCurrencySymbol("");
      }
    }
  }
  String message="";
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.ResultAfterScanning","" + (linenr - 1));
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.HorizontalLine");
  for (int i=0; i < nrfields; i++) {
    TextFileInputField field=meta.getInputFields()[i];
    message+=Messages.getString("TextFileCSVImportProgressDialog.Info.FieldNumber","" + (i + 1));
    message+=Messages.getString("TextFileCSVImportProgressDialog.Info.FieldName",field.getName());
    message+=Messages.getString("TextFileCSVImportProgressDialog.Info.FieldType",field.getTypeDesc());
switch (field.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
      message+=Messages.getString("TextFileCSVImportProgressDialog.Info.EstimatedLength",(field.getLength() < 0 ? "-" : "" + field.getLength()));
    message+=Messages.getString("TextFileCSVImportProgressDialog.Info.EstimatedPrecision",field.getPrecision() < 0 ? "-" : "" + field.getPrecision());
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberFormat",field.getFormat());
if (numberFormatCount[i] > 1) {
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.WarnNumberFormat");
}
for (int x=0; x < Const.getNumberFormats().length; x++) {
if (numberFormat[i][x]) {
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberFormat2",Const.getNumberFormats()[x]);
  double minnum=minValue[i][x];
  double maxnum=maxValue[i][x];
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberMinValue",Double.toString(minnum));
  message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberMaxValue",Double.toString(maxnum));
  try {
    df2.applyPattern(Const.getNumberFormats()[x]);
    df2.setDecimalFormatSymbols(dfs2);
    double mn=df2.parse(minstr[i]).doubleValue();
    message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberExample",Const.getNumberFormats()[x],minstr[i],Double.toString(mn));
  }
 catch (  Exception e) {
    log.logBasic(toString(),"This is unexpected: parsing [" + minstr[i] + "] with format ["+ Const.getNumberFormats()[x]+ "] did not work.");
  }
}
}
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.NumberNrNullValues","" + nrnull[i]);
break;
case ValueMetaInterface.TYPE_STRING:
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.StringMaxLength","" + field.getLength());
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.StringMinValue",minstr[i]);
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.StringMaxValue",maxstr[i]);
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.StringNrNullValues","" + nrnull[i]);
break;
case ValueMetaInterface.TYPE_DATE:
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateMaxLength",field.getLength() < 0 ? "-" : "" + field.getLength());
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateFormat",field.getFormat());
if (dateFormatCount[i] > 1) {
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.WarnDateFormat");
}
for (int x=0; x < Const.getDateFormats().length; x++) {
if (dateFormat[i][x]) {
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateFormat2",Const.getDateFormats()[x]);
Date mindate=minDate[i][x];
Date maxdate=maxDate[i][x];
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateMinValue",mindate.toString());
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateMaxValue",maxdate.toString());
daf2.applyPattern(Const.getDateFormats()[x]);
try {
Date md=daf2.parse(minstr[i]);
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateExample",Const.getDateFormats()[x],minstr[i],md.toString());
}
 catch (Exception e) {
log.logError(toString(),"This is unexpected: parsing [" + minstr[i] + "] with format ["+ Const.getDateFormats()[x]+ "] did not work.");
}
}
}
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.DateNrNullValues","" + nrnull[i]);
break;
default :
break;
}
if (nrnull[i] == linenr - 1) {
message+=Messages.getString("TextFileCSVImportProgressDialog.Info.AllNullValues");
}
message+=Const.CR;
}
monitor.worked(1);
monitor.done();
return message;
}
