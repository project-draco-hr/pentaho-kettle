{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("MailValidatorDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(Messages.getString("MailValidatorDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wlemailFieldName=new Label(shell,SWT.RIGHT);
  wlemailFieldName.setText(Messages.getString("MailValidatorDialog.emailFieldName.Label"));
  props.setLook(wlemailFieldName);
  fdlemailFieldName=new FormData();
  fdlemailFieldName.left=new FormAttachment(0,0);
  fdlemailFieldName.right=new FormAttachment(middle,-margin);
  fdlemailFieldName.top=new FormAttachment(wStepname,margin);
  wlemailFieldName.setLayoutData(fdlemailFieldName);
  wemailFieldName=new CCombo(shell,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wemailFieldName);
  wemailFieldName.addModifyListener(lsMod);
  fdemailFieldName=new FormData();
  fdemailFieldName.left=new FormAttachment(middle,0);
  fdemailFieldName.top=new FormAttachment(wStepname,margin);
  fdemailFieldName.right=new FormAttachment(100,-margin);
  wemailFieldName.setLayoutData(fdemailFieldName);
  wemailFieldName.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      Cursor busy=new Cursor(shell.getDisplay(),SWT.CURSOR_WAIT);
      shell.setCursor(busy);
      get();
      shell.setCursor(null);
      busy.dispose();
    }
  }
);
  wSettingsGroup=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wSettingsGroup);
  wSettingsGroup.setText(Messages.getString("MailValidatorDialog.SettingsGroup.Label"));
  FormLayout groupSettings=new FormLayout();
  groupSettings.marginWidth=10;
  groupSettings.marginHeight=10;
  wSettingsGroup.setLayout(groupSettings);
  wlSMTPCheck=new Label(wSettingsGroup,SWT.RIGHT);
  wlSMTPCheck.setText(Messages.getString("MailValidatorDialog.SMTPCheck.Label"));
  props.setLook(wlSMTPCheck);
  fdlSMTPCheck=new FormData();
  fdlSMTPCheck.left=new FormAttachment(0,0);
  fdlSMTPCheck.top=new FormAttachment(wResult,margin);
  fdlSMTPCheck.right=new FormAttachment(middle,-2 * margin);
  wlSMTPCheck.setLayoutData(fdlSMTPCheck);
  wSMTPCheck=new Button(wSettingsGroup,SWT.CHECK);
  props.setLook(wSMTPCheck);
  wSMTPCheck.setToolTipText(Messages.getString("MailValidatorDialog.SMTPCheck.Tooltip"));
  fdSMTPCheck=new FormData();
  fdSMTPCheck.left=new FormAttachment(middle,-margin);
  fdSMTPCheck.top=new FormAttachment(wemailFieldName,margin);
  wSMTPCheck.setLayoutData(fdSMTPCheck);
  wSMTPCheck.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeSMTPCheck();
    }
  }
);
  wlTimeOut=new Label(wSettingsGroup,SWT.RIGHT);
  wlTimeOut.setText(Messages.getString("MailValidatorDialog.TimeOutField.Label"));
  props.setLook(wlTimeOut);
  fdlTimeOut=new FormData();
  fdlTimeOut.left=new FormAttachment(0,0);
  fdlTimeOut.right=new FormAttachment(middle,-2 * margin);
  fdlTimeOut.top=new FormAttachment(wSMTPCheck,margin);
  wlTimeOut.setLayoutData(fdlTimeOut);
  wTimeOut=new TextVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wTimeOut.setToolTipText(Messages.getString("MailValidatorDialog.TimeOutField.Tooltip"));
  props.setLook(wTimeOut);
  wTimeOut.addModifyListener(lsMod);
  fdTimeOut=new FormData();
  fdTimeOut.left=new FormAttachment(middle,-margin);
  fdTimeOut.top=new FormAttachment(wSMTPCheck,margin);
  fdTimeOut.right=new FormAttachment(100,0);
  wTimeOut.setLayoutData(fdTimeOut);
  wleMailSender=new Label(wSettingsGroup,SWT.RIGHT);
  wleMailSender.setText(Messages.getString("MailValidatorDialog.eMailSenderField.Label"));
  props.setLook(wleMailSender);
  fdleMailSender=new FormData();
  fdleMailSender.left=new FormAttachment(0,0);
  fdleMailSender.right=new FormAttachment(middle,-2 * margin);
  fdleMailSender.top=new FormAttachment(wTimeOut,margin);
  wleMailSender.setLayoutData(fdleMailSender);
  weMailSender=new TextVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  weMailSender.setToolTipText(Messages.getString("MailValidatorDialog.eMailSenderField.Tooltip"));
  props.setLook(weMailSender);
  weMailSender.addModifyListener(lsMod);
  fdeMailSender=new FormData();
  fdeMailSender.left=new FormAttachment(middle,-margin);
  fdeMailSender.top=new FormAttachment(wTimeOut,margin);
  fdeMailSender.right=new FormAttachment(100,0);
  weMailSender.setLayoutData(fdeMailSender);
  wlDefaultSMTP=new Label(wSettingsGroup,SWT.RIGHT);
  wlDefaultSMTP.setText(Messages.getString("MailValidatorDialog.DefaultSMTPField.Label"));
  props.setLook(wlDefaultSMTP);
  fdlDefaultSMTP=new FormData();
  fdlDefaultSMTP.left=new FormAttachment(0,0);
  fdlDefaultSMTP.right=new FormAttachment(middle,-2 * margin);
  fdlDefaultSMTP.top=new FormAttachment(weMailSender,margin);
  wlDefaultSMTP.setLayoutData(fdlDefaultSMTP);
  wDefaultSMTP=new TextVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wDefaultSMTP.setToolTipText(Messages.getString("MailValidatorDialog.DefaultSMTPField.Tooltip"));
  props.setLook(wDefaultSMTP);
  wDefaultSMTP.addModifyListener(lsMod);
  fdDefaultSMTP=new FormData();
  fdDefaultSMTP.left=new FormAttachment(middle,-margin);
  fdDefaultSMTP.top=new FormAttachment(weMailSender,margin);
  fdDefaultSMTP.right=new FormAttachment(100,0);
  wDefaultSMTP.setLayoutData(fdDefaultSMTP);
  wldynamicDefaultSMTP=new Label(wSettingsGroup,SWT.RIGHT);
  wldynamicDefaultSMTP.setText(Messages.getString("MailValidatorDialog.dynamicDefaultSMTP.Label"));
  props.setLook(wldynamicDefaultSMTP);
  fdldynamicDefaultSMTP=new FormData();
  fdldynamicDefaultSMTP.left=new FormAttachment(0,0);
  fdldynamicDefaultSMTP.top=new FormAttachment(wDefaultSMTP,margin);
  fdldynamicDefaultSMTP.right=new FormAttachment(middle,-2 * margin);
  wldynamicDefaultSMTP.setLayoutData(fdldynamicDefaultSMTP);
  wdynamicDefaultSMTP=new Button(wSettingsGroup,SWT.CHECK);
  props.setLook(wdynamicDefaultSMTP);
  wdynamicDefaultSMTP.setToolTipText(Messages.getString("MailValidatorDialog.dynamicDefaultSMTP.Tooltip"));
  fddynamicDefaultSMTP=new FormData();
  fddynamicDefaultSMTP.left=new FormAttachment(middle,-margin);
  fddynamicDefaultSMTP.top=new FormAttachment(wDefaultSMTP,margin);
  wdynamicDefaultSMTP.setLayoutData(fddynamicDefaultSMTP);
  wdynamicDefaultSMTP.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activedynamicDefaultSMTP();
    }
  }
);
  wldefaultSMTPField=new Label(wSettingsGroup,SWT.RIGHT);
  wldefaultSMTPField.setText(Messages.getString("MailValidatorDialog.defaultSMTPField.Label"));
  props.setLook(wldefaultSMTPField);
  fdldefaultSMTPField=new FormData();
  fdldefaultSMTPField.left=new FormAttachment(0,0);
  fdldefaultSMTPField.right=new FormAttachment(middle,-2 * margin);
  fdldefaultSMTPField.top=new FormAttachment(wdynamicDefaultSMTP,margin);
  wldefaultSMTPField.setLayoutData(fdldefaultSMTPField);
  wdefaultSMTPField=new CCombo(wSettingsGroup,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wdefaultSMTPField);
  wdefaultSMTPField.addModifyListener(lsMod);
  fddefaultSMTPField=new FormData();
  fddefaultSMTPField.left=new FormAttachment(middle,-margin);
  fddefaultSMTPField.top=new FormAttachment(wdynamicDefaultSMTP,margin);
  fddefaultSMTPField.right=new FormAttachment(100,-margin);
  wdefaultSMTPField.setLayoutData(fddefaultSMTPField);
  wdefaultSMTPField.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      Cursor busy=new Cursor(shell.getDisplay(),SWT.CURSOR_WAIT);
      shell.setCursor(busy);
      get();
      shell.setCursor(null);
      busy.dispose();
    }
  }
);
  fdSettingsGroup=new FormData();
  fdSettingsGroup.left=new FormAttachment(0,margin);
  fdSettingsGroup.top=new FormAttachment(wemailFieldName,margin);
  fdSettingsGroup.right=new FormAttachment(100,-margin);
  wSettingsGroup.setLayoutData(fdSettingsGroup);
  wResultGroup=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wResultGroup);
  wResultGroup.setText(Messages.getString("MailValidatorDialog.ResultGroup.label"));
  FormLayout groupResult=new FormLayout();
  groupResult.marginWidth=10;
  groupResult.marginHeight=10;
  wResultGroup.setLayout(groupResult);
  wlResult=new Label(wResultGroup,SWT.RIGHT);
  wlResult.setText(Messages.getString("MailValidatorDialog.ResultField.Label"));
  props.setLook(wlResult);
  fdlResult=new FormData();
  fdlResult.left=new FormAttachment(0,0);
  fdlResult.right=new FormAttachment(middle,-2 * margin);
  fdlResult.top=new FormAttachment(wSettingsGroup,margin * 2);
  wlResult.setLayoutData(fdlResult);
  wResult=new TextVar(transMeta,wResultGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wResult.setToolTipText(Messages.getString("MailValidatorDialog.ResultField.Tooltip"));
  props.setLook(wResult);
  wResult.addModifyListener(lsMod);
  fdResult=new FormData();
  fdResult.left=new FormAttachment(middle,-margin);
  fdResult.top=new FormAttachment(wSettingsGroup,margin * 2);
  fdResult.right=new FormAttachment(100,0);
  wResult.setLayoutData(fdResult);
  wlResultAsString=new Label(wResultGroup,SWT.RIGHT);
  wlResultAsString.setText(Messages.getString("MailValidatorDialog.ResultAsString.Label"));
  props.setLook(wlResultAsString);
  fdlResultAsString=new FormData();
  fdlResultAsString.left=new FormAttachment(0,0);
  fdlResultAsString.top=new FormAttachment(wResult,margin);
  fdlResultAsString.right=new FormAttachment(middle,-2 * margin);
  wlResultAsString.setLayoutData(fdlResultAsString);
  wResultAsString=new Button(wResultGroup,SWT.CHECK);
  props.setLook(wResultAsString);
  wResultAsString.setToolTipText(Messages.getString("MailValidatorDialog.ResultAsString.Tooltip"));
  fdResultAsString=new FormData();
  fdResultAsString.left=new FormAttachment(middle,-margin);
  fdResultAsString.top=new FormAttachment(wResult,margin);
  wResultAsString.setLayoutData(fdResultAsString);
  wResultAsString.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeResultAsString();
    }
  }
);
  wlResultStringTrue=new Label(wResultGroup,SWT.RIGHT);
  wlResultStringTrue.setText(Messages.getString("MailValidatorDialog.ResultStringTrueField.Label"));
  props.setLook(wlResultStringTrue);
  fdlResultStringTrue=new FormData();
  fdlResultStringTrue.left=new FormAttachment(0,0);
  fdlResultStringTrue.right=new FormAttachment(middle,-2 * margin);
  fdlResultStringTrue.top=new FormAttachment(wResultAsString,margin);
  wlResultStringTrue.setLayoutData(fdlResultStringTrue);
  wResultStringTrue=new TextVar(transMeta,wResultGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wResultStringTrue.setToolTipText(Messages.getString("MailValidatorDialog.ResultStringTrueField.Tooltip"));
  props.setLook(wResultStringTrue);
  wResultStringTrue.addModifyListener(lsMod);
  fdResultStringTrue=new FormData();
  fdResultStringTrue.left=new FormAttachment(middle,-margin);
  fdResultStringTrue.top=new FormAttachment(wResultAsString,margin);
  fdResultStringTrue.right=new FormAttachment(100,0);
  wResultStringTrue.setLayoutData(fdResultStringTrue);
  wlResultStringFalse=new Label(wResultGroup,SWT.RIGHT);
  wlResultStringFalse.setText(Messages.getString("MailValidatorDialog.ResultStringFalseField.Label"));
  props.setLook(wlResultStringFalse);
  fdlResultStringFalse=new FormData();
  fdlResultStringFalse.left=new FormAttachment(0,0);
  fdlResultStringFalse.right=new FormAttachment(middle,-2 * margin);
  fdlResultStringFalse.top=new FormAttachment(wResultStringTrue,margin);
  wlResultStringFalse.setLayoutData(fdlResultStringFalse);
  wResultStringFalse=new TextVar(transMeta,wResultGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wResultStringFalse.setToolTipText(Messages.getString("MailValidatorDialog.ResultStringFalseField.Tooltip"));
  props.setLook(wResultStringFalse);
  wResultStringFalse.addModifyListener(lsMod);
  fdResultStringFalse=new FormData();
  fdResultStringFalse.left=new FormAttachment(middle,-margin);
  fdResultStringFalse.top=new FormAttachment(wResultStringTrue,margin);
  fdResultStringFalse.right=new FormAttachment(100,0);
  wResultStringFalse.setLayoutData(fdResultStringFalse);
  wlErrorMsg=new Label(wResultGroup,SWT.RIGHT);
  wlErrorMsg.setText(Messages.getString("MailValidatorDialog.ErrorMsgField.Label"));
  props.setLook(wlErrorMsg);
  fdlErrorMsg=new FormData();
  fdlErrorMsg.left=new FormAttachment(0,0);
  fdlErrorMsg.right=new FormAttachment(middle,-2 * margin);
  fdlErrorMsg.top=new FormAttachment(wResultStringFalse,margin);
  wlErrorMsg.setLayoutData(fdlErrorMsg);
  wErrorMsg=new TextVar(transMeta,wResultGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wErrorMsg.setToolTipText(Messages.getString("MailValidatorDialog.ErrorMsgField.Tooltip"));
  props.setLook(wErrorMsg);
  wErrorMsg.addModifyListener(lsMod);
  fdErrorMsg=new FormData();
  fdErrorMsg.left=new FormAttachment(middle,-margin);
  fdErrorMsg.top=new FormAttachment(wResultStringFalse,margin);
  fdErrorMsg.right=new FormAttachment(100,0);
  wErrorMsg.setLayoutData(fdErrorMsg);
  fdResultGroup=new FormData();
  fdResultGroup.left=new FormAttachment(0,margin);
  fdResultGroup.top=new FormAttachment(wSettingsGroup,2 * margin);
  fdResultGroup.right=new FormAttachment(100,-margin);
  wResultGroup.setLayoutData(fdResultGroup);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,wResultGroup);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  setSize();
  getData();
  activeSMTPCheck();
  activeResultAsString();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
