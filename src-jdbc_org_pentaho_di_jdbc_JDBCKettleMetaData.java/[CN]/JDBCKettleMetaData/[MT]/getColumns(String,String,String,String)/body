{
  log.debug("catalog:" + catalog + " , schemaPattern:"+ schemaPattern+ " , tableNamePattern:"+ tableNamePattern+ " ,columnNamePattern:"+ columnNamePattern);
  List<RowMetaAndData> rowAndDatas=new ArrayList<RowMetaAndData>();
  if (!isDir) {
    log.debug(helper.getRowMeta(tableNamePattern));
    RowMeta rm=helper.getRowMeta(tableNamePattern);
    String[] columns=rm.getFieldNames();
    for (int i=0; columns != null && i < columns.length; i++) {
      RowMetaAndData rd=new RowMetaAndData();
      rd.addValue("TABLE_CAT",ValueMetaInterface.TYPE_STRING,catalog);
      rd.addValue("TABLE_SCHEM",ValueMetaInterface.TYPE_STRING,schemaPattern);
      rd.addValue("TABLE_NAME",ValueMetaInterface.TYPE_STRING,tableNamePattern);
      rd.addValue("COLUMN_NAME",ValueMetaInterface.TYPE_STRING,columns[i]);
      rd.addValue("DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"4");
      rd.addValue("TYPE_NAME",ValueMetaInterface.TYPE_STRING,"");
      rd.addValue("COLUMN_SIZE",ValueMetaInterface.TYPE_INTEGER,columns.length);
      rd.addValue("BUFFER_LENGTH",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("DECIMAL_DIGITS",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("NUM_PREC_RADIX",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("NULLABLE",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("REMARKS",ValueMetaInterface.TYPE_STRING,"");
      rd.addValue("COLUMN_DEF",ValueMetaInterface.TYPE_STRING,"");
      rd.addValue("SQL_DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("SQL_DATETIME_SUB",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("CHAR_OCTET_LENGTH",ValueMetaInterface.TYPE_INTEGER,"1");
      rd.addValue("ORDINAL_POSITION",ValueMetaInterface.TYPE_INTEGER,"20");
      rd.addValue("IS_NULLABLE",ValueMetaInterface.TYPE_STRING,"0");
      rd.addValue("SCOPE_CATALOG",ValueMetaInterface.TYPE_STRING,"0");
      rd.addValue("SCOPE_SCHEMA",ValueMetaInterface.TYPE_STRING,"0");
      rd.addValue("SCOPE_TABLE",ValueMetaInterface.TYPE_STRING,"0");
      rd.addValue("SOURCE_DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"1");
      rowAndDatas.add(rd);
    }
    KettleJDBCResultSet rs=new KettleJDBCResultSet(null,rowAndDatas,"*");
    return rs;
  }
  RowMeta rm=helper.getRowMeta(tableNamePattern);
  String[] columns=rm.getFieldNames();
  for (int i=0; columns != null && i < columns.length; i++) {
    String name=columns[i];
    RowMetaAndData rd=new RowMetaAndData();
    rd.addValue("TABLE_CAT",ValueMetaInterface.TYPE_STRING,catalog);
    rd.addValue("TABLE_SCHEM",ValueMetaInterface.TYPE_STRING,schemaPattern);
    rd.addValue("TABLE_NAME",ValueMetaInterface.TYPE_STRING,tableNamePattern);
    rd.addValue("COLUMN_NAME",ValueMetaInterface.TYPE_STRING,name);
    rd.addValue("DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"4");
    rd.addValue("TYPE_NAME",ValueMetaInterface.TYPE_STRING,"");
    rd.addValue("COLUMN_SIZE",ValueMetaInterface.TYPE_INTEGER,columns.length);
    rd.addValue("BUFFER_LENGTH",ValueMetaInterface.TYPE_INTEGER,name);
    rd.addValue("DECIMAL_DIGITS",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("NUM_PREC_RADIX",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("NULLABLE",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("REMARKS",ValueMetaInterface.TYPE_STRING,name);
    rd.addValue("COLUMN_DEF",ValueMetaInterface.TYPE_STRING,name);
    rd.addValue("SQL_DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("SQL_DATETIME_SUB",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("CHAR_OCTET_LENGTH",ValueMetaInterface.TYPE_INTEGER,"1");
    rd.addValue("ORDINAL_POSITION",ValueMetaInterface.TYPE_INTEGER,"20");
    rd.addValue("IS_NULLABLE",ValueMetaInterface.TYPE_STRING,"0");
    rd.addValue("SCOPE_CATALOG",ValueMetaInterface.TYPE_STRING,"0");
    rd.addValue("SCOPE_SCHEMA",ValueMetaInterface.TYPE_STRING,"0");
    rd.addValue("SCOPE_TABLE",ValueMetaInterface.TYPE_STRING,"0");
    rd.addValue("SOURCE_DATA_TYPE",ValueMetaInterface.TYPE_INTEGER,"1");
    rowAndDatas.add(rd);
  }
  KettleJDBCResultSet rs=new KettleJDBCResultSet(null,rowAndDatas,"*");
  return rs;
}
