{
synchronized (this.syncObject) {
    this.maxSize=Const.toInt(EnvUtil.getSystemProperty("KETTLE_MAX_LOGGING_REGISTRY_SIZE"),10000);
    LoggingObject loggingSource=new LoggingObject(object);
    LoggingObjectInterface found=findExistingLoggingSource(loggingSource);
    if ((found != null) && (found.getParent() != null)) {
      return found.getLogChannelId();
    }
    String logChannelId=UUID.randomUUID().toString();
    loggingSource.setLogChannelId(logChannelId);
    this.map.put(logChannelId,loggingSource);
    if (loggingSource.getParent() != null) {
      String parentLogChannelId=loggingSource.getParent().getLogChannelId();
      if (parentLogChannelId != null) {
        List<String> parentChildren=this.childrenMap.get(parentLogChannelId);
        if (parentChildren == null) {
          parentChildren=new ArrayList<String>();
          this.childrenMap.put(parentLogChannelId,parentChildren);
        }
        parentChildren.add(logChannelId);
      }
    }
    this.lastModificationTime=new Date();
    loggingSource.setRegistrationDate(this.lastModificationTime);
    if ((this.maxSize > 0) && (this.map.size() > this.maxSize)) {
      List<LoggingObjectInterface> all=new ArrayList<LoggingObjectInterface>(this.map.values());
      Collections.sort(all,new Comparator<LoggingObjectInterface>(){
        @Override public int compare(        LoggingObjectInterface o1,        LoggingObjectInterface o2){
          if ((o1 == null) && (o2 != null))           return -1;
          if ((o1 != null) && (o2 == null))           return 1;
          if ((o1 == null) && (o2 == null))           return 0;
          return (o1.getRegistrationDate().compareTo(o2.getRegistrationDate()));
        }
      }
);
      int cutCount=this.maxSize < 1000 ? this.maxSize : 1000;
      for (int i=0; i < cutCount; i++) {
        LoggingObjectInterface toRemove=(LoggingObjectInterface)all.get(i);
        this.map.remove(toRemove.getLogChannelId());
        this.childrenMap.remove(toRemove.getLogChannelId());
      }
    }
    return logChannelId;
  }
}
