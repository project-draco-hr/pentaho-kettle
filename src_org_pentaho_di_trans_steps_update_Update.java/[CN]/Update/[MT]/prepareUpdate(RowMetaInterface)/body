{
  DatabaseMeta databaseMeta=meta.getDatabaseMeta();
  data.updateParameterRowMeta=new RowMeta();
  String sql="UPDATE " + data.schemaTable + Const.CR;
  sql+="SET ";
  for (int i=0; i < meta.getUpdateLookup().length; i++) {
    if (i != 0)     sql+=",   ";
    sql+=databaseMeta.quoteField(meta.getUpdateLookup()[i]);
    sql+=" = ?" + Const.CR;
    data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getUpdateStream()[i]));
  }
  sql+="WHERE ";
  for (int i=0; i < meta.getKeyLookup().length; i++) {
    if (i != 0)     sql+="AND   ";
    sql+=" ( ( ";
    sql+=databaseMeta.quoteField(meta.getKeyLookup()[i]);
    if ("BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
      sql+=" BETWEEN ? AND ? ";
      data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getKeyStream()[i]));
      data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getKeyStream2()[i]));
    }
 else     if ("IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) || "IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
      sql+=" " + meta.getKeyCondition()[i] + " ";
    }
 else     if ("= ~NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
      sql+=" IS NULL AND ";
      if (databaseMeta.requiresCastToVariousForIsNull()) {
        sql+="CAST(? AS VARCHAR(256)) IS NULL";
      }
 else {
        sql+="? IS NULL";
      }
      data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getKeyStream()[i]));
      sql+=" ) OR ( " + databaseMeta.quoteField(meta.getKeyLookup()[i]) + " = ?";
      data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getKeyStream()[i]).clone());
    }
 else {
      sql+=" " + meta.getKeyCondition()[i] + " ? ";
      data.updateParameterRowMeta.addValueMeta(rowMeta.searchValueMeta(meta.getKeyStream()[i]));
    }
    sql+=" ) ) ";
  }
  try {
    if (log.isDetailed())     logDetailed("Setting update preparedStatement to [" + sql + "]");
    data.prepStatementUpdate=data.db.getConnection().prepareStatement(databaseMeta.stripCR(sql));
  }
 catch (  SQLException ex) {
    throw new KettleDatabaseException("Unable to prepare statement for SQL statement [" + sql + "]",ex);
  }
}
