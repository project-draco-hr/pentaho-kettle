{
  wName.setText(Const.NVL(jobEntry.getName(),""));
  specificationMethod=jobEntry.getSpecificationMethod();
switch (specificationMethod) {
case FILENAME:
    wFilename.setText(Const.NVL(jobEntry.getFilename(),""));
  break;
case REPOSITORY_BY_NAME:
wDirectory.setText(Const.NVL(jobEntry.getDirectory(),""));
wTransname.setText(Const.NVL(jobEntry.getTransname(),""));
break;
case REPOSITORY_BY_REFERENCE:
referenceObjectId=jobEntry.getTransObjectId();
wByReference.setText("");
if (rep != null) {
try {
RepositoryObject transInf=rep.getObjectInformation(jobEntry.getTransObjectId(),RepositoryObjectType.TRANSFORMATION);
if (transInf != null) {
getByReferenceData(transInf);
}
}
 catch (KettleException e) {
new ErrorDialog(shell,BaseMessages.getString(PKG,"JobEntryTransDialog.Exception.UnableToReferenceObjectId.Title"),BaseMessages.getString(PKG,"JobEntryTransDialog.Exception.UnableToReferenceObjectId.Message"),e);
}
}
break;
}
setRadioButtons();
if (jobEntry.arguments != null) {
for (int i=0; i < jobEntry.arguments.length; i++) {
TableItem ti=wFields.table.getItem(i);
if (jobEntry.arguments[i] != null) {
ti.setText(1,jobEntry.arguments[i]);
}
}
wFields.setRowNums();
wFields.optWidth(true);
}
if (jobEntry.parameters != null) {
for (int i=0; i < jobEntry.parameters.length; i++) {
TableItem ti=wParameters.table.getItem(i);
if (!Const.isEmpty(jobEntry.parameters[i])) {
ti.setText(1,Const.NVL(jobEntry.parameters[i],""));
ti.setText(2,Const.NVL(jobEntry.parameterFieldNames[i],""));
ti.setText(3,Const.NVL(jobEntry.parameterValues[i],""));
}
}
wParameters.setRowNums();
wParameters.optWidth(true);
}
wPassParams.setSelection(jobEntry.isPassingAllParameters());
if (jobEntry.logfile != null) wLogfile.setText(jobEntry.logfile);
if (jobEntry.logext != null) wLogext.setText(jobEntry.logext);
wPrevious.setSelection(jobEntry.argFromPrevious);
wPrevToParams.setSelection(jobEntry.paramsFromPrevious);
wEveryRow.setSelection(jobEntry.execPerRow);
wSetLogfile.setSelection(jobEntry.setLogfile);
wAddDate.setSelection(jobEntry.addDate);
wAddTime.setSelection(jobEntry.addTime);
wClearRows.setSelection(jobEntry.clearResultRows);
wClearFiles.setSelection(jobEntry.clearResultFiles);
wCluster.setSelection(jobEntry.isClustering());
wLogRemoteWork.setSelection(jobEntry.isLoggingRemoteWork());
if (jobEntry.getRemoteSlaveServerName() != null) {
wSlaveServer.setText(jobEntry.getRemoteSlaveServerName());
}
wWaitingToFinish.setSelection(jobEntry.isWaitingToFinish());
wFollowingAbortRemotely.setSelection(jobEntry.isFollowingAbortRemotely());
wAppendLogfile.setSelection(jobEntry.setAppendLogfile);
wCreateParentFolder.setSelection(jobEntry.createParentFolder);
if (jobEntry.logFileLevel != null) {
wLoglevel.select(jobEntry.logFileLevel.getLevel());
}
}
