{
  this.baseStep=baseStep;
  final BlockingRowSet rowSet=new BlockingRowSet(baseStep.getTransMeta().getSizeRowset());
  rowSet.setThreadNameFromToCopy(sourceStep,sourceStepCopyNr,targetStep,targetStepCopyNr);
  rowSet.setRemoteSlaveServerName(targetSlaveServerName);
  final int portNumber=Integer.parseInt(baseStep.environmentSubstitute(port));
  final String realHostname=baseStep.environmentSubstitute(hostname);
  long startTime=System.currentTimeMillis();
  boolean connected=false;
  KettleException lastException=null;
  while (!connected && (TIMEOUT_IN_SECONDS > (System.currentTimeMillis() - startTime) / 1000) && !baseStep.isStopped()) {
    try {
      socket=new Socket();
      socket.setReuseAddress(true);
      baseStep.logDetailed("Step variable MASTER_HOST : [" + baseStep.getVariable("MASTER_HOST") + "]");
      baseStep.logDetailed("Opening client (reader) socket to server [" + Const.NVL(realHostname,"") + ":"+ port+ "]");
      socket.connect(new InetSocketAddress(realHostname,portNumber),5000);
      connected=true;
      InputStream socketStream=socket.getInputStream();
      if (compressingStreams) {
        gzipInputStream=new GZIPInputStream(socketStream);
        bufferedInputStream=new BufferedInputStream(gzipInputStream,bufferSize);
      }
 else {
        bufferedInputStream=new BufferedInputStream(socketStream,bufferSize);
      }
      socketStream=bufferedInputStream;
      if (encryptingStreams && key != null) {
        byte[] transKey=baseStep.getTransMeta().getKey();
        Key unwrappedKey=CertificateGenEncryptUtil.decodeTransmittedKey(transKey,key,baseStep.getTransMeta().isPrivateKey());
        Cipher decryptionCip=CertificateGenEncryptUtil.initDecryptionCipher(unwrappedKey,key);
        socketStream=cipherInputStream=new CipherInputStream(bufferedInputStream,decryptionCip);
      }
      inputStream=new DataInputStream(socketStream);
      lastException=null;
    }
 catch (    Exception e) {
      lastException=new KettleException("Unable to open socket to server " + realHostname + " port "+ portNumber,e);
    }
    if (lastException != null) {
      try {
        Thread.sleep(250);
      }
 catch (      InterruptedException e) {
        if (socket != null) {
          socket.shutdownInput();
          socket.shutdownOutput();
          socket.close();
          baseStep.logDetailed("Closed connection to server socket to read rows from remote step on server " + realHostname + " port "+ portNumber+ " - Local port="+ socket.getLocalPort());
        }
        throw new KettleException("Interrupted while trying to connect to server socket: " + e.toString());
      }
    }
  }
  if (lastException != null) {
    baseStep.logError("Error initialising step: " + lastException.toString());
    if (socket != null) {
      socket.shutdownInput();
      socket.shutdownOutput();
      socket.close();
      baseStep.logDetailed("Closed connection to server socket to read rows from remote step on server " + realHostname + " port "+ portNumber+ " - Local port="+ socket.getLocalPort());
    }
    throw lastException;
  }
 else {
    if (inputStream == null) {
      throw new KettleException("Unable to connect to the SocketWriter in the " + TIMEOUT_IN_SECONDS + "s timeout period.");
    }
  }
  baseStep.logDetailed("Opened connection to server socket to read rows from remote step on server " + realHostname + " port "+ portNumber+ " - Local port="+ socket.getLocalPort());
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        RowMetaInterface rowMeta=null;
        while (!baseStep.isStopped() && rowMeta == null) {
          try {
            rowMeta=new RowMeta(inputStream);
          }
 catch (          SocketTimeoutException e) {
            rowMeta=null;
          }
        }
        if (rowMeta == null) {
          throw new KettleEOFException();
        }
        Object[] rowData=getRowOfData(rowMeta);
        while (rowData != null && !baseStep.isStopped()) {
          baseStep.incrementLinesInput();
          baseStep.decrementLinesRead();
          if (baseStep.log.isDebug()) {
            baseStep.logDebug("Received row from remote step: " + rowMeta.getString(rowData));
          }
          baseStep.putRowTo(rowMeta,rowData,rowSet);
          baseStep.decrementLinesWritten();
          rowData=getRowOfData(rowMeta);
        }
      }
 catch (      KettleEOFException e) {
        if (baseStep.log.isDebug()) {
          baseStep.logDebug("Finished reading from remote step on server " + hostname + " port "+ portNumber);
        }
      }
catch (      Exception e) {
        baseStep.logError("Error reading from client socket to remote step",e);
        baseStep.setErrors(1);
        baseStep.stopAll();
      }
 finally {
        if (socket != null && !socket.isClosed() && !socket.isInputShutdown()) {
          try {
            socket.shutdownInput();
          }
 catch (          Exception e) {
            baseStep.logError("Error shutting down input channel on client socket connection to remote step",e);
          }
        }
        if (socket != null && !socket.isClosed() && !socket.isOutputShutdown()) {
          try {
            socket.shutdownOutput();
          }
 catch (          Exception e) {
            baseStep.logError("Error shutting down output channel on client socket connection to remote step",e);
          }
        }
        if (socket != null && !socket.isClosed()) {
          try {
            socket.close();
          }
 catch (          Exception e) {
            baseStep.logError("Error shutting down client socket connection to remote step",e);
          }
        }
        if (inputStream != null) {
          try {
            inputStream.close();
          }
 catch (          Exception e) {
            baseStep.logError("Error closing input stream on socket connection to remote step",e);
          }
          inputStream=null;
        }
        if (cipherInputStream != null) {
          try {
            cipherInputStream.close();
          }
 catch (          Exception e) {
            baseStep.logError("Error closing input stream on socket connection to remote step",e);
          }
        }
        cipherInputStream=null;
        if (bufferedInputStream != null) {
          try {
            bufferedInputStream.close();
          }
 catch (          Exception e) {
            baseStep.logError("Error closing input stream on socket connection to remote step",e);
          }
        }
        bufferedInputStream=null;
        if (gzipInputStream != null) {
          try {
            gzipInputStream.close();
          }
 catch (          Exception e) {
            baseStep.logError("Error closing input stream on socket connection to remote step",e);
          }
        }
        gzipInputStream=null;
        baseStep.logDetailed("Closed connection to server socket to read rows from remote step on server " + realHostname + " port "+ portNumber+ " - Local port="+ socket.getLocalPort());
      }
      rowSet.setDone();
    }
  }
;
  new Thread(runnable).start();
  return rowSet;
}
