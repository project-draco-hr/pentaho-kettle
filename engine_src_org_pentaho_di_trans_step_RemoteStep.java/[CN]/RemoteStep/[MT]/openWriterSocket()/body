{
  final BlockingRowSet rowSet=new BlockingRowSet(baseStep.getTransMeta().getSizeRowset());
  rowSet.setThreadNameFromToCopy(sourceStep,sourceStepCopyNr,targetStep,targetStepCopyNr);
  rowSet.setRemoteSlaveServerName(targetSlaveServerName);
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        socket=serverSocket.accept();
        OutputStream socketOut=socket.getOutputStream();
        if (compressingStreams) {
          gzipOutputStream=new GZIPOutputStream(socketOut,50000);
          bufferedOutputStream=new BufferedOutputStream(gzipOutputStream,bufferSize);
        }
 else {
          bufferedOutputStream=new BufferedOutputStream(socketOut,bufferSize);
        }
        socketOut=bufferedOutputStream;
        if (encryptingStreams && key != null) {
          byte[] transKey=baseStep.getTransMeta().getKey();
          Key unwrappedKey=null;
          try {
            unwrappedKey=CertificateGenEncryptUtil.decodeTransmittedKey(transKey,key,baseStep.getTransMeta().isPrivateKey());
          }
 catch (          InvalidKeyException ex) {
            baseStep.logError("Invalid key was received",ex);
          }
catch (          InvalidKeySpecException ex) {
            baseStep.logError("Invalid key specification was received. Most probably public key was " + "sent instead of private or vice versa",ex);
          }
catch (          Exception ex) {
            baseStep.logError("Error occurred during encryption initialization",ex);
          }
          try {
            Cipher decryptionCip=CertificateGenEncryptUtil.initDecryptionCipher(unwrappedKey,key);
            socketOut=cipherOutputStream=new CipherOutputStream(bufferedOutputStream,decryptionCip);
          }
 catch (          InvalidKeyException ex) {
            baseStep.logError("Invalid key was received",ex);
          }
catch (          Exception ex) {
            baseStep.logError("Error occurred during encryption initialization",ex);
          }
        }
        outputStream=new DataOutputStream(socketOut);
        baseStep.logBasic("Server socket accepted for port [" + port + "], reading from server "+ targetSlaveServerName);
        Object[] rowData=baseStep.getRowFrom(rowSet);
        if (rowData != null) {
          rowSet.getRowMeta().writeMeta(outputStream);
        }
        while (rowData != null && !baseStep.isStopped()) {
          baseStep.decrementLinesRead();
          baseStep.decrementLinesWritten();
          rowSet.getRowMeta().writeData(outputStream,rowData);
          baseStep.incrementLinesOutput();
          if (baseStep.log.isDebug()) {
            baseStep.logDebug("Sent row to port " + port + " : "+ rowSet.getRowMeta().getString(rowData));
          }
          rowData=baseStep.getRowFrom(rowSet);
        }
        if (compressingStreams) {
          outputStream.flush();
          gzipOutputStream.finish();
        }
 else {
          outputStream.flush();
        }
      }
 catch (      Exception e) {
        baseStep.logError("Error writing to remote step",e);
        baseStep.setErrors(1);
        baseStep.stopAll();
      }
 finally {
        try {
          if (socket != null) {
            socket.shutdownOutput();
          }
        }
 catch (        Exception e) {
          baseStep.logError("Error shutting down output channel on the server socket of remote step",e);
          baseStep.setErrors(1L);
          baseStep.stopAll();
        }
        try {
          if (outputStream != null) {
            outputStream.flush();
            outputStream.close();
            if (cipherOutputStream != null) {
              cipherOutputStream.close();
            }
            bufferedOutputStream.close();
            if (gzipOutputStream != null) {
              gzipOutputStream.close();
            }
          }
        }
 catch (        Exception e) {
          baseStep.logError("Error shutting down output streams on the server socket of remote step",e);
          baseStep.setErrors(1L);
          baseStep.stopAll();
        }
        outputStream=null;
        bufferedOutputStream=null;
        gzipOutputStream=null;
        cipherOutputStream=null;
      }
    }
  }
;
  new Thread(runnable).start();
  return rowSet;
}
