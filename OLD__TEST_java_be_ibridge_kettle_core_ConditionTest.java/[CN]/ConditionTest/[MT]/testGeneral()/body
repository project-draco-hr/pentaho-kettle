{
  Row r=new Row();
  r.addValue(new Value("A","aaaa"));
  r.addValue(new Value("B",false));
  r.addValue(new Value("C",12.34));
  r.addValue(new Value("D",77L));
  Condition cb1=new Condition(Condition.OPERATOR_NONE,"D",Condition.FUNC_EQUAL,null,new Value("other",77L));
  assertTrue(cb1.evaluate(r));
  cb1.setID(100L);
  assertEquals(100L,cb1.getID());
  assertFalse(cb1.isEmpty());
  assertEquals(0,cb1.nrConditions());
  Condition cb2=new Condition("A",Condition.FUNC_SMALLER,null,new Value("other","bbb"));
  assertTrue(cb2.evaluate(r));
  Condition two=new Condition();
  two.addCondition(cb1);
  two.addCondition(cb2);
  cb2.setOperator(Condition.OPERATOR_XOR);
  assertFalse(two.evaluate(r));
  assertEquals(2,two.nrConditions());
  Condition cb3=new Condition("B",Condition.FUNC_EQUAL,null,new Value("other",false));
  assertTrue(cb3.evaluate(r));
  Condition cb4=new Condition("C",Condition.FUNC_EQUAL,null,new Value("other",12.34));
  assertTrue(cb4.evaluate(r));
  Condition two2=new Condition();
  two2.addCondition(cb3);
  two2.addCondition(cb4);
  cb4.setOperator(Condition.OPERATOR_AND);
  assertTrue(two2.evaluate(r));
  Condition three=new Condition();
  three.addCondition(two);
  three.addCondition(two2);
  two2.setOperator(Condition.OPERATOR_XOR);
  three.setOperator(Condition.OPERATOR_NOT);
  assertTrue(three.evaluate(r));
}
