{
  CheckResult cr;
  String error_message="";
  boolean first=true;
  boolean error_found=false;
  if (prev == null) {
    error_message+=Messages.getString("TrimMeta.CheckResult.NoInputReceived") + Const.CR;
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
 else {
    for (int i=0; i < fieldInStream.length; i++) {
      String field=fieldInStream[i];
      ValueMetaInterface v=prev.searchValueMeta(field);
      if (v == null) {
        if (first) {
          first=false;
          error_message+=Messages.getString("GetPreviousRowFieldMeta.CheckResult.MissingInStreamFields") + Const.CR;
        }
        error_found=true;
        error_message+="\t\t" + field + Const.CR;
      }
    }
    if (error_found) {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,Messages.getString("GetPreviousRowFieldMeta.CheckResult.FoundInStreamFields"),stepinfo);
    }
    remarks.add(cr);
    first=true;
    error_found=false;
    for (int i=0; i < fieldInStream.length; i++) {
      String field=fieldOutStream[i];
      if (Const.isEmpty(field)) {
        if (first) {
          first=false;
          error_message=Messages.getString("GetPreviousRowFieldMeta.CheckResult.OutputFieldEmpty","" + i) + Const.CR;
        }
        error_found=true;
        error_message+="\t\t" + field + Const.CR;
      }
    }
    if (error_found) {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,Messages.getString("GetPreviousRowFieldMeta.CheckResult.OutputFieldSpecified"),stepinfo);
    }
    remarks.add(cr);
    if (fieldInStream.length > 0) {
      for (int idx=0; idx < fieldInStream.length; idx++) {
        if (Const.isEmpty(fieldInStream[idx])) {
          cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,Messages.getString("GetPreviousRowFieldMeta.CheckResult.InStreamFieldMissing",new Integer(idx + 1).toString()),stepinfo);
          remarks.add(cr);
        }
      }
    }
    for (int idx=0; idx < fieldInStream.length; idx++) {
      for (int jdx=0; jdx < fieldInStream.length; jdx++) {
        if (fieldInStream[idx].equals(fieldInStream[jdx]) && idx != jdx && idx < jdx) {
          error_message=Messages.getString("GetPreviousRowFieldMeta.CheckResult.FieldInputError",fieldInStream[idx]);
          cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
          remarks.add(cr);
        }
      }
    }
  }
}
