{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"WriteToLog.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,null);
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"WriteToLog.Jobname.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlLoglevel=new Label(shell,SWT.RIGHT);
  wlLoglevel.setText(BaseMessages.getString(PKG,"WriteToLog.Loglevel.Label"));
  props.setLook(wlLoglevel);
  fdlLoglevel=new FormData();
  fdlLoglevel.left=new FormAttachment(0,0);
  fdlLoglevel.right=new FormAttachment(middle,-margin);
  fdlLoglevel.top=new FormAttachment(wName,margin);
  wlLoglevel.setLayoutData(fdlLoglevel);
  wLoglevel=new CCombo(shell,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wLoglevel.setItems(LogLevel.getLogLevelDescriptions());
  props.setLook(wLoglevel);
  fdLoglevel=new FormData();
  fdLoglevel.left=new FormAttachment(middle,0);
  fdLoglevel.top=new FormAttachment(wName,margin);
  fdLoglevel.right=new FormAttachment(100,0);
  wLoglevel.setLayoutData(fdLoglevel);
  wlLogSubject=new Label(shell,SWT.RIGHT);
  wlLogSubject.setText(BaseMessages.getString(PKG,"WriteToLog.LogSubject.Label"));
  props.setLook(wlLogSubject);
  fdlLogSubject=new FormData();
  fdlLogSubject.left=new FormAttachment(0,0);
  fdlLogSubject.top=new FormAttachment(wLoglevel,margin);
  fdlLogSubject.right=new FormAttachment(middle,-margin);
  wlLogSubject.setLayoutData(fdlLogSubject);
  wLogSubject=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wLogSubject.setText(BaseMessages.getString(PKG,"WriteToLog.Name.Default"));
  props.setLook(wLogSubject);
  wLogSubject.addModifyListener(lsMod);
  fdLogSubject=new FormData();
  fdLogSubject.left=new FormAttachment(middle,0);
  fdLogSubject.top=new FormAttachment(wLoglevel,margin);
  fdLogSubject.right=new FormAttachment(100,0);
  wLogSubject.setLayoutData(fdLogSubject);
  wlLogMessage=new Label(shell,SWT.RIGHT);
  wlLogMessage.setText(BaseMessages.getString(PKG,"WriteToLog.LogMessage.Label"));
  props.setLook(wlLogMessage);
  fdlLogMessage=new FormData();
  fdlLogMessage.left=new FormAttachment(0,0);
  fdlLogMessage.top=new FormAttachment(wLogSubject,margin);
  fdlLogMessage.right=new FormAttachment(middle,-margin);
  wlLogMessage.setLayoutData(fdlLogMessage);
  wLogMessage=new Text(shell,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);
  wLogMessage.setText(BaseMessages.getString(PKG,"WriteToLog.Name.Default"));
  props.setLook(wLogMessage,Props.WIDGET_STYLE_FIXED);
  wLogMessage.addModifyListener(lsMod);
  fdLogMessage=new FormData();
  fdLogMessage.left=new FormAttachment(middle,0);
  fdLogMessage.top=new FormAttachment(wLogSubject,margin);
  fdLogMessage.right=new FormAttachment(100,0);
  fdLogMessage.bottom=new FormAttachment(wOK,-margin);
  wLogMessage.setLayoutData(fdLogMessage);
  wLogMessage.addKeyListener(new ControlSpaceKeyAdapter(jobMeta,wLogMessage));
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell,250,250,false);
  shell.open();
  props.setDialogSize(shell,"JobEvalDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return jobEntry;
}
