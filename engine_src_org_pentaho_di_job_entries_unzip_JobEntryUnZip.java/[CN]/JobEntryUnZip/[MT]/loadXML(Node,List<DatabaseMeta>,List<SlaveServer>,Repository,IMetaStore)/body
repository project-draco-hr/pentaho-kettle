{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    zipFilename=XMLHandler.getTagValue(entrynode,"zipfilename");
    afterunzip=Const.toInt(XMLHandler.getTagValue(entrynode,"afterunzip"),-1);
    wildcard=XMLHandler.getTagValue(entrynode,"wildcard");
    wildcardexclude=XMLHandler.getTagValue(entrynode,"wildcardexclude");
    sourcedirectory=XMLHandler.getTagValue(entrynode,"targetdirectory");
    movetodirectory=XMLHandler.getTagValue(entrynode,"movetodirectory");
    addfiletoresult="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addfiletoresult"));
    isfromprevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"isfromprevious"));
    adddate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"adddate"));
    addtime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addtime"));
    addOriginalTimestamp="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addOriginalTimestamp"));
    SpecifyFormat="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"SpecifyFormat"));
    date_time_format=XMLHandler.getTagValue(entrynode,"date_time_format");
    rootzip="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"rootzip"));
    createfolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createfolder"));
    nr_limit=XMLHandler.getTagValue(entrynode,"nr_limit");
    wildcardSource=XMLHandler.getTagValue(entrynode,"wildcardSource");
    success_condition=XMLHandler.getTagValue(entrynode,"success_condition");
    if (Utils.isEmpty(success_condition)) {
      success_condition=SUCCESS_IF_NO_ERRORS;
    }
    iffileexist=getIfFileExistsInt(XMLHandler.getTagValue(entrynode,"iffileexists"));
    createMoveToDirectory="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"create_move_to_directory"));
    setOriginalModificationDate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"setOriginalModificationDate"));
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException("Unable to load job entry of type 'unzip' from XML node",xe);
  }
}
