{
  Result result=previousResult;
  result.setResult(false);
  result.setNrErrors(1);
  List<RowMetaAndData> rows=result.getRows();
  RowMetaAndData resultRow=null;
  String realFilenameSource=environmentSubstitute(zipFilename);
  String realWildcardSource=environmentSubstitute(wildcardSource);
  String realWildcard=environmentSubstitute(wildcard);
  String realWildcardExclude=environmentSubstitute(wildcardexclude);
  String realTargetdirectory=environmentSubstitute(sourcedirectory);
  String realMovetodirectory=environmentSubstitute(movetodirectory);
  limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
  NrErrors=0;
  NrSuccess=0;
  successConditionBroken=false;
  successConditionBrokenExit=false;
  if (isfromprevious) {
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"JobUnZip.Log.ArgFromPrevious.Found",(rows != null ? rows.size() : 0) + ""));
    if (rows.size() == 0)     return result;
  }
 else {
    if (Const.isEmpty(zipFilename)) {
      logError(BaseMessages.getString(PKG,"JobUnZip.No_ZipFile_Defined.Label"));
      return result;
    }
  }
  FileObject fileObject=null;
  FileObject targetdir=null;
  FileObject movetodir=null;
  try {
    if (Const.isEmpty(realTargetdirectory)) {
      logError(BaseMessages.getString(PKG,"JobUnZip.Error.TargetFolderMissing"));
      return result;
    }
    boolean exitjobentry=false;
    targetdir=KettleVFS.getFileObject(realTargetdirectory,this);
    if (!targetdir.exists()) {
      if (createfolder) {
        targetdir.createFolder();
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"JobUnZip.Log.TargetFolderCreated",realTargetdirectory));
      }
 else {
        log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"));
        exitjobentry=true;
      }
    }
 else {
      if (!(targetdir.getType() == FileType.FOLDER)) {
        log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFolder.Label",realTargetdirectory));
        exitjobentry=true;
      }
 else {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"JobUnZip.TargetFolderExists.Label",realTargetdirectory));
      }
    }
    if (afterunzip == 2) {
      if (Const.isEmpty(movetodirectory)) {
        log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryEmpty.Label"));
        exitjobentry=true;
      }
 else {
        movetodir=KettleVFS.getFileObject(realMovetodirectory,this);
        if (!(movetodir.exists()) || !(movetodir.getType() == FileType.FOLDER)) {
          if (createMoveToDirectory) {
            movetodir.createFolder();
            if (log.isDetailed())             logDetailed(BaseMessages.getString(PKG,"JobUnZip.Log.MoveToFolderCreated",realMovetodirectory));
          }
 else {
            log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"));
            exitjobentry=true;
          }
        }
      }
    }
    if (exitjobentry) {
      return result;
    }
    if (isfromprevious) {
      if (rows != null) {
        for (int iteration=0; iteration < rows.size() && !parentJob.isStopped(); iteration++) {
          if (successConditionBroken) {
            if (!successConditionBrokenExit) {
              logError(BaseMessages.getString(PKG,"JobUnZip.Error.SuccessConditionbroken","" + NrErrors));
              successConditionBrokenExit=true;
            }
            result.setNrErrors(NrErrors);
            return result;
          }
          resultRow=rows.get(iteration);
          realFilenameSource=resultRow.getString(0,null);
          realWildcardSource=resultRow.getString(1,null);
          fileObject=KettleVFS.getFileObject(realFilenameSource,this);
          if (fileObject.exists()) {
            processOneFile(result,parentJob,fileObject,realTargetdirectory,realWildcard,realWildcardExclude,movetodir,realMovetodirectory,realWildcardSource);
          }
 else {
            updateErrors();
            logError(BaseMessages.getString(PKG,"JobUnZip.Error.CanNotFindFile",realFilenameSource));
          }
        }
      }
    }
 else {
      fileObject=KettleVFS.getFileObject(realFilenameSource,this);
      if (!fileObject.exists()) {
        log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource));
        return result;
      }
      if (log.isDetailed())       logDetailed(BaseMessages.getString(PKG,"JobUnZip.Zip_FileExists.Label",realFilenameSource));
      if (Const.isEmpty(sourcedirectory)) {
        log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"));
        return result;
      }
      processOneFile(result,parentJob,fileObject,realTargetdirectory,realWildcard,realWildcardExclude,movetodir,realMovetodirectory,realWildcardSource);
    }
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",realFilenameSource,e.getMessage()));
    updateErrors();
  }
 finally {
    if (fileObject != null) {
      try {
        fileObject.close();
      }
 catch (      IOException ex) {
      }
    }
    if (targetdir != null) {
      try {
        targetdir.close();
      }
 catch (      IOException ex) {
      }
    }
    if (movetodir != null) {
      try {
        movetodir.close();
      }
 catch (      IOException ex) {
      }
    }
  }
  result.setNrErrors(NrErrors);
  result.setNrLinesWritten(NrSuccess);
  if (getSuccessStatus())   result.setResult(true);
  displayResults();
  return result;
}
