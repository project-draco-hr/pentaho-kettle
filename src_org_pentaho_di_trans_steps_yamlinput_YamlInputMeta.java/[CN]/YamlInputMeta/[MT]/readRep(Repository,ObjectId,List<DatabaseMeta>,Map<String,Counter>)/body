{
  try {
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    addResultFile=rep.getStepAttributeBoolean(id_step,"addresultfile");
    validating=rep.getStepAttributeBoolean(id_step,"validating");
    IsIgnoreEmptyFile=rep.getStepAttributeBoolean(id_step,"IsIgnoreEmptyFile");
    doNotFailIfNoFile=rep.getStepAttributeBoolean(id_step,"doNotFailIfNoFile");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
    }
    for (int i=0; i < nrFields; i++) {
      YamlInputField field=new YamlInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setPath(rep.getStepAttributeString(id_step,i,"field_path"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(YamlInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      inputFields[i]=field;
    }
    inFields=rep.getStepAttributeBoolean(id_step,"IsInFields");
    IsAFile=rep.getStepAttributeBoolean(id_step,"IsAFile");
    yamlField=rep.getStepAttributeString(id_step,"YamlField");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"YamlInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
