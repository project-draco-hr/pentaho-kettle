{
  try {
    passAllRows=rep.getStepAttributeBoolean(id_step,"all_rows");
    aggregateIgnored=rep.getStepAttributeBoolean(id_step,"ignore_aggregate");
    aggregateIgnoredField=rep.getStepAttributeString(id_step,"field_ignore");
    directory=rep.getStepAttributeString(id_step,"directory");
    prefix=rep.getStepAttributeString(id_step,"prefix");
    addingLineNrInGroup=rep.getStepAttributeBoolean(id_step,"add_linenr");
    lineNrInGroupField=rep.getStepAttributeString(id_step,"linenr_fieldname");
    int groupsize=rep.countNrStepAttributes(id_step,"group_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"aggregate_name");
    allocate(groupsize,nrvalues);
    for (int i=0; i < groupsize; i++) {
      groupField[i]=rep.getStepAttributeString(id_step,i,"group_name");
    }
    boolean hasNumberOfValues=false;
    for (int i=0; i < nrvalues; i++) {
      aggregateField[i]=rep.getStepAttributeString(id_step,i,"aggregate_name");
      subjectField[i]=rep.getStepAttributeString(id_step,i,"aggregate_subject");
      aggregateType[i]=getType(rep.getStepAttributeString(id_step,i,"aggregate_type"));
      if (aggregateType[i] == TYPE_GROUP_COUNT_ALL) {
        hasNumberOfValues=true;
      }
      valueField[i]=rep.getStepAttributeString(id_step,i,"aggregate_value_field");
    }
    alwaysGivingBackOneRow=rep.getStepAttributeBoolean(id_step,0,"give_back_row",hasNumberOfValues);
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"GroupByMeta.Exception.UnexpectedErrorInReadingStepInfoFromRepository"),e);
  }
}
