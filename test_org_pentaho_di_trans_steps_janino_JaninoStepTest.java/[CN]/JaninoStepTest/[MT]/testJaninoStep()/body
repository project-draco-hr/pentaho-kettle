{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("janino test");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepName="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.class,im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepName,im);
  transMeta.addStep(injectorStep);
  String stepname="janino";
  JaninoMeta jm=new JaninoMeta();
  String janinoPid=registry.getPluginId(StepPluginType.class,jm);
  StepMeta janinoStep=new StepMeta(janinoPid,stepname,jm);
  transMeta.addStep(janinoStep);
  jm.setDefault();
  JaninoMetaFunction[] formulas={new JaninoMetaFunction("string","(string==null)?null:\"string-value\"",ValueMetaInterface.TYPE_STRING,-1,-1,"string"),new JaninoMetaFunction("integer","(integer==null)?null:new Long(42L)",ValueMetaInterface.TYPE_INTEGER,-1,-1,"integer"),new JaninoMetaFunction("number","(number==null)?null:new Double(23.0)",ValueMetaInterface.TYPE_NUMBER,-1,-1,"number"),new JaninoMetaFunction("bigdecimal","(bigdecimal==null)?null:new java.math.BigDecimal(11.0)",ValueMetaInterface.TYPE_BIGNUMBER,-1,-1,"bigdecimal"),new JaninoMetaFunction("date","(date==null)?null:new java.util.Date(10000000)",ValueMetaInterface.TYPE_DATE,-1,-1,"date"),new JaninoMetaFunction("binary","(binary==null)?null:new byte[]{1,2,3,4,5}",ValueMetaInterface.TYPE_BINARY,-1,-1,"binary"),new JaninoMetaFunction("bool","(bool==null)?null:Boolean.TRUE",ValueMetaInterface.TYPE_BOOLEAN,-1,-1,"bool"),new JaninoMetaFunction("timestamp","(timestamp==null)?null:new java.sql.Timestamp(0L)",ValueMetaInterface.TYPE_TIMESTAMP,-1,-1,"timestamp"),new JaninoMetaFunction("inetaddress","(inetaddress==null)?null:java.net.InetAddress.getByAddress( new byte[]{ 127, 0, 0, 1} )",ValueMetaInterface.TYPE_INET,-1,-1,"inetaddress")};
  jm.setFormula(formulas);
  transMeta.addTransHop(new TransHopMeta(injectorStep,janinoStep));
  String dummyStepname="dummy step";
  DummyTransMeta dm=new DummyTransMeta();
  String dummyPid=registry.getPluginId(StepPluginType.class,dm);
  StepMeta dummyStep=new StepMeta(dummyPid,dummyStepname,dm);
  transMeta.addStep(dummyStep);
  TransHopMeta hi=new TransHopMeta(janinoStep,dummyStep);
  transMeta.addTransHop(hi);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname,0);
  RowStepCollector rc=new RowStepCollector();
  si.addRowListener(rc);
  RowProducer rp=trans.addRowProducer(injectorStepName,0);
  trans.startThreads();
  for (  RowMetaAndData rm : createInputList()) {
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> checkList=createExpectedList();
  List<RowMetaAndData> resultRows=rc.getRowsWritten();
  checkRows(resultRows,checkList);
}
