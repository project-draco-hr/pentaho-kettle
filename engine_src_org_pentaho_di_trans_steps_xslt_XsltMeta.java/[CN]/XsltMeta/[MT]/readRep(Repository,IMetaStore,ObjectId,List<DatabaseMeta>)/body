{
  try {
    xslFilename=rep.getStepAttributeString(id_step,"xslfilename");
    fieldName=rep.getStepAttributeString(id_step,"fieldname");
    resultFieldname=rep.getStepAttributeString(id_step,"resultfieldname");
    xslFileField=rep.getStepAttributeString(id_step,"xslfilefield");
    xslFileFieldUse=rep.getStepAttributeBoolean(id_step,"xslfilefielduse");
    String isAfile=rep.getStepAttributeString(id_step,"xslfieldisafile");
    if (xslFileFieldUse && Const.isEmpty(isAfile)) {
      xslFieldIsAFile=true;
    }
 else {
      xslFieldIsAFile="true".equalsIgnoreCase(isAfile);
    }
    xslFactory=rep.getStepAttributeString(id_step,"xslfactory");
    int nrparams=rep.countNrStepAttributes(id_step,"param_name");
    int nroutputprops=rep.countNrStepAttributes(id_step,"output_property_name");
    allocate(nrparams,nroutputprops);
    for (int i=0; i < nrparams; i++) {
      parameterField[i]=rep.getStepAttributeString(id_step,i,"param_field");
      parameterName[i]=rep.getStepAttributeString(id_step,i,"param_name");
    }
    for (int i=0; i < nroutputprops; i++) {
      outputPropertyName[i]=rep.getStepAttributeString(id_step,i,"output_property_name");
      outputPropertyValue[i]=rep.getStepAttributeString(id_step,i,"output_property_value");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"XsltMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
