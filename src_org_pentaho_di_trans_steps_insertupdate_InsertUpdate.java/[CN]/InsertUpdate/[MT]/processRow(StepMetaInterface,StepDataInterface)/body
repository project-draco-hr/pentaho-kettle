{
  meta=(InsertUpdateMeta)smi;
  data=(InsertUpdateData)sdi;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=(RowMetaInterface)getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.schemaTable=meta.getDatabaseMeta().getQuotedSchemaTableCombination(meta.getSchemaName(),meta.getTableName());
    if (log.isDebug())     logDebug(Messages.getString("InsertUpdate.Log.CheckingRow") + getInputRowMeta().getString(r));
    data.keynrs=new int[meta.getKeyStream().length];
    data.keynrs2=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=getInputRowMeta().indexOfValue(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("InsertUpdate.Exception.FieldRequired",meta.getKeyStream()[i]));
      }
      data.keynrs2[i]=getInputRowMeta().indexOfValue(meta.getKeyStream2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("InsertUpdate.Exception.FieldRequired",meta.getKeyStream2()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("InsertUpdate.Log.FieldHasDataNumbers",meta.getKeyStream()[i]) + data.keynrs[i]);
    }
    data.valuenrs=new int[meta.getUpdateLookup().length];
    for (int i=0; i < meta.getUpdateLookup().length; i++) {
      data.valuenrs[i]=getInputRowMeta().indexOfValue(meta.getUpdateStream()[i]);
      if (data.valuenrs[i] < 0) {
        throw new KettleStepException(Messages.getString("InsertUpdate.Exception.FieldRequired",meta.getUpdateStream()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("InsertUpdate.Log.FieldHasDataNumbers",meta.getUpdateStream()[i]) + data.valuenrs[i]);
    }
    setLookup(getInputRowMeta());
    data.insertRowMeta=new RowMeta();
    for (int i=0; i < meta.getUpdateLookup().length; i++) {
      ValueMetaInterface insValue=data.insertRowMeta.searchValueMeta(meta.getUpdateLookup()[i]);
      if (insValue == null) {
        ValueMetaInterface insertValue=(ValueMetaInterface)getInputRowMeta().searchValueMeta(meta.getUpdateStream()[i]).clone();
        insertValue.setName(meta.getUpdateLookup()[i]);
        data.insertRowMeta.addValueMeta(insertValue);
      }
 else {
        throw new KettleStepException("The same column can't be inserted into the target row twice: " + insValue.getName());
      }
    }
    data.db.prepareInsert(data.insertRowMeta,meta.getSchemaName(),meta.getTableName());
    if (!meta.isUpdateBypassed()) {
      List<String> updateColumns=new ArrayList<String>();
      for (int i=0; i < meta.getUpdate().length; i++) {
        if (meta.getUpdate()[i].booleanValue()) {
          updateColumns.add(meta.getUpdateLookup()[i]);
        }
      }
      prepareUpdate(getInputRowMeta());
    }
  }
  try {
    lookupValues(getInputRowMeta(),r);
    putRow(data.outputRowMeta,r);
    if (checkFeedback(linesRead))     logBasic(Messages.getString("InsertUpdate.Log.LineNumber") + linesRead);
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleStepException(Messages.getString("InsertUpdate.Log.ErrorInStep"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"TOP001");
    }
  }
  return true;
}
