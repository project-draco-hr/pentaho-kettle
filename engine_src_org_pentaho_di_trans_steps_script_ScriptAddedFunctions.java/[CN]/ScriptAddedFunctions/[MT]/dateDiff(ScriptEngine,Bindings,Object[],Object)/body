{
  if (ArgList.length == 3) {
    try {
      if (isNull(ArgList,new int[]{0,1,2})) {
        return new Double(Double.NaN);
      }
 else       if (isUndefined(ArgList,new int[]{0,1,2})) {
        return undefinedValue;
      }
 else {
        java.util.Date dIn1=(java.util.Date)ArgList[0];
        java.util.Date dIn2=(java.util.Date)ArgList[1];
        String strType=((String)ArgList[2]).toLowerCase();
        int iRC=0;
        Calendar startDate=Calendar.getInstance();
        Calendar endDate=Calendar.getInstance();
        startDate.setTime(dIn1);
        endDate.setTime(dIn2);
        long endL=endDate.getTimeInMillis() + endDate.getTimeZone().getOffset(endDate.getTimeInMillis());
        long startL=startDate.getTimeInMillis() + startDate.getTimeZone().getOffset(startDate.getTimeInMillis());
        if (strType.equals("y")) {
          return new Double(endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR));
        }
 else         if (strType.equals("m")) {
          int iMonthsToAdd=(endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR)) * 12;
          return new Double((endDate.get(Calendar.MONTH) - startDate.get(Calendar.MONTH)) + iMonthsToAdd);
        }
 else         if (strType.equals("d")) {
          return new Double(((endL - startL) / 86400000));
        }
 else         if (strType.equals("wd")) {
          int iOffset=-1;
          if (endDate.before(startDate)) {
            iOffset=1;
          }
          while ((iOffset == 1 && endL < startL) || (iOffset == -1 && endL > startL)) {
            int day=endDate.get(Calendar.DAY_OF_WEEK);
            if ((day != Calendar.SATURDAY) && (day != Calendar.SUNDAY)) {
              iRC++;
            }
            endDate.add(Calendar.DATE,iOffset);
            endL=endDate.getTimeInMillis() + endDate.getTimeZone().getOffset(endDate.getTimeInMillis());
          }
          return new Double(iRC);
        }
 else         if (strType.equals("w")) {
          int iDays=(int)((endL - startL) / 86400000);
          return new Double(iDays / 7);
        }
 else         if (strType.equals("ss")) {
          return new Double(((endL - startL) / 1000));
        }
 else         if (strType.equals("mi")) {
          return new Double(((endL - startL) / 60000));
        }
 else         if (strType.equals("hh")) {
          return new Double(((endL - startL) / 3600000));
        }
 else {
          return new Double(((endL - startL) / 86400000));
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e.toString());
    }
  }
 else {
    throw new RuntimeException("The function call dateDiff requires 3 arguments.");
  }
}
