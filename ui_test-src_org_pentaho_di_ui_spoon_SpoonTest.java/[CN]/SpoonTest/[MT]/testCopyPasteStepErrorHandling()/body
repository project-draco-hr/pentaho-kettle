{
  final Spoon spoon=mock(Spoon.class);
  doCallRealMethod().when(spoon).copySelected(any(TransMeta.class),anyListOf(StepMeta.class),anyListOf(NotePadMeta.class));
  doCallRealMethod().when(spoon).pasteXML(any(TransMeta.class),anyString(),any(Point.class));
  LogChannelInterface log=mock(LogChannelInterface.class);
  when(spoon.getLog()).thenReturn(log);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      TransMeta transMeta=new TransMeta();
      spoon.pasteXML(transMeta,(String)invocation.getArguments()[0],mock(Point.class));
      Assert.assertNotNull("No steps found in transformation",transMeta.getStep(0));
      Assert.assertNotNull("Error handling information was not copied",transMeta.getStep(0).getStepErrorMeta());
      return null;
    }
  }
).when(spoon).toClipboard(anyString());
  StepMeta stepMeta=new StepMeta("CsvInput","Step1",new CsvInputMeta());
  TransMeta transMeta=mock(TransMeta.class);
  StepErrorMeta errorMeta=new StepErrorMeta(transMeta,stepMeta,stepMeta);
  stepMeta.setStepErrorMeta(errorMeta);
  ArrayList<StepMeta> steps=new ArrayList<StepMeta>();
  steps.add(stepMeta);
  KettleEnvironment.init();
  spoon.copySelected(transMeta,steps,Collections.<NotePadMeta>emptyList());
}
