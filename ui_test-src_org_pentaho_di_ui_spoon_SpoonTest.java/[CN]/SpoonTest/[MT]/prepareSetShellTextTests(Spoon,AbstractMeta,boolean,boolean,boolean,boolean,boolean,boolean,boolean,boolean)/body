{
  Shell mockShell=mock(Shell.class);
  ObjectRevision mockObjectRevision=revIsNull ? null : mock(ObjectRevision.class);
  RepositoryDirectory mockRepDirectory=mock(RepositoryDirectory.class);
  Repository mockRepository=repIsNull ? null : mock(Repository.class);
  RepositorySecurityProvider mockRepSecurityProvider=mock(RepositorySecurityProvider.class);
  SpoonDelegates mockDelegate=mock(SpoonDelegates.class);
  SpoonTabsDelegate mockDelegateTabs=mock(SpoonTabsDelegate.class);
  spoon.rep=mockRepository;
  spoon.delegates=mockDelegate;
  mockDelegate.tabs=mockDelegateTabs;
  doCallRealMethod().when(spoon).openSpoon();
  doCallRealMethod().when(spoon).setShellText();
  doReturn(mockShell).when(spoon).getShell();
  if (!tabNameIsNull) {
    doReturn("tabName").when(spoon).getActiveTabText();
  }
  doReturn(false).when(mockShell).isDisposed();
  setTransJobValues(abstractMeta,spoon,mockObjectRevision,mockRepDirectory,isTransformation,hasChanged,nameIsNull,filenameIsNull);
  if (!revIsNull) {
    doReturn("1.0").when(mockObjectRevision).getName();
  }
  doReturn("/admin").when(mockRepDirectory).getPath();
  if (!repIsNull) {
    doReturn(mockRepSecurityProvider).when(mockRepository).getSecurityProvider();
    doReturn(versionEnabled).when(mockRepSecurityProvider).isVersioningEnabled(anyString());
  }
  doReturn("RepositoryName").when(spoon).getRepositoryName();
  doReturn(new ArrayList<TabMapEntry>()).when(mockDelegateTabs).getTabs();
  try {
    spoon.openSpoon();
  }
 catch (  NullPointerException e) {
  }
  spoon.setShellText();
  return mockShell;
}
