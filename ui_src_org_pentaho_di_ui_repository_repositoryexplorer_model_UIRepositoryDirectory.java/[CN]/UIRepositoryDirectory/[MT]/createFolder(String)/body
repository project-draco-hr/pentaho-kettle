{
  RepositoryDirectoryInterface thisDir=getDirectory();
  RepositoryDirectoryInterface dir;
  String dirName=checkDirNameExistsInRepo(name);
  if (dirName == null) {
    dir=rep.createRepositoryDirectory(thisDir,name);
  }
 else {
    String[] path=thisDir.getPathArray();
    StringBuilder pathString=new StringBuilder();
    for (    String pathElement : path) {
      if (pathElement.equals(java.io.File.separator) || pathElement.equals("")) {
      }
 else {
        pathString.append(pathElement);
      }
      pathString.append(java.io.File.separator);
    }
    pathString.append(dirName);
    dir=rep.findDirectory(pathString.toString());
  }
  UIRepositoryDirectory newDir=null;
  try {
    newDir=UIObjectRegistry.getInstance().constructUIRepositoryDirectory(dir,this,rep);
  }
 catch (  UIObjectCreationException uoe) {
    newDir=new UIRepositoryDirectory(dir,this,rep);
  }
  UIRepositoryDirectories directories=getChildren();
  if (!contains(directories,newDir)) {
    directories.add(newDir);
  }
 else {
    throw new KettleException("Unable to create folder with the same name [" + name + "]");
  }
  kidElementCache=null;
  return newDir;
}
