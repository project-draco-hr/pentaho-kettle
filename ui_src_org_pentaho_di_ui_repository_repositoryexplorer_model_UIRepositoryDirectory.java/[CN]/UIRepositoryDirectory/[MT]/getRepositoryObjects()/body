{
  if (kidElementCache != null) {
    return kidElementCache;
  }
  if (kidElementCache == null) {
    kidElementCache=new UIRepositoryObjects(){
      private static final long serialVersionUID=6901479331535375165L;
      public void onRemove(      UIRepositoryObject child){
        List<? extends RepositoryElementMetaInterface> dirRepoObjects=getDirectory().getRepositoryObjects();
        if (dirRepoObjects != null) {
          Iterator<? extends RepositoryElementMetaInterface> iter=dirRepoObjects.iterator();
          while (iter.hasNext()) {
            RepositoryElementMetaInterface e=iter.next();
            if (child.getObjectId().equals(e.getObjectId())) {
              iter.remove();
              return;
            }
          }
        }
      }
    }
;
  }
  for (  UIRepositoryObject child : getChildren()) {
    kidElementCache.add(child);
  }
  List<? extends RepositoryElementMetaInterface> jobsAndTransformations=getDirectory().getRepositoryObjects();
  if (jobsAndTransformations == null || jobsAndTransformations.size() == 0) {
    jobsAndTransformations=rep.getJobAndTransformationObjects(new StringObjectId(getId()),false);
  }
  for (  RepositoryElementMetaInterface child : jobsAndTransformations) {
    if (child.getObjectType().equals(RepositoryObjectType.TRANSFORMATION)) {
      try {
        kidElementCache.add(UIObjectRegistry.getInstance().constructUITransformation(child,this,rep));
      }
 catch (      UIObjectCreationException e) {
        kidElementCache.add(new UITransformation(child,this,rep));
      }
    }
 else     if (child.getObjectType().equals(RepositoryObjectType.JOB)) {
      try {
        kidElementCache.add(UIObjectRegistry.getInstance().constructUIJob(child,this,rep));
      }
 catch (      UIObjectCreationException e) {
        kidElementCache.add(new UIJob(child,this,rep));
      }
    }
  }
  return kidElementCache;
}
