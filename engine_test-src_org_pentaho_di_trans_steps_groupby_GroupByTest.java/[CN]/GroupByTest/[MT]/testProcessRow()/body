{
  GroupByMeta groupByMeta=mock(GroupByMeta.class);
  GroupByData groupByData=mock(GroupByData.class);
  GroupBy groupBySpy=Mockito.spy(new GroupBy(mockHelper.stepMeta,mockHelper.stepDataInterface,0,mockHelper.transMeta,mockHelper.trans));
  doReturn(null).when(groupBySpy).getRow();
  doReturn(null).when(groupBySpy).getInputRowMeta();
  RowMetaInterface rowMeta=new RowMeta();
  rowMeta.addValueMeta(new ValueMeta("ROWNR",ValueMeta.TYPE_INTEGER));
  List<RowSet> outputRowSets=new ArrayList<RowSet>();
  BlockingRowSet rowSet=new BlockingRowSet(1);
  rowSet.putRow(rowMeta,new Object[]{new Long(0)});
  outputRowSets.add(rowSet);
  groupBySpy.setOutputRowSets(outputRowSets);
  final String[] sub={"b"};
  doReturn(sub).when(groupByMeta).getSubjectField();
  final String[] groupField={"a"};
  doReturn(groupField).when(groupByMeta).getGroupField();
  final String[] aggFields={"b_g"};
  doReturn(aggFields).when(groupByMeta).getAggregateField();
  final int[] aggType={GroupByMeta.TYPE_GROUP_CONCAT_COMMA};
  doReturn(aggType).when(groupByMeta).getAggregateType();
  when(mockHelper.transMeta.getPrevStepFields(mockHelper.stepMeta)).thenReturn(new RowMeta());
  groupBySpy.processRow(groupByMeta,groupByData);
  assertTrue(groupBySpy.getOutputRowSets().get(0).isDone());
}
