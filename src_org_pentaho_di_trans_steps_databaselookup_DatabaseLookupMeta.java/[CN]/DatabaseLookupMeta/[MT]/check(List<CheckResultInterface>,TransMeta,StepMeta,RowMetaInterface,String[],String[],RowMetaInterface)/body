{
  CheckResult cr;
  String error_message="";
  if (databaseMeta != null) {
    Database db=new Database(this,databaseMeta);
    db.shareVariablesWith(transMeta);
    databases=new Database[]{db};
    try {
      db.connect();
      if (!Const.isEmpty(tablename)) {
        boolean first=true;
        boolean error_found=false;
        error_message="";
        String schemaTable=databaseMeta.getQuotedSchemaTableCombination(db.environmentSubstitute(schemaName),db.environmentSubstitute(tablename));
        RowMetaInterface r=db.getTableFields(schemaTable);
        if (r != null) {
          for (int i=0; i < tableKeyField.length; i++) {
            String lufield=tableKeyField[i];
            ValueMetaInterface v=r.searchValueMeta(lufield);
            if (v == null) {
              if (first) {
                first=false;
                error_message+=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.MissingCompareFieldsInLookupTable") + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + lufield + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.AllLookupFieldsFoundInTable"),stepinfo);
          }
          remarks.add(cr);
          for (int i=0; i < returnValueField.length; i++) {
            String lufield=returnValueField[i];
            ValueMetaInterface v=r.searchValueMeta(lufield);
            if (v == null) {
              if (first) {
                first=false;
                error_message+=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.MissingReturnFieldsInLookupTable") + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + lufield + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.AllReturnFieldsFoundInTable"),stepinfo);
          }
          remarks.add(cr);
        }
 else {
          error_message=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.CouldNotReadTableInfo");
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          remarks.add(cr);
        }
      }
      if (prev != null && prev.size() > 0) {
        boolean first=true;
        error_message="";
        boolean error_found=false;
        for (int i=0; i < streamKeyField1.length; i++) {
          ValueMetaInterface v=prev.searchValueMeta(streamKeyField1[i]);
          if (v == null) {
            if (first) {
              first=false;
              error_message+=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.MissingFieldsNotFoundInInput") + Const.CR;
            }
            error_found=true;
            error_message+="\t\t" + streamKeyField1[i] + Const.CR;
          }
        }
        if (error_found) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        }
 else {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.AllFieldsFoundInInput"),stepinfo);
        }
        remarks.add(cr);
      }
 else {
        error_message=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.CouldNotReadFromPreviousSteps") + Const.CR;
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
    }
 catch (    KettleDatabaseException dbe) {
      error_message=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.DatabaseErrorWhileChecking") + dbe.getMessage();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
 finally {
      db.disconnect();
    }
  }
 else {
    error_message=BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.MissingConnectionError");
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.StepIsReceivingInfoFromOtherSteps"),stepinfo);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"DatabaseLookupMeta.Check.NoInputReceivedFromOtherSteps"),stepinfo);
    remarks.add(cr);
  }
}
