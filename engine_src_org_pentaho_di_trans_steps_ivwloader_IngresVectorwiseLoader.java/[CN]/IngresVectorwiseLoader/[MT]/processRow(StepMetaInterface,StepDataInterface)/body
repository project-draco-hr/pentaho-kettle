{
  meta=(IngresVectorwiseLoaderMeta)smi;
  data=(IngresVectorwiseLoaderData)sdi;
  try {
    Object[] r=getRow();
    if (r == null) {
      setOutputDone();
      if (!first) {
        closeOutput();
      }
      return false;
    }
    if (first) {
      first=false;
      data.keynrs=new int[meta.getFieldStream().length];
      for (int i=0; i < data.keynrs.length; i++) {
        data.keynrs[i]=getInputRowMeta().indexOfValue(meta.getFieldStream()[i]);
      }
      data.bulkRowMeta=getInputRowMeta().clone();
      if (meta.isUseStandardConversion()) {
        for (int i=0; i < data.bulkRowMeta.size(); i++) {
          ValueMetaInterface valueMeta=data.bulkRowMeta.getValueMeta(i);
          if (valueMeta.isStorageNormal()) {
            if (valueMeta.isDate()) {
              valueMeta.setConversionMask("yyyy-MM-dd HH:mm:ss");
            }
 else             if (valueMeta.isNumeric()) {
              valueMeta.setDecimalSymbol(".");
              valueMeta.setGroupingSymbol("");
            }
          }
        }
      }
      execute(meta);
      data.fileChannel=data.fifoOpener.getFileChannel();
      data.byteBuffer=ByteBuffer.allocate(data.bufferSize);
    }
    if (!checkSqlProcessRunning(data.sqlProcess)) {
      throw new Exception("Ingres SQL process has stopped");
    }
    writeRowToBulk(data.bulkRowMeta,r);
    putRow(getInputRowMeta(),r);
    incrementLinesOutput();
    if (checkFeedback(getLinesOutput())) {
      logBasic(BaseMessages.getString(PKG,"IngresVectorwiseLoader.Log.LineNumber") + getLinesOutput());
    }
    return true;
  }
 catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"IngresVectorwiseLoader.Log.ErrorInStep"),e);
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
}
