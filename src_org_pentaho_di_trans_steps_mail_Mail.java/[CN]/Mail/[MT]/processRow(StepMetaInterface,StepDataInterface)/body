{
  meta=(MailMeta)smi;
  data=(MailData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    if (Const.isEmpty(meta.getDestination()))     throw new KettleException(Messages.getString("Mail.Log.DestinationFieldEmpty"));
    if (Const.isEmpty(meta.getReplyAddress()))     throw new KettleException(Messages.getString("Mail.Log.ReplyFieldEmpty"));
    if (Const.isEmpty(meta.getServer()))     throw new KettleException(Messages.getString("Mail.Log.ServerFieldEmpty"));
    if (meta.isDynamicFilename() && Const.isEmpty(meta.getDynamicFieldname()))     throw new KettleException(Messages.getString("Mail.Log.DynamicFilenameFielddEmpty"));
    if (meta.isZipFilenameDynamic() && Const.isEmpty(meta.getDynamicZipFilenameField()))     throw new KettleException(Messages.getString("Mail.Log.DynamicZipFilenameFieldEmpty"));
    if (meta.isZipFiles() && Const.isEmpty(meta.getZipFilename()))     throw new KettleException(Messages.getString("Mail.Log.ZipFilenameEmpty"));
    if (meta.isUsingAuthentication()) {
      if (Const.isEmpty(meta.getAuthenticationUser()))       throw new KettleException(Messages.getString("Mail.Log.AuthenticationUserFieldEmpty"));
      if (Const.isEmpty(meta.getAuthenticationPassword()))       throw new KettleException(Messages.getString("Mail.Log.AuthenticationPasswordFieldEmpty"));
    }
    if (data.indexOfDestination < 0) {
      String realDestinationFieldname=environmentSubstitute(meta.getDestination());
      data.indexOfDestination=data.previousRowMeta.indexOfValue(realDestinationFieldname);
      if (data.indexOfDestination < 0)       throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindDestinationField",realDestinationFieldname));
    }
    if (!Const.isEmpty(meta.getDestinationCc())) {
      if (data.indexOfDestinationCc < 0) {
        String realDestinationCcFieldname=environmentSubstitute(meta.getDestinationCc());
        data.indexOfDestinationCc=data.previousRowMeta.indexOfValue(realDestinationCcFieldname);
        if (data.indexOfDestinationCc < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindDestinationCcField",realDestinationCcFieldname));
      }
    }
    if (!Const.isEmpty(meta.getDestinationCc())) {
      if (data.indexOfDestinationBCc < 0) {
        String realDestinationBCcFieldname=environmentSubstitute(meta.getDestinationBCc());
        data.indexOfDestinationBCc=data.previousRowMeta.indexOfValue(realDestinationBCcFieldname);
        if (data.indexOfDestinationBCc < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindDestinationBCcField",realDestinationBCcFieldname));
      }
    }
    if (!Const.isEmpty(meta.getReplyName())) {
      if (data.indexOfReplyName < 0) {
        String realReplyName=environmentSubstitute(meta.getReplyName());
        data.indexOfReplyName=data.previousRowMeta.indexOfValue(realReplyName);
        if (data.indexOfReplyName < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindReplyNameField",realReplyName));
      }
    }
    if (data.indexOfReplyAddress < 0) {
      String realReplyAddress=environmentSubstitute(meta.getReplyAddress());
      data.indexOfReplyAddress=data.previousRowMeta.indexOfValue(realReplyAddress);
      if (data.indexOfReplyAddress < 0)       throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindReplyAddressField",realReplyAddress));
    }
    if (!Const.isEmpty(meta.getContactPerson())) {
      if (data.indexOfContactPerson < 0) {
        String realContactPerson=environmentSubstitute(meta.getContactPerson());
        data.indexOfContactPerson=data.previousRowMeta.indexOfValue(realContactPerson);
        if (data.indexOfContactPerson < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindContactPersonField",realContactPerson));
      }
    }
    if (!Const.isEmpty(meta.getContactPhone())) {
      if (data.indexOfContactPhone < 0) {
        String realContactPhone=environmentSubstitute(meta.getContactPhone());
        data.indexOfContactPhone=data.previousRowMeta.indexOfValue(realContactPhone);
        if (data.indexOfContactPhone < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindContactPhoneField",realContactPhone));
      }
    }
    if (data.indexOfServer < 0) {
      String realServer=environmentSubstitute(meta.getServer());
      data.indexOfServer=data.previousRowMeta.indexOfValue(realServer);
      if (data.indexOfServer < 0)       throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindServerField",realServer));
    }
    if (!Const.isEmpty(meta.getPort())) {
      if (data.indexOfPort < 0) {
        String realPort=environmentSubstitute(meta.getPort());
        data.indexOfPort=data.previousRowMeta.indexOfValue(realPort);
        if (data.indexOfPort < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindPortField",realPort));
      }
    }
    if (meta.isUsingAuthentication()) {
      if (data.indexOfAuthenticationUser < 0) {
        String realAuthenticationUser=environmentSubstitute(meta.getAuthenticationUser());
        data.indexOfAuthenticationUser=data.previousRowMeta.indexOfValue(realAuthenticationUser);
        if (data.indexOfAuthenticationUser < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindAuthenticationUserField",realAuthenticationUser));
      }
      if (data.indexOfAuthenticationPass < 0) {
        String realAuthenticationPassword=environmentSubstitute(meta.getAuthenticationPassword());
        data.indexOfAuthenticationPass=data.previousRowMeta.indexOfValue(realAuthenticationPassword);
        if (data.indexOfAuthenticationPass < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindAuthenticationPassField",realAuthenticationPassword));
      }
    }
    if (!Const.isEmpty(meta.getSubject())) {
      if (data.indexOfSubject < 0) {
        String realSubject=environmentSubstitute(meta.getSubject());
        data.indexOfSubject=data.previousRowMeta.indexOfValue(realSubject);
        if (data.indexOfSubject < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindSubjectField",realSubject));
      }
    }
    if (!Const.isEmpty(meta.getComment())) {
      if (data.indexOfComment < 0) {
        String realComment=environmentSubstitute(meta.getComment());
        data.indexOfComment=data.previousRowMeta.indexOfValue(realComment);
        if (data.indexOfComment < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotFindCommentField",realComment));
      }
    }
    if (meta.isZipFilenameDynamic()) {
      if (data.indexOfDynamicZipFilename < 0) {
        String realZipFilename=environmentSubstitute(meta.getDynamicZipFilenameField());
        data.indexOfDynamicZipFilename=data.previousRowMeta.indexOfValue(realZipFilename);
        if (data.indexOfDynamicZipFilename < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotSourceAttachedZipFilenameField",realZipFilename));
      }
    }
    data.zipFileLimit=Const.toLong(environmentSubstitute(meta.getZipLimitSize()),0);
    if (data.zipFileLimit > 0)     data.zipFileLimit=data.zipFileLimit * 1048576;
    if (!meta.isZipFilenameDynamic())     data.ZipFilename=environmentSubstitute(meta.getZipFilename());
    if (meta.isDynamicFilename()) {
      if (data.indexOfSourceFilename < 0) {
        String realSourceattachedFilename=environmentSubstitute(meta.getDynamicFieldname());
        data.indexOfSourceFilename=data.previousRowMeta.indexOfValue(realSourceattachedFilename);
        if (data.indexOfSourceFilename < 0)         throw new KettleException(Messages.getString("Mail.Exception.CouldnotSourceAttachedFilenameField",realSourceattachedFilename));
      }
      if (!Const.isEmpty(meta.getSourceWildcard())) {
        if (data.indexOfSourceWildcard < 0) {
          String realSourceattachedWildcard=environmentSubstitute(meta.getDynamicWildcard());
          data.indexOfSourceWildcard=data.previousRowMeta.indexOfValue(realSourceattachedWildcard);
          if (data.indexOfSourceWildcard < 0)           throw new KettleException(Messages.getString("Mail.Exception.CouldnotSourceAttachedWildcard",realSourceattachedWildcard));
        }
      }
    }
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    String maildestination=data.previousRowMeta.getString(r,data.indexOfDestination);
    String maildestinationCc=null;
    if (data.indexOfDestinationCc > -1)     maildestinationCc=data.previousRowMeta.getString(r,data.indexOfDestinationCc);
    String maildestinationBCc=null;
    if (data.indexOfDestinationBCc > -1)     maildestinationBCc=data.previousRowMeta.getString(r,data.indexOfDestinationBCc);
    String mailreplyname=null;
    if (data.indexOfReplyName > -1)     mailreplyname=data.previousRowMeta.getString(r,data.indexOfReplyName);
    String mailreplyaddress=data.previousRowMeta.getString(r,data.indexOfReplyAddress);
    String contactperson=null;
    if (data.indexOfContactPerson > -1)     contactperson=data.previousRowMeta.getString(r,data.indexOfContactPerson);
    String contactphone=null;
    if (data.indexOfContactPhone > -1)     contactphone=data.previousRowMeta.getString(r,data.indexOfContactPhone);
    String servername=data.previousRowMeta.getString(r,data.indexOfServer);
    String port=null;
    if (data.indexOfPort > -1)     port=data.previousRowMeta.getString(r,data.indexOfPort);
    String authuser=null;
    if (data.indexOfAuthenticationUser > -1)     authuser=data.previousRowMeta.getString(r,data.indexOfAuthenticationUser);
    String authpass=null;
    if (data.indexOfAuthenticationPass > -1)     authpass=data.previousRowMeta.getString(r,data.indexOfAuthenticationPass);
    String subject=null;
    if (data.indexOfSubject > -1)     subject=data.previousRowMeta.getString(r,data.indexOfSubject);
    String comment=null;
    if (data.indexOfComment > -1)     comment=data.previousRowMeta.getString(r,data.indexOfComment);
    sendMail(r,servername,port,mailreplyaddress,mailreplyname,maildestination,maildestinationCc,maildestinationBCc,contactperson,contactphone,authuser,authpass,subject,comment);
    putRow(getInputRowMeta(),r);
    if (log.isRowLevel())     log.logRowlevel(toString(),Messages.getString("Mail.Log.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleException(Messages.getString("Mail.Error.General"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"MAIL001");
    }
  }
  return true;
}
