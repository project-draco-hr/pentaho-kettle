{
  boolean OK=true;
  getLogInfo();
  transMeta.setTransLogTable(transLogTable);
  transMeta.setPerformanceLogTable(performanceLogTable);
  transMeta.setChannelLogTable(channelLogTable);
  transMeta.setStepLogTable(stepLogTable);
  transMeta.setMetricsLogTable(metricsLogTable);
  transMeta.setMaxDateConnection(transMeta.findDatabase(wMaxdateconnection.getText()));
  transMeta.setMaxDateTable(wMaxdatetable.getText());
  transMeta.setMaxDateField(wMaxdatefield.getText());
  transMeta.setName(wTransname.getText());
  transMeta.setDescription(wTransdescription.getText());
  transMeta.setExtendedDescription(wExtendeddescription.getText());
  transMeta.setTransversion(wTransversion.getText());
  if (wTransstatus.getSelectionIndex() != 2) {
    transMeta.setTransstatus(wTransstatus.getSelectionIndex() + 1);
  }
 else {
    transMeta.setTransstatus(-1);
  }
  try {
    transMeta.setMaxDateOffset(Double.parseDouble(wMaxdateoffset.getText()));
  }
 catch (  Exception e) {
    MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    mb.setText(BaseMessages.getString(PKG,"TransDialog.InvalidOffsetNumber.DialogTitle"));
    mb.setMessage(BaseMessages.getString(PKG,"TransDialog.InvalidOffsetNumber.DialogMessage"));
    mb.open();
    wMaxdateoffset.setFocus();
    wMaxdateoffset.selectAll();
    OK=false;
  }
  try {
    transMeta.setMaxDateDifference(Double.parseDouble(wMaxdatediff.getText()));
  }
 catch (  Exception e) {
    MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    mb.setText(BaseMessages.getString(PKG,"TransDialog.InvalidDateDifferenceNumber.DialogTitle"));
    mb.setMessage(BaseMessages.getString(PKG,"TransDialog.InvalidDateDifferenceNumber.DialogMessage"));
    mb.open();
    wMaxdatediff.setFocus();
    wMaxdatediff.selectAll();
    OK=false;
  }
  transMeta.removeAllDependencies();
  int nrNonEmptyFields=wFields.nrNonEmpty();
  for (int i=0; i < nrNonEmptyFields; i++) {
    TableItem item=wFields.getNonEmpty(i);
    DatabaseMeta db=transMeta.findDatabase(item.getText(1));
    String tablename=item.getText(2);
    String fieldname=item.getText(3);
    TransDependency td=new TransDependency(db,tablename,fieldname);
    transMeta.addDependency(td);
  }
  transMeta.eraseParameters();
  nrNonEmptyFields=wParamFields.nrNonEmpty();
  for (int i=0; i < nrNonEmptyFields; i++) {
    TableItem item=wParamFields.getNonEmpty(i);
    try {
      transMeta.addParameterDefinition(item.getText(1),item.getText(2),item.getText(3));
    }
 catch (    DuplicateParamException e) {
    }
  }
  transMeta.setSizeRowset(Const.toInt(wSizeRowset.getText(),Const.ROWS_IN_ROWSET));
  transMeta.setUsingUniqueConnections(wUniqueConnections.getSelection());
  transMeta.setFeedbackShown(wShowFeedback.getSelection());
  transMeta.setFeedbackSize(Const.toInt(wFeedbackSize.getText(),Const.ROWS_UPDATE));
  transMeta.setSharedObjectsFile(wSharedObjectsFile.getText());
  transMeta.setUsingThreadPriorityManagment(wManageThreads.getSelection());
  transMeta.setTransformationType(TransformationType.values()[Const.indexOfString(wTransformationType.getText(),TransformationType.getTransformationTypesDescriptions())]);
  if (directoryChangeAllowed && transMeta.getObjectId() != null) {
    if (newDirectory != null) {
      RepositoryDirectoryInterface dirFrom=transMeta.getRepositoryDirectory();
      try {
        ObjectId newId=rep.renameTransformation(transMeta.getObjectId(),newDirectory,transMeta.getName());
        transMeta.setObjectId(newId);
        transMeta.setRepositoryDirectory(newDirectory);
      }
 catch (      KettleException ke) {
        transMeta.setRepositoryDirectory(dirFrom);
        OK=false;
        new ErrorDialog(shell,BaseMessages.getString(PKG,"TransDialog.ErrorMovingTransformation.DialogTitle"),BaseMessages.getString(PKG,"TransDialog.ErrorMovingTransformation.DialogMessage"),ke);
      }
    }
  }
 else {
    if (newDirectory != null)     transMeta.setRepositoryDirectory(newDirectory);
  }
  transMeta.setCapturingStepPerformanceSnapShots(wEnableStepPerfMonitor.getSelection());
  transMeta.setStepPerformanceCapturingSizeLimit(wStepPerfMaxSize.getText());
  try {
    long stepPerformanceCapturingDelay=Long.parseLong(wStepPerfInterval.getText());
    if (stepPerformanceCapturingDelay <= 0 && transMeta.isCapturingStepPerformanceSnapShots()) {
      throw new KettleException();
    }
 else {
      if (stepPerformanceCapturingDelay <= 0) {
        stepPerformanceCapturingDelay=1000;
      }
      transMeta.setStepPerformanceCapturingDelay(stepPerformanceCapturingDelay);
    }
  }
 catch (  Exception e) {
    MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    mb.setText(BaseMessages.getString(PKG,"TransDialog.InvalidStepPerfIntervalNumber.DialogTitle"));
    mb.setMessage(BaseMessages.getString(PKG,"TransDialog.InvalidStepPerfIntervalNumber.DialogMessage"));
    mb.open();
    wStepPerfInterval.setFocus();
    wStepPerfInterval.selectAll();
    OK=false;
  }
  DataServiceMeta dataService=transMeta.getDataService();
  dataService.setName(wServiceName.getText());
  dataService.setStepname(wServiceStep.getText());
  dataService.setOutput(wServiceOutput.getSelection());
  dataService.setOptimizationAllowed(wServiceAllowOptimization.getSelection());
  dataService.setCacheMethod(ServiceCacheMethod.getMethodByDescription(wServiceCacheMethod.getText()));
  if (OK) {
    transMeta.setChanged(changed || transMeta.hasChanged());
    dispose();
  }
}
