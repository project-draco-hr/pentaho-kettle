{
  if (data.firstmetadata) {
    data.firstmetadata=false;
    data.metanrs=new int[meta.getMetaName().length];
    for (int i=0; i < data.metanrs.length; i++) {
      data.metanrs[i]=rowMeta.indexOfValue(meta.getMetaName()[i]);
      if (data.metanrs[i] < 0) {
        logError(Messages.getString("SelectValues.Log.CouldNotFindField",meta.getMetaName()[i]));
        setErrors(1);
        stopAll();
        return null;
      }
    }
    int cnt[]=new int[meta.getMetaName().length];
    for (int i=0; i < meta.getMetaName().length; i++) {
      cnt[i]=0;
      for (int j=0; j < meta.getMetaName().length; j++) {
        if (meta.getMetaName()[i].equals(meta.getMetaName()[j]))         cnt[i]++;
        if (cnt[i] > 1) {
          logError(Messages.getString("SelectValues.Log.FieldCouldNotSpecifiedMoreThanTwice2",meta.getMetaName()[i]));
          setErrors(1);
          stopAll();
          return null;
        }
      }
    }
  }
  for (int i=0; i < data.metanrs.length; i++) {
    int index=data.metanrs[i];
    ValueMetaInterface fromMeta=rowMeta.getValueMeta(index);
    ValueMetaInterface toMeta=data.metadataRowMeta.getValueMeta(index);
    if (fromMeta.isStorageBinaryString() && meta.getMetaStorageType()[i] == ValueMetaInterface.STORAGE_TYPE_NORMAL) {
      rowData[index]=fromMeta.convertBinaryStringToNativeType((byte[])rowData[index]);
    }
    if (meta.getMetaType()[i] != ValueMetaInterface.TYPE_NONE) {
switch (toMeta.getType()) {
case ValueMetaInterface.TYPE_STRING:
        rowData[index]=fromMeta.getString(rowData[index]);
      break;
case ValueMetaInterface.TYPE_NUMBER:
    rowData[index]=fromMeta.getNumber(rowData[index]);
  break;
case ValueMetaInterface.TYPE_INTEGER:
rowData[index]=fromMeta.getInteger(rowData[index]);
break;
case ValueMetaInterface.TYPE_DATE:
rowData[index]=fromMeta.getDate(rowData[index]);
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
rowData[index]=fromMeta.getBigNumber(rowData[index]);
break;
case ValueMetaInterface.TYPE_BOOLEAN:
rowData[index]=fromMeta.getBoolean(rowData[index]);
break;
case ValueMetaInterface.TYPE_BINARY:
rowData[index]=fromMeta.getBinary(rowData[index]);
break;
default :
throw new KettleValueException("Unable to convert data type of value '" + fromMeta + "' to data type "+ toMeta.getType());
}
}
}
return rowData;
}
