{
  StringBuffer line=new StringBuffer();
  String dateTimeString="";
  if (timeAdded) {
    dateTimeString=((SimpleDateFormat)LOCAL_SIMPLE_DATE_PARSER.get()).format(new Date(event.timeStamp)) + " - ";
  }
  Object object=event.getMessage();
  if (object instanceof LogMessage) {
    LogMessage message=(LogMessage)object;
    if (message == null) {
      throw new RuntimeException("The message to log can't ever be null!!");
    }
    String parts[]=message.getMessage().split(Const.CR);
    for (int i=0; i < parts.length; i++) {
      line.append(dateTimeString);
      if (message.getSubject() != null) {
        line.append(message.getSubject());
        if (message.getCopy() != null) {
          line.append(".").append(message.getCopy());
        }
        line.append(" - ");
      }
      if (message.isError()) {
        BuildVersion buildVersion=BuildVersion.getInstance();
        line.append(ERROR_STRING);
        if (i == 0) {
          line.append(" (version ");
          line.append(buildVersion.getVersion());
          if (!Const.isEmpty(buildVersion.getRevision())) {
            line.append(", build ");
            line.append(buildVersion.getRevision());
          }
          if (!Const.isEmpty(buildVersion.getBuildDate())) {
            line.append(" from ");
            line.append(buildVersion.getBuildDate());
          }
          if (!Const.isEmpty(buildVersion.getBuildUser())) {
            line.append(" by ");
            line.append(buildVersion.getBuildUser());
          }
          line.append(") : ");
        }
      }
      line.append(parts[i]);
      if (i < parts.length - 1)       line.append(Const.CR);
    }
  }
 else {
    line.append(dateTimeString);
    line.append((object != null ? object.toString() : "<null>"));
  }
  return line.toString();
}
