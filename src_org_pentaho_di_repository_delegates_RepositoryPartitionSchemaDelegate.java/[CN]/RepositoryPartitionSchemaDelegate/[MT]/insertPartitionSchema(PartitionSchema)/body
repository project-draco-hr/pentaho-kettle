{
  long id=repository.connectionDelegate.getNextPartitionSchemaID();
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_PARTITION_SCHEMA_ID_PARTITION_SCHEMA,ValueMetaInterface.TYPE_INTEGER),new Long(id));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_PARTITION_SCHEMA_NAME,ValueMetaInterface.TYPE_STRING),partitionSchema.getName());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_PARTITION_SCHEMA_DYNAMIC_DEFINITION,ValueMetaInterface.TYPE_BOOLEAN),partitionSchema.isDynamicallyDefined());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_PARTITION_SCHEMA_PARTITIONS_PER_SLAVE,ValueMetaInterface.TYPE_STRING),partitionSchema.getNumberOfPartitionsPerSlave());
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_PARTITION_SCHEMA);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  return id;
}
