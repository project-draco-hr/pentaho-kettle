{
  MemoryGroupByMeta meta=new MemoryGroupByMeta();
  meta.setSubjectField(new String[]{KEY2});
  meta.setAggregateField(new String[]{OUT1});
  meta.setGroupField(new String[]{KEY1});
  meta.setAggregateType(new int[]{GroupByMeta.TYPE_GROUP_CONCAT_COMMA});
  meta.setAlwaysGivingBackOneRow(true);
  TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,stepName,getTestRowMeta());
  List<RowMetaAndData> inputList=new ArrayList<RowMetaAndData>();
  List<RowMetaAndData> result=null;
  try {
    result=TransTestFactory.executeTestTransformation(transMeta,stepName,inputList);
  }
 catch (  KettleException e) {
    Assert.fail();
  }
  Assert.assertNotNull(result);
  Assert.assertEquals(1,result.size());
  Assert.assertEquals(KEY1,result.get(0).getValueMeta(0).getName());
  Assert.assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(0).getType());
  Assert.assertNull(result.get(0).getString(0,null));
  Assert.assertEquals(OUT1,result.get(0).getValueMeta(1).getName());
  Assert.assertEquals(ValueMetaInterface.TYPE_STRING,result.get(0).getValueMeta(1).getType());
  Assert.assertNull(result.get(0).getString(1,null));
}
