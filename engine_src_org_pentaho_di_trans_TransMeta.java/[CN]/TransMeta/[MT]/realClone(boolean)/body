{
  try {
    TransMeta transMeta=(TransMeta)super.clone();
    if (doClear) {
      transMeta.clear();
    }
 else {
      transMeta.databases=new ArrayList<DatabaseMeta>();
      transMeta.steps=new ArrayList<StepMeta>();
      transMeta.hops=new ArrayList<TransHopMeta>();
      transMeta.notes=new ArrayList<NotePadMeta>();
      transMeta.dependencies=new ArrayList<TransDependency>();
      transMeta.partitionSchemas=new ArrayList<PartitionSchema>();
      transMeta.slaveServers=new ArrayList<SlaveServer>();
      transMeta.clusterSchemas=new ArrayList<ClusterSchema>();
      transMeta.namedParams=new NamedParamsDefault();
    }
    for (    DatabaseMeta db : databases) {
      transMeta.addDatabase((DatabaseMeta)db.clone());
    }
    for (    StepMeta step : steps) {
      transMeta.addStep((StepMeta)step.clone());
    }
    for (    TransHopMeta hop : hops) {
      transMeta.addTransHop((TransHopMeta)hop.clone());
    }
    for (    NotePadMeta note : notes) {
      transMeta.addNote((NotePadMeta)note.clone());
    }
    for (    TransDependency dep : dependencies) {
      transMeta.addDependency((TransDependency)dep.clone());
    }
    for (    SlaveServer slave : slaveServers) {
      transMeta.getSlaveServers().add((SlaveServer)slave.clone());
    }
    for (    ClusterSchema schema : clusterSchemas) {
      transMeta.getClusterSchemas().add(schema.clone());
    }
    for (    PartitionSchema schema : partitionSchemas) {
      transMeta.getPartitionSchemas().add((PartitionSchema)schema.clone());
    }
    for (    String key : listParameters()) {
      transMeta.addParameterDefinition(key,getParameterDefault(key),getParameterDescription(key));
    }
    return transMeta;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}
