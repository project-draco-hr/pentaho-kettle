{
  Object[] outputRowData=buildEmptyRow();
  if (data.dynamic) {
    System.arraycopy(data.readRow,0,outputRowData,0,data.readRow.length);
  }
  try {
    for (int i=0; i < meta.getInputFields().length; i++) {
      LDAPInputField field=meta.getInputFields()[i];
      int index=data.nrIncomingFields + i;
      Attribute attr=data.attributes.get(field.getRealAttribute());
      if (attr != null) {
        outputRowData[index]=getAttributeValue(field,attr,index,outputRowData[index]);
      }
      if (field.isRepeated()) {
        if (data.previousRow != null && outputRowData[index] == null) {
          outputRowData[index]=data.previousRow[index];
        }
      }
    }
    int fIndex=data.nrIncomingFields + data.nrfields;
    if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
      outputRowData[fIndex]=new Long(data.rownr);
    }
    RowMetaInterface irow=getInputRowMeta();
    data.previousRow=irow == null ? outputRowData : irow.cloneRow(outputRowData);
    data.rownr++;
    incrementLinesInput();
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LDAPInput.Exception.CanNotReadLDAP"),e);
  }
  return outputRowData;
}
