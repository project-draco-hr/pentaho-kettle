{
  data.attrReturned=new String[meta.getInputFields().length];
  data.attributesBinary=new HashSet<String>();
  for (int i=0; i < meta.getInputFields().length; i++) {
    LDAPInputField field=meta.getInputFields()[i];
    String name=environmentSubstitute(field.getAttribute());
    field.setRealAttribute(name);
    if (field.getReturnType() == LDAPInputField.FETCH_ATTRIBUTE_AS_BINARY) {
      data.attributesBinary.add(name);
    }
    data.attrReturned[i]=name;
  }
  data.connection=new LDAPConnection(log,this,meta,data.attributesBinary);
  for (int i=0; i < data.attrReturned.length; i++) {
    LDAPInputField field=meta.getInputFields()[i];
    if (field.isSortedKey()) {
      data.connection.addSortingAttributes(data.attrReturned[i]);
    }
  }
  if (meta.UseAuthentication()) {
    String username=environmentSubstitute(meta.getUserName());
    String password=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(meta.getPassword()));
    data.connection.connect(username,password);
  }
 else {
    data.connection.connect();
  }
  if (meta.getTimeLimit() > 0) {
    data.connection.setTimeLimit(meta.getTimeLimit() * 1000);
  }
  if (meta.isPaging()) {
    data.connection.SetPagingSize(Const.toInt(environmentSubstitute(meta.getPageSize()),-1));
  }
}
