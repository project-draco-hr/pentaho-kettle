{
  if (plugin == null) {
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.NoValidStepOrPlugin.PLUGINREGISTRY001"));
  }
  try {
    if (plugin.isNativePlugin()) {
      return this.getClass().getClassLoader();
    }
 else {
      URLClassLoader ucl=null;
      lock.writeLock().lock();
      try {
        if (plugin.isSeparateClassLoaderNeeded()) {
          ucl=createClassLoader(plugin);
        }
 else {
          Map<PluginInterface,URLClassLoader> classLoaders=classLoaderMap.get(plugin.getPluginType());
          if (classLoaders == null) {
            classLoaders=new HashMap<PluginInterface,URLClassLoader>();
            classLoaderMap.put(plugin.getPluginType(),classLoaders);
          }
 else {
            ucl=classLoaders.get(plugin);
          }
          if (ucl == null) {
            if (!Utils.isEmpty(plugin.getClassLoaderGroup())) {
              ucl=classLoaderGroupsMap.get(plugin.getClassLoaderGroup());
              if (ucl == null) {
                ucl=createClassLoader(plugin);
                classLoaders.put(plugin,ucl);
                classLoaderGroupsMap.put(plugin.getClassLoaderGroup(),ucl);
              }
            }
 else {
              if (plugin.getPluginDirectory() != null) {
                ucl=folderBasedClassLoaderMap.get(plugin.getPluginDirectory().toString());
                if (ucl == null) {
                  ucl=createClassLoader(plugin);
                  classLoaders.put(plugin,ucl);
                  folderBasedClassLoaderMap.put(plugin.getPluginDirectory().toString(),ucl);
                }
              }
 else {
                ucl=classLoaders.get(plugin);
                if (ucl == null) {
                  if (plugin.getLibraries().size() == 0) {
                    if (plugin instanceof ClassLoadingPluginInterface) {
                      return ((ClassLoadingPluginInterface)plugin).getClassLoader();
                    }
                  }
                  ucl=createClassLoader(plugin);
                  classLoaders.put(plugin,ucl);
                }
              }
            }
          }
        }
      }
  finally {
        lock.writeLock().unlock();
      }
      return ucl;
    }
  }
 catch (  MalformedURLException e) {
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.MalformedURL.PLUGINREGISTRY006"),e);
  }
catch (  Throwable e) {
    e.printStackTrace();
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.UnExpectedCreatingClassLoader.PLUGINREGISTRY008"),e);
  }
}
