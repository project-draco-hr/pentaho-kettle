{
  if (plugin == null) {
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.NoValidStepOrPlugin.PLUGINREGISTRY001"));
  }
  try {
    if (plugin.isNativePlugin()) {
      return this.getClass().getClassLoader();
    }
 else {
      List<String> jarfiles=plugin.getLibraries();
      int librarySize=0;
      if (jarfiles != null) {
        librarySize=jarfiles.size();
      }
      URL[] urls=new URL[librarySize];
      if (jarfiles != null) {
        for (int i=0; i < jarfiles.size(); i++) {
          File jarfile=new File(jarfiles.get(i));
          urls[i]=new URL(URLDecoder.decode(jarfile.toURI().toURL().toString(),"UTF-8"));
        }
      }
      ClassLoader classLoader=getClass().getClassLoader();
      URLClassLoader ucl=null;
      if (plugin.isSeparateClassLoaderNeeded()) {
        ucl=new KettleURLClassLoader(urls,classLoader,plugin.getDescription());
      }
 else {
        Map<PluginInterface,URLClassLoader> classLoaders=classLoaderMap.get(plugin.getPluginType());
        if (classLoaders == null) {
          classLoaders=new HashMap<PluginInterface,URLClassLoader>();
          classLoaderMap.put(plugin.getPluginType(),classLoaders);
        }
 else {
          ucl=classLoaders.get(plugin);
        }
        if (ucl == null) {
          if (plugin.getPluginDirectory() != null) {
            ucl=folderBasedClassLoaderMap.get(plugin.getPluginDirectory().toString());
            if (ucl == null) {
              ucl=new KettleURLClassLoader(urls,classLoader,plugin.getDescription());
              classLoaders.put(plugin,ucl);
              folderBasedClassLoaderMap.put(plugin.getPluginDirectory().toString(),ucl);
            }
          }
 else {
            ucl=classLoaders.get(plugin);
            if (ucl == null) {
              if (urls.length == 0) {
                if (plugin instanceof ClassLoadingPluginInterface) {
                  return ((ClassLoadingPluginInterface)plugin).getClassLoader();
                }
              }
              ucl=new KettleURLClassLoader(urls,classLoader,plugin.getDescription());
              classLoaders.put(plugin,ucl);
            }
          }
        }
      }
      return ucl;
    }
  }
 catch (  MalformedURLException e) {
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.MalformedURL.PLUGINREGISTRY006"),e);
  }
catch (  Throwable e) {
    e.printStackTrace();
    throw new KettlePluginException(BaseMessages.getString(PKG,"PluginRegistry.RuntimeError.UnExpectedCreatingClassLoader.PLUGINREGISTRY008"),e);
  }
}
