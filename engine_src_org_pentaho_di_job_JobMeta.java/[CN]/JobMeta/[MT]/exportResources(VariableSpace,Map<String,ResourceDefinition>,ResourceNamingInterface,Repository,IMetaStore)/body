{
  String resourceName=null;
  try {
    String baseName;
    String originalPath;
    String fullname;
    String extension="kjb";
    if (Utils.isEmpty(getFilename())) {
      originalPath=directory.getPath();
      baseName=getName();
      fullname=directory.getPath() + (directory.getPath().endsWith(RepositoryDirectory.DIRECTORY_SEPARATOR) ? "" : RepositoryDirectory.DIRECTORY_SEPARATOR) + getName()+ "."+ extension;
    }
 else {
      FileObject fileObject=KettleVFS.getFileObject(space.environmentSubstitute(getFilename()),space);
      originalPath=fileObject.getParent().getName().getPath();
      baseName=fileObject.getName().getBaseName();
      fullname=fileObject.getName().getPath();
    }
    resourceName=namingInterface.nameResource(baseName,originalPath,extension,ResourceNamingInterface.FileNamingType.JOB);
    ResourceDefinition definition=definitions.get(resourceName);
    if (definition == null) {
      JobMeta jobMeta=(JobMeta)this.realClone(false);
      jobMeta.setRepositoryDirectory(directory);
      for (      JobEntryCopy jobEntry : jobMeta.jobcopies) {
        compatibleJobEntryExportResources(jobEntry.getEntry(),jobMeta,definitions,namingInterface,repository);
        jobEntry.getEntry().exportResources(jobMeta,definitions,namingInterface,repository,metaStore);
      }
      Map<String,String> directoryMap=namingInterface.getDirectoryMap();
      if (directoryMap != null) {
        for (        String directory : directoryMap.keySet()) {
          String parameterName=directoryMap.get(directory);
          jobMeta.addParameterDefinition(parameterName,directory,"Data file path discovered during export");
        }
      }
      String jobMetaContent=jobMeta.getXML();
      definition=new ResourceDefinition(resourceName,jobMetaContent);
      if (Utils.isEmpty(this.getFilename())) {
        definition.setOrigin(fullname);
      }
 else {
        definition.setOrigin(this.getFilename());
      }
      definitions.put(fullname,definition);
    }
  }
 catch (  FileSystemException e) {
    throw new KettleException(BaseMessages.getString(PKG,"JobMeta.Exception.AnErrorOccuredReadingJob",getFilename()),e);
  }
catch (  KettleFileException e) {
    throw new KettleException(BaseMessages.getString(PKG,"JobMeta.Exception.AnErrorOccuredReadingJob",getFilename()),e);
  }
  return resourceName;
}
