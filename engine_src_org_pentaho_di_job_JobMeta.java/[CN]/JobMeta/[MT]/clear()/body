{
  setName(null);
  setFilename(null);
  jobcopies=new ArrayList<JobEntryCopy>();
  jobhops=new ArrayList<JobHopMeta>();
  notes=new ArrayList<NotePadMeta>();
  databases=new ArrayList<DatabaseMeta>();
  slaveServers=new ArrayList<SlaveServer>();
  jobLogTable=JobLogTable.getDefault(this,this);
  channelLogTable=ChannelLogTable.getDefault(this,this);
  jobEntryLogTable=JobEntryLogTable.getDefault(this,this);
  extraLogTables=new ArrayList<LogTableInterface>();
  List<PluginInterface> plugins=PluginRegistry.getInstance().getPlugins(LogTablePluginType.class);
  for (  PluginInterface plugin : plugins) {
    try {
      LogTablePluginInterface logTablePluginInterface=(LogTablePluginInterface)PluginRegistry.getInstance().loadClass(plugin);
      if (logTablePluginInterface.getType() == TableType.JOB) {
        logTablePluginInterface.setContext(this,this);
        extraLogTables.add(logTablePluginInterface);
      }
    }
 catch (    Exception e) {
      LogChannel.GENERAL.logError("Error loading log table plugin with ID " + plugin.getIds()[0],e);
    }
  }
  attributesMap=new HashMap<String,Map<String,String>>();
  arguments=null;
  max_undo=Const.MAX_UNDO;
  undo=new ArrayList<TransAction>();
  undo_position=-1;
  addDefaults();
  setChanged(false);
  created_user="-";
  created_date=new Date();
  modifiedUser="-";
  modifiedDate=new Date();
  directory=new RepositoryDirectory();
  description=null;
  jobStatus=-1;
  jobVersion=null;
  extendedDescription=null;
}
