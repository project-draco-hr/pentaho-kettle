{
  try {
    TransMeta transMeta=null;
    CurrentDirectoryResolver r=new CurrentDirectoryResolver();
    VariableSpace tmpSpace=r.resolveCurrentDirectory(specificationMethod,space,rep,parentJob,getFilename());
switch (specificationMethod) {
case FILENAME:
      String realFilename=tmpSpace.environmentSubstitute(getFilename());
    if (rep != null) {
      while (realFilename.contains("//")) {
        realFilename=realFilename.replace("//","/");
      }
      try {
        String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
        String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1);
        RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
        transMeta=rep.loadTransformation(tmpFilename,dir,null,true,null);
      }
 catch (      KettleException ke) {
        if (realFilename.endsWith(Const.STRING_TRANS_DEFAULT_EXT)) {
          try {
            String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1,realFilename.indexOf("." + Const.STRING_TRANS_DEFAULT_EXT));
            String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
            RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
            transMeta=rep.loadTransformation(tmpFilename,dir,null,true,null);
          }
 catch (          KettleException ke2) {
          }
        }
      }
    }
  if (transMeta == null) {
    logBasic("Loading transformation from XML file [" + realFilename + "]");
    transMeta=new TransMeta(realFilename,metaStore,null,true,this,null);
  }
break;
case REPOSITORY_BY_NAME:
String transname=tmpSpace.environmentSubstitute(getTransname());
String realDirectory=tmpSpace.environmentSubstitute(getDirectory());
logBasic(BaseMessages.getString(PKG,"JobTrans.Log.LoadingTransRepDirec",transname,realDirectory));
if (rep != null) {
while (realDirectory.contains("//")) {
realDirectory=realDirectory.replace("//","/");
}
RepositoryDirectoryInterface repositoryDirectory=rep.findDirectory(realDirectory);
transMeta=rep.loadTransformation(transname,repositoryDirectory,null,true,null);
}
 else {
try {
transMeta=new TransMeta(realDirectory + "/" + transname,metaStore,null,true,this,null);
}
 catch (KettleException ke) {
try {
transMeta=new TransMeta(realDirectory + "/" + transname+ "."+ Const.STRING_TRANS_DEFAULT_EXT,metaStore,null,true,this,null);
}
 catch (KettleException ke2) {
throw new KettleException(BaseMessages.getString(PKG,"JobTrans.Exception.NoRepDefined"),ke2);
}
}
}
break;
case REPOSITORY_BY_REFERENCE:
if (transObjectId == null) {
throw new KettleException(BaseMessages.getString(PKG,"JobTrans.Exception.ReferencedTransformationIdIsNull"));
}
if (rep != null) {
transMeta=rep.loadTransformation(transObjectId,null);
}
break;
default :
throw new KettleException("The specified object location specification method '" + specificationMethod + "' is not yet supported in this job entry.");
}
if (transMeta != null) {
transMeta.copyVariablesFrom(this);
transMeta.setRepository(rep);
transMeta.setMetaStore(metaStore);
}
return transMeta;
}
 catch (Exception e) {
throw new KettleException(BaseMessages.getString(PKG,"JobTrans.Exception.MetaDataLoad"),e);
}
}
