{
  result.setEntryNr(nr);
  LogChannelFileWriter logChannelFileWriter=null;
  LogLevel transLogLevel=parentJob.getLogLevel();
  String realLogFilename="";
  if (setLogfile) {
    transLogLevel=logFileLevel;
    realLogFilename=environmentSubstitute(getLogFilename());
    if (Const.isEmpty(realLogFilename)) {
      logError(BaseMessages.getString(PKG,"JobTrans.Exception.LogFilenameMissing"));
      result.setNrErrors(1);
      result.setResult(false);
      return result;
    }
    if (!FileUtil.createParentFolder(PKG,realLogFilename,createParentFolder,this.getLogChannel(),this)) {
      result.setNrErrors(1);
      result.setResult(false);
      return result;
    }
    try {
      logChannelFileWriter=new LogChannelFileWriter(this.getLogChannelId(),KettleVFS.getFileObject(realLogFilename),setAppendLogfile);
      logChannelFileWriter.startLogging();
    }
 catch (    KettleException e) {
      logError(BaseMessages.getString(PKG,"JobTrans.Error.UnableOpenAppender",realLogFilename,e.toString()));
      logError(Const.getStackTracker(e));
      result.setNrErrors(1);
      result.setResult(false);
      return result;
    }
  }
  SlaveServer remoteSlaveServer=null;
  if (!Const.isEmpty(remoteSlaveServerName)) {
    String realRemoteSlaveServerName=environmentSubstitute(remoteSlaveServerName);
    remoteSlaveServer=parentJob.getJobMeta().findSlaveServer(realRemoteSlaveServerName);
    if (remoteSlaveServer == null) {
      throw new KettleException(BaseMessages.getString(PKG,"JobTrans.Exception.UnableToFindRemoteSlaveServer",realRemoteSlaveServerName));
    }
  }
switch (specificationMethod) {
case FILENAME:
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobTrans.Log.OpeningTrans",environmentSubstitute(getFilename())));
    }
  break;
case REPOSITORY_BY_NAME:
if (isDetailed()) {
  logDetailed(BaseMessages.getString(PKG,"JobTrans.Log.OpeningTransInDirec",environmentSubstitute(getFilename()),environmentSubstitute(directory)));
}
break;
case REPOSITORY_BY_REFERENCE:
if (isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"JobTrans.Log.OpeningTransByReference",transObjectId));
}
break;
default :
break;
}
TransMeta transMeta=getTransMeta(rep,metaStore,this);
int iteration=0;
String[] args1=arguments;
if (args1 == null || args1.length == 0) {
args1=parentJob.getArguments();
}
String[] args=null;
if (args1 != null) {
args=new String[args1.length];
for (int idx=0; idx < args1.length; idx++) {
args[idx]=environmentSubstitute(args1[idx]);
}
}
RowMetaAndData resultRow=null;
boolean first=true;
List<RowMetaAndData> rows=new ArrayList<RowMetaAndData>(result.getRows());
while ((first && !execPerRow) || (execPerRow && rows != null && iteration < rows.size() && result.getNrErrors() == 0) && !parentJob.isStopped()) {
if (execPerRow) {
result.getRows().clear();
}
if (rows != null && execPerRow) {
resultRow=rows.get(iteration);
}
 else {
resultRow=null;
}
NamedParams namedParam=new NamedParamsDefault();
if (parameters != null) {
for (int idx=0; idx < parameters.length; idx++) {
if (!Const.isEmpty(parameters[idx])) {
namedParam.addParameterDefinition(parameters[idx],"","Job entry runtime");
if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
String value=Const.NVL(environmentSubstitute(parameterValues[idx]),"");
namedParam.setParameterValue(parameters[idx],value);
}
 else {
String value="";
if (resultRow != null) {
value=resultRow.getString(parameterFieldNames[idx],"");
}
namedParam.setParameterValue(parameters[idx],value);
}
}
}
}
first=false;
Result previousResult=result;
try {
if (isDetailed()) {
logDetailed(BaseMessages.getString(PKG,"JobTrans.StartingTrans",getFilename(),getName(),getDescription()));
}
if (clearResultRows) {
previousResult.setRows(new ArrayList<RowMetaAndData>());
}
if (clearResultFiles) {
previousResult.getResultFiles().clear();
}
if (execPerRow) {
if (argFromPrevious) {
args=null;
if (resultRow != null) {
args=new String[resultRow.size()];
for (int i=0; i < resultRow.size(); i++) {
args[i]=resultRow.getString(i,null);
}
}
}
 else {
List<RowMetaAndData> newList=new ArrayList<RowMetaAndData>();
newList.add(resultRow);
previousResult.getRows().addAll(newList);
}
if (paramsFromPrevious) {
if (parameters != null) {
for (int idx=0; idx < parameters.length; idx++) {
if (!Const.isEmpty(parameters[idx])) {
  if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
    namedParam.setParameterValue(parameters[idx],Const.NVL(environmentSubstitute(parameterValues[idx]),""));
  }
 else {
    String fieldValue="";
    if (resultRow != null) {
      fieldValue=resultRow.getString(parameterFieldNames[idx],"");
    }
    namedParam.setParameterValue(parameters[idx],Const.NVL(fieldValue,""));
  }
}
}
}
}
}
 else {
if (argFromPrevious) {
args=null;
if (resultRow != null) {
args=new String[resultRow.size()];
for (int i=0; i < resultRow.size(); i++) {
args[i]=resultRow.getString(i,null);
}
}
}
if (paramsFromPrevious) {
if (parameters != null) {
for (int idx=0; idx < parameters.length; idx++) {
if (!Const.isEmpty(parameters[idx])) {
  if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
    namedParam.setParameterValue(parameters[idx],Const.NVL(environmentSubstitute(parameterValues[idx]),""));
  }
 else {
    String fieldValue="";
    if (resultRow != null) {
      fieldValue=resultRow.getString(parameterFieldNames[idx],"");
    }
    namedParam.setParameterValue(parameters[idx],Const.NVL(fieldValue,""));
  }
}
}
}
}
}
transMeta.clearParameters();
String[] parameterNames=transMeta.listParameters();
for (int idx=0; idx < parameterNames.length; idx++) {
String thisValue=namedParam.getParameterValue(parameterNames[idx]);
if (!Const.isEmpty(thisValue)) {
transMeta.setParameterValue(parameterNames[idx],thisValue);
}
 else {
if (isPassingAllParameters()) {
String parentValue=parentJob.getParameterValue(parameterNames[idx]);
if (!Const.isEmpty(parentValue)) {
transMeta.setParameterValue(parameterNames[idx],parentValue);
}
}
}
}
if (clustering) {
TransExecutionConfiguration executionConfiguration=new TransExecutionConfiguration();
executionConfiguration.setClusterPosting(true);
executionConfiguration.setClusterPreparing(true);
executionConfiguration.setClusterStarting(true);
executionConfiguration.setClusterShowingTransformation(false);
executionConfiguration.setSafeModeEnabled(false);
executionConfiguration.setRepository(rep);
executionConfiguration.setLogLevel(transLogLevel);
executionConfiguration.setPreviousResult(previousResult);
executionConfiguration.setVariables(transMeta);
executionConfiguration.setArgumentStrings(args);
if (parentJob.getJobMeta().isBatchIdPassed()) {
executionConfiguration.setPassedBatchId(parentJob.getPassedBatchId());
}
TransSplitter transSplitter=null;
long errors=0;
try {
transSplitter=Trans.executeClustered(transMeta,executionConfiguration);
errors+=Trans.monitorClusteredTransformation(log,transSplitter,parentJob);
}
 catch (Exception e) {
logError("Error during clustered execution. Cleaning up clustered execution.",e);
errors++;
if (transSplitter != null) {
Trans.cleanupCluster(log,transSplitter);
}
 else {
SlaveServer master=null;
for (StepMeta stepMeta : transMeta.getSteps()) {
if (stepMeta.isClustered()) {
  for (  SlaveServer slaveServer : stepMeta.getClusterSchema().getSlaveServers()) {
    if (slaveServer.isMaster()) {
      master=slaveServer;
      break;
    }
  }
}
}
if (master != null) {
master.deAllocateServerSockets(transMeta.getName(),null);
}
}
}
result.clear();
if (transSplitter != null) {
Result clusterResult=Trans.getClusteredTransformationResult(log,transSplitter,parentJob,loggingRemoteWork);
result.add(clusterResult);
}
result.setNrErrors(result.getNrErrors() + errors);
}
 else if (remoteSlaveServer != null) {
remoteSlaveServer.shareVariablesWith(this);
TransExecutionConfiguration transExecutionConfiguration=new TransExecutionConfiguration();
transExecutionConfiguration.setPreviousResult(previousResult.clone());
transExecutionConfiguration.setArgumentStrings(args);
transExecutionConfiguration.setVariables(this);
transExecutionConfiguration.setRemoteServer(remoteSlaveServer);
transExecutionConfiguration.setLogLevel(transLogLevel);
transExecutionConfiguration.setRepository(rep);
transExecutionConfiguration.setLogFileName(realLogFilename);
transExecutionConfiguration.setSetAppendLogfile(setAppendLogfile);
transExecutionConfiguration.setSetLogfile(setLogfile);
Map<String,String> params=transExecutionConfiguration.getParams();
for (String param : transMeta.listParameters()) {
String value=Const.NVL(transMeta.getParameterValue(param),Const.NVL(transMeta.getParameterDefault(param),transMeta.getVariable(param)));
params.put(param,value);
}
if (parentJob.getJobMeta().isBatchIdPassed()) {
transExecutionConfiguration.setPassedBatchId(parentJob.getPassedBatchId());
}
String carteObjectId=Trans.sendToSlaveServer(transMeta,transExecutionConfiguration,rep,metaStore);
SlaveServerTransStatus transStatus=null;
while (!parentJob.isStopped() && waitingToFinish) {
try {
transStatus=remoteSlaveServer.getTransStatus(transMeta.getName(),carteObjectId,0);
if (!transStatus.isRunning()) {
Result remoteResult=transStatus.getResult();
result.clear();
result.add(remoteResult);
if (remoteResult.isStopped()) {
  result.setNrErrors(result.getNrErrors() + 1);
}
remoteSlaveServer.cleanupTransformation(transMeta.getName(),carteObjectId);
break;
}
}
 catch (Exception e1) {
logError(BaseMessages.getString(PKG,"JobTrans.Error.UnableContactSlaveServer","" + remoteSlaveServer,transMeta.getName()),e1);
result.setNrErrors(result.getNrErrors() + 1L);
break;
}
try {
Thread.sleep(2000);
}
 catch (InterruptedException e) {
}
}
if (parentJob.isStopped()) {
if (transStatus == null || transStatus.isRunning()) {
remoteSlaveServer.stopTransformation(transMeta.getName(),transStatus.getId());
remoteSlaveServer.cleanupTransformation(transMeta.getName(),transStatus.getId());
result.setNrErrors(result.getNrErrors() + 1L);
}
}
}
 else {
trans=new Trans(transMeta,this);
trans.setSocketRepository(parentJob.getSocketRepository());
if (parentJob.getJobMeta().isBatchIdPassed()) {
trans.setPassedBatchId(parentJob.getPassedBatchId());
}
trans.setParentJob(parentJob);
trans.setParentVariableSpace(parentJob);
trans.setLogLevel(transLogLevel);
trans.setPreviousResult(previousResult);
trans.setArguments(arguments);
trans.setRepository(rep);
trans.setMetaStore(metaStore);
Job rootJob=parentJob;
while (rootJob.getParentJob() != null) {
rootJob=rootJob.getParentJob();
}
trans.setJobStartDate(rootJob.getStartDate());
trans.setJobEndDate(rootJob.getEndDate());
for (DelegationListener delegationListener : parentJob.getDelegationListeners()) {
delegationListener.transformationDelegationStarted(trans,new TransExecutionConfiguration());
}
try {
trans.execute(args);
while (!trans.isFinished() && !parentJob.isStopped() && trans.getErrors() == 0) {
try {
Thread.sleep(0,500);
}
 catch (InterruptedException e) {
}
}
trans.waitUntilFinished();
if (parentJob.isStopped() || trans.getErrors() != 0) {
trans.stopAll();
result.setNrErrors(1);
}
Result newResult=trans.getResult();
result.clear();
result.add(newResult);
if (!Const.isEmpty(newResult.getRows())) {
result.setRows(newResult.getRows());
}
if (setLogfile) {
ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_LOG,KettleVFS.getFileObject(realLogFilename,this),parentJob.getJobname(),toString());
result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
}
}
 catch (KettleException e) {
logError(BaseMessages.getString(PKG,"JobTrans.Error.UnablePrepareExec"),e);
result.setNrErrors(1);
}
}
}
 catch (Exception e) {
logError(BaseMessages.getString(PKG,"JobTrans.ErrorUnableOpenTrans",e.getMessage()));
logError(Const.getStackTracker(e));
result.setNrErrors(1);
}
iteration++;
}
if (setLogfile) {
if (logChannelFileWriter != null) {
logChannelFileWriter.stopLogging();
ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_LOG,logChannelFileWriter.getLogFile(),parentJob.getJobname(),getName());
result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
if (logChannelFileWriter.getException() != null) {
logError("Unable to open log file [" + getLogFilename() + "] : ");
logError(Const.getStackTracker(logChannelFileWriter.getException()));
result.setNrErrors(1);
result.setResult(false);
return result;
}
}
}
if (result.getNrErrors() == 0) {
result.setResult(true);
}
 else {
result.setResult(false);
}
return result;
}
