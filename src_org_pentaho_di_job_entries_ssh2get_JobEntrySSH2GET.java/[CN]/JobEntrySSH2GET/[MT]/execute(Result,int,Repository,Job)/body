{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  if (log.isRowLevel())   log.logRowlevel(toString(),Messages.getString("JobSSH2GET.Log.GettingFieldsValue"));
  String realServerName=environmentSubstitute(serverName);
  int realServerPort=Const.toInt(environmentSubstitute(serverPort),22);
  String realUserName=environmentSubstitute(userName);
  String realServerPassword=environmentSubstitute(password);
  String realProxyHost=environmentSubstitute(httpProxyHost);
  int realProxyPort=Const.toInt(environmentSubstitute(httpproxyport),22);
  String realproxyUserName=environmentSubstitute(httpproxyusername);
  String realProxyPassword=environmentSubstitute(httpProxyPassword);
  String realKeyFilename=environmentSubstitute(keyFilename);
  String relKeyFilepass=environmentSubstitute(keyFilePass);
  String realLocalDirectory=environmentSubstitute(localDirectory);
  String realwildcard=environmentSubstitute(wildcard);
  String realftpDirectory=environmentSubstitute(ftpDirectory);
  String realDestinationFolder=environmentSubstitute(destinationfolder);
  if (log.isRowLevel())   log.logRowlevel(toString(),Messages.getString("JobSSH2GET.Log.CheckingMandatoryFields"));
  boolean mandatoryok=true;
  if (Const.isEmpty(realServerName)) {
    mandatoryok=false;
    log.logError(toString(),Messages.getString("JobSSH2GET.Log.ServernameMissing"));
  }
  if (usehttpproxy) {
    if (Const.isEmpty(realProxyHost)) {
      mandatoryok=false;
      log.logError(toString(),Messages.getString("JobSSH2GET.Log.HttpProxyhostMissing"));
    }
  }
  if (publicpublickey) {
    if (Const.isEmpty(realKeyFilename)) {
      mandatoryok=false;
      log.logError(toString(),Messages.getString("JobSSH2GET.Log.KeyFileMissing"));
    }
 else {
      if (!new File(realKeyFilename).exists()) {
        mandatoryok=false;
        log.logError(toString(),Messages.getString("JobSSH2GET.Log.KeyFileNotExist"));
      }
    }
  }
  if (Const.isEmpty(realLocalDirectory)) {
    mandatoryok=false;
    log.logError(toString(),Messages.getString("JobSSH2GET.Log.LocalFolderMissing"));
  }
 else {
    if (!new File(realLocalDirectory).exists()) {
      if (createtargetfolder) {
        if (!CreateFolder(realLocalDirectory))         mandatoryok=false;
      }
 else {
        mandatoryok=false;
        log.logError(toString(),Messages.getString("JobSSH2GET.Log.LocalFolderNotExists"));
      }
    }
 else {
      if (!new File(realLocalDirectory).isDirectory()) {
        mandatoryok=false;
        log.logError(toString(),Messages.getString("JobSSH2GET.Log.LocalFolderNotFolder",realLocalDirectory));
      }
    }
  }
  if (afterFtpPut.equals("move_file")) {
    if (Const.isEmpty(realDestinationFolder)) {
      mandatoryok=false;
      log.logError(toString(),Messages.getString("JobSSH2GET.Log.DestinatFolderMissing"));
    }
  }
  if (mandatoryok) {
    Connection conn=null;
    SFTPv3Client client=null;
    boolean good=true;
    try {
      conn=getConnection(realServerName,realServerPort,realProxyHost,realProxyPort,realproxyUserName,realProxyPassword);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.ConnectionInstanceCreated"));
      if (timeout > 0) {
        if (cachehostkey)         conn.connect(new SimpleVerifier(database),0,timeout * 1000);
 else         conn.connect(null,0,timeout * 1000);
      }
 else {
        if (cachehostkey)         conn.connect(new SimpleVerifier(database));
 else         conn.connect();
      }
      boolean isAuthenticated=false;
      if (publicpublickey) {
        isAuthenticated=conn.authenticateWithPublicKey(realUserName,new File(realKeyFilename),relKeyFilepass);
      }
 else {
        isAuthenticated=conn.authenticateWithPassword(realUserName,realServerPassword);
      }
      if (isAuthenticated == false)       log.logError(toString(),Messages.getString("JobSSH2GET.Log.AuthenticationFailed"));
 else {
        log.logBasic(toString(),Messages.getString("JobSSH2GET.Log.Connected",serverName,userName));
        client=new SFTPv3Client(conn);
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.ProtocolVersion","" + client.getProtocolVersion()));
        if (realftpDirectory != null) {
          if (!sshDirectoryExists(client,realftpDirectory)) {
            good=false;
            log.logError(toString(),Messages.getString("JobSSH2GET.Log.RemoteDirectoryNotExist",realftpDirectory));
          }
 else           if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.RemoteDirectoryExist",realftpDirectory));
        }
        if (realDestinationFolder != null) {
          if (!sshDirectoryExists(client,realDestinationFolder)) {
            if (createdestinationfolder) {
              if (!CreateRemoteFolder(client,realDestinationFolder))               good=false;
            }
 else {
              good=false;
              log.logError(toString(),Messages.getString("JobSSH2GET.Log.DestinatFolderNotExist",realDestinationFolder));
            }
          }
        }
        if (good) {
          if (includeSubFolders) {
            if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.RecursiveModeOn"));
            copyRecursive(realftpDirectory,realLocalDirectory,client,realwildcard,parentJob);
          }
 else {
            if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.RecursiveModeOff"));
            GetFiles(realftpDirectory,realLocalDirectory,client,realwildcard,parentJob);
          }
          if (log.isDetailed()) {
            log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.Result.JobEntryEnd1"));
            log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.Result.TotalFiles","" + nbfilestoget));
            log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.Result.TotalFilesPut","" + nbgot));
            log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.Result.TotalFilesError","" + nbrerror));
            log.logDetailed(toString(),Messages.getString("JobSSH2GET.Log.Result.JobEntryEnd2"));
          }
          if (nbrerror == 0)           result.setResult(true);
        }
      }
    }
 catch (    Exception e) {
      result.setNrErrors(nbrerror);
      log.logError(toString(),Messages.getString("JobSSH2GET.Log.Error.ErrorFTP",e.getMessage()));
    }
 finally {
      if (conn != null)       conn.close();
      if (client != null)       client.close();
    }
  }
  return result;
}
