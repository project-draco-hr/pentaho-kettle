{
  meta=(ExcelInputMeta)smi;
  data=(ExcelInputData)sdi;
  if (super.init(smi,sdi)) {
    initErrorHandling();
    initReplayFactory();
    data.files=meta.getFileList(this);
    if (data.files.nrOfFiles() == 0 && data.files.nrOfMissingFiles() > 0 && !meta.isAcceptingFilenames()) {
      logError(BaseMessages.getString(PKG,"ExcelInput.Error.NoFileSpecified"));
      return false;
    }
    if (meta.getEmptyFields().size() > 0) {
      data.maxfilelength=-1;
      for (      FileObject file : data.files.getFiles()) {
        String name=KettleVFS.getFilename(file);
        if (name.length() > data.maxfilelength) {
          data.maxfilelength=name.length();
        }
      }
      data.maxsheetlength=-1;
      if (!meta.readAllSheets()) {
        data.sheetNames=new String[meta.getSheetName().length];
        data.startColumn=new int[meta.getSheetName().length];
        data.startRow=new int[meta.getSheetName().length];
        for (int i=0; i < meta.getSheetName().length; i++) {
          data.sheetNames[i]=meta.getSheetName()[i];
          data.startColumn[i]=meta.getStartColumn()[i];
          data.startRow[i]=meta.getStartRow()[i];
          if (meta.getSheetName()[i].length() > data.maxsheetlength) {
            data.maxsheetlength=meta.getSheetName()[i].length();
          }
        }
      }
 else {
        if (meta.getStartRow().length == 1) {
          data.defaultStartRow=meta.getStartRow()[0];
        }
 else {
          data.defaultStartRow=0;
        }
        if (meta.getStartColumn().length == 1) {
          data.defaultStartColumn=meta.getStartColumn()[0];
        }
 else {
          data.defaultStartColumn=0;
        }
      }
      return true;
    }
 else {
      logError(BaseMessages.getString(PKG,"ExcelInput.Error.NotInputFieldsDefined"));
    }
  }
  return false;
}
