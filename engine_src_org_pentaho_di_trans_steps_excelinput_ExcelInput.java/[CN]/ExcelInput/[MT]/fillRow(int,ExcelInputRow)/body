{
  Object[] r=new Object[data.outputRowMeta.size()];
  boolean errorHandled=false;
  KCell cell=null;
  for (int i=startcolumn; i < excelInputRow.cells.length && i - startcolumn < meta.getField().length; i++) {
    cell=excelInputRow.cells[i];
    int rowcolumn=i - startcolumn;
    if (cell == null) {
      r[rowcolumn]=null;
      continue;
    }
    ValueMetaInterface targetMeta=data.outputRowMeta.getValueMeta(rowcolumn);
    ValueMetaInterface sourceMeta=null;
    try {
      checkType(cell,targetMeta);
    }
 catch (    KettleException ex) {
      if (!meta.isErrorIgnored()) {
        ex=new KettleCellValueException(ex,this.data.sheetnr,this.data.rownr,i,"");
        throw ex;
      }
      if (log.isBasic()) {
        logBasic(BaseMessages.getString(PKG,"ExcelInput.Log.WarningProcessingExcelFile","" + targetMeta,"" + data.filename,ex.getMessage()));
      }
      if (!errorHandled) {
        data.errorHandler.handleLineError(excelInputRow.rownr,excelInputRow.sheetName);
        errorHandled=true;
      }
      if (meta.isErrorLineSkipped()) {
        return null;
      }
    }
    KCellType cellType=cell.getType();
    if (KCellType.BOOLEAN == cellType || KCellType.BOOLEAN_FORMULA == cellType) {
      r[rowcolumn]=cell.getValue();
      sourceMeta=data.valueMetaBoolean;
    }
 else {
      if (KCellType.DATE.equals(cellType) || KCellType.DATE_FORMULA.equals(cellType)) {
        Date date=(Date)cell.getValue();
        long time=date.getTime();
        int offset=TimeZone.getDefault().getOffset(time);
        r[rowcolumn]=new Date(time - offset);
        sourceMeta=data.valueMetaDate;
      }
 else {
        if (KCellType.LABEL == cellType || KCellType.STRING_FORMULA == cellType) {
          String string=(String)cell.getValue();
switch (meta.getField()[rowcolumn].getTrimType()) {
case ExcelInputMeta.TYPE_TRIM_LEFT:
            string=Const.ltrim(string);
          break;
case ExcelInputMeta.TYPE_TRIM_RIGHT:
        string=Const.rtrim(string);
      break;
case ExcelInputMeta.TYPE_TRIM_BOTH:
    string=Const.trim(string);
  break;
default :
break;
}
r[rowcolumn]=string;
sourceMeta=data.valueMetaString;
}
 else {
if (KCellType.NUMBER == cellType || KCellType.NUMBER_FORMULA == cellType) {
r[rowcolumn]=cell.getValue();
sourceMeta=data.valueMetaNumber;
}
 else {
if (log.isDetailed()) {
KCellType ct=cell.getType();
logDetailed(BaseMessages.getString(PKG,"ExcelInput.Log.UnknownType",((ct != null) ? ct.toString() : "null"),cell.getContents()));
}
r[rowcolumn]=null;
}
}
}
}
ExcelInputField field=meta.getField()[rowcolumn];
try {
if (sourceMeta != null && sourceMeta.getType() != targetMeta.getType() && r[rowcolumn] != null) {
ValueMetaInterface sourceMetaCopy=sourceMeta.clone();
sourceMetaCopy.setConversionMask(field.getFormat());
sourceMetaCopy.setGroupingSymbol(field.getGroupSymbol());
sourceMetaCopy.setDecimalSymbol(field.getDecimalSymbol());
sourceMetaCopy.setCurrencySymbol(field.getCurrencySymbol());
switch (targetMeta.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
case ValueMetaInterface.TYPE_INTEGER:
switch (field.getType()) {
case ValueMetaInterface.TYPE_DATE:
ValueMetaInterface valueMetaNumber=new ValueMetaNumber("num");
valueMetaNumber.setConversionMask("#");
Object string=sourceMetaCopy.convertData(valueMetaNumber,r[rowcolumn]);
r[rowcolumn]=targetMeta.convertData(sourceMetaCopy,string);
break;
default :
r[rowcolumn]=targetMeta.convertData(sourceMetaCopy,r[rowcolumn]);
break;
}
break;
default :
r[rowcolumn]=targetMeta.convertData(sourceMetaCopy,r[rowcolumn]);
}
}
}
 catch (KettleException ex) {
if (!meta.isErrorIgnored()) {
ex=new KettleCellValueException(ex,this.data.sheetnr,cell.getRow(),i,field.getName());
throw ex;
}
if (log.isBasic()) {
logBasic(BaseMessages.getString(PKG,"ExcelInput.Log.WarningProcessingExcelFile","" + targetMeta,"" + data.filename,ex.toString()));
}
if (!errorHandled) {
data.errorHandler.handleLineError(excelInputRow.rownr,excelInputRow.sheetName);
errorHandled=true;
}
if (meta.isErrorLineSkipped()) {
return null;
}
 else {
r[rowcolumn]=null;
}
}
}
int rowIndex=meta.getField().length;
if (!Utils.isEmpty(meta.getFileField())) {
r[rowIndex]=data.filename;
rowIndex++;
}
if (!Utils.isEmpty(meta.getSheetField())) {
r[rowIndex]=excelInputRow.sheetName;
rowIndex++;
}
if (!Utils.isEmpty(meta.getSheetRowNumberField())) {
r[rowIndex]=new Long(data.rownr);
rowIndex++;
}
if (!Utils.isEmpty(meta.getRowNumberField())) {
r[rowIndex]=new Long(getLinesWritten() + 1);
rowIndex++;
}
if (!Utils.isEmpty(meta.getShortFileNameField())) {
r[rowIndex]=data.shortFilename;
rowIndex++;
}
if (!Utils.isEmpty(meta.getExtensionField())) {
r[rowIndex]=data.extension;
rowIndex++;
}
if (!Utils.isEmpty(meta.getPathField())) {
r[rowIndex]=data.path;
rowIndex++;
}
if (!Utils.isEmpty(meta.getSizeField())) {
r[rowIndex]=new Long(data.size);
rowIndex++;
}
if (!Utils.isEmpty(meta.isHiddenField())) {
r[rowIndex]=new Boolean(data.hidden);
rowIndex++;
}
if (!Utils.isEmpty(meta.getLastModificationDateField())) {
r[rowIndex]=data.lastModificationDateTime;
rowIndex++;
}
if (!Utils.isEmpty(meta.getUriField())) {
r[rowIndex]=data.uriName;
rowIndex++;
}
if (!Utils.isEmpty(meta.getRootUriField())) {
r[rowIndex]=data.rootUriName;
rowIndex++;
}
return r;
}
