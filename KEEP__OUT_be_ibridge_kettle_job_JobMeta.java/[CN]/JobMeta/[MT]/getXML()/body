{
  Props props=null;
  if (Props.isInitialized())   props=Props.getInstance();
  DatabaseMeta ci=getLogConnection();
  StringBuffer retval=new StringBuffer(500);
  retval.append("<").append(XML_TAG).append(">").append(Const.CR);
  retval.append("  ").append(XMLHandler.addTagValue("name",getName()));
  retval.append("    ").append(XMLHandler.addTagValue("description",description));
  retval.append("    ").append(XMLHandler.addTagValue("extended_description",extended_description));
  retval.append("    ").append(XMLHandler.addTagValue("job_version",job_version));
  if (job_status >= 0) {
    retval.append("    ").append(XMLHandler.addTagValue("job_status",job_status));
  }
  retval.append("  ").append(XMLHandler.addTagValue("directory",directory.getPath()));
  retval.append("  ").append(XMLHandler.addTagValue("created_user",created_user));
  retval.append("  ").append(XMLHandler.addTagValue("created_date",created_date != null ? created_date.getString() : ""));
  retval.append("  ").append(XMLHandler.addTagValue("modified_user",modifiedUser));
  retval.append("  ").append(XMLHandler.addTagValue("modified_date",modifiedDate != null ? modifiedDate.getString() : ""));
  for (int i=0; i < nrDatabases(); i++) {
    DatabaseMeta dbMeta=getDatabase(i);
    if (props != null && props.areOnlyUsedConnectionsSavedToXML()) {
      if (isDatabaseConnectionUsed(dbMeta)) {
        retval.append(dbMeta.getXML());
      }
    }
 else {
      retval.append(dbMeta.getXML());
    }
  }
  retval.append("  ").append(XMLHandler.addTagValue("logconnection",ci == null ? "" : ci.getName()));
  retval.append("  ").append(XMLHandler.addTagValue("logtable",logTable));
  retval.append("   ").append(XMLHandler.addTagValue("use_batchid",useBatchId));
  retval.append("   ").append(XMLHandler.addTagValue("pass_batchid",batchIdPassed));
  retval.append("   ").append(XMLHandler.addTagValue("use_logfield",logfieldUsed));
  retval.append("   ").append(XMLHandler.addTagValue("shared_objects_file",sharedObjectsFile));
  retval.append("  <entries>").append(Const.CR);
  for (int i=0; i < nrJobEntries(); i++) {
    JobEntryCopy jge=getJobEntry(i);
    retval.append(jge.getXML());
  }
  retval.append("  </entries>").append(Const.CR);
  retval.append("  <hops>").append(Const.CR);
  for (int i=0; i < nrJobHops(); i++) {
    JobHopMeta hi=getJobHop(i);
    retval.append(hi.getXML());
  }
  retval.append("  </hops>").append(Const.CR);
  retval.append("  <notepads>").append(Const.CR);
  for (int i=0; i < nrNotes(); i++) {
    NotePadMeta ni=getNote(i);
    retval.append(ni.getXML());
  }
  retval.append("  </notepads>").append(Const.CR);
  retval.append("</").append(XML_TAG).append(">").append(Const.CR);
  return retval.toString();
}
