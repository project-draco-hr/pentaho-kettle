{
  meta=(TableInputMeta)smi;
  data=(TableInputData)sdi;
  if (super.init(smi,sdi)) {
    boolean passed=true;
    if (Const.isEmpty(meta.getSQL())) {
      logError(BaseMessages.getString(PKG,"TableInput.Exception.SQLIsNeeded"));
      passed=false;
    }
    if (meta.getDatabaseMeta() == null) {
      logError(BaseMessages.getString(PKG,"TableInput.Exception.DatabaseConnectionsIsNeeded"));
      passed=false;
    }
    if (!passed) {
      return false;
    }
    data.infoStream=meta.getStepIOMeta().getInfoStreams().get(0);
    if (meta.getDatabaseMeta() == null) {
      logError(BaseMessages.getString(PKG,"TableInput.Init.ConnectionMissing",getStepname()));
      return false;
    }
    data.db=new Database(this,meta.getDatabaseMeta());
    data.db.shareVariablesWith(this);
    data.db.setQueryLimit(Const.toInt(environmentSubstitute(meta.getRowLimit()),0));
    try {
      if (getTransMeta().isUsingUniqueConnections()) {
synchronized (getTrans()) {
          data.db.connect(getTrans().getTransactionId(),getPartitionID());
        }
      }
 else {
        data.db.connect(getPartitionID());
      }
      if (meta.getDatabaseMeta().isRequiringTransactionsOnQueries()) {
        data.db.setCommit(100);
      }
      if (log.isDetailed()) {
        logDetailed("Connected to database...");
      }
      return true;
    }
 catch (    KettleException e) {
      logError("An error occurred, processing will be stopped: " + e.getMessage());
      setErrors(1);
      stopAll();
    }
  }
  return false;
}
