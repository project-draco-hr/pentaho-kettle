{
  int fieldnr;
  Row r=new Row();
  Value value;
  int nrfields=info.getInputFields().length;
  boolean filter=true;
  boolean check_filter=info.hasFilter() && info.getFilterPosition() >= 0 && info.getFilterPosition() < line.length();
  if (check_filter) {
    int from=info.getFilterPosition();
    int to=from + info.getFilterString().length();
    String sub=line.substring(info.getFilterPosition(),to);
    if (!sub.equalsIgnoreCase(info.getFilterString())) {
      filter=false;
      r.setIgnore();
    }
  }
  if (filter) {
    try {
      ArrayList strings=convertLineToStrings(log,line,info);
      for (fieldnr=0; fieldnr < strings.size() && (fieldnr < nrfields || !limit_size); fieldnr++) {
        TextFileInputField f=info.getInputFields()[fieldnr];
        String pol=(String)strings.get(fieldnr);
        String field=fieldnr < nrfields ? f.getName() : "empty" + fieldnr;
        int type=fieldnr < nrfields ? f.getType() : Value.VALUE_TYPE_STRING;
        String format=fieldnr < nrfields ? f.getFormat() : "";
        int length=fieldnr < nrfields ? f.getLength() : -1;
        int precision=fieldnr < nrfields ? f.getPrecision() : -1;
        String group=fieldnr < nrfields ? f.getGroupSymbol() : "";
        String decimal=fieldnr < nrfields ? f.getDecimalSymbol() : "";
        String currency=fieldnr < nrfields ? f.getCurrencySymbol() : "";
        String nullif=fieldnr < nrfields ? f.getNullString() : "";
        int trim_type=fieldnr < nrfields ? f.getTrimType() : TextFileInputMeta.TYPE_TRIM_NONE;
        try {
          value=convertValue(pol,field,type,format,length,precision,group,decimal,currency,nullif,trim_type,ldf,ldfs,ldaf,ldafs);
        }
 catch (        Exception e) {
          throw new KettleException("Couldn't parse field [" + f.getName() + "] with value ["+ pol+ "]",e);
        }
        r.addValue(value);
      }
      if (fieldnr < info.getInputFields().length) {
        for (int i=fieldnr; i < info.getInputFields().length; i++) {
          TextFileInputField f=info.getInputFields()[i];
          value=new Value(f.getName(),f.getType());
          value.setLength(f.getLength(),f.getPrecision());
          value.setNull();
          r.addValue(value);
        }
      }
    }
 catch (    Exception e) {
      throw new KettleException("Error converting line",e);
    }
    if (info.includeFilename() && r != null) {
      Value inc=new Value(info.getFilenameField(),fname);
      inc.setLength(100);
      r.addValue(inc);
    }
    if (info.includeRowNumber() && r != null) {
      Value inc=new Value(info.getRowNumberField(),Value.VALUE_TYPE_INTEGER);
      inc.setValue(linenr);
      inc.setLength(9);
      r.addValue(inc);
    }
  }
  return r;
}
