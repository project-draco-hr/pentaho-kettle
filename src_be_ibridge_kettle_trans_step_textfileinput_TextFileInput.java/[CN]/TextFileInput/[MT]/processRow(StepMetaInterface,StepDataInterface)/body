{
  Row r=null;
  boolean retval=true;
  boolean putrow=false;
  debug="start of readRowOfData";
  if (first) {
    debug="first";
    first=false;
    if (!openNextFile()) {
      closeLastFile();
      setOutputDone();
      return false;
    }
    debug="first repeat fields";
    for (int i=0; i < meta.getInputFields().length; i++) {
      if (meta.getInputFields()[i].isRepeated())       data.nr_repeats++;
    }
  }
 else {
    if (!data.doneReading) {
      int repeats=1;
      if (meta.isLineWrapped())       repeats=meta.getNrWraps() > 0 ? meta.getNrWraps() : repeats;
      for (int i=0; i < repeats && !data.doneReading; i++) {
        debug="get a new line of data";
        String line=getLine(log,data.isr,meta.getFileFormat());
        if (line != null) {
          linesInput++;
          lineNumberInFile++;
          boolean filterOK=true;
          for (int f=0; f < meta.getFilter().length && filterOK; f++) {
            TextFileFilter filter=meta.getFilter()[f];
            if (filter.getFilterString() != null && filter.getFilterString().length() > 0) {
              int from=filter.getFilterPosition();
              if (from >= 0) {
                int to=from + filter.getFilterString().length();
                debug="verify filter : get substring(" + from + ", "+ to+ ") line length="+ line.length();
                if (line.length() >= from && line.length() >= to) {
                  String sub=line.substring(filter.getFilterPosition(),to);
                  if (sub.equalsIgnoreCase(filter.getFilterString())) {
                    filterOK=false;
                  }
                }
              }
 else {
                int idx=line.indexOf(filter.getFilterString());
                if (idx >= 0) {
                  filterOK=false;
                }
              }
              if (!filterOK) {
                if (filter.isFilterLastLine()) {
                  data.doneReading=true;
                }
                repeats++;
              }
            }
          }
          if (filterOK) {
            data.lineBuffer.add(new TextFileLine(line,lineNumberInFile));
          }
        }
 else {
          data.doneReading=true;
        }
      }
    }
  }
  while (data.lineBuffer.size() == 0) {
    debug="empty buffer: open next file";
    if (!openNextFile()) {
      debug="empty buffer: close last file";
      closeLastFile();
      setOutputDone();
      return false;
    }
  }
  debug="take first line of buffer";
  TextFileLine textLine=(TextFileLine)data.lineBuffer.get(0);
  debug="remove first line of buffer";
  data.lineBuffer.remove(0);
  if (meta.isLayoutPaged()) {
    debug="paged layout";
    if (!data.doneWithHeader && data.pageLinesRead == 0) {
      debug="paged layout : header line " + data.headerLinesRead;
      logRowlevel("P-HEADER (" + data.headerLinesRead + ") : "+ textLine.line);
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.getNrHeaderLines()) {
        data.doneWithHeader=true;
      }
    }
 else {
      debug="paged layout : data or footer";
      if (data.pageLinesRead < meta.getNrLinesPerPage()) {
        if (meta.isLineWrapped()) {
          for (int i=0; i < meta.getNrWraps(); i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=((TextFileLine)data.lineBuffer.get(0)).line;
              data.lineBuffer.remove(0);
            }
            textLine.line+=extra;
          }
        }
        debug="paged layout : data line";
        logRowlevel("P-DATA: " + textLine.line);
        data.pageLinesRead++;
        r=convertLineToRow(log,textLine,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1,data.badLineHandler);
        if (r != null)         putrow=true;
      }
 else {
        debug="paged layout : footer line";
        if (meta.hasFooter() && data.footerLinesRead < meta.getNrFooterLines()) {
          logRowlevel("P-FOOTER: " + textLine.line);
          data.footerLinesRead++;
        }
        if (!meta.hasFooter() || data.footerLinesRead >= meta.getNrFooterLines()) {
          debug="paged layout : end of page: restart";
          data.doneWithHeader=false;
          data.headerLinesRead=0;
          data.pageLinesRead=0;
          data.footerLinesRead=0;
          logRowlevel("RESTART PAGE");
        }
      }
    }
  }
 else {
    debug="normal";
    if (!data.doneWithHeader) {
      debug="normal : header line";
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.getNrHeaderLines()) {
        data.doneWithHeader=true;
      }
    }
 else {
      debug="normal : data and footer";
      if (data.doneReading && meta.hasFooter() && data.lineBuffer.size() <= meta.getNrFooterLines()) {
        debug="normal : footer";
        data.lineBuffer.clear();
      }
 else {
        if (meta.isLineWrapped()) {
          for (int i=0; i < meta.getNrWraps(); i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=((TextFileLine)data.lineBuffer.get(0)).line;
              data.lineBuffer.remove(0);
            }
            textLine.line+=extra;
          }
        }
        debug="normal : data";
        r=convertLineToRow(log,textLine,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1,data.badLineHandler);
        if (r != null) {
          putrow=true;
        }
      }
    }
  }
  if (putrow && r != null && !r.isIgnored()) {
    if (data.nr_repeats > 0) {
      debug="repeats";
      if (data.previous_row == null) {
        debug="init repeats";
        data.previous_row=new Row();
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            data.previous_row.addValue(new Value(value));
          }
        }
      }
 else {
        debug="check repeats";
        int repnr=0;
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            if (value.isNull()) {
              Value prev=data.previous_row.getValue(repnr);
              r.removeValue(i);
              r.addValue(i,prev);
            }
 else {
              data.previous_row.removeValue(repnr);
              data.previous_row.addValue(repnr,new Value(value));
            }
            repnr++;
          }
        }
      }
    }
    logRowlevel("Putting row: " + r.toString());
    putRow(r);
  }
  if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0)   logBasic("linenr " + linesInput);
  debug="end of readRowOfData";
  return retval;
}
