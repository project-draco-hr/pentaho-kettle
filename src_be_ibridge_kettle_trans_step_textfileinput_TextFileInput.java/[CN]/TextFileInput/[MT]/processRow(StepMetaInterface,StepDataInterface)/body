{
  Row r=null;
  boolean retval=true;
  boolean putrow=false;
  if (first) {
    if (meta.isAcceptingFilenames()) {
      data.files.getFiles().clear();
      int idx=-1;
      Row fileRow=getRowFrom(meta.getAcceptingStepName());
      while (fileRow != null) {
        if (idx < 0) {
          idx=fileRow.searchValueIndex(meta.getAcceptingField());
          if (idx < 0) {
            logError(Messages.getString("TextFileInput.Log.Error.UnableToFindFilenameField",meta.getAcceptingField()));
            setErrors(1);
            stopAll();
            return false;
          }
        }
        Value fileValue=fileRow.getValue(idx);
        data.files.addFile(new File(fileValue.getString()));
        fileRow=getRowFrom(meta.getAcceptingStepName());
      }
      if (data.files.nrOfFiles() == 0) {
        logBasic(Messages.getString("TextFileInput.Log.Error.NoFilesSpecified"));
        setOutputDone();
        return false;
      }
    }
    handleMissingFiles();
    first=false;
    if (!openNextFile()) {
      closeLastFile();
      setOutputDone();
      return false;
    }
    for (int i=0; i < meta.getInputFields().length; i++) {
      if (meta.getInputFields()[i].isRepeated())       data.nr_repeats++;
    }
  }
 else {
    if (!data.doneReading) {
      int repeats=1;
      if (meta.isLineWrapped())       repeats=meta.getNrWraps() > 0 ? meta.getNrWraps() : repeats;
      for (int i=0; i < repeats && !data.doneReading; i++) {
        String line=getLine(log,data.isr,meta.getFileFormat());
        if (line != null) {
          linesInput++;
          lineNumberInFile++;
          boolean isFilterLastLine=false;
          boolean filterOK=checkFilterRow(line,isFilterLastLine);
          if (filterOK) {
            data.lineBuffer.add(new TextFileLine(line,lineNumberInFile,data.file));
          }
 else {
            if (isFilterLastLine) {
              data.doneReading=true;
            }
            repeats++;
          }
        }
 else {
          data.doneReading=true;
        }
      }
    }
  }
  while (data.lineBuffer.size() == 0) {
    if (!openNextFile()) {
      closeLastFile();
      setOutputDone();
      return false;
    }
  }
  TextFileLine textLine=(TextFileLine)data.lineBuffer.get(0);
  data.lineBuffer.remove(0);
  if (meta.isLayoutPaged()) {
    if (!data.doneWithHeader && data.pageLinesRead == 0) {
      if (log.isRowLevel())       logRowlevel("P-HEADER (" + data.headerLinesRead + ") : "+ textLine.line);
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.getNrHeaderLines()) {
        data.doneWithHeader=true;
      }
    }
 else {
      if (data.pageLinesRead < meta.getNrLinesPerPage()) {
        if (meta.isLineWrapped()) {
          for (int i=0; i < meta.getNrWraps(); i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=((TextFileLine)data.lineBuffer.get(0)).line;
              data.lineBuffer.remove(0);
            }
            textLine.line+=extra;
          }
        }
        if (log.isRowLevel())         logRowlevel("P-DATA: " + textLine.line);
        data.pageLinesRead++;
        r=convertLineToRow(log,textLine,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1,data.dataErrorLineHandler);
        if (r != null)         putrow=true;
      }
 else {
        if (meta.hasFooter() && data.footerLinesRead < meta.getNrFooterLines()) {
          if (log.isRowLevel())           logRowlevel("P-FOOTER: " + textLine.line);
          data.footerLinesRead++;
        }
        if (!meta.hasFooter() || data.footerLinesRead >= meta.getNrFooterLines()) {
          data.doneWithHeader=false;
          data.headerLinesRead=0;
          data.pageLinesRead=0;
          data.footerLinesRead=0;
          if (log.isRowLevel())           logRowlevel("RESTART PAGE");
        }
      }
    }
  }
 else {
    if (!data.doneWithHeader) {
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.getNrHeaderLines()) {
        data.doneWithHeader=true;
      }
    }
 else {
      if (data.doneReading && meta.hasFooter() && data.lineBuffer.size() < meta.getNrFooterLines()) {
        data.lineBuffer.clear();
      }
 else {
        if (meta.isLineWrapped()) {
          for (int i=0; i < meta.getNrWraps(); i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=((TextFileLine)data.lineBuffer.get(0)).line;
              data.lineBuffer.remove(0);
            }
            textLine.line+=extra;
          }
        }
        if (data.filePlayList.isProcessingNeeded(textLine.file,textLine.lineNumber,AbstractFileErrorHandler.NO_PARTS)) {
          r=convertLineToRow(log,textLine,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1,data.dataErrorLineHandler);
          if (r != null) {
            putrow=true;
          }
        }
 else         putrow=false;
      }
    }
  }
  if (putrow && r != null && !r.isIgnored()) {
    if (data.nr_repeats > 0) {
      if (data.previous_row == null) {
        data.previous_row=new Row();
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            data.previous_row.addValue(new Value(value));
          }
        }
      }
 else {
        int repnr=0;
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            if (value.isNull()) {
              Value prev=data.previous_row.getValue(repnr);
              r.removeValue(i);
              r.addValue(i,prev);
            }
 else {
              data.previous_row.removeValue(repnr);
              data.previous_row.addValue(repnr,new Value(value));
            }
            repnr++;
          }
        }
      }
    }
    if (log.isRowLevel())     logRowlevel("Putting row: " + r.toString());
    putRow(r);
    if (linesInput > meta.getRowLimit() && meta.getRowLimit() > 0) {
      closeLastFile();
      setOutputDone();
      return false;
    }
  }
  if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0)   logBasic("linenr " + linesInput);
  return retval;
}
