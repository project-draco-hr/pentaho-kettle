{
  Row r=null;
  boolean retval=true;
  boolean putrow=false;
  debug="start of readRowOfData";
  if (first) {
    debug="first";
    first=false;
    if (!openNextFile()) {
      closeLastFile();
      setOutputDone();
      return false;
    }
    debug="first repeat fields";
    for (int i=0; i < meta.getInputFields().length; i++) {
      if (meta.getInputFields()[i].isRepeated())       data.nr_repeats++;
    }
  }
 else {
    if (!data.doneReading) {
      debug="get a new line of data";
      String line=getLine(log,data.isr,meta.getFileFormat(),meta.isLineWrapped() ? meta.getNrWraps() : 0);
      if (line != null) {
        linesInput++;
        data.lineBuffer.add(line);
      }
    }
  }
  while (data.lineBuffer.size() == 0) {
    debug="empty buffer: open next file";
    if (!openNextFile()) {
      closeLastFile();
      setOutputDone();
      return false;
    }
  }
  debug="take first line of buffer";
  String line=(String)data.lineBuffer.get(0);
  data.lineBuffer.remove(0);
  boolean filterOK=true;
  boolean check_filter=meta.hasFilter() && meta.getFilterPosition() >= 0 && meta.getFilterPosition() < line.length();
  if (check_filter) {
    int from=meta.getFilterPosition();
    int to=from + meta.getFilterString().length();
    String sub=line.substring(meta.getFilterPosition(),to);
    if (sub.equalsIgnoreCase(meta.getFilterString())) {
      filterOK=false;
      if (meta.isFilterLastLine()) {
        closeLastFile();
        setOutputDone();
        return false;
      }
    }
  }
  if (filterOK) {
    if (meta.isLayoutPaged()) {
      debug="paged layout";
      if (!data.doneWithHeader && data.pageLinesRead == 0) {
        debug="paged layout : header line " + data.headerLinesRead;
        logRowlevel("P-HEADER (" + data.headerLinesRead + ") : "+ line);
        data.headerLinesRead++;
        if (data.headerLinesRead >= meta.getNrHeaderLines()) {
          data.doneWithHeader=true;
        }
      }
 else {
        debug="paged layout : data or footer";
        if (data.pageLinesRead < meta.getNrLinesPerPage()) {
          debug="paged layout : data line";
          logRowlevel("P-DATA: " + line);
          data.pageLinesRead++;
          r=convertLineToRow(log,line,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1);
          if (r != null)           putrow=true;
        }
 else {
          debug="paged layout : footer line";
          if (meta.hasFooter() && data.footerLinesRead < meta.getNrFooterLines()) {
            logRowlevel("P-FOOTER: " + line);
            data.footerLinesRead++;
          }
          if (!meta.hasFooter() || data.footerLinesRead >= meta.getNrFooterLines()) {
            debug="paged layout : end of page: restart";
            data.doneWithHeader=false;
            data.headerLinesRead=0;
            data.pageLinesRead=0;
            data.footerLinesRead=0;
            logRowlevel("RESTART PAGE");
          }
        }
      }
    }
 else {
      debug="normal";
      if (!data.doneWithHeader) {
        debug="normal : header line";
        data.headerLinesRead++;
        if (data.headerLinesRead > meta.getNrHeaderLines()) {
          data.doneWithHeader=true;
        }
      }
 else {
        debug="normal : data and footer";
        if (data.doneReading && meta.hasFooter() && data.lineBuffer.size() <= meta.getNrFooterLines()) {
          debug="normal : footer";
          data.lineBuffer.clear();
        }
 else {
          debug="normal : data";
          r=convertLineToRow(log,line,meta,data.df,data.dfs,data.daf,data.dafs,data.filename,linesWritten + 1);
          if (r != null)           putrow=true;
        }
      }
    }
  }
  if (putrow && r != null && !r.isIgnored()) {
    if (data.nr_repeats > 0) {
      debug="repeats";
      if (data.previous_row == null) {
        debug="init repeats";
        data.previous_row=new Row();
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            data.previous_row.addValue(new Value(value));
          }
        }
      }
 else {
        debug="check repeats";
        int repnr=0;
        for (int i=0; i < meta.getInputFields().length; i++) {
          if (meta.getInputFields()[i].isRepeated()) {
            Value value=r.getValue(i);
            if (value.isNull()) {
              Value prev=data.previous_row.getValue(repnr);
              r.removeValue(i);
              r.addValue(i,prev);
            }
 else {
              data.previous_row.removeValue(repnr);
              data.previous_row.addValue(repnr,new Value(value));
            }
            repnr++;
          }
        }
      }
    }
    logRowlevel("Putting row: " + r.toString());
    putRow(r);
  }
  if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0)   logBasic("linenr " + linesInput);
  debug="end of readRowOfData";
  return retval;
}
