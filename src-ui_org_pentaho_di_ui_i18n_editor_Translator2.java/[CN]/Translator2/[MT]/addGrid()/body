{
  Composite composite=new Composite(sashform,SWT.NONE);
  props.setLook(composite);
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  composite.setLayout(formLayout);
  wReload=new Button(composite,SWT.NONE);
  wReload.setText("  &Reload  ");
  wSave=new Button(composite,SWT.NONE);
  wSave.setText("  &Save  ");
  wClose=new Button(composite,SWT.NONE);
  wClose.setText("  &Close  ");
  BaseStepDialog.positionBottomButtons(composite,new Button[]{wReload,wSave,wClose},Const.MARGIN * 3,null);
  int left=35;
  int middle=50;
  wAll=new Button(composite,SWT.CHECK);
  wAll.setText("Show all keys, not just the TODO list");
  props.setLook(wAll);
  FormData fdAll=new FormData();
  fdAll.left=new FormAttachment(0,0);
  fdAll.right=new FormAttachment(left,0);
  fdAll.bottom=new FormAttachment(wClose,-Const.MARGIN);
  wAll.setLayoutData(fdAll);
  Label wlTodo=new Label(composite,SWT.LEFT);
  props.setLook(wlTodo);
  wlTodo.setText("Todo list:");
  FormData fdlTodo=new FormData();
  fdlTodo.left=new FormAttachment(0,0);
  fdlTodo.right=new FormAttachment(left,0);
  fdlTodo.top=new FormAttachment(0,0);
  wlTodo.setLayoutData(fdlTodo);
  wTodo=new List(composite,SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
  FormData fdTodo=new FormData();
  fdTodo.left=new FormAttachment(0,0);
  fdTodo.right=new FormAttachment(left,0);
  fdTodo.top=new FormAttachment(wlTodo,Const.MARGIN);
  fdTodo.bottom=new FormAttachment(wAll,-Const.MARGIN);
  wTodo.setLayoutData(fdTodo);
  Label wlKey=new Label(composite,SWT.RIGHT);
  wlKey.setText("Translation key: ");
  props.setLook(wlKey);
  FormData fdlKey=new FormData();
  fdlKey.left=new FormAttachment(left,Const.MARGIN);
  fdlKey.right=new FormAttachment(middle,0);
  fdlKey.top=new FormAttachment(wlTodo,Const.MARGIN);
  wlKey.setLayoutData(fdlKey);
  wKey=new Text(composite,SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
  props.setLook(wKey);
  FormData fdKey=new FormData();
  fdKey.left=new FormAttachment(middle,Const.MARGIN);
  fdKey.right=new FormAttachment(100,0);
  fdKey.top=new FormAttachment(wlTodo,Const.MARGIN);
  wKey.setLayoutData(fdKey);
  wKey.setEditable(false);
  Label wlMain=new Label(composite,SWT.RIGHT);
  wlMain.setText("Main translation: ");
  props.setLook(wlMain);
  FormData fdlMain=new FormData();
  fdlMain.left=new FormAttachment(left,Const.MARGIN);
  fdlMain.right=new FormAttachment(middle,0);
  fdlMain.top=new FormAttachment(wKey,Const.MARGIN);
  wlMain.setLayoutData(fdlMain);
  wMain=new Text(composite,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
  props.setLook(wMain);
  FormData fdMain=new FormData();
  fdMain.left=new FormAttachment(middle,Const.MARGIN);
  fdMain.right=new FormAttachment(100,0);
  fdMain.top=new FormAttachment(wKey,Const.MARGIN);
  fdMain.bottom=new FormAttachment(wKey,150 + Const.MARGIN);
  wMain.setLayoutData(fdMain);
  wMain.setEditable(false);
  wSearch=new Button(composite,SWT.PUSH);
  wSearch.setText("   &Search   ");
  FormData fdSearch=new FormData();
  fdSearch.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdSearch.top=new FormAttachment(wMain,0,SWT.CENTER);
  wSearch.setLayoutData(fdSearch);
  wNext=new Button(composite,SWT.PUSH);
  wNext.setText("   &Next   ");
  FormData fdNext=new FormData();
  fdNext.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdNext.top=new FormAttachment(wSearch,Const.MARGIN * 2);
  wNext.setLayoutData(fdNext);
  Label wlValue=new Label(composite,SWT.RIGHT);
  wlValue.setText("Translation: ");
  props.setLook(wlValue);
  FormData fdlValue=new FormData();
  fdlValue.left=new FormAttachment(left,Const.MARGIN);
  fdlValue.right=new FormAttachment(middle,0);
  fdlValue.top=new FormAttachment(wMain,Const.MARGIN);
  wlValue.setLayoutData(fdlValue);
  wValue=new Text(composite,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
  props.setLook(wValue);
  FormData fdValue=new FormData();
  fdValue.left=new FormAttachment(middle,Const.MARGIN);
  fdValue.right=new FormAttachment(100,0);
  fdValue.top=new FormAttachment(wMain,Const.MARGIN);
  fdValue.bottom=new FormAttachment(wClose,-Const.MARGIN);
  wValue.setLayoutData(fdValue);
  wValue.setEditable(true);
  wApply=new Button(composite,SWT.PUSH);
  wApply.setText("   &Apply   ");
  FormData fdApply=new FormData();
  fdApply.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdApply.top=new FormAttachment(wValue,0,SWT.CENTER);
  wApply.setLayoutData(fdApply);
  wApply.setEnabled(false);
  wRevert=new Button(composite,SWT.PUSH);
  wRevert.setText("  &Revert   ");
  FormData fdRevert=new FormData();
  fdRevert.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdRevert.top=new FormAttachment(wApply,Const.MARGIN * 2);
  wRevert.setLayoutData(fdRevert);
  wRevert.setEnabled(false);
  wSearchV=new Button(composite,SWT.PUSH);
  wSearchV.setText("   &Search   ");
  FormData fdSearchV=new FormData();
  fdSearchV.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdSearchV.top=new FormAttachment(wRevert,Const.MARGIN * 4);
  wSearchV.setLayoutData(fdSearchV);
  wNextV=new Button(composite,SWT.PUSH);
  wNextV.setText("   &Next   ");
  FormData fdNextV=new FormData();
  fdNextV.right=new FormAttachment(middle,-Const.MARGIN * 2);
  fdNextV.top=new FormAttachment(wSearchV,Const.MARGIN * 2);
  wNextV.setLayoutData(fdNextV);
  wAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshGrid();
    }
  }
);
  wTodo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (wTodo.getSelectionCount() == 1) {
        String key=wTodo.getSelection()[0];
        handleKeySelection(key);
      }
    }
  }
);
  wValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      lastValueChanged=true;
      lastValue=wValue.getText();
      wApply.setEnabled(true);
      wRevert.setEnabled(true);
    }
  }
);
  wApply.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      applyChangedValue();
    }
  }
);
  wRevert.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      revertChangedValue();
    }
  }
);
  wSave.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      java.util.List<MessagesStore> changedMessagesStores=store.getChangedMessagesStores();
      StringBuffer msg=new StringBuffer();
      for (      MessagesStore messagesStore : changedMessagesStores) {
        MessagesStore mainLocaleMessagesStore=store.findMainLocaleMessagesStore(messagesStore.getMessagesPackage());
        String sourceDirectory=mainLocaleMessagesStore.getSourceDirectory(ROOT);
        String filename=messagesStore.getSaveFilename(sourceDirectory);
        messagesStore.setFilename(filename);
        msg.append(filename).append(Const.CR);
      }
      EnterTextDialog dialog=new EnterTextDialog(shell,"Changed files","Below are the changed messages files.  Select 'OK' to save these files to disk.",msg.toString());
      if (dialog.open() != null) {
        try {
          for (          MessagesStore messagesStore : changedMessagesStores) {
            messagesStore.write();
            LogWriter.getInstance().logBasic(toString(),"Saved messages file : " + messagesStore.getFilename());
          }
        }
 catch (        KettleException e) {
          new ErrorDialog(shell,"Error","There was an error saving the changed messages files:",e);
        }
      }
    }
  }
);
  wSearch.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      search(REFERENCE_LOCALE);
    }
  }
);
  wNext.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      searchAgain(REFERENCE_LOCALE);
    }
  }
);
  wSearchV.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      search(selectedLocale);
    }
  }
);
  wNextV.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      searchAgain(selectedLocale);
    }
  }
);
}
