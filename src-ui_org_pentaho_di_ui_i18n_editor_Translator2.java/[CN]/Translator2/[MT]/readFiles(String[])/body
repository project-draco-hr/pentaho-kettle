{
  log.logBasic(toString(),"Scanning source directories and Java source files for i18n keys...");
  try {
    crawler=new MessagesSourceCrawler(directories);
    crawler.setFilesToAvoid(FILES_TO_AVOID);
    crawler.setXulDirectories(new String[]{"ui"});
    crawler.crawl();
    messagesPackages=crawler.getMessagesPackagesList();
    store=new TranslationsStore(localeList,messagesPackages,REFERENCE_LOCALE);
    store.read(directories);
    int nrKeys=0;
    int keyCounts[]=new int[localeList.size()];
    for (int i=0; i < localeList.size(); i++) {
      String locale=localeList.get(i);
      keyCounts[i]=0;
      for (      KeyOccurrence keyOccurrence : crawler.getOccurrences()) {
        if (!keyOccurrence.getKey().startsWith("System.")) {
          String value=store.lookupKeyValue(locale,keyOccurrence.getMessagesPackage(),keyOccurrence.getKey());
          if (!Const.isEmpty(value)) {
            keyCounts[i]++;
          }
          if (locale.equals(REFERENCE_LOCALE)) {
            nrKeys++;
          }
        }
      }
    }
    DecimalFormat df=new DecimalFormat("##0.00");
    double donePct[]=new double[localeList.size()];
    System.out.println("Number of keys found : " + nrKeys);
    for (int i=0; i < localeList.size(); i++) {
      donePct[i]=100 * (double)keyCounts[i] / (double)nrKeys;
      System.out.println(localeList.get(i) + " : " + df.format(donePct[i])+ "% complete  ("+ keyCounts[i]+ ")");
    }
  }
 catch (  Exception e) {
    throw new KettleFileException("Unable to get all files from directory [" + ROOT + "]",e);
  }
}
