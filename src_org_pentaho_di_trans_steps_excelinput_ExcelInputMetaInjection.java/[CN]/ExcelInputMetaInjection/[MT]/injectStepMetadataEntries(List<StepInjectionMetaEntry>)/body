{
  List<ExcelInputField> excelInputFields=new ArrayList<ExcelInputField>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
      if (fieldsEntry == Entry.FIELDS) {
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry != null) {
            if (fieldEntry == Entry.FIELD) {
              ExcelInputField inputField=new ExcelInputField();
              List<StepInjectionMetaEntry> entries=lookField.getDetails();
              for (              StepInjectionMetaEntry entry : entries) {
                Entry metaEntry=Entry.findEntry(entry.getKey());
                if (metaEntry != null) {
                  String value=(String)entry.getValue();
switch (metaEntry) {
case NAME:
                    inputField.setName(value);
                  break;
case TYPE:
                inputField.setType(ValueMeta.getType(value));
              break;
case LENGTH:
            inputField.setLength(Const.toInt(value,-1));
          break;
case PRECISION:
        inputField.setPrecision(Const.toInt(value,-1));
      break;
case CURRENCY:
    inputField.setCurrencySymbol(value);
  break;
case GROUP:
inputField.setGroupSymbol(value);
break;
case DECIMAL:
inputField.setDecimalSymbol(value);
break;
case FORMAT:
inputField.setFormat(value);
break;
case TRIM_TYPE:
inputField.setTrimType(ValueMeta.getTrimTypeByCode(value));
break;
case REPEAT:
inputField.setRepeated(ValueMeta.convertStringToBoolean(value));
break;
}
}
}
excelInputFields.add(inputField);
}
}
}
}
}
}
meta.setField(excelInputFields.toArray(new ExcelInputField[excelInputFields.size()]));
}
