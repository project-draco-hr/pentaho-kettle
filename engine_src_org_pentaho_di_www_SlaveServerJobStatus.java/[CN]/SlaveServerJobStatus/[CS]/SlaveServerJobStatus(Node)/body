{
  this();
  jobName=XMLHandler.getTagValue(jobStatusNode,"jobname");
  id=XMLHandler.getTagValue(jobStatusNode,"id");
  statusDescription=XMLHandler.getTagValue(jobStatusNode,"status_desc");
  errorDescription=XMLHandler.getTagValue(jobStatusNode,"error_desc");
  logDate=XMLHandler.stringToDate(XMLHandler.getTagValue(jobStatusNode,"log_date"));
  firstLoggingLineNr=Const.toInt(XMLHandler.getTagValue(jobStatusNode,"first_log_line_nr"),0);
  lastLoggingLineNr=Const.toInt(XMLHandler.getTagValue(jobStatusNode,"last_log_line_nr"),0);
  String loggingString64=XMLHandler.getTagValue(jobStatusNode,"logging_string");
  if (!Const.isEmpty(loggingString64)) {
    String dataString64=loggingString64.substring("<![CDATA[".length(),loggingString64.length() - "]]>".length());
    try {
      loggingString=HttpUtil.decodeBase64ZippedString(dataString64);
    }
 catch (    IOException e) {
      loggingString="Unable to decode logging from remote server : " + e.toString() + Const.CR+ Const.getStackTracker(e);
    }
  }
 else {
    loggingString="";
  }
  Node resultNode=XMLHandler.getSubNode(jobStatusNode,Result.XML_TAG);
  if (resultNode != null) {
    try {
      result=new Result(resultNode);
    }
 catch (    KettleException e) {
      loggingString+="Unable to serialize result object as XML" + Const.CR + Const.getStackTracker(e)+ Const.CR;
    }
  }
}
