{
  ScriptValuesMod step=StepMockUtil.getStep(ScriptValuesMod.class,ScriptValuesMetaMod.class,"test");
  RowMeta input=new RowMeta();
  input.addValueMeta(new ValueMetaBigNumber("value_int"));
  input.addValueMeta(new ValueMetaBigNumber("value_double"));
  step.setInputRowMeta(input);
  step=spy(step);
  doReturn(new Object[]{BigDecimal.ONE,BigDecimal.ONE}).when(step).getRow();
  ScriptValuesMetaMod meta=new ScriptValuesMetaMod();
  meta.setCompatible(false);
  meta.allocate(2);
  meta.setFieldname(new String[]{"value_int","value_double"});
  meta.setType(new int[]{ValueMetaInterface.TYPE_BIGNUMBER,ValueMetaInterface.TYPE_BIGNUMBER});
  meta.setReplace(new boolean[]{true,true});
  meta.setJSScripts(new ScriptValuesScript[]{new ScriptValuesScript(ScriptValuesScript.TRANSFORM_SCRIPT,"script","value_int = 10.00;\nvalue_double = 10.50")});
  ScriptValuesModData data=new ScriptValuesModData();
  step.init(meta,data);
  Object[] expectedRow={BigDecimal.TEN,new BigDecimal("10.5")};
  Object[] row=TransTestingUtil.execute(step,meta,data,1,false).get(0);
  TransTestingUtil.assertResult(expectedRow,row);
}
