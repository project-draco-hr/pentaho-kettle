{
  meta=(ExcelInputMeta)smi;
  data=(ExcelInputData)sdi;
  if (first) {
    first=false;
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    if (meta.isAcceptingFilenames()) {
      data.files.getFiles().clear();
      int idx=-1;
      RowSet rowSet=findInputRowSet(meta.getAcceptingStepName());
      Object[] fileRow=getRowFrom(rowSet);
      while (fileRow != null) {
        if (idx < 0) {
          idx=rowSet.getRowMeta().indexOfValue(meta.getAcceptingField());
          if (idx < 0) {
            logError(BaseMessages.getString(PKG,"ExcelInput.Error.FilenameFieldNotFound","" + meta.getAcceptingField()));
            setErrors(1);
            stopAll();
            return false;
          }
        }
        String fileValue=rowSet.getRowMeta().getString(fileRow,idx);
        try {
          data.files.addFile(KettleVFS.getFileObject(fileValue));
        }
 catch (        IOException e) {
          throw new KettleException(BaseMessages.getString(PKG,"ExcelInput.Exception.CanNotCreateFileObject",fileValue),e);
        }
        fileRow=getRowFrom(rowSet);
      }
    }
    handleMissingFiles();
  }
  if (data.filenr >= data.files.nrOfFiles()) {
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"ExcelInput.Log.NoMoreFiles","" + data.filenr));
    setOutputDone();
    return false;
  }
  if (meta.getRowLimit() > 0 && data.rownr > meta.getRowLimit()) {
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"ExcelInput.Log.RowLimitReached","" + meta.getRowLimit()));
    setOutputDone();
    return false;
  }
  Object[] r=getRowFromWorkbooks();
  if (r != null) {
    if (data.previousRow != null) {
      for (int i=0; i < meta.getField().length; i++) {
        ValueMetaInterface valueMeta=data.outputRowMeta.getValueMeta(i);
        Object valueData=r[i];
        if (valueMeta.isNull(valueData) && meta.getField()[i].isRepeated()) {
          r[i]=data.previousRow[i];
        }
      }
    }
    data.previousRow=data.outputRowMeta.cloneRow(r);
    putRow(data.outputRowMeta,r);
    return true;
  }
 else {
    return true;
  }
}
