{
  StringBuffer retval=new StringBuffer();
  String fieldname=v.getName();
  int length=v.getLength();
  int precision=v.getPrecision();
  Boolean mode=MonetDBDatabaseMeta.safeModeLocal.get();
  boolean safeMode=mode != null && mode.booleanValue();
  if (add_fieldname) {
    if (safeMode) {
      fieldname=getSafeFieldname(fieldname);
    }
    retval.append(fieldname + " ");
  }
  int type=v.getType();
switch (type) {
case ValueMetaInterface.TYPE_DATE:
    retval.append("TIMESTAMP");
  break;
case ValueMetaInterface.TYPE_BOOLEAN:
if (supportsBooleanDataType()) {
  retval.append("BOOLEAN");
}
 else {
  retval.append("CHAR(1)");
}
break;
case ValueMetaInterface.TYPE_NUMBER:
case ValueMetaInterface.TYPE_INTEGER:
case ValueMetaInterface.TYPE_BIGNUMBER:
if (fieldname.equalsIgnoreCase(tk) || fieldname.equalsIgnoreCase(pk)) {
if (use_autoinc) {
retval.append("SERIAL");
}
 else {
retval.append("BIGINT");
}
}
 else {
if (precision == 0) {
if (length > 9) {
  if (length < 19) {
    retval.append("BIGINT");
  }
 else {
    retval.append("DECIMAL(").append(length).append(")");
  }
}
 else if (type == ValueMetaInterface.TYPE_NUMBER) {
  retval.append("DOUBLE");
}
 else {
  retval.append("BIGINT");
}
}
 else {
if (length > 15) {
  retval.append("DECIMAL(").append(length);
  if (precision > 0)   retval.append(", ").append(precision);
  retval.append(")");
}
 else {
  retval.append("DOUBLE");
}
}
}
break;
case ValueMetaInterface.TYPE_STRING:
if (length >= DatabaseMeta.CLOB_LENGTH) {
retval.append("CLOB");
}
 else {
retval.append("VARCHAR(");
if (length > 0) {
retval.append(length);
}
 else {
if (safeMode) {
retval.append(DEFAULT_VARCHAR_LENGTH);
}
}
retval.append(")");
}
break;
default :
retval.append(" UNKNOWN");
break;
}
if (add_cr) retval.append(Const.CR);
return retval.toString();
}
