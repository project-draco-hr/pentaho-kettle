{
  MailValidationResult result=new MailValidationResult();
  if (!isRegExValid(address)) {
    result.setErrorMessage(Messages.getString("MailValidator.MalformedAddress",address));
    return result;
  }
  int pos=address.indexOf('@');
  if (pos == -1)   return result;
  if (!deepCheck) {
    result.setValide(true);
    return result;
  }
  String domain=address.substring(++pos);
  ArrayList mxList=new ArrayList<String>();
  if (Const.isEmpty(defaultSMTPServer)) {
    try {
      mxList=getMX(domain);
      if (mxList == null || mxList.size() == 0) {
        result.setErrorMessage(Messages.getString("MailValidator.NoMachinesInDomain",domain));
        return result;
      }
    }
 catch (    Exception ex) {
      result.setErrorMessage(Messages.getString("MailValidator.ErrorGettingMachinesInDomain",ex.getMessage()));
      return result;
    }
  }
 else {
    mxList.add(defaultSMTPServer);
  }
  if (log.isDebug())   log.logDebug(className(),Messages.getString("MailValidator.ExchangersFound","" + mxList.size()));
  for (int mx=0; mx < mxList.size() && !basestep.isStopped(); mx++) {
    boolean valid=false;
    BufferedReader rdr=null;
    BufferedWriter wtr=null;
    Socket skt=null;
    try {
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.TryingExchanger",(String)mxList.get(mx)));
      int res;
      skt=new Socket((String)mxList.get(mx),25);
      if (timeout > 0)       skt.setSoTimeout(timeout);
      rdr=new BufferedReader(new InputStreamReader(skt.getInputStream()));
      wtr=new BufferedWriter(new OutputStreamWriter(skt.getOutputStream()));
      res=hear(rdr);
      if (res != 220)       throw new Exception(Messages.getString("MailValidator.InvalidHeader"));
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.SayHello",domain));
      say(wtr,"EHLO " + domain);
      res=hear(rdr);
      if (res != 250)       throw new Exception("Not ESMTP");
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.ServerReplied","" + res));
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.CheckSender",senderAddress));
      say(wtr,"MAIL FROM: <" + senderAddress + ">");
      res=hear(rdr);
      if (res != 250)       throw new Exception(Messages.getString("MailValidator.SenderRejected"));
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.SenderAccepted","" + res));
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.CheckReceiver",address));
      say(wtr,"RCPT TO: <" + address + ">");
      res=hear(rdr);
      say(wtr,"RSET");
      hear(rdr);
      say(wtr,"QUIT");
      hear(rdr);
      if (res != 250)       throw new Exception(Messages.getString("MailValidator.AddressNotValid",address));
      if (log.isDebug())       log.logDebug(className(),Messages.getString("MailValidator.ReceiverAccepted",address,"" + res));
      valid=true;
    }
 catch (    Exception ex) {
      result.setValide(false);
      result.setErrorMessage(ex.getMessage());
    }
 finally {
      if (rdr != null)       try {
        rdr.close();
      }
 catch (      Exception e) {
      }
      ;
      if (wtr != null)       try {
        wtr.close();
      }
 catch (      Exception e) {
      }
      ;
      if (skt != null)       try {
        skt.close();
      }
 catch (      Exception e) {
      }
      ;
      if (valid) {
        result.setValide(true);
        result.setErrorMessage(null);
        if (log.isDebug())         log.logDebug(className(),"=============================================");
        return result;
      }
    }
  }
  if (log.isDebug())   log.logDebug(className(),"=============================================");
  return result;
}
