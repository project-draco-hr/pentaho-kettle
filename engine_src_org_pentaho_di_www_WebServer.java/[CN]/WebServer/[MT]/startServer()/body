{
  server=new Server();
  Constraint constraint=new Constraint();
  constraint.setName(Constraint.__BASIC_AUTH);
  constraint.setRoles(new String[]{Constraint.ANY_ROLE});
  constraint.setAuthenticate(true);
  ConstraintMapping constraintMapping=new ConstraintMapping();
  constraintMapping.setConstraint(constraint);
  constraintMapping.setPathSpec("/*");
  ConstraintSecurityHandler securityHandler=new ConstraintSecurityHandler();
  if (System.getProperty("loginmodulename") != null && System.getProperty("java.security.auth.login.config") != null) {
    JAASLoginService jaasLoginService=new JAASLoginService("Kettle");
    jaasLoginService.setLoginModuleName(System.getProperty("loginmodulename"));
    securityHandler.setLoginService(jaasLoginService);
  }
 else {
    HashLoginService hashLoginService;
    SlaveServer slaveServer=transformationMap.getSlaveServerConfig().getSlaveServer();
    if (!Const.isEmpty(slaveServer.getPassword())) {
      hashLoginService=new HashLoginService("Kettle");
      hashLoginService.putUser(slaveServer.getUsername(),new Password(slaveServer.getPassword()),new String[]{});
    }
 else {
      if (Const.isEmpty(passwordFile)) {
        File homePwdFile=new File(Const.getKettleCartePasswordFile());
        if (homePwdFile.exists()) {
          passwordFile=Const.getKettleCartePasswordFile();
        }
 else {
          passwordFile=Const.getKettleLocalCartePasswordFile();
        }
      }
      hashLoginService=new HashLoginService("Kettle",passwordFile);
    }
    securityHandler.setLoginService(hashLoginService);
  }
  securityHandler.setConstraintMappings(new ConstraintMapping[]{constraintMapping});
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  ServletContextHandler root=new ServletContextHandler(contexts,GetRootServlet.CONTEXT_PATH,ServletContextHandler.SESSIONS);
  GetRootServlet rootServlet=new GetRootServlet();
  rootServlet.setJettyMode(true);
  root.addServlet(new ServletHolder(rootServlet),"/*");
  PluginRegistry pluginRegistry=PluginRegistry.getInstance();
  List<PluginInterface> plugins=pluginRegistry.getPlugins(CartePluginType.class);
  for (  PluginInterface plugin : plugins) {
    CartePluginInterface servlet=(CartePluginInterface)pluginRegistry.loadClass(plugin);
    servlet.setup(transformationMap,jobMap,socketRepository,detections);
    servlet.setJettyMode(true);
    ServletContextHandler servletContext=new ServletContextHandler(contexts,servlet.getContextPath(),ServletContextHandler.SESSIONS);
    ServletHolder servletHolder=new ServletHolder((Servlet)servlet);
    servletContext.addServlet(servletHolder,"/*");
  }
  ServletHolder jerseyServletHolder=new ServletHolder(ServletContainer.class);
  jerseyServletHolder.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
  jerseyServletHolder.setInitParameter("com.sun.jersey.config.property.packages","org.pentaho.di.www.jaxrs");
  root.addServlet(jerseyServletHolder,"/api/*");
  ResourceHandler resourceHandler=new ResourceHandler();
  resourceHandler.setResourceBase("temp");
  HandlerList handlers=new HandlerList();
  handlers.setHandlers(new Handler[]{securityHandler,contexts,resourceHandler});
  server.setHandler(handlers);
  createListeners();
  server.start();
}
