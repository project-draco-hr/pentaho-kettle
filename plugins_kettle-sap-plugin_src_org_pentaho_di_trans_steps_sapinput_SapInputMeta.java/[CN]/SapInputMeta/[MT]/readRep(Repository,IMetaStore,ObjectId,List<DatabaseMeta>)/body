{
  try {
    databaseMeta=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    String functionName=rep.getStepAttributeString(id_step,"function_name");
    String functionDescription=rep.getStepAttributeString(id_step,"function_description");
    String functionGroup=rep.getStepAttributeString(id_step,"function_group");
    String functionApplication=rep.getStepAttributeString(id_step,"function_application");
    String functionHost=rep.getStepAttributeString(id_step,"function_host");
    if (!Utils.isEmpty(functionName)) {
      function=new SAPFunction(functionName,functionDescription,functionGroup,functionApplication,functionHost);
    }
 else {
      function=null;
    }
    int nrParameters=rep.countNrStepAttributes(id_step,"parameter_field_name");
    for (int i=0; i < nrParameters; i++) {
      String fieldName=rep.getStepAttributeString(id_step,i,"parameter_field_name");
      SapType sapType=SapType.findTypeForCode(rep.getStepAttributeString(id_step,i,"parameter_sap_type"));
      String tableName=rep.getStepAttributeString(id_step,i,"parameter_table_name");
      int targetType=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"parameter_target_type"));
      String parameterName=rep.getStepAttributeString(id_step,i,"parameter_name");
      parameters.add(new SapParameter(fieldName,sapType,tableName,parameterName,targetType));
    }
    int nrFields=rep.countNrStepAttributes(id_step,"field_sap_field_name");
    for (int i=0; i < nrFields; i++) {
      String sapFieldName=rep.getStepAttributeString(id_step,i,"field_sap_field_name");
      SapType sapType=SapType.findTypeForCode(rep.getStepAttributeString(id_step,i,"field_sap_type"));
      String tableName=rep.getStepAttributeString(id_step,i,"field_table_name");
      int targetType=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_target_type"));
      String newName=rep.getStepAttributeString(id_step,i,"field_new_name");
      outputFields.add(new SapOutputField(sapFieldName,sapType,tableName,newName,targetType));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
