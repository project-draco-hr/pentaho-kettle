{
  ArrayList<FieldMapping> allFields=data.helper.getDefaultFieldMappings(meta.getModelName());
  ArrayList<Integer> readIdx=new ArrayList<Integer>();
  readSourceFilter=new FilterCollection();
  for (int i=0; i < meta.getKeyLookups().size(); i++) {
    String modelField=meta.getKeyLookups().get(i)[0];
    String comparison=meta.getKeyLookups().get(i)[1];
    String streamField=meta.getKeyLookups().get(i)[2];
    if (streamField != null && streamField.length() > 0 && getInputRowMeta().indexOfValue(streamField) >= 0) {
      readFieldList.add(modelField);
      readIdx.add(getInputRowMeta().indexOfValue(streamField));
      continue;
    }
    FieldMapping fld=null;
    for (int j=0; j < allFields.size(); j++)     if (allFields.get(j).source_field.equals(modelField) && allFields.get(j).source_index <= 0) {
      fld=allFields.get(j);
      break;
    }
    Object[] result=data.helper.formatFilterValue(modelField,comparison,streamField,fld);
    readSourceFilter.add(modelField,result[0].toString(),result[1]);
    this.logBasic("Setting filter: [" + modelField + ","+ result[0].toString()+ ","+ result[1].toString()+ "]");
  }
  readRowIndex=new int[readIdx.size()];
  for (int i=0; i < readRowIndex.length; i++)   readRowIndex[i]=readIdx.get(i);
}
