{
  KettleEnvironment.init();
  String sqlQuery="SELECT Country, SUM(products_sold) as count, SUM(sales_amount) as sales FROM Service GROUP BY Country ORDER BY SUM(sales_amount) DESC";
  SqlTransExecutor executor=new SqlTransExecutor(sqlQuery,getServicesMap());
  final List<RowMetaAndData> rows=new ArrayList<RowMetaAndData>();
  executor.executeQuery(new RowAdapter(){
    @Override public void rowWrittenEvent(    RowMetaInterface rowMeta,    Object[] row) throws KettleStepException {
      rows.add(new RowMetaAndData(rowMeta,row));
    }
  }
);
  executor.waitUntilFinished();
  assertEquals(4,rows.size());
  int rowNr=0;
  assertEquals("Germany",rows.get(rowNr).getString("Country",null));
  assertEquals(76,rows.get(rowNr).getInteger("count",-1));
  assertEquals(12697,Math.round(rows.get(rowNr).getNumber("sales",-1.0)));
  rowNr++;
  assertEquals("Great Britain",rows.get(rowNr).getString("Country",null));
  assertEquals(18,rows.get(rowNr).getInteger("count",-1));
  assertEquals(11657,Math.round(rows.get(rowNr).getNumber("sales",-1.0)));
  rowNr++;
  assertEquals("France",rows.get(rowNr).getString("Country",null));
  assertEquals(24,rows.get(rowNr).getInteger("count",-1));
  assertEquals(2021,Math.round(rows.get(rowNr).getNumber("sales",-1.0)));
  rowNr++;
  assertEquals("Belgium",rows.get(rowNr).getString("Country",null));
  assertEquals(10,rows.get(rowNr).getInteger("count",-1));
  assertEquals(780,Math.round(rows.get(rowNr).getNumber("sales",-1.0)));
}
