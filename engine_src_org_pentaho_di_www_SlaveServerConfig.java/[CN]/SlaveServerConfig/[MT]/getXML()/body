{
  StringBuffer xml=new StringBuffer();
  xml.append(XMLHandler.openTag(XML_TAG));
  for (  SlaveServer slaveServer : masters) {
    xml.append(slaveServer.getXML());
  }
  XMLHandler.addTagValue("report_to_masters",reportingToMasters);
  if (slaveServer != null) {
    xml.append(slaveServer.getXML());
  }
  XMLHandler.addTagValue("joining",joining);
  XMLHandler.addTagValue("max_log_lines",maxLogLines);
  XMLHandler.addTagValue("max_log_timeout_minutes",maxLogTimeoutMinutes);
  XMLHandler.addTagValue("object_timeout_minutes",objectTimeoutMinutes);
  xml.append(XMLHandler.openTag(XML_TAG_SEQUENCES));
  for (  SlaveSequence slaveSequence : slaveSequences) {
    xml.append(XMLHandler.openTag(SlaveSequence.XML_TAG));
    xml.append(slaveSequence.getXML());
    xml.append(XMLHandler.closeTag(SlaveSequence.XML_TAG));
  }
  xml.append(XMLHandler.closeTag(XML_TAG_SEQUENCES));
  if (autoSequence != null) {
    xml.append(XMLHandler.openTag(XML_TAG_AUTOSEQUENCE));
    xml.append(autoSequence.getXML());
    xml.append(XMLHandler.addTagValue(XML_TAG_AUTO_CREATE,automaticCreationAllowed));
    xml.append(XMLHandler.closeTag(XML_TAG_AUTOSEQUENCE));
  }
  xml.append(XMLHandler.openTag(XML_TAG_SERVICES));
  for (  TransDataService service : services) {
    xml.append(XMLHandler.openTag(XML_TAG_SERVICE));
    xml.append(service.getXML());
    xml.append(XMLHandler.closeTag(XML_TAG_SERVICE));
  }
  xml.append(XMLHandler.closeTag(XML_TAG_SERVICES));
  if (repositoryMeta != null) {
    xml.append(XMLHandler.openTag(XML_TAG_REPOSITORY));
    xml.append("  ").append(XMLHandler.addTagValue("id",repositoryMeta.getId()));
    xml.append("  ").append(XMLHandler.addTagValue("username",repositoryUsername));
    xml.append("  ").append(XMLHandler.addTagValue("password",Encr.encryptPasswordIfNotUsingVariables(repositoryPassword)));
    xml.append(XMLHandler.closeTag(XML_TAG_REPOSITORY));
  }
  xml.append(XMLHandler.closeTag(XML_TAG));
  return xml.toString();
}
