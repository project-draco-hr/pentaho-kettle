{
  if (autoSequence == null) {
    return;
  }
  Database database=null;
  try {
    DatabaseMeta databaseMeta=autoSequence.getDatabaseMeta();
    LoggingObjectInterface loggingInterface=new SimpleLoggingObject("auto-sequence",LoggingObjectType.GENERAL,null);
    database=new Database(loggingInterface,databaseMeta);
    database.connect();
    String schemaTable=databaseMeta.getQuotedSchemaTableCombination(autoSequence.getSchemaName(),autoSequence.getTableName());
    String seqField=databaseMeta.quoteField(autoSequence.getSequenceNameField());
    String valueField=databaseMeta.quoteField(autoSequence.getValueField());
    String sql="SELECT " + seqField + ", "+ valueField+ " FROM "+ schemaTable;
    List<Object[]> rows=database.getRows(sql,0);
    RowMetaInterface rowMeta=database.getReturnRowMeta();
    for (    Object[] row : rows) {
      String sequenceName=rowMeta.getString(row,seqField,null);
      if (!Utils.isEmpty(sequenceName)) {
        Long value=rowMeta.getInteger(row,valueField,null);
        if (value != null) {
          SlaveSequence slaveSequence=new SlaveSequence(sequenceName,value,databaseMeta,autoSequence.getSchemaName(),autoSequence.getTableName(),autoSequence.getSequenceNameField(),autoSequence.getValueField());
          slaveSequences.add(slaveSequence);
          LogChannel.GENERAL.logBasic("Automatically created slave sequence '" + slaveSequence.getName() + "' with start value "+ slaveSequence.getStartValue());
        }
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unable to automatically configure slave sequences",e);
  }
 finally {
    if (database != null) {
      database.disconnect();
    }
  }
}
