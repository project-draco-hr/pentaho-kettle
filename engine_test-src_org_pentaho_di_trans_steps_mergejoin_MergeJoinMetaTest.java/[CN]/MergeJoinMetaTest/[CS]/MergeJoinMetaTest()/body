{
  List<String> attributes=Arrays.asList("joinType","keyFields1","keyFields2");
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  Map<String,String> getterMap=new HashMap<String,String>();
  getterMap.put("joinType","getJoinType");
  getterMap.put("keyFields1","getKeyFields1");
  getterMap.put("keyFields2","getKeyFields2");
  Map<String,String> setterMap=new HashMap<String,String>();
  setterMap.put("joinType","setJoinType");
  setterMap.put("keyFields1","setKeyFields1");
  setterMap.put("keyFields2","setKeyFields2");
  this.loadSaveTester=new LoadSaveTester(MergeJoinMeta.class,attributes,getterMap,setterMap,attrValidatorMap,typeValidatorMap);
  FieldLoadSaveValidatorFactory validatorFactory=loadSaveTester.getFieldLoadSaveValidatorFactory();
  FieldLoadSaveValidator<MergeJoinMeta> targetValidator=new FieldLoadSaveValidator<MergeJoinMeta>(){
    @Override public MergeJoinMeta getTestObject(){
      return new MergeJoinMeta(){
{
          setJoinType(join_types[0]);
          setKeyFields1(new String[]{"field1","field2"});
          setKeyFields2(new String[]{"field1","field3"});
        }
      }
;
    }
    @Override public boolean validateTestObject(    MergeJoinMeta testObject,    Object actual){
      return testObject.getJoinType().equals(((MergeJoinMeta)actual).getJoinType()) && Arrays.equals(testObject.getKeyFields1(),((MergeJoinMeta)actual).getKeyFields1()) && Arrays.equals(testObject.getKeyFields2(),((MergeJoinMeta)actual).getKeyFields2());
    }
  }
;
  validatorFactory.registerValidator(validatorFactory.getName(MergeJoinMeta.class),targetValidator);
}
