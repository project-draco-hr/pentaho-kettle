{
  Row lu;
  debug="Start of deleteValues";
  if (first) {
    debug="first run, initialize";
    first=false;
    data.dbupd.prepareDelete(meta.getTableName(),meta.getKeyLookup(),meta.getKeyCondition());
    debug="first run, lookup values, field positions, etc.";
    logDetailed("Checking row: " + row.toString());
    data.keynrs=new int[meta.getKeyStream().length];
    data.keynrs2=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException("Field [" + meta.getKeyStream()[i] + "] is required and couldn't be found!");
      }
      data.keynrs2[i]=row.searchValueIndex(meta.getKeyStream2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException("Field [" + meta.getKeyStream2()[i] + "] is required and couldn't be found!");
      }
      logDebug("Field [" + meta.getKeyStream()[i] + "] has nr. "+ data.keynrs[i]);
    }
  }
  lu=new Row();
  for (int i=0; i < meta.getKeyStream().length; i++) {
    if (data.keynrs[i] >= 0) {
      lu.addValue(row.getValue(data.keynrs[i]));
    }
    if (data.keynrs2[i] >= 0) {
      lu.addValue(row.getValue(data.keynrs2[i]));
    }
  }
  debug="setValues()";
  data.dbupd.setValuesUpdate(lu);
  logDebug("Values set for delete: " + lu.toString() + ", input row: "+ row);
  debug="getLookup()";
  data.dbupd.updateRow();
  linesUpdated++;
}
