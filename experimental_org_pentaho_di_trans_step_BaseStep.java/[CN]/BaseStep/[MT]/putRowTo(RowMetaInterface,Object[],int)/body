{
  int sleeptime;
  if (previewSize > 0 && previewBuffer.size() < previewSize) {
    try {
      previewBuffer.add(rowMeta.cloneRow(row));
    }
 catch (    KettleValueException e) {
      throw new KettleStepException("Unable to clone row while adding rows to the preview buffer",e);
    }
  }
  for (int i=0; i < rowListeners.size(); i++) {
    RowListener rowListener=(RowListener)rowListeners.get(i);
    rowListener.rowWrittenEvent(row);
  }
  if (terminator && terminator_rows != null) {
    try {
      terminator_rows.add(rowMeta.cloneRow(row));
    }
 catch (    KettleValueException e) {
      throw new KettleStepException("Unable to clone row while adding rows to the terminator buffer",e);
    }
  }
  if (outputRowSets.isEmpty())   return;
  RowSet rs=(RowSet)outputRowSets.get(output_rowset_nr);
  sleeptime=transMeta.getSleepTimeFull();
  while (rs.isFull() && !stopped) {
    try {
      if (sleeptime > 0) {
        sleep(0,sleeptime);
      }
 else {
        super.notifyAll();
      }
    }
 catch (    Exception e) {
      logError(Messages.getString("BaseStep.Log.ErrorInThreadSleeping") + e.toString());
      setErrors(1);
      stopAll();
      return;
    }
    nrPutSleeps+=sleeptime;
    if (sleeptime < 100)     sleeptime=((int)(sleeptime * 1.2)) + 1;
 else     sleeptime=100;
  }
  if (stopped) {
    if (log.isDebug())     logDebug(Messages.getString("BaseStep.Log.StopPuttingARow"));
    stopAll();
    return;
  }
  rs.putRow(rowMeta,row);
  linesWritten++;
}
