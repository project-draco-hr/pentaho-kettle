{
  if (meta.getName()[i] != null && meta.getName()[i].length() > 0) {
    try {
      if (result != null) {
        String classType=result.getClass().getName();
switch (meta.getType()[i]) {
case ValueMetaInterface.TYPE_NUMBER:
          if (classType.equalsIgnoreCase("org.mozilla.javascript.Undefined")) {
            return null;
          }
 else           if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeJavaObject")) {
            String string=Context.toString(result);
            return new Double(Double.parseDouble(string));
          }
 else {
            Number nb=(Number)result;
            return new Double(nb.doubleValue());
          }
case ValueMetaInterface.TYPE_INTEGER:
        if (classType.equalsIgnoreCase("java.lang.Byte")) {
          return new Long(((java.lang.Byte)result).longValue());
        }
 else         if (classType.equalsIgnoreCase("java.lang.Short")) {
          return new Long(((Short)result).longValue());
        }
 else         if (classType.equalsIgnoreCase("java.lang.Integer")) {
          return new Long(((Integer)result).longValue());
        }
 else         if (classType.equalsIgnoreCase("java.lang.Long")) {
          return new Long(((Long)result).longValue());
        }
 else         if (classType.equalsIgnoreCase("java.lang.Double")) {
          return new Long(((Double)result).longValue());
        }
 else         if (classType.equalsIgnoreCase("java.lang.String")) {
          return new Long((new Long((String)result)).longValue());
        }
 else         if (classType.equalsIgnoreCase("org.mozilla.javascript.Undefined")) {
          return null;
        }
 else         if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeJavaObject")) {
          String string=Context.toString(result);
          return new Long(Long.parseLong(string));
        }
 else {
          return new Long((long)((Long)result).longValue());
        }
case ValueMetaInterface.TYPE_STRING:
      if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeJavaObject") || classType.equalsIgnoreCase("org.mozilla.javascript.Undefined")) {
        try {
          return Context.toString(result);
        }
 catch (        Exception ev) {
          String string=(String)Context.jsToJava(result,String.class);
          return string;
        }
      }
 else {
        String string=(String)Context.jsToJava(result,String.class);
        return string;
      }
case ValueMetaInterface.TYPE_DATE:
    double dbl=0;
  if (classType.equalsIgnoreCase("org.mozilla.javascript.Undefined")) {
    return null;
  }
 else {
    if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeDate")) {
      dbl=Context.toNumber(result);
    }
 else     if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeJavaObject") || classType.equalsIgnoreCase("java.util.Date")) {
      try {
        Date dat=(Date)Context.jsToJava(result,java.util.Date.class);
        dbl=dat.getTime();
      }
 catch (      Exception e) {
        throw new KettleValueException("Can't convert a string to a date");
      }
    }
 else     if (classType.equalsIgnoreCase("java.lang.Double")) {
      dbl=((Double)result).doubleValue();
    }
 else {
      String string=(String)Context.jsToJava(result,String.class);
      dbl=Double.parseDouble(string);
    }
    long lng=Math.round(dbl);
    Date dat=new Date(lng);
    return dat;
  }
case ValueMetaInterface.TYPE_BOOLEAN:
return (Boolean)result;
case ValueMetaInterface.TYPE_BIGNUMBER:
if (classType.equalsIgnoreCase("org.mozilla.javascript.Undefined")) {
return null;
}
 else if (classType.equalsIgnoreCase("org.mozilla.javascript.NativeJavaObject")) {
try {
  BigDecimal bd=(BigDecimal)Context.jsToJava(result,BigDecimal.class);
  return bd;
}
 catch (Exception e) {
  String string=(String)Context.jsToJava(result,String.class);
  return new BigDecimal(string);
}
}
 else if (classType.equalsIgnoreCase("java.lang.Byte")) {
return new BigDecimal(((java.lang.Byte)result).longValue());
}
 else if (classType.equalsIgnoreCase("java.lang.Short")) {
return new BigDecimal(((Short)result).longValue());
}
 else if (classType.equalsIgnoreCase("java.lang.Integer")) {
return new BigDecimal(((Integer)result).longValue());
}
 else if (classType.equalsIgnoreCase("java.lang.Long")) {
return new BigDecimal(((Long)result).longValue());
}
 else if (classType.equalsIgnoreCase("java.lang.Double")) {
return new BigDecimal(((Double)result).longValue());
}
 else if (classType.equalsIgnoreCase("java.lang.String")) {
return new BigDecimal((new Long((String)result)).longValue());
}
 else {
throw new RuntimeException("JavaScript conversion to BigNumber not implemented for " + classType.toString());
}
case ValueMetaInterface.TYPE_BINARY:
{
return (byte[])result;
}
default :
throw new RuntimeException("JavaScript conversion not implemented for type" + meta.getType()[i]);
}
}
 else {
return null;
}
}
 catch (Exception e) {
throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.JavascriptError"),e);
}
}
 else {
throw new KettleValueException("No name was specified for result value #" + (i + 1));
}
}
