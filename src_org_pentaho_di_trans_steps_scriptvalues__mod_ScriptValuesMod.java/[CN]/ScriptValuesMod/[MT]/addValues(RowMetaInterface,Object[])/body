{
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    determineUsedFields(rowMeta);
    data.replaceIndex=new int[meta.getName().length];
    for (int i=0; i < meta.getName().length; i++) {
      if (meta.getReplace()[i]) {
        data.replaceIndex[i]=rowMeta.indexOfValue(meta.getName()[i]);
        if (data.replaceIndex[i] < 0) {
          if (Const.isEmpty(meta.getName()[i])) {
            throw new KettleStepException(Messages.getString("ScriptValuesMetaMod.Exception.FieldToReplaceNotFound",meta.getName()[i]));
          }
          data.replaceIndex[i]=rowMeta.indexOfValue(meta.getRename()[i]);
          if (data.replaceIndex[i] < 0) {
            throw new KettleStepException(Messages.getString("ScriptValuesMetaMod.Exception.FieldToReplaceNotFound",meta.getRename()[i]));
          }
        }
      }
 else {
        data.replaceIndex[i]=-1;
      }
    }
    data.cx=ContextFactory.getGlobal().enterContext();
    data.cx.setOptimizationLevel(9);
    data.scope=data.cx.initStandardObjects(null,false);
    bFirstRun=true;
    Scriptable jsvalue=Context.toObject(this,data.scope);
    data.scope.put("_step_",data.scope,jsvalue);
    for (int i=0; i < meta.getNumberOfJSScripts(); i++) {
      Scriptable jsR=Context.toObject(jsScripts[i].getScript(),data.scope);
      data.scope.put(jsScripts[i].getScriptName(),data.scope,jsR);
    }
    data.scope.put("_TransformationName_",data.scope,this.getName());
    try {
      if (meta.isCompatible()) {
        Row v2Row=RowMeta.createOriginalRow(rowMeta,row);
        Scriptable jsV2Row=Context.toObject(v2Row,data.scope);
        data.scope.put("row",data.scope,jsV2Row);
      }
 else {
        Scriptable jsrow=Context.toObject(row,data.scope);
        data.scope.put("row",data.scope,jsrow);
      }
      for (int i=0; i < data.fields_used.length; i++) {
        ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.fields_used[i]);
        Object valueData=row[data.fields_used[i]];
        if (meta.isCompatible()) {
          data.values_used[i]=valueMeta.createOriginalValue(valueData);
          Scriptable jsarg=Context.toObject(data.values_used[i],data.scope);
          data.scope.put(valueMeta.getName(),data.scope,jsarg);
        }
 else {
          Object normalStorageValueData=valueMeta.convertToNormalStorageType(valueData);
          Scriptable jsarg;
          if (normalStorageValueData != null) {
            jsarg=Context.toObject(normalStorageValueData,data.scope);
          }
 else {
            jsarg=null;
          }
          data.scope.put(valueMeta.getName(),data.scope,jsarg);
        }
      }
      Scriptable jsrowMeta=Context.toObject(rowMeta,data.scope);
      data.scope.put("rowMeta",data.scope,jsrowMeta);
      try {
        if (meta.getAddClasses() != null) {
          for (int i=0; i < meta.getAddClasses().length; i++) {
            Object jsOut=Context.javaToJS(meta.getAddClasses()[i].getAddObject(),data.scope);
            ScriptableObject.putProperty(data.scope,meta.getAddClasses()[i].getJSName(),jsOut);
          }
        }
      }
 catch (      Exception e) {
        throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.CouldNotAttachAdditionalScripts"),e);
      }
      try {
        Context.javaToJS(ScriptValuesAddedFunctions.class,data.scope);
        ((ScriptableObject)data.scope).defineFunctionProperties(ScriptValuesAddedFunctions.jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
      }
 catch (      Exception ex) {
        throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.CouldNotAddDefaultFunctions"),ex);
      }
      ;
      try {
        data.scope.put("SKIP_TRANSFORMATION",data.scope,Integer.valueOf(SKIP_TRANSFORMATION));
        data.scope.put("ABORT_TRANSFORMATION",data.scope,Integer.valueOf(ABORT_TRANSFORMATION));
        data.scope.put("ERROR_TRANSFORMATION",data.scope,Integer.valueOf(ERROR_TRANSFORMATION));
        data.scope.put("CONTINUE_TRANSFORMATION",data.scope,Integer.valueOf(CONTINUE_TRANSFORMATION));
      }
 catch (      Exception ex) {
        throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.CouldNotAddDefaultConstants"),ex);
      }
      ;
      try {
        if (strStartScript != null && strStartScript.length() > 0) {
          Script startScript=data.cx.compileString(strStartScript,"trans_Start",1,null);
          startScript.exec(data.cx,data.scope);
          if (log.isDetailed())           logDetailed(("Start Script found!"));
        }
 else {
          if (log.isDetailed())           logDetailed(("No starting Script found!"));
        }
      }
 catch (      Exception es) {
        throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.ErrorProcessingStartScript"),es);
      }
      data.script=data.cx.compileString(strTransformScript,"script",1,null);
    }
 catch (    Exception e) {
      throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.CouldNotCompileJavascript"),e);
    }
  }
  Object[] outputRow=RowDataUtil.resizeArray(row,data.outputRowMeta.size());
  int outputIndex=rowMeta.size();
  final Map<Integer,Value> usedRowValues;
  if (meta.isCompatible()) {
    usedRowValues=new Hashtable<Integer,Value>();
  }
 else {
    usedRowValues=null;
  }
  try {
    try {
      if (meta.isCompatible()) {
        Row v2Row=RowMeta.createOriginalRow(rowMeta,row);
        Scriptable jsV2Row=Context.toObject(v2Row,data.scope);
        data.scope.put("row",data.scope,jsV2Row);
        v2Row.getUsedValueListeners().add(new ValueUsedListener(){
          public void valueIsUsed(          int index,          Value value){
            usedRowValues.put(index,value);
          }
        }
);
      }
 else {
        Scriptable jsrow=Context.toObject(row,data.scope);
        data.scope.put("row",data.scope,jsrow);
      }
      for (int i=0; i < data.fields_used.length; i++) {
        ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.fields_used[i]);
        Object valueData=row[data.fields_used[i]];
        if (meta.isCompatible()) {
          data.values_used[i]=valueMeta.createOriginalValue(valueData);
          Scriptable jsarg=Context.toObject(data.values_used[i],data.scope);
          data.scope.put(valueMeta.getName(),data.scope,jsarg);
        }
 else {
          Object normalStorageValueData=valueMeta.convertToNormalStorageType(valueData);
          Scriptable jsarg;
          if (normalStorageValueData != null) {
            jsarg=Context.toObject(normalStorageValueData,data.scope);
          }
 else {
            jsarg=null;
          }
          data.scope.put(valueMeta.getName(),data.scope,jsarg);
        }
      }
      Scriptable jsrowMeta=Context.toObject(rowMeta,data.scope);
      data.scope.put("rowMeta",data.scope,jsrowMeta);
    }
 catch (    Exception e) {
      throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.UnexpectedeError"),e);
    }
    data.script.exec(data.cx,data.scope);
    if (bFirstRun) {
      bFirstRun=false;
      Object tran_stat=data.scope.get("trans_Status",data.scope);
      if (tran_stat != ScriptableObject.NOT_FOUND) {
        bWithTransStat=true;
        if (log.isDetailed())         logDetailed(("tran_Status found. Checking transformation status while script execution."));
      }
 else {
        if (log.isDetailed())         logDetailed(("No tran_Status found. Transformation status checking not available."));
        bWithTransStat=false;
      }
    }
    if (bWithTransStat) {
      iTranStat=(int)Context.toNumber(data.scope.get("trans_Status",data.scope));
    }
 else {
      iTranStat=CONTINUE_TRANSFORMATION;
    }
    if (iTranStat == CONTINUE_TRANSFORMATION) {
      bRC=true;
      for (int i=0; i < meta.getName().length; i++) {
        Object result=data.scope.get(meta.getName()[i],data.scope);
        Object valueData=getValueFromJScript(result,i);
        if (data.replaceIndex[i] < 0) {
          outputRow[outputIndex++]=valueData;
        }
 else {
          outputRow[data.replaceIndex[i]]=valueData;
        }
      }
      if (meta.isCompatible()) {
        for (int i=0; i < data.values_used.length; i++) {
          ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.fields_used[i]);
          outputRow[data.fields_used[i]]=valueMeta.getValueData(data.values_used[i]);
        }
        for (        Integer index : usedRowValues.keySet()) {
          Value value=usedRowValues.get(index);
          ValueMetaInterface valueMeta=rowMeta.getValueMeta(index);
          outputRow[index]=valueMeta.getValueData(value);
        }
      }
      putRow(data.outputRowMeta,outputRow);
    }
 else {
switch (iTranStat) {
case SKIP_TRANSFORMATION:
        bRC=true;
      break;
case ABORT_TRANSFORMATION:
    if (data.cx != null)     Context.exit();
  stopAll();
setOutputDone();
bRC=false;
break;
case ERROR_TRANSFORMATION:
if (data.cx != null) Context.exit();
setErrors(1);
stopAll();
bRC=false;
break;
}
}
}
 catch (Exception e) {
throw new KettleValueException(Messages.getString("ScriptValuesMod.Log.JavascriptError"),e);
}
return bRC;
}
