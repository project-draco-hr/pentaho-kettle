{
  Object[] outputRowData=buildEmptyRow();
  try {
    data.nodenr++;
    if (row != null)     outputRowData=row.clone();
    for (int i=0; i < data.nrInputFields; i++) {
      GetXMLDataField xmlDataField=meta.getInputFields()[i];
      String XPathValue=xmlDataField.getXPath();
      if (meta.isuseToken()) {
        XPathValue=substituteToken(XPathValue,outputRowData);
        if (isDetailed())         logDetailed(toString(),XPathValue);
      }
      String nodevalue=null;
      if (meta.isNamespaceAware()) {
        XPath xpathField=node.createXPath(addNSPrefix(XPathValue,data.PathValue));
        xpathField.setNamespaceURIs(data.NAMESPACE);
        nodevalue=xpathField.valueOf(node);
      }
 else {
        nodevalue=node.valueOf(XPathValue);
      }
switch (xmlDataField.getTrimType()) {
case GetXMLDataField.TYPE_TRIM_LEFT:
        nodevalue=Const.ltrim(nodevalue);
      break;
case GetXMLDataField.TYPE_TRIM_RIGHT:
    nodevalue=Const.rtrim(nodevalue);
  break;
case GetXMLDataField.TYPE_TRIM_BOTH:
nodevalue=Const.trim(nodevalue);
break;
default :
break;
}
if (meta.isInFields()) {
outputRowData=RowDataUtil.addValueData(outputRowData,data.totalpreviousfields + i,nodevalue);
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(data.totalpreviousfields + i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(data.totalpreviousfields + i);
outputRowData[data.totalpreviousfields + i]=targetValueMeta.convertData(sourceValueMeta,nodevalue);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(nodevalue)) {
outputRowData[data.totalpreviousfields + i]=data.previousRow[data.totalpreviousfields + i];
}
}
}
int rowIndex=data.nrInputFields;
if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
outputRowData[rowIndex++]=data.filename;
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[rowIndex++]=new Long(data.rownr);
}
if (meta.getShortFileNameField() != null && meta.getShortFileNameField().length() > 0) {
outputRowData[rowIndex++]=data.shortFilename;
}
if (meta.getExtensionField() != null && meta.getExtensionField().length() > 0) {
outputRowData[rowIndex++]=data.extension;
}
if (meta.getPathField() != null && meta.getPathField().length() > 0) {
outputRowData[rowIndex++]=data.path;
}
if (meta.getSizeField() != null && meta.getSizeField().length() > 0) {
outputRowData[rowIndex++]=new Long(data.size);
}
if (meta.isHiddenField() != null && meta.isHiddenField().length() > 0) {
outputRowData[rowIndex++]=new Boolean(data.path);
}
if (meta.getLastModificationDateField() != null && meta.getLastModificationDateField().length() > 0) {
outputRowData[rowIndex++]=data.lastModificationDateTime;
}
if (meta.getUriField() != null && meta.getUriField().length() > 0) {
outputRowData[rowIndex++]=data.uriName;
}
if (meta.getRootUriField() != null && meta.getRootUriField().length() > 0) {
outputRowData[rowIndex++]=data.rootUriName;
}
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : (Object[])irow.cloneRow(outputRowData);
}
 catch (Exception e) {
if (getStepMeta().isDoingErrorHandling()) {
putError(data.outputRowMeta,outputRowData,1,e.toString(),null,"GetXMLData001");
data.errorInRowButContinue=true;
return null;
}
 else {
logError(e.toString());
throw new KettleException(e.toString());
}
}
return outputRowData;
}
