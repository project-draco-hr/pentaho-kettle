{
  this();
  executingLocally="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"exec_local"));
  executingRemotely="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"exec_remote"));
  Node remoteHostNode=XMLHandler.getSubNode(trecNode,SlaveServer.XML_TAG);
  if (remoteHostNode != null) {
    remoteServer=new SlaveServer(remoteHostNode);
  }
  passingExport="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"pass_export"));
  executingClustered="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"exec_cluster"));
  clusterPosting="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"cluster_post"));
  clusterPreparing="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"cluster_prepare"));
  clusterStarting="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"cluster_start"));
  clusterShowingTransformation="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"cluster_show_trans"));
  Node varsNode=XMLHandler.getSubNode(trecNode,"variables");
  int nrVariables=XMLHandler.countNodes(varsNode,"variable");
  for (int i=0; i < nrVariables; i++) {
    Node argNode=XMLHandler.getSubNodeByNr(varsNode,"variable",i);
    String name=XMLHandler.getTagValue(argNode,"name");
    String value=XMLHandler.getTagValue(argNode,"value");
    if (!Const.isEmpty(name)) {
      variables.put(name,Const.NVL(value,""));
    }
  }
  Node argsNode=XMLHandler.getSubNode(trecNode,"arguments");
  int nrArguments=XMLHandler.countNodes(argsNode,"argument");
  for (int i=0; i < nrArguments; i++) {
    Node argNode=XMLHandler.getSubNodeByNr(argsNode,"argument",i);
    String name=XMLHandler.getTagValue(argNode,"name");
    String value=XMLHandler.getTagValue(argNode,"value");
    if (!Const.isEmpty(name) && !Const.isEmpty(value)) {
      arguments.put(name,value);
    }
  }
  Node parmsNode=XMLHandler.getSubNode(trecNode,"parameters");
  int nrParams=XMLHandler.countNodes(parmsNode,"parameter");
  for (int i=0; i < nrParams; i++) {
    Node parmNode=XMLHandler.getSubNodeByNr(parmsNode,"parameter",i);
    String name=XMLHandler.getTagValue(parmNode,"name");
    String value=XMLHandler.getTagValue(parmNode,"value");
    if (!Const.isEmpty(name)) {
      params.put(name,value);
    }
  }
  replayDate=XMLHandler.stringToDate(XMLHandler.getTagValue(trecNode,"replay_date"));
  safeModeEnabled="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"safe_mode"));
  logLevel=LogWriter.getLogLevel(XMLHandler.getTagValue(trecNode,"log_level"));
  clearingLog="Y".equalsIgnoreCase(XMLHandler.getTagValue(trecNode,"clear_log"));
  Node resultNode=XMLHandler.getSubNode(trecNode,Result.XML_TAG);
  if (resultNode != null) {
    try {
      previousResult=new Result(resultNode);
    }
 catch (    IOException e) {
      LogWriter.getInstance().logError("Job execution configuration","Unable to hydrate previous result",e);
    }
  }
  Node repNode=XMLHandler.getSubNode(trecNode,"repository");
  if (repNode != null) {
    String repositoryName=XMLHandler.getTagValue(repNode,"name");
    String username=XMLHandler.getTagValue(repNode,"login");
    String password=Encr.decryptPassword(XMLHandler.getTagValue(repNode,"password"));
    RepositoriesMeta repositoriesMeta=new RepositoriesMeta();
    try {
      repositoriesMeta.readData();
    }
 catch (    Exception e) {
      throw new KettleException("Unable to get a list of repositories to locate repository '" + repositoryName + "'");
    }
    RepositoryMeta repositoryMeta=repositoriesMeta.findRepository(repositoryName);
    if (repositoryMeta == null) {
      throw new KettleException("I couldn't find the repository with name '" + repositoryName + "'");
    }
    Repository rep=RepositoryLoader.createRepository(repositoryMeta,null);
    try {
      rep.connect("Job execution configuration");
    }
 catch (    Exception e) {
      throw new KettleException("Unable to connect to the repository with name '" + repositoryName + "'");
    }
    UserInfo userInfo=rep.loadUserInfo(username,password);
    if (userInfo.getObjectId() == null) {
      rep.disconnect();
      throw new KettleException("Unable to verify username '" + username + "' credentials for the repository with name '"+ repositoryName+ "'");
    }
  }
}
