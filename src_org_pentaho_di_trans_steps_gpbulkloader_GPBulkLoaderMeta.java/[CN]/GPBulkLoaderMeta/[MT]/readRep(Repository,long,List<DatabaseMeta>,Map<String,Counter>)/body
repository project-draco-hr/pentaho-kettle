{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    databaseMeta=DatabaseMeta.findDatabase(databases,id_connection);
    maxErrors=(int)rep.getStepAttributeInteger(id_step,"errors");
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    loadMethod=rep.getStepAttributeString(id_step,"load_method");
    loadAction=rep.getStepAttributeString(id_step,"load_action");
    PsqlPath=rep.getStepAttributeString(id_step,"PsqlPath");
    controlFile=rep.getStepAttributeString(id_step,"control_file");
    dataFile=rep.getStepAttributeString(id_step,"data_file");
    logFile=rep.getStepAttributeString(id_step,"log_file");
    eraseFiles=rep.getStepAttributeBoolean(id_step,"erase_files");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    dbNameOverride=rep.getStepAttributeString(id_step,"dbname_override");
    int nrvalues=rep.countNrStepAttributes(id_step,"stream_name");
    allocate(nrvalues);
    for (int i=0; i < nrvalues; i++) {
      fieldTable[i]=rep.getStepAttributeString(id_step,i,"stream_name");
      fieldStream[i]=rep.getStepAttributeString(id_step,i,"field_name");
      dateMask[i]=rep.getStepAttributeString(id_step,i,"date_mask");
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("GPBulkLoaderMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
