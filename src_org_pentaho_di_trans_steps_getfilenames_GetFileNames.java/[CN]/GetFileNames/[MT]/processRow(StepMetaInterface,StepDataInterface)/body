{
  if (!meta.isFileField()) {
    if (data.filenr >= data.filessize) {
      setOutputDone();
      return false;
    }
  }
 else {
    if (data.filenr >= data.filessize) {
      data.readrow=getRow();
    }
    if (data.readrow == null) {
      setOutputDone();
      return false;
    }
    if (first) {
      first=false;
      data.inputRowMeta=getInputRowMeta();
      data.outputRowMeta=data.inputRowMeta.clone();
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
      data.totalpreviousfields=data.inputRowMeta.size();
      if (Const.isEmpty(meta.getDynamicFilenameField())) {
        logError(BaseMessages.getString(PKG,"GetFileNames.Log.NoField"));
        throw new KettleException(BaseMessages.getString(PKG,"GetFileNames.Log.NoField"));
      }
      if (data.indexOfFilenameField < 0) {
        data.indexOfFilenameField=data.inputRowMeta.indexOfValue(meta.getDynamicFilenameField());
        if (data.indexOfFilenameField < 0) {
          logError(BaseMessages.getString(PKG,"GetFileNames.Log.ErrorFindingField",meta.getDynamicFilenameField()));
          throw new KettleException(BaseMessages.getString(PKG,"GetFileNames.Exception.CouldnotFindField",meta.getDynamicFilenameField()));
        }
      }
      if (!Const.isEmpty(meta.getDynamicWildcardField())) {
        if (data.indexOfWildcardField < 0) {
          data.indexOfWildcardField=data.inputRowMeta.indexOfValue(meta.getDynamicWildcardField());
          if (data.indexOfWildcardField < 0) {
            logError(BaseMessages.getString(PKG,"GetFileNames.Log.ErrorFindingField") + "[" + meta.getDynamicWildcardField()+ "]");
            throw new KettleException(BaseMessages.getString(PKG,"GetFileNames.Exception.CouldnotFindField",meta.getDynamicWildcardField()));
          }
        }
      }
    }
  }
  try {
    Object[] outputRow=buildEmptyRow();
    int outputIndex=0;
    Object extraData[]=new Object[data.nrStepFields];
    if (meta.isFileField()) {
      if (data.filenr >= data.filessize) {
        String filename=getInputRowMeta().getString(data.readrow,data.indexOfFilenameField);
        String wildcard="";
        if (data.indexOfWildcardField >= 0)         wildcard=getInputRowMeta().getString(data.readrow,data.indexOfWildcardField);
        String[] filesname={filename};
        String[] filesmask={wildcard};
        String[] filesrequired={"N"};
        boolean[] includesubfolders={meta.isDynamicIncludeSubFolders()};
        data.files=meta.getDynamicFileList(getTransMeta(),filesname,filesmask,filesrequired,includesubfolders);
        data.filessize=data.files.nrOfFiles();
        data.filenr=0;
      }
      outputRow=data.readrow.clone();
    }
    if (data.filessize > 0) {
      data.file=data.files.getFile(data.filenr);
      if (meta.isAddResultFile()) {
        ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,data.file,getTransMeta().getName(),getStepname());
        resultFile.setComment(BaseMessages.getString(PKG,"GetFileNames.Log.FileReadByStep"));
        addResultFile(resultFile);
      }
      extraData[outputIndex++]=KettleVFS.getFilename(data.file);
      extraData[outputIndex++]=data.file.getName().getBaseName();
      try {
        extraData[outputIndex++]=KettleVFS.getFilename(data.file.getParent());
        extraData[outputIndex++]=data.file.getType().toString();
        extraData[outputIndex++]=Boolean.valueOf(data.file.exists());
        extraData[outputIndex++]=Boolean.valueOf(data.file.isHidden());
        extraData[outputIndex++]=Boolean.valueOf(data.file.isReadable());
        extraData[outputIndex++]=Boolean.valueOf(data.file.isWriteable());
        extraData[outputIndex++]=new Date(data.file.getContent().getLastModifiedTime());
        Long size=null;
        if (data.file.getType().equals(FileType.FILE)) {
          size=new Long(data.file.getContent().getSize());
        }
        extraData[outputIndex++]=size;
      }
 catch (      IOException e) {
        throw new KettleException(e);
      }
      extraData[outputIndex++]=data.file.getName().getExtension();
      extraData[outputIndex++]=data.file.getName().getURI();
      extraData[outputIndex++]=data.file.getName().getRootURI();
      if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
        extraData[outputIndex++]=new Long(data.rownr);
      }
      data.rownr++;
      outputRow=RowDataUtil.addRowData(outputRow,data.totalpreviousfields,extraData);
      putRow(data.outputRowMeta,outputRow);
      if (meta.getRowLimit() > 0 && data.rownr >= meta.getRowLimit()) {
        setOutputDone();
        return false;
      }
    }
  }
 catch (  Exception e) {
    throw new KettleStepException(e);
  }
  data.filenr++;
  if (checkFeedback(getLinesInput())) {
    if (log.isBasic())     logBasic(BaseMessages.getString(PKG,"GetFileNames.Log.NrLine","" + getLinesInput()));
  }
  return true;
}
