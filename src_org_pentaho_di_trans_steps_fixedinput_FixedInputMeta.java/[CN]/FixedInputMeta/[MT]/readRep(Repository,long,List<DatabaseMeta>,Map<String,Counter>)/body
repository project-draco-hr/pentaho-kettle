{
  try {
    filename=rep.getStepAttributeString(id_step,"filename");
    lineWidth=rep.getStepAttributeString(id_step,"line_width");
    headerPresent=rep.getStepAttributeBoolean(id_step,"header");
    lineFeedPresent=rep.getStepAttributeBoolean(id_step,"line_feed");
    bufferSize=rep.getStepAttributeString(id_step,"buffer_size");
    lazyConversionActive=rep.getStepAttributeBoolean(id_step,"lazy_conversion");
    runningInParallel=rep.getStepAttributeBoolean(id_step,"parallel");
    fileType=getFileType(rep.getStepAttributeString(id_step,"file_type"));
    encoding=rep.getStepAttributeString(id_step,"encoding");
    isaddresult=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      FixedFileInputField field=new FixedFileInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setTrimType(ValueMeta.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setCurrency(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimal(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGrouping(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setWidth((int)rep.getStepAttributeInteger(id_step,i,"field_width"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      fieldDefinition[i]=field;
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
