{
  DatabaseMeta dbMeta=mock(DatabaseMeta.class);
  when(dbMeta.getPluginId()).thenReturn("pluginId");
  when(dbMeta.getAccessTypeDesc()).thenReturn("Native");
  when(dbMeta.getHostname()).thenReturn("AS/400Host");
  when(dbMeta.getDatabaseName()).thenReturn("mainframeTable");
  when(dbMeta.getDatabasePortNumberString()).thenReturn("1234");
  when(dbMeta.getUsername()).thenReturn("testUser");
  when(dbMeta.getPassword()).thenReturn("123");
  when(dbMeta.getServername()).thenReturn("as400.dot.com");
  when(dbMeta.getDataTablespace()).thenReturn("tableSpace");
  when(dbMeta.getIndexTablespace()).thenReturn("123");
  Properties extraOptions=new Properties();
  extraOptions.setProperty("EXTRA_OPTION_AS/400.optionExtraOption","true");
  when(dbMeta.getAttributes()).thenReturn(extraOptions);
  IUnifiedRepository purRepo=mock(IUnifiedRepository.class);
  when(purRepo.getReservedChars()).thenReturn(Arrays.asList(new Character[]{'/'}));
  when(mockPurRepository.getPur()).thenReturn(purRepo);
  DataNode escapedAttributes=dbDelegate.elementToDataNode(dbMeta);
  for (Iterator<DataNode> iter=escapedAttributes.getNodes().iterator(); iter.hasNext(); ) {
    DataNode options=iter.next();
    assertTrue("Invalid escaped extra options",options.hasProperty("EXTRA_OPTION_AS%2F400.optionExtraOption"));
    assertFalse("Should not contain un-escaped option",options.hasProperty("EXTRA_OPTION_AS/400.optionExtraOption"));
  }
}
