{
  meta=(MappingInputMeta)smi;
  data=(MappingInputData)sdi;
  if (!data.linked) {
    int totalsleep=0;
    while (!isStopped() && data.sourceSteps == null) {
      try {
        totalsleep+=10;
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
        stopAll();
      }
      if (totalsleep > timeOut) {
        throw new KettleException(BaseMessages.getString(PKG,"MappingInput.Exception.UnableToConnectWithParentMapping","" + (totalsleep / 1000)));
      }
    }
    data.linked=true;
  }
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    for (    MappingValueRename valueRename : data.valueRenames) {
      replaceRenameIfNecessary(data.outputRowMeta,valueRename);
      replaceRenameIfNecessary(getInputRowMeta(),valueRename);
    }
    data.outputRowMeta.setValueMetaList(data.outputRowMeta.getValueMetaList());
    this.getInputRowMeta().setValueMetaList(this.getInputRowMeta().getValueMetaList());
    meta.setInputRowMeta(getInputRowMeta());
    if (meta.isSelectingAndSortingUnspecifiedFields()) {
      data.outputRowMeta=new RowMeta();
    }
 else {
      meta.setInputRowMeta(new RowMeta());
    }
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isSelectingAndSortingUnspecifiedFields()) {
      data.fieldNrs=new int[data.outputRowMeta.size()];
      for (int i=0; i < data.outputRowMeta.size(); i++) {
        data.fieldNrs[i]=getInputRowMeta().indexOfValue(data.outputRowMeta.getValueMeta(i).getName());
      }
    }
  }
  if (meta.isSelectingAndSortingUnspecifiedFields()) {
    Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    for (int i=0; i < data.fieldNrs.length; i++) {
      outputRowData[i]=row[data.fieldNrs[i]];
    }
    putRow(data.outputRowMeta,outputRowData);
  }
 else {
    putRow(data.outputRowMeta,row);
  }
  return true;
}
