{
  meta=(MultiMergeJoinMeta)smi;
  data=(MultiMergeJoinData)sdi;
  TransMeta transMeta=getTransMeta();
  TransHopMeta transHopMeta;
  StepIOMetaInterface stepIOMeta=meta.getStepIOMeta();
  List<StreamInterface> infoStreams=stepIOMeta.getInfoStreams();
  StreamInterface stream;
  StepMeta toStepMeta=meta.getParentStepMeta();
  StepMeta fromStepMeta;
  ArrayList<String> inputStepNameList=new ArrayList<String>();
  String[] inputStepNames=meta.getInputSteps();
  String inputStepName;
  for (int i=0; i < infoStreams.size(); i++) {
    inputStepName=inputStepNames[i];
    stream=infoStreams.get(i);
    fromStepMeta=stream.getStepMeta();
    if (fromStepMeta == null) {
      throw new KettleException(BaseMessages.getString(PKG,"MultiMergeJoin.Log.UnableToFindReferenceStream",inputStepName));
    }
    transHopMeta=transMeta.findTransHop(fromStepMeta,toStepMeta,true);
    if (transHopMeta == null) {
      throw new KettleException(BaseMessages.getString(PKG,"MultiMergeJoin.Log.UnableToFindReferenceStream",inputStepName));
    }
 else     if (transHopMeta.isEnabled()) {
      inputStepNameList.add(inputStepName);
    }
 else {
      logDetailed(BaseMessages.getString(PKG,"MultiMergeJoin.Log.IgnoringStep",inputStepName));
    }
  }
  int streamSize=inputStepNameList.size();
  if (streamSize == 0) {
    return false;
  }
  String keyField;
  String[] keyFields;
  data.rowSets=new RowSet[streamSize];
  RowSet rowSet;
  Object[] row;
  data.rows=new Object[streamSize][];
  data.metas=new RowMetaInterface[streamSize];
  data.rowLengths=new int[streamSize];
  MultiMergeJoinData.QueueComparator comparator=new MultiMergeJoinData.QueueComparator(data);
  data.queue=new PriorityQueue<MultiMergeJoinData.QueueEntry>(streamSize,comparator);
  data.results=new ArrayList<List<Object[]>>(streamSize);
  MultiMergeJoinData.QueueEntry queueEntry;
  data.queueEntries=new MultiMergeJoinData.QueueEntry[streamSize];
  data.drainIndices=new int[streamSize];
  data.keyNrs=new int[streamSize][];
  data.dummy=new Object[streamSize][];
  RowMetaInterface rowMeta;
  data.outputRowMeta=new RowMeta();
  for (int i=0, j=0; i < inputStepNames.length; i++) {
    inputStepName=inputStepNames[i];
    if (!inputStepNameList.contains(inputStepName)) {
      continue;
    }
    queueEntry=new MultiMergeJoinData.QueueEntry();
    queueEntry.index=j;
    data.queueEntries[j]=queueEntry;
    data.results.add(new ArrayList<Object[]>());
    rowSet=findInputRowSet(inputStepName);
    if (rowSet == null) {
      throw new KettleException(BaseMessages.getString(PKG,"MultiMergeJoin.Exception.UnableToFindSpecifiedStep",inputStepName));
    }
    data.rowSets[j]=rowSet;
    row=getRowFrom(rowSet);
    data.rows[j]=row;
    if (row == null) {
      rowMeta=getTransMeta().getStepFields(inputStepName);
      data.metas[j]=rowMeta;
    }
 else {
      queueEntry.row=row;
      rowMeta=rowSet.getRowMeta();
      keyField=meta.getKeyFields()[i];
      String[] keyFieldParts=keyField.split(",");
      String keyFieldPart;
      data.keyNrs[j]=new int[keyFieldParts.length];
      for (int k=0; k < keyFieldParts.length; k++) {
        keyFieldPart=keyFieldParts[k];
        data.keyNrs[j][k]=rowMeta.indexOfValue(keyFieldPart);
        if (data.keyNrs[j][k] < 0) {
          String message=BaseMessages.getString(PKG,"MultiMergeJoin.Exception.UnableToFindFieldInReferenceStream",keyFieldPart,inputStepName);
          logError(message);
          throw new KettleStepException(message);
        }
      }
      data.metas[j]=rowMeta;
      data.queue.add(data.queueEntries[j]);
    }
    data.outputRowMeta.mergeRowMeta(rowMeta.clone());
    data.rowLengths[j]=rowMeta.size();
    data.dummy[j]=RowDataUtil.allocateRowData(rowMeta.size());
    j++;
  }
  return true;
}
