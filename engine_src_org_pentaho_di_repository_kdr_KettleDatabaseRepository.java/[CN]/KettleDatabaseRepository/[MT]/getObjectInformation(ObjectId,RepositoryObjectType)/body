{
  try {
    String name, description, modifiedUser;
    Date modifiedDate;
    RepositoryDirectoryInterface directory;
    long dirId;
switch (objectType) {
case TRANSFORMATION:
{
        RowMetaAndData row=transDelegate.getTransformation(objectId);
        name=row.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_NAME,null);
        description=row.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_DESCRIPTION,null);
        modifiedUser=row.getString(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_USER,"-");
        modifiedDate=row.getDate(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_DATE,null);
        dirId=row.getInteger(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DIRECTORY,0);
        break;
      }
case JOB:
{
      RowMetaAndData row=jobDelegate.getJob(objectId);
      name=row.getString(KettleDatabaseRepository.FIELD_JOB_NAME,null);
      description=row.getString(KettleDatabaseRepository.FIELD_JOB_DESCRIPTION,null);
      modifiedUser=row.getString(KettleDatabaseRepository.FIELD_JOB_MODIFIED_USER,"-");
      modifiedDate=row.getDate(KettleDatabaseRepository.FIELD_JOB_MODIFIED_DATE,null);
      dirId=row.getInteger(KettleDatabaseRepository.FIELD_JOB_ID_DIRECTORY,0);
      break;
    }
default :
  throw new KettleException("Object type " + objectType.getTypeDescription() + " was specified.  Only information from transformations and jobs can be retrieved at this time.");
}
boolean isDeleted=(name == null);
directory=loadRepositoryDirectoryTree().findDirectory(new LongObjectId(dirId));
return new RepositoryObject(objectId,name,directory,modifiedUser,modifiedDate,objectType,description,isDeleted);
}
 catch (Exception e) {
throw new KettleException("Unable to get object information for object with id=" + objectId,e);
}
}
