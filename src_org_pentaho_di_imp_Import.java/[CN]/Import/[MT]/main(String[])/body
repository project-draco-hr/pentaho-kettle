{
  KettleEnvironment.init();
  List<String> args=new ArrayList<String>();
  for (int i=0; i < a.length; i++) {
    if (a[i].length() > 0)     args.add(a[i]);
  }
  StringBuffer optionRepname, optionUsername, optionPassword, optionDirname, optionLimitDir, optionFilename, optionRules, optionComment;
  StringBuffer optionReplace, optionContinueOnError, optionVersion;
  CommandLineOption options[]=new CommandLineOption[]{new CommandLineOption("rep",BaseMessages.getString(PKG,"Import.CmdLine.RepName"),optionRepname=new StringBuffer()),new CommandLineOption("user",BaseMessages.getString(PKG,"Import.CmdLine.RepUsername"),optionUsername=new StringBuffer()),new CommandLineOption("pass",BaseMessages.getString(PKG,"Import.CmdLine.RepPassword"),optionPassword=new StringBuffer()),new CommandLineOption("dir",BaseMessages.getString(PKG,"Import.CmdLine.RepDir"),optionDirname=new StringBuffer()),new CommandLineOption("limitdir",BaseMessages.getString(PKG,"Import.CmdLine.LimitDir"),optionLimitDir=new StringBuffer()),new CommandLineOption("file",BaseMessages.getString(PKG,"Import.CmdLine.File"),optionFilename=new StringBuffer()),new CommandLineOption("rules",BaseMessages.getString(PKG,"Import.CmdLine.RulesFile"),optionRules=new StringBuffer()),new CommandLineOption("comment",BaseMessages.getString(PKG,"Import.CmdLine.Comment"),optionComment=new StringBuffer(),true,false),new CommandLineOption("replace",BaseMessages.getString(PKG,"Import.CmdLine.Replace"),optionReplace=new StringBuffer(),true,false),new CommandLineOption("coe",BaseMessages.getString(PKG,"Import.CmdLine.ContinueOnError"),optionContinueOnError=new StringBuffer(),true,false),new CommandLineOption("version",BaseMessages.getString(PKG,"Import.CmdLine.Version"),optionVersion=new StringBuffer(),true,false)};
  if (args.size() == 0) {
    CommandLineOption.printUsage(options);
    exitJVM(9);
  }
  final LogChannelInterface log=new LogChannel(STRING_IMPORT);
  CommandLineOption.parseArguments(args,options,log);
  String kettleRepname=Const.getEnvironmentVariable("KETTLE_REPOSITORY",null);
  String kettleUsername=Const.getEnvironmentVariable("KETTLE_USER",null);
  String kettlePassword=Const.getEnvironmentVariable("KETTLE_PASSWORD",null);
  if (!Const.isEmpty(kettleRepname))   optionRepname=new StringBuffer(kettleRepname);
  if (!Const.isEmpty(kettleUsername))   optionUsername=new StringBuffer(kettleUsername);
  if (!Const.isEmpty(kettlePassword))   optionPassword=new StringBuffer(kettlePassword);
  if (!Const.isEmpty(optionVersion)) {
    BuildVersion buildVersion=BuildVersion.getInstance();
    log.logBasic(BaseMessages.getString(PKG,"Import.Log.KettleVersion",buildVersion.getVersion(),buildVersion.getRevision(),buildVersion.getBuildDate()));
    if (a.length == 1)     exitJVM(6);
  }
  if (Const.isEmpty(optionRepname)) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.NoRepProvided"));
    exitJVM(1);
  }
  if (Const.isEmpty(optionFilename)) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.NoExportFileProvided"));
    exitJVM(1);
  }
  if (Const.isEmpty(optionDirname)) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.NoRepositoryDirectoryProvided"));
    exitJVM(1);
  }
  if (Const.isEmpty(optionRules)) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.NoRulesFileProvided"));
    exitJVM(1);
  }
  ImportRules importRules=new ImportRules();
  String rulesFile=optionRules.toString();
  if (!Const.isEmpty(rulesFile)) {
    try {
      Document document=XMLHandler.loadXMLFile(rulesFile);
      Node rulesNode=XMLHandler.getSubNode(document,ImportRules.XML_TAG);
      importRules.loadXML(rulesNode);
      log.logMinimal(BaseMessages.getString(PKG,"Import.Log.RulesLoaded",rulesFile,"" + importRules.getRules().size()));
      for (      ImportRuleInterface rule : importRules.getRules()) {
        log.logBasic(" - " + rule.toString());
      }
    }
 catch (    KettleException e) {
      log.logError(BaseMessages.getString(PKG,"Import.Log.ExceptionLoadingRules",rulesFile),e);
      exitJVM(7);
    }
  }
  List<String> limitDirs=new ArrayList<String>();
  if (!Const.isEmpty(optionLimitDir)) {
    String[] directories=optionLimitDir.toString().split(",");
    for (    String directory : directories) {
      limitDirs.add(directory);
    }
  }
  RepositoriesMeta repsinfo=new RepositoriesMeta();
  try {
    repsinfo.readData();
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.UnableToLoadRepositoryInformation"),e);
    exitJVM(1);
  }
  RepositoryMeta repositoryMeta=repsinfo.findRepository(optionRepname.toString());
  if (repositoryMeta == null) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.RepositoryCouldNotBeFound",optionRepname.toString()));
    exitJVM(1);
  }
  if (Const.isEmpty(optionRepname)) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.NoRepProvided"));
    exitJVM(1);
  }
  Repository repository=null;
  try {
    repository=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,repositoryMeta,Repository.class);
    repository.init(repositoryMeta);
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.UnableToLoadOrInitializeRepository"));
    exitJVM(1);
  }
  try {
    repository.connect(optionUsername != null ? optionUsername.toString() : null,optionPassword != null ? optionPassword.toString() : null);
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.UnableToConnectToRepository"));
    exitJVM(1);
  }
  final boolean replace=Const.isEmpty(optionReplace) ? false : ValueMeta.convertStringToBoolean(optionReplace.toString());
  final boolean continueOnError=Const.isEmpty(optionContinueOnError) ? false : ValueMeta.convertStringToBoolean(optionContinueOnError.toString());
  log.logMinimal(BaseMessages.getString(PKG,"Import.Log.Starting"));
  Date start, stop;
  Calendar cal;
  SimpleDateFormat df=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
  cal=Calendar.getInstance();
  start=cal.getTime();
  int returnCode=0;
  try {
    RepositoryDirectoryInterface tree=repository.loadRepositoryDirectoryTree();
    RepositoryDirectoryInterface targetDirectory=tree.findDirectory(optionDirname.toString());
    if (targetDirectory == null) {
      log.logError(BaseMessages.getString(PKG,"Import.Error.UnableToFindTargetDirectoryInRepository",optionDirname.toString()));
      exitJVM(1);
    }
    RepositoryImporter importer=new RepositoryImporter(repository,importRules,limitDirs);
    RepositoryImportFeedbackInterface feedbackInterface=new RepositoryImportFeedbackInterface(){
      @Override public void updateDisplay(){
      }
      @Override public boolean transOverwritePrompt(      TransMeta transMeta){
        return replace;
      }
      @Override public void showError(      String title,      String message,      Exception e){
        log.logError(title + " : " + message,e);
      }
      @Override public void setLabel(      String labelText){
        log.logBasic(labelText);
      }
      @Override public boolean jobOverwritePrompt(      JobMeta jobMeta){
        return replace;
      }
      @Override public boolean askContinueOnErrorQuestion(      String title,      String message){
        return continueOnError;
      }
      @Override public void addLog(      String line){
        log.logBasic(line);
      }
      @Override public boolean isAskingOverwriteConfirmation(){
        return false;
      }
    }
;
    importer.importAll(feedbackInterface,null,new String[]{optionFilename.toString()},targetDirectory,replace,continueOnError,optionComment.toString());
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"Import.Error.UnexpectedErrorDuringImport"),e);
    exitJVM(2);
  }
  log.logMinimal(BaseMessages.getString(PKG,"Import.Log.Finished"));
  cal=Calendar.getInstance();
  stop=cal.getTime();
  String begin=df.format(start).toString();
  String end=df.format(stop).toString();
  log.logMinimal(BaseMessages.getString(PKG,"Import.Log.StartStop",begin,end));
  long seconds=(stop.getTime() - start.getTime()) / 1000;
  if (seconds <= 60) {
    log.logMinimal(BaseMessages.getString(PKG,"Import.Log.ProcessEndAfter",String.valueOf(seconds)));
  }
 else   if (seconds <= 60 * 60) {
    int min=(int)(seconds / 60);
    int rem=(int)(seconds % 60);
    log.logMinimal(BaseMessages.getString(PKG,"Import.Log.ProcessEndAfterLong",String.valueOf(min),String.valueOf(rem),String.valueOf(seconds)));
  }
 else   if (seconds <= 60 * 60 * 24) {
    int rem;
    int hour=(int)(seconds / (60 * 60));
    rem=(int)(seconds % (60 * 60));
    int min=rem / 60;
    rem=rem % 60;
    log.logMinimal(BaseMessages.getString(PKG,"Import.Log.ProcessEndAfterLonger",String.valueOf(hour),String.valueOf(min),String.valueOf(rem),String.valueOf(seconds)));
  }
 else {
    int rem;
    int days=(int)(seconds / (60 * 60 * 24));
    rem=(int)(seconds % (60 * 60 * 24));
    int hour=rem / (60 * 60);
    rem=rem % (60 * 60);
    int min=rem / 60;
    rem=rem % 60;
    log.logMinimal(BaseMessages.getString(PKG,"Import.Log.ProcessEndAfterLongest",String.valueOf(days),String.valueOf(hour),String.valueOf(min),String.valueOf(rem),String.valueOf(seconds)));
  }
  exitJVM(returnCode);
}
