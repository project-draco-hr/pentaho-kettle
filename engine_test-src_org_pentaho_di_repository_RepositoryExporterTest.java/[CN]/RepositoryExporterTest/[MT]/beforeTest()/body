{
  MockitoAnnotations.initMocks(this);
  Mockito.when(repository.getLog()).thenReturn(log);
  ObjectId id=new ObjectId(){
    @Override public String getId(){
      return "1";
    }
  }
;
  Mockito.when(root.getDirectoryIDs()).thenReturn(new ObjectId[]{id});
  Mockito.when(root.findDirectory(Mockito.any(ObjectId.class))).thenReturn(root);
  Mockito.when(repository.getJobNames(Mockito.any(ObjectId.class),Mockito.anyBoolean())).thenReturn(new String[]{"job1"});
  Mockito.when(repository.getTransformationNames(Mockito.any(ObjectId.class),Mockito.anyBoolean())).thenReturn(new String[]{"trans1"});
  Mockito.when(root.getPath()).thenReturn("path");
  Answer<JobMeta> jobLoader=new Answer<JobMeta>(){
    @Override public JobMeta answer(    InvocationOnMock invocation) throws Throwable {
      String jobName=String.class.cast(invocation.getArguments()[0]);
      JobMeta jobMeta=Mockito.mock(JobMeta.class);
      Mockito.when(jobMeta.getXML()).thenReturn("<" + jobName + ">"+ "found"+ "</"+ jobName+ ">");
      Mockito.when(jobMeta.getName()).thenReturn(jobName);
      return jobMeta;
    }
  }
;
  Mockito.when(repository.loadJob(Mockito.anyString(),Mockito.any(RepositoryDirectoryInterface.class),Mockito.any(ProgressMonitorListener.class),Mockito.anyString())).thenAnswer(jobLoader);
  Answer<TransMeta> transLoader=new Answer<TransMeta>(){
    @Override public TransMeta answer(    InvocationOnMock invocation) throws Throwable {
      String transName=String.class.cast(invocation.getArguments()[0]);
      TransMeta transMeta=Mockito.mock(TransMeta.class);
      Mockito.when(transMeta.getXML()).thenReturn("<" + transName + ">"+ "found"+ "</"+ transName+ ">");
      Mockito.when(transMeta.getName()).thenReturn(transName);
      return transMeta;
    }
  }
;
  Mockito.when(repository.loadTransformation(Mockito.anyString(),Mockito.any(RepositoryDirectoryInterface.class),Mockito.any(ProgressMonitorListener.class),Mockito.anyBoolean(),Mockito.anyString())).thenAnswer(transLoader);
  xmlFileName=TestUtils.createRamFile(getClass().getSimpleName() + "/export.xml");
  fileObject=TestUtils.getFileObject(xmlFileName);
}
