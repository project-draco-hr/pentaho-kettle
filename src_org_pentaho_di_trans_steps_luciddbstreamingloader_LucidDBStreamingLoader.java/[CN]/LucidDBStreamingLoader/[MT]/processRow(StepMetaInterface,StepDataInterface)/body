{
  meta=(LucidDBStreamingLoaderMeta)smi;
  data=(LucidDBStreamingLoaderData)sdi;
  try {
    Object[] r=getRow();
    if (r == null) {
      if (data.objOut != null) {
        data.objOut.flush();
        data.objOut.close();
        if (data.client != null) {
          data.client.close();
        }
      }
      return false;
    }
    if (first) {
      first=false;
      if (meta.getOperation() != LucidDBStreamingLoaderMeta.OPERATION_CUSTOM) {
        if (log.isDebug())         logDebug("Connected to LucidDB");
        String qualifiedTableName="\"" + meta.getSchemaName() + "\""+ ".\""+ meta.getTableName()+ "\"";
        if (!data.db.checkTableExists(qualifiedTableName)) {
          throw new KettleException("Error: Table " + qualifiedTableName + " doesn't existing in LucidDB");
        }
      }
      String sql=meta.getDMLStatement(getInputRowMeta());
      PreparedStatement ps=data.db.prepareSQL(sql);
      if (log.isDebug())       logDebug("Executing sql statements...");
      data.sqlRunner=new SqlRunner(data,ps);
      data.sqlRunner.start();
      if (log.isDebug())       logDebug("Remote rows is up now...");
      if (log.isDebug())       logDebug("Sleeping for 1 second");
      Thread.sleep(1000);
      if (log.isDebug())       logDebug("Initialize local socket connection...");
      if (log.isDebug())       logDebug("Parameters for socket: Host: " + meta.getHost() + " Port: "+ meta.getPort());
      int try_cnt=0;
      while (true) {
        try {
          data.client=new Socket(meta.getHost(),Integer.valueOf(meta.getPort()));
          data.objOut=new ObjectOutputStream(data.client.getOutputStream());
          if (log.isDebug())           logDebug("Local socket connection is ready");
          break;
        }
 catch (        SocketException se) {
          if (try_cnt < 5) {
            logBasic("Local socket connection is not ready, so try to connect in 5 second");
            Thread.sleep(5000);
            data.client=null;
            try_cnt++;
          }
 else {
            throw new KettleException("Fatal Error: Remote_rows UDX can't be connected! Please check...");
          }
        }
catch (        Exception ex) {
          throw ex;
        }
      }
      ArrayList<String> combined=new ArrayList<String>();
      for (int i=0; i < meta.getFieldStreamForKeys().length; i++) {
        combined.add(meta.getFieldStreamForKeys()[i]);
      }
      for (int i=0; i < meta.getFieldStreamForFields().length; i++) {
        if (!meta.isInKeys(meta.getFieldStreamForFields()[i])) {
          combined.add(meta.getFieldStreamForFields()[i]);
        }
      }
      data.keynrs=new int[combined.size()];
      data.format=new String[combined.size()];
      for (int i=0; i < combined.size(); i++) {
        data.keynrs[i]=getInputRowMeta().indexOfValue(combined.get(i));
        ValueMetaInterface v=getInputRowMeta().getValueMeta(data.keynrs[i]);
        data.format[i]=meta.getDatabaseMeta().getFieldDefinition(v,null,null,false);
      }
      if (isDetailed())       logDetailed(Arrays.toString(data.format));
      List<Object> header=new ArrayList<Object>();
      header.add("1");
      List<String> format=new ArrayList<String>();
      for (int i=0; i < data.format.length; i++) {
        format.add(data.format[i]);
      }
      header.add(format);
      data.objOut.writeObject(header);
    }
    if (data.sqlRunner.ex != null) {
      throw new KettleException(data.sqlRunner.ex);
    }
    List<Object> entity=new ArrayList<Object>();
    for (int i=0; i < data.keynrs.length; i++) {
      int index=data.keynrs[i];
      ValueMetaInterface valueMeta=getInputRowMeta().getValueMeta(index);
      Object valueData=r[index];
      if (r[i] == null) {
        entity.add(null);
      }
 else {
switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
          if (log.isRowLevel())           logRowlevel(valueMeta.getNumber(valueData) + ":" + valueMeta.getLength()+ ":"+ valueMeta.getTypeDesc());
        entity.add(valueMeta.getNumber(valueData));
      break;
case ValueMetaInterface.TYPE_STRING:
    if (log.isRowLevel())     logRowlevel(valueMeta.getString(valueData) + ":" + valueMeta.getLength()+ ":"+ valueMeta.getTypeDesc());
  entity.add(valueMeta.getString(valueData));
break;
case ValueMetaInterface.TYPE_DATE:
Date date=valueMeta.getDate(valueData);
if (log.isRowLevel()) logRowlevel(XMLHandler.date2string(date) + ":" + valueMeta.getLength());
java.sql.Date sqlDate=new java.sql.Date(date.getTime());
entity.add(sqlDate);
break;
case ValueMetaInterface.TYPE_BOOLEAN:
if (log.isRowLevel()) logRowlevel(Boolean.toString(valueMeta.getBoolean(valueData)) + ":" + valueMeta.getLength());
entity.add(valueMeta.getBoolean(valueData));
break;
case ValueMetaInterface.TYPE_INTEGER:
if (log.isRowLevel()) logRowlevel(valueMeta.getInteger(valueData) + ":" + valueMeta.getLength()+ ":"+ valueMeta.getTypeDesc());
entity.add(valueMeta.getInteger(valueData));
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
if (log.isRowLevel()) logRowlevel(valueMeta.getBigNumber(valueData) + ":" + valueMeta.getLength()+ ":"+ valueMeta.getTypeDesc());
entity.add(valueMeta.getBigNumber(valueData));
break;
case ValueMetaInterface.TYPE_BINARY:
if (log.isRowLevel()) logRowlevel(valueMeta.getBinary(valueData) + ":" + valueMeta.getLength()+ ":"+ valueMeta.getTypeDesc());
entity.add(valueMeta.getBinary(valueData));
default :
entity.add(r[i]);
}
}
}
data.objOut.writeObject(entity);
incrementLinesOutput();
data.objOut.reset();
data.objOut.flush();
return true;
}
 catch (Exception e) {
logError(BaseMessages.getString(PKG,"LucidDBStreamingLoader.Log.ErrorInStep"),e);
setErrors(1);
stopAll();
setOutputDone();
return false;
}
}
