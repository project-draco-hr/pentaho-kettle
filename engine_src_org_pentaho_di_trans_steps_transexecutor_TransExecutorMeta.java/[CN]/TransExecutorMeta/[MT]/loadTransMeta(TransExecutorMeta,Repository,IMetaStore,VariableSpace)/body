{
  TransMeta mappingTransMeta=null;
switch (executorMeta.getSpecificationMethod()) {
case FILENAME:
    String realFilename=space.environmentSubstitute(executorMeta.getFileName());
  try {
    mappingTransMeta=new TransMeta(realFilename,metaStore,rep,true,space,null);
    LogChannel.GENERAL.logDetailed("Loading transformation from repository","Transformation was loaded from XML file [" + realFilename + "]");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"TransExecutorMeta.Exception.UnableToLoadTrans"),e);
  }
break;
case REPOSITORY_BY_NAME:
String realTransname=space.environmentSubstitute(executorMeta.getTransName());
String realDirectory=space.environmentSubstitute(executorMeta.getDirectoryPath());
if (!Const.isEmpty(realTransname) && !Const.isEmpty(realDirectory) && rep != null) {
RepositoryDirectoryInterface repdir=rep.findDirectory(realDirectory);
if (repdir != null) {
try {
mappingTransMeta=rep.loadTransformation(realTransname,repdir,null,true,null);
LogChannel.GENERAL.logDetailed("Loading transformation from repository","Executor transformation [" + realTransname + "] was loaded from the repository");
}
 catch (Exception e) {
throw new KettleException("Unable to load transformation [" + realTransname + "]",e);
}
}
 else {
throw new KettleException(BaseMessages.getString(PKG,"TransExecutorMeta.Exception.UnableToLoadTrans",realTransname) + realDirectory);
}
}
break;
case REPOSITORY_BY_REFERENCE:
mappingTransMeta=rep.loadTransformation(executorMeta.getTransObjectId(),null);
break;
default :
break;
}
mappingTransMeta.copyVariablesFrom(space);
mappingTransMeta.setRepository(rep);
mappingTransMeta.setFilename(mappingTransMeta.getFilename());
return mappingTransMeta;
}
