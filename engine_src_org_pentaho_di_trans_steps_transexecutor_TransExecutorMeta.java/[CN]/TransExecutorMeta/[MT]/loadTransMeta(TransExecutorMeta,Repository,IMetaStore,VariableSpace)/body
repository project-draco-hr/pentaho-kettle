{
  TransMeta mappingTransMeta=null;
  CurrentDirectoryResolver r=new CurrentDirectoryResolver();
  VariableSpace tmpSpace=r.resolveCurrentDirectory(executorMeta.getSpecificationMethod(),space,rep,executorMeta.getParentStepMeta(),executorMeta.getFileName());
switch (executorMeta.getSpecificationMethod()) {
case FILENAME:
    String realFilename=tmpSpace.environmentSubstitute(executorMeta.getFileName());
  try {
    if (rep != null) {
      realFilename=r.normalizeSlashes(realFilename);
      try {
        String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
        String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1);
        RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
        mappingTransMeta=rep.loadTransformation(tmpFilename,dir,null,true,null);
      }
 catch (      KettleException ke) {
        if (realFilename.endsWith(Const.STRING_TRANS_DEFAULT_EXT)) {
          try {
            String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1,realFilename.indexOf("." + Const.STRING_TRANS_DEFAULT_EXT));
            String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
            RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
            mappingTransMeta=rep.loadTransformation(tmpFilename,dir,null,true,null);
          }
 catch (          KettleException ke2) {
          }
        }
      }
    }
    if (mappingTransMeta == null) {
      mappingTransMeta=new TransMeta(realFilename,metaStore,rep,true,tmpSpace,null);
      LogChannel.GENERAL.logDetailed("Loading transformation from repository","Transformation was loaded from XML file [" + realFilename + "]");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"TransExecutorMeta.Exception.UnableToLoadTrans"),e);
  }
break;
case REPOSITORY_BY_NAME:
String realTransname=tmpSpace.environmentSubstitute(executorMeta.getTransName());
String realDirectory=tmpSpace.environmentSubstitute(executorMeta.getDirectoryPath());
if (rep != null) {
if (!Const.isEmpty(realTransname) && !Const.isEmpty(realDirectory)) {
realDirectory=r.normalizeSlashes(realDirectory);
RepositoryDirectoryInterface repdir=rep.findDirectory(realDirectory);
if (repdir != null) {
try {
  mappingTransMeta=rep.loadTransformation(realTransname,repdir,null,true,null);
  LogChannel.GENERAL.logDetailed("Loading transformation from repository","Executor transformation [" + realTransname + "] was loaded from the repository");
}
 catch (Exception e) {
  throw new KettleException("Unable to load transformation [" + realTransname + "]",e);
}
}
}
}
 else {
try {
mappingTransMeta=new TransMeta(realDirectory + "/" + realTransname,metaStore,rep,true,tmpSpace,null);
}
 catch (KettleException ke) {
try {
mappingTransMeta=new TransMeta(realDirectory + "/" + realTransname+ "."+ Const.STRING_TRANS_DEFAULT_EXT,metaStore,rep,true,tmpSpace,null);
}
 catch (KettleException ke2) {
throw new KettleException(BaseMessages.getString(PKG,"TransExecutorMeta.Exception.UnableToLoadTrans",realTransname) + realDirectory);
}
}
}
break;
case REPOSITORY_BY_REFERENCE:
mappingTransMeta=rep.loadTransformation(executorMeta.getTransObjectId(),null);
break;
default :
break;
}
mappingTransMeta.copyVariablesFrom(space);
mappingTransMeta.setRepository(rep);
mappingTransMeta.setMetaStore(metaStore);
mappingTransMeta.setFilename(mappingTransMeta.getFilename());
return mappingTransMeta;
}
