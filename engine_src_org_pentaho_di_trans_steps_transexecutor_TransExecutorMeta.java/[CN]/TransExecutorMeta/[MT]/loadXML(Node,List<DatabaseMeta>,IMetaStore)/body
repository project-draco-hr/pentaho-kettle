{
  try {
    String method=XMLHandler.getTagValue(stepnode,"specification_method");
    specificationMethod=ObjectLocationSpecificationMethod.getSpecificationMethodByCode(method);
    String transId=XMLHandler.getTagValue(stepnode,"trans_object_id");
    transObjectId=Utils.isEmpty(transId) ? null : new StringObjectId(transId);
    transName=XMLHandler.getTagValue(stepnode,"trans_name");
    fileName=XMLHandler.getTagValue(stepnode,"filename");
    directoryPath=XMLHandler.getTagValue(stepnode,"directory_path");
    groupSize=XMLHandler.getTagValue(stepnode,"group_size");
    groupField=XMLHandler.getTagValue(stepnode,"group_field");
    groupTime=XMLHandler.getTagValue(stepnode,"group_time");
    Node mappingParametersNode=XMLHandler.getSubNode(stepnode,TransExecutorParameters.XML_TAG);
    parameters=new TransExecutorParameters(mappingParametersNode);
    executionResultTargetStep=XMLHandler.getTagValue(stepnode,F_EXECUTION_RESULT_TARGET_STEP);
    executionTimeField=XMLHandler.getTagValue(stepnode,"execution_time_field");
    executionResultField=XMLHandler.getTagValue(stepnode,"execution_result_field");
    executionNrErrorsField=XMLHandler.getTagValue(stepnode,"execution_errors_field");
    executionLinesReadField=XMLHandler.getTagValue(stepnode,"execution_lines_read_field");
    executionLinesWrittenField=XMLHandler.getTagValue(stepnode,"execution_lines_written_field");
    executionLinesInputField=XMLHandler.getTagValue(stepnode,"execution_lines_input_field");
    executionLinesOutputField=XMLHandler.getTagValue(stepnode,"execution_lines_output_field");
    executionLinesRejectedField=XMLHandler.getTagValue(stepnode,"execution_lines_rejected_field");
    executionLinesUpdatedField=XMLHandler.getTagValue(stepnode,"execution_lines_updated_field");
    executionLinesDeletedField=XMLHandler.getTagValue(stepnode,"execution_lines_deleted_field");
    executionFilesRetrievedField=XMLHandler.getTagValue(stepnode,"execution_files_retrieved_field");
    executionExitStatusField=XMLHandler.getTagValue(stepnode,"execution_exit_status_field");
    executionLogTextField=XMLHandler.getTagValue(stepnode,"execution_log_text_field");
    executionLogChannelIdField=XMLHandler.getTagValue(stepnode,"execution_log_channelid_field");
    outputRowsSourceStep=XMLHandler.getTagValue(stepnode,"result_rows_target_step");
    int nrFields=XMLHandler.countNodes(stepnode,"result_rows_field");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      Node fieldNode=XMLHandler.getSubNodeByNr(stepnode,"result_rows_field",i);
      outputRowsField[i]=XMLHandler.getTagValue(fieldNode,"name");
      outputRowsType[i]=ValueMeta.getType(XMLHandler.getTagValue(fieldNode,"type"));
      outputRowsLength[i]=Const.toInt(XMLHandler.getTagValue(fieldNode,"length"),-1);
      outputRowsPrecision[i]=Const.toInt(XMLHandler.getTagValue(fieldNode,"precision"),-1);
    }
    resultFilesTargetStep=XMLHandler.getTagValue(stepnode,F_RESULT_FILE_TARGET_STEP);
    resultFilesFileNameField=XMLHandler.getTagValue(stepnode,"result_files_file_name_field");
    executorsOutputStep=XMLHandler.getTagValue(stepnode,F_EXECUTOR_OUTPUT_STEP);
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"TransExecutorMeta.Exception.ErrorLoadingTransExecutorDetailsFromXML"),e);
  }
}
