{
  if (parentCondition == null) {
    parentCondition=new Condition();
  }
 else {
    Condition c=new Condition();
    c.setOperator(parentOperator);
    parentCondition.addCondition(c);
    parentCondition=c;
  }
  String orOperatorString=" OR ";
  int orConditionOperator=Condition.OPERATOR_OR;
  int lastIndex=splitByOperator(clause,parentCondition,orOperatorString,orConditionOperator);
  if (lastIndex == 0) {
    String andOperatorString=" AND ";
    int andConditionOperator=Condition.OPERATOR_AND;
    lastIndex=splitByOperator(clause,parentCondition,andOperatorString,andConditionOperator);
    if (lastIndex == 0) {
      String cleaned=Const.trim(clause);
      boolean negation=false;
      if (Pattern.matches("^PARAMETER\\s*\\(.*\\)\\s*=\\s*'.*'$",cleaned)) {
        int startParamIndex=cleaned.indexOf('(') + 1;
        int endParamIndex=ThinUtil.skipChars(cleaned,startParamIndex,'(','\'');
        String quotedParameter=Const.trim(cleaned.substring(startParamIndex,endParamIndex));
        if (quotedParameter.startsWith("'") && quotedParameter.endsWith("'")) {
          String parameterName=quotedParameter.substring(1,quotedParameter.length() - 1);
          int startValueIndex=cleaned.indexOf('=',endParamIndex + 1) + 1;
          String quotedValue=Const.trim(cleaned.substring(startValueIndex));
          if (quotedValue.startsWith("'") && quotedValue.endsWith("'")) {
            String parameterValue=quotedValue.substring(1,quotedValue.length() - 1);
            Condition subCondition=new Condition(parameterName,Condition.FUNC_TRUE,parameterName,new ValueMetaAndData(new ValueMeta("string",ValueMetaInterface.TYPE_STRING),Const.NVL(parameterValue,"")));
            subCondition.setOperator(orConditionOperator);
            parentCondition.addCondition(subCondition);
            if (Const.isEmpty(parameterName)) {
              throw new KettleSQLException("A parameter name can not be empty in : " + clause);
            }
          }
 else {
            throw new KettleSQLException("A parameter value has to always be a string between single quotes in : " + clause);
          }
        }
 else {
          throw new KettleSQLException("Parameter name between single quotes expected in : " + clause);
        }
      }
 else {
        if (Pattern.matches("^NOT\\s*\\(.*\\)$",cleaned)) {
          negation=true;
          cleaned=Const.trim(cleaned.substring(3));
        }
        if (cleaned.startsWith("(") && cleaned.endsWith(")")) {
          cleaned=cleaned.substring(1,cleaned.length() - 1);
          Condition c=splitConditionByOperator(cleaned,parentCondition,Condition.OPERATOR_NONE);
          c.setNegated(negation);
        }
 else {
          Condition subCondition=parseAtomicCondition(cleaned);
          subCondition.setOperator(orConditionOperator);
          parentCondition.addCondition(subCondition);
        }
      }
    }
  }
  return parentCondition;
}
