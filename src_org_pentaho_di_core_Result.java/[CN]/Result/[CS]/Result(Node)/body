{
  this();
  nrLinesInput=Const.toLong(XMLHandler.getTagValue(node,"lines_input"),0L);
  nrLinesOutput=Const.toLong(XMLHandler.getTagValue(node,"lines_output"),0L);
  nrLinesRead=Const.toLong(XMLHandler.getTagValue(node,"lines_read"),0L);
  nrLinesRead=Const.toLong(XMLHandler.getTagValue(node,"lines_written"),0L);
  nrLinesUpdated=Const.toLong(XMLHandler.getTagValue(node,"lines_updated"),0L);
  nrLinesRejected=Const.toLong(XMLHandler.getTagValue(node,"lines_rejected"),0L);
  nrLinesDeleted=Const.toLong(XMLHandler.getTagValue(node,"lines_deleted"),0L);
  nrErrors=Const.toLong(XMLHandler.getTagValue(node,"nr_errors"),0L);
  nrFilesRetrieved=Const.toLong(XMLHandler.getTagValue(node,"nr_files_retrieved"),0L);
  entryNr=Const.toLong(XMLHandler.getTagValue(node,"entry_nr"),0L);
  result="Y".equalsIgnoreCase(XMLHandler.getTagValue(node,"result"));
  exitStatus=Integer.parseInt(XMLHandler.getTagValue(node,"exit_status"));
  stopped="Y".equalsIgnoreCase(XMLHandler.getTagValue(node,"is_stopped"));
  Node resultFilesNode=XMLHandler.getSubNode(node,XML_FILES_TAG);
  int nrResultFiles=XMLHandler.countNodes(resultFilesNode,XML_FILE_TAG);
  for (int i=0; i < nrResultFiles; i++) {
    try {
      ResultFile resultFile=new ResultFile(XMLHandler.getSubNodeByNr(resultFilesNode,XML_FILE_TAG,i));
      resultFiles.put(resultFile.getFile().toString(),resultFile);
    }
 catch (    IOException e) {
      LogWriter.getInstance().logError("Execution result","Unexpected error reading back a ResultFile object from XML",e);
    }
  }
  Node resultRowsNode=XMLHandler.getSubNode(node,XML_ROWS_TAG);
  int nrResultRows=XMLHandler.countNodes(resultFilesNode,RowMeta.XML_DATA_TAG);
  if (nrResultRows > 0) {
    RowMeta rowMeta=new RowMeta(XMLHandler.getSubNode(resultRowsNode,RowMeta.XML_META_TAG));
    for (int i=0; i < nrResultRows; i++) {
      Object[] rowData=rowMeta.getRow(XMLHandler.getSubNodeByNr(resultRowsNode,RowMeta.XML_META_TAG,i));
      rows.add(new RowMetaAndData(rowMeta,rowData));
    }
  }
}
