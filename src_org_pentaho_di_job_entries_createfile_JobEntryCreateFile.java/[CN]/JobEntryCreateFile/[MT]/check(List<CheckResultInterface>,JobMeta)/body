{
  if (filename == null) {
    remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("JobEntryCreateFile.CheckRemark.FilenameIsNotDefined"),this));
  }
 else {
    remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("JobEntryCreateFile.CheckRemark.FilenameIsDefined"),this));
    String realFileName=environmentSubstitute(getFilename());
    FileObject fileObject=null;
    try {
      fileObject=KettleVFS.getFileObject(realFileName);
      if (fileObject != null) {
        if (fileObject.exists() && isFailIfFileExists()) {
          remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("JobEntryCreateFile.CheckRemark.FileExists",realFileName),this));
        }
 else         if (fileObject.exists()) {
          remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("JobEntryCreateFile.CheckRemark.FileExists",realFileName),this));
        }
 else {
          remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("JobEntryCreateFile.CheckRemark.FileDoesNotExist",realFileName),this));
        }
        try {
          fileObject.close();
        }
 catch (        IOException ignored) {
        }
      }
 else {
        remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_WARNING,Messages.getString("JobEntryCreateFile.CheckRemark.CouldNotConvertToRealFile",filename),this));
      }
    }
 catch (    IOException ex) {
      remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("JobEntryCreateFile.CheckRemark.IOException",realFileName,ex.getMessage()),this));
    }
  }
}
