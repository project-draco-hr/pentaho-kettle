{
  XMLOutputMeta xmlOutputMeta=new XMLOutputMeta();
  xmlOutputMeta.setDefault();
  TransMeta transMeta=mock(TransMeta.class);
  StepMeta stepInfo=mock(StepMeta.class);
  RowMetaInterface prev=mock(RowMetaInterface.class);
  Repository repos=mock(Repository.class);
  IMetaStore metastore=mock(IMetaStore.class);
  RowMetaInterface info=mock(RowMetaInterface.class);
  ArrayList<CheckResultInterface> remarks=new ArrayList<>();
  xmlOutputMeta.check(remarks,transMeta,stepInfo,prev,new String[]{"input"},new String[]{"output"},info,new Variables(),repos,metastore);
  assertEquals(2,remarks.size());
  assertEquals("Step is receiving info from other steps.",remarks.get(0).getText());
  assertEquals("File specifications are not checked.",remarks.get(1).getText());
  XMLField xmlField=new XMLField();
  xmlField.setFieldName("aField");
  xmlField.setType(1);
  xmlField.setLength(10);
  xmlField.setPrecision(3);
  xmlOutputMeta.setOutputFields(new XMLField[]{xmlField});
  when(prev.size()).thenReturn(1);
  remarks.clear();
  xmlOutputMeta.check(remarks,transMeta,stepInfo,prev,new String[]{"input"},new String[]{"output"},info,new Variables(),repos,metastore);
  assertEquals(4,remarks.size());
  assertEquals("Step is connected to previous one, receiving 1 fields",remarks.get(0).getText());
  assertEquals("All output fields are found in the input stream.",remarks.get(1).getText());
  assertEquals("Step is receiving info from other steps.",remarks.get(2).getText());
  assertEquals("File specifications are not checked.",remarks.get(3).getText());
}
