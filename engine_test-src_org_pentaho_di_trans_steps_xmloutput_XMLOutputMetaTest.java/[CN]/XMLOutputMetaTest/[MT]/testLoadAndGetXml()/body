{
  XMLOutputMeta xmlOutputMeta=new XMLOutputMeta();
  Node stepnode=getTestNode();
  DatabaseMeta dbMeta=mock(DatabaseMeta.class);
  IMetaStore metaStore=mock(IMetaStore.class);
  xmlOutputMeta.loadXML(stepnode,Collections.singletonList(dbMeta),metaStore);
  assertEquals("xmlOutputFile",xmlOutputMeta.getFileName());
  assertFalse(xmlOutputMeta.isDoNotOpenNewFileInit());
  assertFalse(xmlOutputMeta.isServletOutput());
  assertEquals("pentaho.xml",xmlOutputMeta.getExtension());
  assertTrue(xmlOutputMeta.isStepNrInFilename());
  assertTrue(xmlOutputMeta.isDateInFilename());
  assertTrue(xmlOutputMeta.isTimeInFilename());
  assertFalse(xmlOutputMeta.isSpecifyFormat());
  assertTrue(StringUtil.isEmpty(xmlOutputMeta.getDateTimeFormat()));
  assertFalse(xmlOutputMeta.isAddToResultFiles());
  assertFalse(xmlOutputMeta.isZipped());
  assertEquals("UTF-8",xmlOutputMeta.getEncoding());
  assertTrue(StringUtil.isEmpty(xmlOutputMeta.getNameSpace()));
  assertEquals("Rows",xmlOutputMeta.getMainElement());
  assertEquals("Row",xmlOutputMeta.getRepeatElement());
  assertEquals(0,xmlOutputMeta.getSplitEvery());
  assertTrue(xmlOutputMeta.isOmitNullValues());
  XMLField[] outputFields=xmlOutputMeta.getOutputFields();
  assertEquals(2,outputFields.length);
  assertEquals("fieldOne",outputFields[0].getFieldName());
  assertEquals(XMLField.ContentType.Element,outputFields[0].getContentType());
  assertEquals("fieldTwo",outputFields[1].getFieldName());
  assertEquals(XMLField.ContentType.Attribute,outputFields[1].getContentType());
  assertEquals("    <encoding>UTF-8</encoding>\n" + "    <name_space/>\n" + "    <xml_main_element>Rows</xml_main_element>\n"+ "    <xml_repeat_element>Row</xml_repeat_element>\n"+ "    <file>\n"+ "      <name>xmlOutputFile</name>\n"+ "      <extention>pentaho.xml</extention>\n"+ "      <servlet_output>N</servlet_output>\n"+ "      <do_not_open_newfile_init>N</do_not_open_newfile_init>\n"+ "      <split>Y</split>\n"+ "      <add_date>Y</add_date>\n"+ "      <add_time>Y</add_time>\n"+ "      <SpecifyFormat>N</SpecifyFormat>\n"+ "      <omit_null_values>Y</omit_null_values>\n"+ "      <date_time_format/>\n"+ "      <add_to_result_filenames>N</add_to_result_filenames>\n"+ "      <zipped>N</zipped>\n"+ "      <splitevery>0</splitevery>\n"+ "    </file>\n"+ "    <fields>\n"+ "      <field>\n"+ "        <content_type>Element</content_type>\n"+ "        <name>fieldOne</name>\n"+ "        <element/>\n"+ "        <type>Number</type>\n"+ "        <format/>\n"+ "        <currency/>\n"+ "        <decimal/>\n"+ "        <group/>\n"+ "        <nullif/>\n"+ "        <length>-1</length>\n"+ "        <precision>-1</precision>\n"+ "      </field>\n"+ "      <field>\n"+ "        <content_type>Attribute</content_type>\n"+ "        <name>fieldTwo</name>\n"+ "        <element/>\n"+ "        <type>String</type>\n"+ "        <format/>\n"+ "        <currency/>\n"+ "        <decimal/>\n"+ "        <group/>\n"+ "        <nullif/>\n"+ "        <length>-1</length>\n"+ "        <precision>-1</precision>\n"+ "      </field>\n"+ "    </fields>\n",xmlOutputMeta.getXML());
}
