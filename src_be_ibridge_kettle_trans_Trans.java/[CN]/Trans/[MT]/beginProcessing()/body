{
  try {
    currentDate=new Date();
    logDate=new Date();
    startDate=Const.MIN_DATE;
    endDate=currentDate;
    SimpleDateFormat df=new SimpleDateFormat(REPLAY_DATE_FORMAT);
    log.logBasic(toString(),Messages.getString("Trans.Log.TransformationCanBeReplayed") + df.format(currentDate));
    Database ldb=null;
    try {
      DatabaseMeta logcon=transMeta.getLogConnection();
      if (logcon != null) {
        ldb=new Database(logcon);
        log.logDetailed(toString(),Messages.getString("Trans.Log.OpeningLogConnection") + transMeta.getLogConnection() + "]");
        ldb.connect();
        Row lastr=ldb.getLastLogDate(transMeta.getLogTable(),transMeta.getName(),false,Messages.getString("Trans.Row.Status.End"));
        if (lastr != null && lastr.size() > 0) {
          Value last=lastr.getValue(0);
          if (last != null && !last.isNull()) {
            startDate=last.getDate();
            log.logDetailed(toString(),Messages.getString("Trans.Log.StartDateFound") + startDate);
          }
        }
        if (transMeta.getMaxDateConnection() != null && transMeta.getMaxDateTable() != null && transMeta.getMaxDateTable().length() > 0 && transMeta.getMaxDateField() != null && transMeta.getMaxDateField().length() > 0) {
          log.logDetailed(toString(),Messages.getString("Trans.Log.LookingForMaxdateConnection") + transMeta.getMaxDateConnection() + "]");
          DatabaseMeta maxcon=transMeta.getMaxDateConnection();
          if (maxcon != null) {
            Database maxdb=new Database(maxcon);
            try {
              log.logDetailed(toString(),Messages.getString("Trans.Log.OpeningMaximumDateConnection"));
              maxdb.connect();
              String sql="SELECT MAX(" + transMeta.getMaxDateField() + ") FROM "+ transMeta.getMaxDateTable();
              Row r1=maxdb.getOneRow(sql);
              if (r1 != null) {
                Value maxvalue=r1.getValue(0);
                if (maxvalue != null && !maxvalue.isNull() && maxvalue.getDate() != null) {
                  log.logDetailed(toString(),Messages.getString("Trans.Log.LastDateFoundOnTheMaxdateConnection") + r1);
                  endDate.setTime((long)(maxvalue.getDate().getTime() + (transMeta.getMaxDateOffset() * 1000)));
                }
              }
 else {
                log.logDetailed(toString(),Messages.getString("Trans.Log.NoLastDateFoundOnTheMaxdateConnection"));
              }
            }
 catch (            KettleException e) {
              throw new KettleTransException(Messages.getString("Trans.Log.ErrorConnectingToDatabase") + transMeta.getMaxDateConnection() + "]",e);
            }
 finally {
              maxdb.disconnect();
            }
          }
 else {
            throw new KettleTransException(Messages.getString("Trans.Exception.MaximumDateConnectionCouldNotBeFound") + transMeta.getMaxDateConnection() + "] couldn't be found!");
          }
        }
        if (transMeta.nrDependencies() > 0) {
          log.logDetailed(toString(),Messages.getString("Trans.Log.CheckingForMaxDependencyDate"));
          depDate=Const.MIN_DATE;
          Date maxdepdate=Const.MIN_DATE;
          if (lastr != null && lastr.size() > 0) {
            Value dep=lastr.getValue(1);
            if (dep != null && !dep.isNull()) {
              maxdepdate=dep.getDate();
              depDate=dep.getDate();
            }
          }
          for (int i=0; i < transMeta.nrDependencies(); i++) {
            TransDependency td=transMeta.getDependency(i);
            DatabaseMeta depcon=td.getDatabase();
            if (depcon != null) {
              Database depdb=new Database(depcon);
              try {
                depdb.connect();
                String sql="SELECT MAX(" + td.getFieldname() + ") FROM "+ td.getTablename();
                Row r1=depdb.getOneRow(sql);
                if (r1 != null) {
                  Value maxvalue=r1.getValue(0);
                  if (maxvalue != null && !maxvalue.isNull() && maxvalue.getDate() != null) {
                    log.logDetailed(toString(),Messages.getString("Trans.Log.FoundDateFromTable") + td.getTablename() + "."+ td.getFieldname()+ " = "+ maxvalue.toString());
                    if (maxvalue.getDate().getTime() > maxdepdate.getTime()) {
                      maxdepdate=maxvalue.getDate();
                    }
                  }
 else {
                    throw new KettleTransException(Messages.getString("Trans.Exception.UnableToGetDependencyInfoFromDB") + td.getDatabase().getName() + "."+ td.getTablename()+ "."+ td.getFieldname()+ "]");
                  }
                }
 else {
                  throw new KettleTransException(Messages.getString("Trans.Exception.UnableToGetDependencyInfoFromDB2") + td.getDatabase().getName() + "."+ td.getTablename()+ "."+ td.getFieldname()+ "]");
                }
              }
 catch (              KettleException e) {
                throw new KettleTransException(Messages.getString("Trans.Exception.ErrorInDatabase") + td.getDatabase() + "]",e);
              }
 finally {
                depdb.disconnect();
              }
            }
 else {
              throw new KettleTransException(Messages.getString("Trans.Exception.ConnectionCouldNotBeFound") + td.getDatabase() + "] couldn't be found!");
            }
            log.logDetailed(toString(),Messages.getString("Trans.Log.Maxdepdate") + (new Value("maxdepdate",maxdepdate)).toString());
          }
          if (maxdepdate.getTime() > depDate.getTime()) {
            depDate=maxdepdate;
            startDate=Const.MIN_DATE;
          }
        }
 else {
          depDate=currentDate;
        }
        Value id_batch=new Value("ID_BATCH",(long)1);
        if (transMeta.isBatchIdUsed()) {
          ldb.getNextValue(transMeta.getCounters(),transMeta.getLogTable(),id_batch);
          transMeta.setBatchId(id_batch.getInteger());
        }
      }
      if (transMeta.getMaxDateDifference() > 0.0 && startDate.getTime() > Const.MIN_DATE.getTime()) {
        Date maxdesired=new Date(startDate.getTime() + ((long)transMeta.getMaxDateDifference() * 1000));
        if (endDate.compareTo(maxdesired) > 0)         endDate=maxdesired;
      }
      if (logcon != null && transMeta.getLogTable() != null && transMeta.getName() != null) {
        ldb.writeLogRecord(transMeta.getLogTable(),transMeta.isBatchIdUsed(),transMeta.getBatchId(),false,transMeta.getName(),Messages.getString("Trans.Dialog.Description.Start"),0L,0L,0L,0L,0L,0L,startDate,endDate,logDate,depDate,currentDate,null);
      }
    }
 catch (    KettleException e) {
      throw new KettleTransException(Messages.getString("Trans.Exception.ErrorWritingLogRecordToTable") + transMeta.getLogTable() + "]",e);
    }
 finally {
      if (ldb != null)       ldb.disconnect();
    }
  }
 catch (  KettleException e) {
    throw new KettleTransException(Messages.getString("Trans.Exception.UnableToBeginProcessingTransformation"),e);
  }
}
