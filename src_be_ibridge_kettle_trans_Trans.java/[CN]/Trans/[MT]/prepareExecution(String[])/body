{
  RowSet rs;
  int nroutput;
  int nrcopies;
  int prevcopies;
  int nextcopies;
  startDate=null;
  if (arguments != null)   transMeta.setArguments(arguments);
  if (transMeta.getName() == null) {
    if (transMeta.getFilename() != null) {
      log.logMinimal(toString(),Messages.getString("Trans.Log.DispacthingStartedForFilename",transMeta.getFilename()));
    }
  }
 else {
    log.logMinimal(toString(),Messages.getString("Trans.Log.DispacthingStartedForTransformation",transMeta.getName()));
  }
  if (transMeta.getArguments() != null) {
    log.logMinimal(toString(),Messages.getString("Trans.Log.NumberOfArgumentsDetected",String.valueOf(transMeta.getArguments().length)));
  }
  if (isSafeModeEnabled()) {
    log.logBasic(toString(),Messages.getString("Trans.Log.SafeModeIsEnabled",transMeta.getName()));
  }
  if (getReplayDate() != null) {
    SimpleDateFormat df=new SimpleDateFormat(REPLAY_DATE_FORMAT);
    log.logBasic(toString(),Messages.getString("Trans.Log.ThisIsAReplayTransformation") + df.format(getReplayDate()));
  }
 else {
    log.logBasic(toString(),Messages.getString("Trans.Log.ThisIsNotAReplayTransformation"));
  }
  steps=new ArrayList();
  rowsets=new ArrayList();
  if (isMonitored() && transMeta.nrSteps() < 10) {
    transMeta.sortStepsNatural();
    transMeta.sortHopsNatural();
  }
  ArrayList hopsteps=transMeta.getTransHopSteps(false);
  log.logDetailed(toString(),Messages.getString("Trans.Log.FoundDefferentSteps",String.valueOf(hopsteps.size())));
  log.logDetailed(toString(),Messages.getString("Trans.Log.AllocatingRowsets"));
  for (int i=0; i < hopsteps.size(); i++) {
    StepMeta stepMeta=(StepMeta)hopsteps.get(i);
    log.logDetailed(toString(),Messages.getString("Trans.Log.AllocateingRowsetsForStep",String.valueOf(i),stepMeta.getName()));
    nroutput=transMeta.findNrNextSteps(stepMeta);
    for (int n=0; n < nroutput; n++) {
      StepMeta nsi=transMeta.findNextStep(stepMeta,n);
      nextcopies=nsi.getCopies();
      prevcopies=stepMeta.getCopies();
      log.logDetailed(toString(),Messages.getString("Trans.Log.copiesInfo",String.valueOf(prevcopies),String.valueOf(nextcopies)));
      int disptype;
      if (prevcopies == 1 && nextcopies == 1) {
        disptype=TYPE_DISP_1_1;
        nrcopies=1;
      }
 else       if (prevcopies == 1 && nextcopies > 1) {
        disptype=TYPE_DISP_1_N;
        nrcopies=nextcopies;
      }
 else       if (prevcopies > 1 && nextcopies == 1) {
        disptype=TYPE_DISP_N_1;
        nrcopies=prevcopies;
      }
 else       if (prevcopies == nextcopies) {
        disptype=TYPE_DISP_N_N;
        nrcopies=nextcopies;
      }
 else {
        log.logError(toString(),Messages.getString("Trans.Log.AllowedRelationships"));
        log.logError(toString(),Messages.getString("Trans.Log.CannotHaveXYRelationships"));
        return false;
      }
      for (int c=0; c < nrcopies; c++) {
        rs=new RowSet(transMeta.getSizeRowset());
switch (disptype) {
case TYPE_DISP_1_1:
          rs.setThreadNameFromToCopy(stepMeta.getName(),0,nsi.getName(),0);
        break;
case TYPE_DISP_1_N:
      rs.setThreadNameFromToCopy(stepMeta.getName(),0,nsi.getName(),c);
    break;
case TYPE_DISP_N_1:
  rs.setThreadNameFromToCopy(stepMeta.getName(),c,nsi.getName(),0);
break;
case TYPE_DISP_N_N:
rs.setThreadNameFromToCopy(stepMeta.getName(),c,nsi.getName(),c);
break;
}
rowsets.add(rs);
log.logDetailed(toString(),Messages.getString("Trans.TransformationAllocatedNewRowset",rs.toString()));
}
}
log.logDetailed(toString(),Messages.getString("Trans.Log.AllocatedRowsets",String.valueOf(rowsets.size()),String.valueOf(i),stepMeta.getName()) + " ");
}
log.logDetailed(toString(),Messages.getString("Trans.Log.AllocatingStepsAndStepData"));
for (int i=0; i < hopsteps.size(); i++) {
StepMeta stepMeta=(StepMeta)hopsteps.get(i);
String stepid=stepMeta.getStepID();
log.logDetailed(toString(),Messages.getString("Trans.Log.TransformationIsToAllocateStep",stepMeta.getName(),stepid));
nrcopies=stepMeta.getCopies();
if (log.isDebug()) log.logDebug(toString(),Messages.getString("Trans.Log.StepHasNumberRowCopies",String.valueOf(nrcopies)));
for (int c=0; c < nrcopies; c++) {
if (!hasStepStarted(stepMeta.getName(),c)) {
StepMetaDataCombi combi=new StepMetaDataCombi();
combi.stepname=stepMeta.getName();
combi.copy=c;
combi.meta=stepMeta.getStepMetaInterface();
StepDataInterface data=combi.meta.getStepData();
combi.data=data;
StepInterface step=combi.meta.getStep(stepMeta,data,c,transMeta,this);
((BaseStep)step).setSafeModeEnabled(safeModeEnabled);
LocalVariables.getInstance().createKettleVariables(((BaseStep)step).getName(),Thread.currentThread().getName(),true);
combi.step=step;
steps.add(combi);
log.logDetailed(toString(),Messages.getString("Trans.Log.TransformationHasAllocatedANewStep",stepMeta.getName(),String.valueOf(c)));
}
}
}
setThreadsOnRowSets();
try {
beginProcessing();
}
 catch (KettleTransException kte) {
log.logError(toString(),kte.getMessage());
return false;
}
if (preview && preview_steps != null) {
for (int i=0; i < steps.size(); i++) {
StepMetaDataCombi sid=(StepMetaDataCombi)steps.get(i);
BaseStep rt=(BaseStep)sid.step;
for (int x=0; x < preview_steps.length; x++) {
if (preview_steps[x].equalsIgnoreCase(rt.getStepname()) && rt.getCopy() == 0) {
rt.previewSize=preview_sizes[x];
rt.previewBuffer=new ArrayList();
}
}
}
}
log.logBasic(toString(),Messages.getString("Trans.Log.InitialisingSteps",String.valueOf(steps.size())));
StepInitThread initThreads[]=new StepInitThread[steps.size()];
Thread[] threads=new Thread[steps.size()];
for (int i=0; i < steps.size(); i++) {
final StepMetaDataCombi sid=(StepMetaDataCombi)steps.get(i);
initThreads[i]=new StepInitThread(sid,log);
threads[i]=new Thread(initThreads[i]);
threads[i].setName("init of " + sid.stepname + "."+ sid.copy+ " ("+ threads[i].getName()+ ")");
threads[i].start();
}
for (int i=0; i < threads.length; i++) {
try {
threads[i].join();
}
 catch (Exception ex) {
ex.printStackTrace();
log.logError("Error with init thread: " + ex.getMessage(),ex.getMessage());
}
}
boolean ok=true;
for (int i=0; i < initThreads.length; i++) {
StepMetaDataCombi combi=initThreads[i].getCombi();
if (!initThreads[i].isOk()) {
log.logError(toString(),Messages.getString("Trans.Log.StepFailedToInit",combi.stepname + "." + combi.copy));
combi.data.setStatus(StepDataInterface.STATUS_STOPPED);
ok=false;
}
 else {
combi.data.setStatus(StepDataInterface.STATUS_IDLE);
log.logDetailed(toString(),Messages.getString("Trans.Log.StepInitialized",combi.stepname + "." + combi.copy));
}
}
if (!ok) {
log.logError(toString(),Messages.getString("Trans.Log.FailToInitializeAtLeastOneStep"));
for (int i=0; i < initThreads.length; i++) {
StepMetaDataCombi combi=initThreads[i].getCombi();
if (initThreads[i].isOk()) {
combi.data.setStatus(StepDataInterface.STATUS_HALTED);
}
}
return false;
}
return true;
}
