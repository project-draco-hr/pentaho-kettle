{
  final Connection shared=mock(Connection.class);
  final int dbsAmount=300;
  final int threadsAmount=50;
  List<DatabaseStub> dbs=new ArrayList<DatabaseStub>(dbsAmount);
  Set<Integer> copies=new HashSet<Integer>(dbsAmount);
  ExecutorService pool=Executors.newFixedThreadPool(threadsAmount);
  try {
    CompletionService<DatabaseStub> service=new ExecutorCompletionService<DatabaseStub>(pool);
    for (int i=0; i < dbsAmount; i++) {
      service.submit(createStubDatabase(shared));
      copies.add(i + 1);
    }
    for (int i=0; i < dbsAmount; i++) {
      DatabaseStub db=service.take().get();
      assertEquals(shared,db.getConnection());
      dbs.add(db);
    }
  }
  finally {
    pool.shutdown();
  }
  for (  DatabaseStub db : dbs) {
    String message=String.format("There should be %d shares of the connection, but found %d",dbsAmount,db.getOpened());
    assertTrue(message,db.getOpened() == 0 || db.getOpened() == dbsAmount);
    assertTrue("Each instance should have a unique 'copy' value",copies.remove(db.getCopy()));
  }
  assertTrue(copies.isEmpty());
}
