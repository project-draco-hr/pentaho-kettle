{
  PluginRegistry registry=PluginRegistry.getInstance();
  Class<? extends PluginTypeInterface> pluginType=RepositoryPluginType.class;
  List<PluginInterface> plugins=registry.getPlugins(pluginType);
  String[] names=new String[plugins.size()];
  for (int i=0; i < names.length; i++) {
    PluginInterface plugin=plugins.get(i);
    names[i]=plugin.getName() + " : " + plugin.getDescription();
  }
  EnterSelectionDialog selectRepositoryType=new EnterSelectionDialog(this.shell,names,BaseMessages.getString(PKG,"RepositoryLogin.SelectRepositoryType"),BaseMessages.getString(PKG,"RepositoryLogin.SelectRepositoryTypeCreate"));
  String choice=selectRepositoryType.open();
  if (choice != null) {
    int index=selectRepositoryType.getSelectionNr();
    PluginInterface plugin=plugins.get(index);
    String id=plugin.getIds()[0];
    try {
      RepositoryMeta repositoryMeta=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,id,RepositoryMeta.class);
      RepositoryDialogInterface dialog=getRepositoryDialog(plugin,repositoryMeta,input,this.shell);
      RepositoryMeta meta=dialog.open(MODE.ADD);
      if (meta != null) {
        if (meta.getName() != null) {
          input.addRepository(meta);
          fillRepositories();
          model.setSelectedRepository(meta);
          writeData();
        }
      }
    }
 catch (    Exception e) {
      log.logDetailed(BaseMessages.getString(PKG,"RepositoryLogin.ErrorCreatingRepository",e.getLocalizedMessage()));
      new ErrorDialog(shell,BaseMessages.getString(PKG,"Dialog.Error"),BaseMessages.getString(PKG,"RepositoryLogin.ErrorCreatingRepository",e.getLocalizedMessage()),e);
    }
  }
}
