{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"WMIInputDialog.WMIInput"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"WMIInputDialog.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(BaseMessages.getString(PKG,"System.Button.Preview"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wPreview,wCancel},margin,null);
  wlPassword=new Label(shell,SWT.RIGHT);
  wlPassword.setText(BaseMessages.getString(PKG,"WMIInputDialog.Password"));
  props.setLook(wlPassword);
  fdlPassword=new FormData();
  fdlPassword.left=new FormAttachment(0,0);
  fdlPassword.right=new FormAttachment(middle,-margin);
  fdlPassword.bottom=new FormAttachment(wOK,-2 * margin);
  wlPassword.setLayoutData(fdlPassword);
  wPassword=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPassword);
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(middle,0);
  fdPassword.right=new FormAttachment(100,0);
  fdPassword.bottom=new FormAttachment(wOK,-2 * margin);
  wPassword.setLayoutData(fdPassword);
  wPassword.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
      StringUtil.checkPasswordVisible(wPassword);
    }
  }
);
  wlUserName=new Label(shell,SWT.RIGHT);
  wlUserName.setText(BaseMessages.getString(PKG,"WMIInputDialog.UserName"));
  props.setLook(wlUserName);
  fdlUserName=new FormData();
  fdlUserName.left=new FormAttachment(0,0);
  fdlUserName.right=new FormAttachment(middle,-margin);
  fdlUserName.bottom=new FormAttachment(wPassword,-margin);
  wlUserName.setLayoutData(fdlUserName);
  wUserName=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wUserName);
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(middle,0);
  fdUserName.right=new FormAttachment(100,0);
  fdUserName.bottom=new FormAttachment(wPassword,-margin);
  wUserName.setLayoutData(fdUserName);
  wlHost=new Label(shell,SWT.RIGHT);
  wlHost.setText(BaseMessages.getString(PKG,"WMIInputDialog.Host"));
  props.setLook(wlHost);
  fdlHost=new FormData();
  fdlHost.left=new FormAttachment(0,0);
  fdlHost.right=new FormAttachment(middle,-margin);
  fdlHost.bottom=new FormAttachment(wUserName,-margin);
  wlHost.setLayoutData(fdlHost);
  wHost=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wHost);
  wHost.addModifyListener(lsMod);
  fdHost=new FormData();
  fdHost.left=new FormAttachment(middle,0);
  fdHost.right=new FormAttachment(100,0);
  fdHost.bottom=new FormAttachment(wUserName,-margin);
  wHost.setLayoutData(fdHost);
  wlDomain=new Label(shell,SWT.RIGHT);
  wlDomain.setText(BaseMessages.getString(PKG,"WMIInputDialog.Domain"));
  props.setLook(wlDomain);
  fdlDomain=new FormData();
  fdlDomain.left=new FormAttachment(0,0);
  fdlDomain.right=new FormAttachment(middle,-margin);
  fdlDomain.bottom=new FormAttachment(wHost,-margin);
  wlDomain.setLayoutData(fdlDomain);
  wDomain=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDomain);
  wDomain.addModifyListener(lsMod);
  fdDomain=new FormData();
  fdDomain.left=new FormAttachment(middle,0);
  fdDomain.right=new FormAttachment(100,0);
  fdDomain.bottom=new FormAttachment(wHost,-margin);
  wDomain.setLayoutData(fdDomain);
  wlLimit=new Label(shell,SWT.RIGHT);
  wlLimit.setText(BaseMessages.getString(PKG,"WMIInputDialog.LimitSize"));
  props.setLook(wlLimit);
  fdlLimit=new FormData();
  fdlLimit.left=new FormAttachment(0,0);
  fdlLimit.right=new FormAttachment(middle,-margin);
  fdlLimit.bottom=new FormAttachment(wDomain,-2 * margin);
  wlLimit.setLayoutData(fdlLimit);
  wLimit=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wLimit);
  wLimit.addModifyListener(lsMod);
  fdLimit=new FormData();
  fdLimit.left=new FormAttachment(middle,0);
  fdLimit.right=new FormAttachment(100,0);
  fdLimit.bottom=new FormAttachment(wDomain,-2 * margin);
  wLimit.setLayoutData(fdLimit);
  wlVariables=new Label(shell,SWT.RIGHT);
  wlVariables.setText(BaseMessages.getString(PKG,"WMIInputDialog.ReplaceVariables"));
  props.setLook(wlVariables);
  fdlVariables=new FormData();
  fdlVariables.left=new FormAttachment(0,0);
  fdlVariables.right=new FormAttachment(middle,-margin);
  fdlVariables.bottom=new FormAttachment(wLimit,-margin);
  wlVariables.setLayoutData(fdlVariables);
  wVariables=new Button(shell,SWT.CHECK);
  props.setLook(wVariables);
  fdVariables=new FormData();
  fdVariables.left=new FormAttachment(middle,0);
  fdVariables.right=new FormAttachment(100,0);
  fdVariables.bottom=new FormAttachment(wLimit,-margin);
  wVariables.setLayoutData(fdVariables);
  wVariables.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      input.setChanged();
      setWMIToolTip();
    }
  }
);
  wlPosition=new Label(shell,SWT.NONE);
  props.setLook(wlPosition);
  fdlPosition=new FormData();
  fdlPosition.left=new FormAttachment(0,0);
  fdlPosition.right=new FormAttachment(100,0);
  fdlPosition.bottom=new FormAttachment(wVariables,-margin);
  wlPosition.setLayoutData(fdlPosition);
  wlWMI=new Label(shell,SWT.NONE);
  wlWMI.setText(BaseMessages.getString(PKG,"WMIInputDialog.WMI"));
  props.setLook(wlWMI);
  fdlWMI=new FormData();
  fdlWMI.left=new FormAttachment(0,0);
  fdlWMI.top=new FormAttachment(wStepname,margin * 2);
  wlWMI.setLayoutData(fdlWMI);
  wWMI=new StyledTextComp(transMeta,shell,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL,"");
  props.setLook(wWMI,Props.WIDGET_STYLE_FIXED);
  fdWMI=new FormData();
  fdWMI.left=new FormAttachment(0,0);
  fdWMI.top=new FormAttachment(wlWMI,margin);
  fdWMI.right=new FormAttachment(100,-2 * margin);
  fdWMI.bottom=new FormAttachment(wlPosition,0);
  wWMI.setLayoutData(fdWMI);
  wWMI.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      setWMIToolTip();
      setPosition();
    }
  }
);
  wWMI.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      setPosition();
    }
    public void keyReleased(    KeyEvent e){
      setPosition();
    }
  }
);
  wWMI.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      setPosition();
    }
    public void focusLost(    FocusEvent e){
      setPosition();
    }
  }
);
  wWMI.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      setPosition();
    }
    public void mouseDown(    MouseEvent e){
      setPosition();
    }
    public void mouseUp(    MouseEvent e){
      setPosition();
    }
  }
);
  wWMI.addModifyListener(lsMod);
  wWMI.addLineStyleListener(new SQLValuesHighlight());
  wWMI.addKeyListener(new ControlSpaceKeyAdapter(transMeta,wWMI));
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wPreview.addListener(SWT.Selection,lsPreview);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wLimit.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  input.setChanged(changed);
  setSize();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
