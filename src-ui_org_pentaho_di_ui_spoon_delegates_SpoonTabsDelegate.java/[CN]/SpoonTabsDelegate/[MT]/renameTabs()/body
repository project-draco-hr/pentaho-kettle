{
  List<TabMapEntry> list=new ArrayList<TabMapEntry>(tabMap);
  for (  TabMapEntry entry : list) {
    if (entry.getTabItem().isDisposed()) {
      tabMap.remove(entry.getObjectName());
      continue;
    }
    TabItem before=entry.getTabItem();
    Object managedObject=entry.getObject().getManagedObject();
    if (managedObject != null) {
      if (entry.getObject() instanceof TransGraph) {
        TransMeta transMeta=(TransMeta)managedObject;
        entry.getTabItem().setText(makeTransGraphTabName(transMeta));
        String toolTipText=Messages.getString("Spoon.TabTrans.Tooltip",makeTransGraphTabName(transMeta));
        if (Const.isWindows() && !Const.isEmpty(transMeta.getFilename()))         toolTipText+=Const.CR + Const.CR + transMeta.getFilename();
        entry.getTabItem().setToolTipText(toolTipText);
      }
 else       if (entry.getObject() instanceof JobGraph) {
        JobMeta jobMeta=(JobMeta)managedObject;
        entry.getTabItem().setText(makeJobGraphTabName(jobMeta));
        String toolTipText=Messages.getString("Spoon.TabJob.Tooltip",makeJobGraphTabName(jobMeta));
        if (Const.isWindows() && !Const.isEmpty(jobMeta.getFilename()))         toolTipText+=Const.CR + Const.CR + jobMeta.getFilename();
        entry.getTabItem().setToolTipText(toolTipText);
      }
    }
    String after=entry.getTabItem().getText();
    if (!before.getText().equals(after)) {
      entry.setObjectName(after);
      if (entry.getObject() instanceof TransGraph) {
        spoon.delegates.trans.removeTransformation(before.getText());
        spoon.delegates.trans.addTransformation(after,(TransMeta)entry.getObject().getManagedObject());
      }
      if (entry.getObject() instanceof JobGraph) {
        spoon.delegates.jobs.removeJob(before.getText());
        spoon.delegates.jobs.addJob(after,(JobMeta)entry.getObject().getManagedObject());
      }
    }
  }
  spoon.setShellText();
}
