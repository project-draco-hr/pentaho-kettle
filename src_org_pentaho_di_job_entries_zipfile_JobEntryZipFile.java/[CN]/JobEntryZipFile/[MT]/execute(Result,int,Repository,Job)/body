{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  boolean Fileexists=false;
  String realZipfilename=environmentSubstitute(zipFilename);
  String realWildcard=environmentSubstitute(wildcard);
  String realWildcardExclude=environmentSubstitute(wildcardexclude);
  String realTargetdirectory=environmentSubstitute(sourcedirectory);
  String realMovetodirectory=environmentSubstitute(movetodirectory);
  File tempFile=null;
  File fileZip=null;
  boolean renameOk=false;
  if (realZipfilename != null) {
    FileObject fileObject=null;
    try {
      fileObject=KettleVFS.getFileObject(realZipfilename);
      if (fileObject.exists()) {
        Fileexists=true;
        log.logDebug(toString(),Messages.getString("JobZipFiles.Zip_FileExists1.Label") + realZipfilename + Messages.getString("JobZipFiles.Zip_FileExists2.Label"));
      }
 else {
        Fileexists=false;
      }
      if (ifzipfileexists == 3 && Fileexists) {
        result.setResult(false);
        result.setNrErrors(1);
      }
 else       if (ifzipfileexists == 2 && Fileexists) {
        if (addfiletoresult) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realZipfilename),parentJob.getName(),toString());
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
        }
        result.setResult(true);
      }
 else       if (afterzip == 2 && realMovetodirectory == null) {
        result.setResult(false);
        result.setNrErrors(1);
        log.logError(toString(),Messages.getString("JobZipFiles.AfterZip_No_DestinationFolder_Defined.Label"));
      }
 else {
        if (ifzipfileexists == 0 && Fileexists) {
          DateFormat dateFormat=new SimpleDateFormat("hhmmss_mmddyyyy");
          realZipfilename=realZipfilename + "_" + dateFormat.format(new Date())+ ".zip";
          log.logDebug(toString(),Messages.getString("JobZipFiles.Zip_FileNameChange1.Label") + realZipfilename + Messages.getString("JobZipFiles.Zip_FileNameChange1.Label"));
        }
 else         if (ifzipfileexists == 1 && Fileexists) {
          fileZip=new File(realZipfilename);
          tempFile=File.createTempFile(fileZip.getName(),null);
          tempFile.delete();
          renameOk=fileZip.renameTo(tempFile);
          if (!renameOk) {
            log.logError(toString(),Messages.getString("JobZipFiles.Cant_Rename_Temp1.Label") + fileZip.getAbsolutePath() + Messages.getString("JobZipFiles.Cant_Rename_Temp2.Label")+ tempFile.getAbsolutePath()+ Messages.getString("JobZipFiles.Cant_Rename_Temp3.Label"));
          }
          log.logDebug(toString(),Messages.getString("JobZipFiles.Zip_FileAppend1.Label") + realZipfilename + Messages.getString("JobZipFiles.Zip_FileAppend2.Label"));
        }
        File f=new File(realTargetdirectory);
        String[] filelist=f.list();
        log.logDetailed(toString(),Messages.getString("JobZipFiles.Files_Found1.Label") + filelist.length + Messages.getString("JobZipFiles.Files_Found2.Label")+ realTargetdirectory+ Messages.getString("JobZipFiles.Files_Found3.Label"));
        Pattern pattern=null;
        if (!Const.isEmpty(realWildcard)) {
          pattern=Pattern.compile(realWildcard);
        }
        Pattern patternexclude=null;
        if (!Const.isEmpty(realWildcardExclude)) {
          patternexclude=Pattern.compile(realWildcardExclude);
        }
        byte[] buffer=new byte[18024];
        FileOutputStream dest=new FileOutputStream(realZipfilename);
        BufferedOutputStream buff=new BufferedOutputStream(dest);
        ZipOutputStream out=new ZipOutputStream(buff);
        TreeSet<String> fileSet=new TreeSet<String>();
        if (renameOk) {
          ZipInputStream zin=new ZipInputStream(new FileInputStream(tempFile));
          ZipEntry entry=zin.getNextEntry();
          while (entry != null) {
            String name=entry.getName();
            if (!fileSet.contains(name)) {
              out.putNextEntry(new ZipEntry(name));
              int len;
              while ((len=zin.read(buffer)) > 0) {
                out.write(buffer,0,len);
              }
              fileSet.add(name);
            }
            entry=zin.getNextEntry();
          }
          zin.close();
        }
        out.setMethod(ZipOutputStream.DEFLATED);
        if (compressionrate == 0) {
          out.setLevel(Deflater.NO_COMPRESSION);
        }
 else         if (compressionrate == 1) {
          out.setLevel(Deflater.DEFAULT_COMPRESSION);
        }
        if (compressionrate == 2) {
          out.setLevel(Deflater.BEST_COMPRESSION);
        }
        if (compressionrate == 3) {
          out.setLevel(Deflater.BEST_SPEED);
        }
        String[] ZippedFiles=new String[filelist.length];
        int FileNum=0;
        for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
          boolean getIt=true;
          boolean getItexclude=false;
          if (pattern != null) {
            Matcher matcher=pattern.matcher(filelist[i]);
            getIt=matcher.matches();
          }
          if (patternexclude != null) {
            Matcher matcherexclude=patternexclude.matcher(filelist[i]);
            getItexclude=matcherexclude.matches();
          }
          String targetFilename=realTargetdirectory + Const.FILE_SEPARATOR + filelist[i];
          File file=new File(targetFilename);
          if (getIt && !getItexclude && !file.isDirectory()&& !fileSet.contains(filelist[i])) {
            log.logDebug(toString(),Messages.getString("JobZipFiles.Add_FilesToZip1.Label") + filelist[i] + Messages.getString("JobZipFiles.Add_FilesToZip2.Label")+ realTargetdirectory+ Messages.getString("JobZipFiles.Add_FilesToZip3.Label"));
            FileInputStream in=new FileInputStream(targetFilename);
            out.putNextEntry(new ZipEntry(filelist[i]));
            int len;
            while ((len=in.read(buffer)) > 0) {
              out.write(buffer,0,len);
            }
            out.flush();
            out.closeEntry();
            in.close();
            ZippedFiles[FileNum]=filelist[i];
            FileNum=FileNum + 1;
          }
        }
        out.close();
        buff.close();
        dest.close();
        if (afterzip == 1 || afterzip == 2) {
          for (int i=0; i < ZippedFiles.length; i++) {
            if (ZippedFiles[i] != null) {
              FileObject fileObjectd=KettleVFS.getFileObject(realTargetdirectory + Const.FILE_SEPARATOR + ZippedFiles[i]);
              System.gc();
              if (afterzip == 1) {
                boolean deleted=fileObjectd.delete();
                if (!deleted) {
                  result.setResult(false);
                  result.setNrErrors(1);
                  log.logError(toString(),Messages.getString("JobZipFiles.Cant_Delete_File1.Label") + realTargetdirectory + Const.FILE_SEPARATOR+ ZippedFiles[i]+ Messages.getString("JobZipFiles.Cant_Delete_File2.Label"));
                }
                log.logDebug(toString(),Messages.getString("JobZipFiles.File_Deleted1.Label") + realTargetdirectory + Const.FILE_SEPARATOR+ ZippedFiles[i]+ Messages.getString("JobZipFiles.File_Deleted2.Label"));
              }
 else               if (afterzip == 2) {
                try {
                  FileObject fileObjectm=KettleVFS.getFileObject(realMovetodirectory + Const.FILE_SEPARATOR + ZippedFiles[i]);
                  fileObjectd.moveTo(fileObjectm);
                }
 catch (                IOException e) {
                  log.logError(toString(),Messages.getString("JobZipFiles.Cant_Move_File1.Label") + ZippedFiles[i] + Messages.getString("JobZipFiles.Cant_Move_File2.Label")+ e.getMessage());
                  result.setResult(false);
                  result.setNrErrors(1);
                }
                log.logDebug(toString(),Messages.getString("JobZipFiles.File_Moved1.Label") + ZippedFiles[i] + Messages.getString("JobZipFiles.File_Moved2.Label"));
              }
            }
          }
        }
        if (isAddFileToResult()) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realZipfilename),parentJob.getName(),toString());
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
        }
        result.setResult(true);
      }
    }
 catch (    IOException e) {
      log.logError(toString(),Messages.getString("JobZipFiles.Cant_CreateZipFile1.Label") + realZipfilename + Messages.getString("JobZipFiles.Cant_CreateZipFile2.Label")+ e.getMessage());
      result.setResult(false);
      result.setNrErrors(1);
    }
 finally {
      if (fileObject != null) {
        try {
          fileObject.close();
        }
 catch (        IOException ex) {
        }
        ;
      }
    }
  }
 else {
    result.setResult(false);
    result.setNrErrors(1);
    log.logError(toString(),Messages.getString("JobZipFiles.No_ZipFile_Defined.Label"));
  }
  return result;
}
