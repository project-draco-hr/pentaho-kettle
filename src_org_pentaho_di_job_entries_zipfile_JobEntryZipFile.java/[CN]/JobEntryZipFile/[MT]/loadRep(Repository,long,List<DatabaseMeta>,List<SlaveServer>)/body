{
  try {
    super.loadRep(rep,id_jobentry,databases,slaveServers);
    zipFilename=rep.getJobEntryAttributeString(id_jobentry,"zipfilename");
    compressionrate=(int)rep.getJobEntryAttributeInteger(id_jobentry,"compressionrate");
    ifzipfileexists=(int)rep.getJobEntryAttributeInteger(id_jobentry,"ifzipfileexists");
    afterzip=(int)rep.getJobEntryAttributeInteger(id_jobentry,"afterzip");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    wildcardexclude=rep.getJobEntryAttributeString(id_jobentry,"wildcardexclude");
    sourcedirectory=rep.getJobEntryAttributeString(id_jobentry,"sourcedirectory");
    movetodirectory=rep.getJobEntryAttributeString(id_jobentry,"movetodirectory");
    addfiletoresult=rep.getJobEntryAttributeBoolean(id_jobentry,"addfiletoresult");
    isfromprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"isfromprevious");
    createparentfolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createparentfolder");
    adddate=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    addtime=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    SpecifyFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyFormat");
    date_time_format=rep.getJobEntryAttributeString(id_jobentry,"date_time_format");
    createMoveToDirectory=rep.getJobEntryAttributeBoolean(id_jobentry,"createMoveToDirectory");
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobEntryZipFile.UnableLoadJobEntryRep","" + id_jobentry),dbe);
  }
}
