{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    zipFilename=XMLHandler.getTagValue(entrynode,"zipfilename");
    compressionrate=Const.toInt(XMLHandler.getTagValue(entrynode,"compressionrate"),-1);
    ifzipfileexists=Const.toInt(XMLHandler.getTagValue(entrynode,"ifzipfileexists"),-1);
    afterzip=Const.toInt(XMLHandler.getTagValue(entrynode,"afterzip"),-1);
    wildcard=XMLHandler.getTagValue(entrynode,"wildcard");
    wildcardexclude=XMLHandler.getTagValue(entrynode,"wildcardexclude");
    sourcedirectory=XMLHandler.getTagValue(entrynode,"sourcedirectory");
    movetodirectory=XMLHandler.getTagValue(entrynode,"movetodirectory");
    addfiletoresult="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addfiletoresult"));
    isfromprevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"isfromprevious"));
    createparentfolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createparentfolder"));
    adddate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"adddate"));
    addtime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addtime"));
    SpecifyFormat="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"SpecifyFormat"));
    date_time_format=XMLHandler.getTagValue(entrynode,"date_time_format");
    createMoveToDirectory="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createMoveToDirectory"));
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"JobEntryZipFile.UnableLoadJobEntryXML"),xe);
  }
}
