{
  this.logBasic("Getting Field Row Meta.");
  this.logBasic("Getting Rows.");
  if (first == true) {
    first=false;
    try {
      final RowMetaInterface rowMeta=meta.getRowMeta();
      FilterCollection filter=new FilterCollection();
      for (int i=0; i < meta.getFilterList().size(); i++) {
        ReadFilter filterItem=meta.getFilterList().get(i);
        if (filterItem.getOperator().equalsIgnoreCase("not")) {
          filter.add(FilterOperator.NOT);
        }
 else         if (filterItem.getOperator().equalsIgnoreCase("or")) {
          filter.add(FilterOperator.OR);
        }
        filter.add(filterItem.getFieldName(),filterItem.getComparator(),filterItem.getValue());
        this.logBasic("Setting filter: [" + filterItem.getFieldName() + ","+ filterItem.getComparator()+ ","+ filterItem.getValue()+ "]");
      }
      int rowCount=data.helper.getModelDataCount(meta.getModelName(),filter);
      int offset=0;
      int limit=meta.getReadBatchSize();
      while (offset < rowCount) {
        if (isStopped()) {
          break;
        }
        RowCollection rows=data.helper.getModelData(meta.getModelName(),filter,meta.getMappings(),offset,limit);
        for (        Row row : rows) {
          try {
            putRow(row,rowMeta);
          }
 catch (          KettleStepException e) {
            logError("An error occurred, processing will be stopped: " + e.getMessage());
            setErrors(1);
            stopAll();
          }
          incrementLinesInput();
          offset++;
        }
      }
    }
 catch (    Exception e) {
      throw new KettleException(e.getMessage());
    }
  }
  this.logBasic("Process Ended.");
  setOutputDone();
  return false;
}
