{
  result.setEntryNr(nr);
  LogWriter logwriter=log;
  Log4jFileAppender appender=null;
  int backupLogLevel=log.getLogLevel();
  if (setLogfile) {
    try {
      appender=LogWriter.createFileAppender(environmentSubstitute(getLogFilename()),true,setAppendLogfile);
    }
 catch (    KettleException e) {
      log.logError(toString(),"Unable to open file appender for file [" + getLogFilename() + "] : "+ e.toString());
      log.logError(toString(),Const.getStackTracker(e));
      result.setNrErrors(1);
      result.setResult(false);
      return result;
    }
    log.addAppender(appender);
    log.setLogLevel(loglevel);
    logwriter=LogWriter.getInstance(environmentSubstitute(getLogFilename()),true,loglevel);
  }
  SlaveServer remoteSlaveServer=null;
  if (!Const.isEmpty(remoteSlaveServerName)) {
    String realRemoteSlaveServerName=environmentSubstitute(remoteSlaveServerName);
    remoteSlaveServer=parentJob.getJobMeta().findSlaveServer(realRemoteSlaveServerName);
    if (remoteSlaveServer == null) {
      throw new KettleException(Messages.getString("JobJob.Exception.UnableToFindRemoteSlaveServer",realRemoteSlaveServerName));
    }
  }
  try {
    if (parentJob.getJobMeta() != null) {
      parentJob.getJobMeta().setInternalKettleVariables();
    }
    JobMeta jobMeta=null;
    boolean fromRepository=rep != null && !Const.isEmpty(jobname) && directory != null;
    boolean fromXMLFile=!Const.isEmpty(filename);
    if (fromRepository) {
      if (log.isDetailed())       log.logDetailed(toString(),"Loading job from repository : [" + directory + " : "+ environmentSubstitute(jobname)+ "]");
      jobMeta=new JobMeta(logwriter,rep,environmentSubstitute(jobname),rep.getDirectoryTree().findDirectory(environmentSubstitute(directory)));
      jobMeta.setParentVariableSpace(parentJob);
    }
 else     if (fromXMLFile) {
      if (log.isDetailed())       log.logDetailed(toString(),"Loading job from XML file : [" + environmentSubstitute(filename) + "]");
      jobMeta=new JobMeta(logwriter,environmentSubstitute(filename),rep,null);
      jobMeta.setParentVariableSpace(parentJob);
    }
    if (jobMeta == null) {
      throw new KettleException("Unable to load the job: please specify the name and repository directory OR a filename");
    }
    verifyRecursiveExecution(parentJob,jobMeta);
    if (fromRepository) {
      if (log.isBasic())       log.logBasic(toString(),"Starting job, loaded from repository : [" + directory + " : "+ environmentSubstitute(jobname)+ "]");
    }
 else     if (fromXMLFile) {
      if (log.isDetailed())       log.logDetailed(toString(),"Starting job, loaded from XML file : [" + environmentSubstitute(filename) + "]");
    }
    int iteration=0;
    String args1[]=arguments;
    if (args1 == null || args1.length == 0) {
      args1=parentJob.getJobMeta().getArguments();
    }
    copyVariablesFrom(parentJob);
    setParentVariableSpace(parentJob);
    String args[]=null;
    if (args1 != null) {
      args=new String[args1.length];
      for (int idx=0; idx < args1.length; idx++) {
        args[idx]=environmentSubstitute(args1[idx]);
      }
    }
    NamedParams namedParam=new NamedParamsDefault();
    if (parameters != null) {
      for (int idx=0; idx < parameters.length; idx++) {
        if (!Const.isEmpty(parameters[idx])) {
          namedParam.addParameterDefinition(parameters[idx],"","Job entry runtime");
          if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
            namedParam.setParameterValue(parameters[idx],Const.NVL(environmentSubstitute(parameterValues[idx]),""));
          }
 else {
            namedParam.setParameterValue(parameters[idx],"");
          }
        }
      }
    }
    RowMetaAndData resultRow=null;
    boolean first=true;
    List<RowMetaAndData> rows=new ArrayList<RowMetaAndData>(result.getRows());
    while ((first && !execPerRow) || (execPerRow && rows != null && iteration < rows.size() && result.getNrErrors() == 0)) {
      if (execPerRow) {
        result.getRows().clear();
      }
      first=false;
      if (rows != null && execPerRow) {
        resultRow=(RowMetaAndData)rows.get(iteration);
      }
 else {
        resultRow=null;
      }
      Result oneResult=new Result();
      List<RowMetaAndData> sourceRows=null;
      if (execPerRow) {
        if (argFromPrevious) {
          args=null;
          if (resultRow != null) {
            args=new String[resultRow.size()];
            for (int i=0; i < resultRow.size(); i++) {
              args[i]=resultRow.getString(i,null);
            }
          }
        }
 else {
          List<RowMetaAndData> newList=new ArrayList<RowMetaAndData>();
          newList.add(resultRow);
          sourceRows=newList;
        }
        if (paramsFromPrevious) {
          if (parameters != null) {
            for (int idx=0; idx < parameters.length; idx++) {
              if (!Const.isEmpty(parameters[idx])) {
                if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
                  namedParam.setParameterValue(parameters[idx],Const.NVL(environmentSubstitute(parameterValues[idx]),""));
                }
 else {
                  String fieldValue="";
                  if (resultRow != null) {
                    fieldValue=resultRow.getString(parameterFieldNames[idx],"");
                  }
                  namedParam.setParameterValue(parameters[idx],Const.NVL(fieldValue,""));
                }
              }
            }
          }
        }
      }
 else {
        if (argFromPrevious) {
          args=null;
          if (resultRow != null) {
            args=new String[resultRow.size()];
            for (int i=0; i < resultRow.size(); i++) {
              args[i]=resultRow.getString(i,null);
            }
          }
        }
 else {
          sourceRows=result.getRows();
        }
        if (paramsFromPrevious) {
          if (parameters != null) {
            for (int idx=0; idx < parameters.length; idx++) {
              if (!Const.isEmpty(parameters[idx])) {
                if (Const.isEmpty(Const.trim(parameterFieldNames[idx]))) {
                  namedParam.setParameterValue(parameters[idx],Const.NVL(environmentSubstitute(parameterValues[idx]),""));
                }
 else {
                  String fieldValue="";
                  if (resultRow != null) {
                    fieldValue=resultRow.getString(parameterFieldNames[idx],"");
                  }
                  namedParam.setParameterValue(parameters[idx],Const.NVL(fieldValue,""));
                }
              }
            }
          }
        }
      }
      if (remoteSlaveServer == null) {
        Job job=new Job(logwriter,StepLoader.getInstance(),rep,jobMeta);
        job.shareVariablesWith(this);
        job.setInternalKettleVariables(this);
        job.copyParametersFrom(jobMeta);
        job.clearParameters();
        String[] parameterNames=job.listParameters();
        for (int idx=0; idx < parameterNames.length; idx++) {
          String thisValue=namedParam.getParameterValue(parameterNames[idx]);
          job.setParameterValue(parameterNames[idx],thisValue);
        }
        job.activateParameters();
        job.setSourceRows(sourceRows);
        job.beginProcessing();
        parentJob.getJobTracker().addJobTracker(job.getJobTracker());
        job.getJobTracker().setParentJobTracker(parentJob.getJobTracker());
        job.setParentJob(parentJob);
        if (parentJob.getJobMeta().isBatchIdPassed()) {
          job.setPassedBatchId(parentJob.getBatchId());
        }
        job.getJobMeta().setArguments(args);
        JobEntryJobRunner runner=new JobEntryJobRunner(job,result,nr);
        Thread jobRunnerThread=new Thread(runner);
        jobRunnerThread.setName(Const.NVL(job.getJobMeta().getName(),job.getJobMeta().getFilename()));
        jobRunnerThread.start();
        try {
          while (!runner.isFinished() && !parentJob.isStopped()) {
            try {
              Thread.sleep(0,1);
            }
 catch (            InterruptedException e) {
            }
          }
          if (parentJob.isStopped()) {
            job.stopAll();
            runner.waitUntilFinished();
            job.endProcessing("stop",new Result());
          }
 else {
            job.endProcessing(Database.LOG_STATUS_END,runner.getResult());
          }
        }
 catch (        KettleException je) {
          log.logError(toString(),"Unable to open job entry job with name [" + getName() + "] : "+ Const.CR+ je.toString());
          result.setNrErrors(1);
        }
        oneResult=runner.getResult();
      }
 else {
        JobExecutionConfiguration jobExecutionConfiguration=new JobExecutionConfiguration();
        jobExecutionConfiguration.setPreviousResult(result.clone());
        jobExecutionConfiguration.getPreviousResult().setRows(sourceRows);
        jobExecutionConfiguration.setArgumentStrings(args);
        jobExecutionConfiguration.setVariables(this);
        jobExecutionConfiguration.setRemoteServer(remoteSlaveServer);
        jobExecutionConfiguration.setRepository(rep);
        jobExecutionConfiguration.setLogLevel(log.getLogLevel());
        try {
          Job.sendXMLToSlaveServer(jobMeta,jobExecutionConfiguration);
        }
 catch (        KettleException e) {
          parentJob.stopAll();
          throw e;
        }
        SlaveServerJobStatus jobStatus=null;
        while (!parentJob.isStopped() && waitingToFinish) {
          try {
            jobStatus=remoteSlaveServer.getJobStatus(jobMeta.getName());
            if (jobStatus.getResult() != null) {
              oneResult=jobStatus.getResult();
              break;
            }
          }
 catch (          Exception e1) {
            log.logError(toString(),"Unable to contact slave server [" + remoteSlaveServer + "] to verify the status of job ["+ jobMeta.getName()+ "]");
            oneResult.setNrErrors(1L);
            break;
          }
          try {
            Thread.sleep(10000);
          }
 catch (          InterruptedException e) {
          }
          ;
        }
        if (!waitingToFinish) {
          oneResult=new Result();
          oneResult.setResult(true);
        }
        if (parentJob.isStopped()) {
          try {
            if (jobStatus == null || jobStatus.isRunning()) {
              remoteSlaveServer.stopJob(jobMeta.getName());
            }
          }
 catch (          Exception e1) {
            log.logError(toString(),"Unable to contact slave server [" + remoteSlaveServer + "] to stop job ["+ jobMeta.getName()+ "]");
            oneResult.setNrErrors(1L);
            break;
          }
        }
      }
      if (iteration == 0) {
        result.clear();
      }
      result.add(oneResult);
      if (oneResult.getResult() == false) {
        result.setNrErrors(result.getNrErrors() + 1);
      }
      iteration++;
    }
  }
 catch (  KettleException ke) {
    log.logError(toString(),"Error running job entry 'job' : " + ke.toString());
    log.logError(toString(),Const.getStackTracker(ke));
    result.setResult(false);
    result.setNrErrors(1L);
  }
  if (setLogfile) {
    if (appender != null) {
      log.removeAppender(appender);
      appender.close();
      ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_LOG,appender.getFile(),parentJob.getJobname(),getName());
      result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
    }
    log.setLogLevel(backupLogLevel);
  }
  if (result.getNrErrors() > 0) {
    result.setResult(false);
  }
 else {
    result.setResult(true);
  }
  return result;
}
