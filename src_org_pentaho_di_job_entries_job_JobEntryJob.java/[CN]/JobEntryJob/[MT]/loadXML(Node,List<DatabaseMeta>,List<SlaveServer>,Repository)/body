{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    setFileName(XMLHandler.getTagValue(entrynode,"filename"));
    setJobName(XMLHandler.getTagValue(entrynode,"jobname"));
    argFromPrevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    execPerRow="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"exec_per_row"));
    setLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_logfile"));
    addDate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_date"));
    addTime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_time"));
    logfile=XMLHandler.getTagValue(entrynode,"logfile");
    logext=XMLHandler.getTagValue(entrynode,"logext");
    loglevel=LogWriter.getLogLevel(XMLHandler.getTagValue(entrynode,"loglevel"));
    setAppendLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_append_logfile"));
    String remoteSlaveServerName=XMLHandler.getTagValue(entrynode,"slave_server_name");
    remoteSlaveServer=SlaveServer.findSlaveServer(slaveServers,remoteSlaveServerName);
    directory=XMLHandler.getTagValue(entrynode,"directory");
    int argnr=0;
    while (XMLHandler.getTagValue(entrynode,"argument" + argnr) != null)     argnr++;
    arguments=new String[argnr];
    for (int a=0; a < argnr; a++)     arguments[a]=XMLHandler.getTagValue(entrynode,"argument" + a);
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException("Unable to load 'job' job entry from XML node",xe);
  }
}
