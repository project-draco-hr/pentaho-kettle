{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      changed=true;
    }
  }
;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.JobProperties.ShellText"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlJobname=new Label(shell,SWT.RIGHT);
  wlJobname.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.JobName.Label"));
  props.setLook(wlJobname);
  fdlJobname=new FormData();
  fdlJobname.left=new FormAttachment(0,0);
  fdlJobname.right=new FormAttachment(middle,0);
  fdlJobname.top=new FormAttachment(0,margin);
  wlJobname.setLayoutData(fdlJobname);
  wJobname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wJobname);
  wJobname.addModifyListener(lsMod);
  fdJobname=new FormData();
  fdJobname.left=new FormAttachment(middle,0);
  fdJobname.top=new FormAttachment(0,margin);
  fdJobname.right=new FormAttachment(100,0);
  wJobname.setLayoutData(fdJobname);
  wlDirectory=new Label(shell,SWT.RIGHT);
  wlDirectory.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.Directory.Label"));
  props.setLook(wlDirectory);
  fdlDirectory=new FormData();
  fdlDirectory.left=new FormAttachment(0,0);
  fdlDirectory.right=new FormAttachment(middle,-margin);
  fdlDirectory.top=new FormAttachment(wJobname,margin);
  wlDirectory.setLayoutData(fdlDirectory);
  wbDirectory=new Button(shell,SWT.PUSH);
  wbDirectory.setText("...");
  props.setLook(wbDirectory);
  fdbDirectory=new FormData();
  fdbDirectory.top=new FormAttachment(wJobname,margin);
  fdbDirectory.right=new FormAttachment(100,0);
  wbDirectory.setLayoutData(fdbDirectory);
  wbDirectory.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      RepositoryDirectory directoryFrom=jobMeta.getDirectory();
      long idDirectoryFrom=directoryFrom.getID();
      SelectDirectoryDialog sdd=new SelectDirectoryDialog(shell,SWT.NONE,rep);
      RepositoryDirectory rd=sdd.open();
      if (rd != null) {
        if (idDirectoryFrom != rd.getID()) {
          try {
            rep.moveJob(jobMeta.getName(),idDirectoryFrom,rd.getID());
            log.logDetailed(getClass().getName(),"Moved directory to [" + rd.getPath() + "]");
            jobMeta.setDirectory(rd);
            wDirectory.setText(jobMeta.getDirectory().getPath());
          }
 catch (          KettleDatabaseException dbe) {
            jobMeta.setDirectory(directoryFrom);
            MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
            mb.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.Dialog.ErrorChangingDirectory.Title"));
            mb.setMessage(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.Dialog.ErrorChangingDirectory.Message"));
            mb.open();
          }
        }
 else {
        }
      }
    }
  }
);
  wDirectory=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDirectory);
  wDirectory.setEditable(false);
  fdDirectory=new FormData();
  fdDirectory.top=new FormAttachment(wJobname,margin);
  fdDirectory.left=new FormAttachment(middle,0);
  fdDirectory.right=new FormAttachment(wbDirectory,0);
  wDirectory.setLayoutData(fdDirectory);
  wlLogconnection=new Label(shell,SWT.RIGHT);
  wlLogconnection.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.LogConnection.Label"));
  props.setLook(wlLogconnection);
  fdlLogconnection=new FormData();
  fdlLogconnection.top=new FormAttachment(wDirectory,margin * 4);
  fdlLogconnection.left=new FormAttachment(0,0);
  fdlLogconnection.right=new FormAttachment(middle,0);
  wlLogconnection.setLayoutData(fdlLogconnection);
  wbLogconnection=new Button(shell,SWT.PUSH);
  wbLogconnection.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.System.Button.Edit"));
  fdbLogconnection=new FormData();
  fdbLogconnection.top=new FormAttachment(wDirectory,margin * 4);
  fdbLogconnection.right=new FormAttachment(100,0);
  wbLogconnection.setLayoutData(fdbLogconnection);
  wbLogconnection.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DatabaseMeta databaseMeta=jobMeta.findDatabase(wLogconnection.getText());
      if (databaseMeta == null)       databaseMeta=new DatabaseMeta();
      DatabaseDialog cid=new DatabaseDialog(shell,databaseMeta);
      if (cid.open() != null) {
        wLogconnection.setText(databaseMeta.getName());
      }
    }
  }
);
  wLogconnection=new CCombo(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wLogconnection);
  wLogconnection.addModifyListener(lsMod);
  fdLogconnection=new FormData();
  fdLogconnection.top=new FormAttachment(wDirectory,margin * 4);
  fdLogconnection.left=new FormAttachment(middle,0);
  fdLogconnection.right=new FormAttachment(wbLogconnection,-margin);
  wLogconnection.setLayoutData(fdLogconnection);
  for (int i=0; i < jobMeta.nrDatabases(); i++) {
    DatabaseMeta meta=jobMeta.getDatabase(i);
    wLogconnection.add(meta.getName());
  }
  wLogconnection.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setFlags();
    }
  }
);
  wlLogtable=new Label(shell,SWT.RIGHT);
  wlLogtable.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.LogTable.Label"));
  props.setLook(wlLogtable);
  fdlLogtable=new FormData();
  fdlLogtable.left=new FormAttachment(0,0);
  fdlLogtable.right=new FormAttachment(middle,0);
  fdlLogtable.top=new FormAttachment(wLogconnection,margin);
  wlLogtable.setLayoutData(fdlLogtable);
  wLogtable=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wLogtable);
  wLogtable.addModifyListener(lsMod);
  fdLogtable=new FormData();
  fdLogtable.left=new FormAttachment(middle,0);
  fdLogtable.top=new FormAttachment(wLogconnection,margin);
  fdLogtable.right=new FormAttachment(100,0);
  wLogtable.setLayoutData(fdLogtable);
  wlBatch=new Label(shell,SWT.RIGHT);
  wlBatch.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.UseBatchID.Label"));
  props.setLook(wlBatch);
  fdlBatch=new FormData();
  fdlBatch.left=new FormAttachment(0,0);
  fdlBatch.top=new FormAttachment(wLogtable,margin * 3);
  fdlBatch.right=new FormAttachment(middle,-margin);
  wlBatch.setLayoutData(fdlBatch);
  wBatch=new Button(shell,SWT.CHECK);
  props.setLook(wBatch);
  fdBatch=new FormData();
  fdBatch.left=new FormAttachment(middle,0);
  fdBatch.top=new FormAttachment(wLogtable,margin * 3);
  fdBatch.right=new FormAttachment(100,0);
  wBatch.setLayoutData(fdBatch);
  wlBatchTrans=new Label(shell,SWT.RIGHT);
  wlBatchTrans.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.PassBatchID.Label"));
  props.setLook(wlBatchTrans);
  fdlBatchTrans=new FormData();
  fdlBatchTrans.left=new FormAttachment(0,0);
  fdlBatchTrans.top=new FormAttachment(wBatch,margin);
  fdlBatchTrans.right=new FormAttachment(middle,-margin);
  wlBatchTrans.setLayoutData(fdlBatchTrans);
  wBatchTrans=new Button(shell,SWT.CHECK);
  props.setLook(wBatchTrans);
  fdBatchTrans=new FormData();
  fdBatchTrans.left=new FormAttachment(middle,0);
  fdBatchTrans.top=new FormAttachment(wBatch,margin);
  fdBatchTrans.right=new FormAttachment(100,0);
  wBatchTrans.setLayoutData(fdBatchTrans);
  wlLogfield=new Label(shell,SWT.RIGHT);
  wlLogfield.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.UseLogField.Label"));
  props.setLook(wlLogfield);
  fdlLogfield=new FormData();
  fdlLogfield.left=new FormAttachment(0,0);
  fdlLogfield.top=new FormAttachment(wBatchTrans,margin);
  fdlLogfield.right=new FormAttachment(middle,-margin);
  wlLogfield.setLayoutData(fdlLogfield);
  wLogfield=new Button(shell,SWT.CHECK);
  props.setLook(wLogfield);
  fdLogfield=new FormData();
  fdLogfield.left=new FormAttachment(middle,0);
  fdLogfield.top=new FormAttachment(wBatchTrans,margin);
  fdLogfield.right=new FormAttachment(100,0);
  wLogfield.setLayoutData(fdLogfield);
  Label wlSharedObjectsFile=new Label(shell,SWT.RIGHT);
  wlSharedObjectsFile.setText(Messages.getString("JobDialog.SharedObjectsFile.Label"));
  props.setLook(wlSharedObjectsFile);
  FormData fdlSharedObjectsFile=new FormData();
  fdlSharedObjectsFile.left=new FormAttachment(0,0);
  fdlSharedObjectsFile.right=new FormAttachment(middle,-margin);
  fdlSharedObjectsFile.top=new FormAttachment(wLogfield,3 * margin);
  wlSharedObjectsFile.setLayoutData(fdlSharedObjectsFile);
  wSharedObjectsFile=new TextVar(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wlSharedObjectsFile.setToolTipText(Messages.getString("JobDialog.SharedObjectsFile.Tooltip"));
  wSharedObjectsFile.setToolTipText(Messages.getString("JobDialog.SharedObjectsFile.Tooltip"));
  props.setLook(wSharedObjectsFile);
  FormData fdSharedObjectsFile=new FormData();
  fdSharedObjectsFile.left=new FormAttachment(middle,0);
  fdSharedObjectsFile.top=new FormAttachment(wLogfield,3 * margin);
  fdSharedObjectsFile.right=new FormAttachment(100,0);
  wSharedObjectsFile.setLayoutData(fdSharedObjectsFile);
  wSharedObjectsFile.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      sharedObjectsFileChanged=true;
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.System.Button.OK"));
  wSQL=new Button(shell,SWT.PUSH);
  wSQL.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.System.Button.SQL"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(be.ibridge.kettle.job.dialog.Messages.getString("JobDialog.System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wSQL,wCancel},margin,wSharedObjectsFile);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsSQL=new Listener(){
    public void handleEvent(    Event e){
      sql();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wSQL.addListener(SWT.Selection,lsSQL);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wJobname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  BaseStepDialog.setSize(shell);
  getData();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobMeta;
}
