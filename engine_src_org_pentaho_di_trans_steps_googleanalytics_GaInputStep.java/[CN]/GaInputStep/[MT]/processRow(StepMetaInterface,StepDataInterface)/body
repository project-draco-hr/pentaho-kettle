{
  meta=(GaInputStepMeta)smi;
  data=(GaInputStepData)sdi;
  if (first) {
    first=false;
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    data.conversionMeta=new ValueMetaInterface[meta.getFeedField().length];
    for (int i=0; i < meta.getFeedField().length; i++) {
      ValueMetaInterface returnMeta=data.outputRowMeta.getValueMeta(i);
      ValueMetaInterface conversionMeta;
      if (meta.getFeedFieldType()[i].equals(GaInputStepMeta.FIELD_TYPE_CONFIDENCE_INTERVAL)) {
        conversionMeta=ValueMetaFactory.cloneValueMeta(returnMeta,ValueMetaInterface.TYPE_NUMBER);
      }
 else {
        conversionMeta=ValueMetaFactory.cloneValueMeta(returnMeta,ValueMetaInterface.TYPE_STRING);
      }
      conversionMeta.setConversionMask(meta.getConversionMask()[i]);
      conversionMeta.setDecimalSymbol(".");
      conversionMeta.setGroupingSymbol(null);
      data.conversionMeta[i]=conversionMeta;
    }
  }
  Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  DataEntry entry=getNextDataEntry();
  if (entry != null && (meta.getRowLimit() <= 0 || getLinesWritten() < meta.getRowLimit())) {
    for (int i=0; i < meta.getFeedField().length; i++) {
      String value=null;
      String fieldName=environmentSubstitute(meta.getFeedField()[i]);
      String fieldType=meta.getFeedFieldType()[i];
      if (fieldType.equals(GaInputStepMeta.FIELD_TYPE_CONFIDENCE_INTERVAL)) {
        Metric metric=entry.getMetric(fieldName);
        Double interval=metric.getConfidenceInterval();
        outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],interval);
      }
 else       if (fieldType.equals(GaInputStepMeta.FIELD_TYPE_DIMENSION)) {
        Dimension dim=entry.getDimension(fieldName);
        value=dim.getValue();
        outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],value);
      }
 else       if (fieldType.equals(GaInputStepMeta.FIELD_TYPE_METRIC)) {
        Metric metric=entry.getMetric(fieldName);
        value=metric.getValue();
        outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],value);
      }
 else       if (fieldType.equals(GaInputStepMeta.FIELD_TYPE_DATA_SOURCE_PROPERTY)) {
        DataSource d=data.feed.getDataSources().size() > 0 ? data.feed.getDataSources().get(0) : null;
        if (d != null) {
          value=d.getProperty(fieldName);
          outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],value);
        }
      }
 else       if (fieldType.equals(GaInputStepMeta.FIELD_TYPE_DATA_SOURCE_FIELD)) {
        DataSource d=data.feed.getDataSources().size() > 0 ? data.feed.getDataSources().get(0) : null;
        if (d != null) {
          if (fieldName.equalsIgnoreCase(GaInputStepMeta.FIELD_DATA_SOURCE_TABLE_ID)) {
            value=d.getTableId().getValue();
            outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],value);
          }
 else           if (fieldName.equalsIgnoreCase(GaInputStepMeta.FIELD_DATA_SOURCE_TABLE_NAME)) {
            value=d.getTableName().getValue();
            outputRow[i]=data.outputRowMeta.getValueMeta(i).convertData(data.conversionMeta[i],value);
          }
        }
      }
    }
    putRow(data.outputRowMeta,outputRow);
    if (checkFeedback(getLinesWritten())) {
      if (log.isBasic())       logBasic("Linenr " + getLinesWritten());
    }
    return true;
  }
 else {
    setOutputDone();
    return false;
  }
}
