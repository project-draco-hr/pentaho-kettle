{
  Row r=new Row();
  Value value;
  for (int i=0; i < meta.getFieldName().length; i++) {
    int valtype=Value.getType(meta.getFieldType()[i]);
    if (meta.getFieldName()[i] != null) {
      value=new Value(meta.getFieldName()[i],valtype);
      value.setLength(meta.getFieldLength()[i],meta.getFieldPrecision()[i]);
      String stringValue=meta.getValue()[i];
      if (stringValue == null || stringValue.length() == 0) {
        value.setNull();
        if (value.getType() == Value.VALUE_TYPE_NONE) {
          String message=Messages.getString("RowGenerator.CheckResult.SpecifyTypeError",value.getName(),value.getString());
          remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
        }
      }
 else {
switch (value.getType()) {
case Value.VALUE_TYPE_NUMBER:
          try {
            if (meta.getFieldFormat()[i] != null || meta.getDecimal()[i] != null || meta.getGroup()[i] != null || meta.getCurrency()[i] != null) {
              if (meta.getFieldFormat()[i] != null && meta.getFieldFormat()[i].length() >= 1)               data.df.applyPattern(meta.getFieldFormat()[i]);
              if (meta.getDecimal()[i] != null && meta.getDecimal()[i].length() >= 1)               data.dfs.setDecimalSeparator(meta.getDecimal()[i].charAt(0));
              if (meta.getGroup()[i] != null && meta.getGroup()[i].length() >= 1)               data.dfs.setGroupingSeparator(meta.getGroup()[i].charAt(0));
              if (meta.getCurrency()[i] != null && meta.getCurrency()[i].length() >= 1)               data.dfs.setCurrencySymbol(meta.getCurrency()[i]);
              data.df.setDecimalFormatSymbols(data.dfs);
            }
            value.setValue(data.nf.parse(stringValue).doubleValue());
          }
 catch (          Exception e) {
            String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Number",value.getName(),stringValue,e.toString());
            remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
          }
        break;
case Value.VALUE_TYPE_STRING:
      value.setValue(stringValue);
    break;
case Value.VALUE_TYPE_DATE:
  try {
    if (meta.getFieldFormat()[i] != null) {
      data.daf.applyPattern(meta.getFieldFormat()[i]);
      data.daf.setDateFormatSymbols(data.dafs);
    }
    value.setValue(data.daf.parse(stringValue));
  }
 catch (  Exception e) {
    String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Date",value.getName(),stringValue,e.toString());
    remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
  }
break;
case Value.VALUE_TYPE_INTEGER:
try {
value.setValue(Long.parseLong(stringValue));
}
 catch (Exception e) {
String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.Integer",value.getName(),stringValue,e.toString());
remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
}
break;
case Value.VALUE_TYPE_BIGNUMBER:
try {
value.setValue(new BigDecimal(stringValue));
}
 catch (Exception e) {
String message=Messages.getString("RowGenerator.BuildRow.Error.Parsing.BigNumber",value.getName(),stringValue,e.toString());
remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
}
break;
case Value.VALUE_TYPE_BOOLEAN:
value.setValue("Y".equalsIgnoreCase(stringValue) || "TRUE".equalsIgnoreCase(stringValue));
break;
case Value.VALUE_TYPE_BINARY:
value.setValue(stringValue.getBytes());
break;
default :
String message=Messages.getString("RowGenerator.CheckResult.SpecifyTypeError",value.getName(),value.getString());
remarks.add(new CheckResult(CheckResult.TYPE_RESULT_ERROR,message,null));
}
}
r.addValue(value);
}
}
return r;
}
