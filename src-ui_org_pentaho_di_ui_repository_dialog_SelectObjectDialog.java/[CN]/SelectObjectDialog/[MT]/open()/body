{
  Shell parent=getParent();
  dircolor=GUIResource.getInstance().getColorDirectory();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE| SWT.MIN| SWT.MAX);
  props.setLook(shell);
  shell.setImage(GUIResource.getInstance().getImageFolderConnections());
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(shellText);
  int margin=Const.MARGIN;
  ToolBar treeTb=new ToolBar(shell,SWT.HORIZONTAL | SWT.FLAT);
  wfilter=new ToolItem(treeTb,SWT.SEPARATOR);
  searchText=new Text(treeTb,SWT.SEARCH | SWT.CANCEL);
  searchText.setToolTipText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Search.FilterString.ToolTip"));
  wfilter.setControl(searchText);
  wfilter.setWidth(100);
  goSearch=new ToolItem(treeTb,SWT.PUSH);
  goSearch.setImage(GUIResource.getInstance().getImageSearchSmall());
  goSearch.setToolTipText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Search.Run"));
  expandAll=new ToolItem(treeTb,SWT.PUSH);
  expandAll.setImage(GUIResource.getInstance().getImageExpandAll());
  collapseAll=new ToolItem(treeTb,SWT.PUSH);
  collapseAll.setImage(GUIResource.getInstance().getImageCollapseAll());
  fdexpandAll=new FormData();
  fdexpandAll.right=new FormAttachment(100,-margin);
  fdexpandAll.top=new FormAttachment(0,margin);
  treeTb.setLayoutData(fdexpandAll);
  wlTree=new Label(shell,SWT.NONE);
  wlTree.setText(lineText);
  props.setLook(wlTree);
  fdlTree=new FormData();
  fdlTree.left=new FormAttachment(0,0);
  fdlTree.top=new FormAttachment(0,margin);
  wlTree.setLayoutData(fdlTree);
  wTree=new Tree(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  wTree.setHeaderVisible(true);
  props.setLook(wTree);
  nameColumn=new TreeColumn(wTree,SWT.LEFT);
  nameColumn.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Column.Name"));
  nameColumn.setWidth(350);
  nameColumn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      setSort(0);
    }
  }
);
  typeColumn=new TreeColumn(wTree,SWT.LEFT);
  typeColumn.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Column.Type"));
  typeColumn.setWidth(100);
  typeColumn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      setSort(1);
    }
  }
);
  userColumn=new TreeColumn(wTree,SWT.LEFT);
  userColumn.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Column.User"));
  userColumn.setWidth(100);
  userColumn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      setSort(2);
    }
  }
);
  changedColumn=new TreeColumn(wTree,SWT.LEFT);
  changedColumn.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Column.Changed"));
  changedColumn.setWidth(120);
  changedColumn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      setSort(3);
    }
  }
);
  descriptionColumn=new TreeColumn(wTree,SWT.LEFT);
  descriptionColumn.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Column.Description"));
  descriptionColumn.setWidth(120);
  descriptionColumn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      setSort(4);
    }
  }
);
  props.setLook(wTree);
  fdTree=new FormData();
  fdTree.left=new FormAttachment(0,0);
  fdTree.right=new FormAttachment(100,0);
  fdTree.top=new FormAttachment(treeTb,margin);
  fdTree.bottom=new FormAttachment(100,-30);
  wTree.setLayoutData(fdTree);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,null);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wTree.addSelectionListener(lsDef);
  wTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR)       ok();
    }
  }
);
  expandAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      expandAllItems(wTree.getItems(),true);
    }
  }
);
  collapseAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      expandAllItems(wTree.getItems(),false);
    }
  }
);
  goSearch.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateFilter();
    }
  }
);
  searchText.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      updateFilter();
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  try {
    rep.refreshRepositoryDirectoryTree();
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"SelectObjectDialog.Dialog.ErrorRefreshingDirectoryTree.Title"),BaseMessages.getString(PKG,"SelectObjectDialog.Dialog.ErrorRefreshingDirectoryTree.Message"),e);
  }
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!shell.getDisplay().readAndDispatch())     shell.getDisplay().sleep();
  }
  return objectName;
}
