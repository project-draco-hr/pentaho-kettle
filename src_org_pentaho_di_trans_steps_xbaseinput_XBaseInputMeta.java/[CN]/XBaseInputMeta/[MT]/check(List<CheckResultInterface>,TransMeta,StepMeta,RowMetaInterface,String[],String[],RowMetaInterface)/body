{
  CheckResult cr;
  if (dbfFileName == null) {
    if (isAcceptingFilenames()) {
      if (Const.isEmpty(getAcceptingStepName())) {
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,Messages.getString("XBaseInput.Log.Error.InvalidAcceptingStepName"),stepMeta);
        remarks.add(cr);
      }
      if (Const.isEmpty(getAcceptingField())) {
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,Messages.getString("XBaseInput.Log.Error.InvalidAcceptingFieldName"),stepMeta);
        remarks.add(cr);
      }
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,Messages.getString("XBaseInputMeta.Remark.PleaseSelectFileToUse"),stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,Messages.getString("XBaseInputMeta.Remark.FileToUseIsSpecified"),stepMeta);
    remarks.add(cr);
    XBase xbi=new XBase(transMeta.environmentSubstitute(dbfFileName));
    try {
      xbi.open();
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,Messages.getString("XBaseInputMeta.Remark.FileExistsAndCanBeOpened"),stepMeta);
      remarks.add(cr);
      RowMetaInterface r=xbi.getFields();
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,r.size() + Messages.getString("XBaseInputMeta.Remark.OutputFieldsCouldBeDetermined"),stepMeta);
      remarks.add(cr);
    }
 catch (    KettleException ke) {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,Messages.getString("XBaseInputMeta.Remark.NoFieldsCouldBeFoundInFileBecauseOfError") + Const.CR + ke.getMessage(),stepMeta);
      remarks.add(cr);
    }
 finally {
      xbi.close();
    }
  }
}
