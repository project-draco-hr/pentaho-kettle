{
  LogWriter log=LogWriter.getInstance();
  log4j.info(Messages.getString("JobEntryFTP.Started",serverName));
  Result result=previousResult;
  result.setResult(false);
  NrErrors=0;
  NrfilesRetrieved=0;
  successConditionBroken=false;
  if (movefiles) {
    if (Const.isEmpty(movetodirectory)) {
      log.logError(toString(),Messages.getString("JobEntryFTP.MoveToFolderEmpty"));
      result.setNrErrors(1);
      return result;
    }
  }
  if (log.isDetailed())   log.logDetailed(toString(),Messages.getString("JobEntryFTP.Start"));
  FTPClient ftpclient=null;
  String realMoveToFolder=null;
  try {
    ftpclient=new FTPClient();
    String realServername=environmentSubstitute(serverName);
    String realServerPort=environmentSubstitute(port);
    ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
    if (Const.isEmpty(realServerPort)) {
      ftpclient.setRemotePort(Const.toInt(realServerPort,21));
    }
    if (!Const.isEmpty(proxyHost)) {
      String realProxy_host=environmentSubstitute(proxyHost);
      ftpclient.setRemoteAddr(InetAddress.getByName(realProxy_host));
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.OpenedProxyConnectionOn",realProxy_host));
      int port=Const.toInt(environmentSubstitute(proxyPort),21);
      if (port != 0) {
        ftpclient.setRemotePort(port);
      }
    }
 else {
      ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.OpenedConnectionTo",realServername));
    }
    if (activeConnection) {
      ftpclient.setConnectMode(FTPConnectMode.ACTIVE);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetActive"));
    }
 else {
      ftpclient.setConnectMode(FTPConnectMode.PASV);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetPassive"));
    }
    ftpclient.setTimeout(timeout);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetTimeout",String.valueOf(timeout)));
    ftpclient.setControlEncoding(controlEncoding);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetEncoding",controlEncoding));
    ftpclient.connect();
    String realUsername=environmentSubstitute(userName) + (!Const.isEmpty(proxyHost) ? "@" + realServername : "") + (!Const.isEmpty(proxyUsername) ? " " + environmentSubstitute(proxyUsername) : "");
    String realPassword=environmentSubstitute(password) + (!Const.isEmpty(proxyPassword) ? " " + environmentSubstitute(proxyPassword) : "");
    ftpclient.login(realUsername,realPassword);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.LoggedIn",realUsername));
    if (!Const.isEmpty(ftpDirectory)) {
      String realFtpDirectory=environmentSubstitute(ftpDirectory);
      ftpclient.chdir(realFtpDirectory);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.ChangedDir",realFtpDirectory));
    }
    if (movefiles && !Const.isEmpty(movetodirectory)) {
      realMoveToFolder=environmentSubstitute(movetodirectory);
      if (!ftpclient.exists(realMoveToFolder)) {
        if (createmovefolder) {
          ftpclient.mkdir(realMoveToFolder);
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobEntryFTP.MoveToFolderCreated",realMoveToFolder));
        }
 else {
          log.logError(toString(),Messages.getString("JobEntryFTP.MoveToFolderNotExist"));
          result.setNrErrors(1);
          return result;
        }
      }
    }
    String[] filelist=ftpclient.dir();
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.FoundNFiles",String.valueOf(filelist.length)));
    if (binaryMode) {
      ftpclient.setType(FTPTransferType.BINARY);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetBinary"));
    }
 else {
      ftpclient.setType(FTPTransferType.ASCII);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetAscii"));
    }
    if (filelist.length == 1) {
      String translatedWildcard=environmentSubstitute(wildcard);
      if (filelist[0].startsWith(translatedWildcard)) {
        throw new FTPException(filelist[0]);
      }
    }
    Pattern pattern=null;
    if (!Const.isEmpty(wildcard)) {
      String realWildcard=environmentSubstitute(wildcard);
      pattern=Pattern.compile(realWildcard);
    }
    if (!getSuccessCondition().equals(SUCCESS_IF_NO_ERRORS))     limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
    for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
      if (successConditionBroken)       throw new Exception(Messages.getString("JobEntryFTP.SuccesConditionBroken"));
      boolean getIt=true;
      if (log.isDebug())       log.logDebug(toString(),Messages.getString("JobEntryFTP.AnalysingFile",filelist[i]));
      try {
        if (pattern != null) {
          Matcher matcher=pattern.matcher(filelist[i]);
          getIt=matcher.matches();
        }
        if (getIt) {
          targetFilename=getTargetFilename(filelist[i]);
          if ((!onlyGettingNewFiles) || (onlyGettingNewFiles && needsDownload(targetFilename))) {
            if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobEntryFTP.GettingFile",filelist[i],environmentSubstitute(targetDirectory)));
            ftpclient.get(targetFilename,filelist[i]);
            updateRetrievedFiles();
            if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobEntryFTP.GotFile",filelist[i]));
            if (isaddresult) {
              FileObject targetFile=null;
              try {
                targetFile=KettleVFS.getFileObject(targetFilename);
                ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,targetFile,parentJob.getJobname(),toString());
                resultFile.setComment(Messages.getString("JobEntryFTP.Downloaded",serverName));
                result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
                if (log.isDetailed())                 log.logDetailed(toString(),Messages.getString("JobEntryFTP.FileAddedToResult",filelist[i]));
              }
  finally {
                try {
                  targetFile.close();
                  targetFile=null;
                }
 catch (                Exception e) {
                }
              }
            }
          }
          if (remove) {
            ftpclient.delete(filelist[i]);
            if (log.isDetailed())             if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobEntryFTP.DeletedFile",filelist[i]));
          }
 else {
            if (movefiles) {
              ftpclient.rename(filelist[i],realMoveToFolder + '/' + filelist[i]);
              if (log.isDetailed())               log.logDetailed(toString(),Messages.getString("JobEntryFTP.MovedFile",filelist[i],realMoveToFolder));
            }
          }
        }
      }
 catch (      Exception e) {
        updateErrors();
        log.logError(toString(),Messages.getString("JobFTP.UnexpectedError",e.getMessage()));
        if (successConditionBroken)         throw new Exception(Messages.getString("JobEntryFTP.SuccesConditionBroken"));
      }
    }
  }
 catch (  Exception e) {
    updateErrors();
    log.logError(toString(),Messages.getString("JobEntryFTP.ErrorGetting",e.getMessage()));
    log.logError(toString(),Const.getStackTracker(e));
  }
 finally {
    if (ftpclient != null && ftpclient.connected()) {
      try {
        ftpclient.quit();
      }
 catch (      Exception e) {
        log.logError(toString(),Messages.getString("JobEntryFTP.ErrorQuitting",e.getMessage()));
      }
    }
  }
  result.setResult(!successConditionBroken);
  result.setNrFilesRetrieved(NrfilesRetrieved);
  result.setNrErrors(NrErrors);
  return result;
}
