{
  LogWriter log=LogWriter.getInstance();
  log4j.info(Messages.getString("JobEntryFTP.Started",serverName));
  Result result=previousResult;
  result.setNrErrors(1);
  result.setResult(false);
  NrErrors=0;
  NrfilesRetrieved=0;
  successConditionBroken=false;
  boolean exitjobentry=false;
  limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
  if (movefiles) {
    if (Const.isEmpty(movetodirectory)) {
      log.logError(toString(),Messages.getString("JobEntryFTP.MoveToFolderEmpty"));
      return result;
    }
  }
  if (log.isDetailed())   log.logDetailed(toString(),Messages.getString("JobEntryFTP.Start"));
  FTPClient ftpclient=null;
  String realMoveToFolder=null;
  try {
    ftpclient=new FTPClient();
    String realServername=environmentSubstitute(serverName);
    String realServerPort=environmentSubstitute(port);
    ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
    if (!Const.isEmpty(realServerPort)) {
      ftpclient.setRemotePort(Const.toInt(realServerPort,21));
    }
    if (!Const.isEmpty(proxyHost)) {
      String realProxy_host=environmentSubstitute(proxyHost);
      ftpclient.setRemoteAddr(InetAddress.getByName(realProxy_host));
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.OpenedProxyConnectionOn",realProxy_host));
      int port=Const.toInt(environmentSubstitute(proxyPort),21);
      if (port != 0) {
        ftpclient.setRemotePort(port);
      }
    }
 else {
      ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.OpenedConnectionTo",realServername));
    }
    if (activeConnection) {
      ftpclient.setConnectMode(FTPConnectMode.ACTIVE);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetActive"));
    }
 else {
      ftpclient.setConnectMode(FTPConnectMode.PASV);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetPassive"));
    }
    ftpclient.setTimeout(timeout);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetTimeout",String.valueOf(timeout)));
    ftpclient.setControlEncoding(controlEncoding);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetEncoding",controlEncoding));
    ftpclient.connect();
    String realUsername=environmentSubstitute(userName) + (!Const.isEmpty(proxyHost) ? "@" + realServername : "") + (!Const.isEmpty(proxyUsername) ? " " + environmentSubstitute(proxyUsername) : "");
    String realPassword=environmentSubstitute(password) + (!Const.isEmpty(proxyPassword) ? " " + environmentSubstitute(proxyPassword) : "");
    ftpclient.login(realUsername,realPassword);
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobEntryFTP.LoggedIn",realUsername));
    if (!Const.isEmpty(ftpDirectory)) {
      String realFtpDirectory=environmentSubstitute(ftpDirectory);
      realFtpDirectory=normalizePath(realFtpDirectory);
      ftpclient.chdir(realFtpDirectory);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.ChangedDir",realFtpDirectory));
    }
    if (movefiles && !Const.isEmpty(movetodirectory)) {
      realMoveToFolder=environmentSubstitute(movetodirectory);
      realMoveToFolder=normalizePath(realMoveToFolder);
      boolean folderExist=true;
      try {
        folderExist=ftpclient.exists(realMoveToFolder);
      }
 catch (      Exception e) {
      }
      if (!folderExist) {
        if (createmovefolder) {
          ftpclient.mkdir(realMoveToFolder);
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobEntryFTP.MoveToFolderCreated",realMoveToFolder));
        }
 else {
          log.logError(toString(),Messages.getString("JobEntryFTP.MoveToFolderNotExist"));
          exitjobentry=true;
          NrErrors++;
        }
      }
    }
    if (!exitjobentry) {
      FTPFile[] ftpFiles=ftpclient.dirDetails(".");
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobEntryFTP.FoundNFiles",String.valueOf(ftpFiles.length)));
      if (binaryMode) {
        ftpclient.setType(FTPTransferType.BINARY);
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetBinary"));
      }
 else {
        ftpclient.setType(FTPTransferType.ASCII);
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetAscii"));
      }
      if (ftpFiles.length == 1) {
        String translatedWildcard=environmentSubstitute(wildcard);
        if (!Const.isEmpty(translatedWildcard)) {
          if (ftpFiles[0].getName().startsWith(translatedWildcard)) {
            throw new FTPException(ftpFiles[0].getName());
          }
        }
      }
      Pattern pattern=null;
      if (!Const.isEmpty(wildcard)) {
        String realWildcard=environmentSubstitute(wildcard);
        pattern=Pattern.compile(realWildcard);
      }
      if (!getSuccessCondition().equals(SUCCESS_IF_NO_ERRORS))       limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
      for (      FTPFile ftpFile : ftpFiles) {
        if (parentJob.isStopped()) {
          exitjobentry=true;
          throw new Exception(Messages.getString("JobEntryFTP.JobStopped"));
        }
        if (successConditionBroken) {
          throw new Exception(Messages.getString("JobEntryFTP.SuccesConditionBroken","" + NrErrors));
        }
        boolean getIt=true;
        String filename=ftpFile.getName();
        if (log.isDebug())         log.logDebug(toString(),Messages.getString("JobEntryFTP.AnalysingFile",filename));
        if (ftpFile.isDir() || ftpFile.isLink())         getIt=false;
        try {
          if (getIt) {
            if (pattern != null) {
              Matcher matcher=pattern.matcher(filename);
              getIt=matcher.matches();
            }
          }
          if (getIt)           downloadFile(ftpclient,filename,realMoveToFolder,log,parentJob,result);
        }
 catch (        Exception e) {
          updateErrors();
          log.logError(toString(),Messages.getString("JobFTP.UnexpectedError",e.getMessage()));
        }
      }
    }
  }
 catch (  Exception e) {
    if (!successConditionBroken && !exitjobentry)     updateErrors();
    log.logError(toString(),Messages.getString("JobEntryFTP.ErrorGetting",e.getMessage()));
  }
 finally {
    if (ftpclient != null) {
      try {
        ftpclient.quit();
      }
 catch (      Exception e) {
        log.logError(toString(),Messages.getString("JobEntryFTP.ErrorQuitting",e.getMessage()));
      }
    }
  }
  result.setNrErrors(NrErrors);
  result.setNrFilesRetrieved(NrfilesRetrieved);
  if (getSuccessStatus())   result.setResult(true);
  if (exitjobentry)   result.setResult(false);
  displayResults(log);
  return result;
}
