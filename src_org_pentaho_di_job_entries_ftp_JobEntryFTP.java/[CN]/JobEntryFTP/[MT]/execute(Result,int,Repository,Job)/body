{
  LogWriter log=LogWriter.getInstance();
  log4j.info(Messages.getString("JobEntryFTP.Started",serverName));
  Result result=previousResult;
  result.setResult(false);
  long filesRetrieved=0;
  log.logDetailed(toString(),Messages.getString("JobEntryFTP.Start"));
  FTPClient ftpclient=null;
  try {
    ftpclient=new FTPClient();
    String realServername=environmentSubstitute(serverName);
    ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
    if (!Const.isEmpty(proxyHost)) {
      String realProxy_host=environmentSubstitute(proxyHost);
      ftpclient.setRemoteAddr(InetAddress.getByName(realProxy_host));
      if (log.isDetailed())       log.logDetailed(toString(),"Opened FTP connection to proxy server [" + realProxy_host + "]");
      int port=Const.toInt(environmentSubstitute(proxyPort),21);
      if (port != 0) {
        ftpclient.setRemotePort(port);
      }
    }
 else {
      ftpclient.setRemoteAddr(InetAddress.getByName(realServername));
      if (log.isDetailed())       log.logDetailed(toString(),"Opened FTP connection to server [" + realServername + "]");
    }
    if (activeConnection) {
      ftpclient.setConnectMode(FTPConnectMode.ACTIVE);
      log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetActive"));
    }
 else {
      ftpclient.setConnectMode(FTPConnectMode.PASV);
      log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetPassive"));
    }
    ftpclient.setTimeout(timeout * 1000);
    log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetTimeout",String.valueOf(timeout)));
    ftpclient.setControlEncoding(controlEncoding);
    log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetEncoding",controlEncoding));
    ftpclient.connect();
    String realUsername=environmentSubstitute(userName) + (!Const.isEmpty(proxyHost) ? "@" + realServername : "") + (!Const.isEmpty(proxyUsername) ? " " + environmentSubstitute(proxyUsername) : "");
    String realPassword=environmentSubstitute(password) + (!Const.isEmpty(proxyPassword) ? " " + environmentSubstitute(proxyPassword) : "");
    ftpclient.login(realUsername,realPassword);
    if (!Const.isEmpty(ftpDirectory)) {
      String realFtpDirectory=environmentSubstitute(ftpDirectory);
      ftpclient.chdir(realFtpDirectory);
      log.logDetailed(toString(),Messages.getString("JobEntryFTP.ChangedDir",realFtpDirectory));
    }
    String[] filelist=ftpclient.dir();
    log.logDetailed(toString(),Messages.getString("JobEntryFTP.FoundNFiles",String.valueOf(filelist.length)));
    if (binaryMode) {
      ftpclient.setType(FTPTransferType.BINARY);
      log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetBinary"));
    }
 else {
      ftpclient.setType(FTPTransferType.ASCII);
      log.logDetailed(toString(),Messages.getString("JobEntryFTP.SetAscii"));
    }
    if (filelist.length == 1) {
      String translatedWildcard=environmentSubstitute(wildcard);
      if (filelist[0].startsWith(translatedWildcard)) {
        throw new FTPException(filelist[0]);
      }
    }
    Pattern pattern=null;
    if (!Const.isEmpty(wildcard)) {
      String realWildcard=environmentSubstitute(wildcard);
      pattern=Pattern.compile(realWildcard);
    }
    for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
      boolean getIt=true;
      if (pattern != null) {
        Matcher matcher=pattern.matcher(filelist[i]);
        getIt=matcher.matches();
      }
      if (getIt) {
        log.logDetailed(toString(),Messages.getString("JobEntryFTP.GettingFile",filelist[i],environmentSubstitute(targetDirectory)));
        String targetFilename=getTargetFilename(filelist[i]);
        FileObject targetFile=KettleVFS.getFileObject(targetFilename);
        if ((onlyGettingNewFiles == false) || (onlyGettingNewFiles == true) && needsDownload(filelist[i])) {
          ftpclient.get(KettleVFS.getOutputStream(targetFilename,false),filelist[i]);
          filesRetrieved++;
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,targetFile,parentJob.getJobname(),toString());
          resultFile.setComment(Messages.getString("JobEntryFTP.Downloaded",serverName));
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
          log.logDetailed(toString(),Messages.getString("JobEntryFTP.GotFile",filelist[i]));
        }
        if (remove) {
          ftpclient.delete(filelist[i]);
          log.logDetailed(toString(),Messages.getString("JobEntryFTP.DeletedFile",filelist[i]));
        }
      }
    }
    result.setResult(true);
    result.setNrFilesRetrieved(filesRetrieved);
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    log.logError(toString(),Messages.getString("JobEntryFTP.ErrorGetting",e.getMessage()));
    log.logError(toString(),Const.getStackTracker(e));
  }
 finally {
    if (ftpclient != null && ftpclient.connected()) {
      try {
        ftpclient.quit();
      }
 catch (      Exception e) {
        log.logError(toString(),Messages.getString("JobEntryFTP.ErrorQuitting",e.getMessage()));
      }
    }
  }
  return result;
}
