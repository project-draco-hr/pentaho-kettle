{
  Row r=getRow();
  if (r == null) {
    if (data.previous != null) {
      buildResult(data.previous);
      putRow(data.previous);
    }
    setOutputDone();
    return false;
  }
  if (first) {
    data.keyFieldNr=r.searchValueIndex(meta.getKeyField());
    if (data.keyFieldNr < 0) {
      logError(Messages.getString("Denormaliser.Log.KeyFieldNotFound",meta.getKeyField()));
      setErrors(1);
      stopAll();
      return false;
    }
    Hashtable subjects=new Hashtable();
    data.fieldNameIndex=new int[meta.getDenormaliserTargetField().length];
    for (int i=0; i < meta.getDenormaliserTargetField().length; i++) {
      DenormaliserTargetField field=meta.getDenormaliserTargetField()[i];
      int idx=r.searchValueIndex(field.getFieldName());
      if (idx < 0) {
        logError(Messages.getString("Denormaliser.Log.UnpivotFieldNotFound",field.getFieldName()));
        setErrors(1);
        stopAll();
        return false;
      }
      data.fieldNameIndex[i]=idx;
      subjects.put(new Integer(idx),new Integer(idx));
      if (data.fieldNameIndex[i] == data.keyFieldNr) {
        logError(Messages.getString("Denormaliser.Log.ValueFieldSameAsKeyField",field.getFieldName()));
        setErrors(1);
        stopAll();
        return false;
      }
      String keyValue=StringUtil.environmentSubstitute(field.getKeyValue());
      List indexes=(List)data.keyValue.get(keyValue);
      if (indexes == null) {
        indexes=new ArrayList(2);
      }
      indexes.add(new Integer(i));
      data.keyValue.put(keyValue,indexes);
    }
    Set subjectSet=subjects.keySet();
    data.fieldNrs=(Integer[])subjectSet.toArray(new Integer[subjectSet.size()]);
    data.groupnrs=new int[meta.getGroupField().length];
    for (int i=0; i < meta.getGroupField().length; i++) {
      data.groupnrs[i]=r.searchValueIndex(meta.getGroupField()[i]);
      if (data.groupnrs[i] < 0) {
        logError(Messages.getString("Denormaliser.Log.GroupingFieldNotFound",meta.getGroupField()[i]));
        setErrors(1);
        stopAll();
        return false;
      }
    }
    ArrayList removeList=new ArrayList();
    removeList.add(new Integer(data.keyFieldNr));
    for (int i=0; i < data.fieldNrs.length; i++) {
      removeList.add(data.fieldNrs[i]);
    }
    Collections.sort(removeList);
    data.removeNrs=new int[removeList.size()];
    for (int i=0; i < removeList.size(); i++)     data.removeNrs[i]=((Integer)removeList.get(i)).intValue();
    data.previous=new Row(r);
    newGroup();
    first=false;
  }
  if (!sameGroup(data.previous,r)) {
    buildResult(data.previous);
    putRow(data.previous);
    newGroup();
    deNormalise(r);
  }
 else {
    deNormalise(r);
  }
  data.previous=new Row(r);
  if (checkFeedback(linesRead))   logBasic(Messages.getString("Denormaliser.Log.LineNumber") + linesRead);
  return true;
}
