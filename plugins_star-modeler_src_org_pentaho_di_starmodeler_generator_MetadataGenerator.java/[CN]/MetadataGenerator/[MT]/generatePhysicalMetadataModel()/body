{
  String targetDatabaseName=ConceptUtil.getString(logicalDomain,DefaultIDs.DOMAIN_TARGET_DATABASE);
  if (Utils.isEmpty(targetDatabaseName)) {
    throw new KettleException("Please specify a target database!");
  }
  DatabaseMeta targetDatabaseMeta=DatabaseMeta.findDatabase(databases,targetDatabaseName);
  if (targetDatabaseMeta == null) {
    throw new KettleException("Target database with name '" + targetDatabaseName + "' can't be found!");
  }
  Domain domain=new Domain();
  domain.setId(createId("DOMAIN",null,domain));
  domain.setName(logicalDomain.getName());
  domain.setDescription(logicalDomain.getDescription());
  for (  LogicalModel logicalModel : logicalDomain.getLogicalModels()) {
    LogicalModel model=new LogicalModel();
    model.setId(createId("MODEL",domain,model));
    model.setName(logicalModel.getName());
    model.setDescription(logicalModel.getDescription());
    SqlPhysicalModel sqlModel=new SqlPhysicalModel();
    sqlModel.setDatasource(createSqlDataSource(targetDatabaseMeta));
    model.setPhysicalModel(sqlModel);
    for (    LogicalTable logicalTable : logicalModel.getLogicalTables()) {
      LogicalTable table=new LogicalTable();
      table.setId(createId("LOGICAL_TABLE",logicalModel,logicalTable));
      table.setName(logicalTable.getName());
      table.setDescription(logicalTable.getDescription());
      String targetTable=ConceptUtil.getString(logicalTable,DefaultIDs.LOGICAL_TABLE_PHYSICAL_TABLE_NAME);
      SqlPhysicalTable sqlTable=new SqlPhysicalTable(sqlModel);
      table.setPhysicalTable(sqlTable);
      sqlTable.setId(createId("PHYSICAL_TABLE",logicalModel,logicalTable));
      sqlTable.setName(logicalTable.getName());
      sqlTable.setDescription(logicalTable.getDescription());
      sqlTable.setTableType(ConceptUtil.getTableType(logicalTable));
      sqlTable.setTargetSchema(targetDatabaseMeta.getPreferredSchemaName());
      sqlTable.setTargetTable(targetTable);
    }
  }
  return domain;
}
