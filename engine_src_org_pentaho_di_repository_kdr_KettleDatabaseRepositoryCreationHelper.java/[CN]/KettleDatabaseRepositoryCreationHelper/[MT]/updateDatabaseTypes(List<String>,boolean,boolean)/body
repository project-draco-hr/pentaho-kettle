{
synchronized (repository) {
    List<PluginInterface> plugins=pluginRegistry.getPlugins(DatabasePluginType.class);
    for (int i=0; i < plugins.size(); i++) {
      PluginInterface plugin=plugins.get(i);
      ObjectId id=null;
      if (!create) {
        id=repository.databaseDelegate.getDatabaseTypeID(plugin.getIds()[0]);
      }
      if (id == null) {
        id=new LongObjectId(i + 1);
        if (!create) {
          id=repository.connectionDelegate.getNextDatabaseTypeID();
        }
        RowMetaAndData table=new RowMetaAndData();
        table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_DATABASE_TYPE_ID_DATABASE_TYPE),id);
        table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_DATABASE_TYPE_CODE),plugin.getIds()[0]);
        table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_DATABASE_TYPE_DESCRIPTION),plugin.getName());
        if (dryrun) {
          String sql=database.getSQLOutput(null,KettleDatabaseRepository.TABLE_R_DATABASE_TYPE,table.getRowMeta(),table.getData(),null);
          statements.add(sql);
        }
 else {
          database.prepareInsert(table.getRowMeta(),null,KettleDatabaseRepository.TABLE_R_DATABASE_TYPE);
          database.setValuesInsert(table);
          database.insertRow();
          database.closeInsert();
        }
      }
    }
  }
  return statements;
}
