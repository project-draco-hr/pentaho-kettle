{
synchronized (repository) {
    List<PluginInterface> plugins=pluginRegistry.getPlugins(StepPluginType.class);
    ObjectId[] ids=loadPluginsIds(plugins,create);
    for (int i=0, idsLength=ids.length; i < idsLength; i++) {
      ObjectId id=ids[i];
      if (id == null) {
        if (!create) {
          id=repository.connectionDelegate.getNextStepTypeID();
        }
 else {
          id=new LongObjectId(i + 1);
        }
        PluginInterface sp=plugins.get(i);
        RowMetaAndData table=new RowMetaAndData();
        table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_STEP_TYPE_ID_STEP_TYPE,ValueMetaInterface.TYPE_INTEGER),id);
        table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_STEP_TYPE_CODE,ValueMetaInterface.TYPE_STRING),sp.getIds()[0]);
        table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_STEP_TYPE_DESCRIPTION,ValueMetaInterface.TYPE_STRING),sp.getName());
        table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_STEP_TYPE_HELPTEXT,ValueMetaInterface.TYPE_STRING),sp.getDescription());
        if (dryrun) {
          String sql=database.getSQLOutput(null,KettleDatabaseRepository.TABLE_R_STEP_TYPE,table.getRowMeta(),table.getData(),null);
          statements.add(sql);
        }
 else {
          database.prepareInsert(table.getRowMeta(),null,KettleDatabaseRepository.TABLE_R_STEP_TYPE);
          database.setValuesInsert(table);
          database.insertRow();
          database.closeInsert();
        }
      }
    }
  }
  return statements;
}
