{
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_ID_JOB,ValueMetaInterface.TYPE_INTEGER),jobMeta.getID());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_ID_DIRECTORY,ValueMetaInterface.TYPE_INTEGER),jobMeta.getRepositoryDirectory().getID());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_NAME,ValueMetaInterface.TYPE_STRING),jobMeta.getName());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_DESCRIPTION,ValueMetaInterface.TYPE_STRING),jobMeta.getDescription());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_EXTENDED_DESCRIPTION,ValueMetaInterface.TYPE_STRING),jobMeta.getExtendedDescription());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_JOB_VERSION,ValueMetaInterface.TYPE_STRING),jobMeta.getJobversion());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_JOB_STATUS,ValueMetaInterface.TYPE_INTEGER),new Long(jobMeta.getJobstatus() < 0 ? -1L : jobMeta.getJobstatus()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_ID_DATABASE_LOG,ValueMetaInterface.TYPE_INTEGER),jobMeta.getLogConnection() != null ? jobMeta.getLogConnection().getID() : -1L);
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_TABLE_NAME_LOG,ValueMetaInterface.TYPE_STRING),jobMeta.getLogTable());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_CREATED_USER,ValueMetaInterface.TYPE_STRING),jobMeta.getCreatedUser());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_CREATED_DATE,ValueMetaInterface.TYPE_DATE),jobMeta.getCreatedDate());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_MODIFIED_USER,ValueMetaInterface.TYPE_STRING),jobMeta.getModifiedUser());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_MODIFIED_DATE,ValueMetaInterface.TYPE_DATE),jobMeta.getModifiedDate());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_USE_BATCH_ID,ValueMetaInterface.TYPE_BOOLEAN),jobMeta.isBatchIdUsed());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_PASS_BATCH_ID,ValueMetaInterface.TYPE_BOOLEAN),jobMeta.isBatchIdPassed());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_USE_LOGFIELD,ValueMetaInterface.TYPE_BOOLEAN),jobMeta.isLogfieldUsed());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_SHARED_FILE,ValueMetaInterface.TYPE_STRING),jobMeta.getSharedObjectsFile());
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_JOB);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  if (log.isDebug())   log.logDebug(toString(),"Inserted new record into table " + quoteTable(KettleDatabaseRepository.TABLE_R_JOB) + " with data : "+ table);
  repository.connectionDelegate.getDatabase().closeInsert();
  repository.connectionDelegate.insertJobAttribute(jobMeta.getID(),0,KettleDatabaseRepository.JOB_ATTRIBUTE_LOG_SIZE_LIMIT,0,jobMeta.getLogSizeLimit());
  if (jobMeta.getLogConnection() != null) {
    repository.insertJobEntryDatabase(jobMeta.getID(),-1L,jobMeta.getLogConnection().getID());
  }
}
