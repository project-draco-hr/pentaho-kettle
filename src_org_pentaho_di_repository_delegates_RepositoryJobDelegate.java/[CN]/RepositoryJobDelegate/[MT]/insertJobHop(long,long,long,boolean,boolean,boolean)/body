{
  long id=repository.connectionDelegate.getNextJobHopID();
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOB_HOP,ValueMetaInterface.TYPE_INTEGER),Long.valueOf(id));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOB,ValueMetaInterface.TYPE_INTEGER),Long.valueOf(id_job));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOBENTRY_COPY_FROM,ValueMetaInterface.TYPE_INTEGER),Long.valueOf(id_jobentry_copy_from));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOBENTRY_COPY_TO,ValueMetaInterface.TYPE_INTEGER),Long.valueOf(id_jobentry_copy_to));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_ENABLED,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(enabled));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_EVALUATION,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(evaluation));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_JOB_HOP_UNCONDITIONAL,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(unconditional));
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_JOB_HOP);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  return id;
}
