{
  try {
    int nrWorks=2 + jobMeta.nrDatabases() + jobMeta.nrNotes()+ jobMeta.nrJobEntries()+ jobMeta.nrJobHops();
    if (monitor != null)     monitor.beginTask(BaseMessages.getString(PKG,"JobMeta.Monitor.SavingTransformation") + jobMeta.getRepositoryDirectory() + Const.FILE_SEPARATOR+ jobMeta.getName(),nrWorks);
    repository.lockRepository();
    repository.insertLogEntry("save job '" + jobMeta.getName() + "'");
    if (monitor != null)     monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.HandlingPreviousVersionOfJob"));
    jobMeta.setID(getJobID(jobMeta.getName(),jobMeta.getRepositoryDirectory().getID()));
    if (jobMeta.getID() <= 0) {
      jobMeta.setID(repository.connectionDelegate.getNextJobID());
    }
 else {
      repository.delAllFromJob(jobMeta.getID());
    }
    if (monitor != null)     monitor.worked(1);
    if (log.isDebug())     log.logDebug(toString(),BaseMessages.getString(PKG,"JobMeta.Log.SavingDatabaseConnections"));
    for (int i=0; i < jobMeta.nrDatabases(); i++) {
      if (monitor != null)       monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.SavingDatabaseTask.Title") + (i + 1) + "/"+ jobMeta.nrDatabases());
      DatabaseMeta databaseMeta=jobMeta.getDatabase(i);
      if (databaseMeta.hasChanged() || databaseMeta.getID() <= 0) {
        repository.save(databaseMeta);
      }
      if (monitor != null)       monitor.worked(1);
    }
    if (monitor != null)     monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.SavingJobDetails"));
    if (log.isDetailed())     log.logDetailed(toString(),"Saving job info to repository...");
    insertJob(jobMeta);
    if (monitor != null)     monitor.worked(1);
    for (int i=0; i < jobMeta.getSlaveServers().size(); i++) {
      SlaveServer slaveServer=jobMeta.getSlaveServers().get(i);
      repository.saveSlaveServer(slaveServer,jobMeta.getID(),false);
    }
    if (log.isDetailed())     log.logDetailed(toString(),"Saving notes to repository...");
    for (int i=0; i < jobMeta.nrNotes(); i++) {
      if (monitor != null)       monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.SavingNoteNr") + (i + 1) + "/"+ jobMeta.nrNotes());
      NotePadMeta ni=jobMeta.getNote(i);
      repository.saveNotePadMeta(ni,jobMeta.getID());
      if (ni.getID() > 0) {
        repository.insertJobNote(jobMeta.getID(),ni.getID());
      }
      if (monitor != null)       monitor.worked(1);
    }
    if (log.isDetailed())     log.logDetailed(toString(),"Saving " + jobMeta.nrJobEntries() + " Job enty copies to repository...");
    repository.updateJobEntryTypes();
    for (int i=0; i < jobMeta.nrJobEntries(); i++) {
      if (monitor != null)       monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.SavingJobEntryNr") + (i + 1) + "/"+ jobMeta.nrJobEntries());
      JobEntryCopy cge=jobMeta.getJobEntry(i);
      repository.jobEntryDelegate.saveJobEntryCopy(cge,jobMeta.getID());
      if (monitor != null)       monitor.worked(1);
    }
    if (log.isDetailed())     log.logDetailed(toString(),"Saving job hops to repository...");
    for (int i=0; i < jobMeta.nrJobHops(); i++) {
      if (monitor != null)       monitor.subTask("Saving job hop #" + (i + 1) + "/"+ jobMeta.nrJobHops());
      JobHopMeta hi=jobMeta.getJobHop(i);
      saveJobHopMeta(hi,jobMeta.getID());
      if (monitor != null)       monitor.worked(1);
    }
    saveJobParameters(jobMeta);
    repository.commit();
    jobMeta.clearChanged();
    if (monitor != null)     monitor.done();
  }
 catch (  KettleDatabaseException dbe) {
    repository.rollback();
    throw new KettleException(BaseMessages.getString(PKG,"JobMeta.Exception.UnableToSaveJobInRepositoryRollbackPerformed"),dbe);
  }
 finally {
    repository.unlockRepository();
  }
}
