{
  if (hop_candidate != null) {
    if (!hop_candidate.getFromEntry().evaluates() && hop_candidate.getFromEntry().isUnconditional()) {
      hop_candidate.setUnconditional();
    }
 else {
      hop_candidate.setConditional();
      int nr=jobMeta.findNrNextJobEntries(hop_candidate.getFromEntry());
      if (nr == 1) {
        JobEntryCopy jge=jobMeta.findNextJobEntry(hop_candidate.getFromEntry(),0);
        JobHopMeta other=jobMeta.findJobHop(hop_candidate.getFromEntry(),jge);
        if (other != null) {
          hop_candidate.setEvaluation(!other.getEvaluation());
        }
      }
    }
    if (checkIfHopAlreadyExists(jobMeta,hop_candidate)) {
      boolean cancel=false;
      jobMeta.addJobHop(hop_candidate);
      if (jobMeta.hasLoop(hop_candidate.getFromEntry()) || jobMeta.hasLoop(hop_candidate.getToEntry())) {
        MessageBox mb=new MessageBox(spoon.getShell(),SWT.OK | SWT.CANCEL | SWT.ICON_WARNING);
        mb.setMessage(BaseMessages.getString(PKG,"JobGraph.Dialog.HopCausesLoop.Message"));
        mb.setText(BaseMessages.getString(PKG,"JobGraph.Dialog.HopCausesLoop.Title"));
        int choice=mb.open();
        if (choice == SWT.CANCEL) {
          jobMeta.removeJobHop(hop_candidate);
          cancel=true;
        }
      }
      if (!cancel) {
        spoon.addUndoNew(jobMeta,new JobHopMeta[]{hop_candidate},new int[]{jobMeta.indexOfJobHop(hop_candidate)});
      }
      spoon.refreshTree();
      clearSettings();
      redraw();
    }
  }
}
