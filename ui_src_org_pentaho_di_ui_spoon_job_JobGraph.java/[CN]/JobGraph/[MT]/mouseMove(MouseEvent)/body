{
  boolean shift=(e.stateMask & SWT.SHIFT) != 0;
  noInputEntry=null;
  toolTip.hide();
  Point real=screen2real(e.x,e.y);
  lastMove=real;
  if (iconoffset == null) {
    iconoffset=new Point(0,0);
  }
  Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
  if (noteoffset == null) {
    noteoffset=new Point(0,0);
  }
  Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
  AreaOwner areaOwner=getVisibleAreaOwner(real.x,real.y);
  if (areaOwner != null && areaOwner.getAreaType() != null) {
    JobEntryCopy jobEntryCopy=null;
switch (areaOwner.getAreaType()) {
case JOB_ENTRY_ICON:
      jobEntryCopy=(JobEntryCopy)areaOwner.getOwner();
    resetDelayTimer(jobEntryCopy);
  break;
case MINI_ICONS_BALLOON:
jobEntryCopy=(JobEntryCopy)areaOwner.getOwner();
resetDelayTimer(jobEntryCopy);
break;
default :
break;
}
}
if (selectedEntry != null && !selectedEntry.isSelected()) {
jobMeta.unselectAll();
selectedEntry.setSelected(true);
selectedEntries=new ArrayList<JobEntryCopy>();
selectedEntries.add(selectedEntry);
previous_step_locations=new Point[]{selectedEntry.getLocation()};
redraw();
}
 else if (selectedNote != null && !selectedNote.isSelected()) {
jobMeta.unselectAll();
selectedNote.setSelected(true);
selectedNotes=new ArrayList<NotePadMeta>();
selectedNotes.add(selectedNote);
previous_note_locations=new Point[]{selectedNote.getLocation()};
redraw();
}
 else if (selectionRegion != null && startHopEntry == null) {
selectionRegion.width=real.x - selectionRegion.x;
selectionRegion.height=real.y - selectionRegion.y;
redraw();
}
 else if (selectedEntry != null && lastButton == 1 && !shift && startHopEntry == null) {
int dx=icon.x - selectedEntry.getLocation().x;
int dy=icon.y - selectedEntry.getLocation().y;
JobHopMeta hi=findHop(icon.x + iconsize / 2,icon.y + iconsize / 2,selectedEntry);
if (hi != null) {
if (!hi.getFromEntry().equals(selectedEntry) && !hi.getToEntry().equals(selectedEntry)) {
split_hop=true;
last_hop_split=hi;
hi.split=true;
}
}
 else {
if (last_hop_split != null) {
last_hop_split.split=false;
last_hop_split=null;
split_hop=false;
}
}
selectedNotes=jobMeta.getSelectedNotes();
selectedEntries=jobMeta.getSelectedEntries();
if (selectedEntries != null) {
for (int i=0; i < selectedEntries.size(); i++) {
JobEntryCopy jobEntryCopy=selectedEntries.get(i);
PropsUI.setLocation(jobEntryCopy,jobEntryCopy.getLocation().x + dx,jobEntryCopy.getLocation().y + dy);
stopEntryMouseOverDelayTimer(jobEntryCopy);
}
}
if (selectedNotes != null) {
for (int i=0; i < selectedNotes.size(); i++) {
NotePadMeta ni=selectedNotes.get(i);
PropsUI.setLocation(ni,ni.getLocation().x + dx,ni.getLocation().y + dy);
}
}
redraw();
}
 else if ((startHopEntry != null && endHopEntry == null) || (endHopEntry != null && startHopEntry == null)) {
JobEntryCopy jobEntryCopy=jobMeta.getJobEntryCopy(real.x,real.y,iconsize);
endHopLocation=new Point(real.x,real.y);
if (jobEntryCopy != null && ((startHopEntry != null && !startHopEntry.equals(jobEntryCopy)) || (endHopEntry != null && !endHopEntry.equals(jobEntryCopy)))) {
if (hop_candidate == null) {
if (startHopEntry != null) {
if (!jobEntryCopy.isStart()) {
hop_candidate=new JobHopMeta(startHopEntry,jobEntryCopy);
endHopLocation=null;
}
 else {
noInputEntry=jobEntryCopy;
toolTip.setImage(null);
toolTip.setText("The start entry can only be used at the start of a Job");
toolTip.show(new org.eclipse.swt.graphics.Point(real.x,real.y));
}
}
 else if (endHopEntry != null) {
hop_candidate=new JobHopMeta(jobEntryCopy,endHopEntry);
endHopLocation=null;
}
}
}
 else {
if (hop_candidate != null) {
hop_candidate=null;
redraw();
}
}
redraw();
}
if (selectedNote != null) {
if (lastButton == 1 && !shift) {
int dx=note.x - selectedNote.getLocation().x;
int dy=note.y - selectedNote.getLocation().y;
selectedNotes=jobMeta.getSelectedNotes();
selectedEntries=jobMeta.getSelectedEntries();
if (selectedEntries != null) {
for (int i=0; i < selectedEntries.size(); i++) {
JobEntryCopy jobEntryCopy=selectedEntries.get(i);
PropsUI.setLocation(jobEntryCopy,jobEntryCopy.getLocation().x + dx,jobEntryCopy.getLocation().y + dy);
}
}
if (selectedNotes != null) {
for (int i=0; i < selectedNotes.size(); i++) {
NotePadMeta ni=selectedNotes.get(i);
PropsUI.setLocation(ni,ni.getLocation().x + dx,ni.getLocation().y + dy);
}
}
redraw();
}
}
}
