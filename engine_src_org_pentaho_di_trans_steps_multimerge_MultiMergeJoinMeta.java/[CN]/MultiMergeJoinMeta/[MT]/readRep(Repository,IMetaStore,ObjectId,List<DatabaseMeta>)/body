{
  try {
    int nrKeys=rep.countNrStepAttributes(id_step,"keys");
    allocateKeys(nrKeys);
    for (int i=0; i < nrKeys; i++) {
      keyFields[i]=rep.getStepAttributeString(id_step,i,"keys");
    }
    long nInputStreams=rep.getStepAttributeInteger(id_step,"number_input");
    allocateInputSteps((int)nInputStreams);
    for (int i=0; i < nInputStreams; i++) {
      String stepName=rep.getStepAttributeString(id_step,"step" + i);
      getStepIOMeta().addStream(new Stream(StreamType.INFO,null,BaseMessages.getString(PKG,"MultiMergeJoin.InfoStream.Description"),StreamIcon.INFO,null));
      inputSteps[i]=stepName;
    }
    List<StreamInterface> infoStreams=getStepIOMeta().getInfoStreams();
    for (int i=0; i < infoStreams.size(); i++) {
      infoStreams.get(i).setSubject(rep.getStepAttributeString(id_step,"step" + i));
    }
    joinType=rep.getStepAttributeString(id_step,"join_type");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"MultiMergeJoinMeta.Exception.UnexpectedErrorReadingStepInfo"),e);
  }
}
