{
  if (aLine[0].equals(HEADER_VOLUME)) {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Skip.Header"));
    }
    return null;
  }
  if (aLine[0].equals(LINE_TYPE_ARCIVE)) {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Skip.ARCIVE"));
    }
    return null;
  }
  if (aLine[0].equals(LINE_TYPE_MIGRATED)) {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Skip.Migrated"));
    }
    return null;
  }
  if (aLine[5].charAt(0) != 'F' && aLine[5].charAt(0) != 'V') {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Skip.recf"));
    }
    return null;
  }
  if (aLine[8].charAt(0) != 'P') {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Skip.dso"));
    }
    return null;
  }
  FTPFile rtn=new FTPFile(raw);
  rtn.setName(aLine[9]);
  rtn.setCreated(new Date());
  rtn.setLastModified(new Date());
  if (aLine[8].equals(ENTRY_FILE_TYPE)) {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Found.File",aLine[9]));
    }
    rtn.setDir(false);
    long l=-1;
    try {
      l=Long.parseLong(aLine[4]);
    }
 catch (    Exception ignored) {
    }
    rtn.setSize(l);
  }
 else {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"MVSFileParser.DEBUG.Found.Folder",aLine[9]));
    }
    rtn.setDir(true);
  }
  return rtn;
}
