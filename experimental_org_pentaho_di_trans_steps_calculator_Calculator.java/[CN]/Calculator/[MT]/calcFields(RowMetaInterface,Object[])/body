{
  Object[] calcData=new Object[data.calcRowMeta.size()];
  for (int i=0; i < inputRowMeta.size(); i++) {
    calcData[i]=r[i];
  }
  for (int i=0; i < meta.getCalculation().length; i++) {
    CalculatorMetaFunction fn=meta.getCalculation()[i];
    if (!Const.isEmpty(fn.getFieldName())) {
      ValueMetaInterface metaA=null;
      Object dataA=null;
      if (data.fieldIndexes[i].indexA >= 0) {
        metaA=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexA);
        dataA=calcData[data.fieldIndexes[i].indexA];
      }
      ValueMetaInterface metaB=null;
      Object dataB=null;
      if (data.fieldIndexes[i].indexB >= 0) {
        metaB=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexB);
        dataB=calcData[data.fieldIndexes[i].indexB];
      }
      ValueMetaInterface metaC=null;
      Object dataC=null;
      if (data.fieldIndexes[i].indexC >= 0) {
        metaC=data.calcRowMeta.getValueMeta(data.fieldIndexes[i].indexC);
        dataC=calcData[data.fieldIndexes[i].indexC];
      }
switch (fn.getCalcType()) {
case CalculatorMetaFunction.CALC_NONE:
        break;
case CalculatorMetaFunction.CALC_ADD:
{
        calcData[inputRowMeta.size() + i]=ValueDataUtil.plus(metaA,dataA,metaB,dataB);
      }
    break;
case CalculatorMetaFunction.CALC_SUBTRACT:
{
    calcData[inputRowMeta.size() + i]=ValueDataUtil.minus(metaA,dataA,metaB,dataB);
  }
break;
case CalculatorMetaFunction.CALC_MULTIPLY:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.multiply(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_DIVIDE:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.divide(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_SQUARE:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.multiply(metaA,dataA,metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_SQUARE_ROOT:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.sqrt(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_1:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.percent1(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_2:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.percent2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_3:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.percent2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_1:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.combination1(metaA,dataA,metaB,dataB,metaC,dataC);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_2:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.combination2(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_ROUND_1:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.round(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_ROUND_2:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.round(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_CONSTANT:
{
calcData[inputRowMeta.size() + i]=dataA;
}
break;
case CalculatorMetaFunction.CALC_NVL:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.nvl(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_ADD_DAYS:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.addDays(metaA,dataA,metaB,dataB);
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.yearOfDate(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_MONTH_OF_DATE:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.monthOfDate(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_YEAR:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.dayOfYear(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_MONTH:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.dayOfMonth(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_WEEK:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.dayOfWeek(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.weekOfYear(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR_ISO8601:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.weekOfYearISO8601(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE_ISO8601:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.yearOfDateISO8601(metaA,dataA);
}
break;
case CalculatorMetaFunction.CALC_BYTE_TO_HEX_ENCODE:
{
calcData[inputRowMeta.size() + i]=ValueDataUtil.byteToHexEncode(metaA,dataA);
}
break;
}
}
}
return RowDataUtil.removeItems(calcData,data.tempIndexes);
}
