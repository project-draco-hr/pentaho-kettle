{
  if (first) {
    determineUsedFields(row);
    data.cx=Context.enter();
    data.scope=data.cx.initStandardObjects(null);
    first=false;
    Scriptable jsvalue=Context.toObject(this,data.scope);
    data.scope.put("_step_",data.scope,jsvalue);
    try {
      data.script=data.cx.compileString(meta.getScript(),"script",1,null);
    }
 catch (    Exception e) {
      logError(Messages.getString("ScriptValues.Log.CouldNotCompileJavascript") + e.toString());
      setErrors(1);
      stopAll();
      return false;
    }
  }
  Scriptable jsrow=Context.toObject(row,data.scope);
  data.scope.put("row",data.scope,jsrow);
  for (int i=0; i < data.fields_used.length; i++) {
    Value val=row.getValue(data.fields_used[i]);
    Scriptable jsarg=Context.toObject(val,data.scope);
    data.scope.put(val.getName(),data.scope,jsarg);
  }
  try {
    data.script.exec(data.cx,data.scope);
    StringBuffer message=new StringBuffer();
    Row add=new Row();
    for (int i=0; i < meta.getName().length; i++) {
      Value res=new Value();
      if (meta.getValue(data.scope,i,res,message)) {
        if (getStepMeta().isDoingErrorHandling()) {
          putError(row,1,message.toString(),meta.getName()[i],"SCR001");
        }
 else {
          logError(message.toString());
          setErrors(1);
          stopAll();
        }
        return false;
      }
      add.addValue(res);
    }
    row.addRow(add);
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      putError(row,1,e.toString(),null,"SCR002");
    }
 else {
      logError(Messages.getString("ScriptValues.Log.JavascriptError") + e.toString());
      logError(Messages.getString("ScriptValues.Log.ErrorStackTrace") + Const.CR + Const.getStackTracker(e));
      setErrors(1);
      stopAll();
    }
    return false;
  }
  return true;
}
