{
  final PurRepositoryLocation purRepositoryLocation=mock(PurRepositoryLocation.class);
  when(mockPurRepositoryMeta.getRepositoryLocation()).thenReturn(purRepositoryLocation);
  final String testRepoName="testRepoName";
  when(mockPurRepositoryMeta.getName()).thenReturn(testRepoName);
  final String testBaseUrl="testBaseUrl";
  when(purRepositoryLocation.getUrl()).thenReturn(testBaseUrl);
  final WebResource resource=mock(WebResource.class);
  final Client client=mock(Client.class);
  when(purRepositoryConnector.getClient()).thenReturn(client);
  when(client.resource(testBaseUrl + PurRepositoryConnector.SERVER_STATUS_ENDPOINT)).thenReturn(resource);
  doCallRealMethod().when(purRepositoryConnector).checkServerStatus();
  when(resource.get(String.class)).thenReturn(IServerStatusProvider.ServerStatus.STARTING.toString());
  try {
    purRepositoryConnector.checkServerStatus();
    fail();
  }
 catch (  KettleRepositoryStatusException e) {
    assertEquals(testRepoName,e.getRepositoryName());
  }
  when(resource.get(String.class)).thenReturn(IServerStatusProvider.ServerStatus.STARTED.toString());
  try {
    purRepositoryConnector.checkServerStatus();
  }
 catch (  KettleRepositoryStatusException e) {
    fail();
  }
}
