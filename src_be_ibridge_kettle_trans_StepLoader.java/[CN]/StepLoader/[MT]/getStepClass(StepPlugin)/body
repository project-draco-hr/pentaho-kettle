{
  if (sp != null) {
    try {
      Class cl=null;
switch (sp.getType()) {
case StepPlugin.TYPE_NATIVE:
{
          cl=Class.forName(sp.getClassname());
        }
      break;
case StepPlugin.TYPE_PLUGIN:
{
      String jarfiles[]=sp.getJarfiles();
      URL urls[]=new URL[jarfiles.length];
      for (int i=0; i < jarfiles.length; i++) {
        File jarfile=new File(jarfiles[i]);
        urls[i]=jarfile.toURL();
      }
      ClassLoader classLoader=getClass().getClassLoader();
      URLClassLoader ucl=(URLClassLoader)classLoaders.get(sp.getID());
      if (ucl == null) {
        ucl=new URLClassLoader(urls,classLoader);
        classLoaders.put(sp.getID(),ucl);
      }
      cl=ucl.loadClass(sp.getClassname());
    }
  break;
default :
throw new KettleStepLoaderException("Unknown plugin type : " + sp.getType());
}
return (StepMetaInterface)cl.newInstance();
}
 catch (ClassNotFoundException e) {
throw new KettleStepLoaderException("Class not found",e);
}
catch (InstantiationException e) {
throw new KettleStepLoaderException("Unable to instantiate class",e);
}
catch (IllegalAccessException e) {
throw new KettleStepLoaderException("Illegal access to class",e);
}
catch (MalformedURLException e) {
throw new KettleStepLoaderException("Malformed URL",e);
}
catch (Throwable e) {
throw new KettleStepLoaderException("Unexpected error loading class",e);
}
}
 else {
throw new KettleStepLoaderException("No valid step/plugin specified.");
}
}
