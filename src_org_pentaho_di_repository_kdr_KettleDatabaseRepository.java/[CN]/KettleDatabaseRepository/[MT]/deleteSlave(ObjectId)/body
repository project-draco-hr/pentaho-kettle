{
  securityProvider.validateAction(RepositoryOperation.DELETE_SLAVE_SERVER);
  String[] transList=getTransformationsUsingSlave(id_slave);
  String[] clustList=getClustersUsingSlave(id_slave);
  if (transList.length == 0 && clustList.length == 0) {
    connectionDelegate.performDelete("DELETE FROM " + quoteTable(KettleDatabaseRepository.TABLE_R_SLAVE) + " WHERE "+ quote(KettleDatabaseRepository.FIELD_SLAVE_ID_SLAVE)+ " = ? ",id_slave);
    connectionDelegate.performDelete("DELETE FROM " + quoteTable(KettleDatabaseRepository.TABLE_R_TRANS_SLAVE) + " WHERE "+ quote(KettleDatabaseRepository.FIELD_TRANS_SLAVE_ID_SLAVE)+ " = ? ",id_slave);
  }
 else {
    StringBuffer message=new StringBuffer();
    if (transList.length > 0) {
      message.append("Slave used by the following transformations:").append(Const.CR);
      for (int i=0; i < transList.length; i++) {
        message.append("  ").append(transList[i]).append(Const.CR);
      }
      message.append(Const.CR);
    }
    if (clustList.length > 0) {
      message.append("Slave used by the following cluster schemas:").append(Const.CR);
      for (int i=0; i < clustList.length; i++) {
        message.append("  ").append(clustList[i]).append(Const.CR);
      }
    }
    KettleDependencyException e=new KettleDependencyException(message.toString());
    throw new KettleDependencyException("This slave server is still in use by one or more transformations (" + transList.length + ") or cluster schemas ("+ clustList.length+ ") :",e);
  }
}
