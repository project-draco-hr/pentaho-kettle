{
  try {
    lockRepository();
    if (!Const.isEmpty(versionComment)) {
      insertLogEntry(versionComment);
    }
switch (repositoryElement.getRepositoryElementType()) {
case JOB:
      securityProvider.validateAction(RepositoryOperation.MODIFY_JOB);
    jobDelegate.saveJob((JobMeta)repositoryElement,versionComment,monitor);
  break;
case TRANSFORMATION:
securityProvider.validateAction(RepositoryOperation.MODIFY_TRANSFORMATION);
transDelegate.saveTransformation((TransMeta)repositoryElement,versionComment,monitor);
break;
case DATABASE:
securityProvider.validateAction(RepositoryOperation.MODIFY_DATABASE);
databaseDelegate.saveDatabaseMeta((DatabaseMeta)repositoryElement);
break;
case SLAVE_SERVER:
securityProvider.validateAction(RepositoryOperation.MODIFY_SLAVE_SERVER);
slaveServerDelegate.saveSlaveServer((SlaveServer)repositoryElement,parentId,used);
break;
case CLUSTER_SCHEMA:
securityProvider.validateAction(RepositoryOperation.MODIFY_CLUSTER_SCHEMA);
clusterSchemaDelegate.saveClusterSchema((ClusterSchema)repositoryElement,versionComment,parentId,used);
break;
case PARTITION_SCHEMA:
securityProvider.validateAction(RepositoryOperation.MODIFY_PARTITION_SCHEMA);
partitionSchemaDelegate.savePartitionSchema((PartitionSchema)repositoryElement,parentId,used);
default :
throw new KettleException("We can't save the element with type [" + repositoryElement.getRepositoryElementType() + "] in the repository");
}
commit();
}
  finally {
unlockRepository();
}
}
