{
  List<TransHopMeta> transHops=new ArrayList<TransHopMeta>();
  int[] hopIndexes=new int[transformation.nrTransHops()];
  int hopIndex=0;
  main:   for (int i=transformation.nrTransHops() - 1; i >= 0; i--) {
    TransHopMeta hi=transformation.getTransHop(i);
    for (int j=0; j < steps.length; j++) {
      if (hi.getFromStep().equals(steps[j]) || hi.getToStep().equals(steps[j])) {
        int idx=transformation.indexOfTransHop(hi);
        transHops.add((TransHopMeta)hi.clone());
        hopIndexes[hopIndex]=idx;
        transformation.removeTransHop(idx);
        spoon.refreshTree();
        continue main;
      }
    }
    hopIndex++;
  }
  TransHopMeta[] hops=transHops.toArray(new TransHopMeta[transHops.size()]);
  spoon.addUndoDelete(transformation,hops,hopIndexes);
  int[] positions=new int[steps.length];
  for (int i=0; i < steps.length; i++) {
    int pos=transformation.indexOfStep(steps[i]);
    transformation.removeStep(pos);
    positions[i]=pos;
  }
  spoon.addUndoDelete(transformation,steps,positions);
  spoon.refreshTree();
  spoon.refreshGraph();
}
