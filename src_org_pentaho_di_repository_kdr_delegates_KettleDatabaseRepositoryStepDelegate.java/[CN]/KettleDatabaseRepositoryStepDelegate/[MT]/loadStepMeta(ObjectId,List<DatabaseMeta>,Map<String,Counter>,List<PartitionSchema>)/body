{
  StepMeta stepMeta=new StepMeta();
  PluginRegistry registry=PluginRegistry.getInstance();
  try {
    RowMetaAndData r=getStep(id_step);
    if (r != null) {
      stepMeta.setObjectId(id_step);
      stepMeta.setName(r.getString("NAME",null));
      stepMeta.setDescription(r.getString("DESCRIPTION",null));
      long id_step_type=r.getInteger("ID_STEP_TYPE",-1L);
      RowMetaAndData steptyperow=getStepType(new LongObjectId(id_step_type));
      stepMeta.setStepID(steptyperow.getString("CODE",null));
      stepMeta.setDistributes(r.getBoolean("DISTRIBUTE",true));
      stepMeta.setCopies((int)r.getInteger("COPIES",1));
      int x=(int)r.getInteger("GUI_LOCATION_X",0);
      int y=(int)r.getInteger("GUI_LOCATION_Y",0);
      stepMeta.setLocation(new Point(x,y));
      stepMeta.setDraw(r.getBoolean("GUI_DRAW",false));
      PluginInterface sp=registry.findPluginWithId(StepPluginType.class,stepMeta.getStepID());
      if (sp != null) {
        stepMeta.setStepMetaInterface((StepMetaInterface)registry.loadClass(sp));
      }
 else {
        throw new KettleStepLoaderException(BaseMessages.getString(PKG,"StepMeta.Exception.UnableToLoadClass",stepMeta.getStepID() + Const.CR));
      }
      if (stepMeta.getStepMetaInterface() != null) {
        stepMeta.getStepMetaInterface().readRep(repository,stepMeta.getObjectId(),databases,counters);
      }
      stepMeta.setStepPartitioningMeta(loadStepPartitioningMeta(stepMeta.getObjectId()));
      stepMeta.getStepPartitioningMeta().setPartitionSchemaAfterLoading(partitionSchemas);
      stepMeta.setClusterSchemaName(repository.getStepAttributeString(id_step,"cluster_schema"));
      return stepMeta;
    }
 else {
      throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepInfoCouldNotBeFound",String.valueOf(id_step)));
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepCouldNotBeLoaded",String.valueOf(stepMeta.getObjectId())),dbe);
  }
}
