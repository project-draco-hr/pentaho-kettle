{
  StringBuilder xml=new StringBuilder(200);
  xml.append("  <" + XML_TAG + ">").append(Const.CR);
  xml.append("    ").append(XMLHandler.addTagValue("exec_local",executingLocally));
  xml.append("    ").append(XMLHandler.addTagValue("exec_remote",executingRemotely));
  if (remoteServer != null) {
    xml.append("    ").append(remoteServer.getXML()).append(Const.CR);
  }
  xml.append("    ").append(XMLHandler.addTagValue("pass_export",passingExport));
  xml.append("    ").append(XMLHandler.addTagValue("exec_cluster",executingClustered));
  xml.append("    ").append(XMLHandler.addTagValue("cluster_post",clusterPosting));
  xml.append("    ").append(XMLHandler.addTagValue("cluster_prepare",clusterPreparing));
  xml.append("    ").append(XMLHandler.addTagValue("cluster_start",clusterStarting));
  xml.append("    ").append(XMLHandler.addTagValue("cluster_show_trans",clusterShowingTransformation));
  xml.append("    <parameters>").append(Const.CR);
  List<String> paramNames=new ArrayList<String>(params.keySet());
  Collections.sort(paramNames);
  for (  String name : paramNames) {
    String value=params.get(name);
    xml.append("    <parameter>");
    xml.append(XMLHandler.addTagValue("name",name,false));
    xml.append(XMLHandler.addTagValue("value",value,false));
    xml.append("</parameter>").append(Const.CR);
  }
  xml.append("    </parameters>").append(Const.CR);
  xml.append("    <variables>").append(Const.CR);
  List<String> variableNames=new ArrayList<String>(variables.keySet());
  Collections.sort(variableNames);
  for (  String name : variableNames) {
    String value=variables.get(name);
    xml.append("    <variable>");
    xml.append(XMLHandler.addTagValue("name",name,false));
    xml.append(XMLHandler.addTagValue("value",value,false));
    xml.append("</variable>").append(Const.CR);
  }
  xml.append("    </variables>").append(Const.CR);
  xml.append("    <arguments>").append(Const.CR);
  List<String> argumentNames=new ArrayList<String>(arguments.keySet());
  Collections.sort(argumentNames);
  for (  String name : argumentNames) {
    String value=arguments.get(name);
    xml.append("    <argument>");
    xml.append(XMLHandler.addTagValue("name",name,false));
    xml.append(XMLHandler.addTagValue("value",value,false));
    xml.append("</argument>").append(Const.CR);
  }
  xml.append("    </arguments>").append(Const.CR);
  xml.append("    ").append(XMLHandler.addTagValue("replay_date",replayDate));
  xml.append("    ").append(XMLHandler.addTagValue("safe_mode",safeModeEnabled));
  xml.append("    ").append(XMLHandler.addTagValue("log_level",logLevel.getCode()));
  xml.append("    ").append(XMLHandler.addTagValue("log_file",setLogfile));
  xml.append("    ").append(XMLHandler.addTagValue("log_filename",logFileName));
  xml.append("    ").append(XMLHandler.addTagValue("log_file_append",setAppendLogfile));
  xml.append("    ").append(XMLHandler.addTagValue("create_parent_folder",createParentFolder));
  xml.append("    ").append(XMLHandler.addTagValue("clear_log",clearingLog));
  xml.append("    ").append(XMLHandler.addTagValue("gather_metrics",gatheringMetrics));
  xml.append("    ").append(XMLHandler.addTagValue("show_subcomponents",showingSubComponents));
  if (previousResult != null) {
    xml.append(previousResult.getXML());
  }
  if (repository != null) {
    xml.append(XMLHandler.openTag("repository"));
    xml.append(XMLHandler.addTagValue("name",repository.getName()));
    if (repository.getUserInfo() != null) {
      xml.append(XMLHandler.addTagValue("login",repository.getUserInfo().getLogin()));
      xml.append(XMLHandler.addTagValue("password",Encr.encryptPassword(repository.getUserInfo().getPassword())));
    }
    xml.append(XMLHandler.closeTag("repository"));
  }
  xml.append("</" + XML_TAG + ">").append(Const.CR);
  return xml.toString();
}
