{
  try {
    lineNumberInFile=0;
    if (!closeLastFile() && failAfterBadFile(null)) {
      return false;
    }
    if (data.getFiles().nrOfFiles() == 0) {
      return false;
    }
    data.isLastFile=(data.filenr == data.getFiles().nrOfFiles() - 1);
    data.file=data.getFiles().getFile(data.filenr);
    data.filename=KettleVFS.getFilename(data.file);
    data.filenr++;
    if (data.addShortFilename) {
      data.shortFilename=data.file.getName().getBaseName();
    }
    if (data.addPath) {
      data.path=KettleVFS.getFilename(data.file.getParent());
    }
    if (data.addIsHidden) {
      data.hidden=data.file.isHidden();
    }
    if (data.addExtension) {
      data.extension=data.file.getName().getExtension();
    }
    if (data.addLastModificationDate) {
      data.lastModificationDateTime=new Date(data.file.getContent().getLastModifiedTime());
    }
    if (data.addUri) {
      data.uriName=data.file.getName().getURI();
    }
    if (data.addRootUri) {
      data.rootUriName=data.file.getName().getRootURI();
    }
    if (data.addSize) {
      data.size=new Long(data.file.getContent().getSize());
    }
    data.lineInFile=0;
    if (meta.isPassingThruFields()) {
      data.currentPassThruFieldsRow=data.passThruFields.get(data.file);
    }
    if (meta.isAddResultFile()) {
      ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,data.file,getTransMeta().getName(),toString());
      resultFile.setComment("File was read by an Text File input step");
      addResultFile(resultFile);
    }
    if (log.isBasic()) {
      logBasic("Opening file: " + data.file.getName().getFriendlyURI());
    }
    CompressionProvider provider=CompressionProviderFactory.getInstance().getCompressionProviderByName(meta.getFileCompression());
    data.in=provider.createInputStream(KettleVFS.getInputStream(data.file));
    data.dataErrorLineHandler.handleFile(data.file);
    data.in.nextEntry();
    if (log.isDetailed()) {
      logDetailed("This is a compressed file being handled by the " + provider.getName() + " provider");
    }
    if (meta.getEncoding() != null && meta.getEncoding().length() > 0) {
      data.isr=new InputStreamReader(new BufferedInputStream(data.in,BUFFER_SIZE_INPUT_STREAM),meta.getEncoding());
    }
 else {
      data.isr=new InputStreamReader(new BufferedInputStream(data.in,BUFFER_SIZE_INPUT_STREAM));
    }
    String encoding=data.isr.getEncoding();
    data.encodingType=OldEncodingType.guessEncodingType(encoding);
    data.doneReading=false;
    int bufferSize=1;
    bufferSize+=meta.hasHeader() ? meta.getNrHeaderLines() : 0;
    bufferSize+=meta.isLayoutPaged() ? meta.getNrLinesPerPage() * (Math.max(0,meta.getNrWraps()) + 1) : Math.max(0,meta.getNrWraps());
    bufferSize+=meta.hasFooter() ? meta.getNrFooterLines() : 0;
    if (meta.isLayoutPaged()) {
      for (int i=0; i < meta.getNrLinesDocHeader(); i++) {
        getLine(log,data.isr,data.encodingType,data.fileFormatType,data.lineStringBuilder);
        lineNumberInFile++;
      }
    }
    for (int i=0; i < bufferSize && !data.doneReading; i++) {
      boolean wasNotFiltered=tryToReadLine(!meta.hasHeader() || i >= meta.getNrHeaderLines());
      if (!wasNotFiltered) {
        bufferSize++;
      }
    }
    data.headerLinesRead=0;
    data.footerLinesRead=0;
    data.pageLinesRead=0;
    data.doneWithHeader=!meta.hasHeader();
  }
 catch (  Exception e) {
    String errorMsg="Couldn't open file #" + data.filenr + " : "+ data.file.getName().getFriendlyURI()+ " --> "+ e.toString();
    logError(errorMsg);
    if (failAfterBadFile(errorMsg)) {
      stopAll();
    }
    setErrors(getErrors() + 1);
    return false;
  }
  return true;
}
