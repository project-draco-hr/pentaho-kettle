{
  StepIOMetaInterface stepIOMeta=meta.getStepIOMeta();
  List<StreamInterface> infoStreams=stepIOMeta.getInfoStreams();
  StreamInterface stream;
  String streamDescription;
  ArrayList<String> inputStepNameList=new ArrayList<String>();
  ArrayList<String> keyList=new ArrayList<String>();
  CCombo wInputStep;
  String inputStepName;
  for (int i=0; i < wInputStepArray.length; i++) {
    wInputStep=wInputStepArray[i];
    inputStepName=wInputStep.getText();
    if (Utils.isEmpty(inputStepName)) {
      continue;
    }
    inputStepNameList.add(inputStepName);
    keyList.add(keyValTextBox[i].getText());
    if (infoStreams.size() < inputStepNameList.size()) {
      streamDescription=BaseMessages.getString(PKG,"MultiMergeJoin.InfoStream.Description");
      stream=new Stream(StreamType.INFO,null,streamDescription,StreamIcon.INFO,null);
      stepIOMeta.addStream(stream);
    }
  }
  int inputStepCount=inputStepNameList.size();
  meta.allocateInputSteps(inputStepCount);
  meta.allocateKeys(inputStepCount);
  String[] inputSteps=meta.getInputSteps();
  String[] keyFields=meta.getKeyFields();
  infoStreams=stepIOMeta.getInfoStreams();
  for (int i=0; i < inputStepCount; i++) {
    inputStepName=inputStepNameList.get(i);
    inputSteps[i]=inputStepName;
    stream=infoStreams.get(i);
    stream.setStepMeta(transMeta.findStep(inputStepName));
    keyFields[i]=keyList.get(i);
  }
  meta.setJoinType(joinTypeCombo.getText());
}
