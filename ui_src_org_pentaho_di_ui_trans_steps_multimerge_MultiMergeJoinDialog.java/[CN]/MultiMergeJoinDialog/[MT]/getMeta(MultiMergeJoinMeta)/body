{
  List<StreamInterface> infoStreams=meta.getStepIOMeta().getInfoStreams();
  if (infoStreams.size() == 0) {
    if (inputSteps != null && inputSteps.length != 0) {
      for (int i=0; i < inputSteps.length; i++) {
        meta.getStepIOMeta().addStream(new Stream(StreamType.INFO,null,BaseMessages.getString(PKG,"MultiMergeJoin.InfoStream.Description"),StreamIcon.INFO,null));
      }
      infoStreams=meta.getStepIOMeta().getInfoStreams();
    }
  }
 else   if (inputSteps != null && infoStreams.size() < inputSteps.length) {
    int requiredStreams=inputSteps.length - infoStreams.size();
    for (int i=0; i < requiredStreams; i++) {
      meta.getStepIOMeta().addStream(new Stream(StreamType.INFO,null,BaseMessages.getString(PKG,"MultiMergeJoin.InfoStream.Description"),StreamIcon.INFO,null));
    }
    infoStreams=meta.getStepIOMeta().getInfoStreams();
  }
  int streamCount=infoStreams.size();
  meta.allocateInputSteps(streamCount);
  meta.allocateKeys(streamCount);
  for (int i=0; i < streamCount; i++) {
    meta.getInputSteps()[i]=wInputStepArray[i].getText();
    infoStreams.get(i).setStepMeta(transMeta.findStep(wInputStepArray[i].getText()));
    meta.getKeyFields()[i]=keyValTextBox[i].getText();
  }
  meta.setJoinType(joinTypeCombo.getText());
}
