{
  UIRepositoryDirectory newSelectedItem=null;
  for (  Object object : folderTree.getSelectedItems()) {
    if (object instanceof UIRepositoryDirectory) {
      repoDir=(UIRepositoryDirectory)object;
      newSelectedItem=repoDir.getParent();
      confirmBox=(XulConfirmBox)document.createElement("confirmbox");
      confirmBox.setTitle(BaseMessages.getString(PKG,"BrowseController.DeleteNonEmptyFolderWarningTitle"));
      confirmBox.setMessage(BaseMessages.getString(PKG,"BrowseController.DeleteFolderWarningMessage"));
      confirmBox.setAcceptLabel(BaseMessages.getString(PKG,"Dialog.Ok"));
      confirmBox.setCancelLabel(BaseMessages.getString(PKG,"Dialog.Cancel"));
      confirmBox.addDialogCallback(new XulDialogCallback<Object>(){
        public void onClose(        XulComponent sender,        Status returnCode,        Object retVal){
          if (returnCode == Status.ACCEPT) {
            try {
              deleteFolder(repoDir);
            }
 catch (            Exception e) {
              if (mainController == null || !mainController.handleLostRepository(e)) {
                new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoryExplorerDialog.ErrorDialog.Title"),BaseMessages.getString(PKG,"RepositoryExplorerDialog.ErrorDialog.Message"),e);
              }
            }
          }
        }
        public void onError(        XulComponent sender,        Throwable t){
          throw new RuntimeException(t);
        }
      }
);
      confirmBox.open();
      break;
    }
 else {
      deleteFolder(repoDir);
    }
  }
  if (newSelectedItem != null) {
    folderTree.setSelectedItems(Arrays.asList(newSelectedItem));
  }
}
