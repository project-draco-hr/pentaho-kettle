{
  try {
    Collection<UIRepositoryDirectory> directories=folderTree.getSelectedItems();
    if (directories == null || directories.size() == 0) {
      return;
    }
    UIRepositoryDirectory selectedFolder=directories.iterator().next();
    XulPromptBox prompt=promptForName(null);
    prompt.addDialogCallback(new XulDialogCallback<String>(){
      public void onClose(      XulComponent component,      Status status,      String value){
        newName=value;
      }
      public void onError(      XulComponent component,      Throwable err){
        throw new RuntimeException(err);
      }
    }
);
    prompt.open();
    if (newName != null) {
      if (selectedFolder == null) {
        selectedFolder=repositoryDirectory;
      }
      boolean folderExistsInUI=selectedFolder.contains(newName);
      if (folderExistsInUI) {
        throw new Exception(BaseMessages.getString(PKG,"BrowserController.DirAlreadyExistsInUI",newName));
      }
      String newNameInRepo=selectedFolder.checkDirNameExistsInRepo(newName);
      if (newNameInRepo != null) {
        messageBox.setTitle(BaseMessages.getString(PKG,"Dialog.Warning"));
        messageBox.setAcceptLabel(BaseMessages.getString(PKG,"Dialog.Ok"));
        messageBox.setMessage(BaseMessages.getString(PKG,"BrowserController.DirAlreadyExistsInRepository",newNameInRepo));
        messageBox.open();
        newName=newNameInRepo;
      }
      UIRepositoryDirectory newDir=selectedFolder.createFolder(newName);
      dirMap.put(newDir.getObjectId(),newDir);
      directoryBinding.fireSourceChanged();
      selectedItemsBinding.fireSourceChanged();
      this.folderTree.setSelectedItems(Collections.singletonList(selectedFolder));
    }
    newName=null;
  }
 catch (  Exception e) {
    messageBox.setTitle(BaseMessages.getString(PKG,"Dialog.Error"));
    messageBox.setAcceptLabel(BaseMessages.getString(PKG,"Dialog.Ok"));
    messageBox.setMessage(e.getLocalizedMessage());
    messageBox.open();
  }
}
