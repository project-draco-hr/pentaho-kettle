{
  List<StepInjectionMetaEntry> result=new ArrayList<StepInjectionMetaEntry>();
  result.add(getEntry(Entry.FILE_TYPE,meta.content.fileType));
  result.add(getEntry(Entry.SEPARATOR,meta.content.separator));
  result.add(getEntry(Entry.ENCLOSURE,meta.content.enclosure));
  result.add(getEntry(Entry.ESCAPE_CHAR,meta.content.escapeCharacter));
  result.add(getEntry(Entry.BREAK_IN_ENCLOSURE,meta.content.breakInEnclosureAllowed));
  result.add(getEntry(Entry.HEADER_PRESENT,meta.content.header));
  result.add(getEntry(Entry.NR_HEADER_LINES,meta.content.nrHeaderLines));
  result.add(getEntry(Entry.HAS_FOOTER,meta.content.footer));
  result.add(getEntry(Entry.NR_FOOTER_LINES,meta.content.nrFooterLines));
  result.add(getEntry(Entry.HAS_WRAPPED_LINES,meta.content.lineWrapped));
  result.add(getEntry(Entry.NR_WRAPS,meta.content.nrWraps));
  result.add(getEntry(Entry.HAS_PAGED_LAYOUT,meta.content.layoutPaged));
  result.add(getEntry(Entry.NR_DOC_HEADER_LINES,meta.content.nrLinesDocHeader));
  result.add(getEntry(Entry.NR_LINES_PER_PAGE,meta.content.nrLinesPerPage));
  result.add(getEntry(Entry.COMPRESSION_TYPE,meta.content.fileCompression));
  result.add(getEntry(Entry.NO_EMPTY_LINES,meta.content.noEmptyLines));
  result.add(getEntry(Entry.INCLUDE_FILENAME,meta.content.includeFilename));
  result.add(getEntry(Entry.FILENAME_FIELD,meta.content.filenameField));
  result.add(getEntry(Entry.INCLUDE_ROW_NUMBER,meta.content.includeRowNumber));
  result.add(getEntry(Entry.ROW_NUMBER_BY_FILE,meta.content.rowNumberByFile));
  result.add(getEntry(Entry.ROW_NUMBER_FIELD,meta.content.rowNumberField));
  result.add(getEntry(Entry.FILE_FORMAT,meta.content.fileFormat));
  result.add(getEntry(Entry.ENCODING,meta.content.encoding));
  result.add(getEntry(Entry.ROW_LIMIT,meta.content.rowLimit));
  result.add(getEntry(Entry.DATE_FORMAT_LENIENT,meta.content.dateFormatLenient));
  result.add(getEntry(Entry.DATE_FORMAT_LOCALE,meta.content.dateFormatLocale));
  result.add(getEntry(Entry.ACCEPT_FILE_NAMES,meta.inputFiles.acceptingFilenames));
  result.add(getEntry(Entry.ACCEPT_FILE_STEP,meta.inputFiles.acceptingStepName));
  result.add(getEntry(Entry.ACCEPT_FILE_FIELD,meta.inputFiles.acceptingField));
  result.add(getEntry(Entry.PASS_THROUGH_FIELDS,meta.inputFiles.passingThruFields));
  result.add(getEntry(Entry.ADD_FILES_TO_RESULT,meta.inputFiles.isaddresult));
  result.add(getEntry(Entry.FILE_SHORT_FILE_FIELDNAME,meta.additionalOutputFields.shortFilenameField));
  result.add(getEntry(Entry.FILE_PATH_FIELDNAME,meta.additionalOutputFields.pathField));
  result.add(getEntry(Entry.FILE_HIDDEN_FIELDNAME,meta.additionalOutputFields.hiddenField));
  result.add(getEntry(Entry.FILE_LAST_MODIFICATION_FIELDNAME,meta.additionalOutputFields.lastModificationField));
  result.add(getEntry(Entry.FILE_URI_FIELDNAME,meta.additionalOutputFields.uriField));
  result.add(getEntry(Entry.FILE_EXTENSION_FIELDNAME,meta.additionalOutputFields.extensionField));
  result.add(getEntry(Entry.FILE_SIZE_FIELDNAME,meta.additionalOutputFields.sizeField));
  result.add(getEntry(Entry.SKIP_BAD_FILES,meta.errorHandling.skipBadFiles));
  result.add(getEntry(Entry.FILE_ERROR_FIELD,meta.errorHandling.fileErrorField));
  result.add(getEntry(Entry.FILE_ERROR_MESSAGE_FIELD,meta.errorHandling.fileErrorMessageField));
  result.add(getEntry(Entry.IGNORE_ERRORS,meta.errorHandling.errorIgnored));
  result.add(getEntry(Entry.ERROR_COUNT_FIELD,meta.getErrorCountField()));
  result.add(getEntry(Entry.ERROR_FIELDS_FIELD,meta.getErrorFieldsField()));
  result.add(getEntry(Entry.ERROR_TEXT_FIELD,meta.getErrorTextField()));
  result.add(getEntry(Entry.WARNING_FILES_TARGET_DIR,meta.errorHandling.warningFilesDestinationDirectory));
  result.add(getEntry(Entry.WARNING_FILES_EXTENTION,meta.errorHandling.warningFilesExtension));
  result.add(getEntry(Entry.ERROR_FILES_TARGET_DIR,meta.errorHandling.errorFilesDestinationDirectory));
  result.add(getEntry(Entry.ERROR_FILES_EXTENTION,meta.errorHandling.errorFilesExtension));
  result.add(getEntry(Entry.LINE_NR_FILES_TARGET_DIR,meta.errorHandling.lineNumberFilesDestinationDirectory));
  result.add(getEntry(Entry.LINE_NR_FILES_EXTENTION,meta.errorHandling.lineNumberFilesExtension));
  result.add(getEntry(Entry.ERROR_LINES_SKIPPED,meta.isErrorLineSkipped()));
  StepInjectionMetaEntry filenameLinesEntry=getEntry(Entry.FILENAME_LINES);
  if (!Const.isEmpty(meta.getFileName())) {
    for (int i=0, len=meta.getFileName().length; i < len; i++) {
      StepInjectionMetaEntry filenameLineEntry=getEntry(Entry.FILENAME_LINE);
      filenameLinesEntry.getDetails().add(filenameLineEntry);
      List<StepInjectionMetaEntry> filenameLineEntryDetails=filenameLineEntry.getDetails();
      filenameLineEntryDetails.add(getEntry(Entry.FILENAME,meta.getFileName()[i]));
      filenameLineEntryDetails.add(getEntry(Entry.FILEMASK,meta.inputFiles.fileMask[i]));
      filenameLineEntryDetails.add(getEntry(Entry.EXCLUDE_FILEMASK,meta.inputFiles.excludeFileMask[i]));
      filenameLineEntryDetails.add(getEntry(Entry.FILE_REQUIRED,meta.inputFiles.fileRequired[i]));
      filenameLineEntryDetails.add(getEntry(Entry.INCLUDE_SUBFOLDERS,meta.inputFiles.includeSubFolders[i]));
    }
  }
  result.add(filenameLinesEntry);
  StepInjectionMetaEntry fieldsEntry=getEntry(Entry.FIELDS);
  if (!Const.isEmpty(meta.inputFiles.inputFields)) {
    for (    BaseFileInputField inputField : meta.inputFiles.inputFields) {
      StepInjectionMetaEntry fieldEntry=getEntry(Entry.FIELD);
      fieldsEntry.getDetails().add(fieldEntry);
      List<StepInjectionMetaEntry> fieldDetails=fieldEntry.getDetails();
      fieldDetails.add(getEntry(Entry.FIELD,inputField.getName()));
      fieldDetails.add(getEntry(Entry.FIELD_POSITION,inputField.getPosition()));
      fieldDetails.add(getEntry(Entry.FIELD_LENGTH,inputField.getLength()));
      fieldDetails.add(getEntry(Entry.FIELD_TYPE,inputField.getType()));
      fieldDetails.add(getEntry(Entry.FIELD_IGNORE,inputField.isIgnored()));
      fieldDetails.add(getEntry(Entry.FIELD_FORMAT,inputField.getFormat()));
      fieldDetails.add(getEntry(Entry.FIELD_TRIM_TYPE,inputField.getTrimType()));
      fieldDetails.add(getEntry(Entry.FIELD_PRECISION,inputField.getPrecision()));
      fieldDetails.add(getEntry(Entry.FIELD_DECIMAL,inputField.getDecimalSymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_GROUP,inputField.getGroupSymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_CURRENCY,inputField.getCurrencySymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_REPEAT,inputField.isRepeated()));
      fieldDetails.add(getEntry(Entry.FIELD_NULL_STRING,inputField.getNullString()));
      fieldDetails.add(getEntry(Entry.FIELD_IF_NULL,inputField.getIfNullValue()));
    }
  }
  result.add(fieldsEntry);
  return result;
}
