{
  try {
    filename=rep.getStepAttributeString(id_step,CsvInputAttr.FILENAME.getRepCode());
    filenameField=rep.getStepAttributeString(id_step,CsvInputAttr.FILENAME_FIELD.getRepCode());
    rowNumField=rep.getStepAttributeString(id_step,CsvInputAttr.ROW_NUM_FIELD.getRepCode());
    includingFilename=rep.getStepAttributeBoolean(id_step,CsvInputAttr.INCLUDE_FILENAME.getRepCode());
    delimiter=rep.getStepAttributeString(id_step,CsvInputAttr.DELIMITER.getRepCode());
    enclosure=rep.getStepAttributeString(id_step,CsvInputAttr.ENCLOSURE.getRepCode());
    headerPresent=rep.getStepAttributeBoolean(id_step,CsvInputAttr.HEADER_PRESENT.getRepCode());
    bufferSize=rep.getStepAttributeString(id_step,CsvInputAttr.BUFFERSIZE.getRepCode());
    lazyConversionActive=rep.getStepAttributeBoolean(id_step,CsvInputAttr.LAZY_CONVERSION.getRepCode());
    isaddresult=rep.getStepAttributeBoolean(id_step,CsvInputAttr.ADD_FILENAME_RESULT.getRepCode());
    runningInParallel=rep.getStepAttributeBoolean(id_step,CsvInputAttr.PARALLEL.getRepCode());
    encoding=rep.getStepAttributeString(id_step,CsvInputAttr.ENCODING.getRepCode());
    int nrfields=rep.countNrStepAttributes(id_step,CsvInputAttr.FIELD_NAME.getRepCode());
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      inputFields[i]=new TextFileInputField();
      inputFields[i].setName(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_NAME.getRepCode()));
      inputFields[i].setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_TYPE.getRepCode())));
      inputFields[i].setFormat(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_FORMAT.getRepCode()));
      inputFields[i].setCurrencySymbol(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_CURRENCY.getRepCode()));
      inputFields[i].setDecimalSymbol(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_DECIMAL.getRepCode()));
      inputFields[i].setGroupSymbol(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_GROUP.getRepCode()));
      inputFields[i].setLength((int)rep.getStepAttributeInteger(id_step,i,CsvInputAttr.FIELD_LENGTH.getRepCode()));
      inputFields[i].setPrecision((int)rep.getStepAttributeInteger(id_step,i,CsvInputAttr.FIELD_PRECISION.getRepCode()));
      inputFields[i].setTrimType(ValueMeta.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,CsvInputAttr.FIELD_TRIM_TYPE.getRepCode())));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
