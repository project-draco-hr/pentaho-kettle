{
  try {
    filename=XMLHandler.getTagValue(stepnode,CsvInputAttr.FILENAME);
    filenameField=XMLHandler.getTagValue(stepnode,CsvInputAttr.FILENAME_FIELD);
    rowNumField=XMLHandler.getTagValue(stepnode,CsvInputAttr.ROW_NUM_FIELD);
    includingFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,CsvInputAttr.INCLUDE_FILENAME));
    delimiter=XMLHandler.getTagValue(stepnode,CsvInputAttr.DELIMITER);
    enclosure=XMLHandler.getTagValue(stepnode,CsvInputAttr.ENCLOSURE);
    bufferSize=XMLHandler.getTagValue(stepnode,CsvInputAttr.BUFFERSIZE);
    headerPresent="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,CsvInputAttr.HEADER_PRESENT));
    lazyConversionActive="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,CsvInputAttr.LAZY_CONVERSION));
    isaddresult="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,CsvInputAttr.ADD_FILENAME_RESULT));
    runningInParallel="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,CsvInputAttr.PARALLEL));
    encoding=XMLHandler.getTagValue(stepnode,CsvInputAttr.ENCODING);
    Node fields=XMLHandler.getSubNode(stepnode,CsvInputAttr.FIELDS.getXmlCode());
    int nrfields=XMLHandler.countNodes(fields,CsvInputAttr.FIELD.getXmlCode());
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      inputFields[i]=new TextFileInputField();
      Node fnode=XMLHandler.getSubNodeByNr(fields,CsvInputAttr.FIELD.getXmlCode(),i);
      inputFields[i].setName(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_NAME));
      inputFields[i].setType(ValueMeta.getType(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_TYPE)));
      inputFields[i].setFormat(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_FORMAT));
      inputFields[i].setCurrencySymbol(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_CURRENCY));
      inputFields[i].setDecimalSymbol(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_DECIMAL));
      inputFields[i].setGroupSymbol(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_GROUP));
      inputFields[i].setLength(Const.toInt(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_LENGTH),-1));
      inputFields[i].setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_PRECISION),-1));
      inputFields[i].setTrimType(ValueMeta.getTrimTypeByCode(XMLHandler.getTagValue(fnode,CsvInputAttr.FIELD_TRIM_TYPE)));
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
