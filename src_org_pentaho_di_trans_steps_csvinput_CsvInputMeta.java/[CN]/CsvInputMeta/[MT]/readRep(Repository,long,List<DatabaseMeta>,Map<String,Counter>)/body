{
  try {
    filename=rep.getStepAttributeString(id_step,"filename");
    delimiter=rep.getStepAttributeString(id_step,"separator");
    enclosure=rep.getStepAttributeString(id_step,"enclosure");
    headerPresent=rep.getStepAttributeBoolean(id_step,"header");
    bufferSize=rep.getStepAttributeString(id_step,"buffer_size");
    lazyConversionActive=rep.getStepAttributeBoolean(id_step,"lazy_conversion");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldNames[i]=rep.getStepAttributeString(id_step,i,"field_name");
      fieldTypes[i]=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      fieldFormat[i]=rep.getStepAttributeString(id_step,i,"field_format");
      fieldCurrency[i]=rep.getStepAttributeString(id_step,i,"field_currency");
      fieldDecimal[i]=rep.getStepAttributeString(id_step,i,"field_decimal");
      fieldGrouping[i]=rep.getStepAttributeString(id_step,i,"field_group");
      fieldLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      fieldPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
