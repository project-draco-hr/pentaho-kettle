{
  int valtype=ValueMeta.getType(wValueType.getText());
  ValueMetaAndData val=new ValueMetaAndData(valuename,wInputString.getText());
  val.getValueMeta().setType(valtype);
  val.getValueMeta().setConversionMask(wFormat.getText());
  val.getValueMeta().setLength(Const.toInt(wLength.getText(),-1));
  val.getValueMeta().setPrecision(Const.toInt(wPrecision.getText(),-1));
switch (valtype) {
case ValueMetaInterface.TYPE_NUMBER:
    val.setValueData(val.getValueMeta().getNumber(val.getValueData()));
  break;
case ValueMetaInterface.TYPE_DATE:
val.setValueData(val.getValueMeta().getDate(val.getValueData()));
break;
case ValueMetaInterface.TYPE_STRING:
break;
case ValueMetaInterface.TYPE_BOOLEAN:
val.setValueData(ValueDataUtil.trim(wInputString.getText()));
val.setValueData(val.getValueMeta().getBoolean(val.getValueData()));
break;
case ValueMetaInterface.TYPE_INTEGER:
val.setValueData(ValueDataUtil.trim(wInputString.getText()));
val.setValueData(val.getValueMeta().getInteger(val.getValueData()));
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
val.setValueData(ValueDataUtil.trim(wInputString.getText()));
val.setValueData(val.getValueMeta().getBigNumber(val.getValueData()));
break;
case ValueMetaInterface.TYPE_BINARY:
val.setValueData(val.getValueMeta().getBinary(val.getValueData()));
break;
default :
break;
}
return val;
}
