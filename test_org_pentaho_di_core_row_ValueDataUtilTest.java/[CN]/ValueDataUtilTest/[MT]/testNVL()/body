{
  assertEquals(Double.valueOf("1.0"),calculate("1","",ValueMetaInterface.TYPE_NUMBER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(Double.valueOf("2.0"),calculate("","2",ValueMetaInterface.TYPE_NUMBER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(Double.valueOf("10.0"),calculate("10","20",ValueMetaInterface.TYPE_NUMBER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(null,calculate("","",ValueMetaInterface.TYPE_NUMBER,CalculatorMetaFunction.CALC_NVL));
  assertEquals("1",calculate("1","",ValueMetaInterface.TYPE_STRING,CalculatorMetaFunction.CALC_NVL));
  assertEquals("2",calculate("","2",ValueMetaInterface.TYPE_STRING,CalculatorMetaFunction.CALC_NVL));
  assertEquals("10",calculate("10","20",ValueMetaInterface.TYPE_STRING,CalculatorMetaFunction.CALC_NVL));
  assertEquals(null,calculate("","",ValueMetaInterface.TYPE_STRING,CalculatorMetaFunction.CALC_NVL));
  assertEquals(Long.valueOf("1"),calculate("1","",ValueMetaInterface.TYPE_INTEGER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(Long.valueOf("2"),calculate("","2",ValueMetaInterface.TYPE_INTEGER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(Long.valueOf("10"),calculate("10","20",ValueMetaInterface.TYPE_INTEGER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(null,calculate("","",ValueMetaInterface.TYPE_INTEGER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(0,new BigDecimal("1").compareTo((BigDecimal)calculate("1","",ValueMetaInterface.TYPE_BIGNUMBER,CalculatorMetaFunction.CALC_NVL)));
  assertEquals(0,new BigDecimal("2").compareTo((BigDecimal)calculate("","2",ValueMetaInterface.TYPE_BIGNUMBER,CalculatorMetaFunction.CALC_NVL)));
  assertEquals(0,new BigDecimal("10").compareTo((BigDecimal)calculate("10","20",ValueMetaInterface.TYPE_BIGNUMBER,CalculatorMetaFunction.CALC_NVL)));
  assertEquals(null,calculate("","",ValueMetaInterface.TYPE_BIGNUMBER,CalculatorMetaFunction.CALC_NVL));
  assertEquals(true,calculate("true","",ValueMetaInterface.TYPE_BOOLEAN,CalculatorMetaFunction.CALC_NVL));
  assertEquals(false,calculate("","false",ValueMetaInterface.TYPE_BOOLEAN,CalculatorMetaFunction.CALC_NVL));
  assertEquals(false,calculate("false","true",ValueMetaInterface.TYPE_BOOLEAN,CalculatorMetaFunction.CALC_NVL));
  assertEquals(null,calculate("","",ValueMetaInterface.TYPE_BOOLEAN,CalculatorMetaFunction.CALC_NVL));
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(yyyy_MM_dd);
  try {
    assertEquals(simpleDateFormat.parse("2012-04-11"),calculate("2012-04-11","",ValueMetaInterface.TYPE_DATE,CalculatorMetaFunction.CALC_NVL));
    assertEquals(simpleDateFormat.parse("2012-11-04"),calculate("","2012-11-04",ValueMetaInterface.TYPE_DATE,CalculatorMetaFunction.CALC_NVL));
    assertEquals(simpleDateFormat.parse("1965-07-01"),calculate("1965-07-01","1967-04-11",ValueMetaInterface.TYPE_DATE,CalculatorMetaFunction.CALC_NVL));
    assertNull(calculate("","",ValueMetaInterface.TYPE_DATE,CalculatorMetaFunction.CALC_NVL));
  }
 catch (  ParseException pe) {
    fail(pe.getMessage());
  }
  ValueMeta stringValueMeta=new ValueMeta("string",ValueMeta.TYPE_STRING);
  try {
    byte[] data=stringValueMeta.getBinary("101");
    byte[] calculated=(byte[])calculate("101","",ValueMetaInterface.TYPE_BINARY,CalculatorMetaFunction.CALC_NVL);
    assertTrue(Arrays.equals(data,calculated));
    data=stringValueMeta.getBinary("011");
    calculated=(byte[])calculate("","011",ValueMetaInterface.TYPE_BINARY,CalculatorMetaFunction.CALC_NVL);
    assertTrue(Arrays.equals(data,calculated));
    data=stringValueMeta.getBinary("110");
    calculated=(byte[])calculate("110","011",ValueMetaInterface.TYPE_BINARY,CalculatorMetaFunction.CALC_NVL);
    assertTrue(Arrays.equals(data,calculated));
    calculated=(byte[])calculate("","",ValueMetaInterface.TYPE_BINARY,CalculatorMetaFunction.CALC_NVL);
    assertNull(calculated);
  }
 catch (  KettleValueException kve) {
    fail(kve.getMessage());
  }
}
