{
  String classType=value.getClass().getName();
switch (type) {
case ValueMetaInterface.TYPE_NUMBER:
    return jsToNumber(value,classType);
case ValueMetaInterface.TYPE_INTEGER:
  return jsToInteger(value,value.getClass());
case ValueMetaInterface.TYPE_STRING:
return jsToString(value,classType);
case ValueMetaInterface.TYPE_DATE:
return jsToDate(value,classType);
case ValueMetaInterface.TYPE_BOOLEAN:
return value;
case ValueMetaInterface.TYPE_BIGNUMBER:
return jsToBigNumber(value,classType);
case ValueMetaInterface.TYPE_BINARY:
{
return Context.jsToJava(value,byte[].class);
}
case ValueMetaInterface.TYPE_NONE:
{
throw new RuntimeException("No data output data type was specified for new field [" + fieldName + "]");
}
default :
return Context.jsToJava(value,Object.class);
}
}
