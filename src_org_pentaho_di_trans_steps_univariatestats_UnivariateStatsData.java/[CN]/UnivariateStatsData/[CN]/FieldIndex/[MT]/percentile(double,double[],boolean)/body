{
  double n=m_count;
  if (interpolate) {
    double i=p * (n + 1);
    if (i <= 1) {
      return m_min;
    }
    if (i >= n) {
      return m_max;
    }
    double low_obs=Math.floor(i);
    double high_obs=low_obs + 1;
    double r1=high_obs - i;
    double r2=1.0 - r1;
    double x1=vals[(int)low_obs - 1];
    double x2=vals[(int)high_obs - 1];
    return (r1 * x1) + (r2 * x2);
  }
  double i=p * n;
  double res=0;
  if (i == 0) {
    return m_min;
  }
  if (i == n) {
    return m_max;
  }
  if (i - Math.floor(i) > 0) {
    i=Math.floor(i);
    res=vals[(int)i];
  }
 else {
    res=(vals[(int)(i - 1)] + vals[(int)i]) / 2.0;
  }
  return res;
}
