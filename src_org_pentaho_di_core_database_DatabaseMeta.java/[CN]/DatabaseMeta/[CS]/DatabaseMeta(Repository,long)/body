{
  this();
  try {
    RowMetaAndData r=rep.getDatabase(id_database);
    if (r != null) {
      long id_database_type=r.getInteger("ID_DATABASE_TYPE",0);
      String dbTypeDesc=rep.getDatabaseTypeCode(id_database_type);
      if (dbTypeDesc != null) {
        databaseInterface=getDatabaseInterface(dbTypeDesc);
        setAttributes(new Properties());
      }
 else {
      }
      setID(id_database);
      setName(r.getString("NAME",""));
      long id_database_contype=r.getInteger("ID_DATABASE_CONTYPE",0);
      setAccessType(getAccessType(rep.getDatabaseConTypeCode(id_database_contype)));
      setHostname(r.getString("HOST_NAME",""));
      setDBName(r.getString("DATABASE_NAME",""));
      setDBPort(r.getString("PORT",""));
      setUsername(r.getString("USERNAME",""));
      setPassword(Encr.decryptPasswordOptionallyEncrypted(r.getString("PASSWORD","")));
      setServername(r.getString("SERVERNAME",""));
      setDataTablespace(r.getString("DATA_TBS",""));
      setIndexTablespace(r.getString("INDEX_TBS",""));
      final Collection<RowMetaAndData> attrs=rep.getDatabaseAttributes(id_database);
      for (      RowMetaAndData row : attrs) {
        String code=row.getString("CODE","");
        String attribute=row.getString("VALUE_STR","");
        getAttributes().put(code,Const.NVL(attribute,""));
      }
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Error loading database connection from repository (id_database=" + id_database + ")",dbe);
  }
}
