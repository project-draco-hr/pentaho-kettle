{
  Result result=previousResult;
  result.setNrErrors(1);
  result.setResult(false);
  String realEmailAddress=environmentSubstitute(emailAddress);
  if (Const.isEmpty(realEmailAddress)) {
    logError(BaseMessages.getString(PKG,"JobEntryMailValidator.Error.EmailEmpty"));
    return result;
  }
  String realSender=environmentSubstitute(emailSender);
  if (smtpCheck) {
    if (Const.isEmpty(realSender)) {
      logError(BaseMessages.getString(PKG,"JobEntryMailValidator.Error.EmailSenderEmpty"));
      return result;
    }
  }
  String realDefaultSMTP=environmentSubstitute(defaultSMTP);
  int timeOut=Const.toInt(environmentSubstitute(timeout),0);
  String[] mailsCheck=realEmailAddress.split(" ");
  boolean exitloop=false;
  boolean mailIsValid=false;
  String MailError=null;
  for (int i=0; i < mailsCheck.length && !exitloop; i++) {
    String email=mailsCheck[i];
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobEntryMailValidator.CheckingMail",email));
    }
    MailValidationResult resultValidator=MailValidation.isAddressValid(log,email,realSender,realDefaultSMTP,timeOut,smtpCheck);
    mailIsValid=resultValidator.isValide();
    MailError=resultValidator.getErrorMessage();
    if (log.isDetailed()) {
      if (mailIsValid) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryMailValidator.MailValid",email));
      }
 else {
        logDetailed(BaseMessages.getString(PKG,"JobEntryMailValidator.MailNotValid",email));
        logDetailed(MailError);
      }
    }
    if (!resultValidator.isValide()) {
      exitloop=true;
    }
  }
  result.setResult(mailIsValid);
  if (mailIsValid) {
    result.setNrErrors(0);
  }
  return result;
}
