{
  TransMeta transMeta=new TransMeta();
  initTables(transMeta);
  TransLogTable originTransLogTable=transMeta.getTransLogTable();
  StepLogTable originStepLogTable=transMeta.getStepLogTable();
  PerformanceLogTable originPerformanceLogTable=transMeta.getPerformanceLogTable();
  ChannelLogTable originChannelLogTable=transMeta.getChannelLogTable();
  MetricsLogTable originMetricsLogTable=transMeta.getMetricsLogTable();
  when(spoon.getActiveTransformation()).thenReturn(transMeta);
  when(spoon.saveXMLFile(any(TransMeta.class),anyBoolean())).thenReturn(true);
  when(spoon.saveXMLFile(anyBoolean())).thenCallRealMethod();
  spoon.saveXMLFile(true);
  tablesCommonValuesEqual(originTransLogTable,transMeta.getTransLogTable());
  assertEquals(originTransLogTable.getLogInterval(),transMeta.getTransLogTable().getLogInterval());
  assertEquals(originTransLogTable.getLogSizeLimit(),transMeta.getTransLogTable().getLogSizeLimit());
  tablesCommonValuesEqual(originStepLogTable,transMeta.getStepLogTable());
  tablesCommonValuesEqual(originPerformanceLogTable,transMeta.getPerformanceLogTable());
  assertEquals(originPerformanceLogTable.getLogInterval(),transMeta.getPerformanceLogTable().getLogInterval());
  tablesCommonValuesEqual(originChannelLogTable,transMeta.getChannelLogTable());
  tablesCommonValuesEqual(originMetricsLogTable,transMeta.getMetricsLogTable());
}
