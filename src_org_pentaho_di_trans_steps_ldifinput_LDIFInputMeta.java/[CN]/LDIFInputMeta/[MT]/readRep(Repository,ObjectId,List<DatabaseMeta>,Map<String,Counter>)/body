{
  try {
    filefield=rep.getStepAttributeBoolean(id_step,"filefield");
    dynamicFilenameField=rep.getStepAttributeString(id_step,"dynamicFilenameField");
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    addtoresultfilename=rep.getStepAttributeBoolean(id_step,"addtoresultfilename");
    multiValuedSeparator=rep.getStepAttributeString(id_step,"multiValuedSeparator");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    includeContentType=rep.getStepAttributeBoolean(id_step,"contenttype");
    contentTypeField=rep.getStepAttributeString(id_step,"contenttype_field");
    DNField=rep.getStepAttributeString(id_step,"dn_field");
    includeDN=rep.getStepAttributeBoolean(id_step,"dn");
    rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i]))       fileRequired[i]=NO;
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i]))       includeSubFolders[i]=NO;
    }
    for (int i=0; i < nrFields; i++) {
      LDIFInputField field=new LDIFInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setAttribut(rep.getStepAttributeString(id_step,i,"field_attribut"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(LDIFInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LDIFInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
