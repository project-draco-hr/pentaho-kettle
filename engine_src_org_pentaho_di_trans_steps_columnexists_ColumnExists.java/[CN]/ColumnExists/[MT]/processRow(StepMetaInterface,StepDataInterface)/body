{
  meta=(ColumnExistsMeta)smi;
  data=(ColumnExistsData)sdi;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  boolean columnexists=false;
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (Const.isEmpty(meta.getDynamicColumnnameField())) {
      logError(BaseMessages.getString(PKG,"ColumnExists.Error.ColumnnameFieldMissing"));
      throw new KettleException(BaseMessages.getString(PKG,"ColumnExists.Error.ColumnnameFieldMissing"));
    }
    if (meta.isTablenameInField()) {
      if (Const.isEmpty(meta.getDynamicTablenameField())) {
        logError(BaseMessages.getString(PKG,"ColumnExists.Error.TablenameFieldMissing"));
        throw new KettleException(BaseMessages.getString(PKG,"ColumnExists.Error.TablenameFieldMissing"));
      }
      if (data.indexOfTablename < 0) {
        data.indexOfTablename=getInputRowMeta().indexOfValue(meta.getDynamicTablenameField());
        if (data.indexOfTablename < 0) {
          logError(BaseMessages.getString(PKG,"ColumnExists.Exception.CouldnotFindField") + "[" + meta.getDynamicTablenameField()+ "]");
          throw new KettleException(BaseMessages.getString(PKG,"ColumnExists.Exception.CouldnotFindField",meta.getDynamicTablenameField()));
        }
      }
    }
 else {
      if (!Const.isEmpty(data.schemaname)) {
        data.tablename=data.db.getDatabaseMeta().getQuotedSchemaTableCombination(data.schemaname,data.tablename);
      }
 else {
        data.tablename=data.db.getDatabaseMeta().quoteField(data.tablename);
      }
    }
    if (data.indexOfColumnname < 0) {
      data.indexOfColumnname=getInputRowMeta().indexOfValue(meta.getDynamicColumnnameField());
      if (data.indexOfColumnname < 0) {
        logError(BaseMessages.getString(PKG,"ColumnExists.Exception.CouldnotFindField") + "[" + meta.getDynamicColumnnameField()+ "]");
        throw new KettleException(BaseMessages.getString(PKG,"ColumnExists.Exception.CouldnotFindField",meta.getDynamicColumnnameField()));
      }
    }
  }
  try {
    if (meta.isTablenameInField()) {
      data.tablename=getInputRowMeta().getString(r,data.indexOfTablename);
      if (!Const.isEmpty(data.schemaname)) {
        data.tablename=data.db.getDatabaseMeta().getQuotedSchemaTableCombination(data.schemaname,data.tablename);
      }
 else {
        data.tablename=data.db.getDatabaseMeta().quoteField(data.tablename);
      }
    }
    String columnname=getInputRowMeta().getString(r,data.indexOfColumnname);
    columnname=data.db.getDatabaseMeta().quoteField(columnname);
    columnexists=data.db.checkColumnExists(columnname,data.tablename);
    Object[] outputRowData=RowDataUtil.addValueData(r,getInputRowMeta().size(),columnexists);
    putRow(data.outputRowMeta,outputRowData);
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"ColumnExists.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
    }
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"ColumnExists.ErrorInStepRunning" + " : " + e.getMessage()));
      throw new KettleStepException(BaseMessages.getString(PKG,"ColumnExists.Log.ErrorInStep"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,meta.getResultFieldName(),"ColumnExists001");
    }
  }
  return true;
}
