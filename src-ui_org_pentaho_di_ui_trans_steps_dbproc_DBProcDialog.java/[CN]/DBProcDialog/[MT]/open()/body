{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  SelectionAdapter lsSelMod=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"DBProcDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"DBProcDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wConnection=addConnectionLine(shell,wStepname,middle,margin);
  if (input.getDatabase() == null && transMeta.nrDatabases() == 1)   wConnection.select(0);
  wConnection.addModifyListener(lsMod);
  wbProcName=new Button(shell,SWT.PUSH);
  wbProcName.setText(BaseMessages.getString(PKG,"DBProcDialog.Finding.Button"));
  fdbProcName=new FormData();
  fdbProcName.right=new FormAttachment(100,0);
  fdbProcName.top=new FormAttachment(wConnection,margin * 2);
  wbProcName.setLayoutData(fdbProcName);
  wbProcName.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      DatabaseMeta dbInfo=transMeta.findDatabase(wConnection.getText());
      if (dbInfo != null) {
        Database db=new Database(loggingObject,dbInfo);
        try {
          db.connect();
          String[] procs=db.getProcedures();
          if (procs != null && procs.length > 0) {
            EnterSelectionDialog esd=new EnterSelectionDialog(shell,procs,BaseMessages.getString(PKG,"DBProcDialog.EnterSelection.DialogTitle"),BaseMessages.getString(PKG,"DBProcDialog.EnterSelection.DialogMessage"));
            String proc=esd.open();
            if (proc != null) {
              wProcName.setText(proc);
            }
          }
 else {
            MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_INFORMATION);
            mb.setMessage(BaseMessages.getString(PKG,"DBProcDialog.NoProceduresFound.DialogMessage"));
            mb.setText(BaseMessages.getString(PKG,"DBProcDialog.NoProceduresFound.DialogTitle"));
            mb.open();
          }
        }
 catch (        KettleDatabaseException dbe) {
          new ErrorDialog(shell,BaseMessages.getString(PKG,"DBProcDialog.ErrorGettingProceduresList.DialogTitle"),BaseMessages.getString(PKG,"DBProcDialog.ErrorGettingProceduresList.DialogMessage"),dbe);
        }
 finally {
          db.disconnect();
        }
      }
    }
  }
);
  wlProcName=new Label(shell,SWT.RIGHT);
  wlProcName.setText(BaseMessages.getString(PKG,"DBProcDialog.ProcedureName.Label"));
  props.setLook(wlProcName);
  fdlProcName=new FormData();
  fdlProcName.left=new FormAttachment(0,0);
  fdlProcName.right=new FormAttachment(middle,-margin);
  fdlProcName.top=new FormAttachment(wConnection,margin * 2);
  wlProcName.setLayoutData(fdlProcName);
  wProcName=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wProcName);
  wProcName.addModifyListener(lsMod);
  fdProcName=new FormData();
  fdProcName.left=new FormAttachment(middle,0);
  fdProcName.top=new FormAttachment(wConnection,margin * 2);
  fdProcName.right=new FormAttachment(wbProcName,-margin);
  wProcName.setLayoutData(fdProcName);
  wlAutoCommit=new Label(shell,SWT.RIGHT);
  wlAutoCommit.setText(BaseMessages.getString(PKG,"DBProcDialog.AutoCommit.Label"));
  wlAutoCommit.setToolTipText(BaseMessages.getString(PKG,"DBProcDialog.AutoCommit.Tooltip"));
  props.setLook(wlAutoCommit);
  fdlAutoCommit=new FormData();
  fdlAutoCommit.left=new FormAttachment(0,0);
  fdlAutoCommit.top=new FormAttachment(wProcName,margin);
  fdlAutoCommit.right=new FormAttachment(middle,-margin);
  wlAutoCommit.setLayoutData(fdlAutoCommit);
  wAutoCommit=new Button(shell,SWT.CHECK);
  wAutoCommit.setToolTipText(BaseMessages.getString(PKG,"DBProcDialog.AutoCommit.Tooltip"));
  props.setLook(wAutoCommit);
  fdAutoCommit=new FormData();
  fdAutoCommit.left=new FormAttachment(middle,0);
  fdAutoCommit.top=new FormAttachment(wProcName,margin);
  fdAutoCommit.right=new FormAttachment(100,0);
  wAutoCommit.setLayoutData(fdAutoCommit);
  wAutoCommit.addSelectionListener(lsSelMod);
  wlResult=new Label(shell,SWT.RIGHT);
  wlResult.setText(BaseMessages.getString(PKG,"DBProcDialog.Result.Label"));
  props.setLook(wlResult);
  fdlResult=new FormData();
  fdlResult.left=new FormAttachment(0,0);
  fdlResult.right=new FormAttachment(middle,-margin);
  fdlResult.top=new FormAttachment(wAutoCommit,margin * 2);
  wlResult.setLayoutData(fdlResult);
  wResult=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wResult);
  wResult.addModifyListener(lsMod);
  fdResult=new FormData();
  fdResult.left=new FormAttachment(middle,0);
  fdResult.top=new FormAttachment(wAutoCommit,margin * 2);
  fdResult.right=new FormAttachment(100,0);
  wResult.setLayoutData(fdResult);
  wlResultType=new Label(shell,SWT.RIGHT);
  wlResultType.setText(BaseMessages.getString(PKG,"DBProcDialog.ResultType.Label"));
  props.setLook(wlResultType);
  fdlResultType=new FormData();
  fdlResultType.left=new FormAttachment(0,0);
  fdlResultType.right=new FormAttachment(middle,-margin);
  fdlResultType.top=new FormAttachment(wResult,margin);
  wlResultType.setLayoutData(fdlResultType);
  wResultType=new CCombo(shell,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wResultType);
  String types[]=ValueMeta.getTypes();
  for (int x=0; x < types.length; x++)   wResultType.add(types[x]);
  wResultType.select(0);
  wResultType.addModifyListener(lsMod);
  fdResultType=new FormData();
  fdResultType.left=new FormAttachment(middle,0);
  fdResultType.top=new FormAttachment(wResult,margin);
  fdResultType.right=new FormAttachment(100,0);
  wResultType.setLayoutData(fdResultType);
  wlFields=new Label(shell,SWT.NONE);
  wlFields.setText(BaseMessages.getString(PKG,"DBProcDialog.Parameters.Label"));
  props.setLook(wlFields);
  fdlFields=new FormData();
  fdlFields.left=new FormAttachment(0,0);
  fdlFields.top=new FormAttachment(wResultType,margin);
  wlFields.setLayoutData(fdlFields);
  final int FieldsCols=3;
  final int FieldsRows=input.getArgument().length;
  colinf=new ColumnInfo[FieldsCols];
  colinf[0]=new ColumnInfo(BaseMessages.getString(PKG,"DBProcDialog.ColumnInfo.Name"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{""},false);
  colinf[1]=new ColumnInfo(BaseMessages.getString(PKG,"DBProcDialog.ColumnInfo.Direction"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{"IN","OUT","INOUT"});
  colinf[2]=new ColumnInfo(BaseMessages.getString(PKG,"DBProcDialog.ColumnInfo.Type"),ColumnInfo.COLUMN_TYPE_CCOMBO,ValueMeta.getTypes());
  wFields=new TableView(transMeta,shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(wlFields,margin);
  fdFields.right=new FormAttachment(100,0);
  fdFields.bottom=new FormAttachment(100,-50);
  wFields.setLayoutData(fdFields);
  final Runnable runnable=new Runnable(){
    public void run(){
      StepMeta stepMeta=transMeta.findStep(stepname);
      if (stepMeta != null) {
        try {
          RowMetaInterface row=transMeta.getPrevStepFields(stepMeta);
          for (int i=0; i < row.size(); i++) {
            inputFields.put(row.getValueMeta(i).getName(),Integer.valueOf(i));
          }
          setComboBoxes();
        }
 catch (        KettleException e) {
          logError(BaseMessages.getString(PKG,"System.Dialog.GetFieldsFailed.Message"));
        }
      }
    }
  }
;
  new Thread(runnable).start();
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wGet=new Button(shell,SWT.PUSH);
  wGet.setText(BaseMessages.getString(PKG,"DBProcDialog.GetFields.Button"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel,wGet},margin,wFields);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wGet.addListener(SWT.Selection,lsGet);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  lsResize=new Listener(){
    public void handleEvent(    Event event){
      Point size=shell.getSize();
      wFields.setSize(size.x - 10,size.y - 50);
      wFields.table.setSize(size.x - 10,size.y - 50);
      wFields.redraw();
    }
  }
;
  shell.addListener(SWT.Resize,lsResize);
  setSize();
  getData();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
