{
  Map<TextFileInputMetaInjection.Entry,Generator<?>> generators=new EnumMap<TextFileInputMetaInjection.Entry,Generator<?>>(TextFileInputMetaInjection.Entry.class);
  Generator<String> stringGenerator=new ValidatorAdapter<String>(new StringLoadSaveValidator());
  List<TextFileInputMetaInjection.Entry> stringEntries=asList
  for (  TextFileInputMetaInjection.Entry entry : stringEntries) {
    generators.put(entry,stringGenerator);
  }
  Generator<String> intGenerator=new ValidatorAdapter<Integer>(new IntLoadSaveValidator());
  List<TextFileInputMetaInjection.Entry> intEntries=asList(NR_HEADER_LINES,NR_FOOTER_LINES,NR_WRAPS,NR_DOC_HEADER_LINES,NR_LINES_PER_PAGE,ROW_LIMIT);
  for (  TextFileInputMetaInjection.Entry entry : intEntries) {
    generators.put(entry,intGenerator);
  }
  Generator<String> yesNoGenerator=new YesNoGenerator();
  List<TextFileInputMetaInjection.Entry> yesNoEntries=asList(BREAK_IN_ENCLOSURE,HEADER_PRESENT,HAS_FOOTER,HAS_WRAPPED_LINES,HAS_PAGED_LAYOUT,NO_EMPTY_LINES,INCLUDE_FILENAME,INCLUDE_ROW_NUMBER,ROW_NUMBER_BY_FILE,DATE_FORMAT_LENIENT,ACCEPT_FILE_NAMES,PASS_THROUGH_FIELDS,ADD_FILES_TO_RESULT,FILE_HIDDEN_FIELDNAME,SKIP_BAD_FILES,IGNORE_ERRORS,ERROR_LINES_SKIPPED);
  for (  TextFileInputMetaInjection.Entry entry : yesNoEntries) {
    generators.put(entry,yesNoGenerator);
  }
  generators.put(DATE_FORMAT_LOCALE,new Constant<String>("en"));
  return generators;
}
