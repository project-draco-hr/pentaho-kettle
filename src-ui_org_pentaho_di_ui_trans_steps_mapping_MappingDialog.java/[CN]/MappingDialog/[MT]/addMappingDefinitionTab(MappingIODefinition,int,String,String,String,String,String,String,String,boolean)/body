{
  final CTabItem wTab;
  if (index >= wTabFolder.getItemCount()) {
    wTab=new CTabItem(wTabFolder,SWT.CLOSE);
  }
 else {
    wTab=new CTabItem(wTabFolder,SWT.CLOSE,index);
  }
  setMappingDefinitionTabNameAndToolTip(wTab,tabTitle,tabTooltip,definition,input);
  Composite wInputComposite=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wInputComposite);
  FormLayout tabLayout=new FormLayout();
  tabLayout.marginWidth=Const.FORM_MARGIN;
  tabLayout.marginHeight=Const.FORM_MARGIN;
  wInputComposite.setLayout(tabLayout);
  Button wbInputStep=new Button(wInputComposite,SWT.PUSH);
  props.setLook(wbInputStep);
  wbInputStep.setText(Messages.getString("MappingDialog.button.SourceStepName"));
  FormData fdbInputStep=new FormData();
  fdbInputStep.top=new FormAttachment(0,0);
  fdbInputStep.right=new FormAttachment(100,0);
  wbInputStep.setLayoutData(fdbInputStep);
  Label wlInputStep=new Label(wInputComposite,SWT.RIGHT);
  props.setLook(wlInputStep);
  wlInputStep.setText(inputStepLabel);
  FormData fdlInputStep=new FormData();
  fdlInputStep.top=new FormAttachment(wbInputStep,0,SWT.CENTER);
  fdlInputStep.left=new FormAttachment(0,0);
  fdlInputStep.right=new FormAttachment(middle,-margin);
  wlInputStep.setLayoutData(fdlInputStep);
  final Text wInputStep=new Text(wInputComposite,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wInputStep);
  wInputStep.setText(Const.NVL(definition.getInputStepname(),""));
  wInputStep.addModifyListener(lsMod);
  FormData fdInputStep=new FormData();
  fdInputStep.top=new FormAttachment(wbInputStep,0,SWT.CENTER);
  fdInputStep.left=new FormAttachment(middle,0);
  fdInputStep.right=new FormAttachment(wbInputStep,-margin);
  wInputStep.setLayoutData(fdInputStep);
  wInputStep.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent event){
      definition.setInputStepname(wInputStep.getText());
      setMappingDefinitionTabNameAndToolTip(wTab,tabTitle,tabTooltip,definition,input);
    }
  }
);
  wbInputStep.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      String stepName=selectTransformationStepname(input,input);
      if (stepName != null) {
        wInputStep.setText(stepName);
        definition.setInputStepname(stepName);
        setMappingDefinitionTabNameAndToolTip(wTab,tabTitle,tabTooltip,definition,input);
      }
    }
  }
);
  Button wbOutputStep=new Button(wInputComposite,SWT.PUSH);
  props.setLook(wbOutputStep);
  wbOutputStep.setText(Messages.getString("MappingDialog.button.SourceStepName"));
  FormData fdbOutputStep=new FormData();
  fdbOutputStep.top=new FormAttachment(wbInputStep,margin);
  fdbOutputStep.right=new FormAttachment(100,0);
  wbOutputStep.setLayoutData(fdbOutputStep);
  Label wlOutputStep=new Label(wInputComposite,SWT.RIGHT);
  props.setLook(wlOutputStep);
  wlOutputStep.setText(outputStepLabel);
  FormData fdlOutputStep=new FormData();
  fdlOutputStep.top=new FormAttachment(wbOutputStep,0,SWT.CENTER);
  fdlOutputStep.left=new FormAttachment(0,0);
  fdlOutputStep.right=new FormAttachment(middle,-margin);
  wlOutputStep.setLayoutData(fdlOutputStep);
  final Text wOutputStep=new Text(wInputComposite,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wOutputStep);
  wOutputStep.setText(Const.NVL(definition.getOutputStepname(),""));
  wOutputStep.addModifyListener(lsMod);
  FormData fdOutputStep=new FormData();
  fdOutputStep.top=new FormAttachment(wbOutputStep,0,SWT.CENTER);
  fdOutputStep.left=new FormAttachment(middle,0);
  fdOutputStep.right=new FormAttachment(wbOutputStep,-margin);
  wOutputStep.setLayoutData(fdOutputStep);
  Label wlMainPath=new Label(wInputComposite,SWT.RIGHT);
  props.setLook(wlMainPath);
  wlMainPath.setText(Messages.getString("MappingDialog.input.MainDataPath"));
  FormData fdlMainPath=new FormData();
  fdlMainPath.top=new FormAttachment(wbOutputStep,margin);
  fdlMainPath.left=new FormAttachment(0,0);
  fdlMainPath.right=new FormAttachment(middle,-margin);
  wlMainPath.setLayoutData(fdlMainPath);
  Button wMainPath=new Button(wInputComposite,SWT.CHECK);
  props.setLook(wMainPath);
  FormData fdMainPath=new FormData();
  fdMainPath.top=new FormAttachment(wbOutputStep,margin);
  fdMainPath.left=new FormAttachment(middle,0);
  wMainPath.setLayoutData(fdMainPath);
  wMainPath.setSelection(definition.isMainDataPath());
  wMainPath.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      definition.setMainDataPath(!definition.isMainDataPath());
    }
  }
);
  Label wlRenameOutput=new Label(wInputComposite,SWT.RIGHT);
  props.setLook(wlRenameOutput);
  wlRenameOutput.setText(Messages.getString("MappingDialog.input.RenamingOnOutput"));
  FormData fdlRenameOutput=new FormData();
  fdlRenameOutput.top=new FormAttachment(wMainPath,margin);
  fdlRenameOutput.left=new FormAttachment(0,0);
  fdlRenameOutput.right=new FormAttachment(middle,-margin);
  wlRenameOutput.setLayoutData(fdlRenameOutput);
  Button wRenameOutput=new Button(wInputComposite,SWT.CHECK);
  props.setLook(wRenameOutput);
  FormData fdRenameOutput=new FormData();
  fdRenameOutput.top=new FormAttachment(wMainPath,margin);
  fdRenameOutput.left=new FormAttachment(middle,0);
  wRenameOutput.setLayoutData(fdRenameOutput);
  wRenameOutput.setSelection(definition.isRenamingOnOutput());
  wRenameOutput.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      definition.setRenamingOnOutput(!definition.isRenamingOnOutput());
    }
  }
);
  Label wlDescription=new Label(wInputComposite,SWT.RIGHT);
  props.setLook(wlDescription);
  wlDescription.setText(descriptionLabel);
  FormData fdlDescription=new FormData();
  fdlDescription.top=new FormAttachment(wRenameOutput,margin);
  fdlDescription.left=new FormAttachment(0,0);
  fdlDescription.right=new FormAttachment(middle,-margin);
  wlDescription.setLayoutData(fdlDescription);
  final Text wDescription=new Text(wInputComposite,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  props.setLook(wDescription);
  wDescription.setText(Const.NVL(definition.getDescription(),""));
  wDescription.addModifyListener(lsMod);
  FormData fdDescription=new FormData();
  fdDescription.top=new FormAttachment(wRenameOutput,margin);
  fdDescription.bottom=new FormAttachment(wRenameOutput,100 + margin);
  fdDescription.left=new FormAttachment(middle,0);
  fdDescription.right=new FormAttachment(wbOutputStep,-margin);
  wDescription.setLayoutData(fdDescription);
  wDescription.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent event){
      definition.setDescription(wDescription.getText());
    }
  }
);
  final Button wbEnterMapping=new Button(wInputComposite,SWT.PUSH);
  props.setLook(wbEnterMapping);
  wbEnterMapping.setText(Messages.getString("MappingDialog.button.EnterMapping"));
  FormData fdbEnterMapping=new FormData();
  fdbEnterMapping.top=new FormAttachment(wDescription,margin * 2);
  fdbEnterMapping.right=new FormAttachment(100,0);
  wbEnterMapping.setLayoutData(fdbEnterMapping);
  ColumnInfo[] colinfo=new ColumnInfo[]{new ColumnInfo(sourceColumnLabel,ColumnInfo.COLUMN_TYPE_TEXT,false,false),new ColumnInfo(targetColumnLabel,ColumnInfo.COLUMN_TYPE_TEXT,false,false)};
  final TableView wFieldMappings=new TableView(transMeta,wInputComposite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.BORDER,colinfo,1,lsMod,props);
  props.setLook(wFieldMappings);
  FormData fdMappings=new FormData();
  fdMappings.left=new FormAttachment(0,0);
  fdMappings.right=new FormAttachment(wbEnterMapping,-margin);
  fdMappings.top=new FormAttachment(wDescription,margin * 2);
  fdMappings.bottom=new FormAttachment(100,-20);
  wFieldMappings.setLayoutData(fdMappings);
  for (  MappingValueRename valueRename : definition.getValueRenames()) {
    TableItem tableItem=new TableItem(wFieldMappings.table,SWT.NONE);
    tableItem.setText(1,valueRename.getSourceValueName());
    tableItem.setText(2,valueRename.getTargetValueName());
  }
  wFieldMappings.removeEmptyRows();
  wFieldMappings.setRowNums();
  wFieldMappings.optWidth(true);
  wbEnterMapping.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      try {
        loadTransformation();
        RowMetaInterface sourceRowMeta=getFieldsFromStep(wInputStep.getText(),true,input);
        RowMetaInterface targetRowMeta=getFieldsFromStep(wOutputStep.getText(),false,input);
        String sourceFields[]=sourceRowMeta.getFieldNames();
        String targetFields[]=targetRowMeta.getFieldNames();
        EnterMappingDialog dialog=new EnterMappingDialog(shell,sourceFields,targetFields);
        List<SourceToTargetMapping> mappings=dialog.open();
        if (mappings != null) {
          wFieldMappings.clearAll(false);
          definition.getValueRenames().clear();
          for (int i=0; i < mappings.size(); i++) {
            SourceToTargetMapping mapping=mappings.get(i);
            TableItem item=new TableItem(wFieldMappings.table,SWT.NONE);
            item.setText(1,mapping.getSourceString(sourceFields));
            item.setText(2,mapping.getTargetString(targetFields));
            String source=input ? item.getText(1) : item.getText(2);
            String target=input ? item.getText(2) : item.getText(1);
            definition.getValueRenames().add(new MappingValueRename(source,target));
          }
          wFieldMappings.removeEmptyRows();
          wFieldMappings.setRowNums();
          wFieldMappings.optWidth(true);
        }
      }
 catch (      KettleException e) {
        new ErrorDialog(shell,Messages.getString("System.Dialog.Error.Title"),Messages.getString("MappingDialog.Exception.ErrorGettingMappingSourceAndTargetFields",e.toString()),e);
      }
    }
  }
);
  wOutputStep.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent event){
      definition.setOutputStepname(wOutputStep.getText());
      try {
        enableMappingButton(wbEnterMapping,input,wInputStep.getText(),wOutputStep.getText());
      }
 catch (      KettleException e) {
        new ErrorDialog(shell,"Error","Unexpected error",e);
      }
    }
  }
);
  wbOutputStep.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      String stepName=selectTransformationStepname(!input,input);
      if (stepName != null) {
        wOutputStep.setText(stepName);
        definition.setOutputStepname(stepName);
        try {
          enableMappingButton(wbEnterMapping,input,wInputStep.getText(),wOutputStep.getText());
        }
 catch (        KettleException e) {
          new ErrorDialog(shell,"Error","Unexpected error",e);
        }
      }
    }
  }
);
  FormData fdParametersComposite=new FormData();
  fdParametersComposite.left=new FormAttachment(0,0);
  fdParametersComposite.top=new FormAttachment(0,0);
  fdParametersComposite.right=new FormAttachment(100,0);
  fdParametersComposite.bottom=new FormAttachment(100,0);
  wInputComposite.setLayoutData(fdParametersComposite);
  wInputComposite.layout();
  wTab.setControl(wInputComposite);
  final ApplyChanges applyChanges=new MappingDefinitionTab(definition,wInputStep,wOutputStep,wMainPath,wDescription,wFieldMappings);
  changeList.add(applyChanges);
  wTabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    @Override public void close(    CTabFolderEvent event){
      if (event.item.equals(wTab)) {
        MessageBox box=new MessageBox(shell,SWT.YES | SWT.NO);
        box.setText(Messages.getString("MappingDialog.CloseDefinitionTabAreYouSure.Title"));
        box.setMessage(Messages.getString("MappingDialog.CloseDefinitionTabAreYouSure.Message"));
        int answer=box.open();
        if (answer != SWT.YES) {
          event.doit=false;
        }
 else {
          if (input)           inputMappings.remove(definition);
 else           outputMappings.remove(definition);
          changeList.remove(applyChanges);
        }
      }
    }
  }
);
  wTabFolder.setSelection(wTab);
}
