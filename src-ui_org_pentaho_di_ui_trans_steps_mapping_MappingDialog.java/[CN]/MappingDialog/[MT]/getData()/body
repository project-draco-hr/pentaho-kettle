{
  wStepname.selectAll();
  specificationMethod=mappingMeta.getSpecificationMethod();
switch (specificationMethod) {
case FILENAME:
    wFilename.setText(Const.NVL(mappingMeta.getFileName(),""));
  break;
case REPOSITORY_BY_NAME:
wDirectory.setText(Const.NVL(mappingMeta.getDirectoryPath(),""));
wTransname.setText(Const.NVL(mappingMeta.getTransName(),""));
break;
case REPOSITORY_BY_REFERENCE:
referenceObjectId=mappingMeta.getTransObjectId();
wByReference.setText("");
try {
if (repository == null) {
throw new KettleException(BaseMessages.getString(PKG,"MappingDialog.Exception.NotConnectedToRepository.Message"));
}
RepositoryObject transInf=repository.getObjectInformation(mappingMeta.getTransObjectId(),RepositoryObjectType.TRANSFORMATION);
if (transInf != null) {
getByReferenceData(transInf);
}
}
 catch (KettleException e) {
new ErrorDialog(shell,BaseMessages.getString(PKG,"MappingDialog.Exception.UnableToReferenceObjectId.Title"),BaseMessages.getString(PKG,"MappingDialog.Exception.UnableToReferenceObjectId.Message"),e);
}
break;
}
setRadioButtons();
addParametersTab(mappingParameters);
wTabFolder.setSelection(0);
for (int i=0; i < inputMappings.size(); i++) {
addInputMappingDefinitionTab(inputMappings.get(i),i);
}
for (int i=0; i < outputMappings.size(); i++) {
addOutputMappingDefinitionTab(outputMappings.get(i),i);
}
try {
loadTransformation();
}
 catch (Throwable t) {
}
}
