{
  try {
    super.loadRep(rep,id_jobentry,databases,slaveServers);
    include_subfolders=rep.getJobEntryAttributeBoolean(id_jobentry,"include_subfolders");
    add_result_filenames=rep.getJobEntryAttributeBoolean(id_jobentry,"add_result_filenames");
    is_args_from_previous=rep.getJobEntryAttributeBoolean(id_jobentry,"is_args_from_previous");
    limit=rep.getJobEntryAttributeString(id_jobentry,"limit");
    success_condition=rep.getJobEntryAttributeString(id_jobentry,"success_condition");
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"source_filefolder");
    source_filefolder=new String[argnr];
    source_wildcard=new String[argnr];
    delimiter=new String[argnr];
    target_Db=new String[argnr];
    target_table=new String[argnr];
    for (int a=0; a < argnr; a++) {
      source_filefolder[a]=rep.getJobEntryAttributeString(id_jobentry,a,"source_filefolder");
      source_wildcard[a]=rep.getJobEntryAttributeString(id_jobentry,a,"source_wildcard");
      delimiter[a]=rep.getJobEntryAttributeString(id_jobentry,a,"delimiter");
      target_Db[a]=rep.getJobEntryAttributeString(id_jobentry,a,"target_db");
      target_table[a]=rep.getJobEntryAttributeString(id_jobentry,a,"target_table");
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobEntryMSAccessBulkLoad.Meta.UnableLoadRep","" + id_jobentry,dbe.getMessage()),dbe);
  }
}
