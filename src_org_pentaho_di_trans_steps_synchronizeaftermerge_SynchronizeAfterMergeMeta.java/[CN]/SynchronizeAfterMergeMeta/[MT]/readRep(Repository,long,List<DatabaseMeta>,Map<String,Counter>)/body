{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    databaseMeta=DatabaseMeta.findDatabase(databases,id_connection);
    commitSize=(int)rep.getStepAttributeInteger(id_step,"commit");
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    tablenameInField=rep.getStepAttributeBoolean(id_step,"tablename_in_field");
    tablenameField=rep.getStepAttributeString(id_step,"tablename_field");
    useBatchUpdate=rep.getStepAttributeBoolean(id_step,"use_batch");
    performLookup=rep.getStepAttributeBoolean(id_step,"perform_lookup");
    operationOrderField=rep.getStepAttributeString(id_step,"operation_order_field");
    OrderInsert=rep.getStepAttributeString(id_step,"order_insert");
    OrderUpdate=rep.getStepAttributeString(id_step,"order_update");
    OrderDelete=rep.getStepAttributeString(id_step,"order_delete");
    int nrkeys=rep.countNrStepAttributes(id_step,"key_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"value_name");
    allocate(nrkeys,nrvalues);
    for (int i=0; i < nrkeys; i++) {
      keyStream[i]=rep.getStepAttributeString(id_step,i,"key_name");
      keyLookup[i]=rep.getStepAttributeString(id_step,i,"key_field");
      keyCondition[i]=rep.getStepAttributeString(id_step,i,"key_condition");
      keyStream2[i]=rep.getStepAttributeString(id_step,i,"key_name2");
    }
    for (int i=0; i < nrvalues; i++) {
      updateLookup[i]=rep.getStepAttributeString(id_step,i,"value_name");
      updateStream[i]=rep.getStepAttributeString(id_step,i,"value_rename");
      update[i]=Boolean.valueOf(rep.getStepAttributeBoolean(id_step,i,"value_update",true));
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("SynchronizeAfterMergeMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
