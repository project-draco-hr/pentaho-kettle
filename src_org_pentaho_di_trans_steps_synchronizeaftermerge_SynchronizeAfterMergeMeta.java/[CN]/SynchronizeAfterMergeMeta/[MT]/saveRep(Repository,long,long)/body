{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"id_connection",databaseMeta == null ? -1 : databaseMeta.getID());
    rep.saveStepAttribute(id_transformation,id_step,"commit",commitSize);
    rep.saveStepAttribute(id_transformation,id_step,"schema",schemaName);
    rep.saveStepAttribute(id_transformation,id_step,"table",tableName);
    rep.saveStepAttribute(id_transformation,id_step,"tablename_in_field",tablenameInField);
    rep.saveStepAttribute(id_transformation,id_step,"tablename_field",tablenameField);
    rep.saveStepAttribute(id_transformation,id_step,"operation_order_field",operationOrderField);
    rep.saveStepAttribute(id_transformation,id_step,"order_insert",OrderInsert);
    rep.saveStepAttribute(id_transformation,id_step,"order_update",OrderUpdate);
    rep.saveStepAttribute(id_transformation,id_step,"order_delete",OrderDelete);
    rep.saveStepAttribute(id_transformation,id_step,"use_batch",useBatchUpdate);
    rep.saveStepAttribute(id_transformation,id_step,"perform_lookup",performLookup);
    for (int i=0; i < keyStream.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"key_name",keyStream[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"key_field",keyLookup[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"key_condition",keyCondition[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"key_name2",keyStream2[i]);
    }
    for (int i=0; i < updateLookup.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"value_name",updateLookup[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"value_rename",updateStream[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"value_update",update[i].booleanValue());
    }
    if (databaseMeta != null)     rep.insertStepDatabase(id_transformation,id_step,databaseMeta.getID());
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("SynchronizeAfterMergeMeta.Exception.UnableToSaveStepInfoToRepository") + id_step,e);
  }
}
