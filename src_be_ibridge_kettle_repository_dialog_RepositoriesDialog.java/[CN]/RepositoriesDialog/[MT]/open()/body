{
  props.setLook(shell);
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("RepositoriesDialog.Label.SelectRepository"));
  shell.setImage(GUIResource.getInstance().getImageSpoon());
  int middle=20;
  int margin=Const.MARGIN;
  int right=30;
  final Image logo=GUIResource.getInstance().getImagePentaho();
  final Rectangle bounds=logo.getBounds();
  wCanvas=new Canvas(shell,SWT.NO_BACKGROUND);
  fdCanvas=new FormData();
  fdCanvas.left=new FormAttachment(0,0);
  fdCanvas.right=new FormAttachment(100,0);
  fdCanvas.top=new FormAttachment(0,0);
  fdCanvas.bottom=new FormAttachment(0,bounds.height);
  wCanvas.setLayoutData(fdCanvas);
  wCanvas.setSize(bounds.width,bounds.height);
  wCanvas.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent pe){
      pe.gc.setBackground(GUIResource.getInstance().getColorBackground());
      pe.gc.fillRectangle(0,0,bounds.width,bounds.height);
      pe.gc.drawImage(logo,0,0);
    }
  }
);
  wlKettle=new Label(shell,SWT.CENTER);
  wlKettle.setText(Messages.getString("RepositoriesDialog.Label.Welcome") + toolName + "  v"+ Const.VERSION);
  props.setLook(wlKettle);
  final Font f=new Font(shell.getDisplay(),"Arial",18,SWT.NORMAL);
  wlKettle.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      f.dispose();
    }
  }
);
  wlKettle.setFont(f);
  fdlKettle=new FormData();
  fdlKettle.left=new FormAttachment(0,0);
  fdlKettle.right=new FormAttachment(100,-right);
  fdlKettle.top=new FormAttachment(wCanvas,margin);
  wlKettle.setLayoutData(fdlKettle);
  wlRepository=new Label(shell,SWT.RIGHT);
  wlRepository.setText(Messages.getString("RepositoriesDialog.Label.Repository"));
  props.setLook(wlRepository);
  fdlRepository=new FormData();
  fdlRepository.left=new FormAttachment(0,0);
  fdlRepository.right=new FormAttachment(middle,-margin);
  fdlRepository.top=new FormAttachment(wlKettle,20);
  wlRepository.setLayoutData(fdlRepository);
  wRepository=new CCombo(shell,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wnRepository=new Button(shell,SWT.PUSH);
  wnRepository.setText(Messages.getString("System.Button.New"));
  weRepository=new Button(shell,SWT.PUSH);
  weRepository.setText(Messages.getString("System.Button.Edit"));
  wdRepository=new Button(shell,SWT.PUSH);
  wdRepository.setText(Messages.getString("System.Button.Delete"));
  fddRepository=new FormData();
  fddRepository.right=new FormAttachment(100,-right);
  fddRepository.top=new FormAttachment(wlKettle,20);
  wdRepository.setLayoutData(fddRepository);
  fdeRepository=new FormData();
  fdeRepository.right=new FormAttachment(wdRepository,-margin);
  fdeRepository.top=new FormAttachment(wlKettle,20);
  weRepository.setLayoutData(fdeRepository);
  fdnRepository=new FormData();
  fdnRepository.right=new FormAttachment(weRepository,-margin);
  fdnRepository.top=new FormAttachment(wlKettle,20);
  wnRepository.setLayoutData(fdnRepository);
  props.setLook(wRepository);
  fdRepository=new FormData();
  fdRepository.left=new FormAttachment(middle,0);
  fdRepository.right=new FormAttachment(wnRepository,-margin);
  fdRepository.top=new FormAttachment(wlKettle,20);
  wRepository.setLayoutData(fdRepository);
  wnRepository.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      RepositoryMeta ri=new RepositoryMeta();
      RepositoryDialog dd=new RepositoryDialog(shell,SWT.APPLICATION_MODAL,log,props,ri,input,steploader);
      if (dd.open() != null) {
        input.addRepository(ri);
        fillRepositories();
        int idx=input.indexOfRepository(ri);
        wRepository.select(idx);
      }
    }
  }
);
  weRepository.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      RepositoryMeta ri=input.searchRepository(wRepository.getText());
      if (ri != null) {
        RepositoryDialog dd=new RepositoryDialog(shell,SWT.APPLICATION_MODAL,log,props,ri,input,steploader);
        if (dd.open() != null) {
          fillRepositories();
          int idx=input.indexOfRepository(ri);
          wRepository.select(idx);
        }
      }
    }
  }
);
  wdRepository.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      RepositoryMeta ri=input.searchRepository(wRepository.getText());
      if (ri != null) {
        int idx=input.indexOfRepository(ri);
        input.removeRepository(idx);
        fillRepositories();
      }
    }
  }
);
  wRepository.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      wUsername.setFocus();
      e.doit=false;
    }
  }
);
  wlUsername=new Label(shell,SWT.RIGHT);
  wlUsername.setText(Messages.getString("RepositoriesDialog.Label.Login"));
  props.setLook(wlUsername);
  fdlUsername=new FormData();
  fdlUsername.left=new FormAttachment(0,0);
  fdlUsername.right=new FormAttachment(middle,-margin);
  fdlUsername.top=new FormAttachment(wdRepository,margin);
  wlUsername.setLayoutData(fdlUsername);
  wUsername=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wUsername);
  fdUsername=new FormData();
  fdUsername.left=new FormAttachment(middle,0);
  fdUsername.right=new FormAttachment(100,-right);
  fdUsername.top=new FormAttachment(wdRepository,margin);
  wUsername.setLayoutData(fdUsername);
  wlPassword=new Label(shell,SWT.RIGHT);
  wlPassword.setText(Messages.getString("RepositoriesDialog.Label.Password"));
  props.setLook(wlPassword);
  fdlPassword=new FormData();
  fdlPassword.left=new FormAttachment(0,0);
  fdlPassword.right=new FormAttachment(middle,-margin);
  fdlPassword.top=new FormAttachment(wUsername,margin);
  wlPassword.setLayoutData(fdlPassword);
  wPassword=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(middle,0);
  fdPassword.right=new FormAttachment(100,-right);
  fdPassword.top=new FormAttachment(wUsername,margin);
  wPassword.setLayoutData(fdPassword);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wNorep=new Button(shell,SWT.PUSH);
  wNorep.setText(Messages.getString("RepositoriesDialog.Button.NoRepository"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wNorep,wCancel},Const.MARGIN,null);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsNorep=new Listener(){
    public void handleEvent(    Event e){
      norep();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wNorep.addListener(SWT.Selection,lsNorep);
  wCancel.addListener(SWT.Selection,lsCancel);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  lsRepo=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR)       wUsername.setFocus();
    }
  }
;
  lsJmp=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR) {
        if (wPassword.getText().length() != 0)         ok();
 else {
          wPassword.setFocus();
          wPassword.selectAll();
        }
      }
    }
  }
;
  wRepository.addKeyListener(lsRepo);
  wUsername.addKeyListener(lsJmp);
  wPassword.addSelectionListener(lsDef);
  getData();
  shell.pack();
  shell.setSize(bounds.width,shell.getBounds().height + wOK.getBounds().height + 30);
  WindowProperty winprop=props.getScreen(shell.getText());
  if (winprop != null) {
    winprop.setShell(shell,true);
  }
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return repinfo != null;
}
