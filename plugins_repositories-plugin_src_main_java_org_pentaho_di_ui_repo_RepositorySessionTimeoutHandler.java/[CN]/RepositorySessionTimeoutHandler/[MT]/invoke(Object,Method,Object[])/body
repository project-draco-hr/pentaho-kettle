{
  try {
    return method.invoke(repository,args);
  }
 catch (  InvocationTargetException ex) {
    if (connectedToRepository() && lookupForConnectTimeoutError(ex) && !calledFromThisHandler()) {
      try {
        return method.invoke(repository,args);
      }
 catch (      InvocationTargetException ex2) {
        if (!lookupForConnectTimeoutError(ex2)) {
          throw ex2.getCause();
        }
      }
      needToLogin.set(true);
synchronized (this) {
        if (needToLogin.get()) {
          boolean result=showLoginScreen(repositoryConnectController);
          needToLogin.set(false);
          if (result) {
            reinvoke.set(true);
            return method.invoke(repository,args);
          }
          reinvoke.set(false);
        }
      }
      if (reinvoke.get()) {
        return method.invoke(repository,args);
      }
    }
    throw ex.getCause();
  }
}
