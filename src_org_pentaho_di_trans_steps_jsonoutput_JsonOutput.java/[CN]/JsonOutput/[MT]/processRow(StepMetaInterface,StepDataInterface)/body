{
  meta=(JsonOutputMeta)smi;
  data=(JsonOutputData)sdi;
  Object[] r=getRow();
  if (r == null) {
    if (!data.rowsAreSafe) {
      outPutRow(r);
    }
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.inputRowMetaSize=data.inputRowMeta.size();
    if (data.outputValue) {
      data.outputRowMeta=data.inputRowMeta.clone();
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    }
    data.nrFields=meta.getOutputFields().length;
    data.fieldIndexes=new int[data.nrFields];
    for (int i=0; i < data.nrFields; i++) {
      data.fieldIndexes[i]=data.inputRowMeta.indexOfValue(meta.getOutputFields()[i].getFieldName());
      if (data.fieldIndexes[i] < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"JsonOutput.Exception.FieldNotFound"));
      }
      JsonOutputField field=meta.getOutputFields()[i];
      field.setElementName(environmentSubstitute(field.getElementName()));
    }
  }
  data.rowsAreSafe=false;
  compatibilityFactory.execute(r);
  if (data.writeToFile && !data.outputValue) {
    putRow(data.inputRowMeta,r);
    incrementLinesOutput();
  }
  return true;
}
