{
  ensureEmptyStringIsNotNull(false);
  ValueMetaString meta=new ValueMetaString(BASE_VALUE);
  meta.setTrimType(ValueMetaInterface.TRIM_TYPE_NONE);
  assertSignum(0,meta.compare(null,null));
  assertSignum(0,meta.compare(null,""));
  assertSignum(-1,meta.compare(null," "));
  assertSignum(-1,meta.compare(null," 1"));
  assertSignum(-1,meta.compare(null," 1 "));
  assertSignum(-1,meta.compare(null,"1"));
  assertSignum(-1,meta.compare(null,"1 "));
  assertSignum(0,meta.compare("",null));
  assertSignum(0,meta.compare("",""));
  assertSignum(-1,meta.compare(""," "));
  assertSignum(-1,meta.compare(""," 1"));
  assertSignum(-1,meta.compare(""," 1 "));
  assertSignum(-1,meta.compare("","1"));
  assertSignum(-1,meta.compare("","1 "));
  assertSignum(1,meta.compare(" ",null));
  assertSignum(1,meta.compare(" ",""));
  assertSignum(0,meta.compare(" "," "));
  assertSignum(-1,meta.compare(" "," 1"));
  assertSignum(-1,meta.compare(" "," 1 "));
  assertSignum(-1,meta.compare(" ","1"));
  assertSignum(-1,meta.compare(" ","1 "));
  assertSignum(1,meta.compare(" 1",null));
  assertSignum(1,meta.compare(" 1",""));
  assertSignum(1,meta.compare(" 1"," "));
  assertSignum(0,meta.compare(" 1"," 1"));
  assertSignum(-1,meta.compare(" 1"," 1 "));
  assertSignum(-1,meta.compare(" 1","1"));
  assertSignum(-1,meta.compare(" 1","1 "));
  assertSignum(1,meta.compare(" 1 ",null));
  assertSignum(1,meta.compare(" 1 ",""));
  assertSignum(1,meta.compare(" 1 "," "));
  assertSignum(1,meta.compare(" 1 "," 1"));
  assertSignum(0,meta.compare(" 1 "," 1 "));
  assertSignum(-1,meta.compare(" 1 ","1"));
  assertSignum(-1,meta.compare(" 1 ","1 "));
  assertSignum(1,meta.compare("1",null));
  assertSignum(1,meta.compare("1",""));
  assertSignum(1,meta.compare("1"," "));
  assertSignum(1,meta.compare("1"," 1"));
  assertSignum(1,meta.compare("1"," 1 "));
  assertSignum(0,meta.compare("1","1"));
  assertSignum(-1,meta.compare("1","1 "));
  assertSignum(1,meta.compare("1 ",null));
  assertSignum(1,meta.compare("1 ",""));
  assertSignum(1,meta.compare("1 "," "));
  assertSignum(1,meta.compare("1 "," 1"));
  assertSignum(1,meta.compare("1 "," 1 "));
  assertSignum(1,meta.compare("1 ","1"));
  assertSignum(0,meta.compare("1 ","1 "));
  meta.setTrimType(ValueMetaInterface.TRIM_TYPE_LEFT);
  assertSignum(0,meta.compare(null,null));
  assertSignum(0,meta.compare(null,""));
  assertSignum(-1,meta.compare(null," "));
  assertSignum(-1,meta.compare(null," 1"));
  assertSignum(-1,meta.compare(null," 1 "));
  assertSignum(-1,meta.compare(null,"1"));
  assertSignum(-1,meta.compare(null,"1 "));
  assertSignum(0,meta.compare("",null));
  assertSignum(0,meta.compare("",""));
  assertSignum(-1,meta.compare(""," "));
  assertSignum(-1,meta.compare(""," 1"));
  assertSignum(-1,meta.compare(""," 1 "));
  assertSignum(-1,meta.compare("","1"));
  assertSignum(-1,meta.compare("","1 "));
  assertSignum(1,meta.compare(" ",null));
  assertSignum(1,meta.compare(" ",""));
  assertSignum(0,meta.compare(" "," "));
  assertSignum(-1,meta.compare(" "," 1"));
  assertSignum(-1,meta.compare(" "," 1 "));
  assertSignum(-1,meta.compare(" ","1"));
  assertSignum(-1,meta.compare(" ","1 "));
  assertSignum(1,meta.compare(" 1",null));
  assertSignum(1,meta.compare(" 1",""));
  assertSignum(1,meta.compare(" 1"," "));
  assertSignum(0,meta.compare(" 1"," 1"));
  assertSignum(-1,meta.compare(" 1"," 1 "));
  assertSignum(0,meta.compare(" 1","1"));
  assertSignum(-1,meta.compare(" 1","1 "));
  assertSignum(1,meta.compare(" 1 ",null));
  assertSignum(1,meta.compare(" 1 ",""));
  assertSignum(1,meta.compare(" 1 "," "));
  assertSignum(1,meta.compare(" 1 "," 1"));
  assertSignum(0,meta.compare(" 1 "," 1 "));
  assertSignum(1,meta.compare(" 1 ","1"));
  assertSignum(0,meta.compare(" 1 ","1 "));
  assertSignum(1,meta.compare("1",null));
  assertSignum(1,meta.compare("1",""));
  assertSignum(1,meta.compare("1"," "));
  assertSignum(0,meta.compare("1"," 1"));
  assertSignum(-1,meta.compare("1"," 1 "));
  assertSignum(0,meta.compare("1","1"));
  assertSignum(-1,meta.compare("1","1 "));
  assertSignum(1,meta.compare("1 ",null));
  assertSignum(1,meta.compare("1 ",""));
  assertSignum(1,meta.compare("1 "," "));
  assertSignum(1,meta.compare("1 "," 1"));
  assertSignum(0,meta.compare("1 "," 1 "));
  assertSignum(1,meta.compare("1 ","1"));
  assertSignum(0,meta.compare("1 ","1 "));
  meta.setTrimType(ValueMetaInterface.TRIM_TYPE_RIGHT);
  assertSignum(0,meta.compare(null,null));
  assertSignum(0,meta.compare(null,""));
  assertSignum(-1,meta.compare(null," "));
  assertSignum(-1,meta.compare(null," 1"));
  assertSignum(-1,meta.compare(null," 1 "));
  assertSignum(-1,meta.compare(null,"1"));
  assertSignum(-1,meta.compare(null,"1 "));
  assertSignum(0,meta.compare("",null));
  assertSignum(0,meta.compare("",""));
  assertSignum(-1,meta.compare(""," "));
  assertSignum(-1,meta.compare(""," 1"));
  assertSignum(-1,meta.compare(""," 1 "));
  assertSignum(-1,meta.compare("","1"));
  assertSignum(-1,meta.compare("","1 "));
  assertSignum(1,meta.compare(" ",null));
  assertSignum(1,meta.compare(" ",""));
  assertSignum(0,meta.compare(" "," "));
  assertSignum(-1,meta.compare(" "," 1"));
  assertSignum(-1,meta.compare(" "," 1 "));
  assertSignum(-1,meta.compare(" ","1"));
  assertSignum(-1,meta.compare(" ","1 "));
  assertSignum(1,meta.compare(" 1",null));
  assertSignum(1,meta.compare(" 1",""));
  assertSignum(1,meta.compare(" 1"," "));
  assertSignum(0,meta.compare(" 1"," 1"));
  assertSignum(0,meta.compare(" 1"," 1 "));
  assertSignum(-1,meta.compare(" 1","1"));
  assertSignum(-1,meta.compare(" 1","1 "));
  assertSignum(1,meta.compare(" 1 ",null));
  assertSignum(1,meta.compare(" 1 ",""));
  assertSignum(1,meta.compare(" 1 "," "));
  assertSignum(0,meta.compare(" 1 "," 1"));
  assertSignum(0,meta.compare(" 1 "," 1 "));
  assertSignum(-1,meta.compare(" 1 ","1"));
  assertSignum(-1,meta.compare(" 1 ","1 "));
  assertSignum(1,meta.compare("1",null));
  assertSignum(1,meta.compare("1",""));
  assertSignum(1,meta.compare("1"," "));
  assertSignum(1,meta.compare("1"," 1"));
  assertSignum(1,meta.compare("1"," 1 "));
  assertSignum(0,meta.compare("1","1"));
  assertSignum(0,meta.compare("1","1 "));
  assertSignum(1,meta.compare("1 ",null));
  assertSignum(1,meta.compare("1 ",""));
  assertSignum(1,meta.compare("1 "," "));
  assertSignum(1,meta.compare("1 "," 1"));
  assertSignum(1,meta.compare("1 "," 1 "));
  assertSignum(0,meta.compare("1 ","1"));
  assertSignum(0,meta.compare("1 ","1 "));
  meta.setTrimType(ValueMetaInterface.TRIM_TYPE_BOTH);
  assertSignum(0,meta.compare(null,null));
  assertSignum(0,meta.compare(null,""));
  assertSignum(-1,meta.compare(null," "));
  assertSignum(-1,meta.compare(null," 1"));
  assertSignum(-1,meta.compare(null," 1 "));
  assertSignum(-1,meta.compare(null,"1"));
  assertSignum(-1,meta.compare(null,"1 "));
  assertSignum(0,meta.compare("",null));
  assertSignum(0,meta.compare("",""));
  assertSignum(-1,meta.compare(""," "));
  assertSignum(-1,meta.compare(""," 1"));
  assertSignum(-1,meta.compare(""," 1 "));
  assertSignum(-1,meta.compare("","1"));
  assertSignum(-1,meta.compare("","1 "));
  assertSignum(1,meta.compare(" ",null));
  assertSignum(1,meta.compare(" ",""));
  assertSignum(0,meta.compare(" "," "));
  assertSignum(-1,meta.compare(" "," 1"));
  assertSignum(-1,meta.compare(" "," 1 "));
  assertSignum(-1,meta.compare(" ","1"));
  assertSignum(-1,meta.compare(" ","1 "));
  assertSignum(1,meta.compare(" 1",null));
  assertSignum(1,meta.compare(" 1",""));
  assertSignum(1,meta.compare(" 1"," "));
  assertSignum(0,meta.compare(" 1"," 1"));
  assertSignum(0,meta.compare(" 1"," 1 "));
  assertSignum(0,meta.compare(" 1","1"));
  assertSignum(0,meta.compare(" 1","1 "));
  assertSignum(1,meta.compare(" 1 ",null));
  assertSignum(1,meta.compare(" 1 ",""));
  assertSignum(1,meta.compare(" 1 "," "));
  assertSignum(0,meta.compare(" 1 "," 1"));
  assertSignum(0,meta.compare(" 1 "," 1 "));
  assertSignum(0,meta.compare(" 1 ","1"));
  assertSignum(0,meta.compare(" 1 ","1 "));
  assertSignum(1,meta.compare("1",null));
  assertSignum(1,meta.compare("1",""));
  assertSignum(1,meta.compare("1"," "));
  assertSignum(0,meta.compare("1"," 1"));
  assertSignum(0,meta.compare("1"," 1 "));
  assertSignum(0,meta.compare("1","1"));
  assertSignum(0,meta.compare("1","1 "));
  assertSignum(1,meta.compare("1 ",null));
  assertSignum(1,meta.compare("1 ",""));
  assertSignum(1,meta.compare("1 "," "));
  assertSignum(0,meta.compare("1 "," 1"));
  assertSignum(0,meta.compare("1 "," 1 "));
  assertSignum(0,meta.compare("1 ","1"));
  assertSignum(0,meta.compare("1 ","1 "));
}
