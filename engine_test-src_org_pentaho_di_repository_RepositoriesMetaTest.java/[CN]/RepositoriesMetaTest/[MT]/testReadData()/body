{
  RepositoriesMeta meta=new RepositoriesMeta();
  RepositoriesMeta spy=Mockito.spy(meta);
  LogChannel log=mock(LogChannel.class);
  when(spy.getKettleUserRepositoriesFile()).thenReturn(getClass().getResource("repositories.xml").getPath());
  when(spy.newLogChannel()).thenReturn(log);
  spy.readData();
  String repositoriesXml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<repositories>\n" + "  <connection>\n"+ "    <name>local postgres</name>\n"+ "    <server>localhost</server>\n"+ "    <type>POSTGRESQL</type>\n"+ "    <access>Native</access>\n"+ "    <database>hibernate</database>\n"+ "    <port>5432</port>\n"+ "    <username>auser</username>\n"+ "    <password>Encrypted 2be98afc86aa7f285bb18bd63c99dbdde</password>\n"+ "    <servername/>\n"+ "    <data_tablespace/>\n"+ "    <index_tablespace/>\n"+ "    <attributes>\n"+ "      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>\n"+ "      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>\n"+ "      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>\n"+ "      <attribute><code>PORT_NUMBER</code><attribute>5432</attribute></attribute>\n"+ "      <attribute><code>PRESERVE_RESERVED_WORD_CASE</code><attribute>N</attribute></attribute>\n"+ "      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>\n"+ "      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>Y</attribute></attribute>\n"+ "      <attribute><code>SUPPORTS_TIMESTAMP_DATA_TYPE</code><attribute>Y</attribute></attribute>\n"+ "      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>\n"+ "    </attributes>\n"+ "  </connection>\n"+ "  <repository>    <id>KettleFileRepository</id>\n"+ "    <name>Test Repository</name>\n"+ "    <description>Test Repository Description</description>\n"+ "    <base_directory>test-repository</base_directory>\n"+ "    <read_only>N</read_only>\n"+ "    <hides_hidden_files>N</hides_hidden_files>\n"+ "  </repository>  </repositories>\n";
  assertEquals(repositoriesXml,spy.getXML());
  RepositoriesMeta clone=spy.clone();
  assertEquals(repositoriesXml,spy.getXML());
  assertNotSame(clone,spy);
  assertEquals(1,spy.nrRepositories());
  RepositoryMeta repository=spy.getRepository(0);
  assertEquals("Test Repository",repository.getName());
  assertEquals("Test Repository Description",repository.getDescription());
  assertEquals("  <repository>    <id>KettleFileRepository</id>\n" + "    <name>Test Repository</name>\n" + "    <description>Test Repository Description</description>\n"+ "    <base_directory>test-repository</base_directory>\n"+ "    <read_only>N</read_only>\n"+ "    <hides_hidden_files>N</hides_hidden_files>\n"+ "  </repository>",repository.getXML());
  assertSame(repository,spy.searchRepository("Test Repository"));
  assertSame(repository,spy.findRepositoryById("KettleFileRepository"));
  assertSame(repository,spy.findRepository("Test Repository"));
  assertNull(spy.findRepository("not found"));
  assertNull(spy.findRepositoryById("not found"));
  assertEquals(0,spy.indexOfRepository(repository));
  spy.removeRepository(0);
  assertEquals(0,spy.nrRepositories());
  assertNull(spy.searchRepository("Test Repository"));
  spy.addRepository(0,repository);
  assertEquals(1,spy.nrRepositories());
  spy.removeRepository(1);
  assertEquals(1,spy.nrRepositories());
  assertEquals(1,spy.nrDatabases());
  assertEquals("local postgres",spy.getDatabase(0).getName());
  DatabaseMeta searchDatabase=spy.searchDatabase("local postgres");
  assertSame(searchDatabase,spy.getDatabase(0));
  assertEquals(0,spy.indexOfDatabase(searchDatabase));
  spy.removeDatabase(0);
  assertEquals(0,spy.nrDatabases());
  assertNull(spy.searchDatabase("local postgres"));
  spy.addDatabase(0,searchDatabase);
  assertEquals(1,spy.nrDatabases());
  spy.removeDatabase(1);
  assertEquals(1,spy.nrDatabases());
  assertEquals("Unable to read repository with id [junk]. RepositoryMeta is not available.",spy.getErrorMessage());
}
