{
  FileInputList fileInputList=new FileInputList();
  final String realfile[]=StringUtil.environmentSubstitute(fileName);
  final String realmask[]=StringUtil.environmentSubstitute(fileMask);
  for (int i=0; i < realfile.length; i++) {
    final String onefile=realfile[i];
    final String onemask=realmask[i];
    final boolean onerequired=YES.equalsIgnoreCase(fileRequired[i]);
    boolean subdirs=includeSubdirs[i];
    if (onefile == null)     continue;
    if (!Const.isEmpty(onemask)) {
      File file=new File(onefile);
      try {
        String[] fileNames=file.list(new FilenameFilter(){
          public boolean accept(          File dir,          String name){
            return Pattern.matches(onemask,name);
          }
        }
);
        if (subdirs) {
          Vector matchingFilenames=new Vector();
          appendToVector(matchingFilenames,fileNames,"");
          findMatchingFiles(file,onemask,matchingFilenames,"");
          fileNames=new String[matchingFilenames.size()];
          matchingFilenames.copyInto(fileNames);
        }
        if (fileNames != null) {
          for (int j=0; j < fileNames.length; j++) {
            File localFile=new File(file,fileNames[j]);
            if (!localFile.isDirectory() && localFile.isFile())             fileInputList.addFile(localFile);
          }
        }
        if (Const.isEmpty(fileNames)) {
          if (onerequired)           fileInputList.addNonAccessibleFile(file);
        }
      }
 catch (      Exception e) {
        LogWriter.getInstance().logError("FileInputList",Const.getStackTracker(e));
      }
    }
 else {
      File file=new File(onefile);
      if (file.exists()) {
        if (file.canRead() && file.isFile()) {
          if (file.isFile())           fileInputList.addFile(file);
        }
 else {
          if (onerequired)           fileInputList.addNonAccessibleFile(file);
        }
      }
 else {
        if (onerequired)         fileInputList.addNonExistantFile(file);
      }
    }
  }
  fileInputList.sortFiles();
  return fileInputList;
}
