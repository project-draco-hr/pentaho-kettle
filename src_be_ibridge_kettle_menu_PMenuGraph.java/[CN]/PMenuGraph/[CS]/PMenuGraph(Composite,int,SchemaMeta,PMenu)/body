{
  super(par,style);
  shell=par.getShell();
  schema=sch;
  log=LogWriter.getInstance();
  spoon=sp;
  canvas=this;
  iconsize=schema.props.getIconSize();
  selrect=null;
  candidate=null;
  last_button=0;
  selected_steps=null;
  selected_note=null;
  hori=getHorizontalBar();
  vert=getVerticalBar();
  hori.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  vert.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  hori.setThumb(100);
  vert.setThumb(100);
  hori.setVisible(true);
  vert.setVisible(true);
  setVisible(true);
  newProps();
  canvas.setBackground(GUIResource.getInstance().getColorBackground());
  addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      PMenuGraph.this.paintControl(e);
    }
  }
);
  selected_steps=null;
  lastclick=null;
  addKeyListener(spoon.modKeys);
  addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      selected_steps=null;
      selected_icon=null;
      selected_note=null;
      candidate=null;
      iconoffset=null;
      selrect=null;
      Point real=screen2real(e.x,e.y);
      TableMeta tableinfo=schema.getTable(real.x,real.y,iconsize);
      if (tableinfo != null) {
        if (e.button == 1)         editTable(tableinfo);
 else         editDescription(tableinfo);
      }
 else {
        RelationshipMeta online=findRelationship(real.x,real.y);
        if (online != null) {
          editRelationship(online);
        }
 else {
          NotePadMeta ni=schema.getNote(real.x,real.y);
          if (ni != null) {
            selected_note=null;
            editNote(ni);
          }
        }
      }
    }
    public void mouseDown(    MouseEvent e){
      last_button=e.button;
      selected_steps=null;
      selected_icon=null;
      selected_note=null;
      candidate=null;
      iconoffset=null;
      selrect=null;
      Point real=screen2real(e.x,e.y);
      setToolTipText(null);
      setMenu(real.x,real.y);
      TableMeta ti=schema.getTable(real.x,real.y,iconsize);
      if (ti != null) {
        selected_steps=schema.getSelectedTables();
        selected_icon=ti;
        prev_locations=schema.getSelectedLocations();
        Point p=ti.getLocation();
        iconoffset=new Point(real.x - p.x,real.y - p.y);
      }
 else {
        NotePadMeta ni=schema.getNote(real.x,real.y);
        if (ni != null && last_button == 1) {
          selected_note=ni;
          Point loc=ni.getLocation();
          previous_note_location=new Point(loc.x,loc.y);
          noteoffset=new Point(real.x - loc.x,real.y - loc.y);
        }
 else {
          if (!control)           selrect=new Rectangle(real.x,real.y,0,0);
        }
      }
      lastclick=new Point(real.x,real.y);
      redraw();
    }
    public void mouseUp(    MouseEvent e){
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point real=screen2real(e.x,e.y);
      if (candidate != null) {
        if (schema.findRelationship(candidate.getTableFrom().getName(),candidate.getTableTo().getName()) == null) {
          schema.addRelationship(candidate);
          spoon.refreshTree();
        }
        candidate=null;
        selected_steps=null;
        last_button=0;
        redraw();
      }
 else       if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        schema.unselectAll();
        schema.selectInRect(selrect);
        selrect=null;
        redraw();
      }
 else       if (selected_icon != null) {
        if (e.button == 1) {
          if (lastclick.x == e.x && lastclick.y == e.y) {
            if (control) {
              selected_icon.flipSelected();
            }
 else {
              schema.unselectAll();
              selected_icon.setSelected(true);
            }
          }
 else           if (selected_steps != null && prev_locations != null) {
            int indexes[]=schema.getTableIndexes(selected_steps);
            spoon.addUndoPosition(selected_steps,indexes,prev_locations,schema.getSelectedLocations());
          }
        }
        selected_steps=null;
        redraw();
      }
 else       if (selected_note != null) {
        Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
        if (last_button == 1) {
          if (lastclick.x != e.x || lastclick.y != e.y) {
            int indexes[]=new int[]{schema.indexOfNote(selected_note)};
            spoon.addUndoPosition(new NotePadMeta[]{selected_note},indexes,new Point[]{previous_note_location},new Point[]{note});
          }
        }
        selected_note=null;
      }
    }
  }
);
  addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point real=screen2real(e.x,e.y);
      Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
      setToolTip(real.x,real.y);
      if (selected_icon != null && !selected_icon.isSelected()) {
        schema.unselectAll();
        selected_icon.setSelected(true);
        selected_steps=new TableMeta[]{selected_icon};
        prev_locations=new Point[]{selected_icon.getLocation()};
      }
      if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        redraw();
      }
 else       if (selected_steps != null) {
        if (last_button == 1) {
          int dx=icon.x - selected_icon.getLocation().x;
          int dy=icon.y - selected_icon.getLocation().y;
          for (int i=0; i < selected_steps.length; i++) {
            TableMeta te=selected_steps[i];
            te.setLocation(te.getLocation().x + dx,te.getLocation().y + dy);
          }
          redraw();
        }
 else         if (last_button == 2) {
          TableMeta ti=schema.getTable(real.x,real.y,iconsize);
          if (ti != null && !selected_icon.equals(ti)) {
            if (candidate == null) {
              candidate=new RelationshipMeta(selected_icon,ti,-1,-1);
              redraw();
            }
          }
 else {
            if (candidate != null) {
              candidate=null;
              redraw();
            }
          }
        }
      }
 else       if (selected_note != null) {
        if (last_button == 1) {
          Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
          selected_note.setLocation(note.x,note.y);
          redraw();
        }
      }
    }
  }
);
  Transfer[] ttypes=new Transfer[]{TextTransfer.getInstance()};
  DropTarget ddTarget=new DropTarget(this,DND.DROP_MOVE | DND.DROP_COPY);
  ddTarget.setTransfer(ttypes);
  ddTarget.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
      selected_steps=null;
      selected_icon=null;
      selrect=null;
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void dragLeave(    DropTargetEvent event){
      drop_candidate=null;
      redraw();
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Point p=getRealPosition(canvas,event.x,event.y);
      StringTokenizer strtok=new StringTokenizer((String)event.data,Const.CR);
      if (strtok.countTokens() == 1) {
        String table=strtok.nextToken();
        TableMeta ti=schema.findTable(table);
        boolean newtable=false;
        if (ti.isDrawn() || schema.isTableUsedInRelationships(table)) {
          MessageBox mb=new MessageBox(shell,SWT.OK);
          mb.setMessage("Table is allready on canvas!");
          mb.setText("Warning!");
          mb.open();
          return;
        }
        schema.unselectAll();
        TableMeta before=(TableMeta)ti.clone();
        ti.draw();
        ti.setSelected(true);
        ti.setLocation(p.x,p.y);
        if (newtable) {
          spoon.addUndoNew(new TableMeta[]{(TableMeta)ti.clone()},new int[]{schema.indexOfTable(ti)});
        }
 else {
          spoon.addUndoChange(new TableMeta[]{before},new TableMeta[]{(TableMeta)ti.clone()},new int[]{schema.indexOfTable(ti)});
        }
        canvas.forceFocus();
        redraw();
      }
    }
    public void dropAccept(    DropTargetEvent event){
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if ((int)e.character == 1) {
        schema.selectAll();
        redraw();
      }
      if (e.keyCode == SWT.ESC) {
        schema.unselectAll();
        redraw();
      }
    }
  }
);
  addKeyListener(spoon.defKeys);
  setBackground(GUIResource.getInstance().getColorBackground());
}
