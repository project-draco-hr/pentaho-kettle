{
  final TableMeta ti=schema.getTable(x,y,iconsize);
  if (ti != null) {
    Menu mPop=new Menu((Control)this);
    MenuItem miNewHop=null;
    MenuItem miHideStep=null;
    int sels=schema.nrSelected();
    if (sels == 2) {
      miNewHop=new MenuItem(mPop,SWT.CASCADE);
      miNewHop.setText("Add relationship");
    }
    MenuItem miEditStep=new MenuItem(mPop,SWT.CASCADE);
    miEditStep.setText("Edit table");
    MenuItem miEditDesc=new MenuItem(mPop,SWT.CASCADE);
    miEditDesc.setText("Edit table description");
    MenuItem miDupeStep=new MenuItem(mPop,SWT.CASCADE);
    miDupeStep.setText("Duplicate table");
    MenuItem miDelStep=new MenuItem(mPop,SWT.CASCADE);
    miDelStep.setText("Delete table");
    if (sels > 1) {
      new MenuItem(mPop,SWT.SEPARATOR);
      MenuItem miPopAD=new MenuItem(mPop,SWT.CASCADE);
      miPopAD.setText("Allign / Distribute");
      Menu mPopAD=new Menu(miPopAD);
      MenuItem miPopALeft=new MenuItem(mPopAD,SWT.CASCADE);
      miPopALeft.setText("Allign left");
      MenuItem miPopARight=new MenuItem(mPopAD,SWT.CASCADE);
      miPopARight.setText("Allign right");
      MenuItem miPopATop=new MenuItem(mPopAD,SWT.CASCADE);
      miPopATop.setText("Allign top");
      MenuItem miPopABottom=new MenuItem(mPopAD,SWT.CASCADE);
      miPopABottom.setText("Allign bottom");
      new MenuItem(mPopAD,SWT.SEPARATOR);
      MenuItem miPopDHoriz=new MenuItem(mPopAD,SWT.CASCADE);
      miPopDHoriz.setText("Distribute horizontally");
      MenuItem miPopDVertic=new MenuItem(mPopAD,SWT.CASCADE);
      miPopDVertic.setText("Distribute vertically");
      new MenuItem(mPopAD,SWT.SEPARATOR);
      MenuItem miPopSSnap=new MenuItem(mPopAD,SWT.CASCADE);
      miPopSSnap.setText("Snap to grid (size " + Const.GRID_SIZE + ")");
      miPopAD.setMenu(mPopAD);
      miPopALeft.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          allignleft();
        }
      }
);
      miPopARight.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          allignright();
        }
      }
);
      miPopATop.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          alligntop();
        }
      }
);
      miPopABottom.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          allignbottom();
        }
      }
);
      miPopDHoriz.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          distributehorizontal();
        }
      }
);
      miPopDVertic.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          distributevertical();
        }
      }
);
      miPopSSnap.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          snaptogrid(Const.GRID_SIZE);
        }
      }
);
    }
    if (sels == 2) {
      miNewHop.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          selected_steps=null;
          newRelationship();
        }
      }
);
    }
    if (ti.isDrawn() && !schema.isTableUsedInRelationships(ti.getName())) {
      miHideStep=new MenuItem(mPop,SWT.CASCADE);
      miHideStep.setText("Hide step");
      miHideStep.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          for (int i=0; i < schema.nrSelected(); i++) {
            TableMeta ti=schema.getSelected(i);
            if (ti.isDrawn() && ti.isSelected()) {
              ti.hide();
              spoon.refreshTree();
            }
          }
          ti.hide();
          spoon.refreshTree();
          redraw();
        }
      }
);
    }
    miEditStep.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        selected_steps=null;
        editTable(ti);
      }
    }
);
    miEditDesc.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        editDescription(ti);
      }
    }
);
    miDupeStep.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (schema.nrSelected() <= 1) {
          spoon.dupeTable(ti.getName());
        }
 else {
          for (int i=0; i < schema.nrTables(); i++) {
            TableMeta tableinfo=schema.getTable(i);
            if (tableinfo.isSelected()) {
              spoon.dupeTable(tableinfo.getName());
            }
          }
        }
      }
    }
);
    miDelStep.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int nrsels=schema.nrSelected();
        if (nrsels == 0) {
          spoon.delTable(ti.getName());
        }
 else {
          if (!ti.isSelected())           nrsels++;
          MessageBox mb=new MessageBox(shell,SWT.YES | SWT.NO | SWT.ICON_WARNING);
          mb.setText("WARNING!");
          String message="Do you want to delete the " + nrsels + " following tables?"+ Const.CR;
          for (int i=schema.nrTables() - 1; i >= 0; i--) {
            TableMeta tableinfo=schema.getTable(i);
            if (tableinfo.isSelected() || ti.equals(tableinfo)) {
              message+="  --> " + tableinfo.getName() + Const.CR;
            }
          }
          mb.setMessage(message);
          int result=mb.open();
          if (result == SWT.YES) {
            for (int i=schema.nrTables() - 1; i >= 0; i--) {
              TableMeta tableinfo=schema.getTable(i);
              if (tableinfo.isSelected() || ti.equals(tableinfo)) {
                spoon.delTable(tableinfo.getName());
              }
            }
          }
        }
      }
    }
);
    setMenu(mPop);
  }
 else {
    final RelationshipMeta hi=findRelationship(x,y);
    if (hi != null) {
      Menu mPop=new Menu((Control)this);
      MenuItem miEditHop=new MenuItem(mPop,SWT.CASCADE);
      miEditHop.setText("Edit hop");
      MenuItem miFlipHop=new MenuItem(mPop,SWT.CASCADE);
      miFlipHop.setText("Flip direction");
      MenuItem miDelHop=new MenuItem(mPop,SWT.CASCADE);
      miDelHop.setText("Delete relationship");
      miEditHop.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          selrect=null;
          editRelationship(hi);
        }
      }
);
      miFlipHop.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          selrect=null;
          TableMeta dummy=hi.getTableFrom();
          hi.setTableFrom(hi.getTableTo());
          hi.setTableTo(dummy);
          hi.setChanged();
          spoon.refreshGraph();
          spoon.refreshTree();
          spoon.setShellText();
        }
      }
);
      miDelHop.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          selrect=null;
          int idx=schema.indexOfRelationship(hi);
          spoon.addUndoDelete(new RelationshipMeta[]{(RelationshipMeta)hi.clone()},new int[]{idx});
          schema.removeRelationship(idx);
          spoon.refreshTree();
          spoon.refreshGraph();
        }
      }
);
      setMenu(mPop);
    }
 else {
      final NotePadMeta ni=schema.getNote(x,y);
      if (ni != null) {
        Menu mPop=new Menu((Control)this);
        MenuItem miNoteEdit=new MenuItem(mPop,SWT.CASCADE);
        miNoteEdit.setText("Edit note");
        MenuItem miNoteDel=new MenuItem(mPop,SWT.CASCADE);
        miNoteDel.setText("Delete note");
        miNoteEdit.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            selrect=null;
            editNote(ni);
          }
        }
);
        miNoteDel.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            selrect=null;
            int idx=schema.indexOfNote(ni);
            if (idx >= 0) {
              schema.removeNote(idx);
              spoon.addUndoDelete(new NotePadMeta[]{(NotePadMeta)ni.clone()},new int[]{idx});
              redraw();
            }
          }
        }
);
        setMenu(mPop);
      }
 else {
        Menu mPop=new Menu((Control)this);
        MenuItem miNoteNew=new MenuItem(mPop,SWT.CASCADE);
        miNoteNew.setText("New note");
        miNoteNew.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            selrect=null;
            String title="Notes";
            String message="Note text:";
            EnterTextDialog dd=new EnterTextDialog(shell,schema.props,title,message,"");
            String n=dd.open();
            if (n != null) {
              NotePadMeta npi=new NotePadMeta(n,lastclick.x,lastclick.y,Const.NOTE_MIN_SIZE,Const.NOTE_MIN_SIZE);
              schema.addNote(npi);
              spoon.addUndoNew(new NotePadMeta[]{(NotePadMeta)npi.clone()},new int[]{schema.indexOfNote(npi)});
              redraw();
            }
          }
        }
);
        setMenu(mPop);
      }
    }
  }
}
