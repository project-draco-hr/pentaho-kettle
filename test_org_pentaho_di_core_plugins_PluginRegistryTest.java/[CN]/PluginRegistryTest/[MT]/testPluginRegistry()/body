{
  PluginRegistry registry=PluginRegistry.getInstance();
  assertNotNull("Registry singleton was not found!",registry);
  Class<? extends PluginTypeInterface> pluginTypeClass=StepPluginType.class;
  Class<?> pluginClass=TableInputMeta.class;
  try {
    registry.getPluginType(pluginTypeClass);
  }
 catch (  KettlePluginException kpe) {
    registry.registerPluginType(pluginTypeClass);
  }
  try {
    registry.getPluginType(pluginTypeClass);
  }
 catch (  KettlePluginException kpe) {
    fail(pluginTypeClass.getName() + " expected in the PluginRegistry but was not found!");
  }
  PluginInterface plugin=registry.getPlugin(pluginTypeClass,pluginClass);
  Map<Class<?>,String> classMap=new HashMap<Class<?>,String>();
  PluginInterface tableInputPlugin=plugin;
  if (plugin == null) {
    classMap.put(pluginClass,"org.pentaho.di.trans.steps.tableinput.TableInputMeta");
    tableInputPlugin=new Plugin(new String[]{TABLE_INPUT_PLUGIN_ID},pluginTypeClass,StepMetaInterface.class,PLUGIN_INPUT_CATEGORY,TABLE_INPUT_PLUGIN_NAME,TABLE_INPUT_PLUGIN_DESCRIPTION,TABLE_INPUT_PLUGIN_IMAGE_FILE_NAME,false,true,classMap,new ArrayList<String>(),null,null,null,null,null);
    registry.registerPlugin(pluginTypeClass,tableInputPlugin);
    plugin=registry.getPlugin(pluginTypeClass,pluginClass);
  }
  PluginInterface verify=registry.getPlugin(pluginTypeClass,TABLE_INPUT_PLUGIN_ID);
  assertNotNull("A plugin was not found in the plugin registry",verify);
  assertEquals("A different plugin then expected was retrieved from the plugin registry",verify,tableInputPlugin);
  pluginClass=TableOutputMeta.class;
  plugin=registry.getPlugin(pluginTypeClass,pluginClass);
  PluginInterface tableOutputPlugin=plugin;
  if (plugin == null) {
    classMap=new HashMap<Class<?>,String>();
    classMap.put(TableOutputMeta.class,"org.pentaho.di.trans.steps.tableoutput.TableOutputMeta");
    tableOutputPlugin=new Plugin(new String[]{TABLE_OUTPUT_PLUGIN_ID},pluginTypeClass,StepMetaInterface.class,PLUGIN_OUTPUT_CATEGORY,TABLE_OUTPUT_PLUGIN_NAME,TABLE_OUTPUT_PLUGIN_DESCRIPTION,TABLE_OUTPUT_PLUGIN_IMAGE_FILE_NAME,false,true,classMap,new ArrayList<String>(),null,null,null,null,null);
    registry.registerPlugin(pluginTypeClass,tableOutputPlugin);
    plugin=registry.getPlugin(pluginTypeClass,pluginClass);
  }
  verify=registry.getPlugin(pluginTypeClass,TABLE_OUTPUT_PLUGIN_ID);
  assertNotNull("A plugin was not found in the plugin registry",verify);
  assertEquals("A different plugin then expected was retrieved from the plugin registry",verify,tableOutputPlugin);
  List<PluginInterface> inputPlugins=registry.getPluginsByCategory(pluginTypeClass,PLUGIN_INPUT_CATEGORY);
  assertEquals("Exactly one plugin expected in the step plugin input category",1,inputPlugins.size());
  assertEquals("The table input step was expected in the input category",inputPlugins.get(0),tableInputPlugin);
  assertTrue("Input plugins list should contain the table input step",inputPlugins.contains(tableInputPlugin));
  assertFalse("Input plugins list should not contain the table output step",inputPlugins.contains(tableOutputPlugin));
  List<PluginInterface> outputPlugins=registry.getPluginsByCategory(pluginTypeClass,PLUGIN_OUTPUT_CATEGORY);
  assertEquals("Exactly one plugin expected in the step plugin output category",1,outputPlugins.size());
  assertEquals("The table output step was expected in the otuput category",outputPlugins.get(0),tableOutputPlugin);
  assertTrue("Output plugins list should contain the table output step",outputPlugins.contains(tableOutputPlugin));
  assertFalse("Output plugins list should not contain the table input step",outputPlugins.contains(tableInputPlugin));
  List<String> categories=registry.getCategories(pluginTypeClass);
  assertEquals("Two categories expected in the step plugin registry",2,categories.size());
  assertTrue("The input category was expected in the categories list",categories.contains(PLUGIN_INPUT_CATEGORY));
  assertTrue("The output category was expected in the categories list",categories.contains(PLUGIN_OUTPUT_CATEGORY));
  Object object=registry.loadClass(tableInputPlugin,TableInputMeta.class);
  assertNotNull(object);
  assertTrue(object instanceof TableInputMeta);
  Object object2=registry.loadClass(tableOutputPlugin,TableOutputMeta.class);
  assertNotNull(object2);
  assertTrue(object2 instanceof TableOutputMeta);
  try {
    registry.loadClass(tableInputPlugin,String.class);
    fail("A String class type can't be used when loading a step class");
  }
 catch (  Exception e) {
  }
}
