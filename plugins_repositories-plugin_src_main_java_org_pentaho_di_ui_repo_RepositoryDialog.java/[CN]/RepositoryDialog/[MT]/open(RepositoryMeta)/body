{
  new BrowserFunction(browser,"close"){
    @Override public Object function(    Object[] arguments){
      browser.dispose();
      dialog.close();
      dialog.dispose();
      return true;
    }
  }
;
  new BrowserFunction(browser,"help"){
    @Override public Object function(    Object[] objects){
      HelpUtils.openHelpDialog(shell,BaseMessages.getString(PKG,"RepositoryDialog.Dialog.Tile"),HELP_URL,BaseMessages.getString(PKG,"RepositoryDialog.Dialog.Header"));
      return true;
    }
  }
;
  new BrowserFunction(browser,"getRepositories"){
    @Override public Object function(    Object[] objects){
      return controller.getRepositories();
    }
  }
;
  new BrowserFunction(browser,"getRepositoryTypes"){
    @Override public Object function(    Object[] objects){
      return controller.getPlugins();
    }
  }
;
  new BrowserFunction(browser,"deleteRepository"){
    @Override public Object function(    Object[] objects){
      return controller.deleteRepository((String)objects[0]);
    }
  }
;
  new BrowserFunction(browser,"selectLocation"){
    @Override public Object function(    Object[] objects){
      DirectoryDialog directoryDialog=new DirectoryDialog(shell);
      return directoryDialog.open();
    }
  }
;
  new BrowserFunction(browser,"createRepository"){
    @SuppressWarnings("unchecked") @Override public Object function(    Object[] objects){
      try {
        return controller.createRepository((String)objects[0],new ObjectMapper().readValue((String)objects[1],HashMap.class));
      }
 catch (      Exception e) {
        log.logError("Unable to load repository json object",e);
      }
      return false;
    }
  }
;
  new BrowserFunction(browser,"connectToRepository"){
    @Override public Object function(    Object[] objects){
      controller.connectToRepository();
      dialog.dispose();
      return true;
    }
  }
;
  new BrowserFunction(browser,"setDefaultRepository"){
    @Override public Object function(    Object[] objects){
      return controller.setDefaultRepository((String)objects[0]);
    }
  }
;
  new BrowserFunction(browser,"loginToRepository"){
    @Override public Object function(    Object[] objects){
      String username=(String)objects[0];
      String password=(String)objects[1];
      return controller.connectToRepository(username,password);
    }
  }
;
  new BrowserFunction(browser,"getDatabases"){
    @Override public Object function(    Object[] objects){
      return controller.getDatabases();
    }
  }
;
  new BrowserFunction(browser,"createNewConnection"){
    @Override public Object function(    Object[] objects){
      DatabaseDialog databaseDialog=new DatabaseDialog(shell,new DatabaseMeta());
      databaseDialog.open();
      DatabaseMeta databaseMeta=databaseDialog.getDatabaseMeta();
      if (databaseMeta != null) {
        controller.addDatabase(databaseMeta);
      }
      return true;
    }
  }
;
  new BrowserFunction(browser,"editDatabaseConnection"){
    @Override public Object function(    Object[] objects){
      DatabaseMeta databaseMeta=controller.getDatabase((String)objects[0]);
      DatabaseDialog databaseDialog=new DatabaseDialog(shell,databaseMeta);
      databaseDialog.open();
      controller.save();
      return databaseMeta.getName();
    }
  }
;
  new BrowserFunction(browser,"deleteDatabaseConnection"){
    @Override public Object function(    Object[] objects){
      controller.removeDatabase((String)objects[0]);
      return true;
    }
  }
;
  new BrowserFunction(browser,"reset"){
    @Override public Object function(    Object[] objects){
      controller.setCurrentRepository(null);
      return true;
    }
  }
;
  new BrowserFunction(browser,"getCurrentUser"){
    @Override public Object function(    Object[] objects){
      return controller.getCurrentUser();
    }
  }
;
  new BrowserFunction(browser,"getDefaultUrl"){
    @Override public Object function(    Object[] objects){
      return controller.getDefaultUrl();
    }
  }
;
  new BrowserFunction(browser,"loadRepository"){
    @Override public Object function(    Object[] objects){
      return controller.getRepository((String)objects[0]);
    }
  }
;
  controller.setCurrentRepository(repositoryMeta);
  while (!dialog.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
}
