{
  Database d=null;
  try {
    d=Database.open(new File(KettleVFS.getFilename(data.file)));
    Table t=d.getTable(meta.getRealTableName());
    Map rw;
    int rowCount=0;
    while ((rowCount++ < Long.MAX_VALUE) && ((rw=t.getNextRow()) != null)) {
      Row row=buildEmptyRow();
      for (int i=0; i < meta.getInputFields().length; i++) {
        Object obj=rw.get(meta.getInputFields()[i].getAttribut());
        Value v=row.getValue(i);
        v.setValue(String.valueOf(obj));
        if (meta.getInputFields()[i].isRepeated()) {
          if (v.isNull() && data.previousRow != null) {
            Value previous=data.previousRow.getValue(i);
            v.setValue(previous);
          }
        }
      }
      if (meta.includeFilename() && meta.getFilenameField() != null && meta.getFilenameField().length() > 0) {
        Value fn=new Value(meta.getFilenameField(),KettleVFS.getFilename(data.file));
        row.addValue(fn);
      }
      if (meta.includeRowNumber() && meta.getRowNumberField() != null && meta.getRowNumberField().length() > 0) {
        Value fn=new Value(meta.getRowNumberField(),data.rownr);
        row.addValue(fn);
      }
      data.previousRow=new Row(row);
      data.rownr++;
      if (log.isRowLevel())       logRowlevel(Messages.getString("AccessInput.Log.ReadRow",row.toString()));
      putRow(row);
    }
  }
 catch (  Exception e) {
    logError(Messages.getString("AccessInput.Log.UnableToOpenFile","" + data.filenr,data.file.toString(),e.toString()));
    stopAll();
    setErrors(1);
  }
 finally {
    try {
      if (d != null)       d.close();
    }
 catch (    Exception e) {
    }
  }
}
