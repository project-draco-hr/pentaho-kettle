{
  Object[] retval;
  if (data.files.size() > 0 && (data.dis.size() == 0 || data.fis.size() == 0)) {
    if (log.isBasic())     logBasic("Opening " + data.files.size() + " tmp-files...");
    try {
      for (int f=0; f < data.files.size() && !isStopped(); f++) {
        FileObject fileObject=data.files.get(f);
        String filename=KettleVFS.getFilename(fileObject);
        if (log.isDetailed())         logDetailed("Opening tmp-file: [" + filename + "]");
        InputStream fi=KettleVFS.getInputStream(fileObject);
        DataInputStream di;
        data.fis.add(fi);
        if (data.compressFiles) {
          di=getDataInputStream(new GZIPInputStream(new BufferedInputStream(fi)));
        }
 else {
          di=new DataInputStream(new BufferedInputStream(fi,50000));
        }
        data.dis.add(di);
        int buffersize=data.bufferSizes.get(f);
        if (log.isDetailed())         logDetailed("[" + filename + "] expecting "+ buffersize+ " rows...");
        if (buffersize > 0) {
          Object[] row=data.outputRowMeta.readData(di);
          data.rowbuffer.add(row);
          data.tempRows.add(new RowTempFile(row,f));
        }
      }
      Collections.sort(data.tempRows,data.comparator);
    }
 catch (    Exception e) {
      logError("Error reading back tmp-files : " + e.toString());
      logError(Const.getStackTracker(e));
    }
  }
  if (data.files.size() == 0) {
    if (data.getBufferIndex < data.buffer.size()) {
      retval=data.buffer.get(data.getBufferIndex);
      data.getBufferIndex++;
    }
 else {
      retval=null;
    }
  }
 else {
    if (data.rowbuffer.size() == 0) {
      retval=null;
    }
 else {
      if (log.isRowLevel()) {
        for (int i=0; i < data.rowbuffer.size() && !isStopped(); i++) {
          Object[] b=data.rowbuffer.get(i);
          logRowlevel("--BR#" + i + ": "+ data.outputRowMeta.getString(b));
        }
      }
      RowTempFile rowTempFile=data.tempRows.remove(0);
      retval=rowTempFile.row;
      int smallest=rowTempFile.fileNumber;
      FileObject file=data.files.get(smallest);
      DataInputStream di=data.dis.get(smallest);
      InputStream fi=data.fis.get(smallest);
      try {
        Object[] row2=data.outputRowMeta.readData(di);
        RowTempFile extra=new RowTempFile(row2,smallest);
        int index=Collections.binarySearch(data.tempRows,extra,data.comparator);
        if (index < 0) {
          data.tempRows.add(index * (-1) - 1,extra);
        }
 else {
          data.tempRows.add(index,extra);
        }
      }
 catch (      KettleFileException fe) {
        GZIPInputStream gzfi=(data.compressFiles) ? data.gzis.get(smallest) : null;
        try {
          di.close();
          fi.close();
          if (gzfi != null)           gzfi.close();
          file.delete();
        }
 catch (        IOException e) {
          logError("Unable to close/delete file #" + smallest + " --> "+ file.toString());
          setErrors(1);
          stopAll();
          return null;
        }
        data.files.remove(smallest);
        data.dis.remove(smallest);
        data.fis.remove(smallest);
        if (gzfi != null)         data.gzis.remove(smallest);
        for (        RowTempFile rtf : data.tempRows) {
          if (rtf.fileNumber > smallest)           rtf.fileNumber--;
        }
      }
catch (      SocketTimeoutException e) {
        throw new KettleValueException(e);
      }
    }
  }
  return retval;
}
