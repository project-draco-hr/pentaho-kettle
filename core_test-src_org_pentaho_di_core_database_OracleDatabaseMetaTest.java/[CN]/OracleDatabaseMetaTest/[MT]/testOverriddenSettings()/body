{
  assertEquals(1521,nativeMeta.getDefaultDatabasePort());
  assertFalse(nativeMeta.supportsAutoInc());
  assertFalse(nativeMeta.needsToLockAllTables());
  assertEquals("oracle.jdbc.driver.OracleDriver",nativeMeta.getDriverClass());
  assertEquals("sun.jdbc.odbc.JdbcOdbcDriver",odbcMeta.getDriverClass());
  assertEquals("jdbc:odbc:FOO",odbcMeta.getURL(null,null,"FOO"));
  assertEquals("jdbc:oracle:thin:@FOO:11:BAR",nativeMeta.getURL("FOO","11",":BAR"));
  assertEquals("jdbc:oracle:thin:@BAR:65534/FOO",nativeMeta.getURL("BAR","65534","/FOO"));
  assertEquals("jdbc:oracle:thin:@FOO",nativeMeta.getURL("","","FOO"));
  assertEquals("jdbc:oracle:thin:@FOO",nativeMeta.getURL(null,"-1","FOO"));
  assertEquals("jdbc:oracle:thin:@FOO",nativeMeta.getURL(null,null,"FOO"));
  assertEquals("jdbc:oracle:thin:@FOO:1234:BAR",nativeMeta.getURL("FOO","1234","BAR"));
  assertEquals("jdbc:oracle:oci:@BAR",ociMeta.getURL(null,null,"BAR"));
  assertEquals("jdbc:oracle:oci:@(description=(address=(host=FOO)(protocol=tcp)(port=9876))(connect_data=(sid=BAR)))",ociMeta.getURL("FOO","9876","BAR"));
  try {
    ociMeta.getURL(null,null,null);
    fail("Expected KettleDatabaseException here");
  }
 catch (  KettleDatabaseException expected) {
  }
  assertFalse(nativeMeta.supportsOptionsInURL());
  assertTrue(nativeMeta.supportsSequences());
  assertTrue(nativeMeta.supportsSequenceNoMaxValueOption());
  assertTrue(nativeMeta.useSchemaNameForTableList());
  assertTrue(nativeMeta.supportsSynonyms());
  String[] reservedWords=new String[]{"ACCESS","ADD","ALL","ALTER","AND","ANY","ARRAYLEN","AS","ASC","AUDIT","BETWEEN","BY","CHAR","CHECK","CLUSTER","COLUMN","COMMENT","COMPRESS","CONNECT","CREATE","CURRENT","DATE","DECIMAL","DEFAULT","DELETE","DESC","DISTINCT","DROP","ELSE","EXCLUSIVE","EXISTS","FILE","FLOAT","FOR","FROM","GRANT","GROUP","HAVING","IDENTIFIED","IMMEDIATE","IN","INCREMENT","INDEX","INITIAL","INSERT","INTEGER","INTERSECT","INTO","IS","LEVEL","LIKE","LOCK","LONG","MAXEXTENTS","MINUS","MODE","MODIFY","NOAUDIT","NOCOMPRESS","NOT","NOTFOUND","NOWAIT","NULL","NUMBER","OF","OFFLINE","ON","ONLINE","OPTION","OR","ORDER","PCTFREE","PRIOR","PRIVILEGES","PUBLIC","RAW","RENAME","RESOURCE","REVOKE","ROW","ROWID","ROWLABEL","ROWNUM","ROWS","SELECT","SESSION","SET","SHARE","SIZE","SMALLINT","SQLBUF","START","SUCCESSFUL","SYNONYM","SYSDATE","TABLE","THEN","TO","TRIGGER","UID","UNION","UNIQUE","UPDATE","USER","VALIDATE","VALUES","VARCHAR","VARCHAR2","VIEW","WHENEVER","WHERE","WITH"};
  assertArrayEquals(reservedWords,nativeMeta.getReservedWords());
  assertEquals("http://download.oracle.com/docs/cd/B19306_01/java.102/b14355/urls.htm#i1006362",nativeMeta.getExtraOptionsHelpText());
  assertArrayEquals(new String[]{"ojdbc14.jar","orai18n.jar"},nativeMeta.getUsedLibraries());
  assertTrue(nativeMeta.requiresCreateTablePrimaryKeyAppend());
  assertFalse(nativeMeta.supportsPreparedStatementMetadataRetrieval());
  String quoteTest1="FOO 'BAR' \r TEST \n";
  String quoteTest2="FOO 'BAR' \\r TEST \\n";
  assertEquals("'FOO ''BAR'' '||chr(10)||' TEST '||chr(13)||''",nativeMeta.quoteSQLString(quoteTest1));
  assertEquals("'FOO ''BAR'' \\r TEST \\n'",nativeMeta.quoteSQLString(quoteTest2));
  assertFalse(nativeMeta.releaseSavepoint());
  Variables v=new Variables();
  v.setVariable("FOOVARIABLE","FOOVALUE");
  DatabaseMeta dm=new DatabaseMeta();
  dm.setDatabaseInterface(nativeMeta);
  assertEquals("TABLESPACE FOOVALUE",nativeMeta.getTablespaceDDL(v,dm,"${FOOVARIABLE}"));
  assertFalse(nativeMeta.supportsErrorHandlingOnBatchUpdates());
  assertTrue(nativeMeta.supportsRepository());
  assertEquals(2000,nativeMeta.getMaxVARCHARLength());
}
