{
  boolean error_found=false;
  String error_message="";
  CheckResult cr;
  Context jscx;
  Scriptable jsscope;
  Script jsscript;
  jscx=ContextFactory.getGlobal().enterContext();
  jsscope=jscx.initStandardObjects(null,false);
  jscx.setOptimizationLevel(-1);
  String strActiveStartScriptName="";
  String strActiveEndScriptName="";
  String strActiveScript="";
  String strActiveStartScript="";
  String strActiveEndScript="";
  if (jsScripts.length > 0) {
    for (int i=0; i < jsScripts.length; i++) {
      if (jsScripts[i].isTransformScript()) {
        strActiveScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isStartScript()) {
        strActiveStartScriptName=jsScripts[i].getScriptName();
        strActiveStartScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isEndScript()) {
        strActiveEndScriptName=jsScripts[i].getScriptName();
        strActiveEndScript=jsScripts[i].getScript();
      }
    }
  }
  if (prev != null && strActiveScript.length() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.ConnectedStepOK",String.valueOf(prev.size())),stepinfo);
    remarks.add(cr);
    for (int i=0; i < getNumberOfJSScripts(); i++) {
      Scriptable jsR=Context.toObject(jsScripts[i].getScript(),jsscope);
      jsscope.put(jsScripts[i].getScriptName(),jsscope,jsR);
    }
    try {
      if (getAddClasses() != null) {
        for (int i=0; i < getAddClasses().length; i++) {
          Object jsOut=Context.javaToJS(getAddClasses()[i].getAddObject(),jsscope);
          ScriptableObject.putProperty(jsscope,getAddClasses()[i].getJSName(),jsOut);
        }
      }
    }
 catch (    Exception e) {
      error_message=("Couldn't add JavaClasses to Context! Error:");
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    try {
      Context.javaToJS(ScriptValuesAddedFunctions.class,jsscope);
      ((ScriptableObject)jsscope).defineFunctionProperties(ScriptValuesAddedFunctions.jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
    }
 catch (    Exception ex) {
      error_message="Couldn't add Default Functions! Error:" + Const.CR + ex.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      jsscope.put("SKIP_TRANSFORMATION",jsscope,Integer.valueOf(ScriptValuesMod.SKIP_TRANSFORMATION));
      jsscope.put("ABORT_TRANSFORMATION",jsscope,Integer.valueOf(ScriptValuesMod.ABORT_TRANSFORMATION));
      jsscope.put("ERROR_TRANSFORMATION",jsscope,Integer.valueOf(ScriptValuesMod.ERROR_TRANSFORMATION));
      jsscope.put("CONTINUE_TRANSFORMATION",jsscope,Integer.valueOf(ScriptValuesMod.CONTINUE_TRANSFORMATION));
    }
 catch (    Exception ex) {
      error_message="Couldn't add Transformation Constants! Error:" + Const.CR + ex.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      ScriptValuesModDummy dummyStep=new ScriptValuesModDummy(prev,transMeta.getStepFields(stepinfo));
      Scriptable jsvalue=Context.toObject(dummyStep,jsscope);
      jsscope.put("_step_",jsscope,jsvalue);
      Object[] row=new Object[prev.size()];
      Scriptable jsRowMeta=Context.toObject(prev,jsscope);
      jsscope.put("rowMeta",jsscope,jsRowMeta);
      for (int i=0; i < prev.size(); i++) {
        ValueMetaInterface valueMeta=prev.getValueMeta(i);
        Object valueData=null;
        if (valueMeta.isDate())         valueData=new Date();
        if (valueMeta.isString())         valueData="test value test value test value test value test value test value test value test value test value test value";
        if (valueMeta.isInteger())         valueData=Long.valueOf(0L);
        if (valueMeta.isNumber())         valueData=new Double(0.0);
        if (valueMeta.isBigNumber())         valueData=BigDecimal.ZERO;
        if (valueMeta.isBoolean())         valueData=Boolean.TRUE;
        if (valueMeta.isBinary())         valueData=new byte[]{0,1,2,3,4,5,6,7,8,9};
        row[i]=valueData;
        if (isCompatible()) {
          Value value=valueMeta.createOriginalValue(valueData);
          Scriptable jsarg=Context.toObject(value,jsscope);
          jsscope.put(valueMeta.getName(),jsscope,jsarg);
        }
 else {
          Scriptable jsarg=Context.toObject(valueData,jsscope);
          jsscope.put(valueMeta.getName(),jsscope,jsarg);
        }
      }
      Scriptable jsval=Context.toObject(Value.class,jsscope);
      jsscope.put("Value",jsscope,jsval);
      if (isCompatible()) {
        Row v2Row=RowMeta.createOriginalRow(prev,row);
        Scriptable jsV2Row=Context.toObject(v2Row,jsscope);
        jsscope.put("row",jsscope,jsV2Row);
      }
 else {
        Scriptable jsRow=Context.toObject(row,jsscope);
        jsscope.put("row",jsscope,jsRow);
      }
    }
 catch (    Exception ev) {
      error_message="Couldn't add Input fields to Script! Error:" + Const.CR + ev.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    try {
      if (strActiveStartScript != null && strActiveStartScript.length() > 0) {
        jscx.evaluateString(jsscope,strActiveStartScript,"trans_Start",1,null);
        error_message="Found Start Script. " + strActiveStartScriptName + " Processing OK";
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
        remarks.add(cr);
      }
    }
 catch (    Exception e) {
      error_message="Couldn't process Start Script! Error:" + Const.CR + e.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
    ;
    try {
      jsscript=jscx.compileString(strActiveScript,"script",1,null);
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.ScriptCompiledOK"),stepinfo);
      remarks.add(cr);
      try {
        jsscript.exec(jscx,jsscope);
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.ScriptCompiledOK2"),stepinfo);
        remarks.add(cr);
        if (name.length > 0) {
          StringBuffer message=new StringBuffer(BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.FailedToGetValues",String.valueOf(name.length)) + Const.CR + Const.CR);
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message.toString(),stepinfo);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,message.toString(),stepinfo);
          }
          remarks.add(cr);
        }
      }
 catch (      JavaScriptException jse) {
        Context.exit();
        error_message=BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.CouldNotExecuteScript") + Const.CR + jse.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
catch (      Exception e) {
        Context.exit();
        error_message=BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.CouldNotExecuteScript2") + Const.CR + e.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
      try {
        if (strActiveEndScript != null && strActiveEndScript.length() > 0) {
          jscx.evaluateString(jsscope,strActiveEndScript,"trans_End",1,null);
          error_message="Found End Script. " + strActiveEndScriptName + " Processing OK";
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
          remarks.add(cr);
        }
      }
 catch (      Exception e) {
        error_message="Couldn't process End Script! Error:" + Const.CR + e.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
      ;
    }
 catch (    Exception e) {
      Context.exit();
      error_message=BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.CouldNotCompileScript") + Const.CR + e.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
  }
 else {
    Context.exit();
    error_message=BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.CouldNotGetFieldsFromPreviousStep");
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.ConnectedStepOK2"),stepinfo);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"ScriptValuesMetaMod.CheckResult.NoInputReceived"),stepinfo);
    remarks.add(cr);
  }
}
