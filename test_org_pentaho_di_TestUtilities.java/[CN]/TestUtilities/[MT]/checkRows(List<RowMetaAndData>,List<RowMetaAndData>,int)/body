{
  int idx=1;
  if (rows1.size() != rows2.size()) {
    throw new TestFailedException("Number of rows is not the same: " + rows1.size() + " and "+ rows2.size());
  }
  Iterator<RowMetaAndData> itrRows1=rows1.iterator();
  Iterator<RowMetaAndData> itrRows2=rows2.iterator();
  while (itrRows1.hasNext() && itrRows2.hasNext()) {
    RowMetaAndData rowMetaAndData1=itrRows1.next();
    RowMetaAndData rowMetaAndData2=itrRows2.next();
    RowMetaInterface rowMetaInterface1=rowMetaAndData1.getRowMeta();
    Object[] rowObject1=rowMetaAndData1.getData();
    Object[] rowObject2=rowMetaAndData2.getData();
    if (rowMetaAndData1.size() != rowMetaAndData2.size()) {
      throw new TestFailedException("row number " + idx + " is not equal");
    }
    int[] fields=new int[rowMetaInterface1.size()];
    for (int ydx=0; ydx < rowMetaInterface1.size(); ydx++) {
      fields[ydx]=ydx;
    }
    if (fileNameColumn > 0) {
      try {
        rowObject1[fileNameColumn]=rowObject2[fileNameColumn];
        if (rowMetaAndData1.getRowMeta().compare(rowObject1,rowObject2,fields) != 0) {
          throw new TestFailedException("row nr " + idx + " is not equal");
        }
      }
 catch (      KettleValueException e) {
        throw new TestFailedException("row nr " + idx + " is not equal");
      }
    }
    idx++;
  }
}
