{
  String urlToUse=constructUrl(service);
  URL server;
  StringBuffer result=new StringBuffer();
  try {
    String beforeProxyHost=System.getProperty("http.proxyHost");
    String beforeProxyPort=System.getProperty("http.proxyPort");
    String beforeNonProxyHosts=System.getProperty("http.nonProxyHosts");
    BufferedReader input=null;
    try {
      if (log.isBasic())       log.logBasic(BaseMessages.getString(PKG,"SlaveServer.DEBUG_ConnectingTo",urlToUse));
      if (proxyHostname != null) {
        System.setProperty("http.proxyHost",environmentSubstitute(proxyHostname));
        System.setProperty("http.proxyPort",environmentSubstitute(proxyPort));
        if (nonProxyHosts != null)         System.setProperty("http.nonProxyHosts",environmentSubstitute(nonProxyHosts));
      }
      if (username != null && username.length() > 0) {
        Authenticator.setDefault(new Authenticator(){
          protected PasswordAuthentication getPasswordAuthentication(){
            return new PasswordAuthentication(environmentSubstitute(username),password != null ? environmentSubstitute(password).toCharArray() : new char[]{});
          }
        }
);
      }
      server=new URL(urlToUse);
      URLConnection connection=server.openConnection();
      log.logDetailed(BaseMessages.getString(PKG,"SlaveServer.StartReadingReply"));
      InputStream inputStream=new BufferedInputStream(connection.getInputStream(),1000);
      input=new BufferedReader(new InputStreamReader(inputStream));
      long bytesRead=0L;
      String line;
      while ((line=input.readLine()) != null) {
        result.append(line).append(Const.CR);
        bytesRead+=line.length();
      }
      if (log.isBasic())       log.logBasic(BaseMessages.getString(PKG,"SlaveServer.FinishedReadingResponse"),bytesRead);
      if (log.isDebug())       log.logDebug("response from the webserver: {0}",result);
    }
 catch (    MalformedURLException e) {
      log.logError(BaseMessages.getString(PKG,"SlaveServer.UrlIsInvalid",urlToUse,e.getMessage()));
      log.logError(Const.getStackTracker(e));
    }
catch (    IOException e) {
      log.logError(BaseMessages.getString(PKG,"SlaveServer.CannotSaveDueToIOError",e.getMessage()));
      log.logError(Const.getStackTracker(e));
    }
catch (    Exception e) {
      log.logError(BaseMessages.getString(PKG,"SlaveServer.ErrorReceivingFile",e.getMessage()));
      log.logError(Const.getStackTracker(e));
    }
 finally {
      try {
        if (input != null)         input.close();
      }
 catch (      Exception e) {
        log.logError(BaseMessages.getString(PKG,"SlaveServer.CannotCloseStream",e.getMessage()));
        log.logError(Const.getStackTracker(e));
      }
    }
    System.setProperty("http.proxyHost",Const.NVL(beforeProxyHost,""));
    System.setProperty("http.proxyPort",Const.NVL(beforeProxyPort,""));
    System.setProperty("http.nonProxyHosts",Const.NVL(beforeNonProxyHosts,""));
    return result.toString();
  }
 catch (  Exception e) {
    throw new Exception(BaseMessages.getString(PKG,"SlaveServer.CannotContactURLForSecurityInformation",urlToUse),e);
  }
}
