{
  this.log=log;
  try {
    this.prop=System.getProperties();
  }
 catch (  SecurityException s) {
    this.prop=new Properties();
  }
  this.port=port;
  this.server=server;
  this.username=username;
  this.password=password;
  this.usessl=usessl;
  this.protocol=protocol;
  this.nrSavedMessages=0;
  this.nrDeletedMessages=0;
  this.nrMovedMessages=0;
  this.nrSavedAttachedFiles=0;
  this.messagenr=-1;
  this.useproxy=useproxy;
  this.proxyusername=proxyusername;
  try {
    if (useproxy) {
      this.prop.put("mail.imap.sasl.enable","true");
      this.prop.put("mail.imap.sasl.authorizationid",proxyusername);
    }
    if (protocol == MailConnectionMeta.PROTOCOL_POP3) {
      this.prop.setProperty("mail.pop3s.rsetbeforequit","true");
      this.prop.setProperty("mail.pop3.rsetbeforequit","true");
    }
 else     if (protocol == MailConnectionMeta.PROTOCOL_MBOX) {
      this.prop.setProperty("mstor.mbox.metadataStrategy","none");
      this.prop.setProperty("mstor.cache.disabled","true");
    }
    String protocolString=(protocol == MailConnectionMeta.PROTOCOL_POP3) ? "pop3" : protocol == MailConnectionMeta.PROTOCOL_MBOX ? "mstor" : "imap";
    if (usessl && protocol != MailConnectionMeta.PROTOCOL_MBOX) {
      this.prop.setProperty("mail." + protocolString + ".socketFactory.class","javax.net.ssl.SSLSocketFactory");
      this.prop.setProperty("mail." + protocolString + ".socketFactory.fallback","false");
      this.prop.setProperty("mail." + protocolString + ".port","" + port);
      this.prop.setProperty("mail." + protocolString + ".socketFactory.port","" + port);
      this.session=Session.getInstance(this.prop,null);
      this.session.setDebug(log.isDebug());
      if (this.port == -1) {
        this.port=((protocol == MailConnectionMeta.PROTOCOL_POP3) ? MailConnectionMeta.DEFAULT_SSL_POP3_PORT : MailConnectionMeta.DEFAULT_SSL_IMAP_PORT);
      }
      URLName url=new URLName(protocolString,server,port,"",username,password);
      this.store=(protocol == MailConnectionMeta.PROTOCOL_POP3) ? new POP3SSLStore(this.session,url) : new IMAPSSLStore(this.session,url);
      url=null;
    }
 else {
      this.session=Session.getInstance(this.prop,null);
      this.session.setDebug(log.isDebug());
      if (protocol == MailConnectionMeta.PROTOCOL_MBOX) {
        this.store=this.session.getStore(new URLName(protocolString + ":" + server));
      }
 else {
        this.store=this.session.getStore(protocolString);
      }
    }
    if (log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"JobGetMailsFromPOP.NewConnectionDefined"));
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.NewConnection",Const.NVL(this.server,"")),e);
  }
}
