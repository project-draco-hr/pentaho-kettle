{
  List<String> attributes=Arrays.asList("updateLookup","updateStream","update","useAuthentication","Host","userName","password","port","dnFieldName","failIfNotExist","searchBase","multiValuedSeparator","operationType","oldDnFieldName","newDnFieldName","deleteRDN");
  Map<String,String> getterMap=new HashMap<String,String>(){
{
      put("updateLookup","getUpdateLookup");
      put("updateStream","getUpdateStream");
      put("update","getUpdate");
      put("useAuthentication","getUseAuthentication");
      put("Host","getHost");
      put("userName","getUserName");
      put("password","getPassword");
      put("port","getPort");
      put("dnFieldName","getDnField");
      put("failIfNotExist","isFailIfNotExist");
      put("searchBase","getSearchBaseDN");
      put("multiValuedSeparator","getMultiValuedSeparator");
      put("operationType","getOperationType");
      put("oldDnFieldName","getOldDnFieldName");
      put("newDnFieldName","getNewDnFieldName");
      put("deleteRDN","isDeleteRDN");
    }
  }
;
  Map<String,String> setterMap=new HashMap<String,String>(){
{
      put("updateLookup","setUpdateLookup");
      put("updateStream","setUpdateStream");
      put("update","setUpdate");
      put("useAuthentication","setUseAuthentication");
      put("Host","setHost");
      put("userName","setUserName");
      put("password","setPassword");
      put("port","setPort");
      put("dnFieldName","setDnField");
      put("failIfNotExist","setFailIfNotExist");
      put("searchBase","setSearchBaseDN");
      put("multiValuedSeparator","setMultiValuedSeparator");
      put("operationType","setOperationType");
      put("oldDnFieldName","setOldDnFieldName");
      put("newDnFieldName","setNewDnFieldName");
      put("deleteRDN","setDeleteRDN");
    }
  }
;
  FieldLoadSaveValidator<String[]> stringArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new StringLoadSaveValidator(),3);
  FieldLoadSaveValidator<Boolean[]> booleanArrayLoadSaveValidator=new ArrayLoadSaveValidator<Boolean>(new BooleanLoadSaveValidator(),3);
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  attrValidatorMap.put("update",booleanArrayLoadSaveValidator);
  attrValidatorMap.put("updateLookup",stringArrayLoadSaveValidator);
  attrValidatorMap.put("updateStream",stringArrayLoadSaveValidator);
  attrValidatorMap.put("operationType",new IntLoadSaveValidator(5));
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  loadSaveTester=new LoadSaveTester(LDAPOutputMeta.class,attributes,getterMap,setterMap,attrValidatorMap,typeValidatorMap);
  PluginRegistry.addPluginType(TwoWayPasswordEncoderPluginType.getInstance());
  PluginRegistry.init();
  String passwordEncoderPluginID=Const.NVL(EnvUtil.getSystemProperty(Const.KETTLE_PASSWORD_ENCODER_PLUGIN),"Kettle");
  Encr.init(passwordEncoderPluginID);
}
