{
  try {
    servername=rep.getStepAttributeString(id_step,"servername");
    username=rep.getStepAttributeString(id_step,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"password"));
    usessl=rep.getStepAttributeBoolean(id_step,"usessl");
    int intSSLPort=(int)rep.getStepAttributeInteger(id_step,"sslport");
    sslport=rep.getStepAttributeString(id_step,"sslport");
    if (intSSLPort > 0 && Const.isEmpty(sslport)) {
      sslport=Integer.toString(intSSLPort);
    }
    retrievemails=(int)rep.getStepAttributeInteger(id_step,"retrievemails");
    firstmails=rep.getStepAttributeString(id_step,"firstmails");
    delete=rep.getStepAttributeBoolean(id_step,"delete");
    protocol=Const.NVL(rep.getStepAttributeString(id_step,"protocol"),MailConnectionMeta.PROTOCOL_STRING_POP3);
    valueimaplist=MailConnectionMeta.getValueListImapListByCode(Const.NVL(rep.getStepAttributeString(id_step,"valueimaplist"),""));
    imapfirstmails=rep.getStepAttributeString(id_step,"imapfirstmails");
    imapfolder=rep.getStepAttributeString(id_step,"imapfolder");
    senderSearch=rep.getStepAttributeString(id_step,"sendersearch");
    notTermSenderSearch=rep.getStepAttributeBoolean(id_step,"nottermsendersearch");
    recipientSearch=rep.getStepAttributeString(id_step,"recipientsearch");
    notTermRecipientSearch=rep.getStepAttributeBoolean(id_step,"notTermRecipientSearch");
    subjectSearch=rep.getStepAttributeString(id_step,"subjectsearch");
    notTermSubjectSearch=rep.getStepAttributeBoolean(id_step,"nottermsubjectsearch");
    conditionReceivedDate=MailConnectionMeta.getConditionByCode(Const.NVL(rep.getStepAttributeString(id_step,"conditionreceiveddate"),""));
    notTermReceivedDateSearch=rep.getStepAttributeBoolean(id_step,"nottermreceiveddatesearch");
    receivedDate1=rep.getStepAttributeString(id_step,"receiveddate1");
    receivedDate2=rep.getStepAttributeString(id_step,"receiveddate2");
    includesubfolders=rep.getStepAttributeBoolean(id_step,"includesubfolders");
    useproxy=rep.getStepAttributeBoolean(id_step,"useproxy");
    proxyusername=rep.getStepAttributeString(id_step,"proxyusername");
    usedynamicfolder=rep.getStepAttributeBoolean(id_step,"usedynamicfolder");
    folderfield=rep.getStepAttributeString(id_step,"folderfield");
    rowlimit=rep.getStepAttributeString(id_step,"rowlimit");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    useBatch=rep.getStepAttributeBoolean(id_step,Tags.USE_BATCH);
    try {
      batchSize=(int)rep.getStepAttributeInteger(id_step,Tags.BATCH_SIZE);
    }
 catch (    Exception e) {
      batchSize=DEFAULT_BATCH_SIZE;
    }
    start=rep.getStepAttributeString(id_step,Tags.START_MSG);
    end=rep.getStepAttributeString(id_step,Tags.END_MSG);
    stopOnError=rep.getStepAttributeBoolean(id_step,Tags.STOP_ON_ERROR);
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      MailInputField field=new MailInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setColumn(MailInputField.getColumnByCode(rep.getStepAttributeString(id_step,i,"field_column")));
      inputFields[i]=field;
    }
  }
 catch (  Exception e) {
    throw new KettleException("Erreur inattendue",e);
  }
}
