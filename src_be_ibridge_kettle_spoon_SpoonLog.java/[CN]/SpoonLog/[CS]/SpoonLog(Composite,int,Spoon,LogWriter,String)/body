{
  super(parent,style);
  shell=parent.getShell();
  spoon=sp;
  log=l;
  trans=null;
  display=shell.getDisplay();
  running=false;
  preview=false;
  lastUpdateView=0L;
  lastUpdateLog=0L;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  setLayout(formLayout);
  setVisible(true);
  spoon.props.setLook(this);
  SashForm sash=new SashForm(this,SWT.VERTICAL);
  spoon.props.setLook(sash);
  sash.setLayout(new FillLayout());
  colinf=new ColumnInfo[]{new ColumnInfo(Messages.getString("SpoonLog.Column.Stepname"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Copynr"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Read"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Written"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Input"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Output"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Updated"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Errors"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Active"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Time"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Speed"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.PriorityBufferSizes"),ColumnInfo.COLUMN_TYPE_TEXT,false,true),new ColumnInfo(Messages.getString("SpoonLog.Column.Sleeps"),ColumnInfo.COLUMN_TYPE_TEXT,false,true)};
  colinf[1].setAllignement(SWT.RIGHT);
  colinf[2].setAllignement(SWT.RIGHT);
  colinf[3].setAllignement(SWT.RIGHT);
  colinf[4].setAllignement(SWT.RIGHT);
  colinf[5].setAllignement(SWT.RIGHT);
  colinf[6].setAllignement(SWT.RIGHT);
  colinf[7].setAllignement(SWT.RIGHT);
  colinf[8].setAllignement(SWT.RIGHT);
  colinf[9].setAllignement(SWT.RIGHT);
  colinf[10].setAllignement(SWT.RIGHT);
  colinf[11].setAllignement(SWT.RIGHT);
  colinf[12].setAllignement(SWT.RIGHT);
  wFields=new TableView(sash,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,1,true,null,spoon.props);
  wText=new Text(sash,SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL| SWT.READ_ONLY);
  spoon.props.setLook(wText);
  wText.setVisible(true);
  wStart=new Button(this,SWT.PUSH);
  wStart.setText(START_TEXT);
  wPreview=new Button(this,SWT.PUSH);
  wPreview.setText(Messages.getString("SpoonLog.Button.Preview"));
  wError=new Button(this,SWT.PUSH);
  wError.setText(Messages.getString("SpoonLog.Button.ShowErrorLines"));
  wClear=new Button(this,SWT.PUSH);
  wClear.setText(Messages.getString("SpoonLog.Button.ClearLog"));
  wLog=new Button(this,SWT.PUSH);
  wLog.setText(Messages.getString("SpoonLog.Button.LogSettings"));
  wlOnlyActive=new Label(this,SWT.RIGHT);
  wlOnlyActive.setText(Messages.getString("SpoonLog.Button.ShowOnlyActiveSteps"));
  wOnlyActive=new Button(this,SWT.CHECK);
  fdStart=new FormData();
  fdPreview=new FormData();
  fdError=new FormData();
  fdClear=new FormData();
  fdLog=new FormData();
  fdStart.left=new FormAttachment(15,0);
  fdStart.bottom=new FormAttachment(100,0);
  wStart.setLayoutData(fdStart);
  fdPreview.left=new FormAttachment(wStart,10);
  fdPreview.bottom=new FormAttachment(100,0);
  wPreview.setLayoutData(fdPreview);
  fdError.left=new FormAttachment(wPreview,10);
  fdError.bottom=new FormAttachment(100,0);
  wError.setLayoutData(fdError);
  fdClear.left=new FormAttachment(wError,10);
  fdClear.bottom=new FormAttachment(100,0);
  wClear.setLayoutData(fdClear);
  fdLog.left=new FormAttachment(wClear,10);
  fdLog.bottom=new FormAttachment(100,0);
  wLog.setLayoutData(fdLog);
  spoon.props.setLook(wlOnlyActive);
  fdlOnlyActive=new FormData();
  fdlOnlyActive.left=new FormAttachment(wLog,10);
  fdlOnlyActive.top=new FormAttachment(wLog,0,SWT.CENTER);
  wlOnlyActive.setLayoutData(fdlOnlyActive);
  spoon.props.setLook(wOnlyActive);
  fdOnlyActive=new FormData();
  fdOnlyActive.left=new FormAttachment(wlOnlyActive,Const.MARGIN);
  fdOnlyActive.top=new FormAttachment(wLog,0,SWT.CENTER);
  wOnlyActive.setLayoutData(fdOnlyActive);
  wOnlyActive.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      spoon.props.setOnlyActiveSteps(wOnlyActive.getSelection());
    }
  }
);
  wOnlyActive.setSelection(spoon.props.getOnlyActiveSteps());
  fdText=new FormData();
  fdText.left=new FormAttachment(0,0);
  fdText.top=new FormAttachment(0,0);
  fdText.right=new FormAttachment(100,0);
  fdText.bottom=new FormAttachment(100,0);
  wText.setLayoutData(fdText);
  fdSash=new FormData();
  fdSash.left=new FormAttachment(0,0);
  fdSash.top=new FormAttachment(0,0);
  fdSash.right=new FormAttachment(100,0);
  fdSash.bottom=new FormAttachment(wStart,-5);
  sash.setLayoutData(fdSash);
  pack();
  try {
    in=log.getFileInputStream();
  }
 catch (  Exception e) {
    log.logError(Spoon.APP_NAME,Messages.getString("SpoonLog.Log.CouldNotLinkInputToOutputPipe"));
  }
  lsError=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      showErrors();
    }
  }
;
  final Timer tim=new Timer();
  TimerTask timtask=new TimerTask(){
    public void run(){
      if (display != null && !display.isDisposed())       display.asyncExec(new Runnable(){
        public void run(){
          checkErrors();
          readLog();
          refreshView();
        }
      }
);
    }
  }
;
  tim.schedule(timtask,0L,REFRESH_TIME);
  lsStart=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startstop();
    }
  }
;
  lsPreview=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview();
    }
  }
;
  lsClear=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clearLog();
    }
  }
;
  lsLog=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setLog();
    }
  }
;
  wError.addSelectionListener(lsError);
  wStart.addSelectionListener(lsStart);
  wPreview.addSelectionListener(lsPreview);
  wClear.addSelectionListener(lsClear);
  wLog.addSelectionListener(lsLog);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      tim.cancel();
    }
  }
);
}
