{
  if (!running) {
    if (spoon.getTransMeta().hasChanged()) {
      if (spoon.props.getAutoSave()) {
        spoon.saveFile();
      }
 else {
        MessageDialogWithToggle md=new MessageDialogWithToggle(shell,Messages.getString("SpoonLog.Dialog.FileHasChanged.Title"),null,Messages.getString("SpoonLog.Dialog.FileHasChanged1.Message") + Const.CR + Messages.getString("SpoonLog.Dialog.FileHasChanged2.Message")+ Const.CR,MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No")},0,Messages.getString("SpoonLog.Dialog.Option.AutoSaveTransformation"),spoon.props.getAutoSave());
        int answer=md.open();
        if ((answer & 0xFF) == 0) {
          spoon.saveFile();
        }
        spoon.props.setAutoSave(md.getToggleState());
      }
    }
    if (((spoon.getTransMeta().getName() != null && spoon.rep != null) || (spoon.getTransMeta().getFilename() != null && spoon.rep == null)) && !spoon.getTransMeta().hasChanged()) {
      if (trans == null || (trans != null && trans.isFinished())) {
        try {
          trans=new Trans(log,spoon.getTransMeta().getFilename(),spoon.getTransMeta().getName(),new String[]{spoon.getTransMeta().getFilename()});
          trans.setReplayDate(executionConfiguration.getReplayDate());
          trans.open(spoon.rep,spoon.getTransMeta().getName(),spoon.getTransMeta().getDirectory().getPath(),spoon.getTransMeta().getFilename());
          trans.setMonitored(true);
          log.logBasic(toString(),Messages.getString("SpoonLog.Log.TransformationOpened"));
        }
 catch (        KettleException e) {
          trans=null;
          new ErrorDialog(shell,Messages.getString("SpoonLog.Dialog.ErrorOpeningTransformation.Title"),Messages.getString("SpoonLog.Dialog.ErrorOpeningTransformation.Message"),e);
        }
        readLog();
        if (trans != null) {
          final String args[];
          Row arguments=executionConfiguration.getArguments();
          if (arguments != null) {
            args=convertArguments(arguments);
          }
 else {
            args=null;
          }
          setVariables(executionConfiguration);
          log.logMinimal(Spoon.APP_NAME,Messages.getString("SpoonLog.Log.LaunchingTransformation") + trans.getTransMeta().getName() + "]...");
          trans.setSafeModeEnabled(wSafeMode.getSelection());
          final Thread parentThread=Thread.currentThread();
          display.asyncExec(new Runnable(){
            public void run(){
              prepareTrans(parentThread,args);
            }
          }
);
          log.logMinimal(Spoon.APP_NAME,Messages.getString("SpoonLog.Log.StartedExecutionOfTransformation"));
          wStart.setEnabled(false);
          wStop.setEnabled(true);
          readLog();
        }
      }
 else {
        MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        m.setText(Messages.getString("SpoonLog.Dialog.DoNoStartTransformationTwice.Title"));
        m.setMessage(Messages.getString("SpoonLog.Dialog.DoNoStartTransformationTwice.Message"));
        m.open();
      }
    }
 else {
      if (spoon.getTransMeta().hasChanged()) {
        MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        m.setText(Messages.getString("SpoonLog.Dialog.SaveTransformationBeforeRunning.Title"));
        m.setMessage(Messages.getString("SpoonLog.Dialog.SaveTransformationBeforeRunning.Message"));
        m.open();
      }
 else       if (spoon.rep != null && spoon.getTransMeta().getName() == null) {
        MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        m.setText(Messages.getString("SpoonLog.Dialog.GiveTransformationANameBeforeRunning.Title"));
        m.setMessage(Messages.getString("SpoonLog.Dialog.GiveTransformationANameBeforeRunning.Message"));
        m.open();
      }
 else {
        MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        m.setText(Messages.getString("SpoonLog.Dialog.SaveTransformationBeforeRunning2.Title"));
        m.setMessage(Messages.getString("SpoonLog.Dialog.SaveTransformationBeforeRunning2.Message"));
        m.open();
      }
    }
  }
}
