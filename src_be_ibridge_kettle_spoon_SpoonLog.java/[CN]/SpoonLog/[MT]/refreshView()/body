{
  boolean insert=true;
  float lapsed;
  if (wFields.isDisposed())   return;
  if (refresh_busy)   return;
  refresh_busy=true;
  Table table=wFields.table;
  boolean doPreview=trans != null && trans.previewComplete() && preview;
  long time=new Date().getTime();
  long msSinceLastUpdate=time - lastUpdateView;
  if ((trans != null && msSinceLastUpdate > UPDATE_TIME_VIEW) || doPreview) {
    lastUpdateView=time;
    int nrSteps=trans.nrSteps();
    if (wOnlyActive.getSelection())     nrSteps=trans.nrActiveSteps();
    if (table.getItemCount() != nrSteps) {
      table.removeAll();
    }
 else {
      insert=false;
    }
    if (nrSteps == 0) {
      if (table.getItemCount() == 0)       new TableItem(table,SWT.NONE);
    }
    int nr=0;
    for (int i=0; i < trans.nrSteps(); i++) {
      BaseStep baseStep=trans.getRunThread(i);
      if ((baseStep.isAlive() && wOnlyActive.getSelection()) || baseStep.getStatus() != StepDataInterface.STATUS_EMPTY) {
        TableItem ti;
        if (insert) {
          ti=new TableItem(table,SWT.NONE);
        }
 else {
          ti=table.getItem(nr);
        }
        long in_proc=baseStep.linesInput + baseStep.linesRead;
        long out_proc=baseStep.linesOutput + baseStep.linesWritten + baseStep.linesUpdated;
        lapsed=((float)baseStep.getRuntime()) / 1000;
        double in_speed=0;
        double out_speed=0;
        if (lapsed != 0) {
          in_speed=Math.floor(10 * (in_proc / lapsed)) / 10;
          out_speed=Math.floor(10 * (out_proc / lapsed)) / 10;
        }
        String fields[]=new String[colinf.length + 1];
        fields[1]=baseStep.getStepname();
        fields[2]="" + baseStep.getCopy();
        fields[3]="" + baseStep.linesRead;
        fields[4]="" + baseStep.linesWritten;
        fields[5]="" + baseStep.linesInput;
        fields[6]="" + baseStep.linesOutput;
        fields[7]="" + baseStep.linesUpdated;
        fields[8]="" + baseStep.getErrors();
        fields[9]="" + baseStep.getStatusDescription();
        fields[10]="" + Math.floor((lapsed * 10) + 0.5) / 10;
        fields[11]=lapsed == 0 ? "-" : "" + (in_speed > out_speed ? in_speed : out_speed);
        fields[12]=baseStep.isAlive() ? "" + baseStep.getPriority() + "/"+ baseStep.rowsetInputSize()+ "/"+ baseStep.rowsetOutputSize() : "-";
        fields[13]="" + baseStep.getNrGetSleeps() + "/"+ baseStep.getNrPutSleeps();
        for (int f=1; f < fields.length; f++) {
          if (!fields[f].equalsIgnoreCase(ti.getText(f))) {
            ti.setText(f,fields[f]);
          }
        }
        if (baseStep.getErrors() > 0) {
          ti.setBackground(GUIResource.getInstance().getColorRed());
        }
 else {
          ti.setBackground(GUIResource.getInstance().getColorWhite());
        }
        nr++;
      }
    }
    wFields.setRowNums();
    wFields.optWidth(true);
  }
 else {
    if (table.getItemCount() == 0)     new TableItem(table,SWT.NONE);
  }
  if (doPreview) {
    trans.stopAll();
    showPreview();
  }
  if (trans != null && trans.isFinished() && running) {
    log.logMinimal(Spoon.APP_NAME,Messages.getString("SpoonLog.Log.TransformationHasFinished"));
    wStart.setText(START_TEXT);
    running=false;
    try {
      trans.endProcessing("end");
      spoonHistoryRefresher.markRefreshNeeded();
    }
 catch (    KettleException e) {
      new ErrorDialog(shell,spoon.props,Messages.getString("SpoonLog.Dialog.ErrorWritingLogRecord.Title"),Messages.getString("SpoonLog.Dialog.ErrorWritingLogRecord.Message"),e);
    }
  }
  refresh_busy=false;
}
