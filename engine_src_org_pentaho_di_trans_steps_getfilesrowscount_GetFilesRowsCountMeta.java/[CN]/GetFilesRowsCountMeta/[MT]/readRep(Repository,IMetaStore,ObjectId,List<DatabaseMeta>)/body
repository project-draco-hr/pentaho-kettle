{
  try {
    includeFilesCount=rep.getStepAttributeBoolean(id_step,"files_count");
    filesCountFieldName=rep.getStepAttributeString(id_step,"files_count_fieldname");
    rowsCountFieldName=rep.getStepAttributeString(id_step,"rows_count_fieldname");
    RowSeparator_format=scrubOldRowSeparator(rep.getStepAttributeString(id_step,"rowseparator_format"));
    RowSeparator=rep.getStepAttributeString(id_step,"row_separator");
    smartCount=rep.getStepAttributeBoolean(id_step,"smartCount");
    String addresult=rep.getStepAttributeString(id_step,"isaddresult");
    if (Const.isEmpty(addresult))     isaddresult=true;
 else     isaddresult=rep.getStepAttributeBoolean(id_step,"isaddresult");
    filefield=rep.getStepAttributeBoolean(id_step,"filefield");
    outputFilenameField=rep.getStepAttributeString(id_step,"filename_Field");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    allocate(nrFiles);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i]))       fileRequired[i]=NO;
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i]))       includeSubFolders[i]=NO;
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"GetFilesRowsCountMeta.Exception.ErrorReadingRepository"),e);
  }
}
