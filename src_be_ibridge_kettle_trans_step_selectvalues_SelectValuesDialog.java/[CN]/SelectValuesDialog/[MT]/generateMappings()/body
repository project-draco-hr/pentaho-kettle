{
  if ((wRemove.getItemCount() > 0) || (wMeta.getItemCount() > 0)) {
    for (int i=0; i < wRemove.getItemCount(); i++) {
      String[] item=wRemove.getItem(i);
      for (      String col : item) {
        if (col.length() > 0) {
          MessageDialog.openError(shell,Messages.getString("SelectValuesDialog.DoMapping.NoDeletOrMetaTitle"),Messages.getString("SelectValuesDialog.DoMapping.NoDeletOrMeta"));
          return;
        }
      }
    }
    for (int i=0; i < wMeta.getItemCount(); i++) {
      String[] item=wMeta.getItem(i);
      for (      String col : item) {
        if (col.length() > 0) {
          MessageDialog.openError(shell,Messages.getString("SelectValuesDialog.DoMapping.NoDeletOrMetaTitle"),Messages.getString("SelectValuesDialog.DoMapping.NoDeletOrMeta"));
          return;
        }
      }
    }
  }
  Row prevFields=null;
  Row nextStepRequiredFields=null;
  StepMeta stepMeta=new StepMeta(stepname,input);
  StepMeta[] nextSteps=transMeta.getNextSteps(stepMeta);
  if (nextSteps.length == 0 || nextSteps.length > 1) {
    MessageDialog.openError(shell,Messages.getString("SelectValuesDialog.DoMapping.NoNextStepTitle"),Messages.getString("SelectValuesDialog.DoMapping.NoNextStep"));
    return;
  }
  StepMeta outputStepMeta=nextSteps[0];
  StepMetaInterface stepMetaInterface=outputStepMeta.getStepMetaInterface();
  try {
    prevFields=transMeta.getPrevStepFields(stepname);
    nextStepRequiredFields=stepMetaInterface.getRequiredFields();
  }
 catch (  KettleException e) {
    throw new RuntimeException(e);
  }
  String[] inputNames=new String[prevFields.size()];
  for (int i=0; i < prevFields.size(); i++) {
    inputNames[i]=prevFields.getValue(i).getName();
  }
  String[] outputNames=new String[nextStepRequiredFields.size()];
  for (int i=0; i < nextStepRequiredFields.size(); i++) {
    outputNames[i]=nextStepRequiredFields.getValue(i).getName();
  }
  String[] selectName=input.getSelectName();
  String[] selectRename=input.getSelectRename();
  ArrayList mappings=new ArrayList();
  boolean someFieldsNotFound=false;
  for (int i=0; i < selectName.length; i++) {
    int inIndex=prevFields.searchValueIndex(selectName[i]);
    if (inIndex < 0) {
      System.err.println("Rejecting mapping selectName=" + selectName[i] + ", selectRename="+ selectRename[i]+ " input field not found");
      someFieldsNotFound=true;
      continue;
    }
    int outIndex=nextStepRequiredFields.searchValueIndex(selectRename[i]);
    if (outIndex < 0) {
      System.err.println("Rejecting mapping selectName=" + selectName[i] + ", selectRename="+ selectRename[i]+ " output field not found");
      someFieldsNotFound=true;
      continue;
    }
    SourceToTargetMapping mapping=new SourceToTargetMapping(inIndex,outIndex);
    mappings.add(mapping);
  }
  if (someFieldsNotFound) {
    MessageDialog.openWarning(shell,"Warning","Some input and/or output fields could not be found that were mapped.");
  }
  EnterMappingDialog d=new EnterMappingDialog(SelectValuesDialog.this.shell,inputNames,outputNames,mappings);
  mappings=d.open();
  if (null != mappings) {
    wFields.table.removeAll();
    wFields.table.setItemCount(mappings.size());
    for (int i=0; i < mappings.size(); i++) {
      SourceToTargetMapping mapping=(SourceToTargetMapping)mappings.get(i);
      TableItem item=wFields.table.getItem(i);
      item.setText(1,inputNames[mapping.getSourcePosition()]);
      item.setText(2,outputNames[mapping.getTargetPosition()]);
      item.setText(3,"-1");
      item.setText(4,"-1");
    }
  }
}
