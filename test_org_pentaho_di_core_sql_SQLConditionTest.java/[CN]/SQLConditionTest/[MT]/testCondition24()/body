{
  RowMetaInterface rowMeta=SQLTest.generateTest4RowMeta();
  String fieldsClause="A, B";
  String conditionClause="( A LIKE '(AND' ) AND ( ( B>5 ) OR ( B=3 ) )";
  SQLFields fields=new SQLFields("Service",rowMeta,fieldsClause);
  SQLCondition sqlCondition=new SQLCondition("Service",conditionClause,rowMeta,fields);
  Condition condition=sqlCondition.getCondition();
  assertNotNull(condition);
  assertFalse(condition.isEmpty());
  assertFalse("Non-atomic condition expected",condition.isAtomic());
  assertEquals(2,condition.nrConditions());
  Condition one=condition.getCondition(0);
  assertEquals("A",one.getLeftValuename());
  assertEquals("LIKE",one.getFunctionDesc());
  assertEquals("(AND",one.getRightExactString());
  Condition two=condition.getCondition(1);
  assertEquals(1,two.nrConditions());
  Condition brackets=condition.getCondition(1);
  assertEquals(1,brackets.nrConditions());
  Condition right=brackets.getCondition(0);
  assertEquals(2,right.nrConditions());
  Condition leftOr=right.getCondition(0);
  assertTrue(leftOr.isAtomic());
  assertEquals("B",leftOr.getLeftValuename());
  assertEquals(">",leftOr.getFunctionDesc());
  assertEquals("5",leftOr.getRightExactString());
  assertEquals(Condition.OPERATOR_NONE,leftOr.getOperator());
  Condition rightOr=right.getCondition(1);
  assertEquals(Condition.OPERATOR_OR,rightOr.getOperator());
  assertEquals("B",rightOr.getLeftValuename());
  assertEquals("=",rightOr.getFunctionDesc());
  assertEquals("3",rightOr.getRightExactString());
}
