{
  init();
  ClusterGenerator clusterGenerator=new ClusterGenerator();
  try {
    clusterGenerator.launchSlaveServers();
    TransMeta transMeta=generateParallelFileReadOnMasterTransMeta(clusterGenerator);
    TransExecutionConfiguration config=createClusteredTransExecutionConfiguration();
    TransSplitter transSplitter=Trans.executeClustered(transMeta,config);
    long nrErrors=Trans.monitorClusteredTransformation(new LogChannel("cluster unit test <testParallelFileReadOnMaster>"),transSplitter,null,1);
    assertEquals(0L,nrErrors);
    String result=loadFileContent(transMeta,"${java.io.tmpdir}/test-parallel-file-read-on-master-result.txt");
    assertEqualsIgnoreWhitespacesAndCase("100",result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
 finally {
    try {
      clusterGenerator.stopSlaveServers();
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.toString());
    }
  }
}
