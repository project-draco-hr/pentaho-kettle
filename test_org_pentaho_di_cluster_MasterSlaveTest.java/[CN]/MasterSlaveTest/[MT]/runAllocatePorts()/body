{
  ClusterSchema clusterSchema=clusterGenerator.getClusterSchema();
  SlaveServer master=clusterSchema.findMaster();
  List<SlaveServer> slaves=clusterSchema.getSlaveServersFromMasterOrLocal();
  String clusteredRunId=UUID.randomUUID().toString();
  SlaveServer slave1=slaves.get(0);
  SlaveServer slave2=slaves.get(1);
  SlaveServer slave3=slaves.get(2);
  int port1=master.allocateServerSocket(clusteredRunId,40000,"localhost","trans1",master.getName(),"A","0",slave1.getName(),"B","0");
  assertEquals(40000,port1);
  int port1b=master.allocateServerSocket(clusteredRunId,40000,"localhost","trans1",master.getName(),"A","0",slave1.getName(),"B","0");
  assertEquals(port1,port1b);
  int port2=master.allocateServerSocket(clusteredRunId,40000,"localhost","trans1",master.getName(),"A","0",slave2.getName(),"B","0");
  assertEquals(40001,port2);
  int port3=master.allocateServerSocket(clusteredRunId,40000,"localhost","trans1",master.getName(),"A","0",slave3.getName(),"B","0");
  assertEquals(40002,port3);
  master.deAllocateServerSockets("trans1",clusteredRunId);
  port1=master.allocateServerSocket(clusteredRunId,40000,"localhost","trans2",master.getName(),"A","0",slave1.getName(),"B","0");
  assertEquals(40000,port1);
  master.deAllocateServerSockets("trans2",clusteredRunId);
}
