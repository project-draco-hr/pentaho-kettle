{
  ResultSet res;
  try {
    log.snap(Metrics.METRIC_DATABASE_OPEN_QUERY_START,databaseMeta.getName());
    if (params != null) {
      log.snap(Metrics.METRIC_DATABASE_PREPARE_SQL_START,databaseMeta.getName());
      pstmt=connection.prepareStatement(databaseMeta.stripCR(sql),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
      log.snap(Metrics.METRIC_DATABASE_PREPARE_SQL_STOP,databaseMeta.getName());
      log.snap(Metrics.METRIC_DATABASE_SQL_VALUES_START,databaseMeta.getName());
      setValues(params,data);
      log.snap(Metrics.METRIC_DATABASE_SQL_VALUES_STOP,databaseMeta.getName());
      if (canWeSetFetchSize(pstmt)) {
        int maxRows=pstmt.getMaxRows();
        int fs=Const.FETCH_SIZE <= maxRows ? maxRows : Const.FETCH_SIZE;
        if (databaseMeta.isMySQLVariant()) {
          setMysqlFetchSize(pstmt,fs,maxRows);
        }
 else {
          pstmt.setFetchSize(fs);
        }
        pstmt.setFetchDirection(fetch_mode);
      }
      if (rowlimit > 0 && databaseMeta.supportsSetMaxRows()) {
        pstmt.setMaxRows(rowlimit);
      }
      log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_START,databaseMeta.getName());
      res=pstmt.executeQuery();
      log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_STOP,databaseMeta.getName());
    }
 else {
      log.snap(Metrics.METRIC_DATABASE_CREATE_SQL_START,databaseMeta.getName());
      sel_stmt=connection.createStatement();
      log.snap(Metrics.METRIC_DATABASE_CREATE_SQL_STOP,databaseMeta.getName());
      if (canWeSetFetchSize(sel_stmt)) {
        int fs=Const.FETCH_SIZE <= sel_stmt.getMaxRows() ? sel_stmt.getMaxRows() : Const.FETCH_SIZE;
        if (databaseMeta.getDatabaseInterface() instanceof MySQLDatabaseMeta && databaseMeta.isStreamingResults()) {
          sel_stmt.setFetchSize(Integer.MIN_VALUE);
        }
 else {
          sel_stmt.setFetchSize(fs);
        }
        sel_stmt.setFetchDirection(fetch_mode);
      }
      if (rowlimit > 0 && databaseMeta.supportsSetMaxRows()) {
        sel_stmt.setMaxRows(rowlimit);
      }
      log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_START,databaseMeta.getName());
      res=sel_stmt.executeQuery(databaseMeta.stripCR(sql));
      log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_STOP,databaseMeta.getName());
    }
    rowMeta=getRowInfo(res.getMetaData(),databaseMeta.isMySQLVariant(),lazyConversion);
  }
 catch (  SQLException ex) {
    throw new KettleDatabaseException("An error occurred executing SQL: " + Const.CR + sql,ex);
  }
catch (  Exception e) {
    throw new KettleDatabaseException("An error occurred executing SQL:" + Const.CR + sql,e);
  }
 finally {
    log.snap(Metrics.METRIC_DATABASE_OPEN_QUERY_STOP,databaseMeta.getName());
  }
  return res;
}
