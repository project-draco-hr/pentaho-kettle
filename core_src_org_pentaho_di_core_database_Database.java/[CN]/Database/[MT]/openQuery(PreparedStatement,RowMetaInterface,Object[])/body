{
  ResultSet res;
  try {
    log.snap(Metrics.METRIC_DATABASE_OPEN_QUERY_START,databaseMeta.getName());
    log.snap(Metrics.METRIC_DATABASE_SQL_VALUES_START,databaseMeta.getName());
    setValues(params,data,ps);
    log.snap(Metrics.METRIC_DATABASE_SQL_VALUES_STOP,databaseMeta.getName());
    if (canWeSetFetchSize(ps)) {
      int maxRows=ps.getMaxRows();
      int fs=Const.FETCH_SIZE <= maxRows ? maxRows : Const.FETCH_SIZE;
      if (databaseMeta.isMySQLVariant()) {
        setMysqlFetchSize(ps,fs,maxRows);
      }
 else {
        ps.setFetchSize(fs);
      }
      ps.setFetchDirection(ResultSet.FETCH_FORWARD);
    }
    if (rowlimit > 0 && databaseMeta.supportsSetMaxRows()) {
      ps.setMaxRows(rowlimit);
    }
    log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_START,databaseMeta.getName());
    res=ps.executeQuery();
    log.snap(Metrics.METRIC_DATABASE_EXECUTE_SQL_STOP,databaseMeta.getName());
    log.snap(Metrics.METRIC_DATABASE_GET_ROW_META_START,databaseMeta.getName());
    rowMeta=getRowInfo(res.getMetaData(),databaseMeta.isMySQLVariant(),false);
    log.snap(Metrics.METRIC_DATABASE_GET_ROW_META_STOP,databaseMeta.getName());
  }
 catch (  SQLException ex) {
    throw new KettleDatabaseException("ERROR executing query",ex);
  }
catch (  Exception e) {
    throw new KettleDatabaseException("ERROR executing query",e);
  }
 finally {
    log.snap(Metrics.METRIC_DATABASE_OPEN_QUERY_STOP,databaseMeta.getName());
  }
  return res;
}
