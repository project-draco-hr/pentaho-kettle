{
  if (connection == null) {
    return;
  }
  try {
    if (connection.isClosed()) {
      return;
    }
  }
 catch (  SQLException ex) {
    log.logError("Error checking closing connection:" + Const.CR + ex.getMessage());
    log.logError(Const.getStackTracker(ex));
  }
  if (pstmt != null) {
    try {
      pstmt.close();
    }
 catch (    SQLException ex) {
      log.logError("Error closing statement:" + Const.CR + ex.getMessage());
      log.logError(Const.getStackTracker(ex));
    }
    pstmt=null;
  }
  if (prepStatementLookup != null) {
    try {
      prepStatementLookup.close();
    }
 catch (    SQLException ex) {
      log.logError("Error closing lookup statement:" + Const.CR + ex.getMessage());
      log.logError(Const.getStackTracker(ex));
    }
    prepStatementLookup=null;
  }
  if (prepStatementInsert != null) {
    try {
      prepStatementInsert.close();
    }
 catch (    SQLException ex) {
      log.logError("Error closing insert statement:" + Const.CR + ex.getMessage());
      log.logError(Const.getStackTracker(ex));
    }
    prepStatementInsert=null;
  }
  if (prepStatementUpdate != null) {
    try {
      prepStatementUpdate.close();
    }
 catch (    SQLException ex) {
      log.logError("Error closing update statement:" + Const.CR + ex.getMessage());
      log.logError(Const.getStackTracker(ex));
    }
    prepStatementUpdate=null;
  }
  if (pstmt_seq != null) {
    try {
      pstmt_seq.close();
    }
 catch (    SQLException ex) {
      log.logError("Error closing seq statement:" + Const.CR + ex.getMessage());
      log.logError(Const.getStackTracker(ex));
    }
    pstmt_seq=null;
  }
  if (!Utils.isEmpty(connectionGroup)) {
    return;
  }
 else {
    if (!isAutoCommit()) {
      try {
        commit();
      }
 catch (      KettleDatabaseException ex) {
        log.logError("Error committing:" + Const.CR + ex.getMessage());
        log.logError(Const.getStackTracker(ex));
      }
    }
  }
  try {
    ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.DatabaseDisconnected.id,this);
  }
 catch (  KettleException e) {
    log.logError("Error disconnecting from database:" + Const.CR + e.getMessage());
    log.logError(Const.getStackTracker(e));
  }
 finally {
    try {
      closeConnectionOnly();
    }
 catch (    KettleDatabaseException ignoredKde) {
      log.logError("Error disconnecting from database - closeConnectionOnly failed:" + Const.CR + ignoredKde.getMessage());
      log.logError(Const.getStackTracker(ignoredKde));
    }
  }
}
