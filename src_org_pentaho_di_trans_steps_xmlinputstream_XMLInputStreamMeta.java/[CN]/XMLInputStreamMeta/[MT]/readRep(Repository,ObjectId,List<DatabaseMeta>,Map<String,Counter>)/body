{
  try {
    filename=Const.NVL(rep.getStepAttributeString(id_step,"filename"),"");
    addResultFile=rep.getStepAttributeBoolean(id_step,"addResultFile");
    nrRowsToSkip=Const.NVL(rep.getStepAttributeString(id_step,"nrRowsToSkip"),"0");
    rowLimit=Const.NVL(rep.getStepAttributeString(id_step,"rowLimit"),"0");
    defaultStringLen=Const.NVL(rep.getStepAttributeString(id_step,"defaultStringLen"),DEFAULT_STRING_LEN);
    encoding=Const.NVL(rep.getStepAttributeString(id_step,"encoding"),DEFAULT_ENCODING);
    enableTrim=rep.getStepAttributeBoolean(id_step,"enableTrim");
    includeFilenameField=rep.getStepAttributeBoolean(id_step,"includeFilenameField");
    filenameField=Const.NVL(rep.getStepAttributeString(id_step,"filenameField"),filenameField);
    includeRowNumberField=rep.getStepAttributeBoolean(id_step,"includeRowNumberField");
    rowNumberField=Const.NVL(rep.getStepAttributeString(id_step,"rowNumberField"),rowNumberField);
    includeXmlDataTypeNumericField=rep.getStepAttributeBoolean(id_step,"includeDataTypeNumericField");
    xmlDataTypeNumericField=Const.NVL(rep.getStepAttributeString(id_step,"dataTypeNumericField"),xmlDataTypeNumericField);
    includeXmlDataTypeDescriptionField=rep.getStepAttributeBoolean(id_step,"includeDataTypeDescriptionField");
    xmlDataTypeDescriptionField=Const.NVL(rep.getStepAttributeString(id_step,"dataTypeDescriptionField"),xmlDataTypeDescriptionField);
    includeXmlLocationLineField=rep.getStepAttributeBoolean(id_step,"includeXmlLocationLineField");
    xmlLocationLineField=Const.NVL(rep.getStepAttributeString(id_step,"xmlLocationLineField"),xmlLocationLineField);
    includeXmlLocationColumnField=rep.getStepAttributeBoolean(id_step,"includeXmlLocationColumnField");
    xmlLocationColumnField=Const.NVL(rep.getStepAttributeString(id_step,"xmlLocationColumnField"),xmlLocationColumnField);
    includeXmlElementIDField=rep.getStepAttributeBoolean(id_step,"includeXmlElementIDField");
    xmlElementIDField=Const.NVL(rep.getStepAttributeString(id_step,"xmlElementIDField"),xmlElementIDField);
    includeXmlParentElementIDField=rep.getStepAttributeBoolean(id_step,"includeXmlParentElementIDField");
    xmlParentElementIDField=Const.NVL(rep.getStepAttributeString(id_step,"xmlParentElementIDField"),xmlParentElementIDField);
    includeXmlElementLevelField=rep.getStepAttributeBoolean(id_step,"includeXmlElementLevelField");
    xmlElementLevelField=Const.NVL(rep.getStepAttributeString(id_step,"xmlElementLevelField"),xmlElementLevelField);
    includeXmlPathField=rep.getStepAttributeBoolean(id_step,"includeXmlPathField");
    xmlPathField=Const.NVL(rep.getStepAttributeString(id_step,"xmlPathField"),xmlPathField);
    includeXmlParentPathField=rep.getStepAttributeBoolean(id_step,"includeXmlParentPathField");
    xmlParentPathField=Const.NVL(rep.getStepAttributeString(id_step,"xmlParentPathField"),xmlParentPathField);
    includeXmlDataNameField=rep.getStepAttributeBoolean(id_step,"includeXmlDataNameField");
    xmlDataNameField=Const.NVL(rep.getStepAttributeString(id_step,"xmlDataNameField"),xmlDataNameField);
    includeXmlDataValueField=rep.getStepAttributeBoolean(id_step,"includeXmlDataValueField");
    xmlDataValueField=Const.NVL(rep.getStepAttributeString(id_step,"xmlDataValueField"),xmlDataValueField);
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
