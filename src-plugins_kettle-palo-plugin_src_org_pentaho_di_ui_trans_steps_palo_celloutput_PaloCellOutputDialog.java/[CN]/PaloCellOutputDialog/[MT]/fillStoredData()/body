{
  if (stepname != null)   textStepName.setText(stepname);
  int index=addConnectionLine.indexOf(meta.getDatabaseMeta() != null ? meta.getDatabaseMeta().getName() : "");
  if (index >= 0)   addConnectionLine.select(index);
  if (meta.getCube() != null) {
    comboCube.add(meta.getCube());
    comboCube.select(0);
  }
  if (meta.getMeasureType() != null) {
    comboMeasureType.add(meta.getMeasureType());
    comboMeasureType.select(0);
  }
  textCommitSize.setText(String.valueOf(meta.getCommitSize()));
  buttonEnableDimensionCache.setSelection(meta.getEnableDimensionCache());
  buttonPreloadDimensionCache.setSelection(meta.getPreloadDimensionCache());
  buttonPreloadDimensionCache.setEnabled(buttonEnableDimensionCache.getSelection());
  comboMeasureType.setItems(new String[]{"Numeric","String"});
  comboMeasureType.select(0);
  if (meta.getMeasureType() != null) {
    int indexType=comboMeasureType.indexOf(meta.getMeasureType());
    if (indexType >= 0)     comboMeasureType.select(indexType);
  }
  tableViewFields.table.removeAll();
  if (meta.getFields().size() > 0) {
    for (    DimensionField level : meta.getFields()) {
      tableViewFields.add(level.getDimensionName(),level.getFieldName());
    }
  }
  String[] fieldNames=null;
  try {
    RowMetaInterface r=transMeta.getPrevStepFields(stepname);
    fieldNames=r.getFieldNames();
  }
 catch (  Exception e) {
  }
  tableViewFields.setColumnInfo(1,new ColumnInfo("Field",ColumnInfo.COLUMN_TYPE_CCOMBO,fieldNames,true));
  if (meta.getMeasure() != null) {
    final TableItem item=new TableItem(tableViewFields.table,SWT.NONE);
    item.setText(1,meta.getMeasure().getDimensionName());
    item.setText(2,meta.getMeasure().getFieldName());
    item.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GREEN));
  }
  tableViewFields.setRowNums();
  tableViewFields.optWidth(true);
  buttonClearCube.setSelection(meta.getClearCube());
}
