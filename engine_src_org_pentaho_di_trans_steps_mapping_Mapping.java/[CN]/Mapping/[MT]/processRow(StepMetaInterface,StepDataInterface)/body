{
  try {
    meta=(MappingMeta)smi;
    data=(MappingData)sdi;
    MappingInput[] mappingInputs=data.mappingTrans.findMappingInput();
    MappingOutput[] mappingOutputs=data.mappingTrans.findMappingOutput();
switch (data.mappingTransMeta.getTransformationType()) {
case Normal:
case SerialSingleThreaded:
      if (!getInputRowSets().isEmpty()) {
        for (        RowSet rowSet : new ArrayList<RowSet>(getInputRowSets())) {
          if (mappingInputs.length == 1) {
            mappingInputs[0].getInputRowSets().add(rowSet);
          }
 else {
            throw new KettleException("Unsupported situation detected where more than one Mapping Input step needs to be handled.  To solve it, insert a dummy step before the mapping step.");
          }
        }
        getInputRowSets().clear();
      }
    if (!getRemoteInputSteps().isEmpty()) {
      for (      RemoteStep remoteStep : getRemoteInputSteps()) {
        if (mappingInputs.length == 1) {
          mappingInputs[0].getRemoteInputSteps().add(remoteStep);
        }
 else {
          throw new KettleException("Unsupported situation detected where a remote input step is expecting data to end up in a particular Mapping Input step of a sub-transformation.  To solve it, insert a dummy step before the mapping.");
        }
      }
      getRemoteInputSteps().clear();
    }
  if (!getOutputRowSets().isEmpty()) {
    for (    RowSet rowSet : new ArrayList<RowSet>(getOutputRowSets())) {
      if (mappingOutputs.length == 1) {
        mappingOutputs[0].getOutputRowSets().add(rowSet);
      }
 else {
        throw new KettleException("Unsupported situation detected where more than one Mapping Output step needs to be handled.  To solve it, insert a dummy step after the mapping step.");
      }
    }
    getOutputRowSets().clear();
  }
if (!getRemoteOutputSteps().isEmpty()) {
  for (  RemoteStep remoteStep : getRemoteOutputSteps()) {
    if (mappingOutputs.length == 1) {
      mappingOutputs[0].getRemoteOutputSteps().add(remoteStep);
    }
 else {
      throw new KettleException("Unsupported situation detected where a remote output step is expecting data to end up in a particular Mapping Output step of a sub-transformation.  To solve it, insert a dummy step after the mapping.");
    }
  }
  getRemoteOutputSteps().clear();
}
data.mappingTrans.startThreads();
if (getTransMeta().getTransformationType() == TransformationType.Normal) {
data.mappingTrans.waitUntilFinished();
Result result=data.mappingTrans.getResult();
setErrors(result.getNrErrors());
setLinesRead(result.getNrLinesRead());
setLinesWritten(result.getNrLinesWritten());
setLinesInput(result.getNrLinesInput());
setLinesOutput(result.getNrLinesOutput());
setLinesUpdated(result.getNrLinesUpdated());
setLinesRejected(result.getNrLinesRejected());
}
return false;
case SingleThreaded:
if (mappingInputs.length > 1 || mappingOutputs.length > 1) {
throw new KettleException("Multiple input or output steps are not supported for a single threaded mapping.");
}
System.out.println("# of input buffers: " + mappingInputs[0].getInputRowSets().size());
if (mappingInputs[0].getInputRowSets().size() > 0) {
System.out.println("Input buffer 0 size: " + mappingInputs[0].getInputRowSets().get(0).size());
}
boolean result=data.singleThreadedTransExcecutor.oneIteration();
if (!result) {
data.singleThreadedTransExcecutor.dispose();
setOutputDone();
return false;
}
return true;
default :
throw new KettleException("Transformation type '" + data.mappingTransMeta.getTransformationType().getDescription() + "' is an unsupported transformation type for a mapping");
}
}
 catch (Throwable t) {
if (data.mappingTrans != null) {
data.mappingTrans.stopAll();
}
throw new KettleException(t);
}
}
