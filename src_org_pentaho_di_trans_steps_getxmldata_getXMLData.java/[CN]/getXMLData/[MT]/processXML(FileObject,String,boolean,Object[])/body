{
  Object[] outputRowData=null;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    if (meta.getIsInFields() && meta.getIsAFile()) {
      if (file.exists()) {
        if (file.getType() == FileType.FILE) {
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("getXMLData.Log.IsAFile",file.toString()));
        }
 else {
          log.logError(toString(),Messages.getString("getXMLData.Log.IsNotAFile",file.toString()));
          throw new KettleException(Messages.getString("getXMLData.Log.IsNotAFile",file.toString()));
        }
      }
 else {
        log.logError(toString(),Messages.getString("getXMLData.Log.WeCanFindFile",file.toString()));
        throw new KettleException(Messages.getString("getXMLData.Log.WeCanFindFile",file.toString()));
      }
    }
    String encoding="UTF-8";
    if (!Const.isEmpty(meta.getEncoding())) {
      encoding=meta.getEncoding();
    }
    SAXReader reader=new SAXReader();
    if (meta.isValidating()) {
      reader.setValidation(true);
      reader.setFeature("http://apache.org/xml/features/validation/schema",true);
    }
    Document doc=null;
    HashMap<String,String> xmlNameSpaceMap=new HashMap<String,String>();
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("getXMLData.Log.CreateDocumentStart"));
    if (IsInXMLField) {
      doc=reader.read(new StringReader(StringXML));
    }
 else {
      doc=reader.read(new FileInputStream(KettleVFS.getFilename(file)));
      doc.setXMLEncoding(encoding);
    }
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("getXMLData.Log.CreateDocumentEnd"));
    XPath xpath=doc.createXPath(environmentSubstitute(meta.getLoopXPath()));
    if (meta.isNamespaceAware()) {
      String ns=doc.getRootElement().getNamespaceURI();
      xmlNameSpaceMap.put("ns",ns);
      xpath.setNamespaceURIs(xmlNameSpaceMap);
    }
    List<AbstractNode> an=(List<AbstractNode>)xpath.selectNodes(doc);
    if (IsInXMLField) {
      if (log.isDetailed())       logDetailed(Messages.getString("getXMLData.Log.LoopOccurences","" + an.size()));
    }
 else {
      if (log.isDetailed())       logDetailed(Messages.getString("getXMLData.Log.LoopFileOccurences","" + an.size(),KettleVFS.getFilename(file)));
    }
    for (    AbstractNode a : an) {
      if ((meta.getRowLimit() > 0 && data.rownr < meta.getRowLimit()) || meta.getRowLimit() == 0) {
        outputRowData=buildEmptyRow();
        if (row != null)         outputRowData=row.clone();
        for (int i=0; i < meta.getInputFields().length; i++) {
          getXMLDataField xmlInputField=meta.getInputFields()[i];
          String XPathValue=environmentSubstitute(xmlInputField.getXPath());
          String Element_Type=xmlInputField.getElementTypeCode();
          int indexvarstart=XPathValue.indexOf("{$");
          int indexvarend=XPathValue.indexOf('}');
          if (indexvarstart >= 0 && indexvarend >= 0) {
            String NameVarInputField=XPathValue.substring(indexvarstart + 2,indexvarend);
            for (int k=0; k < meta.getInputFields().length; k++) {
              getXMLDataField Tmp_xmlInputField=meta.getInputFields()[k];
              if (Tmp_xmlInputField.getName().equalsIgnoreCase(NameVarInputField)) {
                XPathValue=XPathValue.replaceAll("\\{\\$" + NameVarInputField + "\\}","'" + outputRowData[k] + "'");
                if (log.isDetailed()) {
                  if (log.isDetailed())                   log.logDetailed(toString(),XPathValue);
                }
              }
            }
          }
          String value=null;
          if (!Element_Type.equals("node"))           XPathValue='@' + XPathValue;
          XPath xpathnode=a.createXPath(XPathValue);
          if (xpathnode != null)           value=xpathnode.valueOf(a);
switch (meta.getInputFields()[i].getTrimType()) {
case getXMLDataField.TYPE_TRIM_LEFT:
            value=Const.ltrim(value);
          break;
case getXMLDataField.TYPE_TRIM_RIGHT:
        value=Const.rtrim(value);
      break;
case getXMLDataField.TYPE_TRIM_BOTH:
    value=Const.trim(value);
  break;
default :
break;
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(i);
outputRowData[i]=targetValueMeta.convertData(sourceValueMeta,value);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(value)) {
outputRowData[i]=data.previousRow[i];
}
}
}
int rowIndex=meta.getInputFields().length;
if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
outputRowData[rowIndex++]=KettleVFS.getFilename(data.file);
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[rowIndex++]=new Long(data.rownr);
}
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : (Object[])irow.cloneRow(outputRowData);
data.rownr++;
putRow(data.outputRowMeta,outputRowData);
}
}
}
 catch (Exception e) {
if (getStepMeta().isDoingErrorHandling()) {
sendToErrorRow=true;
errorMessage=e.toString();
}
 else {
log.logError(toString(),e.toString());
throw new KettleStepException(e.toString());
}
if (sendToErrorRow) {
putError(getInputRowMeta(),row,1,errorMessage,null,"getXMLData001");
}
}
}
