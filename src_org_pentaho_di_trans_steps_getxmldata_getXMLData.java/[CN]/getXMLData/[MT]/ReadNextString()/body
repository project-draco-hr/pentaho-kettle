{
  try {
    data.readrow=getRow();
    if (data.readrow == null) {
      if (log.isDetailed())       logDetailed(Messages.getString("getXMLData.Log.FinishedProcessing"));
      return false;
    }
    if (first) {
      first=false;
      if (meta.getIsInFields()) {
        data.inputRowMeta=getInputRowMeta();
        data.outputRowMeta=data.inputRowMeta.clone();
        meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
        data.totalpreviousfields=data.inputRowMeta.size();
        data.convertRowMeta=data.outputRowMeta.clone();
        for (int i=0; i < data.convertRowMeta.size(); i++)         data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
        data.convertRowMeta=data.outputRowMeta.clone();
        for (int i=0; i < data.convertRowMeta.size(); i++) {
          data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
        }
        if (Const.isEmpty(meta.getXMLField())) {
          logError(Messages.getString("getXMLData.Log.NoField"));
          throw new KettleException(Messages.getString("getXMLData.Log.NoField"));
        }
        if (data.indexOfXmlField < 0) {
          data.indexOfXmlField=getInputRowMeta().indexOfValue(meta.getXMLField());
          if (data.indexOfXmlField < 0) {
            logError(Messages.getString("getXMLData.Log.ErrorFindingField") + "[" + meta.getXMLField()+ "]");
            throw new KettleException(Messages.getString("getXMLData.Exception.CouldnotFindField",meta.getXMLField()));
          }
        }
      }
    }
    if (meta.getIsInFields()) {
      String Fieldvalue=getInputRowMeta().getString(data.readrow,data.indexOfXmlField);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("getXMLData.Log.XMLStream",meta.getXMLField(),Fieldvalue));
      if (meta.getIsAFile()) {
        FileObject file=null;
        try {
          file=KettleVFS.getFileObject(Fieldvalue);
          if (!setDocument(null,file,false)) {
            throw new KettleException(Messages.getString("getXMLData.Log.UnableCreateDocument"));
          }
          if (!applyXPath()) {
            throw new KettleException(Messages.getString("getXMLData.Log.UnableApplyXPath"));
          }
          addFileToResultFilesname(file);
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("getXMLData.Log.LoopFileOccurences","" + data.nodesize,file.getName().getBaseName()));
        }
 catch (        Exception e) {
          throw new KettleException(e);
        }
 finally {
          try {
            if (file != null)             file.close();
          }
 catch (          Exception e) {
          }
        }
      }
 else {
        if (!setDocument(Fieldvalue,null,true)) {
          throw new KettleException(Messages.getString("getXMLData.Log.UnableCreateDocument"));
        }
        if (!applyXPath()) {
          throw new KettleException(Messages.getString("getXMLData.Log.UnableApplyXPath"));
        }
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("getXMLData.Log.LoopFileOccurences","" + data.nodesize));
      }
    }
  }
 catch (  Exception e) {
    logError(Messages.getString("getXMLData.Log.UnexpectedError",e.toString()));
    stopAll();
    logError(Const.getStackTracker(e));
    setErrors(1);
    return false;
  }
  return true;
}
