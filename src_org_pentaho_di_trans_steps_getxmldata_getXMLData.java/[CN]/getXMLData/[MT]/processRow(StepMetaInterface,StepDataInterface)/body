{
  Object[] row;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  row=getRow();
  if (!meta.getIsInFields()) {
    if (data.filenr >= data.files.size()) {
      setOutputDone();
      return false;
    }
  }
 else {
    if (row == null) {
      setOutputDone();
      return false;
    }
  }
  if (first) {
    first=false;
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++)     data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++) {
      data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    }
    if (meta.getIsInFields()) {
      if (Const.isEmpty(meta.getXMLField())) {
        logError(Messages.getString("getXMLData.Log.NoField"));
        throw new KettleException(Messages.getString("getXMLData.Log.NoField"));
      }
      if (data.indexOfXmlField < 0) {
        data.indexOfXmlField=getInputRowMeta().indexOfValue(meta.getXMLField());
        if (data.indexOfXmlField < 0) {
          logError(Messages.getString("getXMLData.Log.ErrorFindingField") + "[" + meta.getXMLField()+ "]");
          throw new KettleException(Messages.getString("getXMLData.Exception.CouldnotFindField",meta.getXMLField()));
        }
      }
    }
 else {
    }
  }
  try {
    if (meta.getIsInFields()) {
      String Fieldvalue=getInputRowMeta().getString(row,data.indexOfXmlField);
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("getXMLData.Log.XMLStream",meta.getXMLField(),Fieldvalue));
      if (meta.getIsAFile()) {
        FileObject file=null;
        try {
          file=KettleVFS.getFileObject(Fieldvalue);
          processXML(file,null,false,row);
        }
 catch (        Exception e) {
        }
 finally {
          try {
            if (file != null)             file.close();
          }
 catch (          Exception e) {
          }
        }
      }
 else {
        processXML(null,Fieldvalue,true,row);
      }
    }
 else {
      data.rownr=0;
      for (int i=0; i < data.files.size(); i++) {
        if ((meta.getRowLimit() > 0 && data.rownr < meta.getRowLimit()) || meta.getRowLimit() == 0) {
          data.file=(FileObject)data.files.get(i);
          logBasic(Messages.getString("getXMLData.Log.OpeningFile",data.file.toString()));
          processXML(data.file,null,false,null);
          if (log.isDetailed())           logDetailed(Messages.getString("getXMLData.Log.FileOpened",data.file.toString()));
        }
        if (meta.addResultFile()) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,data.file,getTransMeta().getName(),getStepname());
          resultFile.setComment(Messages.getString("getXMLData.Log.FileAddedResult"));
          addResultFile(resultFile);
        }
        data.filenr++;
      }
      setOutputDone();
      return false;
    }
  }
 catch (  KettleStepException k) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=k.toString();
    }
 else {
      if (meta.getIsInFields())       logError("Error : " + k.toString());
 else       logError(Messages.getString("getXMLData.Log.UnableToOpenFile","" + data.filenr,data.file.toString(),k.toString()));
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),row,1,errorMessage,null,"GetXMLData001");
    }
  }
  return true;
}
