{
  stepname=textStepName.getText();
  DatabaseMeta dbMeta=transMeta.findDatabase(addConnectionLine.getText());
  if (dbMeta != null) {
    try {
      new OpenERPObjectOutputData(dbMeta);
    }
 catch (    KettleException e) {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"OpenERPObjectOutputDialog.ConnectionTypeErrorTitle"),BaseMessages.getString(PKG,"OpenERPObjectOutputDialog.ConnectionTypeErrorString"),e);
      return false;
    }
  }
  int commitBatchSize=0;
  try {
    commitBatchSize=Integer.parseInt(textCommitBatchSize.getText());
  }
 catch (  NumberFormatException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"OpenERPObjectOutputDialog.ParseErrorTitle"),BaseMessages.getString(PKG,"OpenERPObjectOutputDialog.ParseErrorString",textCommitBatchSize.getText()),e);
    return false;
  }
  String[] targetTableFields=new String[tableViewFieldMappings.table.getItemCount()];
  String[] streamFields=new String[tableViewFieldMappings.table.getItemCount()];
  for (int i=0; i < tableViewFieldMappings.table.getItemCount(); i++) {
    targetTableFields[i]=tableViewFieldMappings.table.getItem(i).getText(1);
    streamFields[i]=tableViewFieldMappings.table.getItem(i).getText(2);
  }
  targetMeta.setIdFieldName(comboIDFieldName.getText());
  targetMeta.setModelFields(targetTableFields);
  targetMeta.setStreamFields(streamFields);
  targetMeta.setDatabaseMeta(transMeta.findDatabase(addConnectionLine.getText()));
  targetMeta.setModelName(comboModelName.getText());
  targetMeta.setCommitBatchSize(commitBatchSize);
  targetMeta.setChanged(true);
  return true;
}
