{
  RowMetaInterface row=new RowMeta();
  List<Column> columns=table.getColumns();
  for (int i=0; i < columns.size(); i++) {
    Column column=columns.get(i);
    int valtype=ValueMetaInterface.TYPE_STRING;
    int length=-1;
    int precision=-1;
    int type=column.getType().getSQLType();
switch (type) {
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.LONGVARCHAR:
      valtype=ValueMetaInterface.TYPE_STRING;
    length=column.getLength();
  break;
case java.sql.Types.CLOB:
valtype=ValueMetaInterface.TYPE_STRING;
length=DatabaseMeta.CLOB_LENGTH;
break;
case java.sql.Types.BIGINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=15;
break;
case java.sql.Types.INTEGER:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=9;
break;
case java.sql.Types.SMALLINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=4;
break;
case java.sql.Types.TINYINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=2;
break;
case java.sql.Types.DECIMAL:
case java.sql.Types.DOUBLE:
case java.sql.Types.FLOAT:
case java.sql.Types.REAL:
case java.sql.Types.NUMERIC:
valtype=ValueMetaInterface.TYPE_NUMBER;
length=column.getLength();
precision=column.getPrecision();
if (length >= 126) {
length=-1;
}
if (precision >= 126) {
precision=-1;
}
if (type == java.sql.Types.DOUBLE || type == java.sql.Types.FLOAT || type == java.sql.Types.REAL) {
if (precision == 0) {
precision=-1;
}
}
 else {
if (precision == 0 && length < 18 && length > 0) {
valtype=ValueMetaInterface.TYPE_INTEGER;
}
}
if (length > 18 || precision > 18) {
valtype=ValueMetaInterface.TYPE_BIGNUMBER;
}
break;
case java.sql.Types.DATE:
case java.sql.Types.TIME:
case java.sql.Types.TIMESTAMP:
valtype=ValueMetaInterface.TYPE_DATE;
break;
case java.sql.Types.BOOLEAN:
case java.sql.Types.BIT:
valtype=ValueMetaInterface.TYPE_BOOLEAN;
break;
case java.sql.Types.BINARY:
case java.sql.Types.BLOB:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
valtype=ValueMetaInterface.TYPE_BINARY;
break;
default :
valtype=ValueMetaInterface.TYPE_STRING;
length=column.getLength();
break;
}
ValueMetaInterface v;
try {
v=ValueMetaFactory.createValueMeta(column.getName(),valtype);
}
 catch (KettlePluginException e) {
throw new KettleStepException(e);
}
v.setLength(length,precision);
row.addValueMeta(v);
}
return row;
}
