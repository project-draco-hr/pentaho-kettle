{
  KettleEnvironment.init();
  PluginRegistry.init(true);
  TransMeta transMeta=new TransMeta();
  transMeta.setName("delete1");
  Map<String,String> vars=new HashMap<String,String>();
  vars.put("max.sz","10");
  transMeta.injectVariables(vars);
  umi=new UpdateMeta();
  ud=new UpdateData();
  PluginRegistry plugReg=PluginRegistry.getInstance();
  String deletePid=plugReg.getPluginId(StepPluginType.class,umi);
  stepMeta=new StepMeta(deletePid,"delete",umi);
  Trans trans=new Trans(transMeta);
  transMeta.addStep(stepMeta);
  upd=new Update(stepMeta,ud,1,transMeta,trans);
  upd.copyVariablesFrom(transMeta);
  List<String> attributes=Arrays.asList("schemaName","tableName","commitSize","errorIgnored","ignoreFlagField","skipLookup","useBatchUpdate","keyStream","keyLookup","keyCondition","keyStream2","updateLookup","updateStream","databaseMeta");
  Map<String,String> getterMap=new HashMap<String,String>(){
{
      put("schemaName","getSchemaName");
      put("tableName","getTableName");
      put("commitSize","getCommitSizeVar");
      put("errorIgnored","isErrorIgnored");
      put("ignoreFlagField","getIgnoreFlagField");
      put("skipLookup","isSkipLookup");
      put("useBatchUpdate","useBatchUpdate");
      put("keyStream","getKeyStream");
      put("keyLookup","getKeyLookup");
      put("keyCondition","getKeyCondition");
      put("keyStream2","getKeyStream2");
      put("updateLookup","getUpdateLookup");
      put("updateStream","getUpdateStream");
      put("databaseMeta","getDatabaseMeta");
    }
  }
;
  Map<String,String> setterMap=new HashMap<String,String>(){
{
      put("schemaName","setSchemaName");
      put("tableName","setTableName");
      put("commitSize","setCommitSize");
      put("errorIgnored","setErrorIgnored");
      put("ignoreFlagField","setIgnoreFlagField");
      put("skipLookup","setSkipLookup");
      put("useBatchUpdate","setUseBatchUpdate");
      put("keyStream","setKeyStream");
      put("keyLookup","setKeyLookup");
      put("keyCondition","setKeyCondition");
      put("keyStream2","setKeyStream2");
      put("updateLookup","setUpdateLookup");
      put("updateStream","setUpdateStream");
      put("databaseMeta","setDatabaseMeta");
    }
  }
;
  FieldLoadSaveValidator<String[]> stringArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new StringLoadSaveValidator(),5);
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  attrValidatorMap.put("keyStream",stringArrayLoadSaveValidator);
  attrValidatorMap.put("keyLookup",stringArrayLoadSaveValidator);
  attrValidatorMap.put("keyCondition",stringArrayLoadSaveValidator);
  attrValidatorMap.put("keyStream2",stringArrayLoadSaveValidator);
  attrValidatorMap.put("updateLookup",stringArrayLoadSaveValidator);
  attrValidatorMap.put("updateStream",stringArrayLoadSaveValidator);
  attrValidatorMap.put("databaseMeta",new DatabaseMetaLoadSaveValidator());
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  loadSaveTester=new LoadSaveTester(testMetaClass,attributes,new ArrayList<String>(),new ArrayList<String>(),getterMap,setterMap,attrValidatorMap,typeValidatorMap,this);
}
