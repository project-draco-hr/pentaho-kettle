{
  ObjectId existingClusterSchemaId=getClusterID(clusterSchema.getName());
  if (existingClusterSchemaId != null) {
    clusterSchema.setObjectId(existingClusterSchemaId);
  }
  if (clusterSchema.getObjectId() == null) {
    clusterSchema.setObjectId(insertCluster(clusterSchema));
  }
 else {
    if (existingClusterSchemaId != null && !clusterSchema.getObjectId().equals(existingClusterSchemaId)) {
      if (overwrite) {
        repository.deleteClusterSchema(existingClusterSchemaId);
        updateCluster(clusterSchema);
      }
 else {
        throw new KettleObjectExistsException("Failed to save object to repository. Object [" + clusterSchema.getName() + "] already exists.");
      }
    }
 else {
      updateCluster(clusterSchema);
    }
  }
  repository.delClusterSlaves(clusterSchema.getObjectId());
  for (int i=0; i < clusterSchema.getSlaveServers().size(); i++) {
    SlaveServer slaveServer=clusterSchema.getSlaveServers().get(i);
    if (slaveServer.getObjectId() == null) {
      repository.save(slaveServer,versionComment,null,id_transformation,isUsedByTransformation,overwrite);
    }
    repository.insertClusterSlave(clusterSchema,slaveServer);
  }
  if (isUsedByTransformation) {
    repository.insertTransformationCluster(id_transformation,clusterSchema.getObjectId());
  }
}
