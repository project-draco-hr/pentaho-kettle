{
  if (getClusterID(clusterSchema.getName()) != null) {
    throw new KettleObjectExistsException("Failed to create object in repository. Object [" + clusterSchema.getName() + "] already exists.");
  }
  ObjectId id=repository.connectionDelegate.getNextClusterID();
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_CLUSTER_ID_CLUSTER),id);
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_CLUSTER_NAME),clusterSchema.getName());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_CLUSTER_BASE_PORT),clusterSchema.getBasePort());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_CLUSTER_SOCKETS_BUFFER_SIZE),clusterSchema.getSocketsBufferSize());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_CLUSTER_SOCKETS_FLUSH_INTERVAL),clusterSchema.getSocketsFlushInterval());
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_CLUSTER_SOCKETS_COMPRESSED),Boolean.valueOf(clusterSchema.isSocketsCompressed()));
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_CLUSTER_DYNAMIC),Boolean.valueOf(clusterSchema.isDynamic()));
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_CLUSTER);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  return id;
}
