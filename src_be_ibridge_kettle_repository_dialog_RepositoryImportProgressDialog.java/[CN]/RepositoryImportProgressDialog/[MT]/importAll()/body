{
  wLabel.setText("Importing repository objects from an XML file");
  try {
    boolean overwrite=false;
    boolean askOverwrite=true;
    boolean makeDirectory=false;
    boolean askDirectory=true;
    addLog("Import objects from file [" + filename + "]");
    wLabel.setText("Asking in which directory to put the objects...");
    Document doc=XMLHandler.loadXMLFile(filename);
    if (doc != null) {
      Node repnode=XMLHandler.getSubNode(doc,"repository");
      Node transsnode=XMLHandler.getSubNode(repnode,"transformations");
      if (transsnode != null) {
        int nrtrans=XMLHandler.countNodes(transsnode,"transformation");
        wBar.setMinimum(0);
        wBar.setMaximum(nrtrans);
        for (int i=0; i < nrtrans; i++) {
          wBar.setSelection(i + 1);
          Node transnode=XMLHandler.getSubNodeByNr(transsnode,"transformation",i);
          TransMeta ti=new TransMeta(transnode);
          wLabel.setText("Importing transformation " + (i + 1) + "/"+ nrtrans+ " : "+ ti.getName());
          String directoryPath=XMLHandler.getTagValue(transnode,"info","directory");
          directoryPath=directoryPath.substring(1);
          RepositoryDirectory targetDirectory=baseDirectory.findDirectory(directoryPath);
          if (targetDirectory == null) {
            if (askDirectory) {
              MessageDialogWithToggle mb=new MessageDialogWithToggle(shell,"Create directory?",null,"The Directory [" + directoryPath + "] doesn't exists."+ Const.CR+ "Do you want me to create this directory?",MessageDialog.QUESTION,new String[]{"Yes","No","Cancel"},1,"Don't ask me again.",!askDirectory);
              int answer=mb.open();
              makeDirectory=answer == 0;
              askDirectory=!mb.getToggleState();
              if (answer == 2)               return;
            }
            if (makeDirectory) {
              addLog("Creating directory [" + directoryPath + "] in directory ["+ baseDirectory+ "]");
              targetDirectory=baseDirectory.createDirectory(rep,directoryPath);
            }
 else {
              targetDirectory=baseDirectory;
            }
          }
          long id=rep.getTransformationID(ti.getName(),targetDirectory.getID());
          if (id > 0 && askOverwrite) {
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,"[" + ti.getName() + "]",null,"The transformation [" + ti.getName() + "] already exists in the repository."+ Const.CR+ "Do you want to overwrite the transformation?"+ Const.CR,MessageDialog.QUESTION,new String[]{"Yes","No"},1,"Don't ask me again.",!askOverwrite);
            int answer=md.open();
            overwrite=answer == 0;
            askOverwrite=!md.getToggleState();
          }
          if (id <= 0 || overwrite) {
            ti.setDirectory(targetDirectory);
            ti.saveRep(rep);
            addLog("Saved transformation #" + i + " in the repository: ["+ ti.getName()+ "]");
          }
 else {
            addLog("We didn't save transformation [" + ti.getName() + "]");
          }
        }
      }
      overwrite=false;
      askOverwrite=true;
      Node jobsnode=XMLHandler.getSubNode(repnode,"jobs");
      if (jobsnode != null) {
        int nrjobs=XMLHandler.countNodes(jobsnode,"job");
        wBar.setMinimum(0);
        wBar.setMaximum(nrjobs);
        for (int i=0; i < nrjobs; i++) {
          wBar.setSelection(i + 1);
          Node jobnode=XMLHandler.getSubNodeByNr(jobsnode,"job",i);
          JobMeta ji=new JobMeta(log,jobnode,rep);
          wLabel.setText("Importing job " + (i + 1) + "/"+ nrjobs+ " : "+ ji.getName());
          String directoryPath=Const.NVL(XMLHandler.getTagValue(jobnode,"directory"),Const.FILE_SEPARATOR);
          RepositoryDirectory targetDirectory=baseDirectory.findDirectory(directoryPath);
          if (targetDirectory == null) {
            if (askDirectory) {
              MessageDialogWithToggle mb=new MessageDialogWithToggle(shell,"Create directory?",null,"The Directory [" + directoryPath + "] doesn't exists."+ Const.CR+ "Do you want me to create this directory?",MessageDialog.QUESTION,new String[]{"Yes","No","Cancel"},1,"Don't ask me again.",!askDirectory);
              int answer=mb.open();
              makeDirectory=answer == 0;
              askDirectory=!mb.getToggleState();
              if (answer == 2)               return;
            }
            if (makeDirectory) {
              addLog("Creating directory [" + directoryPath + "] in directory ["+ baseDirectory+ "]");
              targetDirectory=baseDirectory.createDirectory(rep,directoryPath);
            }
 else {
              targetDirectory=baseDirectory;
            }
          }
          long id=rep.getJobID(ji.getName(),targetDirectory.getID());
          if (id > 0 && askOverwrite) {
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,"[" + ji.getName() + "]",null,"The job [" + ji.getName() + "] already exists in the repository."+ Const.CR+ "Do you want to overwrite the job?"+ Const.CR,MessageDialog.QUESTION,new String[]{"Yes","No"},1,"Don't ask me again.",!askOverwrite);
            int answer=md.open();
            overwrite=answer == 0;
            askOverwrite=md.getToggleState();
          }
          if (id <= 0 || overwrite) {
            ji.setDirectory(targetDirectory);
            ji.saveRep(rep);
            addLog("Saved job #" + i + " in the repository: ["+ ji.getName()+ "]");
          }
 else {
            addLog("We didn't save job [" + ji.getName() + "]");
          }
        }
      }
      addLog("Finished importing.");
    }
 else {
      MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
      mb.setMessage("Sorry, this is not a valid XML file." + Const.CR + "Please check the log for more information.");
      mb.setText("ERROR");
      mb.open();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,props,"Error importing repository objects","There was an error while importing repository objects from an XML file",e);
  }
}
