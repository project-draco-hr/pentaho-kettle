{
  wLabel.setText(Messages.getString("RepositoryImportDialog.ImportXML.Label"));
  try {
    boolean overwrite=false;
    boolean askOverwrite=true;
    boolean makeDirectory=false;
    boolean askDirectory=true;
    addLog(Messages.getString("RepositoryImportDialog.WhichFile.Log",filename));
    wLabel.setText(Messages.getString("RepositoryImportDialog.WhichDir.Label"));
    Document doc=XMLHandler.loadXMLFile(filename);
    if (doc != null) {
      Node repnode=XMLHandler.getSubNode(doc,"repository");
      Node transsnode=XMLHandler.getSubNode(repnode,"transformations");
      if (transsnode != null) {
        int nrtrans=XMLHandler.countNodes(transsnode,"transformation");
        wBar.setMinimum(0);
        wBar.setMaximum(nrtrans);
        for (int i=0; i < nrtrans; i++) {
          wBar.setSelection(i + 1);
          Node transnode=XMLHandler.getSubNodeByNr(transsnode,"transformation",i);
          TransMeta ti=new TransMeta(transnode);
          wLabel.setText(Messages.getString("RepositoryImportDialog.ImportTrans.Label",Integer.toString(i + 1),Integer.toString(nrtrans),ti.getName()));
          String directoryPath=XMLHandler.getTagValue(transnode,"info","directory");
          directoryPath=directoryPath.substring(1);
          RepositoryDirectory targetDirectory=baseDirectory.findDirectory(directoryPath);
          if (targetDirectory == null) {
            if (askDirectory) {
              MessageDialogWithToggle mb=new MessageDialogWithToggle(shell,Messages.getString("RepositoryImportDialog.CreateDir.Title"),null,Messages.getString("RepositoryImportDialog.CreateDir.Message",directoryPath),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No"),Messages.getString("System.Button.Cancel")},1,Messages.getString("RepositoryImportDialog.DontAskAgain.Label"),!askDirectory);
              int answer=mb.open();
              makeDirectory=(answer & 0xFF) == 0;
              askDirectory=!mb.getToggleState();
              if ((answer & 0xFF) == 1)               return;
            }
            if (makeDirectory) {
              addLog(Messages.getString("RepositoryImportDialog.CreateDir.Log",directoryPath,baseDirectory.toString()));
              targetDirectory=baseDirectory.createDirectory(rep,directoryPath);
            }
 else {
              targetDirectory=baseDirectory;
            }
          }
          long id=rep.getTransformationID(ti.getName(),targetDirectory.getID());
          if (id > 0 && askOverwrite) {
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,Messages.getString("RepositoryImportDialog.OverwriteTrans.Title"),null,Messages.getString("RepositoryImportDialog.OverwriteTrans.Message",ti.getName()),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No")},1,Messages.getString("RepositoryImportDialog.DontAskAgain.Label"),!askOverwrite);
            int answer=md.open();
            overwrite=(answer & 0xFF) == 0;
            askOverwrite=!md.getToggleState();
          }
          if (id <= 0 || overwrite) {
            ti.setDirectory(targetDirectory);
            try {
              ti.saveRep(rep);
              addLog(Messages.getString("RepositoryImportDialog.TransSaved.Log",Integer.toString(i),ti.getName()));
            }
 catch (            Exception e) {
              addLog(Messages.getString("RepositoryImportDialog.ErrorSavingTrans.Log",Integer.toString(i),ti.getName(),e.toString()));
              addLog(Const.getStackTracker(e));
            }
          }
 else {
            addLog(Messages.getString("RepositoryImportDialog.ErrorSavingTrans2.Log",ti.getName()));
          }
        }
      }
      overwrite=false;
      askOverwrite=true;
      Node jobsnode=XMLHandler.getSubNode(repnode,"jobs");
      if (jobsnode != null) {
        int nrjobs=XMLHandler.countNodes(jobsnode,"job");
        wBar.setMinimum(0);
        wBar.setMaximum(nrjobs);
        for (int i=0; i < nrjobs; i++) {
          wBar.setSelection(i + 1);
          Node jobnode=XMLHandler.getSubNodeByNr(jobsnode,"job",i);
          JobMeta ji=new JobMeta(log,jobnode,rep);
          wLabel.setText(Messages.getString("RepositoryImportDialog.ImportJob.Label",Integer.toString(i + 1),Integer.toString(nrjobs),ji.getName()));
          String directoryPath=Const.NVL(XMLHandler.getTagValue(jobnode,"directory"),Const.FILE_SEPARATOR);
          RepositoryDirectory targetDirectory=baseDirectory.findDirectory(directoryPath);
          if (targetDirectory == null) {
            if (askDirectory) {
              MessageDialogWithToggle mb=new MessageDialogWithToggle(shell,Messages.getString("RepositoryImportDialog.CreateDir.Title"),null,Messages.getString("RepositoryImportDialog.CreateDir.Message",directoryPath),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No"),Messages.getString("System.Button.Cancel")},1,Messages.getString("RepositoryImportDialog.DontAskAgain.Label"),!askDirectory);
              int answer=mb.open();
              makeDirectory=answer == 0;
              askDirectory=!mb.getToggleState();
              if ((answer & 0xFF) == 2)               return;
            }
            if (makeDirectory) {
              addLog(Messages.getString("RepositoryImportDialog.CreateDir.Log",directoryPath,baseDirectory.toString()));
              targetDirectory=baseDirectory.createDirectory(rep,directoryPath);
            }
 else {
              targetDirectory=baseDirectory;
            }
          }
          long id=rep.getJobID(ji.getName(),targetDirectory.getID());
          if (id > 0 && askOverwrite) {
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,Messages.getString("RepositoryImportDialog.OverwriteJob.Title"),null,Messages.getString("RepositoryImportDialog.OverwriteJob.Message",ji.getName()),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No")},1,Messages.getString("RepositoryImportDialog.DontAskAgain.Label"),!askOverwrite);
            int answer=md.open();
            overwrite=(answer & 0xFF) == 0;
            askOverwrite=!md.getToggleState();
          }
          if (id <= 0 || overwrite) {
            ji.setDirectory(targetDirectory);
            ji.saveRep(rep);
            addLog(Messages.getString("RepositoryImportDialog.JobSaved.Log",Integer.toString(i),ji.getName()));
          }
 else {
            addLog(Messages.getString("RepositoryImportDialog.ErrorSavingJob.Log",ji.getName()));
          }
        }
      }
      addLog(Messages.getString("RepositoryImportDialog.ImportFinished.Log"));
    }
 else {
      MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
      mb.setMessage(Messages.getString("RepositoryImportDialog.ErrorInvalidXML.Message"));
      mb.setText(Messages.getString("RepositoryImportDialog.ErrorInvalidXML.Title"));
      mb.open();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,Messages.getString("RepositoryImportDialog.ErrorGeneral.Title"),Messages.getString("RepositoryImportDialog.ErrorGeneral.Message"),e);
  }
}
