{
  TransMeta transMeta=new TransMeta();
  transMeta.setName(SqlTransExecutor.calculateTransname(sql,false));
  xLocation=50;
  StepMeta firstStep;
  if (Const.isEmpty(sql.getServiceName()) || "dual".equalsIgnoreCase(sql.getServiceName())) {
    firstStep=generateEmptyRowStep();
  }
 else {
    firstStep=generateInjectorStep();
  }
  transMeta.addStep(firstStep);
  injectorStepName=firstStep.getName();
  StepMeta lastStep=firstStep;
  List<SQLField> constFields=sql.getSelectFields().getConstantFields();
  if (!constFields.isEmpty()) {
    StepMeta constStep=generateConstStep(constFields);
    lastStep=addToTrans(constStep,transMeta,lastStep);
  }
  List<SQLField> iifFields=sql.getSelectFields().getIifFunctionFields();
  for (  SQLField iifField : iifFields) {
    lastStep=generateIifStep(iifField,transMeta,lastStep);
  }
  if (sql.getWhereCondition() != null && !sql.getWhereCondition().isEmpty()) {
    StepMeta filterStep=generateFilterStep(sql.getWhereCondition().getCondition(),false);
    lastStep=addToTrans(filterStep,transMeta,lastStep);
  }
  List<SQLField> aggFields=sql.getSelectFields().getAggregateFields();
  if (sql.getHavingCondition() != null) {
    List<SQLField> havingFields=sql.getHavingCondition().extractHavingFields(sql.getSelectFields().getFields(),aggFields,transMeta.getStepFields(lastStep));
    aggFields.addAll(havingFields);
  }
  List<SQLField> groupFields=sql.getGroupFields().getFields();
  if (aggFields.size() > 0 || groupFields.size() > 0) {
    StepMeta groupStep=generateGroupByStep(aggFields,groupFields);
    lastStep=addToTrans(groupStep,transMeta,lastStep);
  }
  if (sql.getOrderFields() != null) {
    iifFields=sql.getOrderFields().getIifFunctionFields();
    for (    SQLField iifField : iifFields) {
      lastStep=generateIifStep(iifField,transMeta,lastStep);
    }
  }
  if (sql.getHavingCondition() != null && !sql.getHavingCondition().isEmpty()) {
    StepMeta filterStep=generateFilterStep(sql.getHavingCondition().getCondition(),true);
    lastStep=addToTrans(filterStep,transMeta,lastStep);
  }
  if (sql.getSelectFields().isDistinct()) {
    StepMeta filterStep=generateUniqueStep();
    lastStep=addToTrans(filterStep,transMeta,lastStep);
  }
  if (sql.getOrderFields() != null && !sql.getOrderFields().isEmpty()) {
    StepMeta sortStep=generateSortStep(transMeta,lastStep);
    lastStep=addToTrans(sortStep,transMeta,lastStep);
  }
  if (!sql.getSelectFields().hasAggregates() && sql.getSelectFields().getRegularFields().size() > 0) {
    StepMeta selectStep=generateSelectStep();
    lastStep=addToTrans(selectStep,transMeta,lastStep);
  }
  if (rowLimit > 0) {
    StepMeta sampleStep=generateSampleStep();
    lastStep=addToTrans(sampleStep,transMeta,lastStep);
  }
  StepMeta resultStep=generateResultStep();
  resultStepName=resultStep.getName();
  lastStep=addToTrans(resultStep,transMeta,lastStep);
  return transMeta;
}
