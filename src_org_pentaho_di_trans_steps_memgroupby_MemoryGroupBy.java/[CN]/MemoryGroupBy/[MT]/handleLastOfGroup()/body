{
  for (  HashEntry entry : data.map.keySet()) {
    Aggregate aggregate=data.map.get(entry);
    Object[] aggregateResult=getAggregateResult(aggregate);
    Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    int index=0;
    for (int i=0; i < data.groupMeta.size(); i++) {
      outputRowData[index++]=entry.getGroupData()[i];
    }
    for (int i=0; i < data.aggMeta.size(); i++) {
      outputRowData[index++]=aggregateResult[i];
    }
    putRow(data.outputRowMeta,outputRowData);
  }
  if (data.map.isEmpty() && meta.isAlwaysGivingBackOneRow()) {
    Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    int index=0;
    for (int i=0; i < data.groupMeta.size(); i++) {
      outputRowData[index++]=null;
    }
    for (int i=0; i < data.aggMeta.size(); i++) {
      if (meta.getAggregateType()[i] == MemoryGroupByMeta.TYPE_GROUP_COUNT_ALL || meta.getAggregateType()[i] == MemoryGroupByMeta.TYPE_GROUP_COUNT_ANY || meta.getAggregateType()[i] == MemoryGroupByMeta.TYPE_GROUP_COUNT_DISTINCT) {
        outputRowData[index++]=Long.valueOf(0L);
      }
 else {
        outputRowData[index++]=null;
      }
    }
    putRow(data.outputRowMeta,outputRowData);
  }
}
