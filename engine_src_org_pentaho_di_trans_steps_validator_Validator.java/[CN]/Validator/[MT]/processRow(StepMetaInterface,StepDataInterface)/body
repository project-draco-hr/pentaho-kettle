{
  meta=(ValidatorMeta)smi;
  data=(ValidatorData)sdi;
  Object[] r;
  if (first) {
    first=false;
    readSourceValuesFromInfoSteps();
    r=getRow();
    if (r == null) {
      setOutputDone();
      return false;
    }
    data.fieldIndexes=new int[meta.getValidations().size()];
    for (int i=0; i < meta.getValidations().size(); i++) {
      Validation field=meta.getValidations().get(i);
      if (!Const.isEmpty(field.getFieldName())) {
        data.fieldIndexes[i]=getInputRowMeta().indexOfValue(field.getFieldName());
        if (data.fieldIndexes[i] < 0) {
          throw new KettleStepException("Unable to find the specified fieldname '" + field.getFieldName() + "' for validation#"+ (i + 1));
        }
      }
 else {
        throw new KettleStepException("There is no name specified for validator field #" + (i + 1));
      }
    }
  }
 else {
    r=getRow();
    if (r == null) {
      setOutputDone();
      return false;
    }
  }
  if (log.isRowLevel()) {
    logRowlevel("Read row #" + getLinesRead() + " : "+ getInputRowMeta().getString(r));
  }
  try {
    List<KettleValidatorException> exceptions=validateFields(getInputRowMeta(),r);
    if (exceptions.size() > 0) {
      if (getStepMeta().isDoingErrorHandling()) {
        if (meta.isConcatenatingErrors()) {
          StringBuilder messages=new StringBuilder();
          StringBuilder fields=new StringBuilder();
          StringBuilder codes=new StringBuilder();
          boolean notFirst=false;
          for (          KettleValidatorException e : exceptions) {
            if (notFirst) {
              messages.append(meta.getConcatenationSeparator());
              fields.append(meta.getConcatenationSeparator());
              codes.append(meta.getConcatenationSeparator());
            }
 else {
              notFirst=true;
            }
            messages.append(e.getMessage());
            fields.append(e.getFieldname());
            codes.append(e.getCodeDesc());
          }
          putError(getInputRowMeta(),r,exceptions.size(),messages.toString(),fields.toString(),codes.toString());
        }
 else {
          for (          KettleValidatorException e : exceptions) {
            putError(getInputRowMeta(),r,1,e.getMessage(),e.getFieldname(),e.getCodeDesc());
          }
        }
      }
 else {
        KettleValidatorException e=exceptions.get(0);
        throw new KettleException(e.getMessage(),e);
      }
    }
 else {
      putRow(getInputRowMeta(),r);
    }
  }
 catch (  KettleValidatorException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      putError(getInputRowMeta(),r,1,e.getMessage(),e.getFieldname(),e.getCodeDesc());
    }
 else {
      throw new KettleException(e.getMessage(),e);
    }
  }
  if (log.isRowLevel()) {
    logRowlevel("Wrote row #" + getLinesWritten() + " : "+ getInputRowMeta().getString(r));
  }
  if (checkFeedback(getLinesRead())) {
    logBasic("Linenr " + getLinesRead());
  }
  return true;
}
