{
  rootNode.setProperty(PROP_EXTENDED_DESCRIPTION,jobMeta.getExtendedDescription());
  rootNode.setProperty(PROP_JOB_VERSION,jobMeta.getJobversion());
  rootNode.setProperty(PROP_JOB_STATUS,jobMeta.getJobstatus() < 0 ? -1L : jobMeta.getJobstatus());
  if (jobMeta.getJobLogTable().getDatabaseMeta() != null) {
    DataNodeRef ref=new DataNodeRef(jobMeta.getJobLogTable().getDatabaseMeta().getObjectId().getId());
    rootNode.setProperty(PROP_DATABASE_LOG,ref);
  }
  rootNode.setProperty(PROP_TABLE_NAME_LOG,jobMeta.getJobLogTable().getTableName());
  rootNode.setProperty(PROP_CREATED_USER,jobMeta.getCreatedUser());
  rootNode.setProperty(PROP_CREATED_DATE,jobMeta.getCreatedDate());
  rootNode.setProperty(PROP_MODIFIED_USER,jobMeta.getModifiedUser());
  rootNode.setProperty(PROP_MODIFIED_DATE,jobMeta.getModifiedDate());
  rootNode.setProperty(PROP_USE_BATCH_ID,jobMeta.getJobLogTable().isBatchIdUsed());
  rootNode.setProperty(PROP_PASS_BATCH_ID,jobMeta.isBatchIdPassed());
  rootNode.setProperty(PROP_USE_LOGFIELD,jobMeta.getJobLogTable().isLogFieldUsed());
  rootNode.setProperty(PROP_SHARED_FILE,jobMeta.getSharedObjectsFile());
  rootNode.setProperty(PROP_LOG_SIZE_LIMIT,jobMeta.getJobLogTable().getLogSizeLimit());
  RepositoryAttributeInterface attributeInterface=new PurRepositoryAttribute(rootNode,jobMeta.getDatabases());
  for (  LogTableInterface logTable : jobMeta.getLogTables()) {
    logTable.saveToRepository(attributeInterface);
  }
  AttributesMapUtil.saveAttributesMap(rootNode,jobMeta);
}
