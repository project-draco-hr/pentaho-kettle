{
  try {
    String name=getString(copyNode,PROP_NAME);
    for (    JobEntryInterface entry : jobentries) {
      if (entry.getName().equalsIgnoreCase(name)) {
        return entry;
      }
    }
    String typeId=getString(copyNode,PROP_JOBENTRY_TYPE);
    PluginRegistry registry=PluginRegistry.getInstance();
    PluginInterface jobPlugin=registry.findPluginWithId(JobEntryPluginType.class,typeId);
    JobEntryInterface jobMetaInterface=null;
    boolean isMissing=jobPlugin == null;
    if (!isMissing) {
      jobMetaInterface=(JobEntryInterface)registry.loadClass(jobPlugin);
    }
 else {
      MissingEntry missingEntry=new MissingEntry(jobMeta.getName(),typeId);
      jobMeta.addMissingEntry(missingEntry);
      jobMetaInterface=missingEntry;
    }
    jobMetaInterface.setName(name);
    jobMetaInterface.setDescription(getString(copyNode,PROP_DESCRIPTION));
    jobMetaInterface.setObjectId(new StringObjectId(copyNode.getId().toString()));
    RepositoryProxy proxy=new RepositoryProxy(copyNode.getNode(NODE_CUSTOM));
    jobMetaInterface.setMetaStore(jobMeta.getMetaStore());
    if (!isMissing) {
      compatibleJobEntryLoadRep(jobMetaInterface,proxy,null,jobMeta.getDatabases(),jobMeta.getSlaveServers());
      jobMetaInterface.loadRep(proxy,jobMeta.getMetaStore(),null,jobMeta.getDatabases(),jobMeta.getSlaveServers());
    }
    jobentries.add(jobMetaInterface);
    return jobMetaInterface;
  }
 catch (  Exception e) {
    throw new KettleException("Unable to read job entry interface information from repository",e);
  }
}
