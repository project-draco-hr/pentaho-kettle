{
  String hostConcrete="host_concrete";
  String portConcrete="12345";
  String trustStorePath="TEST_PATH";
  String trustStorePassword="TEST_PASSWORD";
  when(mockLdapMeta.getHost()).thenReturn(hostConcrete);
  when(mockLdapMeta.getPort()).thenReturn(portConcrete);
  when(mockLdapMeta.getDerefAliases()).thenReturn("always");
  when(mockLdapMeta.getReferrals()).thenReturn("follow");
  when(mockLdapMeta.isUseCertificate()).thenReturn(true);
  when(mockLdapMeta.isTrustAllCertificates()).thenReturn(true);
  when(mockLdapMeta.getTrustStorePath()).thenReturn(trustStorePath);
  when(mockLdapMeta.getTrustStorePassword()).thenReturn(trustStorePassword);
  when(mockVariableSpace.environmentSubstitute(eq(hostConcrete))).thenReturn(hostConcrete);
  when(mockVariableSpace.environmentSubstitute(eq(portConcrete))).thenReturn(portConcrete);
  TestableLdapProtocol testableLdapProtocol=new TestableLdapProtocol(mockLogChannelInterface,mockVariableSpace,mockLdapMeta,null);
  testableLdapProtocol.connect(null,null);
  assertEquals(true,testableLdapProtocol.trustAllCertificates);
  assertEquals(trustStorePath,testableLdapProtocol.trustStorePath);
  assertEquals(trustStorePassword,testableLdapProtocol.trustStorePassword);
}
