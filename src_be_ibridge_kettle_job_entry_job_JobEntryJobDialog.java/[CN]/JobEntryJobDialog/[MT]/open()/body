{
  Shell parent=getParent();
  display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE);
  props.setLook(shell);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobentry.setChanged();
    }
  }
;
  backupChanged=jobentry.hasChanged();
  backup_logfile=jobentry.set_logfile;
  backup_date=jobentry.add_date;
  backup_time=jobentry.add_time;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText("Job entry details for this job:");
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText("Name of job entry: ");
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.top=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.top=new FormAttachment(0,0);
  fdName.left=new FormAttachment(middle,0);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlJobname=new Label(shell,SWT.RIGHT);
  wlJobname.setText("Name of job: ");
  props.setLook(wlJobname);
  fdlJobname=new FormData();
  fdlJobname.top=new FormAttachment(wName,margin * 2);
  fdlJobname.left=new FormAttachment(0,0);
  fdlJobname.right=new FormAttachment(middle,0);
  wlJobname.setLayoutData(fdlJobname);
  wbJobname=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbJobname);
  wbJobname.setText("&Browse...");
  fdbJobname=new FormData();
  fdbJobname.top=new FormAttachment(wName,margin * 2);
  fdbJobname.right=new FormAttachment(100,0);
  wbJobname.setLayoutData(fdbJobname);
  wJobname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wJobname);
  wJobname.addModifyListener(lsMod);
  fdJobname=new FormData();
  fdJobname.top=new FormAttachment(wName,margin * 2);
  fdJobname.left=new FormAttachment(middle,0);
  fdJobname.right=new FormAttachment(wbJobname,-margin);
  wJobname.setLayoutData(fdJobname);
  wlDirectory=new Label(shell,SWT.RIGHT);
  wlDirectory.setText("Repository directory: ");
  props.setLook(wlDirectory);
  fdlDirectory=new FormData();
  fdlDirectory.top=new FormAttachment(wJobname,margin * 2);
  fdlDirectory.left=new FormAttachment(0,0);
  fdlDirectory.right=new FormAttachment(middle,0);
  wlDirectory.setLayoutData(fdlDirectory);
  wDirectory=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDirectory);
  wDirectory.addModifyListener(lsMod);
  fdDirectory=new FormData();
  fdDirectory.top=new FormAttachment(wJobname,margin * 2);
  fdDirectory.left=new FormAttachment(middle,0);
  fdDirectory.right=new FormAttachment(100,0);
  wDirectory.setLayoutData(fdDirectory);
  wDirectory.setEditable(false);
  wlFilename=new Label(shell,SWT.RIGHT);
  wlFilename.setText("Filename : ");
  props.setLook(wlFilename);
  fdlFilename=new FormData();
  fdlFilename.top=new FormAttachment(wDirectory,margin);
  fdlFilename.left=new FormAttachment(0,0);
  fdlFilename.right=new FormAttachment(middle,0);
  wlFilename.setLayoutData(fdlFilename);
  wbFilename=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbFilename);
  wbFilename.setText("&Browse...");
  fdbFilename=new FormData();
  fdbFilename.top=new FormAttachment(wDirectory,margin);
  fdbFilename.right=new FormAttachment(100,0);
  wbFilename.setLayoutData(fdbFilename);
  wFilename=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename);
  wFilename.addModifyListener(lsMod);
  fdFilename=new FormData();
  fdFilename.top=new FormAttachment(wDirectory,margin);
  fdFilename.left=new FormAttachment(middle,0);
  fdFilename.right=new FormAttachment(wbFilename,-margin);
  wFilename.setLayoutData(fdFilename);
  wLogging=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wLogging);
  wLogging.setText("Log file settings");
  FormLayout groupLayout=new FormLayout();
  groupLayout.marginWidth=10;
  groupLayout.marginHeight=10;
  wLogging.setLayout(groupLayout);
  wlSetLogfile=new Label(wLogging,SWT.RIGHT);
  wlSetLogfile.setText("Specify logfile?");
  props.setLook(wlSetLogfile);
  fdlSetLogfile=new FormData();
  fdlSetLogfile.left=new FormAttachment(0,0);
  fdlSetLogfile.top=new FormAttachment(0,margin);
  fdlSetLogfile.right=new FormAttachment(middle,-margin);
  wlSetLogfile.setLayoutData(fdlSetLogfile);
  wSetLogfile=new Button(wLogging,SWT.CHECK);
  props.setLook(wSetLogfile);
  fdSetLogfile=new FormData();
  fdSetLogfile.left=new FormAttachment(middle,0);
  fdSetLogfile.top=new FormAttachment(0,margin);
  fdSetLogfile.right=new FormAttachment(100,0);
  wSetLogfile.setLayoutData(fdSetLogfile);
  wSetLogfile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobentry.set_logfile=!jobentry.set_logfile;
      jobentry.setChanged();
      setActive();
    }
  }
);
  wlLogfile=new Label(wLogging,SWT.RIGHT);
  wlLogfile.setText("Name of logfile ");
  props.setLook(wlLogfile);
  fdlLogfile=new FormData();
  fdlLogfile.left=new FormAttachment(0,0);
  fdlLogfile.top=new FormAttachment(wlSetLogfile,margin);
  fdlLogfile.right=new FormAttachment(middle,0);
  wlLogfile.setLayoutData(fdlLogfile);
  wLogfile=new Text(wLogging,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wLogfile.setText("");
  props.setLook(wLogfile);
  fdLogfile=new FormData();
  fdLogfile.left=new FormAttachment(middle,0);
  fdLogfile.top=new FormAttachment(wlSetLogfile,margin);
  fdLogfile.right=new FormAttachment(100,0);
  wLogfile.setLayoutData(fdLogfile);
  wlLogext=new Label(wLogging,SWT.RIGHT);
  wlLogext.setText("Extention of logfile ");
  props.setLook(wlLogext);
  fdlLogext=new FormData();
  fdlLogext.left=new FormAttachment(0,0);
  fdlLogext.top=new FormAttachment(wLogfile,margin);
  fdlLogext.right=new FormAttachment(middle,0);
  wlLogext.setLayoutData(fdlLogext);
  wLogext=new Text(wLogging,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wLogext.setText("");
  props.setLook(wLogext);
  fdLogext=new FormData();
  fdLogext.left=new FormAttachment(middle,0);
  fdLogext.top=new FormAttachment(wLogfile,margin);
  fdLogext.right=new FormAttachment(100,0);
  wLogext.setLayoutData(fdLogext);
  wlAddDate=new Label(wLogging,SWT.RIGHT);
  wlAddDate.setText("Include date in filename?");
  props.setLook(wlAddDate);
  fdlAddDate=new FormData();
  fdlAddDate.left=new FormAttachment(0,0);
  fdlAddDate.top=new FormAttachment(wLogext,margin);
  fdlAddDate.right=new FormAttachment(middle,-margin);
  wlAddDate.setLayoutData(fdlAddDate);
  wAddDate=new Button(wLogging,SWT.CHECK);
  props.setLook(wAddDate);
  fdAddDate=new FormData();
  fdAddDate.left=new FormAttachment(middle,0);
  fdAddDate.top=new FormAttachment(wLogext,margin);
  fdAddDate.right=new FormAttachment(100,0);
  wAddDate.setLayoutData(fdAddDate);
  wAddDate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobentry.add_date=!jobentry.add_date;
      jobentry.setChanged();
    }
  }
);
  wlAddTime=new Label(wLogging,SWT.RIGHT);
  wlAddTime.setText("Include time in filename? ");
  props.setLook(wlAddTime);
  fdlAddTime=new FormData();
  fdlAddTime.left=new FormAttachment(0,0);
  fdlAddTime.top=new FormAttachment(wlAddDate,margin);
  fdlAddTime.right=new FormAttachment(middle,-margin);
  wlAddTime.setLayoutData(fdlAddTime);
  wAddTime=new Button(wLogging,SWT.CHECK);
  props.setLook(wAddTime);
  fdAddTime=new FormData();
  fdAddTime.left=new FormAttachment(middle,0);
  fdAddTime.top=new FormAttachment(wlAddDate,margin);
  fdAddTime.right=new FormAttachment(100,0);
  wAddTime.setLayoutData(fdAddTime);
  wAddTime.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobentry.add_time=!jobentry.add_time;
      jobentry.setChanged();
    }
  }
);
  wlLoglevel=new Label(wLogging,SWT.RIGHT);
  wlLoglevel.setText("Loglevel ");
  props.setLook(wlLoglevel);
  fdlLoglevel=new FormData();
  fdlLoglevel.left=new FormAttachment(0,0);
  fdlLoglevel.right=new FormAttachment(middle,-margin);
  fdlLoglevel.top=new FormAttachment(wlAddTime,margin);
  wlLoglevel.setLayoutData(fdlLoglevel);
  wLoglevel=new CCombo(wLogging,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  for (int i=0; i < LogWriter.log_level_desc.length; i++)   wLoglevel.add(LogWriter.log_level_desc[i]);
  wLoglevel.select(jobentry.loglevel + 1);
  props.setLook(wLoglevel);
  fdLoglevel=new FormData();
  fdLoglevel.left=new FormAttachment(middle,0);
  fdLoglevel.top=new FormAttachment(wlAddTime,margin);
  fdLoglevel.right=new FormAttachment(100,0);
  wLoglevel.setLayoutData(fdLoglevel);
  fdLogging=new FormData();
  fdLogging.left=new FormAttachment(0,margin);
  fdLogging.top=new FormAttachment(wbFilename,margin);
  fdLogging.right=new FormAttachment(100,-margin);
  wLogging.setLayoutData(fdLogging);
  wlPrevious=new Label(shell,SWT.RIGHT);
  wlPrevious.setText("Copy prev.results to args");
  props.setLook(wlPrevious);
  fdlPrevious=new FormData();
  fdlPrevious.left=new FormAttachment(0,0);
  fdlPrevious.top=new FormAttachment(wLogging,margin * 3);
  fdlPrevious.right=new FormAttachment(middle,-margin);
  wlPrevious.setLayoutData(fdlPrevious);
  wPrevious=new Button(shell,SWT.CHECK);
  props.setLook(wPrevious);
  wPrevious.setSelection(jobentry.arg_from_previous);
  wPrevious.setToolTipText("Check this to pass the results of the previous entry to the arguments of this entry.");
  fdPrevious=new FormData();
  fdPrevious.left=new FormAttachment(middle,0);
  fdPrevious.top=new FormAttachment(wLogging,margin * 3);
  fdPrevious.right=new FormAttachment(100,0);
  wPrevious.setLayoutData(fdPrevious);
  wPrevious.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobentry.arg_from_previous=!jobentry.arg_from_previous;
      jobentry.setChanged();
      wlFields.setEnabled(!jobentry.arg_from_previous);
      wFields.setEnabled(!jobentry.arg_from_previous);
    }
  }
);
  wlFields=new Label(shell,SWT.NONE);
  wlFields.setText("Fields : ");
  props.setLook(wlFields);
  fdlFields=new FormData();
  fdlFields.left=new FormAttachment(0,0);
  fdlFields.top=new FormAttachment(wPrevious,margin);
  wlFields.setLayoutData(fdlFields);
  final int FieldsCols=1;
  int rows=jobentry.arguments == null ? 1 : (jobentry.arguments.length == 0 ? 0 : jobentry.arguments.length);
  final int FieldsRows=rows;
  ColumnInfo[] colinf=new ColumnInfo[FieldsCols];
  colinf[0]=new ColumnInfo("Argument",ColumnInfo.COLUMN_TYPE_TEXT,"",false);
  wFields=new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(wlFields,margin);
  fdFields.right=new FormAttachment(100,0);
  fdFields.bottom=new FormAttachment(100,-50);
  wFields.setLayoutData(fdFields);
  wlFields.setEnabled(!jobentry.arg_from_previous);
  wFields.setEnabled(!jobentry.arg_from_previous);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText("  &OK  ");
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText("  &Cancel  ");
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wFields);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wFilename.addSelectionListener(lsDef);
  wbJobname.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (rep != null) {
        SelectObjectDialog sod=new SelectObjectDialog(shell,props,rep,false,true,false);
        String jobname=sod.open();
        if (jobname != null) {
          wJobname.setText(jobname);
          wDirectory.setText(sod.getDirectory().getPath());
        }
      }
    }
  }
);
  wbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*.kjb;*.xml","*.xml","*"});
      dialog.setFilterNames(new String[]{"Kettle jobs","XML files","All files"});
      if (wFilename.getText() != null) {
        dialog.setFileName(wFilename.getText());
      }
      if (dialog.open() != null) {
        try {
          wFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
          JobMeta job=new JobMeta(log,wFilename.getText());
          if (job.getName() != null)           wName.setText(job.getName());
 else           wName.setText(dialog.getFileName());
        }
 catch (        KettleXMLException xe) {
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
          mb.setText("Error!");
          mb.setMessage("Error reading job with file: " + wFilename.getText() + " : "+ xe.getMessage());
          mb.open();
        }
      }
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  setActive();
  WindowProperty winprop=props.getScreen(shell.getText());
  if (winprop != null)   winprop.setShell(shell);
 else   shell.pack();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobentry;
}
