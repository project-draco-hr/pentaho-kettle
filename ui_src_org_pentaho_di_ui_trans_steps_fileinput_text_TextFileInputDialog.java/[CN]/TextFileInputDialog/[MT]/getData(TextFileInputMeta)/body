{
  wAccFilenames.setSelection(meta.inputFiles.acceptingFilenames);
  wPassThruFields.setSelection(meta.inputFiles.passingThruFields);
  if (meta.inputFiles.acceptingField != null) {
    wAccField.setText(meta.inputFiles.acceptingField);
  }
  if (meta.getAcceptingStep() != null) {
    wAccStep.setText(meta.getAcceptingStep().getName());
  }
  if (meta.getFileName() != null) {
    wFilenameList.removeAll();
    for (int i=0; i < meta.getFileName().length; i++) {
      wFilenameList.add(meta.getFileName()[i],meta.inputFiles.fileMask[i],meta.inputFiles.excludeFileMask[i],meta.getRequiredFilesDesc(meta.inputFiles.fileRequired[i]),meta.getRequiredFilesDesc(meta.inputFiles.includeSubFolders[i]));
    }
    wFilenameList.removeEmptyRows();
    wFilenameList.setRowNums();
    wFilenameList.optWidth(true);
  }
  if (meta.content.fileType != null) {
    wFiletype.setText(meta.content.fileType);
  }
  if (meta.content.separator != null) {
    wSeparator.setText(meta.content.separator);
  }
  if (meta.content.enclosure != null) {
    wEnclosure.setText(meta.content.enclosure);
  }
  if (meta.content.escapeCharacter != null) {
    wEscape.setText(meta.content.escapeCharacter);
  }
  wHeader.setSelection(meta.content.header);
  wNrHeader.setText("" + meta.content.nrHeaderLines);
  wFooter.setSelection(meta.content.footer);
  wNrFooter.setText("" + meta.content.nrFooterLines);
  wWraps.setSelection(meta.content.lineWrapped);
  wNrWraps.setText("" + meta.content.nrWraps);
  wLayoutPaged.setSelection(meta.content.layoutPaged);
  wNrLinesPerPage.setText("" + meta.content.nrLinesPerPage);
  wNrLinesDocHeader.setText("" + meta.content.nrLinesDocHeader);
  if (meta.content.fileCompression != null) {
    wCompression.setText(meta.content.fileCompression);
  }
  wNoempty.setSelection(meta.content.noEmptyLines);
  wInclFilename.setSelection(meta.content.includeFilename);
  wInclRownum.setSelection(meta.content.includeRowNumber);
  wRownumByFile.setSelection(meta.content.rowNumberByFile);
  wDateLenient.setSelection(meta.content.dateFormatLenient);
  wAddResult.setSelection(meta.inputFiles.isaddresult);
  if (meta.content.filenameField != null) {
    wInclFilenameField.setText(meta.content.filenameField);
  }
  if (meta.content.rowNumberField != null) {
    wInclRownumField.setText(meta.content.rowNumberField);
  }
  if (meta.content.fileFormat != null) {
    wFormat.setText(meta.content.fileFormat);
  }
  wLimit.setText("" + meta.content.rowLimit);
  logDebug("getting fields info...");
  getFieldsData(meta,false);
  if (meta.getEncoding() != null) {
    wEncoding.setText(meta.getEncoding());
  }
  wErrorIgnored.setSelection(meta.errorHandling.errorIgnored);
  wSkipBadFiles.setSelection(meta.errorHandling.skipBadFiles);
  wSkipErrorLines.setSelection(meta.isErrorLineSkipped());
  if (meta.errorHandling.fileErrorField != null) {
    wBadFileField.setText(meta.errorHandling.fileErrorField);
  }
  if (meta.errorHandling.fileErrorMessageField != null) {
    wBadFileMessageField.setText(meta.errorHandling.fileErrorMessageField);
  }
  if (meta.getErrorCountField() != null) {
    wErrorCount.setText(meta.getErrorCountField());
  }
  if (meta.getErrorFieldsField() != null) {
    wErrorFields.setText(meta.getErrorFieldsField());
  }
  if (meta.getErrorTextField() != null) {
    wErrorText.setText(meta.getErrorTextField());
  }
  if (meta.errorHandling.warningFilesDestinationDirectory != null) {
    wWarnDestDir.setText(meta.errorHandling.warningFilesDestinationDirectory);
  }
  if (meta.errorHandling.warningFilesExtension != null) {
    wWarnExt.setText(meta.errorHandling.warningFilesExtension);
  }
  if (meta.errorHandling.errorFilesDestinationDirectory != null) {
    wErrorDestDir.setText(meta.errorHandling.errorFilesDestinationDirectory);
  }
  if (meta.errorHandling.errorFilesExtension != null) {
    wErrorExt.setText(meta.errorHandling.errorFilesExtension);
  }
  if (meta.errorHandling.lineNumberFilesDestinationDirectory != null) {
    wLineNrDestDir.setText(meta.errorHandling.lineNumberFilesDestinationDirectory);
  }
  if (meta.errorHandling.lineNumberFilesExtension != null) {
    wLineNrExt.setText(meta.errorHandling.lineNumberFilesExtension);
  }
  for (int i=0; i < meta.getFilter().length; i++) {
    TableItem item=wFilter.table.getItem(i);
    TextFileFilter filter=meta.getFilter()[i];
    if (filter.getFilterString() != null) {
      item.setText(1,filter.getFilterString());
    }
    if (filter.getFilterPosition() >= 0) {
      item.setText(2,"" + filter.getFilterPosition());
    }
    item.setText(3,filter.isFilterLastLine() ? BaseMessages.getString(PKG,"System.Combo.Yes") : BaseMessages.getString(PKG,"System.Combo.No"));
    item.setText(4,filter.isFilterPositive() ? BaseMessages.getString(PKG,"System.Combo.Yes") : BaseMessages.getString(PKG,"System.Combo.No"));
  }
  wDateLocale.setText(meta.content.dateFormatLocale.toString());
  wFields.removeEmptyRows();
  wFields.setRowNums();
  wFields.optWidth(true);
  wFilter.removeEmptyRows();
  wFilter.setRowNums();
  wFilter.optWidth(true);
  if (meta.additionalOutputFields.shortFilenameField != null) {
    wShortFileFieldName.setText(meta.additionalOutputFields.shortFilenameField);
  }
  if (meta.additionalOutputFields.pathField != null) {
    wPathFieldName.setText(meta.additionalOutputFields.pathField);
  }
  if (meta.additionalOutputFields.hiddenField != null) {
    wIsHiddenName.setText(meta.additionalOutputFields.hiddenField);
  }
  if (meta.additionalOutputFields.lastModificationField != null) {
    wLastModificationTimeName.setText(meta.additionalOutputFields.lastModificationField);
  }
  if (meta.additionalOutputFields.uriField != null) {
    wUriName.setText(meta.additionalOutputFields.uriField);
  }
  if (meta.additionalOutputFields.rootUriField != null) {
    wRootUriName.setText(meta.additionalOutputFields.rootUriField);
  }
  if (meta.additionalOutputFields.extensionField != null) {
    wExtensionFieldName.setText(meta.additionalOutputFields.extensionField);
  }
  if (meta.additionalOutputFields.sizeField != null) {
    wSizeFieldName.setText(meta.additionalOutputFields.sizeField);
  }
  setFlags();
  wStepname.selectAll();
  wStepname.setFocus();
}
