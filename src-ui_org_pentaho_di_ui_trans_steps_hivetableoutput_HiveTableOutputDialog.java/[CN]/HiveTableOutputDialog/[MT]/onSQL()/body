{
  try {
    HiveTableOutputMeta info=model.getStepMeta();
    RowMetaInterface prev=transMeta.getPrevStepFields(stepname);
    if (model.getTableNameInField() && model.getFieldWithTableName().length() > 0) {
      int idx=prev.indexOfValue(model.getFieldWithTableName());
      if (idx >= 0)       prev.removeValueMeta(idx);
    }
    StepMeta stepMeta=transMeta.findStep(stepname);
    SQLStatement sql=info.getSQLStatements(transMeta,stepMeta,prev,model.getTargetTableName());
    if (!sql.hasError()) {
      if (sql.hasSQL()) {
        SQLEditor sqledit=new SQLEditor(getShell(),SWT.NONE,model.getDatabaseMeta(),transMeta.getDbCache(),sql.getSQL());
        sqledit.open();
      }
 else {
        MessageBox mb=new MessageBox(getShell(),SWT.OK | SWT.ICON_INFORMATION);
        mb.setMessage(BaseMessages.getString(CLZ,"HiveTableOutputDialog.NoSQL.DialogMessage"));
        mb.setText(BaseMessages.getString(CLZ,"HiveTableOutputDialog.NoSQL.DialogTitle"));
        mb.open();
      }
    }
 else {
      MessageBox mb=new MessageBox(getShell(),SWT.OK | SWT.ICON_ERROR);
      mb.setMessage(sql.getError());
      mb.setText(BaseMessages.getString(CLZ,"System.Dialog.Error.Title"));
      mb.open();
    }
  }
 catch (  KettleException ke) {
    new ErrorDialog(getShell(),BaseMessages.getString(CLZ,"HiveTableOutputDialog.BuildSQLError.DialogTitle"),BaseMessages.getString(CLZ,"HiveTableOutputDialog.BuildSQLError.DialogMessage"),ke);
  }
}
