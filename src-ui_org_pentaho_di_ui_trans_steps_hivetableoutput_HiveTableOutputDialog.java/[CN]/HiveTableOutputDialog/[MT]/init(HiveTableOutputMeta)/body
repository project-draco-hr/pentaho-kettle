{
  try {
    model.setStepMeta(hiveTableOutputMeta);
    targetTableName=((XulTextbox)document.getElementById("target-table-name"));
    stepName=((XulTextbox)document.getElementById("step-name"));
    connectionName=((XulTextbox)document.getElementById("connection-name"));
    truncateTable=((XulCheckbox)document.getElementById("truncate-table"));
    loggingInterval=((XulTextbox)document.getElementById("logging-interval"));
    targetNameInField=((XulCheckbox)document.getElementById("table-name-in-field"));
    fieldWithTableName=((XulMenuList)document.getElementById("field-with-table-name"));
    storeTableName=((XulCheckbox)document.getElementById("store-table-name"));
    fieldsToColumns=((XulTree)document.getElementById("fields-to-columns"));
    stepName.setValue(stepname);
    connectionName.setValue(model.getConnectionName());
    targetTableName.setValue(model.getTargetTableName());
    truncateTable.setChecked(model.getTruncateTable());
    loggingInterval.setValue(String.valueOf(model.getLoggingInterval()));
    targetNameInField.setChecked(model.getTableNameInField());
    fieldWithTableName.setElements(getFieldNames());
    if (!Const.isEmpty(model.getFieldWithTableName())) {
      fieldWithTableName.setSelectedItem(model.getFieldWithTableName());
    }
    storeTableName.setChecked(model.getStoreTableName());
    fieldsToColumns.setElements(model.getFieldsToColumns());
    final BindingConvertor<String,Integer> bindingConverter=new BindingConvertor<String,Integer>(){
      public Integer sourceToTarget(      String value){
        return Integer.parseInt(value);
      }
      public String targetToSource(      Integer value){
        return value.toString();
      }
    }
;
    bf.setBindingType(Type.BI_DIRECTIONAL);
    bf.createBinding(model,HiveTableOutputModel.TRUNCATE_TABLE,truncateTable,"selected");
    bf.createBinding(model,HiveTableOutputModel.CONNECTION_NAME,connectionName,"value");
    bf.createBinding(model,HiveTableOutputModel.STORE_TABLE_NAME,storeTableName,"selected");
    bf.createBinding(model,HiveTableOutputModel.LOGGING_INTERVAL,loggingInterval,"value");
    bf.createBinding(model,HiveTableOutputModel.FIELD_WITH_TABLE_NAME,fieldWithTableName,"selectedItem");
    bf.createBinding(model,HiveTableOutputModel.TARGET_TABLE_NAME,targetTableName,"value");
    bf.createBinding(model,HiveTableOutputModel.FIELDS_TO_COLUMNS,fieldsToColumns,"elements");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
