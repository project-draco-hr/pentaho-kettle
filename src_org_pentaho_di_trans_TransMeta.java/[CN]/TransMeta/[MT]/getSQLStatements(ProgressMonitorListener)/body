{
  if (monitor != null)   monitor.beginTask(BaseMessages.getString(PKG,"TransMeta.Monitor.GettingTheSQLForTransformationTask.Title"),nrSteps() + 1);
  List<SQLStatement> stats=new ArrayList<SQLStatement>();
  for (int i=0; i < nrSteps(); i++) {
    StepMeta stepMeta=getStep(i);
    if (monitor != null)     monitor.subTask(BaseMessages.getString(PKG,"TransMeta.Monitor.GettingTheSQLForStepTask.Title","" + stepMeta));
    RowMetaInterface prev=getPrevStepFields(stepMeta);
    SQLStatement sql=stepMeta.getStepMetaInterface().getSQLStatements(this,stepMeta,prev);
    if (sql.getSQL() != null || sql.hasError()) {
      stats.add(sql);
    }
    if (monitor != null)     monitor.worked(1);
  }
  if (monitor != null)   monitor.subTask(BaseMessages.getString(PKG,"TransMeta.Monitor.GettingTheSQLForTransformationTask.Title2"));
  if (logConnection != null && (!Const.isEmpty(logTable) || !Const.isEmpty(stepPerformanceLogTable))) {
    Database db=new Database(logConnection);
    db.shareVariablesWith(this);
    try {
      db.connect();
      if (!Const.isEmpty(logTable)) {
        RowMetaInterface fields=Database.getTransLogrecordFields(false,useBatchId,logfieldUsed);
        String sql=db.getDDL(logTable,fields);
        if (sql != null && sql.length() > 0) {
          SQLStatement stat=new SQLStatement("<this transformation>",logConnection,sql);
          stats.add(stat);
        }
      }
      if (!Const.isEmpty(stepPerformanceLogTable)) {
        RowMetaInterface fields=Database.getStepPerformanceLogrecordFields();
        String sql=db.getDDL(logTable,fields);
        if (sql != null && sql.length() > 0) {
          SQLStatement stat=new SQLStatement("<this transformation>",logConnection,sql);
          stats.add(stat);
        }
      }
    }
 catch (    KettleDatabaseException dbe) {
      SQLStatement stat=new SQLStatement("<this transformation>",logConnection,null);
      stat.setError(BaseMessages.getString(PKG,"TransMeta.SQLStatement.ErrorDesc.ErrorObtainingTransformationLogTableInfo") + dbe.getMessage());
      stats.add(stat);
    }
 finally {
      db.disconnect();
    }
  }
  if (monitor != null)   monitor.worked(1);
  if (monitor != null)   monitor.done();
  return stats;
}
