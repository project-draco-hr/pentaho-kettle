{
  try {
    RowMetaAndData r=rep.getTransformation(getID());
    if (r != null) {
      setName(r.getString("NAME",null));
      description=r.getString("DESCRIPTION",null);
      extended_description=r.getString("EXTENDED_DESCRIPTION",null);
      trans_version=r.getString("TRANS_VERSION",null);
      trans_status=(int)r.getInteger("TRANS_STATUS",-1L);
      readStep=StepMeta.findStep(steps,r.getInteger("ID_STEP_READ",-1L));
      writeStep=StepMeta.findStep(steps,r.getInteger("ID_STEP_WRITE",-1L));
      inputStep=StepMeta.findStep(steps,r.getInteger("ID_STEP_INPUT",-1L));
      outputStep=StepMeta.findStep(steps,r.getInteger("ID_STEP_OUTPUT",-1L));
      updateStep=StepMeta.findStep(steps,r.getInteger("ID_STEP_UPDATE",-1L));
      long id_rejected=rep.getTransAttributeInteger(getID(),0,"ID_STEP_REJECTED");
      if (id_rejected > 0) {
        rejectedStep=StepMeta.findStep(steps,id_rejected);
      }
      logConnection=DatabaseMeta.findDatabase(databases,r.getInteger("ID_DATABASE_LOG",-1L));
      logTable=r.getString("TABLE_NAME_LOG",null);
      useBatchId=r.getBoolean("USE_BATCHID",false);
      logfieldUsed=r.getBoolean("USE_LOGFIELD",false);
      maxDateConnection=DatabaseMeta.findDatabase(databases,r.getInteger("ID_DATABASE_MAXDATE",-1L));
      maxDateTable=r.getString("TABLE_NAME_MAXDATE",null);
      maxDateField=r.getString("FIELD_NAME_MAXDATE",null);
      maxDateOffset=r.getNumber("OFFSET_MAXDATE",0.0);
      maxDateDifference=r.getNumber("DIFF_MAXDATE",0.0);
      createdUser=r.getString("CREATED_USER",null);
      createdDate=r.getDate("CREATED_DATE",null);
      modifiedUser=r.getString("MODIFIED_USER",null);
      modifiedDate=r.getDate("MODIFIED_DATE",null);
      sizeRowset=Const.ROWS_IN_ROWSET;
      Long val_size_rowset=r.getInteger("SIZE_ROWSET");
      if (val_size_rowset != null) {
        sizeRowset=val_size_rowset.intValue();
      }
      long id_directory=r.getInteger("ID_DIRECTORY",-1L);
      if (id_directory >= 0) {
        log.logDetailed(toString(),"ID_DIRECTORY=" + id_directory);
        directory=directoryTree.findDirectory(id_directory);
      }
      usingUniqueConnections=rep.getTransAttributeBoolean(getID(),0,Repository.TRANS_ATTRIBUTE_UNIQUE_CONNECTIONS);
      feedbackShown=!"N".equalsIgnoreCase(rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_FEEDBACK_SHOWN));
      feedbackSize=(int)rep.getTransAttributeInteger(getID(),0,Repository.TRANS_ATTRIBUTE_FEEDBACK_SIZE);
      usingThreadPriorityManagment=!"N".equalsIgnoreCase(rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_USING_THREAD_PRIORITIES));
      capturingStepPerformanceSnapShots=rep.getTransAttributeBoolean(getID(),0,Repository.TRANS_ATTRIBUTE_CAPTURE_STEP_PERFORMANCE);
      stepPerformanceCapturingDelay=rep.getTransAttributeInteger(getID(),0,Repository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_CAPTURING_DELAY);
      stepPerformanceLogTable=rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_LOG_TABLE);
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(Messages.getString("TransMeta.Exception.UnableToLoadTransformationInfoFromRepository"),dbe);
  }
 finally {
    initializeVariablesFrom(null);
    setInternalKettleVariables();
  }
}
