{
  try {
    RowMetaAndData r=rep.getTransformation(getID());
    if (r != null) {
      setName(r.getString(Repository.FIELD_TRANSFORMATION_NAME,null));
      description=r.getString(Repository.FIELD_TRANSFORMATION_DESCRIPTION,null);
      extended_description=r.getString(Repository.FIELD_TRANSFORMATION_EXTENDED_DESCRIPTION,null);
      trans_version=r.getString(Repository.FIELD_TRANSFORMATION_TRANS_VERSION,null);
      trans_status=(int)r.getInteger(Repository.FIELD_TRANSFORMATION_TRANS_STATUS,-1L);
      readStep=StepMeta.findStep(steps,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_STEP_READ,-1L));
      writeStep=StepMeta.findStep(steps,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_STEP_WRITE,-1L));
      inputStep=StepMeta.findStep(steps,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_STEP_INPUT,-1L));
      outputStep=StepMeta.findStep(steps,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_STEP_OUTPUT,-1L));
      updateStep=StepMeta.findStep(steps,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_STEP_UPDATE,-1L));
      long id_rejected=rep.getTransAttributeInteger(getID(),0,Repository.TRANS_ATTRIBUTE_ID_STEP_REJECTED);
      if (id_rejected > 0) {
        rejectedStep=StepMeta.findStep(steps,id_rejected);
      }
      logConnection=DatabaseMeta.findDatabase(databases,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_DATABASE_LOG,-1L));
      logTable=r.getString(Repository.FIELD_TRANSFORMATION_TABLE_NAME_LOG,null);
      useBatchId=r.getBoolean(Repository.FIELD_TRANSFORMATION_USE_BATCHID,false);
      logfieldUsed=r.getBoolean(Repository.FIELD_TRANSFORMATION_USE_LOGFIELD,false);
      maxDateConnection=DatabaseMeta.findDatabase(databases,r.getInteger(Repository.FIELD_TRANSFORMATION_ID_DATABASE_MAXDATE,-1L));
      maxDateTable=r.getString(Repository.FIELD_TRANSFORMATION_TABLE_NAME_MAXDATE,null);
      maxDateField=r.getString(Repository.FIELD_TRANSFORMATION_FIELD_NAME_MAXDATE,null);
      maxDateOffset=r.getNumber(Repository.FIELD_TRANSFORMATION_OFFSET_MAXDATE,0.0);
      maxDateDifference=r.getNumber(Repository.FIELD_TRANSFORMATION_DIFF_MAXDATE,0.0);
      createdUser=r.getString(Repository.FIELD_TRANSFORMATION_CREATED_USER,null);
      createdDate=r.getDate(Repository.FIELD_TRANSFORMATION_CREATED_DATE,null);
      modifiedUser=r.getString(Repository.FIELD_TRANSFORMATION_MODIFIED_USER,null);
      modifiedDate=r.getDate(Repository.FIELD_TRANSFORMATION_MODIFIED_DATE,null);
      sizeRowset=Const.ROWS_IN_ROWSET;
      Long val_size_rowset=r.getInteger(Repository.FIELD_TRANSFORMATION_SIZE_ROWSET);
      if (val_size_rowset != null) {
        sizeRowset=val_size_rowset.intValue();
      }
      long id_directory=r.getInteger(Repository.FIELD_TRANSFORMATION_ID_DIRECTORY,-1L);
      if (id_directory >= 0) {
        if (log.isDetailed())         log.logDetailed(toString(),"ID_DIRECTORY=" + id_directory);
        directory=directoryTree.findDirectory(id_directory);
      }
      usingUniqueConnections=rep.getTransAttributeBoolean(getID(),0,Repository.TRANS_ATTRIBUTE_UNIQUE_CONNECTIONS);
      feedbackShown=!"N".equalsIgnoreCase(rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_FEEDBACK_SHOWN));
      feedbackSize=(int)rep.getTransAttributeInteger(getID(),0,Repository.TRANS_ATTRIBUTE_FEEDBACK_SIZE);
      usingThreadPriorityManagment=!"N".equalsIgnoreCase(rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_USING_THREAD_PRIORITIES));
      capturingStepPerformanceSnapShots=rep.getTransAttributeBoolean(getID(),0,Repository.TRANS_ATTRIBUTE_CAPTURE_STEP_PERFORMANCE);
      stepPerformanceCapturingDelay=rep.getTransAttributeInteger(getID(),0,Repository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_CAPTURING_DELAY);
      stepPerformanceLogTable=rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_LOG_TABLE);
      logSizeLimit=rep.getTransAttributeString(getID(),0,Repository.TRANS_ATTRIBUTE_LOG_SIZE_LIMIT);
      loadRepParameters(rep);
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"TransMeta.Exception.UnableToLoadTransformationInfoFromRepository"),dbe);
  }
 finally {
    initializeVariablesFrom(null);
    setInternalKettleVariables();
  }
}
