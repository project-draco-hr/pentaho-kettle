{
  KettleEnvironment.init();
  PluginRegistry.init(true);
  List<String> attributes=Arrays.asList("schemaName","tableName","sqlldr","controlFile","dataFile","logFile","badFile","discardFile","commitSize","bindSize","readSize","maxErrors","loadMethod","loadAction","encoding","characterSetName","directPath","eraseFiles","dbNameOverride","failOnWarning","failOnError","parallel","altRecordTerm","fieldTable","fieldStream","dateMask","databaseMeta");
  Map<String,String> getterMap=new HashMap<String,String>(){
{
      put("schemaName","getSchemaName");
      put("tableName","getTableName");
      put("sqlldr","getSqlldr");
      put("controlFile","getControlFile");
      put("dataFile","getDataFile");
      put("logFile","getLogFile");
      put("badFile","getBadFile");
      put("discardFile","getDiscardFile");
      put("commitSize","getCommitSize");
      put("bindSize","getBindSize");
      put("readSize","getReadSize");
      put("maxErrors","getMaxErrors");
      put("loadMethod","getLoadMethod");
      put("loadAction","getLoadAction");
      put("encoding","getEncoding");
      put("characterSetName","getCharacterSetName");
      put("directPath","isDirectPath");
      put("eraseFiles","isEraseFiles");
      put("dbNameOverride","getDbNameOverride");
      put("failOnWarning","isFailOnWarning");
      put("failOnError","isFailOnError");
      put("parallel","isParallel");
      put("altRecordTerm","getAltRecordTerm");
      put("fieldTable","getFieldTable");
      put("fieldStream","getFieldStream");
      put("dateMask","getDateMask");
      put("databaseMeta","getDatabaseMeta");
    }
  }
;
  Map<String,String> setterMap=new HashMap<String,String>(){
{
      put("schemaName","setSchemaName");
      put("tableName","setTableName");
      put("sqlldr","setSqlldr");
      put("controlFile","setControlFile");
      put("dataFile","setDataFile");
      put("logFile","setLogFile");
      put("badFile","setBadFile");
      put("discardFile","setDiscardFile");
      put("commitSize","setCommitSize");
      put("bindSize","setBindSize");
      put("readSize","setReadSize");
      put("maxErrors","setMaxErrors");
      put("loadMethod","setLoadMethod");
      put("loadAction","setLoadAction");
      put("encoding","setEncoding");
      put("characterSetName","setCharacterSetName");
      put("directPath","setDirectPath");
      put("eraseFiles","setEraseFiles");
      put("dbNameOverride","setDbNameOverride");
      put("failOnWarning","setFailOnWarning");
      put("failOnError","setFailOnError");
      put("parallel","setParallel");
      put("altRecordTerm","setAltRecordTerm");
      put("fieldTable","setFieldTable");
      put("fieldStream","setFieldStream");
      put("dateMask","setDateMask");
      put("databaseMeta","setDatabaseMeta");
    }
  }
;
  FieldLoadSaveValidator<String[]> stringArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new StringLoadSaveValidator(),5);
  FieldLoadSaveValidator<String[]> datemaskArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new DateMaskLoadSaveValidator(),5);
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  attrValidatorMap.put("fieldTable",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldStream",stringArrayLoadSaveValidator);
  attrValidatorMap.put("dateMask",datemaskArrayLoadSaveValidator);
  attrValidatorMap.put("databaseMeta",new DatabaseMetaLoadSaveValidator());
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  loadSaveTester=new LoadSaveTester(testMetaClass,attributes,getterMap,setterMap,attrValidatorMap,typeValidatorMap);
}
