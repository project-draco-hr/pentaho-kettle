{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  ModifyListener lsTableMod=new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      input.setChanged();
      setModuleFieldCombo();
    }
  }
;
  SelectionAdapter lsSelection=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      setModuleFieldCombo();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.DialogTitle"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.General.Tab"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout generalLayout=new FormLayout();
  generalLayout.marginWidth=3;
  generalLayout.marginHeight=3;
  wGeneralComp.setLayout(generalLayout);
  wConnectionGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wConnectionGroup);
  wConnectionGroup.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.ConnectionGroup.Label"));
  FormLayout connectionGroupLayout=new FormLayout();
  connectionGroupLayout.marginWidth=10;
  connectionGroupLayout.marginHeight=10;
  wConnectionGroup.setLayout(connectionGroupLayout);
  wURL=new LabelTextVar(transMeta,wConnectionGroup,BaseMessages.getString(PKG,"SalesforceInsertDialog.URL.Label"),BaseMessages.getString(PKG,"SalesforceInsertDialog.URL.Tooltip"));
  props.setLook(wURL);
  wURL.addModifyListener(lsMod);
  fdURL=new FormData();
  fdURL.left=new FormAttachment(0,0);
  fdURL.top=new FormAttachment(wStepname,margin);
  fdURL.right=new FormAttachment(100,0);
  wURL.setLayoutData(fdURL);
  wUserName=new LabelTextVar(transMeta,wConnectionGroup,BaseMessages.getString(PKG,"SalesforceInsertDialog.User.Label"),BaseMessages.getString(PKG,"SalesforceInsertDialog.User.Tooltip"));
  props.setLook(wUserName);
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(0,0);
  fdUserName.top=new FormAttachment(wURL,margin);
  fdUserName.right=new FormAttachment(100,0);
  wUserName.setLayoutData(fdUserName);
  wPassword=new LabelTextVar(transMeta,wConnectionGroup,BaseMessages.getString(PKG,"SalesforceInsertDialog.Password.Label"),BaseMessages.getString(PKG,"SalesforceInsertDialog.Password.Tooltip"));
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(0,0);
  fdPassword.top=new FormAttachment(wUserName,margin);
  fdPassword.right=new FormAttachment(100,0);
  wPassword.setLayoutData(fdPassword);
  wPassword.getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      DatabaseDialog.checkPasswordVisible(wPassword.getTextWidget());
    }
  }
);
  wTest=new Button(wConnectionGroup,SWT.PUSH);
  wTest.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.TestConnection.Label"));
  props.setLook(wTest);
  fdTest=new FormData();
  wTest.setToolTipText(BaseMessages.getString(PKG,"SalesforceInsertDialog.TestConnection.Tooltip"));
  fdTest.top=new FormAttachment(wPassword,margin);
  fdTest.right=new FormAttachment(100,0);
  wTest.setLayoutData(fdTest);
  fdConnectionGroup=new FormData();
  fdConnectionGroup.left=new FormAttachment(0,margin);
  fdConnectionGroup.top=new FormAttachment(wStepname,margin);
  fdConnectionGroup.right=new FormAttachment(100,-margin);
  wConnectionGroup.setLayoutData(fdConnectionGroup);
  wSettingsGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wSettingsGroup);
  wSettingsGroup.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.SettingsGroup.Label"));
  FormLayout settingGroupLayout=new FormLayout();
  settingGroupLayout.marginWidth=10;
  settingGroupLayout.marginHeight=10;
  wSettingsGroup.setLayout(settingGroupLayout);
  wlTimeOut=new Label(wSettingsGroup,SWT.RIGHT);
  wlTimeOut.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.TimeOut.Label"));
  props.setLook(wlTimeOut);
  fdlTimeOut=new FormData();
  fdlTimeOut.left=new FormAttachment(0,0);
  fdlTimeOut.top=new FormAttachment(wSettingsGroup,margin);
  fdlTimeOut.right=new FormAttachment(middle,-margin);
  wlTimeOut.setLayoutData(fdlTimeOut);
  wTimeOut=new TextVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTimeOut);
  wTimeOut.addModifyListener(lsMod);
  fdTimeOut=new FormData();
  fdTimeOut.left=new FormAttachment(middle,0);
  fdTimeOut.top=new FormAttachment(wSettingsGroup,margin);
  fdTimeOut.right=new FormAttachment(100,0);
  wTimeOut.setLayoutData(fdTimeOut);
  wlUseCompression=new Label(wSettingsGroup,SWT.RIGHT);
  wlUseCompression.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.UseCompression.Label"));
  props.setLook(wlUseCompression);
  fdlUseCompression=new FormData();
  fdlUseCompression.left=new FormAttachment(0,0);
  fdlUseCompression.top=new FormAttachment(wTimeOut,margin);
  fdlUseCompression.right=new FormAttachment(middle,-margin);
  wlUseCompression.setLayoutData(fdlUseCompression);
  wUseCompression=new Button(wSettingsGroup,SWT.CHECK);
  props.setLook(wUseCompression);
  wUseCompression.setToolTipText(BaseMessages.getString(PKG,"SalesforceInsertDialog.UseCompression.Tooltip"));
  fdUseCompression=new FormData();
  fdUseCompression.left=new FormAttachment(middle,0);
  fdUseCompression.top=new FormAttachment(wTimeOut,margin);
  wUseCompression.setLayoutData(fdUseCompression);
  wlRollbackAllChangesOnError=new Label(wSettingsGroup,SWT.RIGHT);
  wlRollbackAllChangesOnError.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.RollbackAllChangesOnError.Label"));
  props.setLook(wlRollbackAllChangesOnError);
  fdlRollbackAllChangesOnError=new FormData();
  fdlRollbackAllChangesOnError.left=new FormAttachment(0,0);
  fdlRollbackAllChangesOnError.top=new FormAttachment(wUseCompression,margin);
  fdlRollbackAllChangesOnError.right=new FormAttachment(middle,-margin);
  wlRollbackAllChangesOnError.setLayoutData(fdlRollbackAllChangesOnError);
  wRollbackAllChangesOnError=new Button(wSettingsGroup,SWT.CHECK);
  props.setLook(wRollbackAllChangesOnError);
  wRollbackAllChangesOnError.setToolTipText(BaseMessages.getString(PKG,"SalesforceInsertDialog.RollbackAllChangesOnError.Tooltip"));
  fdRollbackAllChangesOnError=new FormData();
  fdRollbackAllChangesOnError.left=new FormAttachment(middle,0);
  fdRollbackAllChangesOnError.top=new FormAttachment(wUseCompression,margin);
  wRollbackAllChangesOnError.setLayoutData(fdRollbackAllChangesOnError);
  wlBatchSize=new Label(wSettingsGroup,SWT.RIGHT);
  wlBatchSize.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.Limit.Label"));
  props.setLook(wlBatchSize);
  fdlBatchSize=new FormData();
  fdlBatchSize.left=new FormAttachment(0,0);
  fdlBatchSize.top=new FormAttachment(wRollbackAllChangesOnError,margin);
  fdlBatchSize.right=new FormAttachment(middle,-margin);
  wlBatchSize.setLayoutData(fdlBatchSize);
  wBatchSize=new TextVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wBatchSize);
  wBatchSize.addModifyListener(lsMod);
  fdBatchSize=new FormData();
  fdBatchSize.left=new FormAttachment(middle,0);
  fdBatchSize.top=new FormAttachment(wRollbackAllChangesOnError,margin);
  fdBatchSize.right=new FormAttachment(100,0);
  wBatchSize.setLayoutData(fdBatchSize);
  wlModule=new Label(wSettingsGroup,SWT.RIGHT);
  wlModule.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.Module.Label"));
  props.setLook(wlModule);
  fdlModule=new FormData();
  fdlModule.left=new FormAttachment(0,0);
  fdlModule.top=new FormAttachment(wBatchSize,margin);
  fdlModule.right=new FormAttachment(middle,-margin);
  wlModule.setLayoutData(fdlModule);
  wModule=new ComboVar(transMeta,wSettingsGroup,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wModule.setEditable(true);
  props.setLook(wModule);
  wModule.addModifyListener(lsTableMod);
  wModule.addSelectionListener(lsSelection);
  fdModule=new FormData();
  fdModule.left=new FormAttachment(middle,0);
  fdModule.top=new FormAttachment(wBatchSize,margin);
  fdModule.right=new FormAttachment(100,-margin);
  wModule.setLayoutData(fdModule);
  wModule.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      getModulesListError=false;
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      if (Const.isEmpty(wURL.getText()) || Const.isEmpty(wUserName.getText()) || Const.isEmpty(wPassword.getText())|| (getModulesListError)) {
        return;
      }
      Cursor busy=new Cursor(shell.getDisplay(),SWT.CURSOR_WAIT);
      shell.setCursor(busy);
      getModulesList();
      shell.setCursor(null);
      busy.dispose();
    }
  }
);
  fdSettingsGroup=new FormData();
  fdSettingsGroup.left=new FormAttachment(0,margin);
  fdSettingsGroup.top=new FormAttachment(wConnectionGroup,margin);
  fdSettingsGroup.right=new FormAttachment(100,-margin);
  wSettingsGroup.setLayoutData(fdSettingsGroup);
  wOutFieldsGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wOutFieldsGroup);
  wOutFieldsGroup.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.OutFieldsGroup.Label"));
  FormLayout OutFieldsGroupLayout=new FormLayout();
  OutFieldsGroupLayout.marginWidth=10;
  OutFieldsGroupLayout.marginHeight=10;
  wOutFieldsGroup.setLayout(OutFieldsGroupLayout);
  wlSalesforceIDFieldName=new Label(wOutFieldsGroup,SWT.RIGHT);
  wlSalesforceIDFieldName.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.SalesforceIDFieldName.Label"));
  props.setLook(wlSalesforceIDFieldName);
  fdlSalesforceIDFieldName=new FormData();
  fdlSalesforceIDFieldName.left=new FormAttachment(0,0);
  fdlSalesforceIDFieldName.top=new FormAttachment(wSettingsGroup,margin);
  fdlSalesforceIDFieldName.right=new FormAttachment(middle,-margin);
  wlSalesforceIDFieldName.setLayoutData(fdlSalesforceIDFieldName);
  wSalesforceIDFieldName=new TextVar(transMeta,wOutFieldsGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSalesforceIDFieldName);
  wSalesforceIDFieldName.setToolTipText(BaseMessages.getString(PKG,"SalesforceInsertDialog.SalesforceIDFieldName.Tooltip"));
  wSalesforceIDFieldName.addModifyListener(lsMod);
  fdSalesforceIDFieldName=new FormData();
  fdSalesforceIDFieldName.left=new FormAttachment(middle,0);
  fdSalesforceIDFieldName.top=new FormAttachment(wSettingsGroup,margin);
  fdSalesforceIDFieldName.right=new FormAttachment(100,0);
  wSalesforceIDFieldName.setLayoutData(fdSalesforceIDFieldName);
  fdOutFieldsGroup=new FormData();
  fdOutFieldsGroup.left=new FormAttachment(0,margin);
  fdOutFieldsGroup.top=new FormAttachment(wSettingsGroup,margin);
  fdOutFieldsGroup.right=new FormAttachment(100,-margin);
  wOutFieldsGroup.setLayoutData(fdOutFieldsGroup);
  wlReturn=new Label(wGeneralComp,SWT.NONE);
  wlReturn.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.UpdateFields.Label"));
  props.setLook(wlReturn);
  fdlReturn=new FormData();
  fdlReturn.left=new FormAttachment(0,0);
  fdlReturn.top=new FormAttachment(wOutFieldsGroup,margin);
  wlReturn.setLayoutData(fdlReturn);
  int UpInsCols=3;
  int UpInsRows=(input.getUpdateLookup() != null ? input.getUpdateLookup().length : 1);
  ciReturn=new ColumnInfo[UpInsCols];
  ciReturn[0]=new ColumnInfo(BaseMessages.getString(PKG,"SalesforceInsertDialog.ColumnInfo.TableField"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{""},false);
  ciReturn[1]=new ColumnInfo(BaseMessages.getString(PKG,"SalesforceInsertDialog.ColumnInfo.StreamField"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{""},false);
  ciReturn[2]=new ColumnInfo(BaseMessages.getString(PKG,"SalesforceInsertDialog.ColumnInfo.UseExternalId"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{"Y","N"});
  ciReturn[2].setToolTip(BaseMessages.getString(PKG,"SalesforceInsertDialog.ColumnInfo.UseExternalId.Tooltip"));
  tableFieldColumns.add(ciReturn[0]);
  wReturn=new TableView(transMeta,wGeneralComp,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.V_SCROLL| SWT.H_SCROLL,ciReturn,UpInsRows,lsMod,props);
  wGetLU=new Button(wGeneralComp,SWT.PUSH);
  wGetLU.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.GetAndUpdateFields.Label"));
  fdGetLU=new FormData();
  fdGetLU.top=new FormAttachment(wlReturn,margin);
  fdGetLU.right=new FormAttachment(100,0);
  wGetLU.setLayoutData(fdGetLU);
  wDoMapping=new Button(wGeneralComp,SWT.PUSH);
  wDoMapping.setText(BaseMessages.getString(PKG,"SalesforceInsertDialog.EditMapping.Label"));
  fdDoMapping=new FormData();
  fdDoMapping.top=new FormAttachment(wGetLU,margin);
  fdDoMapping.right=new FormAttachment(100,0);
  wDoMapping.setLayoutData(fdDoMapping);
  wDoMapping.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event arg0){
      generateMappings();
    }
  }
);
  fdReturn=new FormData();
  fdReturn.left=new FormAttachment(0,0);
  fdReturn.top=new FormAttachment(wlReturn,margin);
  fdReturn.right=new FormAttachment(wGetLU,-5 * margin);
  fdReturn.bottom=new FormAttachment(100,-2 * margin);
  wReturn.setLayoutData(fdReturn);
  final Runnable runnable=new Runnable(){
    public void run(){
      StepMeta stepMeta=transMeta.findStep(stepname);
      if (stepMeta != null) {
        try {
          RowMetaInterface row=transMeta.getPrevStepFields(stepMeta);
          for (int i=0; i < row.size(); i++) {
            inputFields.put(row.getValueMeta(i).getName(),Integer.valueOf(i));
          }
          setComboBoxes();
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              if (!wReturn.isDisposed()) {
                for (int i=0; i < wReturn.table.getItemCount(); i++) {
                  TableItem it=wReturn.table.getItem(i);
                  if (!Const.isEmpty(it.getText(2))) {
                    if (!inputFields.containsKey(it.getText(2))) {
                      it.setBackground(GUIResource.getInstance().getColorRed());
                    }
                  }
                }
              }
            }
          }
);
        }
 catch (        KettleException e) {
          logError(BaseMessages.getString(PKG,"System.Dialog.GetFieldsFailed.Message"));
        }
      }
    }
  }
;
  new Thread(runnable).start();
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(wStepname,margin);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,null);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(wOK,-margin);
  wTabFolder.setLayoutData(fdTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsTest=new Listener(){
    public void handleEvent(    Event e){
      test();
    }
  }
;
  lsGetLU=new Listener(){
    public void handleEvent(    Event e){
      getUpdate();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wGetLU.addListener(SWT.Selection,lsGetLU);
  wTest.addListener(SWT.Selection,lsTest);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  setSize();
  getData(input);
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return stepname;
}
