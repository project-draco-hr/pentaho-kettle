{
  KettleEnvironment.init();
  PluginRegistry.init(true);
  List<String> attributes=Arrays.asList("script","matcher","resultfieldname","usevar","allowcapturegroups","replacefields","canoneq","caseinsensitive","comment","dotall","multiline","unicode","unix","fieldName","fieldFormat","fieldGroup","fieldDecimal","fieldCurrency","fieldNullIf","fieldIfNull","fieldTrimType","fieldLength","fieldPrecision","fieldType");
  Map<String,String> getterMap=new HashMap<String,String>(){
{
      put("script","getScript");
      put("matcher","getMatcher");
      put("resultfieldname","getResultFieldName");
      put("usevar","isUseVariableInterpolationFlagSet");
      put("allowcapturegroups","isAllowCaptureGroupsFlagSet");
      put("replacefields","isReplacefields");
      put("canoneq","isCanonicalEqualityFlagSet");
      put("caseinsensitive","isCaseInsensitiveFlagSet");
      put("comment","isCommentFlagSet");
      put("dotall","isDotAllFlagSet");
      put("multiline","isMultilineFlagSet");
      put("unicode","isUnicodeFlagSet");
      put("unix","isUnixLineEndingsFlagSet");
      put("fieldName","getFieldName");
      put("fieldFormat","getFieldFormat");
      put("fieldGroup","getFieldGroup");
      put("fieldDecimal","getFieldDecimal");
      put("fieldCurrency","getFieldCurrency");
      put("fieldNullIf","getFieldNullIf");
      put("fieldIfNull","getFieldIfNull");
      put("fieldTrimType","getFieldTrimType");
      put("fieldLength","getFieldLength");
      put("fieldPrecision","getFieldPrecision");
      put("fieldType","getFieldType");
    }
  }
;
  Map<String,String> setterMap=new HashMap<String,String>(){
{
      put("script","setScript");
      put("matcher","setMatcher");
      put("resultfieldname","setResultFieldName");
      put("usevar","setUseVariableInterpolationFlag");
      put("allowcapturegroups","setAllowCaptureGroupsFlag");
      put("replacefields","setReplacefields");
      put("canoneq","setCanonicalEqualityFlag");
      put("caseinsensitive","setCaseInsensitiveFlag");
      put("comment","setCommentFlag");
      put("dotall","setDotAllFlag");
      put("multiline","setMultilineFlag");
      put("unicode","setUnicodeFlag");
      put("unix","setUnixLineEndingsFlag");
      put("fieldName","setFieldName");
      put("fieldFormat","setFieldFormat");
      put("fieldGroup","setFieldGroup");
      put("fieldDecimal","setFieldDecimal");
      put("fieldCurrency","setFieldCurrency");
      put("fieldNullIf","setFieldNullIf");
      put("fieldIfNull","setFieldIfNull");
      put("fieldTrimType","setFieldTrimType");
      put("fieldLength","setFieldLength");
      put("fieldPrecision","setFieldPrecision");
      put("fieldType","setFieldType");
    }
  }
;
  FieldLoadSaveValidator<String[]> stringArrayLoadSaveValidator=new ArrayLoadSaveValidator<String>(new StringLoadSaveValidator(),5);
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  attrValidatorMap.put("fieldName",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldFormat",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldGroup",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldDecimal",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldCurrency",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldNullIf",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldIfNull",stringArrayLoadSaveValidator);
  attrValidatorMap.put("fieldTrimType",new PrimitiveIntArrayLoadSaveValidator(new IntLoadSaveValidator(ValueMetaBase.getTrimTypeCodes().length),5));
  attrValidatorMap.put("fieldLength",new PrimitiveIntArrayLoadSaveValidator(new IntLoadSaveValidator(100),5));
  attrValidatorMap.put("fieldPrecision",new PrimitiveIntArrayLoadSaveValidator(new IntLoadSaveValidator(9),5));
  attrValidatorMap.put("fieldType",new PrimitiveIntArrayLoadSaveValidator(new IntLoadSaveValidator(9),5));
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  loadSaveTester=new LoadSaveTester(testMetaClass,attributes,new ArrayList<String>(),new ArrayList<String>(),getterMap,setterMap,attrValidatorMap,typeValidatorMap,this);
}
