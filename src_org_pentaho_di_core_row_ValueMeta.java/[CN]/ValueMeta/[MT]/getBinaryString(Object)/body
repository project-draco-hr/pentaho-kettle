{
  try {
    if (object == null) {
      return null;
    }
switch (type) {
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
        return convertStringToBinaryString((String)object);
case STORAGE_TYPE_BINARY_STRING:
      return (byte[])object;
case STORAGE_TYPE_INDEXED:
    return convertStringToBinaryString((String)index[((Integer)object).intValue()]);
default :
  throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(convertDateToString((Date)object));
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(convertDateToString((Date)index[((Integer)object).intValue()]));
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(convertNumberToString((Double)object));
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(convertNumberToString((Double)index[((Integer)object).intValue()]));
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(convertIntegerToString((Long)object));
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(convertIntegerToString((Long)index[((Integer)object).intValue()]));
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(convertBigNumberToString((BigDecimal)object));
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(convertBigNumberToString((BigDecimal)index[((Integer)object).intValue()]));
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(convertBooleanToString((Boolean)object));
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(convertBooleanToString((Boolean)index[((Integer)object).intValue()]));
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BINARY:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return (byte[])object;
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return (byte[])index[((Integer)object).intValue()];
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_SERIALIZABLE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString(object.toString());
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString(index[((Integer)object).intValue()].toString());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
 catch (ClassCastException e) {
throw new KettleValueException(toString() + " : There was a data type error: the data type of " + object.getClass().getName()+ " object ["+ object+ "] does not correspond to value meta ["+ toStringMeta()+ "]");
}
}
