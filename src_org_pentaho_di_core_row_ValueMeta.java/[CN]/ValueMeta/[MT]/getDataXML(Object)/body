{
  StringBuffer xml=new StringBuffer();
  xml.append(XMLHandler.openTag(XML_DATA_TAG));
  if (object != null) {
switch (storageType) {
case STORAGE_TYPE_NORMAL:
switch (getType()) {
case TYPE_STRING:
        xml.append(XMLHandler.addTagValue("string-value",(String)object));
      break;
case TYPE_NUMBER:
    xml.append(XMLHandler.addTagValue("number-value",(Double)object));
  break;
case TYPE_INTEGER:
xml.append(XMLHandler.addTagValue("integer-value",(Long)object));
break;
case TYPE_DATE:
xml.append(XMLHandler.addTagValue("date-value",(Date)object));
break;
case TYPE_BIGNUMBER:
xml.append(XMLHandler.addTagValue("bignumber-value",(BigDecimal)object));
break;
case TYPE_BOOLEAN:
xml.append(XMLHandler.addTagValue("boolean-value",(Boolean)object));
break;
case TYPE_BINARY:
xml.append(XMLHandler.addTagValue("binary-value",(byte[])object));
break;
default :
throw new IOException(toString() + " : Unable to serialize data type to XML " + getType());
}
break;
case STORAGE_TYPE_BINARY_STRING:
xml.append(XMLHandler.addTagValue("binary-string",(byte[])object));
break;
case STORAGE_TYPE_INDEXED:
xml.append(XMLHandler.addTagValue("index-value",(Integer)object));
break;
default :
throw new IOException(toString() + " : Unknown storage type " + getStorageType());
}
}
xml.append(XMLHandler.closeTag(XML_META_TAG));
return xml.toString();
}
