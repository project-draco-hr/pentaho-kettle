{
  try {
    if (object == null) {
      return null;
    }
    String string;
switch (type) {
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
        string=(String)object;
      break;
case STORAGE_TYPE_BINARY_STRING:
    string=convertBinaryStringToString((byte[])object);
  break;
case STORAGE_TYPE_INDEXED:
string=(String)index[((Integer)object).intValue()];
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertDateToString((Date)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertDateToString((Date)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertNumberToString((Double)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertNumberToString((Double)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertIntegerToString((Long)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertIntegerToString((Long)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBigNumberToString((BigDecimal)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertBigNumberToString((BigDecimal)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBooleanToString((Boolean)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertBooleanToString((Boolean)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_BINARY:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=convertBinaryStringToString((byte[])index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
case TYPE_SERIALIZABLE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=object.toString();
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=index[((Integer)object).intValue()].toString();
break;
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
break;
default :
throw new KettleValueException("Unknown type " + type + " specified.");
}
if (isOutputPaddingEnabled() && getLength() > 0) {
string=ValueDataUtil.rightPad(string,getLength());
}
switch (getTrimType()) {
case TRIM_TYPE_NONE:
break;
case TRIM_TYPE_RIGHT:
string=ValueDataUtil.rightTrim(string);
break;
case TRIM_TYPE_LEFT:
string=ValueDataUtil.leftTrim(string);
break;
case TRIM_TYPE_BOTH:
string=ValueDataUtil.trim(string);
break;
default :
break;
}
return string;
}
 catch (ClassCastException e) {
throw new KettleValueException("There was a data type error: the data type of " + object.getClass().getName() + " object ["+ object+ "] does not correspond to value meta ["+ toStringMeta()+ "]");
}
}
