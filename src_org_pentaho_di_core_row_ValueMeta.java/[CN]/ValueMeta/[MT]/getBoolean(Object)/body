{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (Boolean)object;
case STORAGE_TYPE_BINARY_STRING:
    return convertStringToBoolean(convertBinaryStringToString((byte[])object));
case STORAGE_TYPE_INDEXED:
  return (Boolean)index[((Integer)object).intValue()];
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBoolean((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToBoolean(convertBinaryStringToString((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToBoolean((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertIntegerToBoolean((Long)object);
case STORAGE_TYPE_BINARY_STRING:
return convertIntegerToBoolean(convertStringToInteger(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertIntegerToBoolean((Long)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertNumberToBoolean((Double)object);
case STORAGE_TYPE_BINARY_STRING:
return convertNumberToBoolean(convertStringToNumber(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertNumberToBoolean((Double)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBigNumberToBoolean((BigDecimal)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBigNumberToBoolean(convertStringToBigNumber(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertBigNumberToBoolean((BigDecimal)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_DATE:
throw new KettleValueException("I don't know how to convert date values to booleans.");
case TYPE_BINARY:
throw new KettleValueException("I don't know how to convert binary values to booleans.");
case TYPE_SERIALIZABLE:
throw new KettleValueException("I don't know how to convert serializable values to booleans.");
default :
throw new KettleValueException("Unknown type " + type + " specified.");
}
}
