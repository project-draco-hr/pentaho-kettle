{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (Double)object;
case STORAGE_TYPE_BINARY_STRING:
    return (Double)convertBinaryStringToNativeType((byte[])object);
case STORAGE_TYPE_INDEXED:
  return (Double)index[((Integer)object).intValue()];
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToNumber((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToNumber((String)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToNumber((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertDateToNumber((Date)object);
case STORAGE_TYPE_BINARY_STRING:
return convertDateToNumber((Date)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return new Double(((Date)index[((Integer)object).intValue()]).getTime());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new Double(((Long)object).doubleValue());
case STORAGE_TYPE_BINARY_STRING:
return new Double(((Long)convertBinaryStringToNativeType((byte[])object)).doubleValue());
case STORAGE_TYPE_INDEXED:
return new Double(((Long)index[((Integer)object).intValue()]).doubleValue());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new Double(((BigDecimal)object).doubleValue());
case STORAGE_TYPE_BINARY_STRING:
return new Double(((BigDecimal)convertBinaryStringToNativeType((byte[])object)).doubleValue());
case STORAGE_TYPE_INDEXED:
return new Double(((BigDecimal)index[((Integer)object).intValue()]).doubleValue());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBooleanToNumber((Boolean)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBooleanToNumber((Boolean)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertBooleanToNumber((Boolean)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BINARY:
throw new KettleValueException(toString() + " : I don't know how to convert binary values to numbers.");
case TYPE_SERIALIZABLE:
throw new KettleValueException(toString() + " : I don't know how to convert serializable values to numbers.");
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
