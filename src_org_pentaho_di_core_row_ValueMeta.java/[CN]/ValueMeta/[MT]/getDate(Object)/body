{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (Date)object;
case STORAGE_TYPE_BINARY_STRING:
    return convertStringToDate(convertBinaryStringToString((byte[])object));
case STORAGE_TYPE_INDEXED:
  return (Date)index[((Integer)object).intValue()];
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToDate((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToDate(convertBinaryStringToString((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToDate((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertNumberToDate((Double)object);
case STORAGE_TYPE_BINARY_STRING:
return convertNumberToDate(convertStringToNumber(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertNumberToDate((Double)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertIntegerToDate((Long)object);
case STORAGE_TYPE_BINARY_STRING:
return convertIntegerToDate(convertStringToInteger(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertIntegerToDate((Long)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBigNumberToDate((BigDecimal)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBigNumberToDate(convertStringToBigNumber(convertBinaryStringToString((byte[])object)));
case STORAGE_TYPE_INDEXED:
return convertBigNumberToDate((BigDecimal)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_BOOLEAN:
throw new KettleValueException("I don't know how to convert a boolean to a date.");
case TYPE_BINARY:
throw new KettleValueException("I don't know how to convert a binary value to date.");
case TYPE_SERIALIZABLE:
throw new KettleValueException("I don't know how to convert a serializable value to date.");
default :
throw new KettleValueException("Unknown type " + type + " specified.");
}
}
