{
  try {
    if (object == null) {
      return null;
    }
switch (type) {
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
        return (Long)object;
case STORAGE_TYPE_BINARY_STRING:
      return (Long)convertBinaryStringToNativeType((byte[])object);
case STORAGE_TYPE_INDEXED:
    return (Long)index[((Integer)object).intValue()];
default :
  throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToInteger((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToInteger((String)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToInteger((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new Long(((Double)object).longValue());
case STORAGE_TYPE_BINARY_STRING:
return new Long(((Double)convertBinaryStringToNativeType((byte[])object)).longValue());
case STORAGE_TYPE_INDEXED:
return new Long(((Double)index[((Integer)object).intValue()]).longValue());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertDateToInteger((Date)object);
case STORAGE_TYPE_BINARY_STRING:
return new Long(((Date)convertBinaryStringToNativeType((byte[])object)).getTime());
case STORAGE_TYPE_INDEXED:
return convertDateToInteger((Date)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new Long(((BigDecimal)object).longValue());
case STORAGE_TYPE_BINARY_STRING:
return new Long(((BigDecimal)convertBinaryStringToNativeType((byte[])object)).longValue());
case STORAGE_TYPE_INDEXED:
return new Long(((BigDecimal)index[((Integer)object).intValue()]).longValue());
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBooleanToInteger((Boolean)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBooleanToInteger((Boolean)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertBooleanToInteger((Boolean)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BINARY:
throw new KettleValueException(toString() + " : I don't know how to convert binary values to integers.");
case TYPE_SERIALIZABLE:
throw new KettleValueException(toString() + " : I don't know how to convert serializable values to integers.");
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
 catch (Exception e) {
throw new KettleValueException("Unexpected conversion error while converting value [" + toString() + "] to an Integer",e);
}
}
