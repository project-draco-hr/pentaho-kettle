{
  try {
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    int nrremove=rep.countNrStepAttributes(id_step,"remove_name");
    int nrmeta=rep.countNrStepAttributes(id_step,"meta_name");
    allocate(nrfields,nrremove,nrmeta);
    for (int i=0; i < nrfields; i++) {
      selectName[i]=rep.getStepAttributeString(id_step,i,"field_name");
      selectRename[i]=rep.getStepAttributeString(id_step,i,"field_rename");
      selectLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      selectPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
    }
    selectingAndSortingUnspecifiedFields=rep.getStepAttributeBoolean(id_step,"select_unspecified");
    for (int i=0; i < nrremove; i++) {
      deleteName[i]=rep.getStepAttributeString(id_step,i,"remove_name");
    }
    for (int i=0; i < nrmeta; i++) {
      metaName[i]=rep.getStepAttributeString(id_step,i,"meta_name");
      metaRename[i]=rep.getStepAttributeString(id_step,i,"meta_rename");
      metaType[i]=(int)rep.getStepAttributeInteger(id_step,i,"meta_type");
      metaLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"meta_length");
      metaPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"meta_precision");
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("SelectValuesMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
