{
  for (  StepInjectionMetaEntry entry : metadata) {
    SelectValuesAttr attr=SelectValuesAttr.findByKey(entry.getKey());
    if (entry.getValueType() != ValueMetaInterface.TYPE_NONE) {
switch (attr) {
case SELECT_UNSPECIFIED:
        selectingAndSortingUnspecifiedFields=(Boolean)entry.getValue();
      break;
default :
    throw new RuntimeException("Unhandled metadata injection of attribute: " + attr.toString() + " - "+ attr.getDescription());
}
}
 else {
switch (attr) {
case FIELDS:
  List<StepInjectionMetaEntry> selectFields=entry.getDetails();
allocateSelect(selectFields.size());
for (int row=0; row < selectFields.size(); row++) {
StepInjectionMetaEntry selectField=selectFields.get(row);
List<StepInjectionMetaEntry> fieldAttributes=selectField.getDetails();
for (int i=0; i < fieldAttributes.size(); i++) {
  StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
  SelectValuesAttr fieldAttr=SelectValuesAttr.findByKey(fieldAttribute.getKey());
  String attributeValue=(String)fieldAttribute.getValue();
switch (fieldAttr) {
case FIELD_NAME:
    getSelectName()[row]=attributeValue;
  break;
case FIELD_RENAME:
getSelectRename()[row]=attributeValue;
break;
case FIELD_LENGTH:
getSelectLength()[row]=attributeValue == null ? -1 : Integer.parseInt(attributeValue);
break;
case FIELD_PRECISION:
getSelectPrecision()[row]=attributeValue == null ? -1 : Integer.parseInt(attributeValue);
break;
default :
throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.toString() + " - "+ fieldAttr.getDescription());
}
}
}
break;
case REMOVES:
List<StepInjectionMetaEntry> removeFields=entry.getDetails();
allocateRemove(removeFields.size());
for (int row=0; row < removeFields.size(); row++) {
StepInjectionMetaEntry removeField=removeFields.get(row);
List<StepInjectionMetaEntry> fieldAttributes=removeField.getDetails();
for (int i=0; i < fieldAttributes.size(); i++) {
StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
SelectValuesAttr fieldAttr=SelectValuesAttr.findByKey(fieldAttribute.getKey());
String attributeValue=(String)fieldAttribute.getValue();
switch (fieldAttr) {
case REMOVE_NAME:
getDeleteName()[row]=attributeValue;
break;
default :
throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.toString() + " - "+ fieldAttr.getDescription());
}
}
}
break;
case METAS:
List<StepInjectionMetaEntry> metaFields=entry.getDetails();
allocateMeta(metaFields.size());
for (int row=0; row < metaFields.size(); row++) {
StepInjectionMetaEntry metaField=metaFields.get(row);
SelectMetadataChange metaChange=new SelectMetadataChange();
List<StepInjectionMetaEntry> fieldAttributes=metaField.getDetails();
for (int i=0; i < fieldAttributes.size(); i++) {
StepInjectionMetaEntry fieldAttribute=fieldAttributes.get(i);
SelectValuesAttr fieldAttr=SelectValuesAttr.findByKey(fieldAttribute.getKey());
String attributeValue=(String)fieldAttribute.getValue();
switch (fieldAttr) {
case META_NAME:
metaChange.setName(attributeValue);
break;
case META_RENAME:
metaChange.setRename(attributeValue);
break;
case META_TYPE:
metaChange.setType(ValueMeta.getType(attributeValue));
break;
case META_CONVERSION_MASK:
metaChange.setConversionMask(attributeValue);
break;
case META_LENGTH:
metaChange.setLength(attributeValue == null ? -1 : Integer.parseInt(attributeValue));
break;
case META_PRECISION:
metaChange.setPrecision(attributeValue == null ? -1 : Integer.parseInt(attributeValue));
break;
case META_CURRENCY:
metaChange.setCurrencySymbol(attributeValue);
break;
case META_DECIMAL:
metaChange.setDecimalSymbol(attributeValue);
break;
case META_GROUPING:
metaChange.setGroupingSymbol(attributeValue);
break;
case META_STORAGE_TYPE:
metaChange.setStorageType(ValueMeta.getStorageType(attributeValue));
break;
case META_ENCODING:
metaChange.setEncoding(attributeValue);
break;
default :
throw new RuntimeException("Unhandled metadata injection of attribute: " + fieldAttr.toString() + " - "+ fieldAttr.getDescription());
}
}
meta[row]=metaChange;
}
break;
}
}
}
}
