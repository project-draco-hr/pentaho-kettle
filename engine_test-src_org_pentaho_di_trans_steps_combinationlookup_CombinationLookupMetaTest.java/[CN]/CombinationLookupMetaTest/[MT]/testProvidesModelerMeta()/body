{
  final RowMeta rowMeta=Mockito.mock(RowMeta.class);
  final CombinationLookupMeta combinationLookupMeta=new CombinationLookupMeta(){
    @Override Database createDatabaseObject(){
      return Mockito.mock(Database.class);
    }
    @Override protected RowMetaInterface getDatabaseTableFields(    Database db,    String schemaName,    String tableName) throws KettleDatabaseException {
      assertEquals("aSchema",schemaName);
      assertEquals("aDimTable",tableName);
      return rowMeta;
    }
  }
;
  combinationLookupMeta.setKeyLookup(new String[]{"f1","f2","f3"});
  combinationLookupMeta.setKeyField(new String[]{"s4","s5","s6"});
  combinationLookupMeta.setSchemaName("aSchema");
  combinationLookupMeta.setTablename("aDimTable");
  final CombinationLookupData dimensionLookupData=new CombinationLookupData();
  assertEquals(rowMeta,combinationLookupMeta.getRowMeta(dimensionLookupData));
  assertEquals(3,combinationLookupMeta.getDatabaseFields().size());
  assertEquals("f1",combinationLookupMeta.getDatabaseFields().get(0));
  assertEquals("f2",combinationLookupMeta.getDatabaseFields().get(1));
  assertEquals("f3",combinationLookupMeta.getDatabaseFields().get(2));
  assertEquals(3,combinationLookupMeta.getStreamFields().size());
  assertEquals("s4",combinationLookupMeta.getStreamFields().get(0));
  assertEquals("s5",combinationLookupMeta.getStreamFields().get(1));
  assertEquals("s6",combinationLookupMeta.getStreamFields().get(2));
}
