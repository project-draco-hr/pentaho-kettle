{
  try {
    if (monitor != null)     monitor.subTask(Messages.getString("TransMeta.Monitor.LockingRepository"));
    rep.lockRepository();
    rep.insertLogEntry("save transformation '" + getName() + "'");
    rep.clearNextIDCounters();
    if (directory.getID() < 0) {
      throw new KettleException(Messages.getString("TransMeta.Exception.PlsSelectAValidDirectoryBeforeSavingTheTransformation"));
    }
    int nrWorks=2 + nrDatabases() + nrNotes()+ nrSteps()+ nrTransHops();
    if (monitor != null)     monitor.beginTask(Messages.getString("TransMeta.Monitor.SavingTransformationTask.Title") + getPathAndName(),nrWorks);
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingOfTransformationStarted"));
    if (monitor != null && monitor.isCanceled())     throw new KettleDatabaseException();
    if (monitor != null)     monitor.subTask(Messages.getString("TransMeta.Monitor.HandlingOldVersionTransformationTask.Title"));
    setID(rep.getTransformationID(getName(),directory.getID()));
    if (getID() <= 0) {
      setID(rep.getNextTransformationID());
    }
 else {
      if (monitor != null)       monitor.subTask(Messages.getString("TransMeta.Monitor.DeletingOldVersionTransformationTask.Title"));
      log.logDebug(toString(),Messages.getString("TransMeta.Log.DeletingOldVersionTransformation"));
      rep.delAllFromTrans(getID());
      log.logDebug(toString(),Messages.getString("TransMeta.Log.OldVersionOfTransformationRemoved"));
    }
    if (monitor != null)     monitor.worked(1);
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingNotes"));
    for (int i=0; i < nrNotes(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      if (monitor != null)       monitor.subTask(Messages.getString("TransMeta.Monitor.SavingNoteTask.Title") + (i + 1) + "/"+ nrNotes());
      NotePadMeta ni=getNote(i);
      ni.saveRep(rep,getID());
      if (ni.getID() > 0)       rep.insertTransNote(getID(),ni.getID());
      if (monitor != null)       monitor.worked(1);
    }
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingDatabaseConnections"));
    for (int i=0; i < nrDatabases(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      if (monitor != null)       monitor.subTask(Messages.getString("TransMeta.Monitor.SavingDatabaseTask.Title") + (i + 1) + "/"+ nrDatabases());
      DatabaseMeta databaseMeta=getDatabase(i);
      if (databaseMeta.hasChanged() || databaseMeta.getID() <= 0) {
        databaseMeta.saveRep(rep);
      }
      if (monitor != null)       monitor.worked(1);
    }
    log.logDebug(toString(),Messages.getString("TransMeta.Log.CheckingStepTypes"));
    rep.updateStepTypes();
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingSteps"));
    for (int i=0; i < nrSteps(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      if (monitor != null)       monitor.subTask(Messages.getString("TransMeta.Monitor.SavingStepTask.Title") + (i + 1) + "/"+ nrSteps());
      StepMeta stepMeta=getStep(i);
      stepMeta.saveRep(rep,getID());
      if (monitor != null)       monitor.worked(1);
    }
    rep.closeStepAttributeInsertPreparedStatement();
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingHops"));
    for (int i=0; i < nrTransHops(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      if (monitor != null)       monitor.subTask(Messages.getString("TransMeta.Monitor.SavingHopTask.Title") + (i + 1) + "/"+ nrTransHops());
      TransHopMeta hi=getTransHop(i);
      hi.saveRep(rep,getID());
      if (monitor != null)       monitor.worked(1);
    }
    if (monitor != null)     monitor.subTask(Messages.getString("TransMeta.Monitor.FinishingTask.Title"));
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingTransformationInfo"));
    rep.insertTransformation(this);
    rep.closeTransAttributeInsertPreparedStatement();
    for (int i=0; i < partitionSchemas.size(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      PartitionSchema partitionSchema=(PartitionSchema)partitionSchemas.get(i);
      boolean isUsedByTransformation=isUsingPartitionSchema(partitionSchema);
      partitionSchema.saveRep(rep,getID(),isUsedByTransformation);
    }
    for (int i=0; i < slaveServers.size(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      SlaveServer slaveServer=(SlaveServer)slaveServers.get(i);
      boolean isUsedByTransformation=isUsingSlaveServer(slaveServer);
      slaveServer.saveRep(rep,getID(),isUsedByTransformation);
    }
    for (int i=0; i < clusterSchemas.size(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      ClusterSchema clusterSchema=(ClusterSchema)clusterSchemas.get(i);
      boolean isUsedByTransformation=isUsingClusterSchema(clusterSchema);
      clusterSchema.saveRep(rep,getID(),isUsedByTransformation);
    }
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingDependencies"));
    for (int i=0; i < nrDependencies(); i++) {
      if (monitor != null && monitor.isCanceled())       throw new KettleDatabaseException(Messages.getString("TransMeta.Log.UserCancelledTransSave"));
      TransDependency td=getDependency(i);
      td.saveRep(rep,getID());
    }
    log.logDebug(toString(),Messages.getString("TransMeta.Log.SavingFinished"));
    if (monitor != null)     monitor.subTask(Messages.getString("TransMeta.Monitor.UnlockingRepository"));
    rep.unlockRepository();
    rep.commit();
    clearChanged();
    if (monitor != null)     monitor.worked(1);
    if (monitor != null)     monitor.done();
  }
 catch (  KettleDatabaseException dbe) {
    rep.rollback();
    log.logError(toString(),Messages.getString("TransMeta.Log.ErrorSavingTransformationToRepository") + Const.CR + dbe.getMessage());
    throw new KettleException(Messages.getString("TransMeta.Log.ErrorSavingTransformationToRepository"),dbe);
  }
 finally {
    rep.unlockRepository();
  }
}
