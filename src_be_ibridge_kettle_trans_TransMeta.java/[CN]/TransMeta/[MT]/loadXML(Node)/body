{
  try {
    clearUndo();
    clear();
    int n=XMLHandler.countNodes(transnode,"connection");
    log.logDebug(toString(),"We have " + n + " connections...");
    for (int i=0; i < n; i++) {
      log.logDebug(toString(),"Looking at connection #" + i);
      Node nodecon=XMLHandler.getSubNodeByNr(transnode,"connection",i);
      DatabaseMeta dbcon=new DatabaseMeta(nodecon);
      DatabaseMeta exist=findDatabase(dbcon.getName());
      if (exist == null) {
        addDatabase(dbcon);
      }
 else {
        int idx=indexOfDatabase(exist);
        removeDatabase(idx);
        addDatabase(idx,dbcon);
      }
    }
    Node notepadsnode=XMLHandler.getSubNode(transnode,"notepads");
    int nrnotes=XMLHandler.countNodes(notepadsnode,"notepad");
    for (int i=0; i < nrnotes; i++) {
      Node notepadnode=XMLHandler.getSubNodeByNr(notepadsnode,"notepad",i);
      NotePadMeta ni=new NotePadMeta(notepadnode);
      notes.add(ni);
    }
    int s=XMLHandler.countNodes(transnode,"step");
    log.logDebug(toString(),"Reading " + s + " steps...");
    for (int i=0; i < s; i++) {
      Node stepnode=XMLHandler.getSubNodeByNr(transnode,"step",i);
      log.logDebug(toString(),"Looking at step #" + i);
      StepMeta inf=new StepMeta(log,stepnode,databases,counters);
      addStep(inf);
    }
    for (int i=0; i < nrSteps(); i++) {
      StepMeta stepMeta=getStep(i);
      StepMetaInterface sii=stepMeta.getStepMetaInterface();
      if (sii != null)       sii.searchInfoAndTargetSteps(steps);
    }
    Node ordernode=XMLHandler.getSubNode(transnode,"order");
    n=XMLHandler.countNodes(ordernode,"hop");
    log.logDebug(toString(),"We have " + n + " hops...");
    for (int i=0; i < n; i++) {
      log.logDebug(toString(),"Looking at hop #" + i);
      Node hopnode=XMLHandler.getSubNodeByNr(ordernode,"hop",i);
      TransHopMeta hopinf=new TransHopMeta(hopnode,steps);
      addTransHop(hopinf);
    }
    Node infonode=XMLHandler.getSubNode(transnode,"info");
    name=XMLHandler.getTagValue(infonode,"name");
    readStep=findStep(XMLHandler.getTagValue(infonode,"log","read"));
    writeStep=findStep(XMLHandler.getTagValue(infonode,"log","write"));
    inputStep=findStep(XMLHandler.getTagValue(infonode,"log","input"));
    outputStep=findStep(XMLHandler.getTagValue(infonode,"log","output"));
    updateStep=findStep(XMLHandler.getTagValue(infonode,"log","update"));
    String logcon=XMLHandler.getTagValue(infonode,"log","connection");
    logConnection=findDatabase(logcon);
    logTable=XMLHandler.getTagValue(infonode,"log","table");
    useBatchId="Y".equalsIgnoreCase(XMLHandler.getTagValue(infonode,"log","use_batchid"));
    String maxdatcon=XMLHandler.getTagValue(infonode,"maxdate","connection");
    maxDateConnection=findDatabase(maxdatcon);
    maxDateTable=XMLHandler.getTagValue(infonode,"maxdate","table");
    maxDateField=XMLHandler.getTagValue(infonode,"maxdate","field");
    String offset=XMLHandler.getTagValue(infonode,"maxdate","offset");
    maxDateOffset=Const.toDouble(offset,0.0);
    String mdiff=XMLHandler.getTagValue(infonode,"maxdate","maxdiff");
    maxDateDifference=Const.toDouble(mdiff,0.0);
    Node depsnode=XMLHandler.getSubNode(infonode,"dependencies");
    int deps=XMLHandler.countNodes(depsnode,"dependency");
    for (int i=0; i < deps; i++) {
      Node depnode=XMLHandler.getSubNodeByNr(depsnode,"dependency",i);
      TransDependency td=new TransDependency(depnode,databases);
      if (td.getDatabase() != null && td.getFieldname() != null) {
        addDependency(td);
      }
    }
    String srowset=XMLHandler.getTagValue(infonode,"size_rowset");
    sizeRowset=Const.toInt(srowset,Const.ROWS_IN_ROWSET);
    log.logDebug(toString(),"nr of steps read : " + nrSteps());
    log.logDebug(toString(),"nr of hops  read : " + nrTransHops());
    sortSteps();
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException("Error reading transformation from XML file",xe);
  }
}
