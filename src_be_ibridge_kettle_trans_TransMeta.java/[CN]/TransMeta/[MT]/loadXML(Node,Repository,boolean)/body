{
  Props props=null;
  if (Props.isInitialized()) {
    props=Props.getInstance();
  }
  try {
    clearUndo();
    clear();
    if (rep != null) {
      readDatabases(rep);
      clearChanged();
    }
    int n=XMLHandler.countNodes(transnode,"connection");
    log.logDebug(toString(),Messages.getString("TransMeta.Log.WeHaveConnections",String.valueOf(n)));
    for (int i=0; i < n; i++) {
      log.logDebug(toString(),Messages.getString("TransMeta.Log.LookingAtConnection") + i);
      Node nodecon=XMLHandler.getSubNodeByNr(transnode,"connection",i);
      DatabaseMeta dbcon=new DatabaseMeta(nodecon);
      DatabaseMeta exist=findDatabase(dbcon.getName());
      if (exist == null) {
        addDatabase(dbcon);
      }
 else {
        boolean askOverwrite=Props.isInitialized() ? props.askAboutReplacingDatabaseConnections() : false;
        boolean overwrite=Props.isInitialized() ? props.replaceExistingDatabaseConnections() : true;
        if (askOverwrite) {
          if (props.getDisplay() != null) {
            Shell shell=props.getDisplay().getActiveShell();
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,"Warning",null,"Connection [" + dbcon.getName() + "] already exists, do you want to overwrite this database connection?",MessageDialog.WARNING,new String[]{"Yes","No"},1,"Please, don't show this warning anymore.",!props.askAboutReplacingDatabaseConnections());
            int idx=md.open();
            props.setAskAboutReplacingDatabaseConnections(!md.getToggleState());
            overwrite=(idx == 0);
          }
        }
        if (overwrite) {
          int idx=indexOfDatabase(exist);
          removeDatabase(idx);
          addDatabase(idx,dbcon);
        }
      }
    }
    Node notepadsnode=XMLHandler.getSubNode(transnode,"notepads");
    int nrnotes=XMLHandler.countNodes(notepadsnode,"notepad");
    for (int i=0; i < nrnotes; i++) {
      Node notepadnode=XMLHandler.getSubNodeByNr(notepadsnode,"notepad",i);
      NotePadMeta ni=new NotePadMeta(notepadnode);
      notes.add(ni);
    }
    int s=XMLHandler.countNodes(transnode,"step");
    log.logDebug(toString(),Messages.getString("TransMeta.Log.ReadingSteps") + s + " steps...");
    for (int i=0; i < s; i++) {
      Node stepnode=XMLHandler.getSubNodeByNr(transnode,"step",i);
      log.logDebug(toString(),Messages.getString("TransMeta.Log.LookingAtStep") + i);
      StepMeta inf=new StepMeta(log,stepnode,databases,counters);
      addStep(inf);
    }
    for (int i=0; i < nrSteps(); i++) {
      StepMeta stepMeta=getStep(i);
      StepMetaInterface sii=stepMeta.getStepMetaInterface();
      if (sii != null)       sii.searchInfoAndTargetSteps(steps);
    }
    Node ordernode=XMLHandler.getSubNode(transnode,"order");
    n=XMLHandler.countNodes(ordernode,"hop");
    log.logDebug(toString(),Messages.getString("TransMeta.Log.WeHaveHops") + n + " hops...");
    for (int i=0; i < n; i++) {
      log.logDebug(toString(),Messages.getString("TransMeta.Log.LookingAtHop") + i);
      Node hopnode=XMLHandler.getSubNodeByNr(ordernode,"hop",i);
      TransHopMeta hopinf=new TransHopMeta(hopnode,steps);
      addTransHop(hopinf);
    }
    Node infonode=XMLHandler.getSubNode(transnode,"info");
    name=XMLHandler.getTagValue(infonode,"name");
    readStep=findStep(XMLHandler.getTagValue(infonode,"log","read"));
    writeStep=findStep(XMLHandler.getTagValue(infonode,"log","write"));
    inputStep=findStep(XMLHandler.getTagValue(infonode,"log","input"));
    outputStep=findStep(XMLHandler.getTagValue(infonode,"log","output"));
    updateStep=findStep(XMLHandler.getTagValue(infonode,"log","update"));
    String logcon=XMLHandler.getTagValue(infonode,"log","connection");
    logConnection=findDatabase(logcon);
    logTable=XMLHandler.getTagValue(infonode,"log","table");
    useBatchId="Y".equalsIgnoreCase(XMLHandler.getTagValue(infonode,"log","use_batchid"));
    logfieldUsed="Y".equalsIgnoreCase(XMLHandler.getTagValue(infonode,"log","USE_LOGFIELD"));
    String maxdatcon=XMLHandler.getTagValue(infonode,"maxdate","connection");
    maxDateConnection=findDatabase(maxdatcon);
    maxDateTable=XMLHandler.getTagValue(infonode,"maxdate","table");
    maxDateField=XMLHandler.getTagValue(infonode,"maxdate","field");
    String offset=XMLHandler.getTagValue(infonode,"maxdate","offset");
    maxDateOffset=Const.toDouble(offset,0.0);
    String mdiff=XMLHandler.getTagValue(infonode,"maxdate","maxdiff");
    maxDateDifference=Const.toDouble(mdiff,0.0);
    Node depsnode=XMLHandler.getSubNode(infonode,"dependencies");
    int deps=XMLHandler.countNodes(depsnode,"dependency");
    for (int i=0; i < deps; i++) {
      Node depnode=XMLHandler.getSubNodeByNr(depsnode,"dependency",i);
      TransDependency td=new TransDependency(depnode,databases);
      if (td.getDatabase() != null && td.getFieldname() != null) {
        addDependency(td);
      }
    }
    String srowset=XMLHandler.getTagValue(infonode,"size_rowset");
    sizeRowset=Const.toInt(srowset,Const.ROWS_IN_ROWSET);
    sleepTimeEmpty=Const.toInt(XMLHandler.getTagValue(infonode,"sleep_time_empty"),Const.SLEEP_EMPTY_NANOS);
    sleepTimeFull=Const.toInt(XMLHandler.getTagValue(infonode,"sleep_time_full"),Const.SLEEP_FULL_NANOS);
    modifiedUser=XMLHandler.getTagValue(infonode,"modified_user");
    String modDate=XMLHandler.getTagValue(infonode,"modified_date");
    if (modDate != null) {
      modifiedDate=new Value(STRING_MODIFIED_DATE,modDate);
      modifiedDate.setType(Value.VALUE_TYPE_DATE);
    }
    log.logDebug(toString(),Messages.getString("TransMeta.Log.NumberOfStepsReaded") + nrSteps());
    log.logDebug(toString(),Messages.getString("TransMeta.Log.NumberOfHopsReaded") + nrTransHops());
    sortSteps();
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(Messages.getString("TransMeta.Exception.ErrorReadingTransformation"),xe);
  }
 finally {
    if (setInternalVariables)     setInternalKettleVariables();
  }
}
