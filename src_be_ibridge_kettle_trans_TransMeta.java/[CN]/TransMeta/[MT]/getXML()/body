{
  Props props=null;
  if (Props.isInitialized())   props=Props.getInstance();
  StringBuffer retval=new StringBuffer();
  retval.append("<transformation>" + Const.CR);
  retval.append("  <info>" + Const.CR);
  retval.append("    " + XMLHandler.addTagValue("name",name));
  retval.append("    " + XMLHandler.addTagValue("directory",directory != null ? directory.getPath() : RepositoryDirectory.DIRECTORY_SEPARATOR));
  retval.append("    <log>" + Const.CR);
  retval.append("      " + XMLHandler.addTagValue("read",readStep == null ? "" : readStep.getName()));
  retval.append("      " + XMLHandler.addTagValue("write",writeStep == null ? "" : writeStep.getName()));
  retval.append("      " + XMLHandler.addTagValue("input",inputStep == null ? "" : inputStep.getName()));
  retval.append("      " + XMLHandler.addTagValue("output",outputStep == null ? "" : outputStep.getName()));
  retval.append("      " + XMLHandler.addTagValue("update",updateStep == null ? "" : updateStep.getName()));
  retval.append("      " + XMLHandler.addTagValue("connection",logConnection == null ? "" : logConnection.getName()));
  retval.append("      " + XMLHandler.addTagValue("table",logTable));
  retval.append("      " + XMLHandler.addTagValue("use_batchid",useBatchId));
  retval.append("      " + XMLHandler.addTagValue("use_logfield",logfieldUsed));
  retval.append("      </log>" + Const.CR);
  retval.append("    <maxdate>" + Const.CR);
  retval.append("      " + XMLHandler.addTagValue("connection",maxDateConnection == null ? "" : maxDateConnection.getName()));
  retval.append("      " + XMLHandler.addTagValue("table",maxDateTable));
  retval.append("      " + XMLHandler.addTagValue("field",maxDateField));
  retval.append("      " + XMLHandler.addTagValue("offset",maxDateOffset));
  retval.append("      " + XMLHandler.addTagValue("maxdiff",maxDateDifference));
  retval.append("      </maxdate>" + Const.CR);
  retval.append("    " + XMLHandler.addTagValue("size_rowset",sizeRowset));
  retval.append("    " + XMLHandler.addTagValue("sleep_time_empty",sleepTimeEmpty));
  retval.append("    " + XMLHandler.addTagValue("sleep_time_full",sleepTimeFull));
  retval.append("    <dependencies>" + Const.CR);
  for (int i=0; i < nrDependencies(); i++) {
    TransDependency td=getDependency(i);
    retval.append(td.getXML());
  }
  retval.append("      </dependencies>" + Const.CR);
  retval.append("    </info>" + Const.CR);
  retval.append("  <notepads>" + Const.CR);
  if (notes != null)   for (int i=0; i < nrNotes(); i++) {
    NotePadMeta ni=getNote(i);
    retval.append(ni.getXML());
  }
  retval.append("    </notepads>" + Const.CR);
  for (int i=0; i < nrDatabases(); i++) {
    DatabaseMeta dbMeta=getDatabase(i);
    if (props != null && props.areOnlyUsedConnectionsSavedToXML()) {
      if (isDatabaseConnectionUsed(dbMeta))       retval.append(dbMeta.getXML());
    }
 else {
      retval.append(dbMeta.getXML());
    }
  }
  retval.append("  <order>" + Const.CR);
  for (int i=0; i < nrTransHops(); i++) {
    TransHopMeta transHopMeta=getTransHop(i);
    retval.append(transHopMeta.getXML());
  }
  retval.append("  </order>" + Const.CR + Const.CR);
  for (int i=0; i < nrSteps(); i++) {
    StepMeta stepMeta=getStep(i);
    retval.append(stepMeta.getXML());
  }
  retval.append("</transformation>" + Const.CR);
  return retval.toString();
}
