{
  String TakeFirstNbrLines=null;
  String LineTerminatedby=null;
  String FieldTerminatedby=null;
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  String vfsFilename=environmentSubstitute(filename);
  FileObject fileObject=null;
  if (!Const.isEmpty(vfsFilename)) {
    try {
      fileObject=KettleVFS.getFileObject(vfsFilename);
      if (!(fileObject instanceof LocalFile)) {
        throw new KettleException(Messages.getString("JobMssqlBulkLoad.Error.OnlyLocalFileSupported",vfsFilename));
      }
      String realFilename=KettleVFS.getFilename(fileObject);
      File file=new File(realFilename);
      if (file.exists() && file.canRead()) {
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobMssqlBulkLoad.FileExists.Label",realFilename));
        if (connection != null) {
          Database db=new Database(connection);
          if (db.getDatabaseMeta().getDatabaseType() != DatabaseMeta.TYPE_DATABASE_MSSQL) {
            log.logError(toString(),Messages.getString("JobMssqlBulkLoad.Error.DbNotMSSQL",connection.getDatabaseName()));
            return result;
          }
          db.shareVariablesWith(this);
          try {
            db.connect();
            String realSchemaname=environmentSubstitute(schemaname);
            String realTablename=environmentSubstitute(tablename);
            if (db.checkTableExists(realTablename)) {
              log.logDetailed(toString(),Messages.getString("JobMssqlBulkLoad.TableExists.Label",realTablename));
              if (schemaname != null)               realTablename=realSchemaname + "." + realTablename;
              String nblinesTake=getRealTakelines();
              if (Const.toInt(nblinesTake,0) > 0)               TakeFirstNbrLines="FIRSTROW=" + nblinesTake;
              String Fieldterminator=getRealFieldTerminator();
              if (!Const.isEmpty(Fieldterminator))               FieldTerminatedby="FIELDTERMINATOR='" + Fieldterminator + "'";
              String Rowterminator=getRealLineterminated();
              if (!Const.isEmpty(Rowterminator))               LineTerminatedby="ROWTERMINATOR='" + Rowterminator + "'";
              String SQLBULKLOAD="BULK INSERT " + realTablename + " FROM "+ "'"+ realFilename.replace('\\','/')+ "'";
              SQLBULKLOAD=SQLBULKLOAD + " WITH (";
              if (TakeFirstNbrLines != null)               SQLBULKLOAD=SQLBULKLOAD + TakeFirstNbrLines + ",";
              if (FieldTerminatedby != null)               SQLBULKLOAD=SQLBULKLOAD + FieldTerminatedby;
              if (LineTerminatedby != null)               SQLBULKLOAD=SQLBULKLOAD + "," + LineTerminatedby;
              SQLBULKLOAD=SQLBULKLOAD + ")";
              try {
                db.execStatements(SQLBULKLOAD);
                db.disconnect();
                if (isAddFileToResult()) {
                  ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realFilename),parentJob.getName(),toString());
                  result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
                }
                result.setResult(true);
              }
 catch (              KettleDatabaseException je) {
                result.setNrErrors(1);
                log.logError(toString(),"An error occurred executing this job entry : " + je.getMessage());
              }
catch (              IOException e) {
                log.logError(toString(),"An error occurred executing this job entry : " + e.getMessage());
                result.setNrErrors(1);
              }
 finally {
                if (db != null) {
                  db.disconnect();
                  db=null;
                }
              }
            }
 else {
              db.disconnect();
              result.setNrErrors(1);
              log.logDetailed(toString(),Messages.getString("JobMssqlBulkLoad.Error.TableNotExists",realTablename));
            }
          }
 catch (          KettleDatabaseException dbe) {
            db.disconnect();
            result.setNrErrors(1);
            log.logError(toString(),"An error occurred executing this entry: " + dbe.getMessage());
          }
        }
 else {
          result.setNrErrors(1);
          log.logError(toString(),Messages.getString("JobMssqlBulkLoad.Nodatabase.Label"));
        }
      }
 else {
        result.setNrErrors(1);
        log.logError(toString(),Messages.getString("JobMssqlBulkLoad.Error.FileNotExists",realFilename));
      }
    }
 catch (    Exception e) {
      result.setNrErrors(1);
      log.logError(toString(),Messages.getString("JobMssqlBulkLoad.UnexpectedError.Label"),e);
    }
 finally {
      try {
        if (fileObject != null)         fileObject.close();
      }
 catch (      Exception e) {
      }
    }
  }
 else {
    result.setNrErrors(1);
    log.logError(toString(),Messages.getString("JobMssqlBulkLoad.Nofilename.Label"));
  }
  return result;
}
