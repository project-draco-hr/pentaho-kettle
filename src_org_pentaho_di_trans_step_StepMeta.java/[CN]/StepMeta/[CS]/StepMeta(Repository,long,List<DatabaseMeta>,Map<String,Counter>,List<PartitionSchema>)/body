{
  this();
  StepLoader steploader=StepLoader.getInstance();
  try {
    RowMetaAndData r=rep.getStep(id_step);
    if (r != null) {
      setID(id_step);
      stepname=r.getString("NAME",null);
      description=r.getString("DESCRIPTION",null);
      long id_step_type=r.getInteger("ID_STEP_TYPE",-1L);
      RowMetaAndData steptyperow=rep.getStepType(id_step_type);
      stepid=steptyperow.getString("CODE",null);
      distributes=r.getBoolean("DISTRIBUTE",true);
      copies=(int)r.getInteger("COPIES",1);
      int x=(int)r.getInteger("GUI_LOCATION_X",0);
      int y=(int)r.getInteger("GUI_LOCATION_Y",0);
      location=new Point(x,y);
      drawstep=r.getBoolean("GUI_DRAW",false);
      StepPlugin sp=steploader.findStepPluginWithID(stepid);
      if (sp != null) {
        stepMetaInterface=BaseStep.getStepInfo(sp,steploader);
      }
 else {
        throw new KettleStepLoaderException(BaseMessages.getString(PKG,"StepMeta.Exception.UnableToLoadClass",stepid + Const.CR));
      }
      stepMetaInterface=BaseStep.getStepInfo(sp,steploader);
      if (stepMetaInterface != null) {
        stepMetaInterface.readRep(rep,getID(),databases,counters);
      }
      stepPartitioningMeta=new StepPartitioningMeta(rep,getID());
      clusterSchemaName=rep.getStepAttributeString(id_step,"cluster_schema");
    }
 else {
      throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepInfoCouldNotBeFound",String.valueOf(id_step)));
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepCouldNotBeLoaded",String.valueOf(getID())),dbe);
  }
}
