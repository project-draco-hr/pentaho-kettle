{
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      LocalVariables.getInstance().createKettleVariables(Thread.currentThread().getName(),parentThread.getName(),true);
      db=new Database(dbMeta);
      try {
        db.connect();
        result=db.getQueryFields(sql,false);
        if (monitor.isCanceled()) {
          throw new InvocationTargetException(new Exception("This operation was cancelled!"));
        }
      }
 catch (      Exception e) {
        throw new InvocationTargetException(e,"Problem encountered determining query fields: " + e.toString());
      }
 finally {
        db.disconnect();
      }
    }
  }
;
  try {
    final ProgressMonitorDialog pmd=new ProgressMonitorDialog(shell);
    Runnable run=new Runnable(){
      public void run(){
        IProgressMonitor monitor=pmd.getProgressMonitor();
        while (pmd.getShell() == null || (!pmd.getShell().isDisposed() && !monitor.isCanceled())) {
          try {
            Thread.sleep(250);
          }
 catch (          InterruptedException e) {
          }
          ;
        }
        if (monitor.isCanceled()) {
          try {
            db.cancelQuery();
          }
 catch (          Exception e) {
          }
          ;
        }
      }
    }
;
    new Thread(run).start();
    pmd.run(true,true,op);
  }
 catch (  InvocationTargetException e) {
    new ErrorDialog(shell,"Error getting information","An error occured getting information from the database!",e);
    return null;
  }
catch (  InterruptedException e) {
    new ErrorDialog(shell,"Error getting information","An error occured getting information from the database!",e);
    return null;
  }
  return result;
}
