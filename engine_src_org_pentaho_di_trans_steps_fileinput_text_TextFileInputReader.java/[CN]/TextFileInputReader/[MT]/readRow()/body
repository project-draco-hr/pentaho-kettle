{
  Object[] r=null;
  boolean retval=true;
  boolean putrow=false;
  if (!data.doneReading) {
    int repeats=1;
    if (meta.content.lineWrapped) {
      repeats=meta.content.nrWraps > 0 ? meta.content.nrWraps : repeats;
    }
    if (!data.doneWithHeader && data.headerLinesRead == 0) {
      repeats+=meta.content.nrHeaderLines + 1;
    }
    for (int i=0; i < repeats && !data.doneReading; i++) {
      tryToReadLine(true);
    }
  }
  if (data.lineBuffer.isEmpty()) {
    return false;
  }
  TextFileLine textLine=data.lineBuffer.get(0);
  step.incrementLinesInput();
  lineNumberInFile++;
  data.lineBuffer.remove(0);
  if (meta.content.layoutPaged) {
    if (!data.doneWithHeader && data.pageLinesRead == 0) {
      if (log.isRowLevel()) {
        log.logRowlevel("P-HEADER (" + data.headerLinesRead + ") : "+ textLine.line);
      }
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.content.nrHeaderLines) {
        data.doneWithHeader=true;
      }
    }
 else {
      if (data.pageLinesRead < meta.content.nrLinesPerPage) {
        if (meta.content.lineWrapped) {
          for (int i=0; i < meta.content.nrWraps; i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=data.lineBuffer.get(0).line;
              data.lineBuffer.remove(0);
            }
            textLine.line+=extra;
          }
        }
        if (log.isRowLevel()) {
          log.logRowlevel("P-DATA: " + textLine.line);
        }
        data.pageLinesRead++;
        lineInFile++;
        long useNumber=meta.content.rowNumberByFile ? lineInFile : step.getLinesWritten() + 1;
        r=TextFileInputUtils.convertLineToRow(log,textLine,meta,data.currentPassThruFieldsRow,data.nrPassThruFields,data.outputRowMeta,data.convertRowMeta,data.filename,useNumber,data.separator,data.enclosure,data.escapeCharacter,data.dataErrorLineHandler,meta.additionalOutputFields,data.shortFilename,data.path,data.hidden,data.lastModificationDateTime,data.uriName,data.rootUriName,data.extension,data.size);
        if (r != null) {
          putrow=true;
        }
        if (!meta.content.footer && (data.pageLinesRead == meta.content.nrLinesPerPage)) {
          data.doneWithHeader=false;
          data.headerLinesRead=0;
          data.pageLinesRead=0;
          data.footerLinesRead=0;
          if (log.isRowLevel()) {
            log.logRowlevel("RESTART PAGE");
          }
        }
      }
 else {
        if (meta.content.footer && data.footerLinesRead < meta.content.nrFooterLines) {
          if (log.isRowLevel()) {
            log.logRowlevel("P-FOOTER: " + textLine.line);
          }
          data.footerLinesRead++;
        }
        if (!meta.content.footer || data.footerLinesRead >= meta.content.nrFooterLines) {
          data.doneWithHeader=false;
          data.headerLinesRead=0;
          data.pageLinesRead=0;
          data.footerLinesRead=0;
          if (log.isRowLevel()) {
            log.logRowlevel("RESTART PAGE");
          }
        }
      }
    }
  }
 else {
    if (!data.doneWithHeader) {
      data.headerLinesRead++;
      if (data.headerLinesRead >= meta.content.nrHeaderLines) {
        data.doneWithHeader=true;
      }
    }
 else {
      if (data.doneReading && meta.content.footer && data.lineBuffer.size() < meta.content.nrFooterLines) {
        data.lineBuffer.clear();
      }
 else {
        if (meta.content.lineWrapped) {
          for (int i=0; i < meta.content.nrWraps; i++) {
            String extra="";
            if (data.lineBuffer.size() > 0) {
              extra=data.lineBuffer.get(0).line;
              data.lineBuffer.remove(0);
            }
 else {
              tryToReadLine(true);
              if (!data.lineBuffer.isEmpty()) {
                extra=data.lineBuffer.remove(0).line;
              }
            }
            textLine.line+=extra;
          }
        }
        if (data.filePlayList.isProcessingNeeded(textLine.file,textLine.lineNumber,AbstractFileErrorHandler.NO_PARTS)) {
          lineInFile++;
          long useNumber=meta.content.rowNumberByFile ? lineInFile : step.getLinesWritten() + 1;
          r=TextFileInputUtils.convertLineToRow(log,textLine,meta,data.currentPassThruFieldsRow,data.nrPassThruFields,data.outputRowMeta,data.convertRowMeta,data.filename,useNumber,data.separator,data.enclosure,data.escapeCharacter,data.dataErrorLineHandler,meta.additionalOutputFields,data.shortFilename,data.path,data.hidden,data.lastModificationDateTime,data.uriName,data.rootUriName,data.extension,data.size);
          if (r != null) {
            if (log.isRowLevel()) {
              log.logRowlevel("Found data row: " + data.outputRowMeta.getString(r));
            }
            putrow=true;
          }
        }
 else {
          putrow=false;
        }
      }
    }
  }
  if (putrow && r != null) {
    if (data.nr_repeats > 0) {
      if (data.previous_row == null) {
        data.previous_row=data.outputRowMeta.cloneRow(r);
      }
 else {
        for (int i=0; i < meta.inputFiles.inputFields.length; i++) {
          if (meta.inputFiles.inputFields[i].isRepeated()) {
            if (r[i] == null) {
              r[i]=data.previous_row[i];
            }
 else {
              data.previous_row[i]=r[i];
            }
          }
        }
      }
    }
    if (log.isRowLevel()) {
      log.logRowlevel("Putting row: " + data.outputRowMeta.getString(r));
    }
    step.putRow(data.outputRowMeta,r);
    if (step.getLinesInput() >= meta.content.rowLimit && meta.content.rowLimit > 0) {
      close();
      return false;
    }
  }
  if (step.checkFeedback(step.getLinesInput())) {
    if (log.isBasic()) {
      log.logBasic("linenr " + step.getLinesInput());
    }
  }
  return retval;
}
