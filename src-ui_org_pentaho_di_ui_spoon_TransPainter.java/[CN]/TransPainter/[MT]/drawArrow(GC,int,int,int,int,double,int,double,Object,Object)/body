{
  int mx, my;
  int x3;
  int y3;
  int x4;
  int y4;
  int a, b, dist;
  double angle;
  gc.drawLine(x1,y1,x2,y2);
  mx=x1 + (x2 - x1) / 2;
  my=y1 + (y2 - y1) / 2;
  a=Math.abs(x2 - x1);
  b=Math.abs(y2 - y1);
  dist=(int)Math.sqrt(a * a + b * b);
  if (factor < 0) {
    if (dist >= 2 * iconsize)     factor=1.3;
 else     factor=1.2;
  }
  mx=(int)(x1 + factor * (x2 - x1) / 2);
  my=(int)(y1 + factor * (y2 - y1) / 2);
  angle=Math.atan2(y2 - y1,x2 - x1) + Math.PI;
  x3=(int)(mx + Math.cos(angle - theta) * size);
  y3=(int)(my + Math.sin(angle - theta) * size);
  x4=(int)(mx + Math.cos(angle + theta) * size);
  y4=(int)(my + Math.sin(angle + theta) * size);
  Color fore=gc.getForeground();
  Color back=gc.getBackground();
  gc.setBackground(fore);
  gc.fillPolygon(new int[]{mx,my,x3,y3,x4,y4});
  gc.setBackground(back);
  if (startObject instanceof StepMeta && endObject instanceof StepMeta) {
    factor=0.8;
    StepMeta fs=(StepMeta)startObject;
    StepMeta ts=(StepMeta)endObject;
    mx=(int)(x1 + factor * (x2 - x1) / 2) - 8;
    my=(int)(y1 + factor * (y2 - y1) / 2) - 8;
    boolean errorHop=fs.isSendingErrorRowsToStep(ts) || (startErrorHopStep && fs.equals(startHopStep));
    boolean targetHop=Const.indexOfString(ts.getName(),fs.getStepMetaInterface().getStepIOMeta().getTargetStepnames()) >= 0;
    if (!fs.isDistributes() && !ts.getStepPartitioningMeta().isMethodMirror() && !errorHop&& !targetHop) {
      Image copyHopsIcon=GUIResource.getInstance().getImageCopyHop();
      gc.drawImage(copyHopsIcon,mx,my);
      if (!shadow) {
        areaOwners.add(new AreaOwner(AreaType.HOP_COPY_ICON,mx,my,copyHopsIcon.getBounds().width,copyHopsIcon.getBounds().height,fs,STRING_HOP_TYPE_COPY));
      }
      mx+=16;
    }
    if (errorHop) {
      Image copyHopsIcon=GUIResource.getInstance().getImageErrorHop();
      gc.drawImage(copyHopsIcon,mx,my);
      if (!shadow) {
        areaOwners.add(new AreaOwner(AreaType.HOP_ERROR_ICON,mx,my,copyHopsIcon.getBounds().width,copyHopsIcon.getBounds().height,new StepMeta[]{fs,ts},STRING_HOP_TYPE_ERROR));
      }
      mx+=16;
    }
    StepIOMetaInterface ioMeta=ts.getStepMetaInterface().getStepIOMeta();
    String[] infoStepnames=ioMeta.getInfoStepnames();
    if ((candidateHopType == StreamType.INFO && ts.equals(endHopStep) && fs.equals(startHopStep)) || Const.indexOfString(fs.getName(),infoStepnames) >= 0) {
      Image hopIcon=GUIResource.getInstance().getImageInfoHop();
      gc.drawImage(hopIcon,mx,my);
      if (!shadow) {
        areaOwners.add(new AreaOwner(AreaType.HOP_INFO_ICON,mx,my,hopIcon.getBounds().width,hopIcon.getBounds().height,new StepMeta[]{fs,ts},STRING_HOP_TYPE_INFO));
      }
      mx+=16;
    }
    if (!Const.isEmpty(infoStepnames)) {
      for (      String infoStep : infoStepnames) {
        if (fs.getName().equalsIgnoreCase(infoStep)) {
          if (fs.getCopies() > 1) {
            Image errorHopsIcon=GUIResource.getInstance().getImageErrorHop();
            gc.drawImage(errorHopsIcon,mx,my);
            if (!shadow) {
              areaOwners.add(new AreaOwner(AreaType.HOP_INFO_STEP_COPIES_ERROR,mx,my,errorHopsIcon.getBounds().width,errorHopsIcon.getBounds().height,new StepMeta[]{fs,ts},STRING_INFO_STEP_COPIES));
            }
            mx+=16;
          }
        }
      }
    }
  }
}
