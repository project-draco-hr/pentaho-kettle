{
  if (!shadow && gridSize > 1) {
    drawGrid(gc);
  }
  if (hori != null && vert != null) {
    hori.setThumb(thumb.x);
    vert.setThumb(thumb.y);
  }
  gc.setFont(noteFont);
  for (int i=0; i < transMeta.nrNotes(); i++) {
    NotePadMeta ni=transMeta.getNote(i);
    drawNote(gc,ni);
  }
  gc.setFont(graphFont);
  gc.setBackground(background);
  for (int i=0; i < transMeta.nrTransHops(); i++) {
    TransHopMeta hi=transMeta.getTransHop(i);
    drawHop(gc,hi);
  }
  if (candidate != null) {
    drawHop(gc,candidate,true);
  }
 else {
    if (startHopStep != null && endHopLocation != null) {
      Point fr=startHopStep.getLocation();
      Point to=endHopLocation;
      if (endHopStep == null) {
        gc.setForeground(GUIResource.getInstance().getColorGray());
      }
 else {
        gc.setForeground(GUIResource.getInstance().getColorBlue());
      }
      drawArrow(gc,fr.x + iconsize / 2,fr.y + iconsize / 2,to.x,to.y,theta,calcArrowLength(),1.2,startHopStep,endHopStep == null ? endHopLocation : endHopStep);
    }
  }
  for (int i=0; i < transMeta.nrSteps(); i++) {
    StepMeta stepMeta=transMeta.getStep(i);
    if (stepMeta.isDrawn())     drawStep(gc,stepMeta);
  }
  if (noInputStep != null) {
    gc.setLineWidth(2);
    gc.setForeground(GUIResource.getInstance().getColorRed());
    Point n=noInputStep.getLocation();
    gc.drawLine(n.x - 5,n.y - 5,n.x + iconsize + 10,n.y + iconsize + 10);
    gc.drawLine(n.x - 5,n.y + iconsize + 5,n.x + iconsize + 5,n.y - 5);
  }
  if (drop_candidate != null) {
    gc.setLineStyle(SWT.LINE_SOLID);
    gc.setForeground(black);
    Point screen=real2screen(drop_candidate.x,drop_candidate.y,offset);
    gc.drawRectangle(screen.x,screen.y,iconsize,iconsize);
  }
  if (!shadow) {
    drawRect(gc,selrect);
  }
  RepositoryLock lock=transMeta.getRepositoryLock();
  if (lock != null) {
    Image lockImage=GUIResource.getInstance().getImageLocked();
    Rectangle lockBounds=lockImage.getBounds();
    gc.drawImage(lockImage,area.x - lockBounds.width,0);
    areaOwners.add(new AreaOwner(AreaType.REPOSITORY_LOCK_IMAGE,area.x - lockBounds.width,0,lockBounds.width,lockBounds.height,transMeta,lock));
  }
}
