{
  StepMetaInterface fsii=fs.getStepMetaInterface();
  int line[]=getLine(fs,ts);
  Color col;
  int linestyle=SWT.LINE_SOLID;
  int activeLinewidth=linewidth;
  if (is_candidate) {
    col=blue;
  }
 else {
    if (hi.isEnabled()) {
      String[] targetSteps=fsii.getStepIOMeta().getTargetStepnames();
      if (fs.isSendingErrorRowsToStep(ts)) {
        col=red;
        linestyle=SWT.LINE_DOT;
        activeLinewidth=linewidth + 1;
      }
 else {
        if (Const.isEmpty(targetSteps)) {
          col=black;
        }
 else {
          if (targetSteps.length == 2) {
            int index=Const.indexOfString(ts.getName(),targetSteps);
            if (index == 0) {
              col=green;
            }
 else             if (index == 1) {
              col=red;
            }
 else {
              linestyle=SWT.LINE_DASH;
              activeLinewidth=2;
              col=orange;
            }
          }
 else {
            if (Const.indexOfString(ts.getName(),targetSteps) >= 0) {
              col=black;
            }
 else {
              linestyle=SWT.LINE_DOT;
              activeLinewidth=2;
              col=orange;
            }
          }
        }
      }
    }
 else {
      col=gray;
    }
  }
  if (hi.split)   activeLinewidth=linewidth + 2;
  StepIOMetaInterface ioMeta=ts.getStepMetaInterface().getStepIOMeta();
  StreamInterface[] infoStreams=ioMeta.getInfoStreams();
  if (!Const.isEmpty(infoStreams)) {
    for (    StreamInterface stream : infoStreams) {
      if (fs.getName().equalsIgnoreCase(stream.getStepname())) {
        if (fs.getCopies() > 1) {
          col=red;
        }
      }
    }
  }
  gc.setForeground(col);
  gc.setLineStyle(linestyle);
  gc.setLineWidth(activeLinewidth);
  drawArrow(gc,line,fs,ts);
  if (hi.split)   gc.setLineWidth(linewidth);
  gc.setForeground(black);
  gc.setBackground(background);
  gc.setLineStyle(SWT.LINE_SOLID);
}
