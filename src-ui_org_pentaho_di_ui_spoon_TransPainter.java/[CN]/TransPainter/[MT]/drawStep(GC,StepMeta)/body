{
  if (stepMeta == null)   return;
  Point pt=stepMeta.getLocation();
  int x, y;
  if (pt != null) {
    x=pt.x;
    y=pt.y;
  }
 else {
    x=50;
    y=50;
  }
  Point screen=real2screen(x,y,offset);
  boolean stepError=false;
  if (stepLogMap != null && !stepLogMap.isEmpty()) {
    String log=stepLogMap.get(stepMeta);
    if (!Const.isEmpty(log)) {
      stepError=true;
    }
  }
  if (!stepMeta.getRemoteInputSteps().isEmpty()) {
    gc.setLineWidth(1);
    gc.setForeground(GUIResource.getInstance().getColorGray());
    gc.setBackground(GUIResource.getInstance().getColorBackground());
    gc.setFont(GUIResource.getInstance().getFontGraph());
    String nrInput=Integer.toString(stepMeta.getRemoteInputSteps().size());
    org.eclipse.swt.graphics.Point textExtent=gc.textExtent(nrInput);
    textExtent.x+=2;
    textExtent.y+=2;
    Point point=new Point(screen.x - iconsize - iconsize / 2,screen.y - iconsize);
    gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
    gc.drawText(nrInput,point.x + 1,point.y + 1);
    gc.drawLine(point.x + textExtent.x,point.y + textExtent.y / 2,screen.x - iconsize / 2,point.y + textExtent.y / 2);
    drawArrow(gc,screen.x - iconsize / 2,point.y + textExtent.y / 2,screen.x + iconsize / 3,screen.y,Math.toRadians(15),15,1.8,null,null);
    if (!shadow) {
      areaOwners.add(new AreaOwner(point.x,point.y,textExtent.x,textExtent.y,stepMeta,STRING_REMOTE_INPUT_STEPS));
    }
  }
  if (!stepMeta.getRemoteOutputSteps().isEmpty()) {
    gc.setLineWidth(1);
    gc.setForeground(GUIResource.getInstance().getColorGray());
    gc.setBackground(GUIResource.getInstance().getColorBackground());
    gc.setFont(GUIResource.getInstance().getFontGraph());
    String nrOutput=Integer.toString(stepMeta.getRemoteOutputSteps().size());
    org.eclipse.swt.graphics.Point textExtent=gc.textExtent(nrOutput);
    textExtent.x+=2;
    textExtent.y+=2;
    Point point=new Point(screen.x + 2 * iconsize + iconsize / 2 - textExtent.x,screen.y - iconsize);
    gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
    gc.drawText(nrOutput,point.x + 1,point.y + 1);
    gc.drawLine(point.x,point.y + textExtent.y / 2,screen.x + iconsize + iconsize / 2,point.y + textExtent.y / 2);
    drawArrow(gc,screen.x + 2 * iconsize / 3,screen.y,screen.x + iconsize + iconsize / 2,point.y + textExtent.y / 2,Math.toRadians(15),15,1.8,null,null);
    if (!shadow) {
      areaOwners.add(new AreaOwner(point.x,point.y,textExtent.x,textExtent.y,stepMeta,STRING_REMOTE_OUTPUT_STEPS));
    }
  }
  if (stepMeta.isPartitioned()) {
    gc.setLineWidth(1);
    gc.setForeground(GUIResource.getInstance().getColorRed());
    gc.setBackground(GUIResource.getInstance().getColorBackground());
    gc.setFont(GUIResource.getInstance().getFontGraph());
    PartitionSchema partitionSchema=stepMeta.getStepPartitioningMeta().getPartitionSchema();
    if (partitionSchema != null) {
      String nrInput;
      if (partitionSchema.isDynamicallyDefined()) {
        nrInput="Dx" + partitionSchema.getNumberOfPartitionsPerSlave();
      }
 else {
        nrInput="Px" + Integer.toString(partitionSchema.getPartitionIDs().size());
      }
      org.eclipse.swt.graphics.Point textExtent=gc.textExtent(nrInput);
      textExtent.x+=2;
      textExtent.y+=2;
      Point point=new Point(screen.x - iconsize - iconsize / 2,screen.y - iconsize - iconsize);
      gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
      gc.drawText(nrInput,point.x + 1,point.y + 1);
      gc.drawLine(point.x + textExtent.x,point.y + textExtent.y / 2,screen.x - iconsize / 2,point.y + textExtent.y / 2);
      gc.drawLine(screen.x - iconsize / 2,point.y + textExtent.y / 2,screen.x + iconsize / 3,screen.y);
      gc.setForeground(gray);
      gc.drawText(Const.NVL(partitionSchema.getName(),"<no partition name>"),point.x,point.y + textExtent.y + 3,true);
      if (!shadow) {
        areaOwners.add(new AreaOwner(point.x,point.y,textExtent.x,textExtent.y,stepMeta,STRING_PARTITIONING_CURRENT_STEP));
      }
    }
  }
  String name=stepMeta.getName();
  if (stepMeta.isSelected())   gc.setLineWidth(linewidth + 2);
 else   gc.setLineWidth(linewidth);
  if (!shadow) {
    areaOwners.add(new AreaOwner(screen.x,screen.y,iconsize,iconsize,transMeta,stepMeta));
  }
  gc.fillRectangle(screen.x,screen.y,iconsize,iconsize);
  String steptype=stepMeta.getStepID();
  Image im=(Image)images.get(steptype);
  if (im != null) {
    org.eclipse.swt.graphics.Rectangle bounds=im.getBounds();
    gc.drawImage(im,0,0,bounds.width,bounds.height,screen.x,screen.y,iconsize,iconsize);
  }
  gc.setBackground(background);
  if (stepError) {
    gc.setForeground(red);
  }
 else {
    gc.setForeground(black);
  }
  gc.drawRectangle(screen.x - 1,screen.y - 1,iconsize + 1,iconsize + 1);
  Point namePosition=getNamePosition(gc,name,screen,iconsize);
  gc.setForeground(black);
  gc.setFont(GUIResource.getInstance().getFontGraph());
  gc.drawText(name,namePosition.x,namePosition.y,SWT.DRAW_TRANSPARENT);
  boolean partitioned=false;
  StepPartitioningMeta meta=stepMeta.getStepPartitioningMeta();
  if (stepMeta.isPartitioned() && meta != null) {
    partitioned=true;
  }
  if (stepMeta.getClusterSchema() != null) {
    String message="C";
    message+="x" + stepMeta.getClusterSchema().findNrSlaves();
    gc.setBackground(background);
    gc.setForeground(black);
    gc.drawText(message,screen.x + 3 + iconsize,screen.y - 8);
  }
  if (stepMeta.getCopies() > 1 && !partitioned) {
    gc.setBackground(background);
    gc.setForeground(black);
    gc.drawText("x" + stepMeta.getCopies(),screen.x - 5,screen.y - 5);
  }
  if (stepError) {
    String log=stepLogMap.get(stepMeta);
    int xError=screen.x + iconsize - 5;
    int yError=screen.y + iconsize - 5;
    Image image=GUIResource.getInstance().getImageStepError();
    gc.drawImage(image,xError,yError);
    if (!shadow) {
      areaOwners.add(new AreaOwner(pt.x + iconsize - 5,pt.y + iconsize - 5,image.getBounds().width,image.getBounds().height,log,STRING_STEP_ERROR_LOG));
    }
  }
}
