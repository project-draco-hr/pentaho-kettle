{
  try {
    TransMeta meta=new TransMeta();
    meta.addDatabase(sourceDBInfo);
    meta.addDatabase(targetDBInfo);
    String note=Messages.getString("Spoon.Message.Note.ReadInformationFromTableOnDB",tablename,sourceDBInfo.getDatabaseName()) + Const.CR;
    note+=Messages.getString("Spoon.Message.Note.WriteInformationToTableOnDB",tablename,targetDBInfo.getDatabaseName());
    NotePadMeta ni=new NotePadMeta(note,150,10,-1,-1);
    meta.addNote(ni);
    String fromstepname=Messages.getString("Spoon.Message.Note.ReadFromTable",tablename);
    TableInputMeta tii=new TableInputMeta();
    tii.setDatabaseMeta(sourceDBInfo);
    tii.setSQL("SELECT * FROM " + tablename);
    StepLoader steploader=StepLoader.getInstance();
    String fromstepid=steploader.getStepPluginID(tii);
    StepMeta fromstep=new StepMeta(fromstepid,fromstepname,tii);
    fromstep.setLocation(150,100);
    fromstep.setDraw(true);
    fromstep.setDescription(Messages.getString("Spoon.Message.Note.ReadInformationFromTableOnDB",tablename,sourceDBInfo.getDatabaseName()));
    meta.addStep(fromstep);
    Database sourceDB=new Database(sourceDBInfo);
    sourceDB.shareVariablesWith(meta);
    sourceDB.connect();
    RowMetaInterface fields=sourceDB.getTableFields(tablename);
    int nrReserved=targetDBInfo.getNrReservedWords(fields);
    if (nrReserved > 0) {
      SelectValuesMeta svi=new SelectValuesMeta();
      svi.allocate(0,0,nrReserved);
      int nr=0;
      for (int i=0; i < fields.size(); i++) {
        ValueMetaInterface v=fields.getValueMeta(i);
        if (targetDBInfo.isReservedWord(v.getName())) {
          svi.getMeta()[nr].setName(v.getName());
          svi.getMeta()[nr].setRename(targetDBInfo.quoteField(v.getName()));
          nr++;
        }
      }
      String selstepname=Messages.getString("Spoon.Message.Note.HandleReservedWords");
      String selstepid=steploader.getStepPluginID(svi);
      StepMeta selstep=new StepMeta(selstepid,selstepname,svi);
      selstep.setLocation(350,100);
      selstep.setDraw(true);
      selstep.setDescription(Messages.getString("Spoon.Message.Note.RenamesReservedWords",targetDBInfo.getDatabaseTypeDesc()));
      meta.addStep(selstep);
      TransHopMeta shi=new TransHopMeta(fromstep,selstep);
      meta.addTransHop(shi);
      fromstep=selstep;
    }
    String tostepname=Messages.getString("Spoon.Message.Note.WriteToTable",tablename);
    TableOutputMeta toi=new TableOutputMeta();
    toi.setDatabaseMeta(targetDBInfo);
    toi.setTablename(tablename);
    toi.setCommitSize(200);
    toi.setTruncateTable(true);
    String tostepid=steploader.getStepPluginID(toi);
    StepMeta tostep=new StepMeta(tostepid,tostepname,toi);
    tostep.setLocation(550,100);
    tostep.setDraw(true);
    tostep.setDescription(Messages.getString("Spoon.Message.Note.WriteInformationToTableOnDB2",tablename,targetDBInfo.getDatabaseName()));
    meta.addStep(tostep);
    TransHopMeta hi=new TransHopMeta(fromstep,tostep);
    meta.addTransHop(hi);
    String name="Copy table from [" + sourceDBInfo.getName() + "] to ["+ targetDBInfo.getName()+ "]";
    String transName=name;
    int nr=1;
    if (spoon.delegates.trans.getTransformation(transName) != null) {
      nr++;
      transName=name + " " + nr;
    }
    meta.setName(transName);
    spoon.delegates.trans.addTransGraph(meta);
    spoon.refreshGraph();
    spoon.refreshTree();
  }
 catch (  Exception e) {
    new ErrorDialog(spoon.getShell(),Messages.getString("Spoon.Dialog.UnexpectedError.Title"),Messages.getString("Spoon.Dialog.UnexpectedError.Message"),new KettleException(e.getMessage(),e));
    return false;
  }
  return true;
}
