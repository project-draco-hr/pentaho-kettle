{
  DatabaseMeta databaseMeta=new DatabaseMeta();
  if (hasDatabasesInterface instanceof VariableSpace) {
    databaseMeta.shareVariablesWith((VariableSpace)hasDatabasesInterface);
  }
 else {
    databaseMeta.initializeVariablesFrom(null);
  }
  getDatabaseDialog().setDatabaseMeta(databaseMeta);
  String con_name=getDatabaseDialog().open();
  if (!Const.isEmpty(con_name)) {
    databaseMeta=getDatabaseDialog().getDatabaseMeta();
    databaseMeta.verifyAndModifyDatabaseName(hasDatabasesInterface.getDatabases(),null);
    hasDatabasesInterface.addDatabase(databaseMeta);
    spoon.addUndoNew((UndoInterface)hasDatabasesInterface,new DatabaseMeta[]{(DatabaseMeta)databaseMeta.clone()},new int[]{hasDatabasesInterface.indexOfDatabase(databaseMeta)});
    if (spoon.rep != null) {
      try {
        if (!spoon.rep.getSecurityProvider().isReadOnly()) {
          spoon.rep.save(databaseMeta,Const.VERSION_COMMENT_INITIAL_VERSION,null);
        }
 else {
          throw new KettleException(BaseMessages.getString(PKG,"Spoon.Dialog.Exception.ReadOnlyRepositoryUser"));
        }
      }
 catch (      KettleException e) {
        new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Message",databaseMeta.getName()),e);
      }
    }
    spoon.refreshTree();
  }
}
