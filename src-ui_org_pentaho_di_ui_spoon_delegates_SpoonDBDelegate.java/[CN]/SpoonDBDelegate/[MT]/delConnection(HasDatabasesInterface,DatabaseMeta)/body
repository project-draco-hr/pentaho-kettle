{
  int pos=hasDatabasesInterface.indexOfDatabase(db);
  boolean worked=false;
  Repository rep=spoon.getRepository();
  if (rep != null) {
    if (!rep.getSecurityProvider().isReadOnly()) {
      try {
        rep.deleteDatabaseMeta(db.getName());
        worked=true;
      }
 catch (      KettleException dbe) {
        new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorDeletingConnection.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorDeletingConnection.Message",db.getName()),dbe);
      }
    }
 else {
      new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorDeletingConnection.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorDeletingConnection.Message",db.getName()),new KettleException(BaseMessages.getString(PKG,"Spoon.Dialog.Exception.ReadOnlyUser")));
    }
  }
  if (spoon.getRepository() == null || worked) {
    spoon.addUndoDelete((UndoInterface)hasDatabasesInterface,new DatabaseMeta[]{(DatabaseMeta)db.clone()},new int[]{pos});
    hasDatabasesInterface.removeDatabase(pos);
    DBCache.getInstance().clear(db.getName());
  }
  spoon.refreshTree();
  spoon.setShellText();
}
