{
  HasDatabasesInterface hasDatabasesInterface=spoon.getActiveHasDatabasesInterface();
  if (hasDatabasesInterface == null && spoon.rep == null) {
    return;
  }
  DatabaseMeta databaseMeta=new DatabaseMeta();
  if (hasDatabasesInterface instanceof VariableSpace) {
    databaseMeta.shareVariablesWith((VariableSpace)hasDatabasesInterface);
  }
 else {
    databaseMeta.initializeVariablesFrom(null);
  }
  XulDatabaseDialog con=new XulDatabaseDialog(spoon.getShell(),databaseMeta);
  String con_name=con.open();
  if (!Const.isEmpty(con_name)) {
    databaseMeta=con.getDatabaseMeta();
    if (hasDatabasesInterface != null) {
      databaseMeta.verifyAndModifyDatabaseName(hasDatabasesInterface.getDatabases(),null);
      hasDatabasesInterface.addDatabase(databaseMeta);
      spoon.addUndoNew((UndoInterface)hasDatabasesInterface,new DatabaseMeta[]{(DatabaseMeta)databaseMeta.clone()},new int[]{hasDatabasesInterface.indexOfDatabase(databaseMeta)});
      saveConnection(databaseMeta);
      spoon.refreshTree();
    }
 else {
      try {
        if (!spoon.rep.userinfo.isReadonly()) {
          spoon.rep.save(databaseMeta);
        }
 else {
          throw new KettleException(BaseMessages.getString(PKG,"Spoon.Dialog.Exception.ReadOnlyRepositoryUser"));
        }
      }
 catch (      KettleException e) {
        new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Message",databaseMeta.getName()),e);
      }
    }
  }
}
