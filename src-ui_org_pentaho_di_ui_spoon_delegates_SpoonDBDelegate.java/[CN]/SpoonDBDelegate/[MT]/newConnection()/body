{
  HasDatabasesInterface hasDatabasesInterface=spoon.getActiveHasDatabasesInterface();
  if (hasDatabasesInterface == null && spoon.rep == null) {
    return;
  }
  DatabaseMeta databaseMeta=new DatabaseMeta();
  if (hasDatabasesInterface instanceof VariableSpace) {
    databaseMeta.shareVariablesWith((VariableSpace)hasDatabasesInterface);
  }
 else {
    databaseMeta.initializeVariablesFrom(null);
  }
  XulDatabaseDialog con=new XulDatabaseDialog(spoon.getShell(),databaseMeta);
  String con_name=con.open();
  if (!Const.isEmpty(con_name)) {
    databaseMeta=con.getDatabaseMeta();
    databaseMeta.verifyAndModifyDatabaseName(hasDatabasesInterface.getDatabases(),null);
    hasDatabasesInterface.addDatabase(databaseMeta);
    spoon.addUndoNew((UndoInterface)hasDatabasesInterface,new DatabaseMeta[]{(DatabaseMeta)databaseMeta.clone()},new int[]{hasDatabasesInterface.indexOfDatabase(databaseMeta)});
    try {
      if (!spoon.rep.getSecurityProvider().isReadOnly()) {
        spoon.rep.save(databaseMeta,Const.VERSION_COMMENT_INITIAL_VERSION,null);
      }
 else {
        throw new KettleException(BaseMessages.getString(PKG,"Spoon.Dialog.Exception.ReadOnlyRepositoryUser"));
      }
    }
 catch (    KettleException e) {
      new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingConnection.Message",databaseMeta.getName()),e);
    }
    spoon.refreshTree();
  }
}
