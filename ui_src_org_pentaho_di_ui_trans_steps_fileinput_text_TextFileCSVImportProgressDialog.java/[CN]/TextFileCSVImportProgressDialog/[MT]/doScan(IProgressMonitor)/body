{
  if (samples > 0) {
    monitor.beginTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningFile"),samples + 1);
  }
 else {
    monitor.beginTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningFile"),2);
  }
  String line="";
  long fileLineNumber=0;
  DecimalFormatSymbols dfs=new DecimalFormatSymbols();
  int nrfields=meta.inputFiles.inputFields.length;
  RowMetaInterface outputRowMeta=new RowMeta();
  meta.getFields(outputRowMeta,null,null,null,transMeta,null,null);
  for (  ValueMetaInterface valueMeta : outputRowMeta.getValueMetaList()) {
    valueMeta.setStorageMetadata(null);
    valueMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
  }
  RowMetaInterface convertRowMeta=outputRowMeta.cloneToType(ValueMetaInterface.TYPE_STRING);
  int[] nrnull=new int[nrfields];
  String[] minstr=new String[nrfields];
  String[] maxstr=new String[nrfields];
  boolean[] firststr=new boolean[nrfields];
  boolean[] isDate=new boolean[nrfields];
  int[] dateFormatCount=new int[nrfields];
  boolean[][] dateFormat=new boolean[nrfields][Const.getDateFormats().length];
  Date[][] minDate=new Date[nrfields][Const.getDateFormats().length];
  Date[][] maxDate=new Date[nrfields][Const.getDateFormats().length];
  boolean[] isNumber=new boolean[nrfields];
  int[] numberFormatCount=new int[nrfields];
  boolean[][] numberFormat=new boolean[nrfields][Const.getNumberFormats().length];
  double[][] minValue=new double[nrfields][Const.getDateFormats().length];
  double[][] maxValue=new double[nrfields][Const.getDateFormats().length];
  int[][] numberPrecision=new int[nrfields][Const.getNumberFormats().length];
  int[][] numberLength=new int[nrfields][Const.getNumberFormats().length];
  for (int i=0; i < nrfields; i++) {
    BaseFileInputField field=meta.inputFiles.inputFields[i];
    if (log.isDebug()) {
      debug="init field #" + i;
    }
    if (replaceMeta) {
      field.setName(meta.inputFiles.inputFields[i].getName());
      field.setType(meta.inputFiles.inputFields[i].getType());
      field.setFormat("");
      field.setLength(-1);
      field.setPrecision(-1);
      field.setCurrencySymbol(dfs.getCurrencySymbol());
      field.setDecimalSymbol("" + dfs.getDecimalSeparator());
      field.setGroupSymbol("" + dfs.getGroupingSeparator());
      field.setNullString("-");
      field.setTrimType(ValueMetaInterface.TRIM_TYPE_NONE);
    }
    nrnull[i]=0;
    minstr[i]="";
    maxstr[i]="";
    firststr[i]=true;
    isDate[i]=true;
    for (int j=0; j < Const.getDateFormats().length; j++) {
      dateFormat[i][j]=true;
      minDate[i][j]=Const.MAX_DATE;
      maxDate[i][j]=Const.MIN_DATE;
    }
    dateFormatCount[i]=Const.getDateFormats().length;
    isNumber[i]=true;
    for (int j=0; j < Const.getNumberFormats().length; j++) {
      numberFormat[i][j]=true;
      minValue[i][j]=Double.MAX_VALUE;
      maxValue[i][j]=-Double.MAX_VALUE;
      numberPrecision[i][j]=-1;
      numberLength[i][j]=-1;
    }
    numberFormatCount[i]=Const.getNumberFormats().length;
  }
  TextFileInputMeta strinfo=(TextFileInputMeta)meta.clone();
  for (int i=0; i < nrfields; i++) {
    strinfo.inputFiles.inputFields[i].setType(ValueMetaInterface.TYPE_STRING);
  }
  debug="get first line";
  StringBuilder lineBuffer=new StringBuilder(256);
  int fileFormatType=meta.getFileFormatTypeNr();
  line=TextFileInputUtils.getLine(log,reader,encodingType,fileFormatType,lineBuffer);
  fileLineNumber++;
  int skipped=1;
  if (meta.content.header) {
    while (line != null && skipped < meta.content.nrHeaderLines) {
      line=TextFileInputUtils.getLine(log,reader,encodingType,fileFormatType,lineBuffer);
      skipped++;
      fileLineNumber++;
    }
  }
  int linenr=1;
  List<StringEvaluator> evaluators=new ArrayList<StringEvaluator>();
  DecimalFormat df2=(DecimalFormat)NumberFormat.getInstance();
  DecimalFormatSymbols dfs2=new DecimalFormatSymbols();
  SimpleDateFormat daf2=new SimpleDateFormat();
  boolean errorFound=false;
  while (!errorFound && line != null && (linenr <= samples || samples == 0) && !monitor.isCanceled()) {
    monitor.subTask(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.ScanningLine","" + linenr));
    if (samples > 0) {
      monitor.worked(1);
    }
    if (log.isDebug()) {
      debug="convert line #" + linenr + " to row";
    }
    RowMetaInterface rowMeta=new RowMeta();
    meta.getFields(rowMeta,"stepname",null,null,transMeta,null,null);
    for (    ValueMetaInterface valueMeta : rowMeta.getValueMetaList()) {
      valueMeta.setStorageMetadata(null);
      valueMeta.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
    }
    String delimiter=transMeta.environmentSubstitute(meta.content.separator);
    String enclosure=transMeta.environmentSubstitute(meta.content.enclosure);
    String escapeCharacter=transMeta.environmentSubstitute(meta.content.escapeCharacter);
    Object[] r=TextFileInputUtils.convertLineToRow(log,new TextFileLine(line,fileLineNumber,null),strinfo,null,0,outputRowMeta,convertRowMeta,FileInputList.createFilePathList(transMeta,meta.inputFiles.fileName,meta.inputFiles.fileMask,meta.inputFiles.excludeFileMask,meta.inputFiles.fileRequired,meta.includeSubFolderBoolean())[0],rownumber,delimiter,enclosure,escapeCharacter,null,new BaseFileInputStepMeta.AdditionalOutputFields(),null,null,false,null,null,null,null,null);
    if (r == null) {
      errorFound=true;
      continue;
    }
    rownumber++;
    for (int i=0; i < nrfields && i < r.length; i++) {
      StringEvaluator evaluator;
      if (i >= evaluators.size()) {
        evaluator=new StringEvaluator(true);
        evaluators.add(evaluator);
      }
 else {
        evaluator=evaluators.get(i);
      }
      String string=rowMeta.getString(r,i);
      if (i == 0) {
        System.out.println();
      }
      evaluator.evaluateString(string);
    }
    fileLineNumber++;
    if (r != null) {
      linenr++;
    }
    line=TextFileInputUtils.getLine(log,reader,encodingType,fileFormatType,lineBuffer);
  }
  monitor.worked(1);
  monitor.setTaskName(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Task.AnalyzingResults"));
  StringBuilder message=new StringBuilder();
  message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.ResultAfterScanning","" + (linenr - 1)));
  message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.HorizontalLine"));
  for (int i=0; i < nrfields; i++) {
    BaseFileInputField field=meta.inputFiles.inputFields[i];
    StringEvaluator evaluator=evaluators.get(i);
    List<StringEvaluationResult> evaluationResults=evaluator.getStringEvaluationResults();
    if (evaluationResults.isEmpty()) {
      field.setType(ValueMetaInterface.TYPE_STRING);
      field.setLength(evaluator.getMaxLength());
    }
 else {
      StringEvaluationResult result=evaluator.getAdvicedResult();
      if (result != null) {
        ValueMetaInterface conversionMeta=result.getConversionMeta();
        field.setType(conversionMeta.getType());
        field.setTrimType(conversionMeta.getTrimType());
        field.setFormat(conversionMeta.getConversionMask());
        field.setDecimalSymbol(conversionMeta.getDecimalSymbol());
        field.setGroupSymbol(conversionMeta.getGroupingSymbol());
        field.setLength(conversionMeta.getLength());
        field.setPrecision(conversionMeta.getPrecision());
        nrnull[i]=result.getNrNull();
        minstr[i]=result.getMin() == null ? "" : result.getMin().toString();
        maxstr[i]=result.getMax() == null ? "" : result.getMax().toString();
      }
    }
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.FieldNumber","" + (i + 1)));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.FieldName",field.getName()));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.FieldType",field.getTypeDesc()));
switch (field.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
      message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.EstimatedLength",(field.getLength() < 0 ? "-" : "" + field.getLength())));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.EstimatedPrecision",field.getPrecision() < 0 ? "-" : "" + field.getPrecision()));
  message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberFormat",field.getFormat()));
if (!evaluationResults.isEmpty()) {
  if (evaluationResults.size() > 1) {
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.WarnNumberFormat"));
  }
  for (  StringEvaluationResult seResult : evaluationResults) {
    String mask=seResult.getConversionMeta().getConversionMask();
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberFormat2",mask));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.TrimType",seResult.getConversionMeta().getTrimType()));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberMinValue",seResult.getMin()));
    message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberMaxValue",seResult.getMax()));
    try {
      df2.applyPattern(mask);
      df2.setDecimalFormatSymbols(dfs2);
      double mn=df2.parse(seResult.getMin().toString()).doubleValue();
      message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberExample",mask,seResult.getMin(),Double.toString(mn)));
    }
 catch (    Exception e) {
      if (log.isDetailed()) {
        log.logDetailed("This is unexpected: parsing [" + seResult.getMin() + "] with format ["+ mask+ "] did not work.");
      }
    }
  }
}
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.NumberNrNullValues","" + nrnull[i]));
break;
case ValueMetaInterface.TYPE_STRING:
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.StringMaxLength","" + field.getLength()));
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.StringMinValue",minstr[i]));
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.StringMaxValue",maxstr[i]));
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.StringNrNullValues","" + nrnull[i]));
break;
case ValueMetaInterface.TYPE_DATE:
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateMaxLength",field.getLength() < 0 ? "-" : "" + field.getLength()));
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateFormat",field.getFormat()));
if (dateFormatCount[i] > 1) {
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.WarnDateFormat"));
}
if (!Utils.isEmpty(minstr[i])) {
for (int x=0; x < Const.getDateFormats().length; x++) {
if (dateFormat[i][x]) {
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateFormat2",Const.getDateFormats()[x]));
Date mindate=minDate[i][x];
Date maxdate=maxDate[i][x];
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateMinValue",mindate.toString()));
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateMaxValue",maxdate.toString()));
daf2.applyPattern(Const.getDateFormats()[x]);
try {
Date md=daf2.parse(minstr[i]);
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateExample",Const.getDateFormats()[x],minstr[i],md.toString()));
}
 catch (Exception e) {
if (log.isDetailed()) {
log.logDetailed("This is unexpected: parsing [" + minstr[i] + "] with format ["+ Const.getDateFormats()[x]+ "] did not work.");
}
}
}
}
}
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.DateNrNullValues","" + nrnull[i]));
break;
default :
break;
}
if (nrnull[i] == linenr - 1) {
message.append(BaseMessages.getString(PKG,"TextFileCSVImportProgressDialog.Info.AllNullValues"));
}
message.append(Const.CR);
}
monitor.worked(1);
monitor.done();
return message.toString();
}
