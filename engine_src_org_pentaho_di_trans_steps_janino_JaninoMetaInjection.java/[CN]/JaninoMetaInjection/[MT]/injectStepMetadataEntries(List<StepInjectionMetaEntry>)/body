{
  List<String> fieldNames=new ArrayList<String>();
  List<String> javaExpressions=new ArrayList<String>();
  List<String> valueTypes=new ArrayList<String>();
  List<String> lengths=new ArrayList<String>();
  List<String> precisions=new ArrayList<String>();
  List<String> replaceValues=new ArrayList<String>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null) {
      continue;
    }
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case EXPRESSION_FIELDS:
      for (      StepInjectionMetaEntry lookField : lookFields.getDetails()) {
        Entry fieldEntry=Entry.findEntry(lookField.getKey());
        if (fieldEntry == Entry.EXPRESSION_FIELD) {
          String newFieldname=null;
          String javaExpression=null;
          String valueType=null;
          String length=null;
          String precision=null;
          String replaceValue=null;
          List<StepInjectionMetaEntry> entries=lookField.getDetails();
          for (          StepInjectionMetaEntry entry : entries) {
            Entry metaEntry=Entry.findEntry(entry.getKey());
            if (metaEntry != null) {
              String value=(String)entry.getValue();
switch (metaEntry) {
case NEW_FIELDNAME:
                newFieldname=value;
              break;
case JAVA_EXPRESSION:
            javaExpression=value;
          break;
case VALUE_TYPE:
        valueType=value;
      break;
case LENGTH:
    length=value;
  break;
case PRECISION:
precision=value;
break;
case REPLACE_VALUE:
replaceValue=value;
break;
default :
break;
}
}
}
fieldNames.add(newFieldname);
javaExpressions.add(javaExpression);
valueTypes.add(valueType);
lengths.add(length);
precisions.add(precision);
replaceValues.add(replaceValue);
}
}
break;
default :
break;
}
}
if (fieldNames.size() > 0) {
JaninoMetaFunction[] fields=new JaninoMetaFunction[fieldNames.size()];
Iterator<String> iFieldNames=fieldNames.iterator();
Iterator<String> iJavaExpressions=javaExpressions.iterator();
Iterator<String> iValueTypes=valueTypes.iterator();
Iterator<String> iLengths=lengths.iterator();
Iterator<String> iPrecisions=precisions.iterator();
Iterator<String> iReplaceValues=replaceValues.iterator();
int i=0;
while (iFieldNames.hasNext()) {
fields[i]=new JaninoMetaFunction(iFieldNames.next(),iJavaExpressions.next(),ValueMeta.getType(iValueTypes.next()),Const.toInt(iLengths.next(),-1),Const.toInt(iPrecisions.next(),-1),iReplaceValues.next());
i++;
}
meta.setFormula(fields);
}
}
