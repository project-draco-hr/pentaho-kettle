{
  try {
    List<StepInjectionMetaEntry> entries=loader.getStepMeta().getStepMetaInterface().getStepMetaInjectionInterface().getStepInjectionMetadataEntries();
    for (    StepInjectionMetaEntry entry : entries) {
      entry.setValueType(lm.findAttribute(entry.getKey()).getType());
switch (entry.getValueType()) {
case ValueMetaInterface.TYPE_STRING:
        entry.setValue("new_".concat(entry.getKey()));
      break;
case ValueMetaInterface.TYPE_BOOLEAN:
    entry.setValue(Boolean.TRUE);
  break;
default :
break;
}
if (!entry.getDetails().isEmpty()) {
List<StepInjectionMetaEntry> childEntries=entry.getDetails().get(0).getDetails();
for (StepInjectionMetaEntry childEntry : childEntries) {
childEntry.setValue("new_".concat(childEntry.getKey()));
}
}
}
loader.getStepMeta().getStepMetaInterface().getStepMetaInjectionInterface().injectStepMetadataEntries(entries);
assertEquals("Schema name not properly injected... ","new_SCHEMA",lm.getSchemaName());
assertEquals("Table name not properly injected... ","new_TABLE",lm.getTableName());
assertEquals("DB Name Override not properly injected... ","new_DBNAMEOVERRIDE",lm.getDbNameOverride());
assertEquals("Delimiter not properly injected... ","new_DELIMITER",lm.getDelimiter());
assertEquals("Enclosure not properly injected... ","new_ENCLOSURE",lm.getEnclosure());
assertEquals("Load action not properly injected... ","new_LOADACTION",lm.getLoadAction());
assertEquals("PSQL path not properly injected... ","new_PSQLPATH",lm.getPsqlpath());
assertEquals("Stop on error not properly injected... ",Boolean.TRUE,lm.isStopOnError());
assertEquals("Field name not properly injected... ","new_FIELDNAME",lm.getFieldTable()[0]);
assertEquals("Stream name not properly injected... ","new_STREAMNAME",lm.getFieldStream()[0]);
assertEquals("Date Mask not properly injected... ","new_DATEMASK",lm.getDateMask()[0]);
}
 catch (KettleException e) {
fail(e.getMessage());
}
}
