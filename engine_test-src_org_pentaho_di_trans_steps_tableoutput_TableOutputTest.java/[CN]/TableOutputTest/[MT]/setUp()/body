{
  databaseMeta=mock(DatabaseMeta.class);
  doReturn("").when(databaseMeta).quoteField(anyString());
  tableOutputMeta=mock(TableOutputMeta.class);
  doReturn(databaseMeta).when(tableOutputMeta).getDatabaseMeta();
  doReturn(true).when(tableOutputMeta).isReturningGeneratedKeys();
  stepMeta=mock(StepMeta.class);
  doReturn("step").when(stepMeta).getName();
  doReturn(mock(StepPartitioningMeta.class)).when(stepMeta).getTargetStepPartitioningMeta();
  doReturn(tableOutputMeta).when(stepMeta).getStepMetaInterface();
  Database db=mock(Database.class);
  doReturn(mock(Connection.class)).when(db).getConnection();
  tableOutputData=mock(TableOutputData.class);
  tableOutputData.db=db;
  tableOutputData.tableName="sas";
  tableOutputData.preparedStatements=mock(Map.class);
  tableOutputData.commitCounterMap=mock(Map.class);
  TransMeta transMeta=mock(TransMeta.class);
  doReturn(stepMeta).when(transMeta).findStep(anyString());
  tableOutput=new TableOutput(stepMeta,tableOutputData,1,transMeta,mock(Trans.class));
  tableOutput.setData(tableOutputData);
  tableOutput.setMeta(tableOutputMeta);
  tableOutputSpy=spy(tableOutput);
  doReturn(stepMeta).when(tableOutputSpy).getStepMeta();
  doReturn(false).when(tableOutputSpy).isRowLevel();
  doReturn(false).when(tableOutputSpy).isDebug();
  doNothing().when(tableOutputSpy).logDetailed(anyString());
}
