{
  try {
    headerEnabled=rep.getStepAttributeBoolean(id_step,"header");
    footerEnabled=rep.getStepAttributeBoolean(id_step,"footer");
    makeSheetActive=rep.getStepAttributeBoolean(id_step,"makeSheetActive");
    appendOmitHeader=rep.getStepAttributeBoolean(id_step,"appendOmitHeader");
    startingCell=rep.getStepAttributeString(id_step,"startingCell");
    appendEmpty=(int)rep.getStepAttributeInteger(id_step,"appendEmpty");
    appendOffset=(int)rep.getStepAttributeInteger(id_step,"appendOffset");
    rowWritingMethod=rep.getStepAttributeString(id_step,"rowWritingMethod");
    appendLines=rep.getStepAttributeBoolean(id_step,"appendLines");
    forceFormulaRecalculation=rep.getStepAttributeBoolean(id_step,"forceFormulaRecalculation");
    leaveExistingStylesUnchanged=rep.getStepAttributeBoolean(id_step,"leaveExistingStylesUnchanged");
    String addToResult=rep.getStepAttributeString(id_step,"add_to_result_filenames");
    if (Const.isEmpty(addToResult)) {
      addToResultFilenames=true;
    }
 else {
      addToResultFilenames=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    }
    fileName=rep.getStepAttributeString(id_step,"file_name");
    extension=rep.getStepAttributeString(id_step,"file_extention");
    doNotOpenNewFileInit=rep.getStepAttributeBoolean(id_step,"do_not_open_newfile_init");
    splitEvery=(int)rep.getStepAttributeInteger(id_step,"file_split");
    stepNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_stepnr");
    dateInFilename=rep.getStepAttributeBoolean(id_step,"file_add_date");
    timeInFilename=rep.getStepAttributeBoolean(id_step,"file_add_time");
    SpecifyFormat=rep.getStepAttributeBoolean(id_step,"SpecifyFormat");
    date_time_format=rep.getStepAttributeString(id_step,"date_time_format");
    autosizecolums=rep.getStepAttributeBoolean(id_step,"autosizecolums");
    streamingData=rep.getStepAttributeBoolean(id_step,"stream_data");
    protectsheet=rep.getStepAttributeBoolean(id_step,"protect_sheet");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"password"));
    protectedBy=rep.getStepAttributeString(id_step,"protected_by");
    templateEnabled=rep.getStepAttributeBoolean(id_step,"template_enabled");
    templateFileName=rep.getStepAttributeString(id_step,"template_filename");
    templateSheetEnabled=rep.getStepAttributeBoolean(id_step,"template_sheet_enabled");
    templateSheetHidden=rep.getStepAttributeBoolean(id_step,"template_sheet_hidden");
    templateSheetName=rep.getStepAttributeString(id_step,"template_sheetname");
    sheetname=rep.getStepAttributeString(id_step,"sheetname");
    ifFileExists=rep.getStepAttributeString(id_step,"if_file_exists");
    ifSheetExists=rep.getStepAttributeString(id_step,"if_sheet_exists");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new ExcelWriterStepField();
      outputFields[i].setName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setType(rep.getStepAttributeString(id_step,i,"field_type"));
      outputFields[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      outputFields[i].setTitle(rep.getStepAttributeString(id_step,i,"field_title"));
      outputFields[i].setTitleStyleCell(rep.getStepAttributeString(id_step,i,"field_title_style_cell"));
      outputFields[i].setStyleCell(rep.getStepAttributeString(id_step,i,"field_style_cell"));
      outputFields[i].setCommentField(rep.getStepAttributeString(id_step,i,"field_comment_field"));
      outputFields[i].setCommentAuthorField(rep.getStepAttributeString(id_step,i,"field_comment_author_field"));
      outputFields[i].setFormula(rep.getStepAttributeBoolean(id_step,i,"field_formula"));
      outputFields[i].setHyperlinkField(rep.getStepAttributeString(id_step,i,"field_hyperlink_field"));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
