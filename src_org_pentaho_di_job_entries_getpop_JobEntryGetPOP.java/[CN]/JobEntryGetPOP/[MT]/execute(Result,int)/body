{
  Result result=previousResult;
  result.setResult(false);
  FileObject fileObject=null;
  MailConnection mailConn=null;
  Date beginDate=null;
  Date endDate=null;
  SimpleDateFormat df=new SimpleDateFormat(DATE_PATTERN);
  try {
    boolean usePOP3=getProtocol().equals(MailConnectionMeta.PROTOCOL_STRING_POP3);
    boolean moveafter=false;
    int nbrmailtoretrieve=usePOP3 ? getRetrievemails() == 2 ? Const.toInt(getFirstMails(),0) : 0 : Const.toInt(getFirstIMAPMails(),0);
    String realOutputFolder=getRealOutputDirectory();
    fileObject=KettleVFS.getFileObject(realOutputFolder,this);
    if (fileObject.exists()) {
      if (fileObject.getType() != FileType.FOLDER)       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.NotAFolderNot",realOutputFolder));
      if (isDebug())       logDebug(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Log.OutputFolderExists",realOutputFolder));
    }
 else {
      if (isCreateLocalFolder()) {
        if (isDetailed())         logDetailed(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Log.OutputFolderNotExist",realOutputFolder));
        fileObject.createFolder();
      }
 else       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.FolderNotExists1.Label") + realOutputFolder + BaseMessages.getString(PKG,"JobGetMailsFromPOP.FolderNotExists2.Label"));
    }
    String targetAttachmentFolder=KettleVFS.getFilename(fileObject);
    boolean useDifferentFolderForAttachment=(isSaveAttachment() && isDifferentFolderForAttachment());
    if (useDifferentFolderForAttachment) {
      String realFolderAttachment=environmentSubstitute(getAttachmentFolder());
      if (Const.isEmpty(realFolderAttachment))       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderEmpty"));
      fileObject=KettleVFS.getFileObject(realFolderAttachment,this);
      if (!fileObject.exists())       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderNotExist",realFolderAttachment));
      if (fileObject.getType() != FileType.FOLDER)       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.AttachmentFolderNotAFolder",realFolderAttachment));
      targetAttachmentFolder=KettleVFS.getFilename(fileObject);
    }
    try {
      fileObject.close();
      fileObject=null;
    }
 catch (    IOException ex) {
    }
    ;
    String realMoveToIMAPFolder=environmentSubstitute(getMoveToIMAPFolder());
    if (getProtocol().equals(MailConnectionMeta.PROTOCOL_STRING_IMAP) && (getActionType() == MailConnectionMeta.ACTION_TYPE_MOVE) || (getActionType() == MailConnectionMeta.ACTION_TYPE_GET && getAfterGetIMAP() == MailConnectionMeta.AFTER_GET_IMAP_MOVE)) {
      if (Const.isEmpty(realMoveToIMAPFolder))       throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.MoveToIMAPFolderEmpty"));
      moveafter=true;
    }
switch (getConditionOnReceivedDate()) {
case MailConnectionMeta.CONDITION_DATE_EQUAL:
case MailConnectionMeta.CONDITION_DATE_GREATER:
case MailConnectionMeta.CONDITION_DATE_SMALLER:
      String realBeginDate=environmentSubstitute(getReceivedDate1());
    if (Const.isEmpty(realBeginDate))     throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.ReceivedDateSearchTermEmpty"));
  beginDate=df.parse(realBeginDate);
break;
case MailConnectionMeta.CONDITION_DATE_BETWEEN:
realBeginDate=environmentSubstitute(getReceivedDate1());
if (Const.isEmpty(realBeginDate)) throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.ReceivedDatesSearchTermEmpty"));
beginDate=df.parse(realBeginDate);
String realEndDate=environmentSubstitute(getReceivedDate2());
if (Const.isEmpty(realEndDate)) throw new KettleException(BaseMessages.getString(PKG,"JobGetMailsFromPOP.Error.ReceivedDatesSearchTermEmpty"));
endDate=df.parse(realEndDate);
break;
default :
break;
}
String realserver=getRealServername();
String realusername=getRealUsername();
String realpassword=getRealPassword();
String realFilenamePattern=getRealFilenamePattern();
int realport=Const.toInt(environmentSubstitute(sslport),-1);
String realIMAPFolder=environmentSubstitute(getIMAPFolder());
String realProxyUsername=getRealProxyUsername();
initVariables();
mailConn=new MailConnection(log,usePOP3 ? MailConnectionMeta.PROTOCOL_POP3 : MailConnectionMeta.PROTOCOL_IMAP,realserver,realport,realusername,realpassword,isUseSSL(),isUseProxy(),realProxyUsername);
mailConn.connect();
if (moveafter) {
mailConn.setDestinationFolder(realMoveToIMAPFolder,isCreateMoveToFolder());
}
String realSearchSender=environmentSubstitute(getSenderSearchTerm());
if (!Const.isEmpty(realSearchSender)) {
mailConn.setSenderTerm(realSearchSender,isNotTermSenderSearch());
}
String realSearchReceipient=environmentSubstitute(getReceipientSearch());
if (!Const.isEmpty(realSearchReceipient)) {
mailConn.setReceipientTerm(realSearchReceipient);
}
String realSearchSubject=environmentSubstitute(getSubjectSearch());
if (!Const.isEmpty(realSearchSubject)) {
mailConn.setSubjectTerm(realSearchSubject,isNotTermSubjectSearch());
}
String realSearchBody=environmentSubstitute(getBodySearch());
if (!Const.isEmpty(realSearchBody)) {
mailConn.setBodyTerm(realSearchBody,isNotTermBodySearch());
}
switch (getConditionOnReceivedDate()) {
case MailConnectionMeta.CONDITION_DATE_EQUAL:
mailConn.setReceivedDateTermEQ(beginDate);
break;
case MailConnectionMeta.CONDITION_DATE_GREATER:
mailConn.setReceivedDateTermGT(beginDate);
break;
case MailConnectionMeta.CONDITION_DATE_SMALLER:
mailConn.setReceivedDateTermLT(beginDate);
break;
case MailConnectionMeta.CONDITION_DATE_BETWEEN:
mailConn.setReceivedDateTermBetween(beginDate,endDate);
break;
default :
break;
}
if (usePOP3) {
if (getRetrievemails() == 1) {
mailConn.setFlagTermUnread();
}
}
 else {
switch (getValueImapList()) {
case MailConnectionMeta.VALUE_IMAP_LIST_NEW:
mailConn.setFlagTermNew();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_OLD:
mailConn.setFlagTermOld();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_READ:
mailConn.setFlagTermRead();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_UNREAD:
mailConn.setFlagTermUnread();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_FLAGGED:
mailConn.setFlagTermFlagged();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_NOT_FLAGGED:
mailConn.setFlagTermNotFlagged();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_DRAFT:
mailConn.setFlagTermDraft();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_NOT_DRAFT:
mailConn.setFlagTermNotDraft();
break;
default :
break;
}
}
fetchOneFolder(mailConn,usePOP3,realIMAPFolder,realOutputFolder,targetAttachmentFolder,realMoveToIMAPFolder,realFilenamePattern,nbrmailtoretrieve,df);
if (isIncludeSubFolders()) {
if (isDebug()) logDebug(BaseMessages.getString(PKG,"JobGetPOP.FetchingSubFolders"));
String[] subfolders=mailConn.returnAllFolders();
if (subfolders.length == 0) {
if (isDebug()) logDebug(BaseMessages.getString(PKG,"JobGetPOP.NoSubFolders"));
}
 else {
for (int i=0; i < subfolders.length; i++) {
fetchOneFolder(mailConn,usePOP3,subfolders[i],realOutputFolder,targetAttachmentFolder,realMoveToIMAPFolder,realFilenamePattern,nbrmailtoretrieve,df);
}
}
}
result.setResult(true);
result.setNrFilesRetrieved(mailConn.getSavedAttachedFilesCounter());
result.setNrLinesWritten(mailConn.getSavedMessagesCounter());
result.setNrLinesDeleted(mailConn.getDeletedMessagesCounter());
result.setNrLinesUpdated(mailConn.getMovedMessagesCounter());
if (isDetailed()) {
logDetailed("=======================================");
logDetailed(BaseMessages.getString(PKG,"JobGetPOP.Log.Info.SavedMessages","" + mailConn.getSavedMessagesCounter()));
logDetailed(BaseMessages.getString(PKG,"JobGetPOP.Log.Info.DeletedMessages","" + mailConn.getDeletedMessagesCounter()));
logDetailed(BaseMessages.getString(PKG,"JobGetPOP.Log.Info.MovedMessages","" + mailConn.getMovedMessagesCounter()));
if (getActionType() == MailConnectionMeta.ACTION_TYPE_GET && isSaveAttachment()) logDetailed(BaseMessages.getString(PKG,"JobGetPOP.Log.Info.AttachedMessagesSuccess","" + mailConn.getSavedAttachedFilesCounter()));
logDetailed("=======================================");
}
}
 catch (Exception e) {
result.setNrErrors(1);
logError("Unexpected error: " + e.getMessage());
logError(Const.getStackTracker(e));
}
 finally {
if (fileObject != null) {
try {
fileObject.close();
fileObject=null;
}
 catch (IOException ex) {
}
;
}
try {
if (mailConn != null) {
mailConn.disconnect();
mailConn=null;
}
}
 catch (Exception e) {
}
;
}
return result;
}
