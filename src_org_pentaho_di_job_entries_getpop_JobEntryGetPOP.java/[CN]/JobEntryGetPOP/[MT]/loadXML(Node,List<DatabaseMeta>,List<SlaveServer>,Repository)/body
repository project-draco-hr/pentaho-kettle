{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    servername=XMLHandler.getTagValue(entrynode,"servername");
    username=XMLHandler.getTagValue(entrynode,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode,"password"));
    usessl="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"usessl"));
    sslport=XMLHandler.getTagValue(entrynode,"sslport");
    outputdirectory=XMLHandler.getTagValue(entrynode,"outputdirectory");
    filenamepattern=XMLHandler.getTagValue(entrynode,"filenamepattern");
    if (Const.isEmpty(filenamepattern))     filenamepattern=DEFAULT_FILE_NAME_PATTERN;
    retrievemails=Const.toInt(XMLHandler.getTagValue(entrynode,"retrievemails"),-1);
    firstmails=XMLHandler.getTagValue(entrynode,"firstmails");
    delete="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"delete"));
    protocol=Const.NVL(XMLHandler.getTagValue(entrynode,"protocol"),PROTOCOL_STRING_POP3);
    String sm=XMLHandler.getTagValue(entrynode,"savemessage");
    if (Const.isEmpty(sm))     savemessage=true;
 else     savemessage="Y".equalsIgnoreCase(sm);
    String sa=XMLHandler.getTagValue(entrynode,"saveattachment");
    if (Const.isEmpty(sa))     saveattachment=true;
 else     saveattachment="Y".equalsIgnoreCase(sa);
    usedifferentfolderforattachment="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"usedifferentfolderforattachment"));
    attachmentfolder=XMLHandler.getTagValue(entrynode,"attachmentfolder");
    attachmentwildcard=XMLHandler.getTagValue(entrynode,"attachmentwildcard");
    valueimaplist=getValueImapListByCode(Const.NVL(XMLHandler.getTagValue(entrynode,"valueimaplist"),""));
    imapfirstmails=XMLHandler.getTagValue(entrynode,"imapfirstmails");
    imapfolder=XMLHandler.getTagValue(entrynode,"imapfolder");
    senderSearch=XMLHandler.getTagValue(entrynode,"sendersearch");
    notTermSenderSearch="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"nottermsendersearch"));
    receipientSearch=XMLHandler.getTagValue(entrynode,"receipientsearch");
    notTermReceipientSearch="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"nottermreceipientsearch"));
    subjectSearch=XMLHandler.getTagValue(entrynode,"subjectsearch");
    notTermSubjectSearch="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"nottermsubjectsearch"));
    conditionReceivedDate=getConditionByCode(Const.NVL(XMLHandler.getTagValue(entrynode,"conditionreceiveddate"),""));
    notTermReceivedDateSearch="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"nottermreceiveddatesearch"));
    receivedDate1=XMLHandler.getTagValue(entrynode,"receivedDate1");
    receivedDate2=XMLHandler.getTagValue(entrynode,"receivedDate2");
    actiontype=getActionTypeByCode(Const.NVL(XMLHandler.getTagValue(entrynode,"actiontype"),""));
    moveToIMAPFolder=XMLHandler.getTagValue(entrynode,"movetoimapfolder");
    createmovetofolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createmovetofolder"));
    createlocalfolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createlocalfolder"));
    aftergetimap=getAfterGetIMAPByCode(Const.NVL(XMLHandler.getTagValue(entrynode,"aftergetimap"),""));
    includesubfolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"includesubfolders"));
    useproxy="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"useproxy"));
    proxyusername=XMLHandler.getTagValue(entrynode,"proxyusername");
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException("Unable to load job entry of type 'get pop' from XML node",xe);
  }
}
