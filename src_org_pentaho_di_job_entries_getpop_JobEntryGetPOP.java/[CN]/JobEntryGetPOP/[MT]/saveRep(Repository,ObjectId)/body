{
  try {
    rep.saveJobEntryAttribute(id_job,getObjectId(),"servername",servername);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"username",username);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"password",Encr.encryptPasswordIfNotUsingVariables(password));
    rep.saveJobEntryAttribute(id_job,getObjectId(),"usessl",usessl);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"sslport",sslport);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"outputdirectory",outputdirectory);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"filenamepattern",filenamepattern);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"retrievemails",retrievemails);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"firstmails",firstmails);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"delete",delete);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"protocol",protocol);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"savemessage",savemessage);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"saveattachment",saveattachment);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"usedifferentfolderforattachment",usedifferentfolderforattachment);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"attachmentfolder",attachmentfolder);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"attachmentwildcard",attachmentwildcard);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"valueimaplist",getValueImapListCode(valueimaplist));
    rep.saveJobEntryAttribute(id_job,getObjectId(),"imapfirstmails",imapfirstmails);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"imapfolder",imapfolder);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"sendersearch",senderSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"nottermsendersearch",notTermSenderSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"receipientsearch",receipientSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"nottermreceipientsearch",notTermReceipientSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"subjectsearch",subjectSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"nottermsubjectsearch",notTermSubjectSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"conditionreceiveddate",getConditionDateCode(conditionReceivedDate));
    rep.saveJobEntryAttribute(id_job,getObjectId(),"nottermreceiveddatesearch",notTermReceivedDateSearch);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"receiveddate1",receivedDate1);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"receiveddate2",receivedDate2);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"actiontype",getActionTypeCode(actiontype));
    rep.saveJobEntryAttribute(id_job,getObjectId(),"movetoimapfolder",moveToIMAPFolder);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"createmovetofolder",createmovetofolder);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"createlocalfolder",createlocalfolder);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"aftergetimap",getAfterGetIMAPCode(aftergetimap));
    rep.saveJobEntryAttribute(id_job,getObjectId(),"includesubfolders",includesubfolders);
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save job entry of type 'get pop' to the repository for id_job=" + id_job,dbe);
  }
}
