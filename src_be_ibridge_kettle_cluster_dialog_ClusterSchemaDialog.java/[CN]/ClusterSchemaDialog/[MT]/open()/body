{
  Shell parent=getParent();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      clusterSchema.setChanged();
    }
  }
;
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setText("Slave Server dialog");
  shell.setLayout(formLayout);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(" &OK ");
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(" &Cancel ");
  Button[] buttons=new Button[]{wOK,wCancel};
  BaseStepDialog.positionBottomButtons(shell,buttons,margin,null);
  Label wlName=new Label(shell,SWT.RIGHT);
  props.setLook(wlName);
  wlName.setText("Schema name  ");
  FormData fdlServiceURL=new FormData();
  fdlServiceURL.top=new FormAttachment(0,0);
  fdlServiceURL.left=new FormAttachment(0,0);
  fdlServiceURL.right=new FormAttachment(middle,-margin);
  wlName.setLayoutData(fdlServiceURL);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  FormData fdServiceURL=new FormData();
  fdServiceURL.top=new FormAttachment(0,0);
  fdServiceURL.left=new FormAttachment(middle,0);
  fdServiceURL.right=new FormAttachment(95,0);
  wName.setLayoutData(fdServiceURL);
  Label wlServers=new Label(shell,SWT.LEFT);
  wlServers.setText("Slave servers  ");
  props.setLook(wlServers);
  FormData fdlServers=new FormData();
  fdlServers.left=new FormAttachment(middle,margin * 2);
  fdlServers.top=new FormAttachment(wName,margin);
  wlServers.setLayoutData(fdlServers);
  wAdd=new Button(shell,SWT.PUSH);
  wAdd.setText("Add slave server");
  props.setLook(wAdd);
  FormData fdAdd=new FormData();
  fdAdd.right=new FormAttachment(100,0);
  fdAdd.top=new FormAttachment(wlServers,5 * margin);
  wAdd.setLayoutData(fdAdd);
  wAdd.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addSlaveServer();
    }
  }
);
  wEdit=new Button(shell,SWT.PUSH);
  wEdit.setText("Edit slave server");
  props.setLook(wEdit);
  FormData fdEdit=new FormData();
  fdEdit.right=new FormAttachment(100,0);
  fdEdit.top=new FormAttachment(wAdd,2 * margin);
  wEdit.setLayoutData(fdEdit);
  wEdit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editSlaveServer();
    }
  }
);
  wDel=new Button(shell,SWT.PUSH);
  wDel.setText("Delete slave server");
  props.setLook(wDel);
  FormData fdDel=new FormData();
  fdDel.right=new FormAttachment(100,0);
  fdDel.top=new FormAttachment(wEdit,2 * margin);
  wDel.setLayoutData(fdDel);
  wDel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSlaveServer();
    }
  }
);
  ColumnInfo[] partitionColumns=new ColumnInfo[]{new ColumnInfo("Service URL",ColumnInfo.COLUMN_TYPE_TEXT,true,true)};
  wServers=new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.SINGLE,partitionColumns,1,lsMod,props);
  wServers.setReadonly(true);
  props.setLook(wServers);
  FormData fdServers=new FormData();
  fdServers.left=new FormAttachment(middle,margin * 2);
  fdServers.right=new FormAttachment(wDel,-2 * margin);
  fdServers.top=new FormAttachment(wlServers,margin);
  fdServers.bottom=new FormAttachment(wOK,-margin * 2);
  wServers.setLayoutData(fdServers);
  wOK.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
);
  wCancel.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
);
  SelectionAdapter selAdapter=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(selAdapter);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  Display display=parent.getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return ok;
}
