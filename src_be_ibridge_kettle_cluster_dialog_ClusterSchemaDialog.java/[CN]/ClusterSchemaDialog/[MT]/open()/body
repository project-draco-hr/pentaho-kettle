{
  Shell parent=getParent();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      clusterSchema.setChanged();
    }
  }
;
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setText("Clustering schema dialog");
  shell.setLayout(formLayout);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(" &OK ");
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(" &Cancel ");
  Button[] buttons=new Button[]{wOK,wCancel};
  BaseStepDialog.positionBottomButtons(shell,buttons,margin,null);
  Label wlName=new Label(shell,SWT.RIGHT);
  props.setLook(wlName);
  wlName.setText("Schema name  ");
  FormData fdlName=new FormData();
  fdlName.top=new FormAttachment(0,0);
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  FormData fdName=new FormData();
  fdName.top=new FormAttachment(0,0);
  fdName.left=new FormAttachment(middle,margin);
  fdName.right=new FormAttachment(95,0);
  wName.setLayoutData(fdName);
  Label wlPort=new Label(shell,SWT.RIGHT);
  props.setLook(wlPort);
  wlPort.setText("Base socket port  ");
  FormData fdlPort=new FormData();
  fdlPort.top=new FormAttachment(wName,margin);
  fdlPort.left=new FormAttachment(0,0);
  fdlPort.right=new FormAttachment(middle,0);
  wlPort.setLayoutData(fdlPort);
  wPort=new TextVar(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPort);
  wPort.addModifyListener(lsMod);
  FormData fdPort=new FormData();
  fdPort.top=new FormAttachment(wName,margin);
  fdPort.left=new FormAttachment(middle,margin);
  fdPort.right=new FormAttachment(95,0);
  wPort.setLayoutData(fdPort);
  Label wlBufferSize=new Label(shell,SWT.RIGHT);
  props.setLook(wlBufferSize);
  wlBufferSize.setText("Sockets buffer size  ");
  FormData fdlBufferSize=new FormData();
  fdlBufferSize.top=new FormAttachment(wPort,margin);
  fdlBufferSize.left=new FormAttachment(0,0);
  fdlBufferSize.right=new FormAttachment(middle,0);
  wlBufferSize.setLayoutData(fdlBufferSize);
  wBufferSize=new TextVar(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wBufferSize);
  wBufferSize.addModifyListener(lsMod);
  FormData fdBufferSize=new FormData();
  fdBufferSize.top=new FormAttachment(wPort,margin);
  fdBufferSize.left=new FormAttachment(middle,margin);
  fdBufferSize.right=new FormAttachment(95,0);
  wBufferSize.setLayoutData(fdBufferSize);
  Label wlFlushInterval=new Label(shell,SWT.RIGHT);
  props.setLook(wlFlushInterval);
  wlFlushInterval.setText("Sockets flush interval (rows)  ");
  FormData fdlFlushInterval=new FormData();
  fdlFlushInterval.top=new FormAttachment(wBufferSize,margin);
  fdlFlushInterval.left=new FormAttachment(0,0);
  fdlFlushInterval.right=new FormAttachment(middle,0);
  wlFlushInterval.setLayoutData(fdlFlushInterval);
  wFlushInterval=new TextVar(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFlushInterval);
  wFlushInterval.addModifyListener(lsMod);
  FormData fdFlushInterval=new FormData();
  fdFlushInterval.top=new FormAttachment(wBufferSize,margin);
  fdFlushInterval.left=new FormAttachment(middle,margin);
  fdFlushInterval.right=new FormAttachment(95,0);
  wFlushInterval.setLayoutData(fdFlushInterval);
  Label wlCompressed=new Label(shell,SWT.RIGHT);
  props.setLook(wlCompressed);
  wlCompressed.setText("Sockets data compressed?  ");
  FormData fdlCompressed=new FormData();
  fdlCompressed.top=new FormAttachment(wFlushInterval,margin);
  fdlCompressed.left=new FormAttachment(0,0);
  fdlCompressed.right=new FormAttachment(middle,0);
  wlCompressed.setLayoutData(fdlCompressed);
  wCompressed=new Button(shell,SWT.CHECK);
  props.setLook(wCompressed);
  FormData fdCompressed=new FormData();
  fdCompressed.top=new FormAttachment(wFlushInterval,margin);
  fdCompressed.left=new FormAttachment(middle,margin);
  fdCompressed.right=new FormAttachment(95,0);
  wCompressed.setLayoutData(fdCompressed);
  Label wlServers=new Label(shell,SWT.RIGHT);
  wlServers.setText("Slave servers  ");
  props.setLook(wlServers);
  FormData fdlServers=new FormData();
  fdlServers.left=new FormAttachment(0,0);
  fdlServers.right=new FormAttachment(middle,0);
  fdlServers.top=new FormAttachment(wCompressed,margin);
  wlServers.setLayoutData(fdlServers);
  wAdd=new Button(shell,SWT.PUSH);
  wAdd.setText("Add slave server");
  props.setLook(wAdd);
  FormData fdAdd=new FormData();
  fdAdd.right=new FormAttachment(100,0);
  fdAdd.top=new FormAttachment(wlServers,5 * margin);
  wAdd.setLayoutData(fdAdd);
  wAdd.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addSlaveServer();
    }
  }
);
  wEdit=new Button(shell,SWT.PUSH);
  wEdit.setText("Edit slave server");
  props.setLook(wEdit);
  FormData fdEdit=new FormData();
  fdEdit.right=new FormAttachment(100,0);
  fdEdit.top=new FormAttachment(wAdd,2 * margin);
  wEdit.setLayoutData(fdEdit);
  wEdit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editSlaveServer();
    }
  }
);
  wDel=new Button(shell,SWT.PUSH);
  wDel.setText("Delete slave server");
  props.setLook(wDel);
  FormData fdDel=new FormData();
  fdDel.right=new FormAttachment(100,0);
  fdDel.top=new FormAttachment(wEdit,2 * margin);
  wDel.setLayoutData(fdDel);
  wDel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSlaveServer();
    }
  }
);
  ColumnInfo[] partitionColumns=new ColumnInfo[]{new ColumnInfo("Service URL",ColumnInfo.COLUMN_TYPE_TEXT,true,true),new ColumnInfo("Master?",ColumnInfo.COLUMN_TYPE_TEXT,true,true)};
  wServers=new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.SINGLE,partitionColumns,1,lsMod,props);
  wServers.setReadonly(true);
  wServers.setSortable(false);
  props.setLook(wServers);
  FormData fdServers=new FormData();
  fdServers.left=new FormAttachment(middle,margin);
  fdServers.right=new FormAttachment(wDel,-2 * margin);
  fdServers.top=new FormAttachment(wCompressed,margin);
  fdServers.bottom=new FormAttachment(wOK,-margin * 2);
  wServers.setLayoutData(fdServers);
  wServers.table.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSlaveServer();
    }
  }
);
  wOK.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
);
  wCancel.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
);
  SelectionAdapter selAdapter=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(selAdapter);
  wPort.addSelectionListener(selAdapter);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  Display display=parent.getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return ok;
}
