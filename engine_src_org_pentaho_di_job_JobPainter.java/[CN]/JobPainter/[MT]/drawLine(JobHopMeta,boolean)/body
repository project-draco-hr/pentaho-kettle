{
  int[] line=getLine(jobHop.getFromEntry(),jobHop.getToEntry());
  gc.setLineWidth(linewidth);
  EColor col;
  if (jobHop.getFromEntry().isLaunchingInParallel()) {
    gc.setLineStyle(ELineStyle.PARALLEL);
  }
 else {
    gc.setLineStyle(ELineStyle.SOLID);
  }
  EImage arrow;
  if (is_candidate) {
    col=EColor.BLUE;
    arrow=EImage.ARROW_CANDIDATE;
  }
 else   if (jobHop.isEnabled()) {
    if (jobHop.isUnconditional()) {
      col=EColor.HOP_DEFAULT;
      arrow=EImage.ARROW_DEFAULT;
    }
 else {
      if (jobHop.getEvaluation()) {
        col=EColor.HOP_OK;
        arrow=EImage.ARROW_OK;
      }
 else {
        col=EColor.RED;
        arrow=EImage.ARROW_ERROR;
        gc.setLineStyle(ELineStyle.DASH);
      }
    }
  }
 else {
    col=EColor.GRAY;
    arrow=EImage.ARROW_DISABLED;
  }
  gc.setForeground(col);
  if (jobHop.isSplit()) {
    gc.setLineWidth(linewidth + 2);
  }
  drawArrow(arrow,line,jobHop);
  if (jobHop.isSplit()) {
    gc.setLineWidth(linewidth);
  }
  gc.setForeground(EColor.BLACK);
  gc.setBackground(EColor.BACKGROUND);
  gc.setLineStyle(ELineStyle.SOLID);
}
