{
  List<JarFileAnnotationPlugin> jarFilePlugins=findAnnotatedClassFiles(pluginType.getName());
  for (  JarFileAnnotationPlugin jarFilePlugin : jarFilePlugins) {
    URLClassLoader urlClassLoader=createUrlClassLoader(jarFilePlugin.getJarFile(),getClass().getClassLoader());
    try {
      Class<?> clazz=urlClassLoader.loadClass(jarFilePlugin.getClassName());
      if (clazz == null) {
        throw new KettlePluginException("Unable to load class: " + jarFilePlugin.getClassName());
      }
      List<String> libraries=new ArrayList<String>();
      java.lang.annotation.Annotation annotation=null;
      try {
        annotation=clazz.getAnnotation(pluginType);
        String jarFilename=URLDecoder.decode(jarFilePlugin.getJarFile().getFile(),"UTF-8");
        libraries.add(jarFilename);
        FileObject fileObject=KettleVFS.getFileObject(jarFilename);
        FileObject parentFolder=fileObject.getParent();
        String parentFolderName=KettleVFS.getFilename(parentFolder);
        String libFolderName=parentFolderName + Const.FILE_SEPARATOR + "lib";
        PluginFolder folder=new PluginFolder(libFolderName,false,false);
        FileObject[] jarFiles=folder.findJarFiles();
        if (jarFiles != null) {
          for (          FileObject jarFile : jarFiles) {
            libraries.add(KettleVFS.getFilename(jarFile));
          }
        }
      }
 catch (      Exception e) {
        throw new KettlePluginException("Unexpected error loading class " + clazz.getName() + " of plugin type: "+ pluginType,e);
      }
      handlePluginAnnotation(clazz,annotation,libraries,false,jarFilePlugin.getPluginFolder());
    }
 catch (    Exception e) {
      LogChannel.GENERAL.logError("Unexpected error registering jar plugin file: " + jarFilePlugin.getJarFile(),e);
    }
  }
}
