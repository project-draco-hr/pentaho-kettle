{
  stepname=wStepname.getText();
  in.setRowLimit(Const.toLong(wLimit.getText(),0));
  in.setFileField(wInclFilenameField.getText());
  in.setSheetField(wInclSheetnameField.getText());
  in.setRowNumberField(wInclRownumField.getText());
  in.setStartsWithHeader(wHeader.getSelection());
  in.setIgnoreEmptyRows(wNoempty.getSelection());
  in.setStopOnEmpty(wStoponempty.getSelection());
  wAccFilenames.setSelection(in.isAcceptingFilenames());
  if (in.getAcceptingField() != null)   wAccField.setText(in.getAcceptingField());
  if (in.getAcceptingStep() != null)   wAccStep.setText(in.getAcceptingStep().getName());
  int nrfiles=wFilenameList.nrNonEmpty();
  int nrsheets=wSheetnameList.nrNonEmpty();
  int nrfields=wFields.nrNonEmpty();
  in.allocate(nrfiles,nrsheets,nrfields);
  for (int i=0; i < nrfiles; i++) {
    TableItem item=wFilenameList.getNonEmpty(i);
    in.getFileName()[i]=item.getText(1);
    in.getFileMask()[i]=item.getText(2);
    in.getFileRequired()[i]=item.getText(3);
  }
  for (int i=0; i < nrsheets; i++) {
    TableItem item=wSheetnameList.getNonEmpty(i);
    in.getSheetName()[i]=item.getText(1);
    in.getStartRow()[i]=Const.toInt(item.getText(2),0);
    in.getStartColumn()[i]=Const.toInt(item.getText(3),0);
  }
  for (int i=0; i < nrfields; i++) {
    TableItem item=wFields.getNonEmpty(i);
    in.getField()[i]=new ExcelInputField();
    in.getField()[i].setName(item.getText(1));
    in.getField()[i].setType(Value.getType(item.getText(2)));
    String slength=item.getText(3);
    String sprec=item.getText(4);
    in.getField()[i].setTrimType(ExcelInputMeta.getTrimTypeByDesc(item.getText(5)));
    in.getField()[i].setRepeated(Messages.getString("System.Combo.Yes").equalsIgnoreCase(item.getText(6)));
    in.getField()[i].setLength(Const.toInt(slength,-1));
    in.getField()[i].setPrecision(Const.toInt(sprec,-1));
    in.getField()[i].setFormat(item.getText(7));
    in.getField()[i].setCurrencySymbol(item.getText(8));
    in.getField()[i].setDecimalSymbol(item.getText(9));
    in.getField()[i].setGroupSymbol(item.getText(10));
  }
  in.setStrictTypes(wStrictTypes.getSelection());
  in.setErrorIgnored(wErrorIgnored.getSelection());
  in.setErrorLineSkipped(wSkipErrorLines.getSelection());
  in.setWarningFilesDestinationDirectory(wWarningDestDir.getText());
  in.setBadLineFilesExtension(wWarningExt.getText());
  in.setErrorFilesDestinationDirectory(wErrorDestDir.getText());
  in.setErrorFilesExtension(wErrorExt.getText());
  in.setLineNumberFilesDestinationDirectory(wLineNrDestDir.getText());
  in.setLineNumberFilesExtension(wLineNrExt.getText());
}
