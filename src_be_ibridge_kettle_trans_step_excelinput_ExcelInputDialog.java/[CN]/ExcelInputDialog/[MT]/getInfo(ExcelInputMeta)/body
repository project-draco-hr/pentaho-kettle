{
  stepname=wStepname.getText();
  in.setRowLimit(Const.toLong(wLimit.getText(),0));
  in.setFileField(wInclFilenameField.getText());
  in.setSheetField(wInclSheetnameField.getText());
  in.setRowNumberField(wInclRownumField.getText());
  in.setStartsWithHeader(wHeader.getSelection());
  in.setIgnoreEmptyRows(wNoempty.getSelection());
  in.setStopOnEmpty(wStoponempty.getSelection());
  int nrfiles=wFilenameList.nrNonEmpty();
  int nrsheets=wSheetnameList.nrNonEmpty();
  int nrfields=wFields.nrNonEmpty();
  in.allocate(nrfiles,nrsheets,nrfields);
  for (int i=0; i < nrfiles; i++) {
    TableItem item=wFilenameList.getNonEmpty(i);
    in.getFileName()[i]=item.getText(1);
    in.getFileMask()[i]=item.getText(2);
    in.getFileRequired()[i]=item.getText(3);
  }
  for (int i=0; i < nrsheets; i++) {
    TableItem item=wSheetnameList.getNonEmpty(i);
    in.getSheetName()[i]=item.getText(1);
    in.getStartRow()[i]=Const.toInt(item.getText(2),0);
    in.getStartColumn()[i]=Const.toInt(item.getText(3),0);
  }
  for (int i=0; i < nrfields; i++) {
    TableItem item=wFields.getNonEmpty(i);
    in.getFieldName()[i]=item.getText(1);
    in.getFieldType()[i]=Value.getType(item.getText(2));
    String slength=item.getText(3);
    String sprec=item.getText(4);
    in.getFieldTrimType()[i]=TextFileInputMeta.getTrimType(item.getText(5));
    in.getFieldRepeat()[i]="Y".equalsIgnoreCase(item.getText(6));
    in.getFieldLength()[i]=Const.toInt(slength,-1);
    in.getFieldPrecision()[i]=Const.toInt(sprec,-1);
  }
  in.setStrictTypes(wStrictTypes.getSelection());
  in.setErrorIgnored(wErrorIgnored.getSelection());
  in.setErrorLineSkipped(wSkipErrorLines.getSelection());
  in.setWarningFilesDestinationDirectory(wWarningDestDir.getText());
  in.setBadLineFilesExtension(wWarningExt.getText());
  in.setErrorFilesDestinationDirectory(wErrorDestDir.getText());
  in.setErrorFilesExtension(wErrorExt.getText());
  in.setLineNumberFilesDestinationDirectory(wLineNrDestDir.getText());
  in.setLineNumberFilesExtension(wLineNrExt.getText());
}
