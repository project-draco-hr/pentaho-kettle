{
  Condition cb1=new Condition(Condition.OPERATOR_NONE,"D",Condition.FUNC_EQUAL,null,new Value("other",77L));
  assertEquals("              D = [ 77]" + Const.CR,cb1.toString());
  Condition cb2=new Condition("A",Condition.FUNC_SMALLER,null,new Value("other","bbb"));
  assertEquals("              A < [bbb]" + Const.CR,cb2.toString());
  Condition two=new Condition();
  two.addCondition(cb1);
  two.addCondition(cb2);
  cb2.setOperator(Condition.OPERATOR_XOR);
  assertEquals("XOR           A < [bbb]" + Const.CR,cb2.toString());
  assertEquals("(" + Const.CR + "                D = [ 77]"+ Const.CR+ "  XOR           A < [bbb]"+ Const.CR+ ")"+ Const.CR,two.toString());
  assertEquals("<condition>" + Const.CR + " <negated>N</negated>"+ Const.CR+ " <operator>XOR</operator>"+ Const.CR+ " <leftvalue>A</leftvalue>"+ Const.CR+ " <function>&lt;</function>"+ Const.CR+ " <rightvalue/>"+ Const.CR+ "<value>   <name>other</name><type>String</type><text>bbb</text><length>-1</length><precision>-1</precision><isnull>N</isnull>  </value> </condition>"+ Const.CR,cb2.getXML());
  assertEquals("<condition>" + Const.CR + " <negated>N</negated>"+ Const.CR+ " <conditions>"+ Const.CR+ "  <condition>"+ Const.CR+ "   <negated>N</negated>"+ Const.CR+ "   <leftvalue>D</leftvalue>"+ Const.CR+ "   <function>=</function>"+ Const.CR+ "   <rightvalue/>"+ Const.CR+ "<value>     <name>other</name><type>Integer</type><text> 77</text><length>-1</length><precision>0</precision><isnull>N</isnull>  </value>   </condition>"+ Const.CR+ "  <condition>"+ Const.CR+ "   <negated>N</negated>"+ Const.CR+ "   <operator>XOR</operator>"+ Const.CR+ "   <leftvalue>A</leftvalue>"+ Const.CR+ "   <function>&lt;</function>"+ Const.CR+ "   <rightvalue/>"+ Const.CR+ "<value>     <name>other</name><type>String</type><text>bbb</text><length>-1</length><precision>-1</precision><isnull>N</isnull>  </value>   </condition>"+ Const.CR+ "  </conditions>"+ Const.CR+ " </condition>"+ Const.CR,two.getXML());
}
