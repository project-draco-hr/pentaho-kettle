{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Tab.General.Label"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout generalLayout=new FormLayout();
  generalLayout.marginWidth=3;
  generalLayout.marginHeight=3;
  wGeneralComp.setLayout(generalLayout);
  wSettings=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wSettings);
  wSettings.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Settings.Label"));
  FormLayout groupLayout=new FormLayout();
  groupLayout.marginWidth=10;
  groupLayout.marginHeight=10;
  wSettings.setLayout(groupLayout);
  wlGpgExe=new Label(wSettings,SWT.RIGHT);
  wlGpgExe.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.GpgExe.Label"));
  props.setLook(wlGpgExe);
  fdlGpgExe=new FormData();
  fdlGpgExe.left=new FormAttachment(0,0);
  fdlGpgExe.top=new FormAttachment(wName,margin);
  fdlGpgExe.right=new FormAttachment(middle,-margin);
  wlGpgExe.setLayoutData(fdlGpgExe);
  wbbGpgExe=new Button(wSettings,SWT.PUSH | SWT.CENTER);
  props.setLook(wbbGpgExe);
  wbbGpgExe.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.BrowseFiles.Label"));
  fdbbGpgExe=new FormData();
  fdbbGpgExe.right=new FormAttachment(100,-margin);
  fdbbGpgExe.top=new FormAttachment(wName,margin);
  wbbGpgExe.setLayoutData(fdbbGpgExe);
  wbbGpgExe.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wSourceFileFolder.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wGpgExe.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wGpgExe.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wGpgExe=new TextVar(jobMeta,wSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wGpgExe.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.GpgExe.Tooltip"));
  props.setLook(wGpgExe);
  wGpgExe.addModifyListener(lsMod);
  fdGpgExe=new FormData();
  fdGpgExe.left=new FormAttachment(middle,0);
  fdGpgExe.top=new FormAttachment(wName,margin);
  fdGpgExe.right=new FormAttachment(wbbGpgExe,-margin);
  wGpgExe.setLayoutData(fdGpgExe);
  wlasciiMode=new Label(wSettings,SWT.RIGHT);
  wlasciiMode.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.asciiMode.Label"));
  props.setLook(wlasciiMode);
  fdlasciiMode=new FormData();
  fdlasciiMode.left=new FormAttachment(0,0);
  fdlasciiMode.top=new FormAttachment(wGpgExe,margin);
  fdlasciiMode.right=new FormAttachment(middle,-margin);
  wlasciiMode.setLayoutData(fdlasciiMode);
  wasciiMode=new Button(wSettings,SWT.CHECK);
  props.setLook(wasciiMode);
  wasciiMode.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.asciiMode.Tooltip"));
  fdasciiMode=new FormData();
  fdasciiMode.left=new FormAttachment(middle,0);
  fdasciiMode.top=new FormAttachment(wGpgExe,margin);
  fdasciiMode.right=new FormAttachment(100,0);
  wasciiMode.setLayoutData(fdasciiMode);
  wasciiMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlIncludeSubfolders=new Label(wSettings,SWT.RIGHT);
  wlIncludeSubfolders.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.IncludeSubfolders.Label"));
  props.setLook(wlIncludeSubfolders);
  fdlIncludeSubfolders=new FormData();
  fdlIncludeSubfolders.left=new FormAttachment(0,0);
  fdlIncludeSubfolders.top=new FormAttachment(wasciiMode,margin);
  fdlIncludeSubfolders.right=new FormAttachment(middle,-margin);
  wlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);
  wIncludeSubfolders=new Button(wSettings,SWT.CHECK);
  props.setLook(wIncludeSubfolders);
  wIncludeSubfolders.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.IncludeSubfolders.Tooltip"));
  fdIncludeSubfolders=new FormData();
  fdIncludeSubfolders.left=new FormAttachment(middle,0);
  fdIncludeSubfolders.top=new FormAttachment(wasciiMode,margin);
  fdIncludeSubfolders.right=new FormAttachment(100,0);
  wIncludeSubfolders.setLayoutData(fdIncludeSubfolders);
  wIncludeSubfolders.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      CheckIncludeSubFolders();
    }
  }
);
  wlPrevious=new Label(wSettings,SWT.RIGHT);
  wlPrevious.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Previous.Label"));
  props.setLook(wlPrevious);
  fdlPrevious=new FormData();
  fdlPrevious.left=new FormAttachment(0,0);
  fdlPrevious.top=new FormAttachment(wIncludeSubfolders,margin);
  fdlPrevious.right=new FormAttachment(middle,-margin);
  wlPrevious.setLayoutData(fdlPrevious);
  wPrevious=new Button(wSettings,SWT.CHECK);
  props.setLook(wPrevious);
  wPrevious.setSelection(jobEntry.arg_from_previous);
  wPrevious.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Previous.Tooltip"));
  fdPrevious=new FormData();
  fdPrevious.left=new FormAttachment(middle,0);
  fdPrevious.top=new FormAttachment(wIncludeSubfolders,margin);
  fdPrevious.right=new FormAttachment(100,0);
  wPrevious.setLayoutData(fdPrevious);
  wPrevious.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefreshArgFromPrevious();
    }
  }
);
  fdSettings=new FormData();
  fdSettings.left=new FormAttachment(0,margin);
  fdSettings.top=new FormAttachment(wName,margin);
  fdSettings.right=new FormAttachment(100,-margin);
  wSettings.setLayoutData(fdSettings);
  wlSourceFileFolder=new Label(wGeneralComp,SWT.RIGHT);
  wlSourceFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SourceFileFolder.Label"));
  props.setLook(wlSourceFileFolder);
  FormData fdlSourceFileFolder=new FormData();
  fdlSourceFileFolder.left=new FormAttachment(0,0);
  fdlSourceFileFolder.top=new FormAttachment(wSettings,2 * margin);
  fdlSourceFileFolder.right=new FormAttachment(middle,-margin);
  wlSourceFileFolder.setLayoutData(fdlSourceFileFolder);
  wbSourceDirectory=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbSourceDirectory);
  wbSourceDirectory.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.BrowseFolders.Label"));
  FormData fdbSourceDirectory=new FormData();
  fdbSourceDirectory.right=new FormAttachment(100,0);
  fdbSourceDirectory.top=new FormAttachment(wSettings,margin);
  wbSourceDirectory.setLayoutData(fdbSourceDirectory);
  wbSourceDirectory.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wSourceFileFolder.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wSourceFileFolder.setText(dir);
      }
    }
  }
);
  wbSourceFileFolder=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbSourceFileFolder);
  wbSourceFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.BrowseFiles.Label"));
  FormData fdbSourceFileFolder=new FormData();
  fdbSourceFileFolder.right=new FormAttachment(wbSourceDirectory,-margin);
  fdbSourceFileFolder.top=new FormAttachment(wSettings,margin);
  wbSourceFileFolder.setLayoutData(fdbSourceFileFolder);
  wbaSourceFileFolder=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbaSourceFileFolder);
  wbaSourceFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FilenameAdd.Button"));
  fdbaSourceFileFolder=new FormData();
  fdbaSourceFileFolder.right=new FormAttachment(wbSourceFileFolder,-margin);
  fdbaSourceFileFolder.top=new FormAttachment(wSettings,margin);
  wbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);
  wSourceFileFolder=new TextVar(jobMeta,wGeneralComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SourceFileFolder.Tooltip"));
  props.setLook(wSourceFileFolder);
  wSourceFileFolder.addModifyListener(lsMod);
  FormData fdSourceFileFolder=new FormData();
  fdSourceFileFolder.left=new FormAttachment(middle,0);
  fdSourceFileFolder.top=new FormAttachment(wSettings,2 * margin);
  fdSourceFileFolder.right=new FormAttachment(wbSourceFileFolder,-55);
  wSourceFileFolder.setLayoutData(fdSourceFileFolder);
  wSourceFileFolder.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      wSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
    }
  }
);
  wbSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wSourceFileFolder.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wSourceFileFolder.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wlDestinationFileFolder=new Label(wGeneralComp,SWT.RIGHT);
  wlDestinationFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationFileFolder.Label"));
  props.setLook(wlDestinationFileFolder);
  fdlDestinationFileFolder=new FormData();
  fdlDestinationFileFolder.left=new FormAttachment(0,0);
  fdlDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  fdlDestinationFileFolder.right=new FormAttachment(middle,-margin);
  wlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);
  wbDestinationDirectory=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDestinationDirectory);
  wbDestinationDirectory.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.BrowseFolders.Label"));
  FormData fdbDestinationDirectory=new FormData();
  fdbDestinationDirectory.right=new FormAttachment(100,0);
  fdbDestinationDirectory.top=new FormAttachment(wSourceFileFolder,margin);
  wbDestinationDirectory.setLayoutData(fdbDestinationDirectory);
  wbDestinationDirectory.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wDestinationFileFolder.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wDestinationFileFolder.setText(dir);
      }
    }
  }
);
  wbDestinationFileFolder=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDestinationFileFolder);
  wbDestinationFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.BrowseFiles.Label"));
  FormData fdbDestinationFileFolder=new FormData();
  fdbDestinationFileFolder.right=new FormAttachment(wbDestinationDirectory,-margin);
  fdbDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  wbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);
  wDestinationFileFolder=new TextVar(jobMeta,wGeneralComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wDestinationFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationFileFolder.Tooltip"));
  props.setLook(wDestinationFileFolder);
  wDestinationFileFolder.addModifyListener(lsMod);
  fdDestinationFileFolder=new FormData();
  fdDestinationFileFolder.left=new FormAttachment(middle,0);
  fdDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  fdDestinationFileFolder.right=new FormAttachment(wbSourceFileFolder,-55);
  wDestinationFileFolder.setLayoutData(fdDestinationFileFolder);
  wbDestinationFileFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wDestinationFileFolder.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wDestinationFileFolder.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wbdSourceFileFolder=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbdSourceFileFolder);
  wbdSourceFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FilenameDelete.Button"));
  wbdSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FilenameDelete.Tooltip"));
  fdbdSourceFileFolder=new FormData();
  fdbdSourceFileFolder.right=new FormAttachment(100,0);
  fdbdSourceFileFolder.top=new FormAttachment(wDestinationFileFolder,40);
  wbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);
  wbeSourceFileFolder=new Button(wGeneralComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbeSourceFileFolder);
  wbeSourceFileFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FilenameEdit.Button"));
  wbeSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FilenameEdit.Tooltip"));
  fdbeSourceFileFolder=new FormData();
  fdbeSourceFileFolder.right=new FormAttachment(100,0);
  fdbeSourceFileFolder.left=new FormAttachment(wbdSourceFileFolder,0,SWT.LEFT);
  fdbeSourceFileFolder.top=new FormAttachment(wbdSourceFileFolder,margin);
  wbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);
  wlWildcard=new Label(wGeneralComp,SWT.RIGHT);
  wlWildcard.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Wildcard.Label"));
  props.setLook(wlWildcard);
  fdlWildcard=new FormData();
  fdlWildcard.left=new FormAttachment(0,0);
  fdlWildcard.top=new FormAttachment(wDestinationFileFolder,margin);
  fdlWildcard.right=new FormAttachment(middle,-margin);
  wlWildcard.setLayoutData(fdlWildcard);
  wWildcard=new TextVar(jobMeta,wGeneralComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wWildcard.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Wildcard.Tooltip"));
  props.setLook(wWildcard);
  wWildcard.addModifyListener(lsMod);
  fdWildcard=new FormData();
  fdWildcard.left=new FormAttachment(middle,0);
  fdWildcard.top=new FormAttachment(wDestinationFileFolder,margin);
  fdWildcard.right=new FormAttachment(wbSourceFileFolder,-55);
  wWildcard.setLayoutData(fdWildcard);
  wlFields=new Label(wGeneralComp,SWT.NONE);
  wlFields.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.Label"));
  props.setLook(wlFields);
  fdlFields=new FormData();
  fdlFields.left=new FormAttachment(0,0);
  fdlFields.right=new FormAttachment(middle,-margin);
  fdlFields.top=new FormAttachment(wWildcard,margin);
  wlFields.setLayoutData(fdlFields);
  int rows=jobEntry.source_filefolder == null ? 1 : (jobEntry.source_filefolder.length == 0 ? 0 : jobEntry.source_filefolder.length);
  final int FieldsRows=rows;
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.Action.Label"),ColumnInfo.COLUMN_TYPE_CCOMBO,JobEntryPGPEncryptFiles.actionTypeDesc,false),new ColumnInfo(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.SourceFileFolder.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.Wildcard.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.UserID.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.DestinationFileFolder.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false)};
  colinf[0].setUsingVariables(true);
  colinf[1].setUsingVariables(true);
  colinf[1].setToolTip(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.SourceFileFolder.Tooltip"));
  colinf[2].setUsingVariables(true);
  colinf[2].setToolTip(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.Wildcard.Tooltip"));
  colinf[3].setUsingVariables(true);
  colinf[3].setToolTip(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.UserID.Tooltip"));
  colinf[4].setToolTip(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fields.DestinationFileFolder.Tooltip"));
  wFields=new TableView(jobMeta,wGeneralComp,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(wlFields,margin);
  fdFields.right=new FormAttachment(wbeSourceFileFolder,-margin);
  fdFields.bottom=new FormAttachment(100,-margin);
  wFields.setLayoutData(fdFields);
  RefreshArgFromPrevious();
  SelectionAdapter selA=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      wFields.add(new String[]{JobEntryPGPEncryptFiles.actionTypeDesc[0],wSourceFileFolder.getText(),wWildcard.getText(),null,wDestinationFileFolder.getText()});
      wSourceFileFolder.setText("");
      wDestinationFileFolder.setText("");
      wWildcard.setText("");
      wFields.removeEmptyRows();
      wFields.setRowNums();
      wFields.optWidth(true);
    }
  }
;
  wbaSourceFileFolder.addSelectionListener(selA);
  wSourceFileFolder.addSelectionListener(selA);
  wbdSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      int[] idx=wFields.getSelectionIndices();
      wFields.remove(idx);
      wFields.removeEmptyRows();
      wFields.setRowNums();
    }
  }
);
  wbeSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      int idx=wFields.getSelectionIndex();
      if (idx >= 0) {
        String[] string=wFields.getItem(idx);
        wSourceFileFolder.setText(string[0]);
        wDestinationFileFolder.setText(string[1]);
        wWildcard.setText(string[2]);
        wFields.remove(idx);
      }
      wFields.removeEmptyRows();
      wFields.setRowNums();
    }
  }
);
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(0,0);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  props.setLook(wGeneralComp);
  wDestinationFileTab=new CTabItem(wTabFolder,SWT.NONE);
  wDestinationFileTab.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationFileTab.Label"));
  FormLayout DestcontentLayout=new FormLayout();
  DestcontentLayout.marginWidth=3;
  DestcontentLayout.marginHeight=3;
  wDestinationFileComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wDestinationFileComp);
  wDestinationFileComp.setLayout(DestcontentLayout);
  wDestinationFile=new Group(wDestinationFileComp,SWT.SHADOW_NONE);
  props.setLook(wDestinationFile);
  wDestinationFile.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.GroupDestinationFile.Label"));
  FormLayout groupLayoutFile=new FormLayout();
  groupLayoutFile.marginWidth=10;
  groupLayoutFile.marginHeight=10;
  wDestinationFile.setLayout(groupLayoutFile);
  wlCreateDestinationFolder=new Label(wDestinationFile,SWT.RIGHT);
  wlCreateDestinationFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.CreateDestinationFolder.Label"));
  props.setLook(wlCreateDestinationFolder);
  fdlCreateDestinationFolder=new FormData();
  fdlCreateDestinationFolder.left=new FormAttachment(0,0);
  fdlCreateDestinationFolder.top=new FormAttachment(0,margin);
  fdlCreateDestinationFolder.right=new FormAttachment(middle,-margin);
  wlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);
  wCreateDestinationFolder=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wCreateDestinationFolder);
  wCreateDestinationFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.CreateDestinationFolder.Tooltip"));
  fdCreateDestinationFolder=new FormData();
  fdCreateDestinationFolder.left=new FormAttachment(middle,0);
  fdCreateDestinationFolder.top=new FormAttachment(0,margin);
  fdCreateDestinationFolder.right=new FormAttachment(100,0);
  wCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);
  wCreateDestinationFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlDestinationIsAFile=new Label(wDestinationFile,SWT.RIGHT);
  wlDestinationIsAFile.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationIsAFile.Label"));
  props.setLook(wlDestinationIsAFile);
  fdlDestinationIsAFile=new FormData();
  fdlDestinationIsAFile.left=new FormAttachment(0,0);
  fdlDestinationIsAFile.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdlDestinationIsAFile.right=new FormAttachment(middle,-margin);
  wlDestinationIsAFile.setLayoutData(fdlDestinationIsAFile);
  wDestinationIsAFile=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wDestinationIsAFile);
  wDestinationIsAFile.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationIsAFile.Tooltip"));
  fdDestinationIsAFile=new FormData();
  fdDestinationIsAFile.left=new FormAttachment(middle,0);
  fdDestinationIsAFile.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdDestinationIsAFile.right=new FormAttachment(100,0);
  wDestinationIsAFile.setLayoutData(fdDestinationIsAFile);
  wDestinationIsAFile.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlDoNotKeepFolderStructure=new Label(wDestinationFile,SWT.RIGHT);
  wlDoNotKeepFolderStructure.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DoNotKeepFolderStructure.Label"));
  props.setLook(wlDoNotKeepFolderStructure);
  fdlDoNotKeepFolderStructure=new FormData();
  fdlDoNotKeepFolderStructure.left=new FormAttachment(0,0);
  fdlDoNotKeepFolderStructure.top=new FormAttachment(wDestinationIsAFile,margin);
  fdlDoNotKeepFolderStructure.right=new FormAttachment(middle,-margin);
  wlDoNotKeepFolderStructure.setLayoutData(fdlDoNotKeepFolderStructure);
  wDoNotKeepFolderStructure=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wDoNotKeepFolderStructure);
  wDoNotKeepFolderStructure.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DoNotKeepFolderStructure.Tooltip"));
  fdDoNotKeepFolderStructure=new FormData();
  fdDoNotKeepFolderStructure.left=new FormAttachment(middle,0);
  fdDoNotKeepFolderStructure.top=new FormAttachment(wDestinationIsAFile,margin);
  fdDoNotKeepFolderStructure.right=new FormAttachment(100,0);
  wDoNotKeepFolderStructure.setLayoutData(fdDoNotKeepFolderStructure);
  wDoNotKeepFolderStructure.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddDate=new Label(wDestinationFile,SWT.RIGHT);
  wlAddDate.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddDate.Label"));
  props.setLook(wlAddDate);
  fdlAddDate=new FormData();
  fdlAddDate.left=new FormAttachment(0,0);
  fdlAddDate.top=new FormAttachment(wDoNotKeepFolderStructure,margin);
  fdlAddDate.right=new FormAttachment(middle,-margin);
  wlAddDate.setLayoutData(fdlAddDate);
  wAddDate=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wAddDate);
  wAddDate.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddDate.Tooltip"));
  fdAddDate=new FormData();
  fdAddDate.left=new FormAttachment(middle,0);
  fdAddDate.top=new FormAttachment(wDoNotKeepFolderStructure,margin);
  fdAddDate.right=new FormAttachment(100,0);
  wAddDate.setLayoutData(fdAddDate);
  wAddDate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddDateBeforeExtension();
    }
  }
);
  wlAddTime=new Label(wDestinationFile,SWT.RIGHT);
  wlAddTime.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddTime.Label"));
  props.setLook(wlAddTime);
  fdlAddTime=new FormData();
  fdlAddTime.left=new FormAttachment(0,0);
  fdlAddTime.top=new FormAttachment(wAddDate,margin);
  fdlAddTime.right=new FormAttachment(middle,-margin);
  wlAddTime.setLayoutData(fdlAddTime);
  wAddTime=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wAddTime);
  wAddTime.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddTime.Tooltip"));
  fdAddTime=new FormData();
  fdAddTime.left=new FormAttachment(middle,0);
  fdAddTime.top=new FormAttachment(wAddDate,margin);
  fdAddTime.right=new FormAttachment(100,0);
  wAddTime.setLayoutData(fdAddTime);
  wAddTime.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddDateBeforeExtension();
    }
  }
);
  wlSpecifyFormat=new Label(wDestinationFile,SWT.RIGHT);
  wlSpecifyFormat.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SpecifyFormat.Label"));
  props.setLook(wlSpecifyFormat);
  fdlSpecifyFormat=new FormData();
  fdlSpecifyFormat.left=new FormAttachment(0,0);
  fdlSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdlSpecifyFormat.right=new FormAttachment(middle,-margin);
  wlSpecifyFormat.setLayoutData(fdlSpecifyFormat);
  wSpecifyFormat=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wSpecifyFormat);
  wSpecifyFormat.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SpecifyFormat.Tooltip"));
  fdSpecifyFormat=new FormData();
  fdSpecifyFormat.left=new FormAttachment(middle,0);
  fdSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdSpecifyFormat.right=new FormAttachment(100,0);
  wSpecifyFormat.setLayoutData(fdSpecifyFormat);
  wSpecifyFormat.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setDateTimeFormat();
      setAddDateBeforeExtension();
    }
  }
);
  wlDateTimeFormat=new Label(wDestinationFile,SWT.RIGHT);
  wlDateTimeFormat.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DateTimeFormat.Label"));
  props.setLook(wlDateTimeFormat);
  fdlDateTimeFormat=new FormData();
  fdlDateTimeFormat.left=new FormAttachment(0,0);
  fdlDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdlDateTimeFormat.right=new FormAttachment(middle,-margin);
  wlDateTimeFormat.setLayoutData(fdlDateTimeFormat);
  wDateTimeFormat=new CCombo(wDestinationFile,SWT.BORDER | SWT.READ_ONLY);
  wDateTimeFormat.setEditable(true);
  props.setLook(wDateTimeFormat);
  wDateTimeFormat.addModifyListener(lsMod);
  fdDateTimeFormat=new FormData();
  fdDateTimeFormat.left=new FormAttachment(middle,0);
  fdDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdDateTimeFormat.right=new FormAttachment(100,0);
  wDateTimeFormat.setLayoutData(fdDateTimeFormat);
  String[] dats=Const.getDateFormats();
  for (int x=0; x < dats.length; x++) {
    wDateTimeFormat.add(dats[x]);
  }
  wlAddDateBeforeExtension=new Label(wDestinationFile,SWT.RIGHT);
  wlAddDateBeforeExtension.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddDateBeforeExtension.Label"));
  props.setLook(wlAddDateBeforeExtension);
  fdlAddDateBeforeExtension=new FormData();
  fdlAddDateBeforeExtension.left=new FormAttachment(0,0);
  fdlAddDateBeforeExtension.top=new FormAttachment(wDateTimeFormat,margin);
  fdlAddDateBeforeExtension.right=new FormAttachment(middle,-margin);
  wlAddDateBeforeExtension.setLayoutData(fdlAddDateBeforeExtension);
  wAddDateBeforeExtension=new Button(wDestinationFile,SWT.CHECK);
  props.setLook(wAddDateBeforeExtension);
  wAddDateBeforeExtension.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddDateBeforeExtension.Tooltip"));
  fdAddDateBeforeExtension=new FormData();
  fdAddDateBeforeExtension.left=new FormAttachment(middle,0);
  fdAddDateBeforeExtension.top=new FormAttachment(wDateTimeFormat,margin);
  fdAddDateBeforeExtension.right=new FormAttachment(100,0);
  wAddDateBeforeExtension.setLayoutData(fdAddDateBeforeExtension);
  wAddDateBeforeExtension.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlIfFileExists=new Label(wDestinationFile,SWT.RIGHT);
  wlIfFileExists.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.IfFileExists.Label"));
  props.setLook(wlIfFileExists);
  fdlIfFileExists=new FormData();
  fdlIfFileExists.left=new FormAttachment(0,0);
  fdlIfFileExists.right=new FormAttachment(middle,0);
  fdlIfFileExists.top=new FormAttachment(wAddDateBeforeExtension,margin);
  wlIfFileExists.setLayoutData(fdlIfFileExists);
  wIfFileExists=new CCombo(wDestinationFile,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Do_Nothing_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Overwrite_File_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Unique_Name_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Delete_Source_File_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Move_To_Folder_IfFileExists.Label"));
  wIfFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fail_IfFileExists.Label"));
  wIfFileExists.select(0);
  props.setLook(wIfFileExists);
  fdIfFileExists=new FormData();
  fdIfFileExists.left=new FormAttachment(middle,0);
  fdIfFileExists.top=new FormAttachment(wAddDateBeforeExtension,margin);
  fdIfFileExists.right=new FormAttachment(100,0);
  wIfFileExists.setLayoutData(fdIfFileExists);
  wIfFileExists.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      activeDestinationFolder();
      setMovedDateTimeFormat();
      setAddMovedDateBeforeExtension();
    }
  }
);
  fdDestinationFile=new FormData();
  fdDestinationFile.left=new FormAttachment(0,margin);
  fdDestinationFile.top=new FormAttachment(wName,margin);
  fdDestinationFile.right=new FormAttachment(100,-margin);
  wDestinationFile.setLayoutData(fdDestinationFile);
  wMoveToGroup=new Group(wDestinationFileComp,SWT.SHADOW_NONE);
  props.setLook(wMoveToGroup);
  wMoveToGroup.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.GroupMoveToGroup.Label"));
  FormLayout MovetoLayoutFile=new FormLayout();
  MovetoLayoutFile.marginWidth=10;
  MovetoLayoutFile.marginHeight=10;
  wMoveToGroup.setLayout(MovetoLayoutFile);
  wlDestinationFolder=new Label(wMoveToGroup,SWT.RIGHT);
  wlDestinationFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.DestinationFolder.Label"));
  props.setLook(wlDestinationFolder);
  fdlDestinationFolder=new FormData();
  fdlDestinationFolder.left=new FormAttachment(0,0);
  fdlDestinationFolder.top=new FormAttachment(wDestinationFile,margin);
  fdlDestinationFolder.right=new FormAttachment(middle,-margin);
  wlDestinationFolder.setLayoutData(fdlDestinationFolder);
  wbDestinationFolder=new Button(wMoveToGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDestinationFolder);
  wbDestinationFolder.setText(BaseMessages.getString(PKG,"System.Button.Browse"));
  fdbDestinationFolder=new FormData();
  fdbDestinationFolder.right=new FormAttachment(100,0);
  fdbDestinationFolder.top=new FormAttachment(wDestinationFile,0);
  wbDestinationFolder.setLayoutData(fdbDestinationFolder);
  wDestinationFolder=new TextVar(jobMeta,wMoveToGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDestinationFolder);
  wDestinationFolder.addModifyListener(lsMod);
  fdDestinationFolder=new FormData();
  fdDestinationFolder.left=new FormAttachment(middle,0);
  fdDestinationFolder.top=new FormAttachment(wDestinationFile,margin);
  fdDestinationFolder.right=new FormAttachment(wbDestinationFolder,-margin);
  wDestinationFolder.setLayoutData(fdDestinationFolder);
  wDestinationFolder.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      wDestinationFolder.setToolTipText(jobMeta.environmentSubstitute(wDestinationFolder.getText()));
    }
  }
);
  wbDestinationFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wDestinationFolder.getText() != null) {
        dialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFolder.getText()));
      }
      String dir=dialog.open();
      if (dir != null) {
        wDestinationFolder.setText(dir);
      }
    }
  }
);
  wlCreateMoveToFolder=new Label(wMoveToGroup,SWT.RIGHT);
  wlCreateMoveToFolder.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.CreateMoveToFolder.Label"));
  props.setLook(wlCreateMoveToFolder);
  fdlCreateMoveToFolder=new FormData();
  fdlCreateMoveToFolder.left=new FormAttachment(0,0);
  fdlCreateMoveToFolder.top=new FormAttachment(wDestinationFolder,margin);
  fdlCreateMoveToFolder.right=new FormAttachment(middle,-margin);
  wlCreateMoveToFolder.setLayoutData(fdlCreateMoveToFolder);
  wCreateMoveToFolder=new Button(wMoveToGroup,SWT.CHECK);
  props.setLook(wCreateMoveToFolder);
  wCreateMoveToFolder.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.CreateMoveToFolder.Tooltip"));
  fdCreateMoveToFolder=new FormData();
  fdCreateMoveToFolder.left=new FormAttachment(middle,0);
  fdCreateMoveToFolder.top=new FormAttachment(wDestinationFolder,margin);
  fdCreateMoveToFolder.right=new FormAttachment(100,0);
  wCreateMoveToFolder.setLayoutData(fdCreateMoveToFolder);
  wCreateMoveToFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddMovedDate=new Label(wMoveToGroup,SWT.RIGHT);
  wlAddMovedDate.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedDate.Label"));
  props.setLook(wlAddMovedDate);
  fdlAddMovedDate=new FormData();
  fdlAddMovedDate.left=new FormAttachment(0,0);
  fdlAddMovedDate.top=new FormAttachment(wCreateMoveToFolder,margin);
  fdlAddMovedDate.right=new FormAttachment(middle,-margin);
  wlAddMovedDate.setLayoutData(fdlAddMovedDate);
  wAddMovedDate=new Button(wMoveToGroup,SWT.CHECK);
  props.setLook(wAddMovedDate);
  wAddMovedDate.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedDate.Tooltip"));
  fdAddMovedDate=new FormData();
  fdAddMovedDate.left=new FormAttachment(middle,0);
  fdAddMovedDate.top=new FormAttachment(wCreateMoveToFolder,margin);
  fdAddMovedDate.right=new FormAttachment(100,0);
  wAddMovedDate.setLayoutData(fdAddMovedDate);
  wAddMovedDate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddMovedDateBeforeExtension();
    }
  }
);
  wlAddMovedTime=new Label(wMoveToGroup,SWT.RIGHT);
  wlAddMovedTime.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedTime.Label"));
  props.setLook(wlAddMovedTime);
  fdlAddMovedTime=new FormData();
  fdlAddMovedTime.left=new FormAttachment(0,0);
  fdlAddMovedTime.top=new FormAttachment(wAddMovedDate,margin);
  fdlAddMovedTime.right=new FormAttachment(middle,-margin);
  wlAddMovedTime.setLayoutData(fdlAddMovedTime);
  wAddMovedTime=new Button(wMoveToGroup,SWT.CHECK);
  props.setLook(wAddMovedTime);
  wAddMovedTime.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedTime.Tooltip"));
  fdAddMovedTime=new FormData();
  fdAddMovedTime.left=new FormAttachment(middle,0);
  fdAddMovedTime.top=new FormAttachment(wAddMovedDate,margin);
  fdAddMovedTime.right=new FormAttachment(100,0);
  wAddMovedTime.setLayoutData(fdAddMovedTime);
  wAddMovedTime.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddMovedDateBeforeExtension();
    }
  }
);
  wlSpecifyMoveFormat=new Label(wMoveToGroup,SWT.RIGHT);
  wlSpecifyMoveFormat.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SpecifyMoveFormat.Label"));
  props.setLook(wlSpecifyMoveFormat);
  fdlSpecifyMoveFormat=new FormData();
  fdlSpecifyMoveFormat.left=new FormAttachment(0,0);
  fdlSpecifyMoveFormat.top=new FormAttachment(wAddMovedTime,margin);
  fdlSpecifyMoveFormat.right=new FormAttachment(middle,-margin);
  wlSpecifyMoveFormat.setLayoutData(fdlSpecifyMoveFormat);
  wSpecifyMoveFormat=new Button(wMoveToGroup,SWT.CHECK);
  props.setLook(wSpecifyMoveFormat);
  wSpecifyMoveFormat.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SpecifyMoveFormat.Tooltip"));
  fdSpecifyMoveFormat=new FormData();
  fdSpecifyMoveFormat.left=new FormAttachment(middle,0);
  fdSpecifyMoveFormat.top=new FormAttachment(wAddMovedTime,margin);
  fdSpecifyMoveFormat.right=new FormAttachment(100,0);
  wSpecifyMoveFormat.setLayoutData(fdSpecifyMoveFormat);
  wSpecifyMoveFormat.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setMovedDateTimeFormat();
      setAddMovedDateBeforeExtension();
    }
  }
);
  wlMovedDateTimeFormat=new Label(wMoveToGroup,SWT.RIGHT);
  wlMovedDateTimeFormat.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.MovedDateTimeFormat.Label"));
  props.setLook(wlMovedDateTimeFormat);
  fdlMovedDateTimeFormat=new FormData();
  fdlMovedDateTimeFormat.left=new FormAttachment(0,0);
  fdlMovedDateTimeFormat.top=new FormAttachment(wSpecifyMoveFormat,margin);
  fdlMovedDateTimeFormat.right=new FormAttachment(middle,-margin);
  wlMovedDateTimeFormat.setLayoutData(fdlMovedDateTimeFormat);
  wMovedDateTimeFormat=new CCombo(wMoveToGroup,SWT.BORDER | SWT.READ_ONLY);
  wMovedDateTimeFormat.setEditable(true);
  props.setLook(wMovedDateTimeFormat);
  wMovedDateTimeFormat.addModifyListener(lsMod);
  fdMovedDateTimeFormat=new FormData();
  fdMovedDateTimeFormat.left=new FormAttachment(middle,0);
  fdMovedDateTimeFormat.top=new FormAttachment(wSpecifyMoveFormat,margin);
  fdMovedDateTimeFormat.right=new FormAttachment(100,0);
  wMovedDateTimeFormat.setLayoutData(fdMovedDateTimeFormat);
  for (int x=0; x < dats.length; x++) {
    wMovedDateTimeFormat.add(dats[x]);
  }
  wlAddMovedDateBeforeExtension=new Label(wMoveToGroup,SWT.RIGHT);
  wlAddMovedDateBeforeExtension.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedDateBeforeExtension.Label"));
  props.setLook(wlAddMovedDateBeforeExtension);
  fdlAddMovedDateBeforeExtension=new FormData();
  fdlAddMovedDateBeforeExtension.left=new FormAttachment(0,0);
  fdlAddMovedDateBeforeExtension.top=new FormAttachment(wMovedDateTimeFormat,margin);
  fdlAddMovedDateBeforeExtension.right=new FormAttachment(middle,-margin);
  wlAddMovedDateBeforeExtension.setLayoutData(fdlAddMovedDateBeforeExtension);
  wAddMovedDateBeforeExtension=new Button(wMoveToGroup,SWT.CHECK);
  props.setLook(wAddMovedDateBeforeExtension);
  wAddMovedDateBeforeExtension.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddMovedDateBeforeExtension.Tooltip"));
  fdAddMovedDateBeforeExtension=new FormData();
  fdAddMovedDateBeforeExtension.left=new FormAttachment(middle,0);
  fdAddMovedDateBeforeExtension.top=new FormAttachment(wMovedDateTimeFormat,margin);
  fdAddMovedDateBeforeExtension.right=new FormAttachment(100,0);
  wAddMovedDateBeforeExtension.setLayoutData(fdAddMovedDateBeforeExtension);
  wAddMovedDateBeforeExtension.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlIfMovedFileExists=new Label(wMoveToGroup,SWT.RIGHT);
  wlIfMovedFileExists.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.IfMovedFileExists.Label"));
  props.setLook(wlIfMovedFileExists);
  fdlIfMovedFileExists=new FormData();
  fdlIfMovedFileExists.left=new FormAttachment(0,0);
  fdlIfMovedFileExists.right=new FormAttachment(middle,0);
  fdlIfMovedFileExists.top=new FormAttachment(wAddMovedDateBeforeExtension,margin);
  wlIfMovedFileExists.setLayoutData(fdlIfMovedFileExists);
  wIfMovedFileExists=new CCombo(wMoveToGroup,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wIfMovedFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Do_Nothing_IfMovedFileExists.Label"));
  wIfMovedFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Overwrite_Filename_IffMovedFileExists.Label"));
  wIfMovedFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.UniqueName_IfMovedFileExists.Label"));
  wIfMovedFileExists.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Fail_IfMovedFileExists.Label"));
  wIfMovedFileExists.select(0);
  props.setLook(wIfMovedFileExists);
  fdIfMovedFileExists=new FormData();
  fdIfMovedFileExists.left=new FormAttachment(middle,0);
  fdIfMovedFileExists.top=new FormAttachment(wAddMovedDateBeforeExtension,margin);
  fdIfMovedFileExists.right=new FormAttachment(100,0);
  wIfMovedFileExists.setLayoutData(fdIfMovedFileExists);
  fdIfMovedFileExists=new FormData();
  fdIfMovedFileExists.left=new FormAttachment(middle,0);
  fdIfMovedFileExists.top=new FormAttachment(wAddMovedDateBeforeExtension,margin);
  fdIfMovedFileExists.right=new FormAttachment(100,0);
  wIfMovedFileExists.setLayoutData(fdIfMovedFileExists);
  fdMoveToGroup=new FormData();
  fdMoveToGroup.left=new FormAttachment(0,margin);
  fdMoveToGroup.top=new FormAttachment(wDestinationFile,margin);
  fdMoveToGroup.right=new FormAttachment(100,-margin);
  wMoveToGroup.setLayoutData(fdMoveToGroup);
  fdDestinationFileComp=new FormData();
  fdDestinationFileComp.left=new FormAttachment(0,0);
  fdDestinationFileComp.top=new FormAttachment(0,0);
  fdDestinationFileComp.right=new FormAttachment(100,0);
  fdDestinationFileComp.bottom=new FormAttachment(100,0);
  wDestinationFileComp.setLayoutData(wDestinationFileComp);
  wDestinationFileComp.layout();
  wDestinationFileTab.setControl(wDestinationFileComp);
  wAdvancedTab=new CTabItem(wTabFolder,SWT.NONE);
  wAdvancedTab.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.Tab.Advanced.Label"));
  FormLayout contentLayout=new FormLayout();
  contentLayout.marginWidth=3;
  contentLayout.marginHeight=3;
  wAdvancedComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wAdvancedComp);
  wAdvancedComp.setLayout(contentLayout);
  wSuccessOn=new Group(wAdvancedComp,SWT.SHADOW_NONE);
  props.setLook(wSuccessOn);
  wSuccessOn.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SuccessOn.Group.Label"));
  FormLayout successongroupLayout=new FormLayout();
  successongroupLayout.marginWidth=10;
  successongroupLayout.marginHeight=10;
  wSuccessOn.setLayout(successongroupLayout);
  wlSuccessCondition=new Label(wSuccessOn,SWT.RIGHT);
  wlSuccessCondition.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SuccessCondition.Label"));
  props.setLook(wlSuccessCondition);
  fdlSuccessCondition=new FormData();
  fdlSuccessCondition.left=new FormAttachment(0,0);
  fdlSuccessCondition.right=new FormAttachment(middle,0);
  fdlSuccessCondition.top=new FormAttachment(0,margin);
  wlSuccessCondition.setLayoutData(fdlSuccessCondition);
  wSuccessCondition=new CCombo(wSuccessOn,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wSuccessCondition.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SuccessWhenAllWorksFine.Label"));
  wSuccessCondition.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SuccessWhenAtLeat.Label"));
  wSuccessCondition.add(BaseMessages.getString(PKG,"JobPGPEncryptFiles.SuccessWhenErrorsLessThan.Label"));
  wSuccessCondition.select(0);
  props.setLook(wSuccessCondition);
  fdSuccessCondition=new FormData();
  fdSuccessCondition.left=new FormAttachment(middle,0);
  fdSuccessCondition.top=new FormAttachment(0,margin);
  fdSuccessCondition.right=new FormAttachment(100,0);
  wSuccessCondition.setLayoutData(fdSuccessCondition);
  wSuccessCondition.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      activeSuccessCondition();
    }
  }
);
  wlNrErrorsLessThan=new Label(wSuccessOn,SWT.RIGHT);
  wlNrErrorsLessThan.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.NrErrorsLessThan.Label"));
  props.setLook(wlNrErrorsLessThan);
  fdlNrErrorsLessThan=new FormData();
  fdlNrErrorsLessThan.left=new FormAttachment(0,0);
  fdlNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdlNrErrorsLessThan.right=new FormAttachment(middle,-margin);
  wlNrErrorsLessThan.setLayoutData(fdlNrErrorsLessThan);
  wNrErrorsLessThan=new TextVar(jobMeta,wSuccessOn,SWT.SINGLE | SWT.LEFT | SWT.BORDER,BaseMessages.getString(PKG,"JobPGPEncryptFiles.NrErrorsLessThan.Tooltip"));
  props.setLook(wNrErrorsLessThan);
  wNrErrorsLessThan.addModifyListener(lsMod);
  fdNrErrorsLessThan=new FormData();
  fdNrErrorsLessThan.left=new FormAttachment(middle,0);
  fdNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdNrErrorsLessThan.right=new FormAttachment(100,-margin);
  wNrErrorsLessThan.setLayoutData(fdNrErrorsLessThan);
  fdSuccessOn=new FormData();
  fdSuccessOn.left=new FormAttachment(0,margin);
  fdSuccessOn.top=new FormAttachment(wDestinationFile,margin);
  fdSuccessOn.right=new FormAttachment(100,-margin);
  wSuccessOn.setLayoutData(fdSuccessOn);
  wFileResult=new Group(wAdvancedComp,SWT.SHADOW_NONE);
  props.setLook(wFileResult);
  wFileResult.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.FileResult.Group.Label"));
  FormLayout fileresultgroupLayout=new FormLayout();
  fileresultgroupLayout.marginWidth=10;
  fileresultgroupLayout.marginHeight=10;
  wFileResult.setLayout(fileresultgroupLayout);
  wlAddFileToResult=new Label(wFileResult,SWT.RIGHT);
  wlAddFileToResult.setText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddFileToResult.Label"));
  props.setLook(wlAddFileToResult);
  fdlAddFileToResult=new FormData();
  fdlAddFileToResult.left=new FormAttachment(0,0);
  fdlAddFileToResult.top=new FormAttachment(wSuccessOn,margin);
  fdlAddFileToResult.right=new FormAttachment(middle,-margin);
  wlAddFileToResult.setLayoutData(fdlAddFileToResult);
  wAddFileToResult=new Button(wFileResult,SWT.CHECK);
  props.setLook(wAddFileToResult);
  wAddFileToResult.setToolTipText(BaseMessages.getString(PKG,"JobPGPEncryptFiles.AddFileToResult.Tooltip"));
  fdAddFileToResult=new FormData();
  fdAddFileToResult.left=new FormAttachment(middle,0);
  fdAddFileToResult.top=new FormAttachment(wSuccessOn,margin);
  fdAddFileToResult.right=new FormAttachment(100,0);
  wAddFileToResult.setLayoutData(fdAddFileToResult);
  wAddFileToResult.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  fdFileResult=new FormData();
  fdFileResult.left=new FormAttachment(0,margin);
  fdFileResult.top=new FormAttachment(wSuccessOn,margin);
  fdFileResult.right=new FormAttachment(100,-margin);
  wFileResult.setLayoutData(fdFileResult);
  fdAdvancedComp=new FormData();
  fdAdvancedComp.left=new FormAttachment(0,0);
  fdAdvancedComp.top=new FormAttachment(0,0);
  fdAdvancedComp.right=new FormAttachment(100,0);
  fdAdvancedComp.bottom=new FormAttachment(100,0);
  wAdvancedComp.setLayoutData(wAdvancedComp);
  wAdvancedComp.layout();
  wAdvancedTab.setControl(wAdvancedComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wName,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wTabFolder);
  lsCancel=new Listener(){
    @Override public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    @Override public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wSourceFileFolder.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    @Override public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  CheckIncludeSubFolders();
  activeSuccessCondition();
  setDateTimeFormat();
  activeSuccessCondition();
  activeDestinationFolder();
  setMovedDateTimeFormat();
  setAddDateBeforeExtension();
  setAddMovedDateBeforeExtension();
  wTabFolder.setSelection(0);
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return jobEntry;
}
