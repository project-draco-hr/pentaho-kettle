{
  ValueMetaInterface valueMeta=null;
  for (int i=0; i < row.length; i++) {
    if (row[i] == null) {
      break;
    }
    valueMeta=rowMetaInterface.getValueMeta(i);
    if (row[i] != null) switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_STRING:
      String s=rowMetaInterface.getString(row,i);
    dataFilePrintStream.print(pad(valueMeta,s.toString()));
  break;
case ValueMetaInterface.TYPE_INTEGER:
Long l=rowMetaInterface.getInteger(row,i);
dataFilePrintStream.print(pad(valueMeta,l.toString()));
break;
case ValueMetaInterface.TYPE_NUMBER:
Double d=rowMetaInterface.getNumber(row,i);
dataFilePrintStream.print(pad(valueMeta,d.toString()));
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
BigDecimal bd=rowMetaInterface.getBigNumber(row,i);
dataFilePrintStream.print(pad(valueMeta,bd.toString()));
break;
case ValueMetaInterface.TYPE_DATE:
Date dt=rowMetaInterface.getDate(row,i);
dataFilePrintStream.print(simpleDateFormat.format(dt));
break;
case ValueMetaInterface.TYPE_BOOLEAN:
Boolean b=rowMetaInterface.getBoolean(row,i);
if (b.booleanValue()) dataFilePrintStream.print("Y");
 else dataFilePrintStream.print("N");
break;
case ValueMetaInterface.TYPE_BINARY:
byte byt[]=rowMetaInterface.getBinary(row,i);
dataFilePrintStream.print(byt);
break;
default :
throw new KettleException(BaseMessages.getString(PKG,"GPLoadDataOutput.Exception.TypeNotSupported",valueMeta.getType()));
}
dataFilePrintStream.print(FastloadControlBuilder.DATAFILE_COLUMN_SEPERATOR);
}
dataFilePrintStream.print(Const.CR);
}
