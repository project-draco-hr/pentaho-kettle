{
  final Future<Object> resultFuture;
synchronized (serviceCache) {
    if (lastUsername != null && !lastUsername.equals(username)) {
      throw new IllegalStateException();
    }
    final WebServiceSpecification webServiceSpecification=serviceNameMap.get(clazz);
    final String serviceName=webServiceSpecification.getServiceName();
    if (serviceName == null) {
      throw new IllegalStateException();
    }
    if (webServiceSpecification.getServiceType().equals(ServiceType.JAX_WS)) {
      final URL url=new URL(baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "webservices/"+ serviceName+ "?wsdl");
      String key=url.toString() + '_' + serviceName+ '_'+ clazz.getName();
      if (!serviceCache.containsKey(key)) {
        resultFuture=executor.submit(new Callable<Object>(){
          @Override public Object call() throws Exception {
            Service service=Service.create(url,new QName(NAMESPACE_URI,serviceName));
            T port=service.getPort(clazz);
            if (StringUtils.isNotBlank(System.getProperty("pentaho.repository.client.attemptTrust"))) {
              ((BindingProvider)port).getRequestContext().put(MessageContext.HTTP_REQUEST_HEADERS,Collections.singletonMap(TRUST_USER,Collections.singletonList(username)));
            }
 else {
              ((BindingProvider)port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY,username);
              ((BindingProvider)port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,password);
            }
            ((BindingProvider)port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
            ((BindingProvider)port).getRequestContext().put(JAXWSProperties.HTTP_CLIENT_STREAMING_CHUNK_SIZE,8192);
            SOAPBinding binding=(SOAPBinding)((BindingProvider)port).getBinding();
            binding.setMTOMEnabled(true);
            return port;
          }
        }
);
        serviceCache.put(key,resultFuture);
      }
 else {
        resultFuture=serviceCache.get(key);
      }
    }
 else {
      if (webServiceSpecification.getServiceType().equals(ServiceType.JAX_RS)) {
        String key=baseUrl.toString() + '_' + serviceName+ '_'+ clazz.getName();
        if (!serviceCache.containsKey(key)) {
          resultFuture=executor.submit(new Callable<Object>(){
            @Override public Object call() throws Exception {
              ClientConfig clientConfig=new DefaultClientConfig();
              Client client=Client.create(clientConfig);
              client.addFilter(new HTTPBasicAuthFilter(username,password));
              Class<?>[] parameterTypes=new Class<?>[]{Client.class,URI.class};
              String factoryClassName=webServiceSpecification.getServiceClass().getName();
              factoryClassName=factoryClassName.substring(0,factoryClassName.lastIndexOf("$"));
              Class<?> factoryClass=Class.forName(factoryClassName);
              Method method=factoryClass.getDeclaredMethod(webServiceSpecification.getServiceName(),parameterTypes);
              T port=(T)method.invoke(null,new Object[]{client,new URI(baseUrl + "/plugin")});
              return port;
            }
          }
);
          serviceCache.put(key,resultFuture);
        }
 else {
          resultFuture=serviceCache.get(key);
        }
      }
 else {
        resultFuture=null;
      }
    }
    try {
      if (clazz.isInterface()) {
        return UnifiedRepositoryInvocationHandler.forObject((T)resultFuture.get(),clazz);
      }
 else {
        return (T)resultFuture.get();
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause != null) {
        if (cause instanceof RuntimeException) {
          throw (RuntimeException)cause;
        }
 else         if (cause instanceof MalformedURLException) {
          throw (MalformedURLException)cause;
        }
      }
      throw new RuntimeException(e);
    }
  }
}
