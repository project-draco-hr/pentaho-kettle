{
  this.log=log;
  StepLoader steploader=StepLoader.getInstance();
  try {
    stepname=XMLHandler.getTagValue(stepnode,"name");
    stepid=XMLHandler.getTagValue(stepnode,"type");
    log.logDebug("StepMeta()",Messages.getString("StepMeta.Log.LookingForTheRightStepNode",stepname));
    StepPlugin sp=steploader.findStepPluginWithID(stepid);
    if (sp != null) {
      stepMetaInterface=BaseStep.getStepInfo(sp,steploader);
    }
 else {
      throw new KettleStepLoaderException(Messages.getString("StepMeta.Exception.UnableToLoadClass",stepid + Const.CR));
    }
    if (stepMetaInterface != null) {
      stepMetaInterface.loadXML(stepnode,databases,counters);
    }
    log.logDebug("StepMeta()",Messages.getString("StepMeta.Log.SpecificLoadedStep",stepname));
    description=XMLHandler.getTagValue(stepnode,"description");
    copies=Const.toInt(XMLHandler.getTagValue(stepnode,"copies"),1);
    String sdistri=XMLHandler.getTagValue(stepnode,"distribute");
    distributes="Y".equalsIgnoreCase(sdistri);
    if (sdistri == null)     distributes=true;
    String xloc, yloc;
    int x, y;
    xloc=XMLHandler.getTagValue(stepnode,"GUI","xloc");
    yloc=XMLHandler.getTagValue(stepnode,"GUI","yloc");
    try {
      x=Integer.parseInt(xloc);
    }
 catch (    Exception e) {
      x=0;
    }
    try {
      y=Integer.parseInt(yloc);
    }
 catch (    Exception e) {
      y=0;
    }
    location=new Point(x,y);
    drawstep="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"GUI","draw"));
    log.logDebug("StepMeta()",Messages.getString("StepMeta.Log.EndOfReadXML"));
  }
 catch (  Exception e) {
    throw new KettleXMLException(Messages.getString("StepMeta.Exception.UnableToLoadStepInfo"),e);
  }
}
