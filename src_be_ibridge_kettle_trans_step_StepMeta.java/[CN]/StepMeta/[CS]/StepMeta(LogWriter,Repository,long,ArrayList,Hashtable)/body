{
  this.log=log;
  try {
    StepLoader steploader=StepLoader.getInstance();
    Row r=rep.getStep(id_step);
    if (r != null) {
      setID(id_step);
      stepname=r.searchValue("NAME").getString();
      description=r.searchValue("DESCRIPTION").getString();
      long id_step_type=r.searchValue("ID_STEP_TYPE").getInteger();
      Row steptyperow=rep.getStepType(id_step_type);
      stepid=steptyperow.searchValue("CODE").getString();
      distributes=r.searchValue("DISTRIBUTE").getBoolean();
      copies=(int)r.searchValue("COPIES").getInteger();
      int x=(int)r.searchValue("GUI_LOCATION_X").getInteger();
      int y=(int)r.searchValue("GUI_LOCATION_Y").getInteger();
      location=new Point(x,y);
      drawstep=r.searchValue("GUI_DRAW").getBoolean();
      StepPlugin sp=steploader.findStepPluginWithID(stepid);
      if (sp != null) {
        stepMetaInterface=BaseStep.getStepInfo(sp,steploader);
      }
 else {
        throw new KettleStepLoaderException("Unable to load class for step/plugin with id [" + stepid + "]."+ Const.CR+ "Check if the plugin is available in the plugins subdirectory of the Kettle distribution.");
      }
      stepMetaInterface=BaseStep.getStepInfo(sp,steploader);
      if (stepMetaInterface != null) {
        stepMetaInterface.readRep(rep,getID(),databases,counters);
      }
    }
 else {
      throw new KettleException("Step information for id_step=" + id_step + " could not be found!");
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Step with id " + getID() + " could not be loaded from the repository!",dbe);
  }
}
