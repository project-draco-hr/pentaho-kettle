{
  try {
    String subfolder;
switch (marketEntry.getType()) {
case Step:
      subfolder="steps";
    break;
case JobEntry:
  subfolder="jobentries";
break;
case Partitioner:
subfolder="steps";
break;
case SpoonPlugin:
subfolder="spoon";
break;
case Database:
subfolder="databases";
break;
case Repository:
subfolder="repositories";
break;
default :
subfolder=null;
}
String folderName=Const.getKettleDirectory() + Const.FILE_SEPARATOR + "plugins"+ (subfolder == null ? "" : Const.FILE_SEPARATOR + subfolder);
File folder=new File(folderName);
if (folder.exists()) {
}
InputStream inputStream=KettleVFS.getInputStream(marketEntry.getPackageUrl());
ZipInputStream zis=new ZipInputStream(inputStream);
ZipEntry zipEntry=zis.getNextEntry();
byte[] buffer=new byte[1024];
int bytesRead=0;
FileOutputStream fos=null;
while (zipEntry != null) {
try {
File file=new File(folderName + File.separator + zipEntry.getName());
if (zipEntry.isDirectory()) {
file.mkdirs();
}
 else {
file.getParentFile().mkdirs();
fos=new FileOutputStream(file);
while ((bytesRead=zis.read(buffer)) != -1) {
fos.write(buffer,0,bytesRead);
}
}
zipEntry=zis.getNextEntry();
}
  finally {
if (fos != null) {
try {
fos.close();
}
 catch (IOException e) {
}
}
}
}
PluginRegistry.init();
Spoon spoon=Spoon.getInstance();
spoon.refreshCoreObjects();
spoon.refreshTree();
spoon.refreshGraph();
spoon.enableMenus();
GUIResource.getInstance().reload();
spoon.selectionFilter.setText(spoon.selectionFilter.getText());
}
 catch (Exception e) {
new ErrorDialog(shell,"Error","Error installing plugin: ",e);
}
}
