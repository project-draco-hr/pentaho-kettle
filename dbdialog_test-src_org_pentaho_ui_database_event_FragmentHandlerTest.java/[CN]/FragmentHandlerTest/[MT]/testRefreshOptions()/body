{
  XulListbox connectionBox=mock(XulListbox.class);
  when(document.getElementById("connection-type-list")).thenReturn(connectionBox);
  when(connectionBox.getSelectedItem()).thenReturn("myDb");
  XulListbox accessBox=mock(XulListbox.class);
  when(document.getElementById("access-type-list")).thenReturn(accessBox);
  when(accessBox.getSelectedItem()).thenReturn("Native");
  DataHandler dataHandler=mock(DataHandler.class);
  when(xulDomContainer.getEventHandler("dataHandler")).thenReturn(dataHandler);
  DatabaseInterface dbInterface=mock(DatabaseInterface.class);
  when(dbInterface.getDefaultDatabasePort()).thenReturn(5309);
  DataHandler.connectionMap.put("myDb",dbInterface);
  XulComponent component=mock(XulComponent.class);
  XulComponent parent=mock(XulComponent.class);
  when(component.getParent()).thenReturn(parent);
  when(document.getElementById("database-options-box")).thenReturn(component);
  XulDomContainer fragmentContainer=mock(XulDomContainer.class);
  Document mockDoc=mock(Document.class);
  XulComponent firstChild=mock(XulComponent.class);
  when(mockDoc.getFirstChild()).thenReturn(firstChild);
  when(fragmentContainer.getDocumentRoot()).thenReturn(mockDoc);
  when(xulDomContainer.loadFragment(anyString(),any())).thenReturn(fragmentContainer);
  XulTextbox portBox=mock(XulTextbox.class);
  when(document.getElementById("port-number-text")).thenReturn(portBox);
  fragmentHandler.refreshOptions();
  when(accessBox.getSelectedItem()).thenReturn("JNDI");
  fragmentHandler.refreshOptions();
  when(accessBox.getSelectedItem()).thenReturn("ODBC");
  fragmentHandler.refreshOptions();
  when(accessBox.getSelectedItem()).thenReturn("OCI");
  fragmentHandler.refreshOptions();
  when(accessBox.getSelectedItem()).thenReturn("Plugin");
  fragmentHandler.refreshOptions();
}
