{
  Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  XMLEvent e=null;
  try {
    e=data.xmlEventReader.nextEvent();
  }
 catch (  XMLStreamException ex) {
    throw new KettleException(ex);
  }
  int eventType=e.getEventType();
  if (data.pos_xml_data_type_numeric != -1)   outputRowData[data.pos_xml_data_type_numeric]=new Long(eventType);
  if (data.pos_xml_data_type_description != -1) {
    if (eventType == 0 || eventType > eventDescription.length) {
      outputRowData[data.pos_xml_data_type_description]=eventDescription[0] + "(" + eventType+ ")";
    }
 else {
      outputRowData[data.pos_xml_data_type_description]=eventDescription[eventType];
    }
  }
  if (data.pos_xml_location_line != -1)   outputRowData[data.pos_xml_location_line]=new Long(e.getLocation().getLineNumber());
  if (data.pos_xml_location_column != -1)   outputRowData[data.pos_xml_location_column]=new Long(e.getLocation().getColumnNumber());
switch (eventType) {
case XMLStreamConstants.START_ELEMENT:
    data.elementLevel++;
  if (data.elementLevel > PARENT_ID_ALLOCATE_SIZE - 1)   throw new KettleException("Too many nested XML elements, more than " + PARENT_ID_ALLOCATE_SIZE);
if (data.elementParentID[data.elementLevel] == null) data.elementParentID[data.elementLevel]=data.elementID;
data.elementID++;
data.elementLevelID[data.elementLevel]=data.elementID;
if (meta.isEnableNamespaces()) {
String prefix=e.asStartElement().getName().getPrefix();
if (Const.isEmpty(prefix)) {
outputRowData[data.pos_xml_data_name]=e.asStartElement().getName().getLocalPart();
}
 else {
outputRowData[data.pos_xml_data_name]=prefix + ":" + e.asStartElement().getName().getLocalPart();
}
}
 else {
outputRowData[data.pos_xml_data_name]=e.asStartElement().getName().getLocalPart();
}
data.elementName[data.elementLevel]=new String((String)outputRowData[data.pos_xml_data_name]);
data.elementPath[data.elementLevel]=data.elementPath[data.elementLevel - 1] + "/" + outputRowData[data.pos_xml_data_name];
if (meta.isEnableNamespaces()) outputRowData=parseNamespaces(outputRowData,e);
outputRowData=parseAttributes(outputRowData,e);
break;
case XMLStreamConstants.END_ELEMENT:
outputRowData[data.pos_xml_data_name]=e.asEndElement().getName().getLocalPart();
putRowOut(outputRowData);
data.elementParentID[data.elementLevel + 1]=null;
data.elementLevel--;
outputRowData=null;
break;
case XMLStreamConstants.SPACE:
outputRowData=null;
break;
case XMLStreamConstants.CHARACTERS:
outputRowData[data.pos_xml_data_name]=data.elementName[data.elementLevel];
outputRowData[data.pos_xml_data_value]=e.asCharacters().getData();
if (meta.isEnableTrim()) outputRowData[data.pos_xml_data_value]=Const.trim((String)outputRowData[data.pos_xml_data_value]);
if (Const.isEmpty((String)outputRowData[data.pos_xml_data_value])) outputRowData=null;
break;
case XMLStreamConstants.PROCESSING_INSTRUCTION:
outputRowData=null;
break;
case XMLStreamConstants.CDATA:
outputRowData[data.pos_xml_data_name]=data.elementName[data.elementLevel];
outputRowData[data.pos_xml_data_value]=e.asCharacters().getData();
if (meta.isEnableTrim()) outputRowData[data.pos_xml_data_value]=Const.trim((String)outputRowData[data.pos_xml_data_value]);
if (Const.isEmpty((String)outputRowData[data.pos_xml_data_value])) outputRowData=null;
break;
case XMLStreamConstants.COMMENT:
outputRowData=null;
break;
case XMLStreamConstants.ENTITY_REFERENCE:
outputRowData=null;
break;
case XMLStreamConstants.START_DOCUMENT:
break;
case XMLStreamConstants.END_DOCUMENT:
break;
default :
logBasic("Event:" + eventType);
outputRowData=null;
}
return outputRowData;
}
