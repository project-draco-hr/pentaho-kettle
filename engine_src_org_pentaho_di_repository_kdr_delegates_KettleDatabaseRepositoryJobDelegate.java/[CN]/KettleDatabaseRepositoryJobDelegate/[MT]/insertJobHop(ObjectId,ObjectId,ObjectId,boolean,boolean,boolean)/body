{
  ObjectId id=repository.connectionDelegate.getNextJobHopID();
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOB_HOP),id);
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOB),id_job);
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOBENTRY_COPY_FROM),id_jobentry_copy_from);
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_HOP_ID_JOBENTRY_COPY_TO),id_jobentry_copy_to);
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_HOP_ENABLED),Boolean.valueOf(enabled));
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_HOP_EVALUATION),Boolean.valueOf(evaluation));
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_HOP_UNCONDITIONAL),Boolean.valueOf(unconditional));
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_JOB_HOP);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  return id;
}
