{
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_ID_JOB),jobMeta.getObjectId());
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_ID_DIRECTORY),jobMeta.getRepositoryDirectory().getObjectId());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_NAME),jobMeta.getName());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_DESCRIPTION),jobMeta.getDescription());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_EXTENDED_DESCRIPTION),jobMeta.getExtendedDescription());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_JOB_VERSION),jobMeta.getJobversion());
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_JOB_STATUS),new Long(jobMeta.getJobstatus() < 0 ? -1L : jobMeta.getJobstatus()));
  table.addValue(new ValueMetaInteger(KettleDatabaseRepository.FIELD_JOB_ID_DATABASE_LOG),jobMeta.getJobLogTable().getDatabaseMeta() != null ? jobMeta.getJobLogTable().getDatabaseMeta().getObjectId() : -1L);
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_TABLE_NAME_LOG),jobMeta.getJobLogTable().getTableName());
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_USE_BATCH_ID),jobMeta.getJobLogTable().isBatchIdUsed());
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_USE_LOGFIELD),jobMeta.getJobLogTable().isLogFieldUsed());
  repository.connectionDelegate.insertJobAttribute(jobMeta.getObjectId(),0,KettleDatabaseRepository.JOB_ATTRIBUTE_LOG_SIZE_LIMIT,0,jobMeta.getJobLogTable().getLogSizeLimit());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_CREATED_USER),jobMeta.getCreatedUser());
  table.addValue(new ValueMetaDate(KettleDatabaseRepository.FIELD_JOB_CREATED_DATE),jobMeta.getCreatedDate());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_MODIFIED_USER),jobMeta.getModifiedUser());
  table.addValue(new ValueMetaDate(KettleDatabaseRepository.FIELD_JOB_MODIFIED_DATE),jobMeta.getModifiedDate());
  table.addValue(new ValueMetaBoolean(KettleDatabaseRepository.FIELD_JOB_PASS_BATCH_ID),jobMeta.isBatchIdPassed());
  table.addValue(new ValueMetaString(KettleDatabaseRepository.FIELD_JOB_SHARED_FILE),jobMeta.getSharedObjectsFile());
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_JOB);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  if (log.isDebug()) {
    log.logDebug("Inserted new record into table " + quoteTable(KettleDatabaseRepository.TABLE_R_JOB) + " with data : "+ table);
  }
  repository.connectionDelegate.getDatabase().closeInsert();
  if (jobMeta.getJobLogTable().getDatabaseMeta() != null) {
    repository.insertJobEntryDatabase(jobMeta.getObjectId(),null,jobMeta.getJobLogTable().getDatabaseMeta().getObjectId());
  }
  RepositoryAttributeInterface attributeInterface=new KettleDatabaseRepositoryJobAttribute(repository.connectionDelegate,jobMeta.getObjectId());
  for (  LogTableInterface logTable : jobMeta.getLogTables()) {
    logTable.saveToRepository(attributeInterface);
  }
}
