{
  try {
    headerEnabled=rep.getStepAttributeBoolean(id_step,"header");
    footerEnabled=rep.getStepAttributeBoolean(id_step,"footer");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    fileName=rep.getStepAttributeString(id_step,"file_name");
    extension=rep.getStepAttributeString(id_step,"file_extention");
    splitEvery=(int)rep.getStepAttributeInteger(id_step,"file_split");
    stepNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_stepnr");
    dateInFilename=rep.getStepAttributeBoolean(id_step,"file_add_date");
    timeInFilename=rep.getStepAttributeBoolean(id_step,"file_add_time");
    addtoresultfilenames=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    protectsheet=rep.getStepAttributeBoolean(id_step,"protect_sheet");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"password"));
    templateEnabled=rep.getStepAttributeBoolean(id_step,"template_enabled");
    templateAppend=rep.getStepAttributeBoolean(id_step,"template_append");
    templateFileName=rep.getStepAttributeString(id_step,"template_filename");
    sheetname=rep.getStepAttributeString(id_step,"sheetname");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new ExcelField();
      outputFields[i].setName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setType(rep.getStepAttributeString(id_step,i,"field_type"));
      outputFields[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
