{
  try {
    headerEnabled=rep.getStepAttributeBoolean(id_step,"header");
    footerEnabled=rep.getStepAttributeBoolean(id_step,"footer");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    append=rep.getStepAttributeBoolean(id_step,"append");
    String addToResult=rep.getStepAttributeString(id_step,"add_to_result_filenames");
    if (Const.isEmpty(addToResult))     addToResultFilenames=true;
 else     addToResultFilenames=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    fileName=rep.getStepAttributeString(id_step,"file_name");
    extension=rep.getStepAttributeString(id_step,"file_extention");
    doNotOpenNewFileInit=rep.getStepAttributeBoolean(id_step,"do_not_open_newfile_init");
    createparentfolder=rep.getStepAttributeBoolean(id_step,"create_parent_folder");
    splitEvery=(int)rep.getStepAttributeInteger(id_step,"file_split");
    stepNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_stepnr");
    dateInFilename=rep.getStepAttributeBoolean(id_step,"file_add_date");
    timeInFilename=rep.getStepAttributeBoolean(id_step,"file_add_time");
    SpecifyFormat=rep.getStepAttributeBoolean(id_step,"SpecifyFormat");
    date_time_format=rep.getStepAttributeString(id_step,"date_time_format");
    autosizecolums=rep.getStepAttributeBoolean(id_step,"autosizecolums");
    nullIsBlank=rep.getStepAttributeBoolean(id_step,"nullisblank");
    protectsheet=rep.getStepAttributeBoolean(id_step,"protect_sheet");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getStepAttributeString(id_step,"password"));
    templateEnabled=rep.getStepAttributeBoolean(id_step,"template_enabled");
    templateAppend=rep.getStepAttributeBoolean(id_step,"template_append");
    templateFileName=rep.getStepAttributeString(id_step,"template_filename");
    sheetname=rep.getStepAttributeString(id_step,"sheetname");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new ExcelField();
      outputFields[i].setName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setType(rep.getStepAttributeString(id_step,i,"field_type"));
      outputFields[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
    }
    header_font_name=getFontNameByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_font_name"),""));
    header_font_size=Const.NVL(rep.getStepAttributeString(id_step,"header_font_size"),"" + DEFAULT_FONT_SIZE);
    header_font_bold=rep.getStepAttributeBoolean(id_step,"header_font_bold");
    header_font_italic=rep.getStepAttributeBoolean(id_step,"header_font_italic");
    header_font_underline=getFontUnderlineByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_font_underline"),""));
    header_font_orientation=getFontOrientationByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_font_orientation"),""));
    header_font_color=getFontColorByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_font_color"),"" + FONT_COLOR_BLACK));
    header_background_color=getFontColorByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_background_color"),"" + FONT_COLOR_NONE));
    header_row_height=rep.getStepAttributeString(id_step,"header_row_height");
    header_alignment=getFontAlignmentByCode(Const.NVL(rep.getStepAttributeString(id_step,"header_alignment"),""));
    header_image=rep.getStepAttributeString(id_step,"header_image");
    row_font_name=getFontNameByCode(Const.NVL(rep.getStepAttributeString(id_step,"row_font_name"),""));
    row_font_size=Const.NVL(rep.getStepAttributeString(id_step,"row_font_size"),"" + DEFAULT_FONT_SIZE);
    row_font_color=getFontColorByCode(Const.NVL(rep.getStepAttributeString(id_step,"row_font_color"),"" + FONT_COLOR_BLACK));
    row_background_color=getFontColorByCode(Const.NVL(rep.getStepAttributeString(id_step,"row_background_color"),"" + FONT_COLOR_NONE));
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
