{
  KettleEnvironment.init();
  try {
    TransMeta transMeta=new TransMeta();
    transMeta.setName("transname");
    for (int i=0; i < databasesXML.length; i++) {
      DatabaseMeta databaseMeta=new DatabaseMeta(databasesXML[i]);
      transMeta.addDatabase(databaseMeta);
    }
    DatabaseMeta dbInfo=transMeta.findDatabase("db");
    PluginRegistry registry=PluginRegistry.getInstance();
    String injectorStepname="injector step";
    InjectorMeta im=new InjectorMeta();
    String injectorPid=registry.getPluginId(StepPluginType.class,im);
    StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
    transMeta.addStep(injectorStep);
    String stepName="delete from [" + execsqlrow_testtable + "]";
    ExecSQLRowMeta execsqlmeta=new ExecSQLRowMeta();
    execsqlmeta.setDatabaseMeta(transMeta.findDatabase("db"));
    execsqlmeta.setCommitSize(1);
    execsqlmeta.setSqlFieldName("SQL");
    String execSqlRowId=registry.getPluginId(StepPluginType.class,execsqlmeta);
    StepMeta execSqlRowStep=new StepMeta(execSqlRowId,stepName,(StepMetaInterface)execsqlmeta);
    execSqlRowStep.setDescription("Deletes information from table [" + execsqlrow_testtable + "] on database ["+ dbInfo+ "]");
    transMeta.addStep(execSqlRowStep);
    TransHopMeta hi=new TransHopMeta(injectorStep,execSqlRowStep);
    transMeta.addTransHop(hi);
    Trans trans=new Trans(transMeta);
    trans.prepareExecution(null);
    StepInterface si=trans.getStepInterface(stepName,0);
    RowStepCollector rc=new RowStepCollector();
    si.addRowListener(rc);
    RowProducer rp=trans.addRowProducer(injectorStepname,0);
    trans.startThreads();
    List<RowMetaAndData> inputList=createDataRows();
    for (    RowMetaAndData rm : inputList) {
      rp.putRow(rm.getRowMeta(),rm.getData());
    }
    rp.finished();
    trans.waitUntilFinished();
    List<RowMetaAndData> resultRows=rc.getRowsWritten();
    List<RowMetaAndData> goldRows=createResultDataRows();
    checkRows(goldRows,resultRows);
  }
  finally {
  }
}
