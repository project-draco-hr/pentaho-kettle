{
  if (first) {
    first=false;
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++)     data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++) {
      data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    }
    connectServerLdap();
    data.multi_valuedFieldSeparator=environmentSubstitute(meta.getMultiValuedSeparator());
    data.nrfields=meta.getInputFields().length;
  }
  Object[] outputRowData=null;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    outputRowData=getOneRow();
    if (outputRowData == null) {
      setOutputDone();
      return false;
    }
    putRow(data.outputRowMeta,outputRowData);
    if (log.isDebug())     log.logDebug(Messages.getString("LDAPInput.log.ReadRow"),outputRowData.toString());
    if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0) {
      if (log.isDetailed())       logDetailed(Messages.getString("LDAPInput.log.LineRow") + linesInput);
    }
    return true;
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(Messages.getString("LDAPInput.log.Exception",e.getMessage()));
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),outputRowData,1,errorMessage,null,"LDAPINPUT001");
    }
  }
  return true;
}
