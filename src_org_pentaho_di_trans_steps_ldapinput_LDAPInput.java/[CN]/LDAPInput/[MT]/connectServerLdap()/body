{
  try {
    String port=environmentSubstitute(meta.getPort());
    int portint=Const.toInt(port,389);
    String hostname=environmentSubstitute(meta.getHost());
    String username=environmentSubstitute(meta.getUserName());
    String password=environmentSubstitute(meta.getPassword());
    String filter=environmentSubstitute(meta.getFilterString());
    String searchbase=environmentSubstitute(meta.getSearchBase());
    Hashtable<String,String> env=new Hashtable<String,String>();
    env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
    if (hostname.indexOf("ldap://") >= 0)     env.put(Context.PROVIDER_URL,hostname + ":" + portint);
 else     env.put(Context.PROVIDER_URL,"ldap://" + hostname + ":"+ portint);
    env.put(Context.SECURITY_AUTHENTICATION,"simple");
    if (meta.UseAuthentication()) {
      env.put(Context.SECURITY_PRINCIPAL,username);
      env.put(Context.SECURITY_CREDENTIALS,password);
    }
    data.ctx=new InitialDirContext(env);
    if (data.ctx == null) {
      logError(BaseMessages.getString(PKG,"LDAPInput.Error.UnableToConnectToServer"));
      throw new KettleException(BaseMessages.getString(PKG,"LDAPInput.Error.UnableToConnectToServer"));
    }
    if (log.isBasic())     logBasic(BaseMessages.getString(PKG,"LDAPInput.Log.ConnectedToServer",hostname,username));
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"LDAPInput.ClassUsed.Message",data.ctx.getClass().getName()));
    SearchControls controls=new SearchControls();
    controls.setCountLimit(meta.getRowLimit());
    if (meta.getTimeLimit() > 0)     controls.setTimeLimit(meta.getTimeLimit() * 1000);
    String[] attrReturned=new String[meta.getInputFields().length];
    for (int i=0; i < meta.getInputFields().length; i++) {
      attrReturned[i]=environmentSubstitute(meta.getInputFields()[i].getAttribute());
    }
    controls.setReturningAttributes(attrReturned);
    if (Const.isEmpty(searchbase)) {
      Attributes attrs=data.ctx.getAttributes("",new String[]{"namingContexts"});
      Attribute attr=attrs.get("namingContexts");
      searchbase=attr.get().toString();
      if (log.isBasic())       logBasic(BaseMessages.getString(PKG,"LDAPInput.SearchBaseFound",searchbase));
    }
    controls.setSearchScope(SearchControls.SUBTREE_SCOPE);
    data.results=data.ctx.search(searchbase,filter.replace("\n\r","").replace("\n",""),controls);
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LDAPinput.Exception.ErrorConnecting",e.getMessage()));
  }
}
