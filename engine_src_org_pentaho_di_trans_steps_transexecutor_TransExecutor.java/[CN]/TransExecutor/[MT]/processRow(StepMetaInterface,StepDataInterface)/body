{
  try {
    meta=(TransExecutorMeta)smi;
    setData((TransExecutorData)sdi);
    TransExecutorData transExecutorData=getData();
    Object[] row=getRow();
    if (row == null) {
      executeTransformation();
      setOutputDone();
      return false;
    }
    if (first) {
      first=false;
      initOnFirstProcessingIteration();
    }
    if (transExecutorData.getExecutorStepOutputRowMeta() != null) {
      putRowTo(transExecutorData.getExecutorStepOutputRowMeta(),row,transExecutorData.getExecutorStepOutputRowSet());
    }
    if (transExecutorData.groupSize < 0) {
      if (transExecutorData.groupFieldIndex >= 0) {
        Object groupFieldData=row[transExecutorData.groupFieldIndex];
        if (transExecutorData.prevGroupFieldData != null) {
          if (transExecutorData.groupFieldMeta.compare(transExecutorData.prevGroupFieldData,groupFieldData) != 0) {
            executeTransformation();
          }
        }
        transExecutorData.prevGroupFieldData=groupFieldData;
      }
 else       if (transExecutorData.groupTime > 0) {
        long now=System.currentTimeMillis();
        if (now - transExecutorData.groupTimeStart >= transExecutorData.groupTime) {
          executeTransformation();
        }
      }
    }
    transExecutorData.groupBuffer.add(new RowMetaAndData(getInputRowMeta(),row));
    if (transExecutorData.groupSize > 0) {
      if (transExecutorData.groupBuffer.size() >= transExecutorData.groupSize) {
        executeTransformation();
      }
    }
    return true;
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"TransExecutor.UnexpectedError"),e);
  }
}
