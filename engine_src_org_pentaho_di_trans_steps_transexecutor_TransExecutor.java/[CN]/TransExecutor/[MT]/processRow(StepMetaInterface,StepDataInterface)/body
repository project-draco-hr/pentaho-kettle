{
  try {
    meta=(TransExecutorMeta)smi;
    setData((TransExecutorData)sdi);
    Object[] row=getRow();
    if (row == null) {
      executeTransformation();
      setOutputDone();
      return false;
    }
    if (first) {
      first=false;
      initOnFirstProcessingIteration();
    }
    if (getData().getExecutorStepOutputRowMeta() != null) {
      putRowTo(getData().getExecutorStepOutputRowMeta(),row,getData().getExecutorStepOutputRowSet());
    }
    boolean newGroup=false;
    if (getData().groupSize >= 0) {
      if (getData().groupSize != 0) {
        if (getData().groupBuffer.size() >= getData().groupSize) {
          newGroup=true;
        }
      }
    }
 else     if (getData().groupFieldIndex >= 0) {
      Object groupFieldData=row[getData().groupFieldIndex];
      if (getData().prevGroupFieldData != null) {
        if (getData().groupFieldMeta.compare(getData().prevGroupFieldData,groupFieldData) != 0) {
          newGroup=true;
        }
      }
      getData().prevGroupFieldData=groupFieldData;
    }
 else     if (getData().groupTime > 0) {
      long now=System.currentTimeMillis();
      if (now - getData().groupTimeStart >= getData().groupTime) {
        newGroup=true;
      }
    }
    if (newGroup) {
      executeTransformation();
    }
    getData().groupBuffer.add(new RowMetaAndData(getInputRowMeta(),row));
    return true;
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"TransExecutor.UnexpectedError"),e);
  }
}
