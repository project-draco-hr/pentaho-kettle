{
  if (getData().groupBuffer.isEmpty()) {
    return;
  }
  getData().groupTimeStart=System.currentTimeMillis();
  if (getData().executorTrans != null) {
    KettleLogStore.discardLines(getData().executorTrans.getLogChannelId(),false);
    LoggingRegistry.getInstance().removeIncludingChildren(getData().executorTrans.getLogChannelId());
  }
  getData().executorTrans=new Trans(getData().executorTransMeta,this);
  getData().executorTrans.setParentTrans(getTrans());
  getData().executorTrans.setLogLevel(getLogLevel());
  getData().executorTrans.setArguments(getTrans().getArguments());
  if (meta.getParameters().isInheritingAllVariables()) {
    getData().executorTrans.shareVariablesWith(this);
  }
  getData().executorTrans.setInternalKettleVariables(this);
  getData().executorTrans.copyParametersFrom(getData().executorTransMeta);
  getData().executorTrans.setPreview(getTrans().isPreview());
  initServletConfig();
  passParametersToTrans();
  getTrans().getActiveSubtransformations().put(getStepname(),getData().executorTrans);
  Result result=new Result();
  result.setRows(getData().groupBuffer);
  try {
    getData().executorTrans.setPreviousResult(result);
    getData().executorTrans.prepareExecution(getTrans().getArguments());
    if (meta.getOutputRowsSourceStepMeta() != null) {
      StepInterface stepInterface=getData().executorTrans.getParentTrans().findRunThread(meta.getOutputRowsSourceStepMeta().getName());
      stepInterface.addRowListener(new RowAdapter(){
        @Override public void rowWrittenEvent(        RowMetaInterface rowMeta,        Object[] row) throws KettleStepException {
          TransExecutor.this.putRow(rowMeta,row);
        }
      }
);
    }
    getData().executorTrans.startThreads();
    for (    DelegationListener delegationListener : getTrans().getDelegationListeners()) {
      delegationListener.transformationDelegationStarted(getData().executorTrans,new TransExecutionConfiguration());
    }
    getData().executorTrans.waitUntilFinished();
    result=getData().executorTrans.getResult();
  }
 catch (  KettleException e) {
    log.logError("An error occurred executing the transformation: ",e);
    result.setResult(false);
    result.setNrErrors(1);
  }
  if (meta.getExecutionResultTargetStepMeta() != null) {
    Object[] outputRow=RowDataUtil.allocateRowData(getData().executionResultsOutputRowMeta.size());
    int idx=0;
    if (!Const.isEmpty(meta.getExecutionTimeField())) {
      outputRow[idx++]=Long.valueOf(System.currentTimeMillis() - getData().groupTimeStart);
    }
    if (!Const.isEmpty(meta.getExecutionResultField())) {
      outputRow[idx++]=Boolean.valueOf(result.getResult());
    }
    if (!Const.isEmpty(meta.getExecutionNrErrorsField())) {
      outputRow[idx++]=Long.valueOf(result.getNrErrors());
    }
    if (!Const.isEmpty(meta.getExecutionLinesReadField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesRead());
    }
    if (!Const.isEmpty(meta.getExecutionLinesWrittenField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesWritten());
    }
    if (!Const.isEmpty(meta.getExecutionLinesInputField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesInput());
    }
    if (!Const.isEmpty(meta.getExecutionLinesOutputField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesOutput());
    }
    if (!Const.isEmpty(meta.getExecutionLinesRejectedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesRejected());
    }
    if (!Const.isEmpty(meta.getExecutionLinesUpdatedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesUpdated());
    }
    if (!Const.isEmpty(meta.getExecutionLinesDeletedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesDeleted());
    }
    if (!Const.isEmpty(meta.getExecutionFilesRetrievedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrFilesRetrieved());
    }
    if (!Const.isEmpty(meta.getExecutionExitStatusField())) {
      outputRow[idx++]=Long.valueOf(result.getExitStatus());
    }
    if (!Const.isEmpty(meta.getExecutionLogTextField())) {
      String channelId=getData().executorTrans.getLogChannelId();
      String logText=KettleLogStore.getAppender().getBuffer(channelId,false).toString();
      outputRow[idx++]=logText;
    }
    if (!Const.isEmpty(meta.getExecutionLogChannelIdField())) {
      outputRow[idx++]=getData().executorTrans.getLogChannelId();
    }
    putRowTo(getData().executionResultsOutputRowMeta,outputRow,getData().executionResultRowSet);
  }
  if (meta.getResultFilesTargetStepMeta() != null && result.getResultFilesList() != null) {
    for (    ResultFile resultFile : result.getResultFilesList()) {
      Object[] targetRow=RowDataUtil.allocateRowData(getData().resultFilesOutputRowMeta.size());
      int idx=0;
      targetRow[idx++]=resultFile.getFile().getName().toString();
      putRowTo(getData().resultFilesOutputRowMeta,targetRow,getData().resultFilesRowSet);
    }
  }
  getData().groupBuffer.clear();
}
