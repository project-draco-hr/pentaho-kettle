{
  if (startBuffer == 0 && endBuffer >= byteBuffer.length) {
    int newSize;
    if (byteBuffer.length == 0) {
      newSize=bufferSize;
    }
 else {
      newSize=(int)((byteBuffer.length * 3) / 2);
    }
    byte[] newByteBuffer=new byte[newSize];
    maxBuffer=byteBuffer.length - startBuffer;
    System.arraycopy(byteBuffer,startBuffer,newByteBuffer,0,maxBuffer);
    byteBuffer=newByteBuffer;
  }
 else {
    if (startBuffer > 0) {
      maxBuffer=byteBuffer.length - startBuffer;
      System.arraycopy(byteBuffer,startBuffer,byteBuffer,0,maxBuffer);
      endBuffer=maxBuffer;
      startBuffer=0;
    }
  }
  int size=byteBuffer.length - maxBuffer;
  int bytesRead=0;
  int leftToRead=size;
  try {
    while (bytesRead < size) {
      int n=gzis.read(byteBuffer,maxBuffer,leftToRead);
      if (n < 0) {
        eofReached=true;
        fileReadPosition+=bytesRead;
        return bytesRead == 0;
      }
      bytesRead+=n;
      maxBuffer+=n;
      leftToRead-=n;
    }
    fileReadPosition+=bytesRead;
    return false;
  }
 catch (  IOException e) {
    throw new KettleException("Unable to read " + size + " bytes from the gzipped input file",e);
  }
}
