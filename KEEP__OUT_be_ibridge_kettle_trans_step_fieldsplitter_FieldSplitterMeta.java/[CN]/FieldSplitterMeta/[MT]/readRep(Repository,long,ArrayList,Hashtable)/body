{
  try {
    splitField=rep.getStepAttributeString(id_step,"splitfield");
    delimiter=rep.getStepAttributeString(id_step,"delimiter");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      field[i]=rep.getStepAttributeString(id_step,i,"field_name");
      fieldID[i]=rep.getStepAttributeString(id_step,i,"field_id");
      removeID[i]=rep.getStepAttributeBoolean(id_step,i,"field_idrem");
      fieldType[i]=Value.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      fieldFormat[i]=rep.getStepAttributeString(id_step,i,"field_format");
      fieldGroup[i]=rep.getStepAttributeString(id_step,i,"field_group");
      fieldDecimal[i]=rep.getStepAttributeString(id_step,i,"field_decimal");
      fieldLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      fieldPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
      fieldDefault[i]=rep.getStepAttributeString(id_step,i,"field_nullif");
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("FieldSplitterMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
