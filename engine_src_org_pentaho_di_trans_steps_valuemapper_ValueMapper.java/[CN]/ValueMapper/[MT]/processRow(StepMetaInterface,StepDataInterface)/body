{
  meta=(ValueMapperMeta)smi;
  data=(ValueMapperData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousMeta=getInputRowMeta().clone();
    data.outputMeta=data.previousMeta.clone();
    meta.getFields(data.outputMeta,getStepname(),null,null,this,repository,metaStore);
    data.keynr=data.previousMeta.indexOfValue(meta.getFieldToUse());
    if (data.keynr < 0) {
      String message=BaseMessages.getString(PKG,"ValueMapper.RuntimeError.FieldToUseNotFound.VALUEMAPPER0001",meta.getFieldToUse(),Const.CR,getInputRowMeta().getString(r));
      logError(message);
      setErrors(1);
      stopAll();
      return false;
    }
    for (int i=0; i < meta.getSourceValue().length; i++) {
      if (Utils.isEmpty(meta.getSourceValue()[i])) {
        if (data.emptyFieldIndex < 0) {
          data.emptyFieldIndex=i;
        }
 else {
          throw new KettleException(BaseMessages.getString(PKG,"ValueMapper.RuntimeError.OnlyOneEmptyMappingAllowed.VALUEMAPPER0004"));
        }
      }
    }
    data.sourceValueMeta=getInputRowMeta().getValueMeta(data.keynr);
    if (Utils.isEmpty(meta.getTargetField())) {
      data.outputValueMeta=data.outputMeta.getValueMeta(data.keynr);
    }
 else {
      data.outputValueMeta=data.outputMeta.searchValueMeta(meta.getTargetField());
    }
  }
  Object sourceData=r[data.keynr];
  String source=data.sourceValueMeta.getCompatibleString(sourceData);
  String target=null;
  if (data.emptyFieldIndex >= 0 && (r[data.keynr] == null || Utils.isEmpty(source))) {
    target=meta.getTargetValue()[data.emptyFieldIndex];
  }
 else {
    if (!Utils.isEmpty(source)) {
      target=data.hashtable.get(source);
      if (nonMatchActivated && target == null) {
        target=meta.getNonMatchDefault();
      }
    }
  }
  if (!Utils.isEmpty(meta.getTargetField())) {
    r=RowDataUtil.resizeArray(r,data.outputMeta.size());
    if (!Utils.isEmpty(target)) {
      r[data.outputMeta.size() - 1]=target;
    }
 else {
      r[data.outputMeta.size() - 1]=null;
    }
  }
 else {
    if (target != null) {
      if (target.length() > 0) {
        if (data.sourceValueMeta.isString()) {
          r[data.keynr]=target;
        }
 else {
          r[data.keynr]=data.outputValueMeta.convertData(data.stringMeta,target);
        }
      }
 else {
        r[data.keynr]=null;
      }
    }
 else {
      if (data.sourceValueMeta.isStorageBinaryString()) {
        Object normal=data.sourceValueMeta.convertToNormalStorageType(r[data.keynr]);
        r[data.keynr]=normal;
      }
    }
  }
  putRow(data.outputMeta,r);
  return true;
}
