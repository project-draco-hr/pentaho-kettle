{
  assertEquals(0,meta.getUndoSize());
  meta.clearUndo();
  assertEquals(0,meta.getUndoSize());
  assertEquals(0,meta.getMaxUndo());
  meta.setMaxUndo(3);
  assertEquals(3,meta.getMaxUndo());
  assertNull(meta.viewThisUndo());
  assertNull(meta.viewPreviousUndo());
  assertNull(meta.viewNextUndo());
  assertNull(meta.previousUndo());
  assertNull(meta.nextUndo());
  StepMeta fromMeta=mock(StepMeta.class);
  StepMeta toMeta=mock(StepMeta.class);
  Object[] from=new Object[]{fromMeta};
  Object[] to=new Object[]{toMeta};
  int[] pos=new int[0];
  Point[] prev=new Point[0];
  Point[] curr=new Point[0];
  meta.addUndo(from,to,pos,prev,curr,AbstractMeta.TYPE_UNDO_NEW,false);
  assertNotNull(meta.viewThisUndo());
  assertNotNull(meta.viewPreviousUndo());
  assertNull(meta.viewNextUndo());
  meta.addUndo(from,to,pos,prev,curr,AbstractMeta.TYPE_UNDO_CHANGE,false);
  assertNotNull(meta.viewThisUndo());
  assertNotNull(meta.viewPreviousUndo());
  assertNull(meta.viewNextUndo());
  TransAction action=meta.previousUndo();
  assertNotNull(action);
  assertEquals(AbstractMeta.TYPE_UNDO_CHANGE,action.getType());
  assertNotNull(meta.viewThisUndo());
  assertNotNull(meta.viewPreviousUndo());
  assertNotNull(meta.viewNextUndo());
  meta.addUndo(from,to,pos,prev,curr,AbstractMeta.TYPE_UNDO_DELETE,false);
  meta.addUndo(from,to,pos,prev,curr,AbstractMeta.TYPE_UNDO_POSITION,false);
  assertNotNull(meta.previousUndo());
  assertNotNull(meta.nextUndo());
  meta.setMaxUndo(1);
  assertEquals(1,meta.getUndoSize());
  meta.addUndo(from,to,pos,prev,curr,AbstractMeta.TYPE_UNDO_NEW,false);
}
