{
  ClusterSchema clusterSchema=new ClusterSchema();
  RowMetaAndData row=getClusterSchema(id_cluster_schema);
  clusterSchema.setName(row.getString(Repository.FIELD_CLUSTER_NAME,null));
  clusterSchema.setBasePort(row.getString(Repository.FIELD_CLUSTER_BASE_PORT,null));
  clusterSchema.setSocketsBufferSize(row.getString(Repository.FIELD_CLUSTER_SOCKETS_BUFFER_SIZE,null));
  clusterSchema.setSocketsFlushInterval(row.getString(Repository.FIELD_CLUSTER_SOCKETS_FLUSH_INTERVAL,null));
  clusterSchema.setSocketsCompressed(row.getBoolean(Repository.FIELD_CLUSTER_SOCKETS_COMPRESSED,true));
  clusterSchema.setDynamic(row.getBoolean(Repository.FIELD_CLUSTER_DYNAMIC,true));
  long[] pids=repository.getSlaveIDs(id_cluster_schema);
  for (int i=0; i < pids.length; i++) {
    SlaveServer slaveServer=repository.loadSlaveServer(pids[i]);
    SlaveServer reference=SlaveServer.findSlaveServer(slaveServers,slaveServer.getName());
    if (reference != null)     clusterSchema.getSlaveServers().add(reference);
 else     clusterSchema.getSlaveServers().add(slaveServer);
  }
  return clusterSchema;
}
