{
  final JobMeta jobMeta=new JobMeta();
  jobMeta.setDatabases(databases);
  jobMeta.setFilename(null);
  jobMeta.setName(jobname);
  if (spoon.getRepository() != null) {
    jobMeta.setRepositoryDirectory(repdir);
  }
 else {
    jobMeta.setFilename(Const.createFilename(directory,jobname,"." + Const.STRING_JOB_DEFAULT_EXT));
  }
  spoon.refreshTree();
  spoon.refreshGraph();
  final Point location=new Point(50,50);
  final JobEntryCopy start=JobMeta.createStartEntry();
  start.setLocation(new Point(location.x,location.y));
  start.setDrawn();
  jobMeta.addJobEntry(start);
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        monitor.beginTask(BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.BuildingNewJob"),tables.length);
        monitor.worked(0);
        JobEntryCopy previous=start;
        for (int i=0; i < tables.length && !monitor.isCanceled(); i++) {
          monitor.setTaskName(BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.ProcessingTable") + tables[i] + "]...");
          String transname=BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Transname1") + sourceDbInfo + "].["+ tables[i]+ BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Transname2")+ targetDbInfo+ "]";
          TransMeta transMeta=new TransMeta((String)null,transname,null);
          if (repdir != null) {
            transMeta.setRepositoryDirectory(repdir);
          }
 else {
            transMeta.setFilename(Const.createFilename(directory,transname,"." + Const.STRING_TRANS_DEFAULT_EXT));
          }
          transMeta.addDatabase(sourceDbInfo);
          transMeta.addDatabase(targetDbInfo);
          String note=BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Note1") + tables[i] + BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Note2")+ sourceDbInfo+ "]"+ Const.CR;
          note+=BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Note3") + tables[i] + BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.Note4")+ targetDbInfo+ "]";
          NotePadMeta ni=new NotePadMeta(note,150,10,-1,-1);
          transMeta.addNote(ni);
          String fromstepname=BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.FromStep.Name") + tables[i] + "]";
          TableInputMeta tii=new TableInputMeta();
          tii.setDatabaseMeta(sourceDbInfo);
          tii.setSQL("SELECT * FROM " + tables[i]);
          String fromstepid=StepLoader.getInstance().getStepPluginID(tii);
          StepMeta fromstep=new StepMeta(fromstepid,fromstepname,tii);
          fromstep.setLocation(150,100);
          fromstep.setDraw(true);
          fromstep.setDescription(BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.FromStep.Description") + tables[i] + BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.FromStep.Description2")+ sourceDbInfo+ "]");
          transMeta.addStep(fromstep);
          String tostepname=BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.ToStep.Name") + tables[i] + "]";
          TableOutputMeta toi=new TableOutputMeta();
          toi.setDatabaseMeta(targetDbInfo);
          toi.setTablename(tables[i]);
          toi.setCommitSize(100);
          toi.setTruncateTable(true);
          String tostepid=StepLoader.getInstance().getStepPluginID(toi);
          StepMeta tostep=new StepMeta(tostepid,tostepname,toi);
          tostep.setLocation(500,100);
          tostep.setDraw(true);
          tostep.setDescription(BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.ToStep.Description1") + tables[i] + BaseMessages.getString(PKG,"Spoon.RipDB.Monitor.ToStep.Description2")+ targetDbInfo+ "]");
          transMeta.addStep(tostep);
          TransHopMeta hi=new TransHopMeta(fromstep,tostep);
          transMeta.addTransHop(hi);
          String tmpSql=tii.getSQL();
          tii.setSQL(tii.getSQL() + sourceDbInfo.getLimitClause(1));
          String sql="";
          try {
            sql=transMeta.getSQLStatementsString();
          }
 catch (          KettleStepException kse) {
            throw new InvocationTargetException(kse,BaseMessages.getString(PKG,"Spoon.RipDB.Exception.ErrorGettingSQLFromTransformation") + transMeta + "] : "+ kse.getMessage());
          }
          tii.setSQL(tmpSql);
          boolean ok;
          if (spoon.getRepository() != null) {
            ok=spoon.saveToRepository(transMeta);
          }
 else {
            ok=spoon.saveToFile(transMeta);
          }
          if (!ok) {
            throw new InvocationTargetException(new Exception(BaseMessages.getString(PKG,"Spoon.RipDB.Exception.UnableToSaveTransformationToRepository")),BaseMessages.getString(PKG,"Spoon.RipDB.Exception.UnableToSaveTransformationToRepository"));
          }
          location.x=250;
          if (i > 0)           location.y+=100;
          if (!Const.isEmpty(sql)) {
            String jesqlname=BaseMessages.getString(PKG,"Spoon.RipDB.JobEntrySQL.Name") + tables[i] + "]";
            JobEntrySQL jesql=new JobEntrySQL(jesqlname);
            jesql.setDatabase(targetDbInfo);
            jesql.setSQL(sql);
            jesql.setDescription(BaseMessages.getString(PKG,"Spoon.RipDB.JobEntrySQL.Description") + targetDbInfo + "].["+ tables[i]+ "]");
            JobEntryCopy jecsql=new JobEntryCopy();
            jecsql.setEntry(jesql);
            jecsql.setLocation(new Point(location.x,location.y));
            jecsql.setDrawn();
            jobMeta.addJobEntry(jecsql);
            JobHopMeta jhi=new JobHopMeta(previous,jecsql);
            jobMeta.addJobHop(jhi);
            previous=jecsql;
          }
          String jetransname=BaseMessages.getString(PKG,"Spoon.RipDB.JobEntryTrans.Name") + tables[i] + "]";
          JobEntryTrans jetrans=new JobEntryTrans(jetransname);
          jetrans.setTransname(transMeta.getName());
          if (spoon.getRepository() != null) {
            jetrans.setDirectory(transMeta.getRepositoryDirectory().getPath());
          }
 else {
            jetrans.setFileName(Const.createFilename("${" + Const.INTERNAL_VARIABLE_JOB_FILENAME_DIRECTORY + "}",transMeta.getName(),"." + Const.STRING_TRANS_DEFAULT_EXT));
          }
          JobEntryCopy jectrans=new JobEntryCopy(jetrans);
          jectrans.setDescription(BaseMessages.getString(PKG,"Spoon.RipDB.JobEntryTrans.Description1") + Const.CR + BaseMessages.getString(PKG,"Spoon.RipDB.JobEntryTrans.Description2")+ sourceDbInfo+ "].["+ tables[i]+ "]"+ Const.CR+ BaseMessages.getString(PKG,"Spoon.RipDB.JobEntryTrans.Description3")+ targetDbInfo+ "].["+ tables[i]+ "]");
          jectrans.setDrawn();
          location.x+=400;
          jectrans.setLocation(new Point(location.x,location.y));
          jobMeta.addJobEntry(jectrans);
          JobHopMeta jhi2=new JobHopMeta(previous,jectrans);
          jobMeta.addJobHop(jhi2);
          previous=jectrans;
          monitor.worked(1);
        }
        monitor.worked(100);
        monitor.done();
      }
 catch (      Exception e) {
        new ErrorDialog(spoon.getShell(),"Error","An unexpected error occurred!",e);
      }
    }
  }
;
  try {
    ProgressMonitorDialog pmd=new ProgressMonitorDialog(spoon.getShell());
    pmd.run(false,true,op);
  }
 catch (  InvocationTargetException e) {
    new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.ErrorDialog.RipDB.ErrorRippingTheDatabase.Title"),BaseMessages.getString(PKG,"Spoon.ErrorDialog.RipDB.ErrorRippingTheDatabase.Message"),e);
    return null;
  }
catch (  InterruptedException e) {
    new ErrorDialog(spoon.getShell(),BaseMessages.getString(PKG,"Spoon.ErrorDialog.RipDB.ErrorRippingTheDatabase.Title"),BaseMessages.getString(PKG,"Spoon.ErrorDialog.RipDB.ErrorRippingTheDatabase.Message"),e);
    return null;
  }
 finally {
    spoon.refreshGraph();
    spoon.refreshTree();
  }
  return jobMeta;
}
