{
  Result result=previousResult;
  List<RowMetaAndData> rows=result.getRows();
  result.setResult(false);
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.StartJobEntry"));
  }
  ArrayList<FileObject> myFileList=new ArrayList<FileObject>();
  if (copyprevious) {
    if (rows.size() == 0) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.ArgsFromPreviousNothing"));
      }
      result.setResult(true);
      return result;
    }
    try {
      RowMetaAndData resultRow=null;
      for (int iteration=0; iteration < rows.size(); iteration++) {
        resultRow=rows.get(iteration);
        String file_previous=resultRow.getString(0,null);
        if (!Utils.isEmpty(file_previous)) {
          FileObject file=KettleVFS.getFileObject(file_previous,this);
          if (!file.exists()) {
            logError(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FilefromPreviousNotFound",file_previous));
          }
 else {
            myFileList.add(file);
            if (log.isDebug()) {
              logDebug(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FilenameFromResult",file_previous));
            }
          }
        }
      }
    }
 catch (    Exception e) {
      logError(BaseMessages.getString(PKG,"JobSFTPPUT.Error.ArgFromPrevious"));
      result.setNrErrors(1);
      myFileList=null;
      return result;
    }
  }
  if (copypreviousfiles) {
    List<ResultFile> resultFiles=result.getResultFilesList();
    if (resultFiles == null || resultFiles.size() == 0) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.ArgsFromPreviousNothingFiles"));
      }
      result.setResult(true);
      return result;
    }
    try {
      for (Iterator<ResultFile> it=resultFiles.iterator(); it.hasNext() && !parentJob.isStopped(); ) {
        ResultFile resultFile=it.next();
        FileObject file=resultFile.getFile();
        if (file != null) {
          if (!file.exists()) {
            logError(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FilefromPreviousNotFound",file.toString()));
          }
 else {
            myFileList.add(file);
            if (log.isDebug()) {
              logDebug(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FilenameFromResult",file.toString()));
            }
          }
        }
      }
    }
 catch (    Exception e) {
      logError(BaseMessages.getString(PKG,"JobSFTPPUT.Error.ArgFromPrevious"));
      result.setNrErrors(1);
      myFileList=null;
      return result;
    }
  }
  SFTPClient sftpclient=null;
  String realServerName=environmentSubstitute(serverName);
  String realServerPort=environmentSubstitute(serverPort);
  String realUsername=environmentSubstitute(userName);
  String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
  String realSftpDirString=environmentSubstitute(sftpDirectory);
  String realWildcard=environmentSubstitute(wildcard);
  String realLocalDirectory=environmentSubstitute(localDirectory);
  String realKeyFilename=null;
  String realPassPhrase=null;
  String realDestinationFolder=environmentSubstitute(getDestinationFolder());
  try {
    if (getAfterFTPS() == AFTER_FTPSPUT_MOVE) {
      if (Utils.isEmpty(realDestinationFolder)) {
        logError(BaseMessages.getString(PKG,"JobSSH2PUT.Log.DestinatFolderMissing"));
        result.setNrErrors(1);
        return result;
      }
 else {
        FileObject folder=null;
        try {
          folder=KettleVFS.getFileObject(realDestinationFolder,this);
          if (!folder.exists()) {
            if (createDestinationFolder) {
              folder.createFolder();
            }
 else {
              logError(BaseMessages.getString(PKG,"JobSSH2PUT.Log.DestinatFolderNotExist",realDestinationFolder));
              result.setNrErrors(1);
              return result;
            }
          }
          realDestinationFolder=KettleVFS.getFilename(folder);
        }
 catch (        Exception e) {
          throw new KettleException(e);
        }
 finally {
          if (folder != null) {
            try {
              folder.close();
            }
 catch (            Exception e) {
            }
          }
        }
      }
    }
    if (isUseKeyFile()) {
      realKeyFilename=environmentSubstitute(getKeyFilename());
      if (Utils.isEmpty(realKeyFilename)) {
        logError(BaseMessages.getString(PKG,"JobSFTP.Error.KeyFileMissing"));
        result.setNrErrors(1);
        return result;
      }
      if (!KettleVFS.fileExists(realKeyFilename)) {
        logError(BaseMessages.getString(PKG,"JobSFTP.Error.KeyFileNotFound"));
        result.setNrErrors(1);
        return result;
      }
      realPassPhrase=environmentSubstitute(getKeyPassPhrase());
    }
    sftpclient=new SFTPClient(InetAddress.getByName(realServerName),Const.toInt(realServerPort,22),realUsername,realKeyFilename,realPassPhrase);
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.OpenedConnection",realServerName,"" + realServerPort,realUsername));
    }
    sftpclient.setCompression(getCompression());
    String realProxyHost=environmentSubstitute(getProxyHost());
    if (!Utils.isEmpty(realProxyHost)) {
      sftpclient.setProxy(realProxyHost,environmentSubstitute(getProxyPort()),environmentSubstitute(getProxyUsername()),environmentSubstitute(getProxyPassword()),getProxyType());
    }
    sftpclient.login(realPassword);
    if (!Utils.isEmpty(realSftpDirString)) {
      boolean existfolder=sftpclient.folderExists(realSftpDirString);
      if (!existfolder) {
        if (!isCreateRemoteFolder()) {
          throw new KettleException(BaseMessages.getString(PKG,"JobSFTPPUT.Error.CanNotFindRemoteFolder",realSftpDirString));
        }
        if (log.isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Error.CanNotFindRemoteFolder",realSftpDirString));
        }
        sftpclient.createFolder(realSftpDirString);
        if (log.isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.RemoteFolderCreated",realSftpDirString));
        }
      }
      sftpclient.chdir(realSftpDirString);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.ChangedDirectory",realSftpDirString));
      }
    }
    if (!copyprevious && !copypreviousfiles) {
      myFileList=new ArrayList<FileObject>();
      FileObject localFiles=KettleVFS.getFileObject(realLocalDirectory,this);
      FileObject[] children=localFiles.getChildren();
      if (children != null) {
        for (int i=0; i < children.length; i++) {
          if (children[i].getType().equals(FileType.FILE)) {
            myFileList.add(children[i]);
          }
        }
      }
    }
    if (myFileList == null || myFileList.size() == 0) {
      if (isSuccessWhenNoFile()) {
        if (isBasic()) {
          logBasic(BaseMessages.getString(PKG,"JobSFTPPUT.Error.NoFileToSend"));
        }
      }
 else {
        logError(BaseMessages.getString(PKG,"JobSFTPPUT.Error.NoFileToSend"));
        result.setNrErrors(1);
        return result;
      }
    }
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.RowsFromPreviousResult",myFileList.size()));
    }
    Pattern pattern=null;
    if (!copyprevious && !copypreviousfiles) {
      if (!Utils.isEmpty(realWildcard)) {
        pattern=Pattern.compile(realWildcard);
      }
    }
    Iterator<FileObject> it=myFileList.iterator();
    while (it.hasNext() && !parentJob.isStopped()) {
      FileObject myFile=it.next();
      try {
        String localFilename=myFile.toString();
        String destinationFilename=myFile.getName().getBaseName();
        boolean getIt=true;
        if (pattern != null) {
          Matcher matcher=pattern.matcher(destinationFilename);
          getIt=matcher.matches();
        }
        if (getIt) {
          if (log.isDebug()) {
            logDebug(BaseMessages.getString(PKG,"JobSFTPPUT.Log.PuttingFile",localFilename,realSftpDirString));
          }
          sftpclient.put(myFile,destinationFilename);
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.TransferedFile",localFilename));
          }
switch (getAfterFTPS()) {
case AFTER_FTPSPUT_DELETE:
            myFile.delete();
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.DeletedFile",localFilename));
          }
        break;
case AFTER_FTPSPUT_MOVE:
      FileObject destination=null;
    try {
      destination=KettleVFS.getFileObject(realDestinationFolder + Const.FILE_SEPARATOR + myFile.getName().getBaseName(),this);
      myFile.moveTo(destination);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FileMoved",myFile,destination));
      }
    }
  finally {
      if (destination != null) {
        destination.close();
      }
    }
  break;
default :
if (addFilenameResut) {
  ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,myFile,parentJob.getJobname(),toString());
  result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobSFTPPUT.Log.FilenameAddedToResultFilenames",localFilename));
  }
}
break;
}
}
}
  finally {
if (myFile != null) {
myFile.close();
}
}
}
result.setResult(true);
}
 catch (Exception e) {
result.setNrErrors(1);
logError(BaseMessages.getString(PKG,"JobSFTPPUT.Exception",e.getMessage()));
logError(Const.getStackTracker(e));
}
 finally {
try {
if (sftpclient != null) {
sftpclient.disconnect();
}
}
 catch (Exception e) {
}
myFileList=null;
}
return result;
}
