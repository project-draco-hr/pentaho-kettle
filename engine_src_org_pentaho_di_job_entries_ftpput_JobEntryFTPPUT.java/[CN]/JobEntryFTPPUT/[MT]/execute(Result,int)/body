{
  Result result=previousResult;
  result.setResult(false);
  long filesput=0;
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.Starting"));
  }
  String realServerName=environmentSubstitute(serverName);
  String realServerPort=environmentSubstitute(serverPort);
  String realUsername=environmentSubstitute(userName);
  String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
  String realRemoteDirectory=environmentSubstitute(remoteDirectory);
  String realWildcard=environmentSubstitute(wildcard);
  String realLocalDirectory=environmentSubstitute(localDirectory);
  FTPClient ftpclient=null;
  try {
    ftpclient=new PDIFTPClient(log);
    ftpclient.setRemoteAddr(InetAddress.getByName(realServerName));
    if (!Const.isEmpty(realServerPort)) {
      ftpclient.setRemotePort(Const.toInt(realServerPort,21));
    }
    if (!Const.isEmpty(proxyHost)) {
      String realProxy_host=environmentSubstitute(proxyHost);
      ftpclient.setRemoteAddr(InetAddress.getByName(realProxy_host));
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPPUT.OpenedProxyConnectionOn",realProxy_host));
      }
      int port=Const.toInt(environmentSubstitute(proxyPort),21);
      if (port != 0) {
        ftpclient.setRemotePort(port);
      }
    }
 else {
      ftpclient.setRemoteAddr(InetAddress.getByName(realServerName));
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPPUT.OpenConnection",realServerName));
      }
    }
    if (activeConnection) {
      ftpclient.setConnectMode(FTPConnectMode.ACTIVE);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.SetActiveConnection"));
      }
    }
 else {
      ftpclient.setConnectMode(FTPConnectMode.PASV);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.SetPassiveConnection"));
      }
    }
    if (timeout > 0) {
      ftpclient.setTimeout(timeout);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.SetTimeout","" + timeout));
      }
    }
    ftpclient.setControlEncoding(controlEncoding);
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.SetEncoding",controlEncoding));
    }
    if (!Const.isEmpty(socksProxyHost)) {
      if (!Const.isEmpty(socksProxyPort)) {
        FTPClient.initSOCKS(environmentSubstitute(socksProxyPort),environmentSubstitute(socksProxyHost));
      }
 else {
        throw new FTPException(BaseMessages.getString(PKG,"JobFTPPUT.SocksProxy.PortMissingException",environmentSubstitute(socksProxyHost)));
      }
      if (!Const.isEmpty(socksProxyUsername) && Const.isEmpty(socksProxyPassword) || Const.isEmpty(socksProxyUsername) && !Const.isEmpty(socksProxyPassword)) {
        throw new FTPException(BaseMessages.getString(PKG,"JobFTPPUT.SocksProxy.IncompleteCredentials",environmentSubstitute(socksProxyHost),getName()));
      }
    }
    ftpclient.connect();
    ftpclient.login(realUsername,realPassword);
    if (binaryMode) {
      ftpclient.setType(FTPTransferType.BINARY);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.BinaryMode"));
      }
    }
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.Logged",realUsername));
    }
    this.hookInOtherParsers(ftpclient);
    if (!Const.isEmpty(realRemoteDirectory)) {
      ftpclient.chdir(realRemoteDirectory);
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.ChangedDirectory",realRemoteDirectory));
      }
    }
    if (realLocalDirectory.startsWith("file:")) {
      realLocalDirectory=new URI(realLocalDirectory).getPath();
    }
    final List<String> files;
    File localFiles=new File(realLocalDirectory);
    File[] children=localFiles.listFiles();
    if (children == null) {
      files=Collections.emptyList();
    }
 else {
      files=new ArrayList<String>(children.length);
      for (      File child : children) {
        if (!child.isDirectory()) {
          files.add(child.getName());
        }
      }
    }
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.FoundFileLocalDirectory","" + files.size(),realLocalDirectory));
    }
    Pattern pattern=null;
    if (!Const.isEmpty(realWildcard)) {
      pattern=Pattern.compile(realWildcard);
    }
    for (    String file : files) {
      if (parentJob.isStopped()) {
        break;
      }
      boolean toBeProcessed=true;
      if (pattern != null) {
        Matcher matcher=pattern.matcher(file);
        toBeProcessed=matcher.matches();
      }
      if (toBeProcessed) {
        boolean fileExist=false;
        try {
          fileExist=ftpclient.exists(file);
        }
 catch (        Exception e) {
        }
        if (log.isDebug()) {
          if (fileExist) {
            logDebug(BaseMessages.getString(PKG,"JobFTPPUT.Log.FileExists",file));
          }
 else {
            logDebug(BaseMessages.getString(PKG,"JobFTPPUT.Log.FileDoesNotExists",file));
          }
        }
        if (!fileExist || (!onlyPuttingNewFiles && fileExist)) {
          if (log.isDebug()) {
            logDebug(BaseMessages.getString(PKG,"JobFTPPUT.Log.PuttingFileToRemoteDirectory",file,realRemoteDirectory));
          }
          String localFilename=realLocalDirectory + Const.FILE_SEPARATOR + file;
          ftpclient.put(localFilename,file);
          filesput++;
          if (remove) {
            new File(localFilename).delete();
            if (log.isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobFTPPUT.Log.DeletedFile",localFilename));
            }
          }
        }
      }
    }
    result.setResult(true);
    if (log.isDetailed()) {
      logDebug(BaseMessages.getString(PKG,"JobFTPPUT.Log.WeHavePut","" + filesput));
    }
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    logError(BaseMessages.getString(PKG,"JobFTPPUT.Log.ErrorPuttingFiles",e.getMessage()));
    logError(Const.getStackTracker(e));
  }
 finally {
    if (ftpclient != null && ftpclient.connected()) {
      try {
        ftpclient.quit();
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"JobFTPPUT.Log.ErrorQuitingFTP",e.getMessage()));
      }
    }
    FTPClient.clearSOCKS();
  }
  return result;
}
