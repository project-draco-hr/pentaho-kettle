{
  KettleClientEnvironment.init();
  dbMap.put(DatabaseInterface.class,DBMockIface.class.getName());
  dbMap.put(InfobrightDatabaseMeta.class,InfobrightDatabaseMeta.class.getName());
  PluginRegistry preg=PluginRegistry.getInstance();
  PluginInterface mockDbPlugin=mock(PluginInterface.class);
  when(mockDbPlugin.matches(anyString())).thenReturn(true);
  when(mockDbPlugin.isNativePlugin()).thenReturn(true);
  when(mockDbPlugin.getMainType()).thenAnswer(new Answer<Class<?>>(){
    @Override public Class<?> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabaseInterface.class;
    }
  }
);
  when(mockDbPlugin.getPluginType()).thenAnswer(new Answer<Class<? extends PluginTypeInterface>>(){
    @Override public Class<? extends PluginTypeInterface> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabasePluginType.class;
    }
  }
);
  when(mockDbPlugin.getIds()).thenReturn(new String[]{"Oracle","mock-db-id"});
  when(mockDbPlugin.getName()).thenReturn("mock-db-name");
  when(mockDbPlugin.getClassMap()).thenReturn(dbMap);
  preg.registerPlugin(DatabasePluginType.class,mockDbPlugin);
}
