{
  PluginRegistry.getInstance().registerPluginType(ValueMetaPluginType.class);
  Map<Class<?>,String> classes=new HashMap<Class<?>,String>();
  classes.put(ValueMetaInterface.class,"org.pentaho.di.core.row.value.ValueMetaString");
  Plugin p1=new Plugin(new String[]{"2"},ValueMetaPluginType.class,ValueMetaInterface.class,"","","","",false,true,classes,null,null,null);
  classes=new HashMap<Class<?>,String>();
  classes.put(ValueMetaInterface.class,"org.pentaho.di.core.row.value.ValueMetaInteger");
  Plugin p2=new Plugin(new String[]{"5"},ValueMetaPluginType.class,ValueMetaInterface.class,"","","","",false,true,classes,null,null,null);
  PluginRegistry.getInstance().registerPlugin(ValueMetaPluginType.class,p1);
  PluginRegistry.getInstance().registerPlugin(ValueMetaPluginType.class,p2);
  KettleLogStore.init();
  dbMap.put(DatabaseInterface.class,DBMockIface.class.getName());
  dbMap.put(InfobrightDatabaseMeta.class,InfobrightDatabaseMeta.class.getName());
  PluginRegistry preg=PluginRegistry.getInstance();
  PluginInterface mockDbPlugin=mock(PluginInterface.class);
  when(mockDbPlugin.matches(anyString())).thenReturn(true);
  when(mockDbPlugin.isNativePlugin()).thenReturn(true);
  when(mockDbPlugin.getMainType()).thenAnswer(new Answer<Class<?>>(){
    @Override public Class<?> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabaseInterface.class;
    }
  }
);
  when(mockDbPlugin.getPluginType()).thenAnswer(new Answer<Class<? extends PluginTypeInterface>>(){
    @Override public Class<? extends PluginTypeInterface> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabasePluginType.class;
    }
  }
);
  when(mockDbPlugin.getIds()).thenReturn(new String[]{"Oracle","mock-db-id"});
  when(mockDbPlugin.getName()).thenReturn("mock-db-name");
  when(mockDbPlugin.getClassMap()).thenReturn(dbMap);
  preg.registerPlugin(DatabasePluginType.class,mockDbPlugin);
}
