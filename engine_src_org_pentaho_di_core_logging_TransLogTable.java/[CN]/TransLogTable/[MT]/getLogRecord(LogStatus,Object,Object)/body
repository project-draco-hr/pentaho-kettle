{
  if (subject == null || subject instanceof Trans) {
    Trans trans=(Trans)subject;
    Result result=null;
    if (trans != null)     result=trans.getResult();
    RowMetaAndData row=new RowMetaAndData();
    for (    LogTableField field : fields) {
      if (field.isEnabled()) {
        Object value=null;
        if (trans != null) {
switch (ID.valueOf(field.getId())) {
case ID_BATCH:
            value=new Long(trans.getBatchId());
          break;
case CHANNEL_ID:
        value=trans.getLogChannelId();
      break;
case TRANSNAME:
    value=trans.getName();
  break;
case STATUS:
value=status.getStatus();
break;
case LINES_READ:
value=new Long(result.getNrLinesRead());
break;
case LINES_WRITTEN:
value=new Long(result.getNrLinesWritten());
break;
case LINES_INPUT:
value=new Long(result.getNrLinesInput());
break;
case LINES_OUTPUT:
value=new Long(result.getNrLinesOutput());
break;
case LINES_UPDATED:
value=new Long(result.getNrLinesUpdated());
break;
case LINES_REJECTED:
value=new Long(result.getNrLinesRejected());
break;
case ERRORS:
value=new Long(result.getNrErrors());
break;
case STARTDATE:
value=trans.getStartDate();
break;
case LOGDATE:
value=trans.getLogDate();
break;
case ENDDATE:
value=trans.getEndDate();
break;
case DEPDATE:
value=trans.getDepDate();
break;
case REPLAYDATE:
value=trans.getCurrentDate();
break;
case LOG_FIELD:
value=getLogBuffer(trans,trans.getLogChannelId(),status,logSizeLimit);
break;
case EXECUTING_SERVER:
value=trans.getExecutingServer();
break;
case EXECUTING_USER:
value=trans.getExecutingUser();
break;
case CLIENT:
value=KettleClientEnvironment.getInstance().getClient() != null ? KettleClientEnvironment.getInstance().getClient().toString() : "unknown";
break;
}
}
row.addValue(field.getFieldName(),field.getDataType(),value);
row.getRowMeta().getValueMeta(row.size() - 1).setLength(field.getLength());
}
}
return row;
}
 else {
return null;
}
}
