{
  for (int i=0; i < meta.getValidations().length; i++) {
    Validation field=meta.getValidations()[i];
    int valueIndex=data.fieldIndexes[i];
    ValueMetaInterface validatorMeta=data.constantsMeta[i];
    ValueMetaInterface valueMeta=inputRowMeta.getValueMeta(valueIndex);
    Object valueData=r[valueIndex];
    boolean isNull=valueMeta.isNull(valueData);
    if (!field.isNullAllowed() && isNull) {
      throw new KettleValidatorException(field,KettleValidatorException.ERROR_NULL_VALUE_NOT_ALLOWED,Messages.getString("Validator.Exception.NullNotAllowed",field.getFieldName(),inputRowMeta.getString(r)),field.getFieldName());
    }
    if (field.isOnlyNullAllowed() && !isNull) {
      throw new KettleValidatorException(field,KettleValidatorException.ERROR_ONLY_NULL_VALUE_ALLOWED,Messages.getString("Validator.Exception.OnlyNullAllowed",field.getFieldName(),inputRowMeta.getString(r)),field.getFieldName());
    }
    if (field.isOnlyNumericAllowed()) {
    }
    if (field.isDataTypeVerified() && field.getDataType() != ValueMetaInterface.TYPE_NONE) {
      if (field.getDataType() != valueMeta.getType()) {
        throw new KettleValidatorException(field,KettleValidatorException.ERROR_UNEXPECTED_DATA_TYPE,Messages.getString("Validator.Exception.UnexpectedDataType",field.getFieldName(),valueMeta.toStringMeta(),validatorMeta.toStringMeta()),field.getFieldName());
      }
    }
    if (!isNull) {
      if (field.getMinimumLength() >= 0 || field.getMaximumLength() >= 0 || data.minimumValue[i] != null || data.maximumValue[i] != null || data.listValues[i].length > 0 || !Const.isEmpty(field.getStartString()) || !Const.isEmpty(field.getEndString()) || !Const.isEmpty(field.getStartStringNotAllowed()) || !Const.isEmpty(field.getStartStringNotAllowed()) || field.isOnlyNumericAllowed() || data.patternExpected[i] != null || data.patternDisallowed[i] != null) {
        String stringValue=valueMeta.getString(valueData);
        if (field.getMinimumLength() >= 0 && stringValue.length() < field.getMinimumLength()) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_SHORTER_THAN_MINIMUM_LENGTH,Messages.getString("Validator.Exception.ShorterThanMininumLength",field.getFieldName(),valueMeta.getString(valueData),Integer.toString(stringValue.length()),Integer.toString(field.getMinimumLength())),field.getFieldName());
        }
        if (field.getMaximumLength() >= 0 && stringValue.length() > field.getMaximumLength()) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_LONGER_THAN_MAXIMUM_LENGTH,Messages.getString("Validator.Exception.LongerThanMaximumLength",field.getFieldName(),valueMeta.getString(valueData),Integer.toString(stringValue.length()),Integer.toString(field.getMaximumLength())),field.getFieldName());
        }
        if (data.minimumValue[i] != null && valueMeta.compare(valueData,validatorMeta,data.minimumValue[i]) < 0) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_LOWER_THAN_ALLOWED_MINIMUM,Messages.getString("Validator.Exception.LowerThanMinimumValue",field.getFieldName(),valueMeta.getString(valueData),data.constantsMeta[i].getString(data.minimumValue[i])),field.getFieldName());
        }
        if (data.maximumValue[i] != null && valueMeta.compare(valueData,validatorMeta,data.maximumValue[i]) > 0) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_HIGHER_THAN_ALLOWED_MAXIMUM,Messages.getString("Validator.Exception.HigherThanMaximumValue",field.getFieldName(),valueMeta.getString(valueData),data.constantsMeta[i].getString(data.maximumValue[i])),field.getFieldName());
        }
        boolean found=data.listValues[i].length == 0;
        for (        Object object : data.listValues[i]) {
          if (object != null && data.listValues[i] != null && valueMeta.compare(valueData,validatorMeta,object) == 0) {
            found=true;
          }
        }
        if (!found) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_VALUE_NOT_IN_LIST,Messages.getString("Validator.Exception.NotInList",field.getFieldName(),valueMeta.getString(valueData)),field.getFieldName());
        }
        if (field.isOnlyNumericAllowed()) {
          if (valueMeta.isNumeric() || !containsOnlyDigits(valueMeta.getString(valueData))) {
            throw new KettleValidatorException(field,KettleValidatorException.ERROR_NON_NUMERIC_DATA,Messages.getString("Validator.Exception.NonNumericDataNotAllowed",field.getFieldName(),valueMeta.toStringMeta()),field.getFieldName());
          }
        }
        if (!Const.isEmpty(field.getStartString()) && !stringValue.startsWith(field.getStartString())) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_DOES_NOT_START_WITH_STRING,Messages.getString("Validator.Exception.DoesNotStartWithString",field.getFieldName(),valueMeta.getString(valueData),field.getStartString()),field.getFieldName());
        }
        if (!Const.isEmpty(field.getEndString()) && !stringValue.endsWith(field.getEndString())) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_DOES_NOT_END_WITH_STRING,Messages.getString("Validator.Exception.DoesNotStartWithString",field.getFieldName(),valueMeta.getString(valueData),field.getEndString()),field.getFieldName());
        }
        if (!Const.isEmpty(field.getStartStringNotAllowed()) && stringValue.startsWith(field.getStartStringNotAllowed())) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_STARTS_WITH_STRING,Messages.getString("Validator.Exception.StartsWithString",field.getFieldName(),valueMeta.getString(valueData),field.getStartStringNotAllowed()),field.getFieldName());
        }
        if (!Const.isEmpty(field.getEndStringNotAllowed()) && !stringValue.endsWith(field.getEndStringNotAllowed())) {
          throw new KettleValidatorException(field,KettleValidatorException.ERROR_ENDS_WITH_STRING,Messages.getString("Validator.Exception.EndsWithString",field.getFieldName(),valueMeta.getString(valueData),field.getEndStringNotAllowed()),field.getFieldName());
        }
        if (data.patternExpected[i] != null) {
          Matcher matcher=data.patternExpected[i].matcher(stringValue);
          if (!matcher.matches()) {
            throw new KettleValidatorException(field,KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_EXPECTED,Messages.getString("Validator.Exception.MatchingRegExpExpected",field.getFieldName(),valueMeta.getString(valueData),field.getRegularExpression()),field.getFieldName());
          }
        }
        if (data.patternDisallowed[i] != null) {
          Matcher matcher=data.patternDisallowed[i].matcher(stringValue);
          if (matcher.matches()) {
            throw new KettleValidatorException(field,KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_NOT_ALLOWED,Messages.getString("Validator.Exception.MatchingRegExpNotAllowed",field.getFieldName(),valueMeta.getString(valueData),field.getRegularExpressionNotAllowed()),field.getFieldName());
          }
        }
      }
    }
  }
}
