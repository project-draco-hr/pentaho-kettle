{
  meta=(ValidatorMeta)smi;
  data=(ValidatorData)sdi;
  if (super.init(smi,sdi)) {
    data.constantsMeta=new ValueMetaInterface[meta.getValidations().size()];
    data.minimumValue=new Object[meta.getValidations().size()];
    data.maximumValue=new Object[meta.getValidations().size()];
    data.listValues=new Object[meta.getValidations().size()][];
    data.patternExpected=new Pattern[meta.getValidations().size()];
    data.patternDisallowed=new Pattern[meta.getValidations().size()];
    for (int i=0; i < meta.getValidations().size(); i++) {
      Validation field=meta.getValidations().get(i);
      data.constantsMeta[i]=new ValueMeta(field.getFieldName(),field.getDataType());
      data.constantsMeta[i].setConversionMask(field.getConversionMask());
      data.constantsMeta[i].setDecimalSymbol(field.getDecimalSymbol());
      data.constantsMeta[i].setGroupingSymbol(field.getGroupingSymbol());
      ValueMetaInterface stringMeta=data.constantsMeta[i].clone();
      stringMeta.setType(ValueMetaInterface.TYPE_STRING);
      try {
        data.minimumValue[i]=Const.isEmpty(field.getMinimumValue()) ? null : data.constantsMeta[i].convertData(stringMeta,field.getMinimumValue());
        data.maximumValue[i]=Const.isEmpty(field.getMaximumValue()) ? null : data.constantsMeta[i].convertData(stringMeta,field.getMaximumValue());
        int listSize=field.getAllowedValues() != null ? field.getAllowedValues().length : 0;
        data.listValues[i]=new Object[listSize];
        for (int s=0; s < listSize; s++) {
          data.listValues[i][s]=Const.isEmpty(field.getAllowedValues()[s]) ? null : data.constantsMeta[i].convertData(stringMeta,field.getAllowedValues()[s]);
        }
      }
 catch (      KettleValueException e) {
        if (field.getDataType() == ValueMetaInterface.TYPE_NONE) {
          logError(BaseMessages.getString(PKG,"Validator.Exception.SpecifyDataType"),e);
        }
 else {
          logError(BaseMessages.getString(PKG,"Validator.Exception.DataConversionErrorEncountered"),e);
        }
        return false;
      }
      if (!Const.isEmpty(field.getRegularExpression())) {
        data.patternExpected[i]=Pattern.compile(field.getRegularExpression());
      }
      if (!Const.isEmpty(field.getRegularExpressionNotAllowed())) {
        data.patternDisallowed[i]=Pattern.compile(field.getRegularExpressionNotAllowed());
      }
    }
    return true;
  }
  return false;
}
