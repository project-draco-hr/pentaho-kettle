{
  meta=(ValidatorMeta)smi;
  data=(ValidatorData)sdi;
  if (super.init(smi,sdi)) {
    data.constantsMeta=new ValueMetaInterface[meta.getValidatorField().length];
    for (int i=0; i < data.constantsMeta.length; i++) {
      ValidatorField field=meta.getValidatorField()[i];
      data.constantsMeta[i]=new ValueMeta(field.getName(),field.getDataType());
      data.constantsMeta[i].setConversionMask(field.getConversionMask());
      data.constantsMeta[i].setDecimalSymbol(field.getDecimalSymbol());
      data.constantsMeta[i].setGroupingSymbol(field.getGroupingSymbol());
      ValueMetaInterface stringMeta=data.constantsMeta[i].clone();
      stringMeta.setType(ValueMetaInterface.TYPE_STRING);
      try {
        data.minimumValue[i]=data.constantsMeta[i].convertData(stringMeta,field.getMinimumValue());
        data.maximumValue[i]=data.constantsMeta[i].convertData(stringMeta,field.getMaximumValue());
        int listSize=field.getAllowedValues() != null ? field.getAllowedValues().length : 0;
        data.listValues[i]=new Object[listSize];
        for (int s=0; s < listSize; s++) {
          data.listValues[i][s]=data.constantsMeta[i].convertData(stringMeta,field.getAllowedValues()[s]);
        }
      }
 catch (      KettleValueException e) {
        logError(Messages.getString("Validator.Exception.DataConversionErrorEncountered"),e);
        return false;
      }
    }
    return true;
  }
  return false;
}
