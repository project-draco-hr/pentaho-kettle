{
  try {
    String commit, csize;
    schemaName=XMLHandler.getTagValue(stepnode,"schema");
    tablename=XMLHandler.getTagValue(stepnode,"table");
    String con=XMLHandler.getTagValue(stepnode,"connection");
    databaseMeta=DatabaseMeta.findDatabase(databases,con);
    commit=XMLHandler.getTagValue(stepnode,"commit");
    commitSize=Const.toInt(commit,0);
    csize=XMLHandler.getTagValue(stepnode,"cache_size");
    cacheSize=Const.toInt(csize,0);
    replaceFields="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"replace"));
    useHash="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"crc"));
    hashField=XMLHandler.getTagValue(stepnode,"crcfield");
    Node keys=XMLHandler.getSubNode(stepnode,"fields");
    int nrkeys=XMLHandler.countNodes(keys,"key");
    allocate(nrkeys);
    for (int i=0; i < nrkeys; i++) {
      Node knode=XMLHandler.getSubNodeByNr(keys,"key",i);
      keyField[i]=XMLHandler.getTagValue(knode,"name");
      keyLookup[i]=XMLHandler.getTagValue(knode,"lookup");
    }
    sequenceFrom=XMLHandler.getTagValue(stepnode,"sequence");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    Node retkey=XMLHandler.getSubNode(fields,"return");
    technicalKeyField=XMLHandler.getTagValue(retkey,"name");
    useAutoinc=!"N".equalsIgnoreCase(XMLHandler.getTagValue(retkey,"use_autoinc"));
    lastUpdateField=XMLHandler.getTagValue(stepnode,"last_update_field");
    setTechKeyCreation(XMLHandler.getTagValue(retkey,"creation_method"));
  }
 catch (  Exception e) {
    throw new KettleXMLException(Messages.getString("CombinationLookupMeta.Exception.UnableToLoadStepInfo"),e);
  }
}
