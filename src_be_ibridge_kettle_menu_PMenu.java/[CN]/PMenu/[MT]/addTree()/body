{
  SashForm leftsplit=new SashForm(sashform,SWT.VERTICAL);
  leftsplit.setLayout(new FillLayout());
  Composite cCSH=new Composite(leftsplit,SWT.NONE);
  cCSH.setLayout(new FillLayout());
  tCSH=new Tree(cCSH,SWT.MULTI | SWT.BORDER);
  tiConn=new TreeItem(tCSH,SWT.NONE);
  tiConn.setText(STRING_CONNECTIONS);
  tiStep=new TreeItem(tCSH,SWT.NONE);
  tiStep.setText(STRING_TABLES);
  tiTrns=new TreeItem(tCSH,SWT.NONE);
  tiTrns.setText(STRING_RELATIONSHIPS);
  tiConn.setExpanded(true);
  tiStep.setExpanded(false);
  tCSH.setBackground(GUIResource.getInstance().getColorBackground());
  lsNew=new Listener(){
    public void handleEvent(    Event e){
      newSelected();
    }
  }
;
  lsEdit=new Listener(){
    public void handleEvent(    Event e){
      editSelected();
    }
  }
;
  lsDupe=new Listener(){
    public void handleEvent(    Event e){
      dupeSelected();
    }
  }
;
  lsDel=new Listener(){
    public void handleEvent(    Event e){
      delSelected();
    }
  }
;
  lsSQL=new Listener(){
    public void handleEvent(    Event e){
      sqlSelected();
    }
  }
;
  lsCache=new Listener(){
    public void handleEvent(    Event e){
      clearDBCache();
    }
  }
;
  lsImport=new Listener(){
    public void handleEvent(    Event e){
      importTables();
    }
  }
;
  lsExpl=new Listener(){
    public void handleEvent(    Event e){
      exploreDB();
    }
  }
;
  lsEditDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSelected();
    }
  }
;
  lsEditSel=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setMenu(e);
    }
  }
;
  tCSH.addSelectionListener(lsEditDef);
  tCSH.addSelectionListener(lsEditSel);
  Transfer[] ttypes=new Transfer[]{TextTransfer.getInstance()};
  DragSource ddSource=new DragSource(tCSH,DND.DROP_MOVE | DND.DROP_COPY);
  ddSource.setTransfer(ttypes);
  ddSource.addDragListener(new DragSourceListener(){
    public void dragStart(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      TreeItem ti[]=tCSH.getSelection();
      String data=new String();
      for (int i=0; i < ti.length; i++) {
        data+=ti[i].getText() + Const.CR;
      }
      event.data=data;
    }
    public void dragFinished(    DragSourceEvent event){
    }
  }
);
  DropTarget dtCSH=new DropTarget(tCSH,DND.DROP_MOVE | DND.DROP_COPY);
  dtCSH.setTransfer(ttypes);
  dtCSH.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      StringTokenizer strtok=new StringTokenizer((String)event.data,Const.CR);
      while (strtok.hasMoreTokens()) {
        String source=strtok.nextToken();
        TreeItem target=(TreeItem)event.item;
        TreeItem parent=target.getParentItem();
        if (STRING_TABLES.equalsIgnoreCase(parent.getText())) {
          TableMeta fr=schema.findTable(source);
          TableMeta to=schema.findTable(target.getText());
          int idx_fr=schema.indexOfTable(fr);
          int idx_to=schema.indexOfTable(to);
          log.logBasic("DROP","idx_fr = " + idx_fr + ", idx_to="+ idx_to);
          if (idx_fr == idx_to)           return;
          if (idx_fr > idx_to) {
            schema.removeTable(idx_fr);
            schema.addTable(idx_to,fr);
          }
 else {
            schema.removeTable(idx_fr);
            schema.addTable(idx_to - 1,fr);
          }
          refreshTree();
        }
      }
    }
    public void dropAccept(    DropTargetEvent event){
    }
  }
);
  Composite cGroup=new Composite(leftsplit,SWT.NONE);
  cGroup.setLayout(new FillLayout());
  tGroup=new Tree(cGroup,SWT.MULTI | SWT.BORDER);
  TreeItem tiGroup=new TreeItem(tGroup,SWT.NONE);
  tiGroup.setText(STRING_GROUPS);
  leftsplit.setWeights(new int[]{50,50});
  DropTarget dtGroup=new DropTarget(tGroup,DND.DROP_MOVE | DND.DROP_COPY);
  dtGroup.setTransfer(ttypes);
  dtGroup.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
    }
    public void dropAccept(    DropTargetEvent event){
    }
  }
);
  tGroup.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      TreeItem ti[]=tGroup.getSelection();
      for (int i=0; i < ti.length; i++)       ti[i].setExpanded(!ti[i].getExpanded());
    }
    public void widgetSelected(    SelectionEvent e){
      setGroupMenu(e);
    }
  }
);
  tCSH.addKeyListener(defKeys);
  tCSH.addKeyListener(modKeys);
}
