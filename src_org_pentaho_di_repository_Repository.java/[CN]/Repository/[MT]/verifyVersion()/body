{
  RowMetaAndData lastUpgrade=null;
  try {
    lastUpgrade=database.getOneRow("SELECT " + quote(FIELD_VERSION_MAJOR_VERSION) + ", "+ quote(FIELD_VERSION_MINOR_VERSION)+ ", "+ quote(FIELD_VERSION_UPGRADE_DATE)+ " FROM "+ quote(TABLE_R_VERSION)+ " ORDER BY "+ quote(FIELD_VERSION_UPGRADE_DATE)+ " DESC");
  }
 catch (  Exception e) {
    try {
      database.getOneRow("SELECT * FROM " + quote(TABLE_R_USER));
      if (log.isBasic()) {
        log.logBasic(toString(),Messages.getString("Repository.Error.GettingInfoVersionTable",quote(TABLE_R_VERSION)));
        log.logBasic(toString(),Messages.getString("Repository.Error.NewTable"));
        log.logBasic(toString(),"Stack trace: " + Const.getStackTracker(e));
      }
      majorVersion=2;
      minorVersion=2;
      lastUpgrade=null;
    }
 catch (    Exception ex) {
      throw new KettleException(Messages.getString("Repository.NoRepositoryExists.Messages"));
    }
  }
  if (lastUpgrade != null) {
    majorVersion=(int)lastUpgrade.getInteger(FIELD_VERSION_MAJOR_VERSION,-1);
    minorVersion=(int)lastUpgrade.getInteger(FIELD_VERSION_MINOR_VERSION,-1);
  }
  if (majorVersion < REQUIRED_MAJOR_VERSION || (majorVersion == REQUIRED_MAJOR_VERSION && minorVersion < REQUIRED_MINOR_VERSION)) {
    throw new KettleException(Messages.getString("Repository.UpgradeRequired.Message",getVersion(),getRequiredVersion()));
  }
  if (majorVersion == 3 && minorVersion == 0) {
    String tableName=TABLE_R_TRANS_PARTITION_SCHEMA;
    String errorColumn="TRANSFORMATION";
    RowMetaInterface tableFields=database.getTableFields(tableName);
    if (tableFields.indexOfValue(errorColumn) >= 0) {
      throw new KettleException(Messages.getString("Repository.FixFor300Required.Message"));
    }
  }
}
