{
  try {
    acceptingFilenames=rep.getStepAttributeBoolean(id_step,"accept_filenames");
    passingThruFields=rep.getStepAttributeBoolean(id_step,"passing_through_fields");
    acceptingField=rep.getStepAttributeString(id_step,"accept_field");
    acceptingStepName=rep.getStepAttributeString(id_step,"accept_stepname");
    separator=rep.getStepAttributeString(id_step,"separator");
    enclosure=rep.getStepAttributeString(id_step,"enclosure");
    breakInEnclosureAllowed=rep.getStepAttributeBoolean(id_step,"enclosure_breaks");
    escapeCharacter=rep.getStepAttributeString(id_step,"escapechar");
    header=rep.getStepAttributeBoolean(id_step,"header");
    nrHeaderLines=(int)rep.getStepAttributeInteger(id_step,"nr_headerlines");
    footer=rep.getStepAttributeBoolean(id_step,"footer");
    nrFooterLines=(int)rep.getStepAttributeInteger(id_step,"nr_footerlines");
    lineWrapped=rep.getStepAttributeBoolean(id_step,"line_wrapped");
    nrWraps=(int)rep.getStepAttributeInteger(id_step,"nr_wraps");
    layoutPaged=rep.getStepAttributeBoolean(id_step,"layout_paged");
    nrLinesPerPage=(int)rep.getStepAttributeInteger(id_step,"nr_lines_per_page");
    nrLinesDocHeader=(int)rep.getStepAttributeInteger(id_step,"nr_lines_doc_header");
    noEmptyLines=rep.getStepAttributeBoolean(id_step,"noempty");
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberByFile=rep.getStepAttributeBoolean(id_step,"rownumByFile");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    fileFormat=rep.getStepAttributeString(id_step,"format");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    String addToResult=rep.getStepAttributeString(id_step,"add_to_result_filenames");
    if (Const.isEmpty(addToResult))     isaddresult=true;
 else     isaddresult=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    rowLimit=(int)rep.getStepAttributeInteger(id_step,"limit");
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    int nrfilters=rep.countNrStepAttributes(id_step,"filter_string");
    allocate(nrfiles,nrfields,nrfilters);
    for (int i=0; i < nrfiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i]))       fileRequired[i]=NO;
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i]))       includeSubFolders[i]=NO;
    }
    fileType=rep.getStepAttributeString(id_step,"file_type");
    fileCompression=rep.getStepAttributeString(id_step,"compression");
    if (fileCompression == null) {
      if (rep.getStepAttributeBoolean(id_step,"file_zipped"))       fileCompression="Zip";
    }
    for (int i=0; i < nrfilters; i++) {
      filter[i]=new TextFileFilter();
      filter[i].setFilterPosition((int)rep.getStepAttributeInteger(id_step,i,"filter_position"));
      filter[i].setFilterString(rep.getStepAttributeString(id_step,i,"filter_string"));
      filter[i].setFilterLastLine(rep.getStepAttributeBoolean(id_step,i,"filter_is_last_line"));
      filter[i].setFilterPositive(rep.getStepAttributeBoolean(id_step,i,"filter_is_positive"));
    }
    for (int i=0; i < nrfields; i++) {
      TextFileInputField field=new TextFileInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setNullString(rep.getStepAttributeString(id_step,i,"field_nullif"));
      field.setIfNullValue(rep.getStepAttributeString(id_step,i,"field_ifnull"));
      field.setPosition((int)rep.getStepAttributeInteger(id_step,i,"field_position"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(ValueMeta.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
    errorIgnored=rep.getStepAttributeBoolean(id_step,"error_ignored");
    errorLineSkipped=rep.getStepAttributeBoolean(id_step,"error_line_skipped");
    errorCountField=rep.getStepAttributeString(id_step,"error_count_field");
    errorFieldsField=rep.getStepAttributeString(id_step,"error_fields_field");
    errorTextField=rep.getStepAttributeString(id_step,"error_text_field");
    warningFilesDestinationDirectory=rep.getStepAttributeString(id_step,"bad_line_files_dest_dir");
    warningFilesExtension=rep.getStepAttributeString(id_step,"bad_line_files_ext");
    errorFilesDestinationDirectory=rep.getStepAttributeString(id_step,"error_line_files_dest_dir");
    errorFilesExtension=rep.getStepAttributeString(id_step,"error_line_files_ext");
    lineNumberFilesDestinationDirectory=rep.getStepAttributeString(id_step,"line_number_files_dest_dir");
    lineNumberFilesExtension=rep.getStepAttributeString(id_step,"line_number_files_ext");
    dateFormatLenient=rep.getStepAttributeBoolean(id_step,0,"date_format_lenient",true);
    String dateLocale=rep.getStepAttributeString(id_step,0,"date_format_locale");
    if (dateLocale != null) {
      dateFormatLocale=new Locale(dateLocale);
    }
 else {
      dateFormatLocale=Locale.getDefault();
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
