{
  if (allDatabaseInterfaces != null) {
    return allDatabaseInterfaces;
  }
  PluginRegistry registry=PluginRegistry.getInstance();
  List<PluginInterface> plugins=registry.getPlugins(DatabasePluginType.class);
  allDatabaseInterfaces=new HashMap<String,DatabaseInterface>();
  for (  PluginInterface plugin : plugins) {
    try {
      DatabaseInterface databaseInterface=(DatabaseInterface)registry.loadClass(plugin);
      databaseInterface.setPluginId(plugin.getIds()[0]);
      allDatabaseInterfaces.put(plugin.getIds()[0],databaseInterface);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error creating class for: " + plugin,e);
    }
  }
  return allDatabaseInterfaces;
}
