{
  int nrfields=wReturn.nrNonEmpty();
  inf.allocate(nrfields);
  inf.setMaxErrors(wMaxErrors.getText());
  inf.setCommitSize(wCommit.getText());
  inf.setBindSize(wBindSize.getText());
  inf.setReadSize(wReadSize.getText());
  inf.setDbNameOverride(wDbNameOverride.getText());
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"OraBulkLoaderDialog.Log.FoundFields","" + nrfields));
  for (int i=0; i < nrfields; i++) {
    TableItem item=wReturn.getNonEmpty(i);
    inf.getFieldTable()[i]=item.getText(1);
    inf.getFieldStream()[i]=item.getText(2);
    if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.DateMask.Label").equals(item.getText(3)))     inf.getDateMask()[i]=OraBulkLoaderMeta.DATE_MASK_DATE;
 else     if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.DateTimeMask.Label").equals(item.getText(3)))     inf.getDateMask()[i]=OraBulkLoaderMeta.DATE_MASK_DATETIME;
 else     inf.getDateMask()[i]="";
  }
  inf.setSchemaName(wSchema.getText());
  inf.setTableName(wTable.getText());
  inf.setDatabaseMeta(transMeta.findDatabase(wConnection.getText()));
  inf.setSqlldr(wSqlldr.getText());
  inf.setControlFile(wControlFile.getText());
  inf.setDataFile(wDataFile.getText());
  inf.setLogFile(wLogFile.getText());
  inf.setBadFile(wBadFile.getText());
  inf.setDiscardFile(wDiscardFile.getText());
  inf.setEncoding(wEncoding.getText());
  inf.setCharacterSetName(wCharacterSetName.getText());
  inf.setAltRecordTerm(wAltRecordTerm.getText());
  inf.setDirectPath(wDirectPath.getSelection());
  inf.setEraseFiles(wEraseFiles.getSelection());
  inf.setFailOnError(wFailOnError.getSelection());
  inf.setFailOnWarning(wFailOnWarning.getSelection());
  String method=wLoadMethod.getText();
  if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.AutoConcLoadMethod.Label").equals(method)) {
    inf.setLoadMethod(OraBulkLoaderMeta.METHOD_AUTO_CONCURRENT);
  }
 else   if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.AutoEndLoadMethod.Label").equals(method)) {
    inf.setLoadMethod(OraBulkLoaderMeta.METHOD_AUTO_END);
  }
 else   if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.ManualLoadMethod.Label").equals(method)) {
    inf.setLoadMethod(OraBulkLoaderMeta.METHOD_MANUAL);
  }
 else {
    if (log.isDebug())     logDebug("Internal error: load_method set to default 'auto concurrent', value found '" + method + "'.");
    inf.setLoadMethod(OraBulkLoaderMeta.METHOD_AUTO_END);
  }
  String action=wLoadAction.getText();
  if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.AppendLoadAction.Label").equals(action)) {
    inf.setLoadAction(OraBulkLoaderMeta.ACTION_APPEND);
  }
 else   if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.InsertLoadAction.Label").equals(action)) {
    inf.setLoadAction(OraBulkLoaderMeta.ACTION_INSERT);
  }
 else   if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.ReplaceLoadAction.Label").equals(action)) {
    inf.setLoadAction(OraBulkLoaderMeta.ACTION_REPLACE);
  }
 else   if (BaseMessages.getString(PKG,"OraBulkLoaderDialog.TruncateLoadAction.Label").equals(action)) {
    inf.setLoadAction(OraBulkLoaderMeta.ACTION_TRUNCATE);
  }
 else {
    if (log.isDebug())     logDebug("Internal error: load_action set to default 'append', value found '" + action + "'.");
    inf.setLoadAction(OraBulkLoaderMeta.ACTION_APPEND);
  }
  stepname=wStepname.getText();
}
