{
  RowMetaInterface fields=new RowMeta();
  try {
    AccessInputMeta meta=new AccessInputMeta();
    getInfo(meta);
    if (!checkInputTableName(meta))     return;
    FileInputList inputList=meta.getFiles(transMeta);
    if (inputList.getFiles().size() > 0) {
      Database d=Database.open(new File(AccessInputMeta.getFilename(inputList.getFile(0))),true);
      String realTableName=transMeta.environmentSubstitute(meta.getTableName());
      Table t=null;
      if (realTableName.startsWith(AccessInputMeta.PREFIX_SYSTEM))       t=d.getSystemTable(realTableName);
 else       t=d.getTable(realTableName);
      List<Column> col=t.getColumns();
      for (int i=0; i < col.size(); i++) {
        String fieldname=null;
        int fieldtype=ValueMetaInterface.TYPE_NONE;
        Column c=(Column)col.get(i);
        fieldname=c.getName();
        if (DataType.INT.equals(c.getType()))         fieldtype=ValueMetaInterface.TYPE_INTEGER;
 else         if (DataType.BOOLEAN.equals(c.getType()))         fieldtype=ValueMetaInterface.TYPE_BOOLEAN;
 else         if (DataType.BINARY.equals(c.getType()))         fieldtype=ValueMetaInterface.TYPE_BINARY;
 else         if ((DataType.DOUBLE.equals(c.getType())) || (DataType.LONG.equals(c.getType())) || (DataType.BYTE.equals(c.getType()))|| (DataType.NUMERIC.equals(c.getType())))         fieldtype=ValueMetaInterface.TYPE_NUMBER;
 else         if ((DataType.FLOAT.equals(c.getType())) || (DataType.MONEY.equals(c.getType())))         fieldtype=ValueMetaInterface.TYPE_BIGNUMBER;
 else         if ((DataType.SHORT_DATE_TIME.equals(c.getType())))         fieldtype=ValueMetaInterface.TYPE_DATE;
 else         fieldtype=ValueMetaInterface.TYPE_STRING;
        if (fieldname != null && fieldtype != ValueMetaInterface.TYPE_NONE) {
          ValueMetaInterface field=new ValueMeta(fieldname,fieldtype);
          if (fields.indexOfValue(field.getName()) < 0)           fields.addValueMeta(field);
        }
      }
    }
  }
 catch (  Exception e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"AccessInputDialog.ErrorReadingFile.DialogMessage",e.toString()),e);
  }
  if (fields.size() > 0) {
    wFields.removeAll();
    for (int j=0; j < fields.size(); j++) {
      ValueMetaInterface field=fields.getValueMeta(j);
      wFields.add(new String[]{field.getName(),field.getName(),field.getTypeDesc(),"","-1","","","","","none","N"});
    }
    wFields.removeEmptyRows();
    wFields.setRowNums();
    wFields.optWidth(true);
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
    mb.setMessage(BaseMessages.getString(PKG,"AccessInputDialog.UnableToFindFields.DialogTitle"));
    mb.setText(BaseMessages.getString(PKG,"AccessInputDialog.UnableToFindFields.DialogMessage"));
    mb.open();
  }
}
