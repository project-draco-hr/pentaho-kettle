{
  TransHopMeta hopTransMeta=new TransHopMeta();
  try {
    hopTransMeta.setID(id_trans_hop);
    RowMetaAndData r=getTransHop(id_trans_hop);
    hopTransMeta.setEnabled(r.getBoolean("ENABLED",false));
    long id_step_from=r.getInteger("ID_STEP_FROM",0);
    long id_step_to=r.getInteger("ID_STEP_TO",0);
    hopTransMeta.setFromStep(StepMeta.findStep(steps,id_step_from));
    if (hopTransMeta.getFromStep() == null && id_step_from > 0) {
      StepMeta stepMeta=repository.stepDelegate.loadStepMeta(id_step_from,new ArrayList<DatabaseMeta>(),new Hashtable<String,Counter>(),new ArrayList<PartitionSchema>());
      hopTransMeta.setFromStep(StepMeta.findStep(steps,stepMeta.getName()));
    }
    hopTransMeta.getFromStep().setDraw(true);
    hopTransMeta.setToStep(StepMeta.findStep(steps,id_step_to));
    if (hopTransMeta.getToStep() == null && id_step_to > 0) {
      StepMeta stepMeta=repository.stepDelegate.loadStepMeta(id_step_to,new ArrayList<DatabaseMeta>(),new Hashtable<String,Counter>(),new ArrayList<PartitionSchema>());
      hopTransMeta.setToStep(StepMeta.findStep(steps,stepMeta.getName()));
    }
    hopTransMeta.getToStep().setDraw(true);
    return hopTransMeta;
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"TransHopMeta.Exception.LoadTransformationHopInfo") + id_trans_hop,dbe);
  }
}
