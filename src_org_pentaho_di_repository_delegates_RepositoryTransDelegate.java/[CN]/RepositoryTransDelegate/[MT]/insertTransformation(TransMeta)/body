{
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_TRANSFORMATION,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_NAME,ValueMetaInterface.TYPE_STRING),transMeta.getName());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_DESCRIPTION,ValueMetaInterface.TYPE_STRING),transMeta.getDescription());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_EXTENDED_DESCRIPTION,ValueMetaInterface.TYPE_STRING),transMeta.getExtendedDescription());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_TRANS_VERSION,ValueMetaInterface.TYPE_STRING),transMeta.getTransversion());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_TRANS_STATUS,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getTransstatus() < 0 ? -1L : transMeta.getTransstatus()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_READ,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getReadStep() == null ? -1L : transMeta.getReadStep().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_WRITE,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getWriteStep() == null ? -1L : transMeta.getWriteStep().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_INPUT,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getInputStep() == null ? -1L : transMeta.getInputStep().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_OUTPUT,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getOutputStep() == null ? -1L : transMeta.getOutputStep().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_STEP_UPDATE,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getUpdateStep() == null ? -1L : transMeta.getUpdateStep().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DATABASE_LOG,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getLogConnection() == null ? -1L : transMeta.getLogConnection().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_TABLE_NAME_LOG,ValueMetaInterface.TYPE_STRING),transMeta.getLogTable());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_USE_BATCHID,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(transMeta.isBatchIdUsed()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_USE_LOGFIELD,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(transMeta.isLogfieldUsed()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DATABASE_MAXDATE,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getMaxDateConnection() == null ? -1L : transMeta.getMaxDateConnection().getID()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_TABLE_NAME_MAXDATE,ValueMetaInterface.TYPE_STRING),transMeta.getMaxDateTable());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_FIELD_NAME_MAXDATE,ValueMetaInterface.TYPE_STRING),transMeta.getMaxDateField());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_OFFSET_MAXDATE,ValueMetaInterface.TYPE_NUMBER),new Double(transMeta.getMaxDateOffset()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_DIFF_MAXDATE,ValueMetaInterface.TYPE_NUMBER),new Double(transMeta.getMaxDateDifference()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_CREATED_USER,ValueMetaInterface.TYPE_STRING),transMeta.getCreatedUser());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_CREATED_DATE,ValueMetaInterface.TYPE_DATE),transMeta.getCreatedDate());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_USER,ValueMetaInterface.TYPE_STRING),transMeta.getModifiedUser());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_DATE,ValueMetaInterface.TYPE_DATE),transMeta.getModifiedDate());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_SIZE_ROWSET,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getSizeRowset()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DIRECTORY,ValueMetaInterface.TYPE_INTEGER),new Long(transMeta.getRepositoryDirectory().getID()));
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_TRANSFORMATION);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  if (transMeta.getRejectedStep() != null) {
    repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_ID_STEP_REJECTED,transMeta.getRejectedStep().getID(),null);
  }
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_UNIQUE_CONNECTIONS,0,transMeta.isUsingUniqueConnections() ? "Y" : "N");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_FEEDBACK_SHOWN,0,transMeta.isFeedbackShown() ? "Y" : "N");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_FEEDBACK_SIZE,transMeta.getFeedbackSize(),"");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_USING_THREAD_PRIORITIES,0,transMeta.isUsingThreadPriorityManagment() ? "Y" : "N");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_SHARED_FILE,0,transMeta.getSharedObjectsFile());
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_CAPTURE_STEP_PERFORMANCE,0,transMeta.isCapturingStepPerformanceSnapShots() ? "Y" : "N");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_CAPTURING_DELAY,transMeta.getStepPerformanceCapturingDelay(),"");
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_STEP_PERFORMANCE_LOG_TABLE,0,transMeta.getStepPerformanceLogTable());
  repository.connectionDelegate.insertTransAttribute(transMeta.getID(),0,KettleDatabaseRepository.TRANS_ATTRIBUTE_LOG_SIZE_LIMIT,0,transMeta.getLogSizeLimit());
  if (transMeta.getLogConnection() != null)   repository.insertStepDatabase(transMeta.getID(),-1L,transMeta.getLogConnection().getID());
  if (transMeta.getMaxDateConnection() != null)   repository.insertStepDatabase(transMeta.getID(),-1L,transMeta.getMaxDateConnection().getID());
}
