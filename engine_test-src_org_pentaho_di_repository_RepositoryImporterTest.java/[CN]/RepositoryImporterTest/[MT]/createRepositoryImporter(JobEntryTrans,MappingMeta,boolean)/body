{
  Repository repository=mock(Repository.class);
  LogChannelInterface log=mock(LogChannelInterface.class);
  RepositoryImporter importer=new RepositoryImporter(repository,log){
    @Override JobMeta createJobMetaForNode(    Node jobnode) throws KettleXMLException {
      JobMeta meta=mock(JobMeta.class);
      JobEntryCopy jec=mock(JobEntryCopy.class);
      when(jec.isTransformation()).thenReturn(true);
      when(jec.getEntry()).thenReturn(jobEntryTrans);
      when(meta.getJobCopies()).thenReturn(Collections.singletonList(jec));
      return meta;
    }
    @Override TransMeta createTransMetaForNode(    Node transnode) throws KettleMissingPluginsException, KettleXMLException {
      TransMeta meta=mock(TransMeta.class);
      StepMeta stepMeta=mock(StepMeta.class);
      when(stepMeta.isMapping()).thenReturn(true);
      when(stepMeta.getStepMetaInterface()).thenReturn(mappingMeta);
      when(meta.getSteps()).thenReturn(Collections.singletonList(stepMeta));
      return meta;
    }
    @Override protected void replaceSharedObjects(    JobMeta transMeta) throws KettleException {
    }
    @Override protected void replaceSharedObjects(    TransMeta transMeta) throws KettleException {
    }
    @Override boolean needToCheckPathForVariables(){
      return needToCheckPathForVariables;
    }
  }
;
  return importer;
}
