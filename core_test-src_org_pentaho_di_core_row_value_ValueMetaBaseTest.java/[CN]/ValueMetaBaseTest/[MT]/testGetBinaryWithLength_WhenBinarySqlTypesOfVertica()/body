{
  final int binaryColumnIndex=1;
  final int varbinaryColumnIndex=2;
  final int expectedBinarylength=1;
  final int expectedVarBinarylength=80;
  ValueMetaBase obj=new ValueMetaBase();
  DatabaseMeta dbMeta=Mockito.spy(new DatabaseMeta());
  DatabaseInterface databaseInterface=new Vertica5DatabaseMeta();
  dbMeta.setDatabaseInterface(databaseInterface);
  ResultSet resultSet=Mockito.mock(ResultSet.class);
  ResultSetMetaData metaData=Mockito.mock(ResultSetMetaData.class);
  Mockito.when(resultSet.getMetaData()).thenReturn(metaData);
  Mockito.when(metaData.getColumnType(binaryColumnIndex)).thenReturn(Types.BINARY);
  Mockito.when(metaData.getPrecision(binaryColumnIndex)).thenReturn(expectedBinarylength);
  Mockito.when(metaData.getColumnDisplaySize(binaryColumnIndex)).thenReturn(expectedBinarylength * 2);
  Mockito.when(metaData.getColumnType(varbinaryColumnIndex)).thenReturn(Types.BINARY);
  Mockito.when(metaData.getPrecision(varbinaryColumnIndex)).thenReturn(expectedVarBinarylength);
  Mockito.when(metaData.getColumnDisplaySize(varbinaryColumnIndex)).thenReturn(expectedVarBinarylength * 2);
  ValueMetaInterface binaryValueMeta=obj.getValueFromSQLType(dbMeta,TEST_NAME,metaData,binaryColumnIndex,false,false);
  Assert.assertNotNull(binaryValueMeta);
  Assert.assertTrue(TEST_NAME.equals(binaryValueMeta.getName()));
  Assert.assertTrue(ValueMetaInterface.TYPE_BINARY == binaryValueMeta.getType());
  Assert.assertTrue(expectedBinarylength == binaryValueMeta.getLength());
  Assert.assertFalse(binaryValueMeta.isLargeTextField());
  ValueMetaInterface varbinaryValueMeta=obj.getValueFromSQLType(dbMeta,TEST_NAME,metaData,varbinaryColumnIndex,false,false);
  Assert.assertNotNull(varbinaryValueMeta);
  Assert.assertTrue(TEST_NAME.equals(varbinaryValueMeta.getName()));
  Assert.assertTrue(ValueMetaInterface.TYPE_BINARY == varbinaryValueMeta.getType());
  Assert.assertTrue(expectedVarBinarylength == varbinaryValueMeta.getLength());
  Assert.assertFalse(varbinaryValueMeta.isLargeTextField());
}
