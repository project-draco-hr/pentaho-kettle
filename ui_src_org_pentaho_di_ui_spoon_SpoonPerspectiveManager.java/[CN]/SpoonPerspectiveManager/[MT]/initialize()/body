{
  XulToolbar mainToolbar=(XulToolbar)domContainer.getDocumentRoot().getElementById("main-toolbar");
  SwtDeck deck=(SwtDeck)domContainer.getDocumentRoot().getElementById("canvas-deck");
  int y=0;
  int perspectiveIdx=0;
  Class<? extends SpoonPerspective> perClass=null;
  List<SpoonPerspective> perspectives=getPerspectives();
  if (this.startupPerspective != null) {
    for (int i=0; i < perspectives.size(); i++) {
      if (perspectives.get(i).getId().equals(this.startupPerspective)) {
        perspectiveIdx=i;
        break;
      }
    }
  }
  ToolItem perspectivesItem=(ToolItem)domContainer.getDocumentRoot().getElementById("toolbar-perspectives").getManagedObject();
  MenuManager menu=(MenuManager)domContainer.getDocumentRoot().getElementById("toolbar-perspectives-popup").getManagedObject();
  for (  final SpoonPerspective per : getPerspectives()) {
    if (installedPerspectives.contains(per)) {
      y++;
      continue;
    }
    String name=per.getDisplayName(LanguageChoice.getInstance().getDefaultLocale());
    menu.add(new Action(name){
      @Override public void run(){
        Spoon.getInstance().loadPerspective(per.getId());
      }
      @Override public String getId(){
        return per.getId();
      }
    }
);
    XulVbox box=deck.createVBoxCard();
    box.setId("perspective-" + per.getId());
    box.setFlex(1);
    deck.addChild(box);
    PerspectiveInitializer perspectiveInitializer=new PerspectiveInitializer(per,box,mainToolbar,perspectivesItem,name);
    if (perspectiveIdx == y || y == 0) {
      if (perspectiveIdx == y) {
        perClass=per.getClass();
      }
      perspectiveInitializer.initialize();
    }
 else {
      initializerMap.put(per,perspectiveInitializer);
    }
    y++;
    installedPerspectives.add(per);
  }
  deck.setSelectedIndex(perspectiveIdx);
  if (perClass != null) {
    try {
      activatePerspective(perClass);
      SpoonPerspectiveManager.getInstance().setForcePerspective(true);
    }
 catch (    KettleException e) {
    }
  }
}
