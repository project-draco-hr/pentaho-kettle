{
  super(composite,arg1 | SWT.NO_BACKGROUND | SWT.V_SCROLL| SWT.H_SCROLL);
  widget=this;
  this.active_condition=co;
  this.fields=inputFields;
  imageAdd=GUIResource.getInstance().getImage("ui/images/eq_add.svg");
  modListeners=new ArrayList<ModifyListener>();
  sbVertical=getVerticalBar();
  sbHorizontal=getHorizontalBar();
  offsetx=0;
  offsety=0;
  maxdrawn=null;
  size_not=null;
  size_widget=null;
  size_cond=null;
  previous_area=-1;
  previous_area_nr=-1;
  parents=new ArrayList<Condition>();
  hover_condition=-1;
  hover_operator=-1;
  hover_not=false;
  hover_up=false;
  hover_left=false;
  hover_fn=false;
  hover_rightval=false;
  hover_rightex=false;
  getMaxFieldLength();
  shell=composite.getShell();
  display=shell.getDisplay();
  bg=GUIResource.getInstance().getColorBackground();
  fixed=GUIResource.getInstance().getFontFixed();
  white=GUIResource.getInstance().getColorWhite();
  black=GUIResource.getInstance().getColorBlack();
  red=GUIResource.getInstance().getColorRed();
  green=GUIResource.getInstance().getColorGreen();
  blue=GUIResource.getInstance().getColorBlue();
  gray=GUIResource.getInstance().getColorDarkGray();
  widget.addPaintListener(new PaintListener(){
    @Override public void paintControl(    PaintEvent pe){
      Rectangle r=widget.getBounds();
      if (r.width > 0 && r.height > 0) {
        repaint(pe.gc,r.width,r.height);
      }
    }
  }
);
  widget.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    MouseEvent e){
      Point screen=new Point(e.x,e.y);
      int area=getAreaCode(screen);
      int nr=0;
      boolean need_redraw=false;
      hover_condition=-1;
      hover_operator=-1;
      hover_not=false;
      hover_up=false;
      hover_left=false;
      hover_fn=false;
      hover_rightval=false;
      hover_rightex=false;
      if (area != AREA_ICON_ADD) {
        setToolTipText(null);
      }
 else {
        setToolTipText(BaseMessages.getString(PKG,"ConditionEditor.AddCondition.Label"));
      }
switch (area) {
case AREA_NOT:
        hover_not=true;
      nr=1;
    break;
case AREA_UP:
  hover_up=getLevel() > 0;
nr=1;
break;
case AREA_BACKGROUND:
break;
case AREA_SUBCONDITION:
hover_condition=getNrSubcondition(screen);
nr=hover_condition;
break;
case AREA_OPERATOR:
hover_operator=getNrOperator(screen);
nr=hover_operator;
break;
case AREA_LEFT:
hover_left=true;
nr=1;
break;
case AREA_FUNCTION:
hover_fn=true;
nr=1;
break;
case AREA_RIGHT_VALUE:
hover_rightval=true;
nr=1;
break;
case AREA_RIGHT_EXACT:
hover_rightex=true;
nr=1;
break;
case AREA_CONDITION:
break;
case AREA_NONE:
break;
default :
break;
}
if (area != previous_area || nr != previous_area_nr) {
need_redraw=true;
}
if (need_redraw) {
offsetx=-sbHorizontal.getSelection();
offsety=-sbVertical.getSelection();
widget.redraw();
}
previous_area=area;
previous_area_nr=nr;
}
}
);
widget.addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
Point screen=new Point(e.x,e.y);
int area=getAreaCode(screen);
if (e.button == 1) {
switch (area) {
case AREA_NOT:
active_condition.negate();
setModified();
widget.redraw();
break;
case AREA_OPERATOR:
int operator=getNrOperator(screen);
EnterSelectionDialog esd=new EnterSelectionDialog(shell,Condition.getRealOperators(),BaseMessages.getString(PKG,"ConditionEditor.Operator.Label"),BaseMessages.getString(PKG,"ConditionEditor.SelectOperator.Label"));
esd.setAvoidQuickSearch();
Condition selcond=active_condition.getCondition(operator);
String def=selcond.getOperatorDesc();
int defnr=esd.getSelectionNr(Const.trim(def));
String selection=esd.open(defnr);
if (selection != null) {
int opnr=Condition.getOperator(selection);
active_condition.getCondition(operator).setOperator(opnr);
setModified();
}
widget.redraw();
break;
case AREA_SUBCONDITION:
int nr=getNrSubcondition(screen);
editCondition(nr);
setMessageString(BaseMessages.getString(PKG,"ConditionEditor.GoUpOneLevel.Label","" + getLevel()));
redraw();
break;
case AREA_UP:
goUp();
break;
case AREA_FUNCTION:
if (active_condition.isAtomic()) {
esd=new EnterSelectionDialog(shell,Condition.functions,BaseMessages.getString(PKG,"ConditionEditor.Functions.Label"),BaseMessages.getString(PKG,"ConditionEditor.SelectFunction.Label"));
esd.setAvoidQuickSearch();
def=active_condition.getFunctionDesc();
defnr=esd.getSelectionNr(def);
selection=esd.open(defnr);
if (selection != null) {
int fnnr=Condition.getFunction(selection);
active_condition.setFunction(fnnr);
setModified();
}
widget.redraw();
}
break;
case AREA_LEFT:
if (active_condition.isAtomic() && fields != null) {
esd=new EnterSelectionDialog(shell,fields.getFieldNamesAndTypes(max_field_length),BaseMessages.getString(PKG,"ConditionEditor.Fields"),BaseMessages.getString(PKG,"ConditionEditor.SelectAField"));
esd.setAvoidQuickSearch();
def=active_condition.getLeftValuename();
defnr=esd.getSelectionNr(def);
selection=esd.open(defnr);
if (selection != null) {
ValueMetaInterface v=fields.getValueMeta(esd.getSelectionNr());
active_condition.setLeftValuename(v.getName());
setModified();
}
widget.redraw();
}
break;
case AREA_RIGHT_VALUE:
if (active_condition.isAtomic() && fields != null) {
esd=new EnterSelectionDialog(shell,fields.getFieldNamesAndTypes(max_field_length),BaseMessages.getString(PKG,"ConditionEditor.Fields"),BaseMessages.getString(PKG,"ConditionEditor.SelectAField"));
esd.setAvoidQuickSearch();
def=active_condition.getLeftValuename();
defnr=esd.getSelectionNr(def);
selection=esd.open(defnr);
if (selection != null) {
ValueMetaInterface v=fields.getValueMeta(esd.getSelectionNr());
active_condition.setRightValuename(v.getName());
active_condition.setRightExact(null);
setModified();
}
widget.redraw();
}
break;
case AREA_RIGHT_EXACT:
if (active_condition.isAtomic()) {
ValueMetaAndData v=active_condition.getRightExact();
if (v == null) {
ValueMetaInterface leftval=fields != null ? fields.searchValueMeta(active_condition.getLeftValuename()) : null;
if (leftval != null) {
try {
v=new ValueMetaAndData(ValueMetaFactory.createValueMeta("constant",leftval.getType()),null);
}
 catch (Exception exception) {
new ErrorDialog(shell,"Error","Error creating value meta object",exception);
}
}
 else {
v=new ValueMetaAndData(new ValueMetaString("constant"),null);
}
}
EnterValueDialog evd=new EnterValueDialog(shell,SWT.NONE,v.getValueMeta(),v.getValueData());
evd.setModalDialog(true);
ValueMetaAndData newval=evd.open();
if (newval != null) {
active_condition.setRightValuename(null);
active_condition.setRightExact(newval);
setModified();
}
widget.redraw();
}
break;
case AREA_ICON_ADD:
addCondition();
break;
default :
break;
}
}
}
@Override public void mouseUp(MouseEvent e){
}
}
);
widget.addMenuDetectListener(new MenuDetectListener(){
@Override public void menuDetected(MenuDetectEvent e){
Point screen=new Point(e.x,e.y);
Point widgetScreen=widget.toDisplay(1,1);
Point wRel=new Point(screen.x - widgetScreen.x,screen.y - widgetScreen.y);
int area=getAreaCode(wRel);
setMenu(area,wRel);
}
}
);
sbVertical.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
offsety=-sbVertical.getSelection();
widget.redraw();
}
}
);
sbHorizontal.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
offsetx=-sbHorizontal.getSelection();
widget.redraw();
}
}
);
widget.addControlListener(new ControlAdapter(){
@Override public void controlResized(ControlEvent arg0){
size_widget=widget.getBounds();
setBars();
}
}
);
}
