{
  while (data.itemPosition >= data.itemCount || data.file == null) {
    data.file=null;
    if (!openNextFile()) {
      return null;
    }
  }
  Row row=buildEmptyRow();
  Node itemNode;
  if (meta.getInputPosition().length > 1) {
    itemNode=XMLHandler.getSubNodeByNr(data.section,data.itemElement,data.itemPosition);
  }
 else {
    itemNode=data.section;
  }
  data.itemPosition++;
  for (int i=0; i < meta.getInputFields().length; i++) {
    Node node=itemNode;
    XMLInputField xmlInputField=meta.getInputFields()[i];
    String value=null;
    for (int p=0; (value == null) && node != null && p < xmlInputField.getFieldPosition().length; p++) {
      XMLInputFieldPosition pos=xmlInputField.getFieldPosition()[p];
switch (pos.getType()) {
case XMLInputFieldPosition.XML_ELEMENT:
{
          if (pos.getElementNr() <= 1) {
            Node subNode=XMLHandler.getSubNode(node,pos.getName());
            if (subNode != null) {
              if (p == xmlInputField.getFieldPosition().length - 1) {
                value=XMLHandler.getNodeValue(subNode);
              }
            }
 else {
              if (log.isDebug())               logDebug(Messages.getString("XMLInput.Log.UnableToFindPosition",pos.toString(),node.toString()));
            }
            node=subNode;
          }
 else {
            Node subNode=XMLHandler.getSubNodeByNr(node,pos.getName(),pos.getElementNr() - 1,false);
            if (subNode != null) {
              if (p == xmlInputField.getFieldPosition().length - 1) {
                value=XMLHandler.getNodeValue(subNode);
              }
            }
 else {
              if (log.isDebug())               logDebug(Messages.getString("XMLInput.Log.UnableToFindPosition",pos.toString(),node.toString()));
            }
            node=subNode;
          }
        }
      break;
case XMLInputFieldPosition.XML_ATTRIBUTE:
{
      value=XMLHandler.getTagAttribute(node,pos.getName());
    }
  break;
case XMLInputFieldPosition.XML_ROOT:
{
  value=XMLHandler.getNodeValue(node);
}
break;
default :
break;
}
}
Value v=row.getValue(i);
if (value != null) v.setValue(value);
 else v.setNull();
switch (xmlInputField.getTrimType()) {
case XMLInputField.TYPE_TRIM_LEFT:
v.ltrim();
break;
case XMLInputField.TYPE_TRIM_RIGHT:
v.rtrim();
break;
case XMLInputField.TYPE_TRIM_BOTH:
v.trim();
break;
default :
break;
}
switch (xmlInputField.getType()) {
case Value.VALUE_TYPE_STRING:
break;
case Value.VALUE_TYPE_NUMBER:
String decimal=".";
if (xmlInputField.getDecimalSymbol() != null && xmlInputField.getDecimalSymbol().length() > 0) decimal=xmlInputField.getDecimalSymbol();
if (xmlInputField.getFormat() != null && xmlInputField.getFormat().length() > 0) {
if (xmlInputField.getGroupSymbol() != null && xmlInputField.getGroupSymbol().length() > 0) {
if (xmlInputField.getCurrencySymbol() != null && xmlInputField.getCurrencySymbol().length() > 0) {
v.str2num(xmlInputField.getFormat(),decimal,xmlInputField.getGroupSymbol(),xmlInputField.getCurrencySymbol());
}
 else {
v.str2num(xmlInputField.getFormat(),decimal,xmlInputField.getGroupSymbol());
}
}
 else {
v.str2num(xmlInputField.getFormat(),decimal);
}
}
 else {
v.str2num(null,decimal);
}
v.setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case Value.VALUE_TYPE_INTEGER:
v.setValue(v.getInteger());
v.setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case Value.VALUE_TYPE_BIGNUMBER:
v.setValue(v.getBigNumber());
v.setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case Value.VALUE_TYPE_DATE:
if (xmlInputField.getFormat() != null && xmlInputField.getFormat().length() > 0) {
v.str2dat(xmlInputField.getFormat());
}
 else {
v.setValue(v.getDate());
}
break;
case Value.VALUE_TYPE_BOOLEAN:
v.setValue(v.getBoolean());
break;
default :
break;
}
if (meta.getInputFields()[i].isRepeated()) {
if (v.isNull() && data.previousRow != null) {
Value previous=data.previousRow.getValue(i);
v.setValue(previous);
}
}
}
if (meta.includeFilename() && meta.getFilenameField() != null && meta.getFilenameField().length() > 0) {
Value fn=new Value(meta.getFilenameField(),KettleVFS.getFilename(data.file));
row.addValue(fn);
}
if (meta.includeRowNumber() && meta.getRowNumberField() != null && meta.getRowNumberField().length() > 0) {
Value fn=new Value(meta.getRowNumberField(),data.rownr);
row.addValue(fn);
}
data.previousRow=new Row(row);
data.rownr++;
NodeList nodeList=itemNode.getChildNodes();
for (int i=0; i < nodeList.getLength(); i++) itemNode.removeChild(nodeList.item(i));
return row;
}
