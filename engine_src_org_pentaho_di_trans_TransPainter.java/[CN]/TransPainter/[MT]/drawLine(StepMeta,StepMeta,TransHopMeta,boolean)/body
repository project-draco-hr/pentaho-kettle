{
  int line[]=getLine(fs,ts);
  EColor col;
  ELineStyle linestyle=ELineStyle.SOLID;
  int activeLinewidth=linewidth;
  if (is_candidate) {
    col=EColor.BLUE;
  }
 else {
    if (hi.isEnabled()) {
      if (fs.isSendingErrorRowsToStep(ts)) {
        col=EColor.RED;
        linestyle=ELineStyle.DOT;
        activeLinewidth=linewidth + 1;
      }
 else {
        col=EColor.BLACK;
      }
    }
 else {
      col=EColor.GRAY;
    }
  }
  if (hi.split)   activeLinewidth=linewidth + 2;
  StepIOMetaInterface ioMeta=ts.getStepMetaInterface().getStepIOMeta();
  List<StreamInterface> infoStreams=ioMeta.getInfoStreams();
  if (!infoStreams.isEmpty()) {
    for (    StreamInterface stream : infoStreams) {
      if (fs.getName().equalsIgnoreCase(stream.getStepname())) {
        if (fs.getCopies() > 1) {
          col=EColor.RED;
        }
      }
    }
  }
  gc.setForeground(col);
  gc.setLineStyle(linestyle);
  gc.setLineWidth(activeLinewidth);
  drawArrow(line,hi,fs,ts);
  if (hi.split)   gc.setLineWidth(linewidth);
  gc.setForeground(EColor.BLACK);
  gc.setBackground(EColor.BACKGROUND);
  gc.setLineStyle(ELineStyle.SOLID);
}
