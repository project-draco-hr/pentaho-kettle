{
  if (stepMeta == null) {
    return;
  }
  int alpha=gc.getAlpha();
  StepIOMetaInterface ioMeta=stepMeta.getStepMetaInterface().getStepIOMeta();
  Point pt=stepMeta.getLocation();
  if (pt == null) {
    pt=new Point(50,50);
  }
  Point screen=real2screen(pt.x,pt.y);
  int x=screen.x;
  int y=screen.y;
  boolean stepError=false;
  if (stepLogMap != null && !stepLogMap.isEmpty()) {
    String log=stepLogMap.get(stepMeta);
    if (!Const.isEmpty(log)) {
      stepError=true;
    }
  }
  if (!stepMeta.getRemoteInputSteps().isEmpty()) {
    gc.setLineWidth(1);
    gc.setForeground(EColor.GRAY);
    gc.setBackground(EColor.BACKGROUND);
    gc.setFont(EFont.GRAPH);
    String nrInput=Integer.toString(stepMeta.getRemoteInputSteps().size());
    Point textExtent=gc.textExtent(nrInput);
    textExtent.x+=2;
    textExtent.y+=2;
    Point point=new Point(x - iconsize - iconsize / 2,y - iconsize);
    gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
    gc.drawText(nrInput,point.x + 1,point.y + 1);
    gc.drawLine(point.x + textExtent.x,point.y + textExtent.y / 2,x - iconsize / 2,point.y + textExtent.y / 2);
    drawArrow(EImage.ARROW_DISABLED,x - iconsize / 2,point.y + textExtent.y / 2,x + iconsize / 3,y,Math.toRadians(15),15,1.8,null,null,null);
    if (!shadow) {
      areaOwners.add(new AreaOwner(AreaType.REMOTE_INPUT_STEP,point.x,point.y,textExtent.x,textExtent.y,offset,stepMeta,STRING_REMOTE_INPUT_STEPS));
    }
  }
  if (!stepMeta.getRemoteOutputSteps().isEmpty()) {
    gc.setLineWidth(1);
    gc.setForeground(EColor.GRAY);
    gc.setBackground(EColor.BACKGROUND);
    gc.setFont(EFont.GRAPH);
    String nrOutput=Integer.toString(stepMeta.getRemoteOutputSteps().size());
    Point textExtent=gc.textExtent(nrOutput);
    textExtent.x+=2;
    textExtent.y+=2;
    Point point=new Point(x + 2 * iconsize + iconsize / 2 - textExtent.x,y - iconsize);
    gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
    gc.drawText(nrOutput,point.x + 1,point.y + 1);
    gc.drawLine(point.x,point.y + textExtent.y / 2,x + iconsize + iconsize / 2,point.y + textExtent.y / 2);
    drawArrow(EImage.ARROW_DISABLED,x + 2 * iconsize / 3,y,x + iconsize + iconsize / 2,point.y + textExtent.y / 2,Math.toRadians(15),15,1.8,null,null,null);
    if (!shadow) {
      areaOwners.add(new AreaOwner(AreaType.REMOTE_OUTPUT_STEP,point.x,point.y,textExtent.x,textExtent.y,offset,stepMeta,STRING_REMOTE_OUTPUT_STEPS));
    }
  }
  if (stepMeta.isPartitioned()) {
    gc.setLineWidth(1);
    gc.setForeground(EColor.RED);
    gc.setBackground(EColor.BACKGROUND);
    gc.setFont(EFont.GRAPH);
    PartitionSchema partitionSchema=stepMeta.getStepPartitioningMeta().getPartitionSchema();
    if (partitionSchema != null) {
      String nrInput;
      if (partitionSchema.isDynamicallyDefined()) {
        nrInput="Dx" + partitionSchema.getNumberOfPartitionsPerSlave();
      }
 else {
        nrInput="Px" + Integer.toString(partitionSchema.getPartitionIDs().size());
      }
      Point textExtent=gc.textExtent(nrInput);
      textExtent.x+=2;
      textExtent.y+=2;
      Point point=new Point(x - iconsize - iconsize / 2,y - iconsize - iconsize);
      gc.drawRectangle(point.x,point.y,textExtent.x,textExtent.y);
      gc.drawText(nrInput,point.x + 1,point.y + 1);
      gc.drawLine(point.x + textExtent.x,point.y + textExtent.y / 2,x - iconsize / 2,point.y + textExtent.y / 2);
      gc.drawLine(x - iconsize / 2,point.y + textExtent.y / 2,x + iconsize / 3,y);
      gc.setForeground(EColor.GRAY);
      gc.drawText(Const.NVL(partitionSchema.getName(),"<no partition name>"),point.x,point.y + textExtent.y + 3,true);
      if (!shadow) {
        areaOwners.add(new AreaOwner(AreaType.STEP_PARTITIONING,point.x,point.y,textExtent.x,textExtent.y,offset,stepMeta,STRING_PARTITIONING_CURRENT_STEP));
      }
    }
  }
  String name=stepMeta.getName();
  if (stepMeta.isSelected()) {
    gc.setLineWidth(linewidth + 2);
  }
 else {
    gc.setLineWidth(linewidth);
  }
  if (!shadow) {
    areaOwners.add(new AreaOwner(AreaType.STEP_ICON,x,y,iconsize,iconsize,offset,transMeta,stepMeta));
  }
  gc.setBackground(EColor.BACKGROUND);
  gc.fillRoundRectangle(x - 1,y - 1,iconsize + 1,iconsize + 1,8,8);
  gc.drawStepIcon(x,y,stepMeta,magnification);
  if (stepError || stepMeta.isMissing()) {
    gc.setForeground(EColor.RED);
  }
 else {
    gc.setForeground(EColor.CRYSTAL);
  }
  gc.drawRoundRectangle(x - 1,y - 1,iconsize + 1,iconsize + 1,8,8);
  Point namePosition=getNamePosition(name,screen,iconsize);
  gc.setForeground(EColor.BLACK);
  gc.setFont(EFont.GRAPH);
  gc.drawText(name,namePosition.x,namePosition.y,true);
  boolean partitioned=false;
  StepPartitioningMeta meta=stepMeta.getStepPartitioningMeta();
  if (stepMeta.isPartitioned() && meta != null) {
    partitioned=true;
  }
  if (stepMeta.getClusterSchema() != null) {
    String message="C";
    if (stepMeta.getClusterSchema().isDynamic()) {
      message+="xN";
    }
 else {
      message+="x" + stepMeta.getClusterSchema().findNrSlaves();
    }
    gc.setBackground(EColor.BACKGROUND);
    gc.setForeground(EColor.BLACK);
    gc.drawText(message,x + 3 + iconsize,y - 8);
  }
  if (stepMeta.getCopies() != 1 && !partitioned) {
    gc.setBackground(EColor.BACKGROUND);
    gc.setForeground(EColor.BLACK);
    String copies="x" + stepMeta.getCopiesString();
    Point textExtent=gc.textExtent(copies);
    gc.drawText(copies,x - textExtent.x / 2,y - textExtent.y,false);
    areaOwners.add(new AreaOwner(AreaType.STEP_COPIES_TEXT,x - textExtent.x / 2,y - textExtent.y,textExtent.x,textExtent.y,offset,transMeta,stepMeta));
  }
  if (stepError) {
    String log=stepLogMap.get(stepMeta);
    int xError=(x + iconsize) - (MINI_ICON_SIZE / 2);
    int yError=(y + iconsize) - (MINI_ICON_SIZE / 2);
    Point ib=gc.getImageBounds(EImage.STEP_ERROR);
    gc.drawImage(EImage.STEP_ERROR,xError,yError,magnification);
    if (!shadow) {
      areaOwners.add(new AreaOwner(AreaType.STEP_ERROR_ICON,pt.x + iconsize - 5,pt.y + iconsize - 5,ib.x,ib.y,offset,log,STRING_STEP_ERROR_LOG));
    }
  }
  if (mouseOverSteps.contains(stepMeta)) {
    TransPainterFlyoutExtension extension=new TransPainterFlyoutExtension(gc,areaOwners,transMeta,stepMeta,translationX,translationY,magnification,area,offset);
    try {
      ExtensionPointHandler.callExtensionPoint(LogChannel.GENERAL,KettleExtensionPoint.TransPainterFlyout.id,extension);
    }
 catch (    Exception e) {
      LogChannel.GENERAL.logError("Error calling extension point(s) for the transformation painter step",e);
    }
  }
  TransPainterExtension extension=new TransPainterExtension(gc,shadow,areaOwners,transMeta,stepMeta,null,x,y,0,0,0,0,offset,iconsize);
  try {
    ExtensionPointHandler.callExtensionPoint(LogChannel.GENERAL,KettleExtensionPoint.TransPainterStep.id,extension);
  }
 catch (  Exception e) {
    LogChannel.GENERAL.logError("Error calling extension point(s) for the transformation painter step",e);
  }
  gc.setAlpha(alpha);
}
