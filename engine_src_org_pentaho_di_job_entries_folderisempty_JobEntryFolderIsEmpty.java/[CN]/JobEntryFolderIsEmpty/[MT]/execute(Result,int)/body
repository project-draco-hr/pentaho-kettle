{
  boolean oldBehavior="Y".equalsIgnoreCase(getVariable(Const.KETTLE_COMPATIBILITY_SET_ERROR_ON_SPECIFIC_JOB_ENTRIES,"N"));
  Result result=previousResult;
  result.setResult(false);
  result.setNrErrors(oldBehavior ? 1 : 0);
  filescount=0;
  folderscount=0;
  pattern=null;
  if (!Utils.isEmpty(getWildcard())) {
    pattern=Pattern.compile(getRealWildcard());
  }
  if (foldername != null) {
    String realFoldername=getRealFoldername();
    FileObject folderObject=null;
    try {
      folderObject=KettleVFS.getFileObject(realFoldername,this);
      if (folderObject.exists()) {
        if (folderObject.getType() == FileType.FOLDER) {
          try {
            folderObject.findFiles(new TextFileSelector(folderObject.toString()));
          }
 catch (          Exception ex) {
            if (!(ex.getCause() instanceof ExpectedException)) {
              throw ex;
            }
          }
          if (log.isBasic()) {
            log.logBasic("Total files","We found : " + filescount + " file(s)");
          }
          if (filescount == 0) {
            result.setResult(true);
            result.setNrLinesInput(folderscount);
          }
        }
 else {
          log.logError("[" + realFoldername + "] is not a folder, failing.");
          result.setNrErrors(1);
        }
      }
 else {
        if (log.isBasic()) {
          logBasic("we can not find [" + realFoldername + "] !");
        }
        result.setNrErrors(1);
      }
    }
 catch (    Exception e) {
      logError("Error checking folder [" + realFoldername + "]",e);
      result.setResult(false);
      result.setNrErrors(1);
    }
 finally {
      if (folderObject != null) {
        try {
          folderObject.close();
          folderObject=null;
        }
 catch (        IOException ex) {
        }
      }
    }
  }
 else {
    logError("No Foldername is defined.");
    result.setNrErrors(1);
  }
  return result;
}
