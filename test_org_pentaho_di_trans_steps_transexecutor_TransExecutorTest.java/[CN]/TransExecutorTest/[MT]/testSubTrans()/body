{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("transformation executor");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.class,im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,im);
  transMeta.addStep(injectorStep);
  String transExecutorStepname="TransExecutor";
  TransExecutorMeta transExecutorMeta=new TransExecutorMeta();
  String transExecutorPID=registry.getPluginId(StepPluginType.class,transExecutorMeta);
  StepMeta transExecStep=new StepMeta(transExecutorPID,transExecutorStepname,transExecutorMeta);
  transMeta.addStep(transExecStep);
  String dummyStepname="Dummy Output";
  DummyTransMeta dummyTransMeta=new DummyTransMeta();
  String dummyStepPID=registry.getPluginId(StepPluginType.class,dummyTransMeta);
  StepMeta dummyStep=new StepMeta(dummyStepPID,dummyStepname,dummyTransMeta);
  transMeta.addStep(dummyStep);
  String subtrans=getClass().getResource("subtrans.ktr").toString();
  transExecutorMeta.setFileName(subtrans);
  transExecutorMeta.setSpecificationMethod(ObjectLocationSpecificationMethod.FILENAME);
  transExecutorMeta.setOutputRowsSourceStepMeta(dummyStep);
  TransHopMeta injectorExecutorHop=new TransHopMeta(injectorStep,transExecStep);
  transMeta.addTransHop(injectorExecutorHop);
  TransHopMeta executorDummyHop=new TransHopMeta(transExecStep,dummyStep);
  transMeta.addTransHop(executorDummyHop);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(transExecutorStepname,0);
  RowStepCollector endRc=new RowStepCollector();
  si.addRowListener(endRc);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createData();
  Iterator<RowMetaAndData> it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  long errors=trans.getResult().getNrErrors();
  assertEquals("Transformation fails",0,errors);
}
