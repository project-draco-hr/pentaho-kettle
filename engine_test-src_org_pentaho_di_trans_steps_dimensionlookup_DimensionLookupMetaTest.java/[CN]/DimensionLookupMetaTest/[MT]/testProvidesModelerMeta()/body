{
  final RowMeta rowMeta=Mockito.mock(RowMeta.class);
  final DimensionLookupMeta dimensionLookupMeta=new DimensionLookupMeta(){
    @Override Database createDatabaseObject(){
      return mock(Database.class);
    }
    @Override protected RowMetaInterface getDatabaseTableFields(    Database db,    String schemaName,    String tableName) throws KettleDatabaseException {
      assertEquals("aSchema",schemaName);
      assertEquals("aDimTable",tableName);
      return rowMeta;
    }
  }
;
  dimensionLookupMeta.setFieldLookup(new String[]{"f1","f2","f3"});
  dimensionLookupMeta.setFieldStream(new String[]{"s4","s5","s6"});
  dimensionLookupMeta.setSchemaName("aSchema");
  dimensionLookupMeta.setTableName("aDimTable");
  final DimensionLookupData dimensionLookupData=new DimensionLookupData();
  assertEquals(rowMeta,dimensionLookupMeta.getRowMeta(dimensionLookupData));
  assertEquals(3,dimensionLookupMeta.getDatabaseFields().size());
  assertEquals("f1",dimensionLookupMeta.getDatabaseFields().get(0));
  assertEquals("f2",dimensionLookupMeta.getDatabaseFields().get(1));
  assertEquals("f3",dimensionLookupMeta.getDatabaseFields().get(2));
  assertEquals(3,dimensionLookupMeta.getStreamFields().size());
  assertEquals("s4",dimensionLookupMeta.getStreamFields().get(0));
  assertEquals("s5",dimensionLookupMeta.getStreamFields().get(1));
  assertEquals("s6",dimensionLookupMeta.getStreamFields().get(2));
}
