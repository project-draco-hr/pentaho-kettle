{
  KettleEnvironment.init();
  String schemaName="";
  String tableName="tableName";
  String schemaTable="default.tableName";
  String keyField="keyField";
  DatabaseMeta databaseMeta=spy(new DatabaseMeta(databaseXML){
    public String getFieldDefinition(    ValueMetaInterface v,    String tk,    String pk,    boolean use_autoinc){
      return "someValue";
    }
  }
);
  when(databaseMeta.getQuotedSchemaTableCombination(schemaName,tableName)).thenReturn(schemaTable);
  DimensionLookupMeta dlm=new DimensionLookupMeta();
  dlm.setUpdate(true);
  dlm.setDatabaseMeta(databaseMeta);
  dlm.setTableName(tableName);
  dlm.setSchemaName(schemaName);
  dlm.setKeyLookup(new String[]{"keyLookup1","keyLookup2"});
  dlm.setKeyStream(new String[]{"keyStream1","keyStream2"});
  dlm.setFieldLookup(new String[]{"fieldLookup1","fieldLookup2"});
  dlm.setFieldStream(new String[]{"FieldStream1","FieldStream2"});
  dlm.setFieldUpdate(new int[]{1,2});
  dlm.setKeyField(keyField);
  StepMeta stepMeta=mock(StepMeta.class);
  RowMetaInterface rowMetaInterface=mock(RowMetaInterface.class);
  when(rowMetaInterface.size()).thenReturn(1);
  Repository repository=mock(Repository.class);
  IMetaStore metaStore=mock(IMetaStore.class);
  SQLStatement sqlStatement=dlm.getSQLStatements(new TransMeta(),stepMeta,rowMetaInterface,repository,metaStore);
  String sql=sqlStatement.getSQL();
  assertEquals(3,StringUtils.countMatches(sql,schemaTable));
}
