{
  if (baseFilename == null) {
    throw new KettleFileException(BaseMessages.getString(PKG,"TextFileOutput.Exception.FileNameNotSet"));
  }
  data.writer=null;
  String filename=buildFilename(environmentSubstitute(baseFilename),true);
  try {
    if (meta.isServletOutput()) {
      Writer writer=getTrans().getServletPrintWriter();
      if (Const.isEmpty(meta.getEncoding())) {
        data.writer=new WriterOutputStream(writer);
      }
 else {
        data.writer=new WriterOutputStream(writer,meta.getEncoding());
      }
    }
 else     if (meta.isFileAsCommand()) {
      if (log.isDebug()) {
        logDebug("Spawning external process");
      }
      if (data.cmdProc != null) {
        logError("Previous command not correctly terminated");
        setErrors(1);
      }
      String cmdstr=environmentSubstitute(meta.getFileName());
      if (Const.getOS().equals("Windows 95")) {
        cmdstr="command.com /C " + cmdstr;
      }
 else {
        if (Const.getOS().startsWith("Windows")) {
          cmdstr="cmd.exe /C " + cmdstr;
        }
      }
      if (isDetailed()) {
        logDetailed("Starting: " + cmdstr);
      }
      Runtime r=Runtime.getRuntime();
      data.cmdProc=r.exec(cmdstr,EnvUtil.getEnvironmentVariablesForRuntimeExec());
      data.writer=data.cmdProc.getOutputStream();
      StreamLogger stdoutLogger=new StreamLogger(log,data.cmdProc.getInputStream(),"(stdout)");
      StreamLogger stderrLogger=new StreamLogger(log,data.cmdProc.getErrorStream(),"(stderr)");
      new Thread(stdoutLogger).start();
      new Thread(stderrLogger).start();
    }
 else {
      if (meta.isCreateParentFolder()) {
        createParentFolder(filename);
      }
      OutputStream outputStream;
      if (!Const.isEmpty(meta.getFileCompression()) && !meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_NONE)) {
        if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_ZIP)) {
          if (log.isDetailed()) {
            logDetailed("Opening output stream in zipped mode");
          }
          if (checkPreviouslyOpened(filename)) {
            data.fos=getOutputStream(filename,getTransMeta(),true);
          }
 else {
            data.fos=getOutputStream(filename,getTransMeta(),meta.isFileAppended());
          }
          data.zip=new ZipOutputStream(data.fos);
          File entry=new File(filename + "." + meta.getExtension());
          ZipEntry zipentry=new ZipEntry(entry.getName());
          zipentry.setComment("Compressed by Kettle");
          data.zip.putNextEntry(zipentry);
          outputStream=data.zip;
        }
 else         if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_GZIP)) {
          if (log.isDetailed()) {
            logDetailed("Opening output stream in gzipped mode");
          }
          if (checkPreviouslyOpened(filename)) {
            data.fos=getOutputStream(filename,getTransMeta(),true);
          }
 else {
            data.fos=getOutputStream(filename,getTransMeta(),meta.isFileAppended());
          }
          data.gzip=new GZIPOutputStream(data.fos);
          outputStream=data.gzip;
        }
 else {
          throw new KettleFileException("No compression method specified!");
        }
      }
 else {
        if (log.isDetailed()) {
          logDetailed("Opening output stream in nocompress mode");
        }
        if (checkPreviouslyOpened(filename)) {
          data.fos=getOutputStream(filename,getTransMeta(),true);
        }
 else {
          data.fos=getOutputStream(filename,getTransMeta(),meta.isFileAppended());
        }
        outputStream=data.fos;
      }
      if (!Const.isEmpty(meta.getEncoding())) {
        if (log.isDetailed()) {
          logDetailed("Opening output stream in encoding: " + meta.getEncoding());
        }
        data.writer=new BufferedOutputStream(outputStream,5000);
      }
 else {
        if (log.isDetailed()) {
          logDetailed("Opening output stream in default encoding");
        }
        data.writer=new BufferedOutputStream(outputStream,5000);
      }
      if (log.isDetailed()) {
        logDetailed("Opened new file with name [" + filename + "]");
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("Error opening new file : " + e.toString());
  }
  data.splitnr++;
  if (meta.isAddToResultFiles()) {
    ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,getFileObject(filename,getTransMeta()),getTransMeta().getName(),getStepname());
    if (resultFile != null) {
      resultFile.setComment(BaseMessages.getString(PKG,"TextFileOutput.AddResultFile"));
      addResultFile(resultFile);
    }
  }
}
