{
  int length=v.getLength();
  if (string == null)   return new byte[]{};
  if (length > -1 && length < string.length()) {
    String tmp=string.substring(0,length);
    if (Const.isEmpty(v.getStringEncoding())) {
      return tmp.getBytes();
    }
 else {
      try {
        return tmp.getBytes(v.getStringEncoding());
      }
 catch (      UnsupportedEncodingException e) {
        throw new KettleValueException("Unable to convert String to Binary with specified string encoding [" + v.getStringEncoding() + "]",e);
      }
    }
  }
 else {
    byte text[];
    if (Const.isEmpty(v.getStringEncoding())) {
      text=string.getBytes();
    }
 else {
      try {
        text=string.getBytes(v.getStringEncoding());
      }
 catch (      UnsupportedEncodingException e) {
        throw new KettleValueException("Unable to convert String to Binary with specified string encoding [" + v.getStringEncoding() + "]",e);
      }
    }
    if (length > string.length()) {
      int size=0;
      byte filler[]=null;
      try {
        if (!Const.isEmpty(meta.getEncoding())) {
          filler=" ".getBytes(meta.getEncoding());
        }
 else {
          filler=" ".getBytes();
        }
        size=text.length + filler.length * (length - string.length());
      }
 catch (      UnsupportedEncodingException uee) {
        throw new KettleValueException(uee);
      }
      byte bytes[]=new byte[size];
      System.arraycopy(text,0,bytes,0,text.length);
      if (filler.length == 1) {
        java.util.Arrays.fill(bytes,text.length,size,filler[0]);
      }
 else {
        int currIndex=text.length;
        for (int i=0; i < (length - string.length()); i++) {
          for (int j=0; j < filler.length; j++) {
            bytes[currIndex++]=filler[j];
          }
        }
      }
      return bytes;
    }
 else {
      return text;
    }
  }
}
