{
  packageName=packageName.replace('.','/');
  ClassLoader loader=getClassLoader();
  Enumeration<URL> urls;
  try {
    urls=loader.getResources(packageName);
  }
 catch (  IOException ioe) {
    log.logError(toString(),"Could not read package: " + packageName,ioe);
    return;
  }
  while (urls.hasMoreElements()) {
    try {
      URL eurl=urls.nextElement();
      String urlPath=eurl.toURI().toString();
      if (urlPath.startsWith("zip:")) {
        urlPath=urlPath.substring(4);
        if (!urlPath.startsWith("file:")) {
          urlPath="file:" + urlPath;
        }
        eurl=new URL(urlPath);
      }
      if (urlPath.indexOf('!') > 0) {
        urlPath=urlPath.substring(0,urlPath.indexOf('!'));
        if (urlPath.startsWith("jar:"))         urlPath=urlPath.substring(4);
        eurl=new URL(urlPath);
      }
      log.logDetailed(toString(),"Scanning for classes in [" + urlPath + "] matching criteria: "+ tests);
      File file=new File(URLDecoder.decode(eurl.getFile(),"UTF-8"));
      if (file.exists() && file.isDirectory()) {
        loadImplementationsInDirectory(packageName,file,tests);
      }
 else {
        loadImplementationsInJar(packageName,eurl,tests);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      log.logError(toString(),"could not read entries",e);
    }
catch (    URISyntaxException se) {
      log.logError(toString(),"could not read entries",se);
    }
  }
}
