{
  if (Const.isEmpty(wStepname.getText())) {
    return;
  }
  stepname=wStepname.getText();
  String inputField=inputFieldControl.getText();
  input.setInputField(inputField);
  input.emptyRules();
  String fallBackValue=fallBackValueControl.getText();
  input.setFallBackValue(fallBackValue);
  input.setOutputField(outputFieldControl.getText());
  int count=rulesControl.nrNonEmpty();
  for (int i=0; i < count; i++) {
    TableItem item=rulesControl.getNonEmpty(i);
    String lowerBoundStr=Const.isEmpty(item.getText(1)) ? String.valueOf(-Double.MAX_VALUE) : item.getText(1);
    String upperBoundStr=Const.isEmpty(item.getText(2)) ? String.valueOf(Double.MAX_VALUE) : item.getText(2);
    String value=item.getText(3);
    try {
      double lowerBound=Double.parseDouble(lowerBoundStr);
      double upperBound=Double.parseDouble(upperBoundStr);
      input.addRule(lowerBound,upperBound,value);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Bounds of this rule are not numeric: lowerBound=" + lowerBoundStr + ", upperBound="+ upperBoundStr+ ", value="+ value,e);
    }
  }
  dispose();
}
