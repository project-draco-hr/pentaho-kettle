{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  backupChanged=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"SASInputDialog.Dialog.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  Control lastControl=wStepname;
  Label wlAccField=new Label(shell,SWT.RIGHT);
  wlAccField.setText(BaseMessages.getString(PKG,"SASInputDialog.AcceptField.Label"));
  props.setLook(wlAccField);
  FormData fdlAccField=new FormData();
  fdlAccField.top=new FormAttachment(lastControl,margin);
  fdlAccField.left=new FormAttachment(0,0);
  fdlAccField.right=new FormAttachment(middle,-margin);
  wlAccField.setLayoutData(fdlAccField);
  wAccField=new CCombo(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wAccField.setToolTipText(BaseMessages.getString(PKG,"SASInputDialog.AcceptField.Tooltip"));
  props.setLook(wAccField);
  FormData fdAccField=new FormData();
  fdAccField.top=new FormAttachment(lastControl,margin);
  fdAccField.left=new FormAttachment(middle,0);
  fdAccField.right=new FormAttachment(100,0);
  wAccField.setLayoutData(fdAccField);
  lastControl=wAccField;
  try {
    RowMetaInterface fields=transMeta.getPrevStepFields(stepMeta);
    wAccField.setItems(fields.getFieldNames());
  }
 catch (  Exception e) {
    LogChannel.GENERAL.logError("Couldn't get input fields for step '" + stepMeta + "'",e);
  }
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wOK.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
);
  wGet=new Button(shell,SWT.PUSH);
  wGet.setText(BaseMessages.getString(PKG,"System.Button.GetFields"));
  wGet.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
);
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  wCancel.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
);
  setButtonPositions(new Button[]{wOK,wGet,wCancel},margin,null);
  Label wlFields=new Label(shell,SWT.LEFT);
  wlFields.setText(BaseMessages.getString(PKG,"SASInputDialog.Fields.Label"));
  props.setLook(wlFields);
  FormData fdlFields=new FormData();
  fdlFields.top=new FormAttachment(lastControl,margin);
  fdlFields.left=new FormAttachment(0,0);
  fdlFields.right=new FormAttachment(100,0);
  wlFields.setLayoutData(fdlFields);
  lastControl=wlFields;
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Name"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Rename"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Type"),ColumnInfo.COLUMN_TYPE_CCOMBO,ValueMeta.getTypes(),true),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Mask"),ColumnInfo.COLUMN_TYPE_FORMAT,2),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Length"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Precision"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Decimal"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.Group"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SASInputDialog.OutputFieldColumn.TrimType"),ColumnInfo.COLUMN_TYPE_CCOMBO,ValueMeta.trimTypeDesc)};
  colinf[3].setComboValuesSelectionListener(new ComboValuesSelectionListener(){
    public String[] getComboValues(    TableItem tableItem,    int rowNr,    int colNr){
      String[] comboValues=new String[]{};
      int type=ValueMeta.getType(tableItem.getText(colNr - 1));
switch (type) {
case ValueMetaInterface.TYPE_DATE:
        comboValues=Const.getDateFormats();
      break;
case ValueMetaInterface.TYPE_INTEGER:
case ValueMetaInterface.TYPE_BIGNUMBER:
case ValueMetaInterface.TYPE_NUMBER:
    comboValues=Const.getNumberFormats();
  break;
default :
break;
}
return comboValues;
}
}
);
wFields=new TableView(transMeta,shell,SWT.FULL_SELECTION | SWT.MULTI,colinf,1,lsMod,props);
FormData fdFields=new FormData();
fdFields.top=new FormAttachment(lastControl,margin * 2);
fdFields.bottom=new FormAttachment(wOK,-margin * 2);
fdFields.left=new FormAttachment(0,0);
fdFields.right=new FormAttachment(100,0);
wFields.setLayoutData(fdFields);
lsDef=new SelectionAdapter(){
public void widgetDefaultSelected(SelectionEvent e){
ok();
}
}
;
wStepname.addSelectionListener(lsDef);
shell.addShellListener(new ShellAdapter(){
public void shellClosed(ShellEvent e){
cancel();
}
}
);
getData();
input.setChanged(changed);
setSize();
shell.open();
while (!shell.isDisposed()) {
if (!display.readAndDispatch()) display.sleep();
}
return stepname;
}
