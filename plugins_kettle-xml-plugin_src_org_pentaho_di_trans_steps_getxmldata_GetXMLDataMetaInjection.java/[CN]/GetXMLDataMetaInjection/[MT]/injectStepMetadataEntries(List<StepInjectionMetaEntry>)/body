{
  List<GetXMLDataMetaInjection.FilenameLine> filenameLines=new ArrayList<GetXMLDataMetaInjection.FilenameLine>();
  List<GetXMLDataField> fields=new ArrayList<GetXMLDataField>();
  for (  StepInjectionMetaEntry lookFields : all) {
    String lookFieldsValue=lookFields.getValue() instanceof String ? (String)lookFields.getValue() : null;
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
switch (fieldsEntry) {
case FILENAMES:
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry != null) {
            if (fieldEntry == Entry.FILENAME) {
              String fileName=null;
              String fileMask=null;
              String fileRequired=null;
              String excludeFileMask=null;
              String includeSubFolders=null;
              List<StepInjectionMetaEntry> entries=lookField.getDetails();
              for (              StepInjectionMetaEntry entry : entries) {
                Entry metaEntry=Entry.findEntry(entry.getKey());
                if (metaEntry != null) {
                  String value=(String)entry.getValue();
switch (metaEntry) {
case FILE_PATH:
                    fileName=value;
                  break;
case FILE_INCLUDE_MASK:
                fileMask=value;
              break;
case FILE_EXCLUDE_MASK:
            excludeFileMask=value;
          break;
case FILE_REQUIRED:
        fileRequired=value;
      break;
case FILE_INCLUDE_SUBFOLDERS:
    includeSubFolders=value;
  break;
default :
break;
}
}
}
if (!Utils.isEmpty(fileName)) {
filenameLines.add(new FilenameLine(fileName,fileMask,fileRequired,excludeFileMask,includeSubFolders));
}
}
}
}
break;
case INPUTFIELDS:
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
Entry fieldEntry=Entry.findEntry(lookField.getKey());
if (fieldEntry != null) {
if (fieldEntry == Entry.INPUTFIELD) {
GetXMLDataField field=new GetXMLDataField();
List<StepInjectionMetaEntry> entries=lookField.getDetails();
for (StepInjectionMetaEntry entry : entries) {
Entry metaEntry=Entry.findEntry(entry.getKey());
if (metaEntry != null) {
String value=(String)entry.getValue();
switch (metaEntry) {
case INPUTFIELD_NAME:
field.setName(value);
break;
case INPUTFIELD_XPATH:
field.setXPath(value);
break;
case INPUTFIELD_TYPE:
field.setType(ValueMetaFactory.getIdForValueMeta(value));
break;
case INPUTFIELD_ELEMENT_TYPE:
field.setElementType(GetXMLDataField.getElementTypeByCode(value));
break;
case INPUTFIELD_RESULT_TYPE:
field.setResultType(GetXMLDataField.getResultTypeByCode(value));
break;
case INPUTFIELD_LENGTH:
field.setLength(Const.toInt(value,-1));
break;
case INPUTFIELD_PRECISION:
field.setPrecision(Const.toInt(value,-1));
break;
case INPUTFIELD_FORMAT:
field.setFormat(value);
break;
case INPUTFIELD_TRIM_TYPE:
field.setTrimType(ValueMeta.getTrimTypeByCode(value));
break;
case INPUTFIELD_CURRENCY:
field.setCurrencySymbol(value);
break;
case INPUTFIELD_GROUPING:
field.setGroupSymbol(value);
break;
case INPUTFIELD_DECIMAL:
field.setDecimalSymbol(value);
break;
case INPUTFIELD_REPEAT:
field.setRepeated("Y".equalsIgnoreCase(value));
break;
default :
break;
}
}
}
fields.add(field);
}
}
}
break;
case INCLUDE_ROWNUMBER:
meta.setIncludeRowNumber("Y".equalsIgnoreCase(lookFieldsValue));
break;
case ROWNUMBER_FIELD:
meta.setRowNumberField(lookFieldsValue);
break;
case ROWLIMIT:
meta.setRowLimit(Const.toLong(lookFieldsValue,0L));
break;
case LOOP_XPATH:
meta.setLoopXPath(lookFieldsValue);
break;
case ENCODING:
meta.setEncoding(lookFieldsValue);
break;
case XML_FIELD:
meta.setXMLField(lookFieldsValue);
break;
case IN_FIELD:
meta.setInFields("Y".equalsIgnoreCase(lookFieldsValue));
break;
case IN_FILE:
meta.setIsAFile("Y".equalsIgnoreCase(lookFieldsValue));
break;
case ADD_RESULT_FILE:
meta.setAddResultFile("Y".equalsIgnoreCase(lookFieldsValue));
break;
case NAMESPACE_AWARE:
meta.setNamespaceAware("Y".equalsIgnoreCase(lookFieldsValue));
break;
case VALIDATE:
meta.setValidating("Y".equalsIgnoreCase(lookFieldsValue));
break;
case USE_TOKENS:
meta.setuseToken("Y".equalsIgnoreCase(lookFieldsValue));
break;
case IGNORE_EMPTY_FILES:
meta.setIgnoreEmptyFile("Y".equalsIgnoreCase(lookFieldsValue));
break;
case IGNORE_MISSING_FILES:
meta.setdoNotFailIfNoFile("Y".equalsIgnoreCase(lookFieldsValue));
break;
case IGNORE_COMMENTS:
meta.setIgnoreComments("Y".equalsIgnoreCase(lookFieldsValue));
break;
case READ_URL:
meta.setReadUrl("Y".equalsIgnoreCase(lookFieldsValue));
break;
case PRUNE_PATH:
meta.setPrunePath(lookFieldsValue);
break;
case SHORT_FILE_FIELDNAME:
meta.setShortFileNameField(lookFieldsValue);
break;
case FILE_PATH_FIELDNAME:
meta.setFilenameField(lookFieldsValue);
break;
case FILE_HIDDEN_FIELDNAME:
meta.setIsHiddenField(lookFieldsValue);
break;
case FILE_MODIFICATION_FIELDNAME:
meta.setLastModificationDateField(lookFieldsValue);
break;
case FILE_URI_NAME_FIELDNAME:
meta.setUriField(lookFieldsValue);
break;
case FILE_ROOT_URI_FIELDNAME:
meta.setRootUriField(lookFieldsValue);
break;
case FILE_EXTENSION_FIELDNAME:
meta.setExtensionField(lookFieldsValue);
break;
case FILE_SIZE_FIELDNAME:
meta.setSizeField(lookFieldsValue);
break;
default :
break;
}
}
}
if (fields.size() > 0) {
meta.setInputFields(fields.toArray(new GetXMLDataField[fields.size()]));
}
if (filenameLines.size() > 0) {
meta.allocateFiles(filenameLines.size());
for (int i=0; i < filenameLines.size(); i++) {
FilenameLine line=filenameLines.get(i);
meta.getFileName()[i]=line.fileName;
meta.getFileMask()[i]=line.fileMask;
meta.getFileRequired()[i]=line.fileRequired;
meta.getExludeFileMask()[i]=line.excludeFileMask;
meta.getIncludeSubFolders()[i]=line.includeSubFolders;
}
}
}
