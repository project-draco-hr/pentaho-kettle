{
  try {
    IReportRunnable report=loadMasterReport(sourceFilename);
    IRunAndRenderTask task=engine.createRunAndRenderTask(report);
    IGetParameterDefinitionTask paramTask=engine.createGetParameterDefinitionTask(report);
    Collection<?> definition=paramTask.getParameterDefns(true);
    for (    String parameterName : meta.getParameterFieldMap().keySet()) {
      String fieldName=meta.getParameterFieldMap().get(parameterName);
      if (fieldName != null) {
        int index=getInputRowMeta().indexOfValue(fieldName);
        if (index < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"PentahoReportingOutput.Exception.CanNotFindField",fieldName));
        }
        int paramType=findParameterClass(definition,parameterName);
        Object value=null;
        if (paramType != -1) {
          System.out.println("######################################");
          System.out.println("param class: " + paramType);
          if (paramType == IParameterDefn.TYPE_ANY) {
            value=getInputRowMeta().getValueMeta(index).convertToNormalStorageType(r[index]);
          }
 else           if (paramType == IParameterDefn.TYPE_STRING) {
            value=getInputRowMeta().getString(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_FLOAT) {
            value=getInputRowMeta().getNumber(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_DECIMAL) {
            value=getInputRowMeta().getBigNumber(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_DATE_TIME) {
            value=getInputRowMeta().getDate(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_BOOLEAN) {
            value=getInputRowMeta().getBoolean(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_INTEGER) {
            value=getInputRowMeta().getInteger(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_DATE) {
            value=getInputRowMeta().getDate(r,index);
          }
 else           if (paramType == IParameterDefn.TYPE_TIME) {
            value=getInputRowMeta().getDate(r,index);
          }
          System.out.println("setting param " + parameterName + " to "+ value);
          task.setParameterValue(parameterName,value);
          System.out.println("######################################");
        }
 else {
          logBasic(BaseMessages.getString(PKG,"BIRTOutput.Log.ParameterNotFoundInReport",parameterName,sourceFilename));
        }
      }
    }
    IRenderOption options=new RenderOption();
switch (outputProcessorType) {
case PDF:
      options.setOutputFormat("pdf");
    PDFRenderOption pdfOptions=new PDFRenderOption(options);
  pdfOptions.setOption(IPDFRenderOption.FIT_TO_PAGE,true);
pdfOptions.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,true);
break;
case HTML:
options.setOutputFormat("html");
HTMLRenderOption htmlOptions=new HTMLRenderOption(options);
htmlOptions.setImageDirectory("output/image");
htmlOptions.setHtmlPagination(false);
htmlOptions.setBaseImageURL("http://myhost/prependme?image=1");
htmlOptions.setHtmlRtLFlag(false);
htmlOptions.setEmbeddable(false);
break;
case XLS:
options.setOutputFormat("xls");
break;
case POSTSCRIPT:
options.setOutputFormat("postscript");
break;
case DOC:
options.setOutputFormat("doc");
break;
case PPT:
options.setOutputFormat("ppt");
break;
}
options.setOutputFileName(targetFilename);
task.setRenderOption(options);
task.run();
ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(targetFilename,getTransMeta()),getTransMeta().getName(),getStepname());
resultFile.setComment("This file was created with the Pentaho BIRT Output step");
addResultFile(resultFile);
}
 catch (Exception e) {
throw new KettleException(BaseMessages.getString(PKG,"PentahoReportingOutput.Exception.UnexpectedErrorRenderingReport",sourceFilename,targetFilename,outputProcessorType.getDescription()),e);
}
}
