{
  Object[] groupData=new Object[data.groupMeta.size()];
  for (int i=0; i < data.groupnrs.length; i++) {
    groupData[i]=r[data.groupnrs[i]];
  }
  HashEntry entry=data.getHashEntry(groupData);
  Aggregate aggregate=data.map.get(entry);
  if (aggregate == null) {
    aggregate=new Aggregate();
    newAggregate(r,aggregate);
    data.map.put(entry,aggregate);
  }
  for (int i=0; i < data.subjectnrs.length; i++) {
    Object subj=r[data.subjectnrs[i]];
    ValueMetaInterface subjMeta=data.inputRowMeta.getValueMeta(data.subjectnrs[i]);
    Object value=aggregate.agg[i];
    ValueMetaInterface valueMeta=data.aggMeta.getValueMeta(i);
switch (meta.getAggregateType()[i]) {
case MemoryGroupByMeta.TYPE_GROUP_SUM:
      aggregate.agg[i]=ValueDataUtil.sum(valueMeta,value,subjMeta,subj);
    break;
case MemoryGroupByMeta.TYPE_GROUP_AVERAGE:
  if (!subjMeta.isNull(subj)) {
    aggregate.agg[i]=ValueDataUtil.sum(valueMeta,value,subjMeta,subj);
    aggregate.counts[i]++;
  }
break;
case MemoryGroupByMeta.TYPE_GROUP_MEDIAN:
case MemoryGroupByMeta.TYPE_GROUP_PERCENTILE:
if (!subjMeta.isNull(subj)) {
((List<Double>)aggregate.agg[i]).add(subjMeta.getNumber(subj));
}
break;
case MemoryGroupByMeta.TYPE_GROUP_STANDARD_DEVIATION:
if (aggregate.mean == null) {
aggregate.mean=new double[meta.getSubjectField().length];
}
aggregate.counts[i]++;
double n=aggregate.counts[i];
double x=subjMeta.getNumber(subj);
double sum=value == null ? new Double(0) : (Double)value;
double mean=aggregate.mean[i];
double delta=x - mean;
mean=mean + (delta / n);
sum=sum + delta * (x - mean);
aggregate.mean[i]=mean;
aggregate.agg[i]=sum;
break;
case MemoryGroupByMeta.TYPE_GROUP_COUNT_DISTINCT:
if (aggregate.distinctObjs == null) {
aggregate.distinctObjs=new Set[meta.getSubjectField().length];
}
if (aggregate.distinctObjs[i] == null) {
aggregate.distinctObjs[i]=new TreeSet<>();
}
if (!subjMeta.isNull(subj)) {
Object obj=subjMeta.convertToNormalStorageType(subj);
if (!aggregate.distinctObjs[i].contains(obj)) {
aggregate.distinctObjs[i].add(obj);
}
}
aggregate.counts[i]=aggregate.distinctObjs[i].size();
break;
case MemoryGroupByMeta.TYPE_GROUP_COUNT_ALL:
if (!subjMeta.isNull(subj)) {
aggregate.counts[i]++;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_COUNT_ANY:
aggregate.counts[i]++;
break;
case MemoryGroupByMeta.TYPE_GROUP_MIN:
if (minNullIsValued || (subj != null && value != null)) {
aggregate.agg[i]=subjMeta.compare(subj,valueMeta,value) < 0 ? subj : value;
}
 else if (value == null && subj != null) {
aggregate.agg[i]=subj;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_MAX:
if (subjMeta.compare(subj,valueMeta,value) > 0) {
aggregate.agg[i]=subj;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_FIRST:
if (!subjMeta.isNull(subj) && value == null) {
aggregate.agg[i]=subj;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_LAST:
if (!subjMeta.isNull(subj)) {
aggregate.agg[i]=subj;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_FIRST_INCL_NULL:
if (aggregate.counts[i] == 0) {
aggregate.agg[i]=subj;
aggregate.counts[i]++;
}
break;
case MemoryGroupByMeta.TYPE_GROUP_LAST_INCL_NULL:
aggregate.agg[i]=subj;
break;
case MemoryGroupByMeta.TYPE_GROUP_CONCAT_COMMA:
if (!(subj == null)) {
StringBuilder sb=(StringBuilder)value;
if (sb.length() > 0) {
sb.append(", ");
}
sb.append(subjMeta.getString(subj));
}
break;
case MemoryGroupByMeta.TYPE_GROUP_CONCAT_STRING:
if (!(subj == null)) {
String separator="";
if (!Utils.isEmpty(meta.getValueField()[i])) {
separator=environmentSubstitute(meta.getValueField()[i]);
}
StringBuilder sb=(StringBuilder)value;
if (sb.length() > 0) {
sb.append(separator);
}
sb.append(subjMeta.getString(subj));
}
break;
default :
break;
}
}
}
