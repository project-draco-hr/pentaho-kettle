{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("blockingsteptest");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.class,im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,im);
  transMeta.addStep(injectorStep);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=registry.getPluginId(StepPluginType.class,dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hi=new TransHopMeta(injectorStep,dummyStep1);
  transMeta.addTransHop(hi);
  String blockingStepname="blocking step";
  BlockingStepMeta bm=new BlockingStepMeta();
  bm.setPassAllRows(true);
  String blockingStepPid=registry.getPluginId(StepPluginType.class,bm);
  StepMeta blockingStep=new StepMeta(blockingStepPid,blockingStepname,bm);
  transMeta.addStep(blockingStep);
  TransHopMeta hi2=new TransHopMeta(dummyStep1,blockingStep);
  transMeta.addTransHop(hi2);
  String dummyStepname2="dummy step 2";
  DummyTransMeta dm2=new DummyTransMeta();
  String dummyPid2=registry.getPluginId(StepPluginType.class,dm2);
  StepMeta dummyStep2=new StepMeta(dummyPid2,dummyStepname2,dm2);
  transMeta.addStep(dummyStep2);
  TransHopMeta hi3=new TransHopMeta(blockingStep,dummyStep2);
  transMeta.addTransHop(hi3);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector dummyRc1=new RowStepCollector();
  si.addRowListener(dummyRc1);
  si=trans.getStepInterface(blockingStepname,0);
  RowStepCollector blockingRc=new RowStepCollector();
  si.addRowListener(blockingRc);
  si=trans.getStepInterface(dummyStepname2,0);
  RowStepCollector dummyRc2=new RowStepCollector();
  si.addRowListener(dummyRc2);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createData();
  Iterator<RowMetaAndData> it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows1=dummyRc1.getRowsWritten();
  checkRows(resultRows1,inputList);
  List<RowMetaAndData> resultRows2=blockingRc.getRowsWritten();
  checkRows(resultRows2,inputList);
  List<RowMetaAndData> resultRows3=dummyRc2.getRowsWritten();
  checkRows(resultRows3,inputList);
}
