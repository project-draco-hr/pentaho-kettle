{
  String schemaname=null;
  if (databaseMeta.useSchemaNameForTableList())   schemaname=environmentSubstitute(databaseMeta.getUsername()).toUpperCase();
  List<String> names=new ArrayList<String>();
  ResultSet alltables=null;
  try {
    alltables=getDatabaseMetaData().getTables(null,schemaname,null,databaseMeta.getTableTypes());
    while (alltables.next()) {
      String table=alltables.getString("TABLE_NAME");
      String schema=alltables.getString("TABLE_SCHEM");
      if (Const.isEmpty(schema))       schema=alltables.getString("TABLE_CAT");
      String schemaTable;
      if (includeSchema)       schemaTable=databaseMeta.getQuotedSchemaTableCombination(schema,table);
 else       schemaTable=table;
      if (log.isRowLevel())       log.logRowlevel(toString(),"got table from meta-data: " + schemaTable);
      names.add(schemaTable);
    }
  }
 catch (  SQLException e) {
    log.logError(toString(),"Error getting tablenames from schema [" + schemaname + "]");
  }
 finally {
    try {
      if (alltables != null)       alltables.close();
    }
 catch (    SQLException e) {
      throw new KettleDatabaseException("Error closing resultset after getting views from schema [" + schemaname + "]",e);
    }
  }
  if (log.isDetailed())   log.logDetailed(toString(),"read :" + names.size() + " table names from db meta-data.");
  return names.toArray(new String[names.size()]);
}
