{
  RowMetaAndData ret;
  try {
    cstmt.execute();
    ret=new RowMetaAndData();
    int pos=1;
    if (resultname != null && resultname.length() != 0) {
      ValueMeta vMeta=new ValueMeta(resultname,resulttype);
      Object v=null;
switch (resulttype) {
case ValueMetaInterface.TYPE_BOOLEAN:
        v=Boolean.valueOf(cstmt.getBoolean(pos));
      break;
case ValueMetaInterface.TYPE_NUMBER:
    v=new Double(cstmt.getDouble(pos));
  break;
case ValueMetaInterface.TYPE_BIGNUMBER:
v=cstmt.getBigDecimal(pos);
break;
case ValueMetaInterface.TYPE_INTEGER:
v=Long.valueOf(cstmt.getLong(pos));
break;
case ValueMetaInterface.TYPE_STRING:
v=cstmt.getString(pos);
break;
case ValueMetaInterface.TYPE_BINARY:
if (databaseMeta.supportsGetBlob()) {
Blob blob=cstmt.getBlob(pos);
if (blob != null) {
v=blob.getBytes(1L,(int)blob.length());
}
 else {
v=null;
}
}
 else {
v=cstmt.getBytes(pos);
}
break;
case ValueMetaInterface.TYPE_DATE:
if (databaseMeta.supportsTimeStampToDateConversion()) {
v=cstmt.getTimestamp(pos);
}
 else {
v=cstmt.getDate(pos);
}
break;
}
ret.addValue(vMeta,v);
pos++;
}
for (int i=0; i < arg.length; i++) {
if (argdir[i].equalsIgnoreCase("OUT") || argdir[i].equalsIgnoreCase("INOUT")) {
ValueMeta vMeta=new ValueMeta(arg[i],argtype[i]);
Object v=null;
switch (argtype[i]) {
case ValueMetaInterface.TYPE_BOOLEAN:
v=Boolean.valueOf(cstmt.getBoolean(pos + i));
break;
case ValueMetaInterface.TYPE_NUMBER:
v=new Double(cstmt.getDouble(pos + i));
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
v=cstmt.getBigDecimal(pos + i);
break;
case ValueMetaInterface.TYPE_INTEGER:
v=Long.valueOf(cstmt.getLong(pos + i));
break;
case ValueMetaInterface.TYPE_STRING:
v=cstmt.getString(pos + i);
break;
case ValueMetaInterface.TYPE_BINARY:
if (databaseMeta.supportsGetBlob()) {
Blob blob=cstmt.getBlob(pos + i);
if (blob != null) {
v=blob.getBytes(1L,(int)blob.length());
}
 else {
v=null;
}
}
 else {
v=cstmt.getBytes(pos + i);
}
break;
case ValueMetaInterface.TYPE_DATE:
if (databaseMeta.supportsTimeStampToDateConversion()) {
v=cstmt.getTimestamp(pos + i);
}
 else {
v=cstmt.getDate(pos + i);
}
break;
}
ret.addValue(vMeta,v);
}
}
return ret;
}
 catch (SQLException ex) {
throw new KettleDatabaseException("Unable to call procedure",ex);
}
}
