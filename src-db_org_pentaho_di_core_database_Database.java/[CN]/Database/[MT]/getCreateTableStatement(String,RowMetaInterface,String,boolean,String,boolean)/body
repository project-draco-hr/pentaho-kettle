{
  StringBuilder retval=new StringBuilder("CREATE TABLE ");
  retval.append(tableName + Const.CR);
  retval.append("(").append(Const.CR);
  for (int i=0; i < fields.size(); i++) {
    if (i > 0)     retval.append(", ");
 else     retval.append("  ");
    ValueMetaInterface v=fields.getValueMeta(i);
    retval.append(databaseMeta.getFieldDefinition(v,tk,pk,use_autoinc));
  }
  if (tk != null) {
    if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_CACHE) {
      retval.append(", PRIMARY KEY (").append(tk).append(")").append(Const.CR);
    }
  }
  if (pk != null) {
    if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE) {
      retval.append(", PRIMARY KEY (").append(pk).append(")").append(Const.CR);
    }
  }
  retval.append(")").append(Const.CR);
  if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE && databaseMeta.getIndexTablespace() != null && databaseMeta.getIndexTablespace().length() > 0) {
    retval.append("TABLESPACE ").append(databaseMeta.getDataTablespace());
  }
  if (pk == null && tk == null && databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_NEOVIEW) {
    retval.append("NO PARTITION");
  }
  if (semicolon)   retval.append(";");
  if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_VERTICA) {
    retval.append(Const.CR).append("CREATE PROJECTION ").append(tableName).append("_unseg_super").append(Const.CR);
    retval.append("(").append(Const.CR);
    for (int i=0; i < fields.size(); i++) {
      if (i > 0)       retval.append(", ");
 else       retval.append("  ");
      retval.append(fields.getValueMeta(i).getName()).append(Const.CR);
    }
    retval.append(")").append(Const.CR);
    retval.append("AS SELECT").append(Const.CR);
    for (int i=0; i < fields.size(); i++) {
      if (i > 0)       retval.append(", ");
 else       retval.append("  ");
      retval.append(fields.getValueMeta(i).getName()).append(Const.CR);
    }
    retval.append("FROM ").append(tableName).append(Const.CR);
    retval.append("-- Replace UNSEGMENTED with a hash segmentation for optimum performance").append(Const.CR);
    retval.append("--SEGMENTED BY HASH(X,Y,Z)").append(Const.CR);
    retval.append("UNSEGMENTED ALL NODES").append(Const.CR);
    retval.append(";");
  }
  return retval.toString();
}
