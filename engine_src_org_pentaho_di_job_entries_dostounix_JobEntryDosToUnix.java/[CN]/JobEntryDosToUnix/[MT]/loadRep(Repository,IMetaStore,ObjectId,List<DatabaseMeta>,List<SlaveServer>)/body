{
  try {
    arg_from_previous=rep.getJobEntryAttributeBoolean(id_jobentry,"arg_from_previous");
    include_subfolders=rep.getJobEntryAttributeBoolean(id_jobentry,"include_subfolders");
    nr_errors_less_than=rep.getJobEntryAttributeString(id_jobentry,"nr_errors_less_than");
    success_condition=rep.getJobEntryAttributeString(id_jobentry,"success_condition");
    resultfilenames=rep.getJobEntryAttributeString(id_jobentry,"resultfilenames");
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"source_filefolder");
    source_filefolder=new String[argnr];
    wildcard=new String[argnr];
    conversionTypes=new int[argnr];
    for (int a=0; a < argnr; a++) {
      source_filefolder[a]=rep.getJobEntryAttributeString(id_jobentry,a,"source_filefolder");
      wildcard[a]=rep.getJobEntryAttributeString(id_jobentry,a,"wildcard");
      conversionTypes[a]=getConversionTypeByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"ConversionType"),""));
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobDosToUnix.Error.Exception.UnableLoadRep") + id_jobentry,dbe);
  }
}
