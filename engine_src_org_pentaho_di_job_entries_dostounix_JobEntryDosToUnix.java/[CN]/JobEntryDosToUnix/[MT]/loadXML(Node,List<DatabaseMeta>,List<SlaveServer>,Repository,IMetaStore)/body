{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    arg_from_previous="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    include_subfolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"include_subfolders"));
    nr_errors_less_than=XMLHandler.getTagValue(entrynode,"nr_errors_less_than");
    success_condition=XMLHandler.getTagValue(entrynode,"success_condition");
    resultfilenames=XMLHandler.getTagValue(entrynode,"resultfilenames");
    Node fields=XMLHandler.getSubNode(entrynode,"fields");
    int nrFields=XMLHandler.countNodes(fields,"field");
    source_filefolder=new String[nrFields];
    wildcard=new String[nrFields];
    conversionTypes=new int[nrFields];
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      source_filefolder[i]=XMLHandler.getTagValue(fnode,"source_filefolder");
      wildcard[i]=XMLHandler.getTagValue(fnode,"wildcard");
      conversionTypes[i]=getConversionTypeByCode(Const.NVL(XMLHandler.getTagValue(fnode,"ConversionType"),""));
    }
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"JobDosToUnix.Error.Exception.UnableLoadXML"),xe);
  }
}
