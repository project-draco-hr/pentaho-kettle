{
  Result result=previousResult;
  result.setResult(false);
  logBasic(BaseMessages.getString(PKG,"JobHTTP.StartJobEntry"));
  List<RowMetaAndData> resultRows;
  String urlFieldnameToUse;
  if (Const.isEmpty(urlFieldname)) {
    urlFieldnameToUse=URL_FIELDNAME;
  }
 else {
    urlFieldnameToUse=urlFieldname;
  }
  if (runForEveryRow) {
    resultRows=previousResult.getRows();
    if (resultRows == null) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobHTTP.Error.UnableGetResultPrevious"));
      return result;
    }
  }
 else {
    resultRows=new ArrayList<RowMetaAndData>();
    RowMetaAndData row=new RowMetaAndData();
    row.addValue(new ValueMetaString(urlFieldnameToUse),environmentSubstitute(url));
    resultRows.add(row);
  }
  URL server=null;
  String beforeProxyHost=System.getProperty("http.proxyHost");
  String beforeProxyPort=System.getProperty("http.proxyPort");
  String beforeNonProxyHosts=System.getProperty("http.nonProxyHosts");
  for (int i=0; i < resultRows.size() && result.getNrErrors() == 0; i++) {
    RowMetaAndData row=resultRows.get(i);
    OutputStream outputFile=null;
    OutputStream uploadStream=null;
    BufferedInputStream fileStream=null;
    InputStream input=null;
    try {
      String urlToUse=environmentSubstitute(row.getString(urlFieldnameToUse,""));
      logBasic(BaseMessages.getString(PKG,"JobHTTP.Log.ConnectingURL",urlToUse));
      if (!Const.isEmpty(proxyHostname)) {
        System.setProperty("http.proxyHost",environmentSubstitute(proxyHostname));
        System.setProperty("http.proxyPort",environmentSubstitute(proxyPort));
        if (nonProxyHosts != null) {
          System.setProperty("http.nonProxyHosts",environmentSubstitute(nonProxyHosts));
        }
      }
      if (!Const.isEmpty(username)) {
        Authenticator.setDefault(new Authenticator(){
          @Override protected PasswordAuthentication getPasswordAuthentication(){
            String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
            return new PasswordAuthentication(environmentSubstitute(username),realPassword != null ? realPassword.toCharArray() : new char[]{});
          }
        }
);
      }
      String realTargetFile=environmentSubstitute(targetFilename);
      if (dateTimeAdded) {
        SimpleDateFormat daf=new SimpleDateFormat();
        Date now=new Date();
        daf.applyPattern("yyyMMdd");
        realTargetFile+="_" + daf.format(now);
        daf.applyPattern("HHmmss");
        realTargetFile+="_" + daf.format(now);
        if (!Const.isEmpty(targetFilenameExtention)) {
          realTargetFile+="." + environmentSubstitute(targetFilenameExtention);
        }
      }
      outputFile=KettleVFS.getOutputStream(realTargetFile,this,fileAppended);
      server=new URL(urlToUse);
      URLConnection connection=server.openConnection();
      if (!Const.isEmpty(headerName)) {
        if (log.isDebug()) {
          log.logDebug(BaseMessages.getString(PKG,"JobHTTP.Log.HeadersProvided"));
        }
        for (int j=0; j < headerName.length; j++) {
          if (!Const.isEmpty(headerValue[j])) {
            connection.setRequestProperty(environmentSubstitute(headerName[j]),environmentSubstitute(headerValue[j]));
            if (log.isDebug()) {
              log.logDebug(BaseMessages.getString(PKG,"JobHTTP.Log.HeaderSet",environmentSubstitute(headerName[j]),environmentSubstitute(headerValue[j])));
            }
          }
        }
      }
      connection.setDoOutput(true);
      String realUploadFilename=environmentSubstitute(uploadFilename);
      if (!Const.isEmpty(realUploadFilename)) {
        if (log.isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"JobHTTP.Log.SendingFile",realUploadFilename));
        }
        uploadStream=connection.getOutputStream();
        fileStream=new BufferedInputStream(new FileInputStream(new File(realUploadFilename)));
        try {
          int c;
          while ((c=fileStream.read()) >= 0) {
            uploadStream.write(c);
          }
        }
  finally {
          if (uploadStream != null) {
            uploadStream.close();
            uploadStream=null;
          }
          if (fileStream != null) {
            fileStream.close();
            fileStream=null;
          }
        }
        if (log.isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"JobHTTP.Log.FinishedSendingFile"));
        }
      }
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobHTTP.Log.StartReadingReply"));
      }
      input=connection.getInputStream();
      Date date=new Date(connection.getLastModified());
      logBasic(BaseMessages.getString(PKG,"JobHTTP.Log.ReplayInfo",connection.getContentType(),date));
      int oneChar;
      long bytesRead=0L;
      while ((oneChar=input.read()) != -1) {
        outputFile.write(oneChar);
        bytesRead++;
      }
      logBasic(BaseMessages.getString(PKG,"JobHTTP.Log.FinisedWritingReply",bytesRead,realTargetFile));
      if (addfilenameresult) {
        ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realTargetFile,this),parentJob.getJobname(),toString());
        result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
      }
      result.setResult(true);
    }
 catch (    MalformedURLException e) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobHTTP.Error.NotValidURL",url,e.getMessage()));
      logError(Const.getStackTracker(e));
    }
catch (    IOException e) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobHTTP.Error.CanNotSaveHTTPResult",e.getMessage()));
      logError(Const.getStackTracker(e));
    }
catch (    Exception e) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobHTTP.Error.ErrorGettingFromHTTP",e.getMessage()));
      logError(Const.getStackTracker(e));
    }
 finally {
      try {
        if (uploadStream != null) {
          uploadStream.close();
        }
        if (fileStream != null) {
          fileStream.close();
        }
        if (input != null) {
          input.close();
        }
        if (outputFile != null) {
          outputFile.close();
        }
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"JobHTTP.Error.CanNotCloseStream",e.getMessage()));
        result.setNrErrors(1);
      }
      System.setProperty("http.proxyHost",Const.NVL(beforeProxyHost,""));
      System.setProperty("http.proxyPort",Const.NVL(beforeProxyPort,""));
      System.setProperty("http.nonProxyHosts",Const.NVL(beforeNonProxyHosts,""));
    }
  }
  return result;
}
