{
  try {
    url=rep.getJobEntryAttributeString(id_jobentry,"url");
    targetFilename=rep.getJobEntryAttributeString(id_jobentry,"targetfilename");
    fileAppended=rep.getJobEntryAttributeBoolean(id_jobentry,"file_appended");
    dateTimeAdded=rep.getJobEntryAttributeBoolean(id_jobentry,"date_time_added");
    targetFilenameExtention=rep.getJobEntryAttributeString(id_jobentry,"targetfilename_extention");
    uploadFilename=rep.getJobEntryAttributeString(id_jobentry,"uploadfilename");
    urlFieldname=rep.getJobEntryAttributeString(id_jobentry,"url_fieldname");
    runForEveryRow=rep.getJobEntryAttributeBoolean(id_jobentry,"run_every_row");
    username=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    proxyHostname=rep.getJobEntryAttributeString(id_jobentry,"proxy_host");
    proxyPort=rep.getJobEntryAttributeString(id_jobentry,"proxy_port");
    nonProxyHosts=rep.getJobEntryAttributeString(id_jobentry,"non_proxy_hosts");
    addfilenameresult="Y".equalsIgnoreCase(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"addfilenameresult"),"Y"));
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"header_name");
    allocate(argnr);
    for (int a=0; a < argnr; a++) {
      headerName[a]=rep.getJobEntryAttributeString(id_jobentry,a,"header_name");
      headerValue[a]=rep.getJobEntryAttributeString(id_jobentry,a,"header_value");
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'HTTP' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
