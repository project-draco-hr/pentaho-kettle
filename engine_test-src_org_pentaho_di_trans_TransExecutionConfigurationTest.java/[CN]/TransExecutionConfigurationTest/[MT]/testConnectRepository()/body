{
  TransExecutionConfiguration transExecConf=new TransExecutionConfiguration();
  final RepositoriesMeta repositoriesMeta=mock(RepositoriesMeta.class);
  final RepositoryMeta repositoryMeta=mock(RepositoryMeta.class);
  final Repository repository=mock(Repository.class);
  final String mockRepo="mockRepo";
  final boolean[] connectionSuccess={false};
  Repository initialRepo=mock(Repository.class);
  transExecConf.setRepository(initialRepo);
  KettleLogStore.init();
  MockRepositoryPlugin mockRepositoryPlugin=mock(MockRepositoryPlugin.class);
  when(mockRepositoryPlugin.getIds()).thenReturn(new String[]{"mockRepo"});
  when(mockRepositoryPlugin.matches("mockRepo")).thenReturn(true);
  when(mockRepositoryPlugin.getName()).thenReturn("mock-repository");
  when(mockRepositoryPlugin.getClassMap()).thenAnswer(new Answer<Map<Class<?>,String>>(){
    @Override public Map<Class<?>,String> answer(    InvocationOnMock invocation) throws Throwable {
      Map<Class<?>,String> dbMap=new HashMap<Class<?>,String>();
      dbMap.put(Repository.class,repositoryMeta.getClass().getName());
      return dbMap;
    }
  }
);
  PluginRegistry.getInstance().registerPlugin(RepositoryPluginType.class,mockRepositoryPlugin);
  when(repositoriesMeta.findRepository(anyString())).thenAnswer(new Answer<RepositoryMeta>(){
    @Override public RepositoryMeta answer(    InvocationOnMock invocation) throws Throwable {
      return mockRepo.equals(invocation.getArguments()[0]) ? repositoryMeta : null;
    }
  }
);
  when(mockRepositoryPlugin.loadClass(Repository.class)).thenReturn(repository);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      if ("username".equals(invocation.getArguments()[0]) && "password".equals(invocation.getArguments()[1])) {
        connectionSuccess[0]=true;
      }
 else {
        connectionSuccess[0]=false;
        throw new KettleException("Mock Repository connection failed");
      }
      return null;
    }
  }
).when(repository).connect(anyString(),anyString());
  transExecConf.connectRepository(repositoriesMeta,"notFound","username","password");
  assertEquals("Repository Changed",initialRepo,transExecConf.getRepository());
  transExecConf.connectRepository(repositoriesMeta,mockRepo,"username","");
  assertEquals("Repository Changed",initialRepo,transExecConf.getRepository());
  transExecConf.connectRepository(repositoriesMeta,mockRepo,"username","password");
  assertEquals("Repository didn't change",repository,transExecConf.getRepository());
  assertTrue("Repository not connected",connectionSuccess[0]);
}
