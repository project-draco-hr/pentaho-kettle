{
  LogWriter log=LogWriter.getInstance();
  result.setEntryNr(nr);
  LogWriter logwriter=log;
  Log4jFileAppender appender=null;
  int backupLogLevel=log.getLogLevel();
  if (setLogfile) {
    try {
      appender=LogWriter.createFileAppender(getLogFilename(),true);
    }
 catch (    KettleException e) {
      log.logError(toString(),"Unable to open file appender for file [" + getLogFilename() + "] : "+ e.toString());
      log.logError(toString(),Const.getStackTracker(e));
      result.setNrErrors(1);
      result.setResult(false);
      return result;
    }
    log.addAppender(appender);
    log.setLogLevel(loglevel);
  }
  log.logBasic(toString(),"Opening transformation: [" + getTransname() + "] in directory ["+ directory.getPath()+ "]");
  int iteration=0;
  String args[]=arguments;
  Row resultRow=null;
  boolean first=true;
  List rows=result.getRows();
  while ((first && !execPerRow) || (execPerRow && rows != null && iteration < rows.size() && result.getNrErrors() == 0)) {
    first=false;
    if (rows != null && execPerRow) {
      resultRow=(Row)rows.get(iteration);
    }
 else {
      resultRow=null;
    }
    try {
      log.logDetailed(toString(),"Starting transformation...(file=" + getFileName() + ", name="+ getName()+ "), repinfo="+ getDescription());
      TransMeta transMeta=getTransMeta(rep);
      if (parentJob.getJobMeta().isBatchIdPassed()) {
        transMeta.setJobBatchId(parentJob.getJobMeta().getBatchId());
      }
      Trans trans=new Trans(logwriter,transMeta);
      trans.getTransMeta().setPreviousResult(result);
      if (clearResultRows) {
        trans.getTransMeta().getPreviousResult().setRows(new ArrayList());
      }
      if (clearResultFiles) {
        trans.getTransMeta().getPreviousResult().getResultFiles().clear();
      }
      trans.setParentJob(parentJob);
      LocalVariables localVariables=LocalVariables.getInstance();
      localVariables.createKettleVariables(Thread.currentThread(),parentJob,false);
      if (execPerRow) {
        if (argFromPrevious) {
          args=null;
          if (resultRow != null) {
            args=new String[resultRow.size()];
            for (int i=0; i < resultRow.size(); i++) {
              args[i]=resultRow.getValue(i).getString();
            }
          }
        }
 else {
          ArrayList newList=new ArrayList();
          newList.add(resultRow);
          trans.getTransMeta().getPreviousResult().getRows().addAll(newList);
        }
      }
 else {
        if (argFromPrevious) {
          args=null;
          if (resultRow != null) {
            args=new String[resultRow.size()];
            for (int i=0; i < resultRow.size(); i++) {
              args[i]=resultRow.getValue(i).toString();
            }
          }
        }
 else {
          if (!clearResultRows) {
            trans.getTransMeta().getPreviousResult().getRows().addAll(result.getRows());
          }
        }
      }
      if (!trans.execute(args)) {
        log.logError(toString(),"Unable to prepare for execution of the transformation");
        result.setNrErrors(1);
      }
 else {
        while (!trans.isFinished() && !parentJob.isStopped() && trans.getErrors() == 0) {
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
        if (parentJob.isStopped() || trans.getErrors() != 0) {
          trans.stopAll();
          trans.waitUntilFinished();
          trans.endProcessing("stop");
          result.setNrErrors(1);
        }
 else {
          trans.endProcessing("end");
        }
        Result newResult=trans.getResult();
        result.clear();
        result.add(newResult);
        result.setRows(newResult.getRows());
        if (setLogfile) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_LOG,new File(getLogFilename()),parentJob.getName(),toString());
          result.getResultFiles().add(resultFile);
        }
      }
    }
 catch (    KettleException e) {
      log.logError(toString(),"Unable to open transformation: " + e.getMessage());
      result.setNrErrors(1);
    }
    iteration++;
  }
  if (setLogfile) {
    if (appender != null) {
      log.removeAppender(appender);
      appender.close();
    }
    log.setLogLevel(backupLogLevel);
  }
  if (result.getNrErrors() == 0) {
    result.setResult(true);
  }
 else {
    result.setResult(false);
  }
  return result;
}
