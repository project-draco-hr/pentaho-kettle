{
  try {
    super.saveRep(rep,id_job);
    long id_transformation=rep.getTransformationID(transname,directory.getID());
    rep.saveJobEntryAttribute(id_job,getID(),"id_transformation",id_transformation);
    rep.saveJobEntryAttribute(id_job,getID(),"name",getTransname());
    rep.saveJobEntryAttribute(id_job,getID(),"dir_path",getDirectory() != null ? getDirectory().getPath() : "");
    rep.saveJobEntryAttribute(id_job,getID(),"file_name",filename);
    rep.saveJobEntryAttribute(id_job,getID(),"arg_from_previous",argFromPrevious);
    rep.saveJobEntryAttribute(id_job,getID(),"exec_per_row",execPerRow);
    rep.saveJobEntryAttribute(id_job,getID(),"set_logfile",setLogfile);
    rep.saveJobEntryAttribute(id_job,getID(),"add_date",addDate);
    rep.saveJobEntryAttribute(id_job,getID(),"add_time",addTime);
    rep.saveJobEntryAttribute(id_job,getID(),"logfile",logfile);
    rep.saveJobEntryAttribute(id_job,getID(),"logext",logext);
    rep.saveJobEntryAttribute(id_job,getID(),"loglevel",LogWriter.getLogLevelDesc(loglevel));
    if (arguments != null) {
      for (int i=0; i < arguments.length; i++) {
        rep.saveJobEntryAttribute(id_job,getID(),i,"argument",arguments[i]);
      }
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("unable to save job entry of type transMeta to the repository for id_job=" + id_job,dbe);
  }
}
