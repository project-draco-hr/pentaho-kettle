{
  sql.parse(serviceFields);
  parameterNames=new ArrayList<String>();
  if (!service.isDual()) {
    Map<String,String> conditionParameters=new HashMap<String,String>();
    if (sql.getWhereCondition() != null) {
      extractConditionParameters(sql.getWhereCondition().getCondition(),conditionParameters);
    }
    parameters.putAll(conditionParameters);
    for (    String name : conditionParameters.keySet()) {
      serviceTransMeta.setParameterValue(name,conditionParameters.get(name));
    }
    setAutomaticParameterValues();
    serviceTransMeta.activateParameters();
    serviceTrans=new Trans(serviceTransMeta);
    serviceTrans.prepareExecution(null);
    for (    String parameterName : serviceTransMeta.listParameters()) {
      parameterNames.add(parameterName);
    }
  }
  SqlTransMeta sqlTransMeta=new SqlTransMeta(sql,rowLimit);
  genTransMeta=sqlTransMeta.generateTransMeta();
  resultStepName=sqlTransMeta.getResultStepName();
  genTrans=new Trans(genTransMeta);
  genTrans.prepareExecution(null);
  if (!service.isDual()) {
    final RowProducer rowProducer=genTrans.addRowProducer(sqlTransMeta.getInjectorStepName(),0);
    StepInterface serviceStep=serviceTrans.findRunThread(serviceStepName);
    serviceStep.addRowListener(new RowAdapter(){
      @Override public void rowWrittenEvent(      RowMetaInterface rowMeta,      Object[] row) throws KettleStepException {
        LogChannelInterface log=serviceTrans.getLogChannel();
        try {
          if (log.isRowLevel()) {
            log.logRowlevel("Passing along row: " + rowMeta.getString(row));
          }
        }
 catch (        KettleValueException e) {
        }
        rowProducer.putRow(rowMeta,row);
      }
    }
);
    serviceTrans.addTransListener(new TransAdapter(){
      @Override public void transFinished(      Trans trans) throws KettleException {
        rowProducer.finished();
      }
    }
);
  }
  StepInterface resultStep=genTrans.findRunThread(sqlTransMeta.getResultStepName());
  resultStep.addRowListener(resultRowListener);
  resultStepFields=genTransMeta.getStepFields(sqlTransMeta.getResultStepName());
  genTrans.startThreads();
  if (!service.isDual()) {
    serviceTrans.startThreads();
  }
}
