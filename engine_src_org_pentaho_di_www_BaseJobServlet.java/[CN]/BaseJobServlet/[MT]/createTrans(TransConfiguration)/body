{
  TransMeta transMeta=transConfiguration.getTransMeta();
  TransExecutionConfiguration transExecutionConfiguration=transConfiguration.getTransExecutionConfiguration();
  transMeta.setLogLevel(transExecutionConfiguration.getLogLevel());
  transMeta.injectVariables(transExecutionConfiguration.getVariables());
  copyParameters(transMeta,transExecutionConfiguration.getParams());
  String carteObjectId=UUID.randomUUID().toString();
  SimpleLoggingObject servletLoggingObject=getServletLogging(carteObjectId,transExecutionConfiguration.getLogLevel());
  final Trans trans=new Trans(transMeta,servletLoggingObject);
  if (transExecutionConfiguration.isSetLogfile()) {
    String realLogFilename=transExecutionConfiguration.getLogFileName();
    try {
      FileUtil.createParentFolder(AddTransServlet.class,realLogFilename,transExecutionConfiguration.isCreateParentFolder(),trans.getLogChannel(),trans);
      final LogChannelFileWriter logChannelFileWriter=new LogChannelFileWriter(servletLoggingObject.getLogChannelId(),KettleVFS.getFileObject(realLogFilename),transExecutionConfiguration.isSetAppendLogfile());
      logChannelFileWriter.startLogging();
      trans.addTransListener(new TransAdapter(){
        @Override public void transFinished(        Trans trans) throws KettleException {
          if (logChannelFileWriter != null) {
            logChannelFileWriter.stopLogging();
          }
        }
      }
);
    }
 catch (    KettleException e) {
      logError(Const.getStackTracker(e));
    }
  }
  final Repository repository=transExecutionConfiguration.getRepository();
  trans.setRepository(repository);
  trans.setSocketRepository(getSocketRepository());
  trans.setContainerObjectId(carteObjectId);
  getTransformationMap().addTransformation(transMeta.getName(),carteObjectId,trans,transConfiguration);
  if (repository != null) {
    trans.addTransListener(new TransAdapter(){
      public void transFinished(      Trans trans){
        repository.disconnect();
      }
    }
);
  }
  return trans;
}
