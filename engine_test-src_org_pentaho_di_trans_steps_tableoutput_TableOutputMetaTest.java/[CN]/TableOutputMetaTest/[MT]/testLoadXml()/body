{
  TableOutputMeta tableOutputMeta=new TableOutputMeta();
  tableOutputMeta.loadXML(getTestNode(),databases,metaStore);
  assertEquals("1000",tableOutputMeta.getCommitSize());
  assertEquals(null,tableOutputMeta.getGeneratedKeyField());
  assertEquals("public",tableOutputMeta.getSchemaName());
  assertEquals("sales_csv",tableOutputMeta.getTableName());
  assertEquals(null,tableOutputMeta.getPartitioningField());
  assertTrue(tableOutputMeta.truncateTable());
  assertTrue(tableOutputMeta.specifyFields());
  assertFalse(tableOutputMeta.ignoreErrors());
  assertFalse(tableOutputMeta.isPartitioningEnabled());
  assertTrue(tableOutputMeta.useBatchUpdate());
  assertFalse(tableOutputMeta.isTableNameInField());
  assertTrue(tableOutputMeta.isTableNameInTable());
  assertFalse(tableOutputMeta.isReturningGeneratedKeys());
  assertEquals("    <connection/>\n" + "    <schema>public</schema>\n" + "    <table>sales_csv</table>\n"+ "    <commit>1000</commit>\n"+ "    <truncate>Y</truncate>\n"+ "    <ignore_errors>N</ignore_errors>\n"+ "    <use_batch>Y</use_batch>\n"+ "    <specify_fields>Y</specify_fields>\n"+ "    <partitioning_enabled>N</partitioning_enabled>\n"+ "    <partitioning_field/>\n"+ "    <partitioning_daily>N</partitioning_daily>\n"+ "    <partitioning_monthly>Y</partitioning_monthly>\n"+ "    <tablename_in_field>N</tablename_in_field>\n"+ "    <tablename_field/>\n"+ "    <tablename_in_table>Y</tablename_in_table>\n"+ "    <return_keys>N</return_keys>\n"+ "    <return_field/>\n"+ "    <fields>\n"+ "        <field>\n"+ "          <column_name>ORDERNUMBER</column_name>\n"+ "          <stream_name>ORDERNUMBER</stream_name>\n"+ "        </field>\n"+ "        <field>\n"+ "          <column_name>QUANTITYORDERED</column_name>\n"+ "          <stream_name>QUANTITYORDERED</stream_name>\n"+ "        </field>\n"+ "        <field>\n"+ "          <column_name>PRICEEACH</column_name>\n"+ "          <stream_name>PRICEEACH</stream_name>\n"+ "        </field>\n"+ "    </fields>\n",tableOutputMeta.getXML());
}
