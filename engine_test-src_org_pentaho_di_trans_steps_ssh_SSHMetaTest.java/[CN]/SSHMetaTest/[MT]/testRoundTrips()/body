{
  List<String> commonFields=Arrays.<String>asList("dynamicCommandField","command","commandfieldname","port","servername","userName","password","usePrivateKey","keyFileName","passPhrase","stdOutFieldName","stdErrFieldName","timeOut","proxyHost","proxyPort","proxyUsername","proxyPassword");
  Map<String,String> getterMap=new HashMap<String,String>();
  getterMap.put("dynamicCommandField","isDynamicCommand");
  getterMap.put("command","getCommand");
  getterMap.put("commandfieldname","getcommandfieldname");
  getterMap.put("port","getPort");
  getterMap.put("servername","getServerName");
  getterMap.put("userName","getuserName");
  getterMap.put("password","getpassword");
  getterMap.put("usePrivateKey","isusePrivateKey");
  getterMap.put("keyFileName","getKeyFileName");
  getterMap.put("passPhrase","getPassphrase");
  getterMap.put("stdOutFieldName","getStdOutFieldName");
  getterMap.put("stdErrFieldName","getStdErrFieldName");
  getterMap.put("timeOut","getTimeOut");
  getterMap.put("proxyHost","getProxyHost");
  getterMap.put("proxyPort","getProxyPort");
  getterMap.put("proxyUsername","getProxyUsername");
  getterMap.put("proxyPassword","getProxyPassword");
  Map<String,String> setterMap=new HashMap<String,String>();
  setterMap.put("dynamicCommandField","setDynamicCommand");
  setterMap.put("command","setCommand");
  setterMap.put("commandfieldname","setcommandfieldname");
  setterMap.put("port","setPort");
  setterMap.put("servername","setServerName");
  setterMap.put("userName","setuserName");
  setterMap.put("password","setpassword");
  setterMap.put("usePrivateKey","usePrivateKey");
  setterMap.put("keyFileName","setKeyFileName");
  setterMap.put("passPhrase","setPassphrase");
  setterMap.put("stdOutFieldName","setstdOutFieldName");
  setterMap.put("stdErrFieldName","setStdErrFieldName");
  setterMap.put("timeOut","setTimeOut");
  setterMap.put("proxyHost","setProxyHost");
  setterMap.put("proxyPort","setProxyPort");
  setterMap.put("proxyUsername","setProxyUsername");
  setterMap.put("proxyPassword","setProxyPassword");
  LoadSaveTester tester=new LoadSaveTester(SSHMeta.class,commonFields,getterMap,setterMap);
  tester.testSerialization();
}
