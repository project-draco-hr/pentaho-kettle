{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("stringcuttest3");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.class,im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,im);
  transMeta.addStep(injectorStep);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=registry.getPluginId(StepPluginType.class,dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hi=new TransHopMeta(injectorStep,dummyStep1);
  transMeta.addTransHop(hi);
  String stringcutStepname="string cut step";
  StringCutMeta scm=new StringCutMeta();
  scm.setFieldInStream(new String[]{"field1","field1"});
  scm.setFieldOutStream(new String[]{"","field1"});
  scm.setCutFrom(new String[]{"1","0"});
  scm.setCutTo(new String[]{"3","1"});
  String stringCutStepPid=registry.getPluginId(StepPluginType.class,scm);
  StepMeta stringCutStep=new StepMeta(stringCutStepPid,stringcutStepname,scm);
  transMeta.addStep(stringCutStep);
  TransHopMeta hi2=new TransHopMeta(dummyStep1,stringCutStep);
  transMeta.addTransHop(hi2);
  String dummyStepname2="dummy step 2";
  DummyTransMeta dm2=new DummyTransMeta();
  String dummyPid2=registry.getPluginId(StepPluginType.class,dm2);
  StepMeta dummyStep2=new StepMeta(dummyPid2,dummyStepname2,dm2);
  transMeta.addStep(dummyStep2);
  TransHopMeta hi3=new TransHopMeta(stringCutStep,dummyStep2);
  transMeta.addTransHop(hi3);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector dummyRc1=new RowStepCollector();
  si.addRowListener(dummyRc1);
  si=trans.getStepInterface(stringcutStepname,0);
  RowStepCollector stringCutRc=new RowStepCollector();
  si.addRowListener(stringCutRc);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createDataBinary();
  Iterator<RowMetaAndData> it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows1=dummyRc1.getRowsRead();
  checkRows(resultRows1,inputList);
  List<RowMetaAndData> goldRows=createBinaryResultData();
  List<RowMetaAndData> resultRows2=stringCutRc.getRowsWritten();
  checkRows(resultRows2,goldRows);
}
