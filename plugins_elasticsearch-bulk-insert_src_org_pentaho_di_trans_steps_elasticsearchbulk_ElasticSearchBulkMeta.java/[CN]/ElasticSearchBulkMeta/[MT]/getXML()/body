{
  StringBuffer retval=new StringBuffer();
  Indentation indent=new Indentation();
  indent.incr().incr();
  retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_GENERAL)).append(Const.CR);
  indent.incr();
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_INDEX,getIndex()));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_TYPE,getType()));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_BATCH_SIZE,batchSize));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_TIMEOUT,timeout));
  retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_TIMEOUT_UNIT,timeoutUnit.toString()));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_IS_JSON,isJsonInsert()));
  if (getJsonField() != null) {
    retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_JSON_FIELD,getJsonField()));
  }
  if (getIdOutField() != null) {
    retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_ID_OUT_FIELD,getIdOutField()));
  }
  if (getIdInField() != null) {
    retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_ID_IN_FIELD,getIdInField()));
  }
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_OVERWRITE_IF_EXISTS,isOverWriteIfSameId()));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_USE_OUTPUT,useOutput));
  retval.append(indent.toString() + XMLHandler.addTagValue(Dom.TAG_STOP_ON_ERROR,stopOnError));
  indent.decr();
  retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_GENERAL)).append(Const.CR);
  retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_FIELDS)).append(Const.CR);
  indent.incr();
  for (  Field f : fields) {
    retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_FIELD)).append(Const.CR);
    indent.incr();
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_NAME,f.name));
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_TARGET,f.targetName));
    indent.decr();
    retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_FIELD)).append(Const.CR);
  }
  indent.decr();
  retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_FIELDS)).append(Const.CR);
  retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_SERVERS)).append(Const.CR);
  indent.incr();
  for (  Server istAddr : servers) {
    retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_SERVER)).append(Const.CR);
    indent.incr();
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_SERVER_ADDRESS,istAddr.address));
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_SERVER_PORT,istAddr.port));
    indent.decr();
    retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_SERVER)).append(Const.CR);
  }
  indent.decr();
  retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_SERVERS)).append(Const.CR);
  retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_SETTINGS)).append(Const.CR);
  indent.incr();
  for (  Setting s : settings) {
    retval.append(indent.toString()).append(XMLHandler.openTag(Dom.TAG_SETTING)).append(Const.CR);
    indent.incr();
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_SETTING_NAME,s.setting));
    retval.append(indent.toString()).append(XMLHandler.addTagValue(Dom.TAG_SETTING_VALUE,s.value));
    indent.decr();
    retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_SETTING)).append(Const.CR);
  }
  indent.decr();
  retval.append(indent.toString()).append(XMLHandler.closeTag(Dom.TAG_SETTINGS)).append(Const.CR);
  return retval.toString();
}
