{
  try {
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_INDEX),getIndex());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TYPE),getType());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_BATCH_SIZE),batchSize);
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TIMEOUT),getTimeOut());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TIMEOUT_UNIT),getTimeoutUnit().toString());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_IS_JSON),isJsonInsert());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_JSON_FIELD),getJsonField());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_ID_IN_FIELD),getIdInField());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_OVERWRITE_IF_EXISTS),isOverWriteIfSameId());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_ID_OUT_FIELD),getIdOutField());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_USE_OUTPUT),isUseOutput());
    rep.saveStepAttribute(id_transformation,id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_STOP_ON_ERROR),isStopOnError());
    for (int i=0; i < fields.size(); i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_FIELD,Dom.TAG_NAME),fields.get(i).name);
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_FIELD,Dom.TAG_TARGET),fields.get(i).targetName);
    }
    for (int i=0; i < servers.size(); i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_SERVER,Dom.TAG_SERVER_ADDRESS),servers.get(i).address);
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_SERVER,Dom.TAG_SERVER_PORT),servers.get(i).port);
    }
    for (int i=0; i < settings.size(); i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_SETTING,Dom.TAG_SETTING_NAME),settings.get(i).setting);
      rep.saveStepAttribute(id_transformation,id_step,i,joinRepAttr(Dom.TAG_SETTING,Dom.TAG_SETTING_VALUE),settings.get(i).value);
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"ElasticSearchBulkMeta.Exception.ErrorSavingToRepository","" + id_step),e);
  }
}
