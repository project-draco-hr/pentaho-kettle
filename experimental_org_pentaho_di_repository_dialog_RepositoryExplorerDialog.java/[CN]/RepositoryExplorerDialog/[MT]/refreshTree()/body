{
  try {
    wTree.removeAll();
    rep.setDirectoryTree(new RepositoryDirectory(rep));
    TreeItem tiTree=new TreeItem(wTree,SWT.NONE);
    tiTree.setText(rep.getName() == null ? "-" : rep.getName());
    TreeItem tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setText(STRING_DATABASES);
    if (!userinfo.isReadonly())     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newDatabase();
      }
    }
);
    String names[]=rep.getDatabaseNames();
    for (int i=0; i < names.length; i++) {
      TreeItem newDB=new TreeItem(tiParent,SWT.NONE);
      newDB.setText(Const.NVL(names[i],""));
      if (!userinfo.isReadonly())       TreeItemAccelerator.addDoubleClick(newDB,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editDatabase(treeItem.getText());
        }
      }
);
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setText(STRING_PARTITIONS);
    names=rep.getPartitionSchemaNames();
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setText(Const.NVL(names[i],""));
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setText(STRING_SLAVES);
    if (!userinfo.isReadonly())     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newSlaveServer();
      }
    }
);
    names=rep.getSlaveNames();
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setText(Const.NVL(names[i],""));
      if (!userinfo.isReadonly())       TreeItemAccelerator.addDoubleClick(newItem,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editSlaveServer(treeItem.getText());
        }
      }
);
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setText(STRING_CLUSTERS);
    names=rep.getClusterNames();
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setText(Const.NVL(names[i],""));
    }
    if (userinfo.useTransformations()) {
      TreeItem tiTrans=new TreeItem(tiTree,SWT.NONE);
      tiTrans.setText(STRING_TRANSFORMATIONS);
      TreeItem newCat=new TreeItem(tiTrans,SWT.NONE);
      rep.getDirectoryTree().getTreeWithNames(newCat,rep,dircolor,sortColumn,ascending,true,false);
    }
    if (userinfo.useJobs()) {
      TreeItem tiJob=new TreeItem(tiTree,SWT.NONE);
      tiJob.setText(STRING_JOBS);
      TreeItem newJob=new TreeItem(tiJob,SWT.NONE);
      rep.getDirectoryTree().getTreeWithNames(newJob,rep,dircolor,sortColumn,ascending,false,true);
    }
    TreeItem tiUser=new TreeItem(tiTree,SWT.NONE);
    tiUser.setText(STRING_USERS);
    if (!userinfo.isReadonly())     TreeItemAccelerator.addDoubleClick(tiUser,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newUser();
      }
    }
);
    String users[]=rep.getUserLogins();
    for (int i=0; i < users.length; i++) {
      if (userinfo.isAdministrator() || userinfo.getLogin().equalsIgnoreCase(users[i])) {
        if (users[i] != null) {
          TreeItem newUser=new TreeItem(tiUser,SWT.NONE);
          newUser.setText(users[i]);
          if (!userinfo.isReadonly())           TreeItemAccelerator.addDoubleClick(newUser,new DoubleClickInterface(){
            public void action(            TreeItem treeItem){
              editUser(treeItem.getText());
            }
          }
);
        }
      }
    }
    if (userinfo.isAdministrator()) {
      TreeItem tiProf=new TreeItem(tiTree,SWT.NONE);
      tiProf.setText(STRING_PROFILES);
      TreeItemAccelerator.addDoubleClick(tiProf,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          newProfile();
        }
      }
);
      String prof[]=rep.getProfiles();
      for (int i=0; i < prof.length; i++) {
        TreeItem newProf=new TreeItem(tiProf,SWT.NONE);
        newProf.setText(prof[i]);
        TreeItemAccelerator.addDoubleClick(newProf,new DoubleClickInterface(){
          public void action(          TreeItem treeItem){
            editProfile(treeItem.getText());
          }
        }
);
      }
    }
    TreeMemory.setExpandedFromMemory(wTree,STRING_REPOSITORY_EXPLORER_TREE_NAME);
    tiTree.setExpanded(true);
  }
 catch (  KettleException dbe) {
    new ErrorDialog(shell,Messages.getString("RepositoryExplorerDialog.PopupMenu.Dialog.ErrorRefreshingTree.Title"),Messages.getString("RepositoryExplorerDialog.PopupMenu.Dialog.ErrorRefreshingTree.Message"),dbe);
  }
}
