{
  try {
    PartitionSchema partitionSchema=new PartitionSchema();
    PartitionSchemaDialog dd=new PartitionSchemaDialog(shell,partitionSchema,rep.getDatabases());
    if (dd.open()) {
      long idPartitionSchema=rep.getPartitionSchemaID(partitionSchema.getName());
      if (idPartitionSchema <= 0) {
        rep.lockRepository();
        rep.insertLogEntry("Creating new partition schema '" + partitionSchema.getName() + "'");
        partitionSchema.saveRep(rep);
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
        mb.setMessage(Messages.getString("RepositoryExplorerDialog.PartitionSchema.Create.AlreadyExists.Message"));
        mb.setText(Messages.getString("RepositoryExplorerDialog.PartitionSchema.Create.AlreadyExists.Title"));
        mb.open();
      }
      refreshTree();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,Messages.getString("RepositoryExplorerDialog.PartitionSchema.Create.UnexpectedError.Title"),Messages.getString("RepositoryExplorerDialog.PartitionSchema.Create.UnexpectedError.Message"),e);
  }
 finally {
    try {
      rep.unlockRepository();
    }
 catch (    KettleException e) {
      new ErrorDialog(shell,"Error","Unexpected error unlocking the repository database",e);
    }
  }
}
