{
  String response=readStringFromInputStream(anXml);
  StringReader stringReader=new StringReader(response.toString());
  try {
    XMLInputFactory vFactory=XMLInputFactory.newInstance();
    XMLStreamReader vReader=vFactory.createXMLStreamReader(stringReader);
    Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
    int outputIndex=0;
    boolean processing=false;
    boolean oneValueRowProcessing=false;
    for (int event=vReader.next(); vReader.hasNext(); event=vReader.next()) {
switch (event) {
case XMLStreamConstants.START_ELEMENT:
        if (log.isRowLevel())         logRowlevel("START_ELEMENT / " + vReader.getAttributeCount() + " / "+ vReader.getNamespaceCount());
      if (log.isRowLevel())       logRowlevel("vReader.getLocalName = " + vReader.getLocalName());
    if (Const.isEmpty(meta.getOutFieldArgumentName())) {
      if (oneValueRowProcessing) {
        WebServiceField field=meta.getFieldOutFromWsName(vReader.getLocalName());
        if (field != null) {
          outputRowData[outputIndex++]=getValue(vReader.getElementText(),field);
          putRow(data.outputRowMeta,outputRowData);
          oneValueRowProcessing=false;
        }
 else {
          if (meta.getOutFieldContainerName().equals(vReader.getLocalName())) {
            if (log.isRowLevel())             logRowlevel("OutFieldContainerName = " + meta.getOutFieldContainerName());
            oneValueRowProcessing=true;
          }
        }
      }
    }
 else {
      if (log.isRowLevel())       logRowlevel("OutFieldArgumentName = " + meta.getOutFieldArgumentName());
      if (meta.getOutFieldArgumentName().equals(vReader.getLocalName())) {
        if (log.isRowLevel())         logRowlevel("vReader.getLocalName = " + vReader.getLocalName());
        if (log.isRowLevel())         logRowlevel("OutFieldArgumentName = ");
        if (processing) {
          WebServiceField field=meta.getFieldOutFromWsName(vReader.getLocalName());
          if (field != null) {
            int index=data.outputRowMeta.indexOfValue(field.getName());
            if (index >= 0) {
              outputRowData[index]=getValue(vReader.getElementText(),field);
            }
          }
          processing=false;
        }
 else {
          WebServiceField field=meta.getFieldOutFromWsName(vReader.getLocalName());
          if (meta.getFieldsOut().size() == 1 && field != null) {
            try {
              outputRowData[outputIndex++]=getValue(vReader.getElementText(),field);
              putRow(data.outputRowMeta,outputRowData);
            }
 catch (            WstxParsingException e) {
              throw new KettleStepException("Unable to get value for field [" + field.getName() + "].  Verify that this is not a complex data type by looking at the response XML.",e);
            }
          }
 else {
            for (            WebServiceField curField : meta.getFieldsOut()) {
              if (!Const.isEmpty(curField.getName())) {
                outputRowData[outputIndex++]=getValue(vReader.getElementText(),curField);
              }
            }
            processing=true;
          }
        }
      }
 else {
        if (log.isRowLevel())         logRowlevel("vReader.getLocalName = " + vReader.getLocalName());
        if (log.isRowLevel())         logRowlevel("OutFieldArgumentName = " + meta.getOutFieldArgumentName());
      }
    }
  break;
case XMLStreamConstants.END_ELEMENT:
if (log.isRowLevel()) logRowlevel("END_ELEMENT");
if ((meta.getOutFieldArgumentName() == null && meta.getOperationName().equals(vReader.getLocalName()))) {
oneValueRowProcessing=false;
}
 else if (meta.getOutFieldArgumentName() != null && meta.getOutFieldArgumentName().equals(vReader.getLocalName())) {
putRow(data.outputRowMeta,outputRowData);
processing=false;
}
break;
case XMLStreamConstants.PROCESSING_INSTRUCTION:
if (log.isRowLevel()) logRowlevel("PROCESSING_INSTRUCTION");
break;
case XMLStreamConstants.CHARACTERS:
if (log.isRowLevel()) logRowlevel("CHARACTERS");
break;
case XMLStreamConstants.COMMENT:
if (log.isRowLevel()) logRowlevel("COMMENT");
break;
case XMLStreamConstants.SPACE:
if (log.isRowLevel()) logRowlevel("PROCESSING_INSTRUCTION");
break;
case XMLStreamConstants.START_DOCUMENT:
if (log.isRowLevel()) logRowlevel("START_DOCUMENT");
if (log.isRowLevel()) logRowlevel(vReader.getText());
break;
case XMLStreamConstants.END_DOCUMENT:
if (log.isRowLevel()) logRowlevel("END_DOCUMENT");
break;
case XMLStreamConstants.ENTITY_REFERENCE:
if (log.isRowLevel()) logRowlevel("ENTITY_REFERENCE");
break;
case XMLStreamConstants.ATTRIBUTE:
if (log.isRowLevel()) logRowlevel("ATTRIBUTE");
break;
case XMLStreamConstants.DTD:
if (log.isRowLevel()) logRowlevel("DTD");
break;
case XMLStreamConstants.CDATA:
if (log.isRowLevel()) logRowlevel("CDATA");
break;
case XMLStreamConstants.NAMESPACE:
if (log.isRowLevel()) logRowlevel("NAMESPACE");
break;
case XMLStreamConstants.NOTATION_DECLARATION:
if (log.isRowLevel()) logRowlevel("NOTATION_DECLARATION");
break;
case XMLStreamConstants.ENTITY_DECLARATION:
if (log.isRowLevel()) logRowlevel("ENTITY_DECLARATION");
break;
default :
break;
}
}
}
 catch (Exception e) {
throw new KettleStepException(Messages.getString("WebServices.ERROR0010.OutputParsingError",response.toString()),e);
}
}
