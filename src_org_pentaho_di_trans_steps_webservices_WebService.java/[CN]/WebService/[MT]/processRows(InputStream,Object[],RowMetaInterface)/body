{
  if (meta.isCompatible()) {
    compatibleProcessRows(anXml,rowData,rowMeta);
    return;
  }
  String response=readStringFromInputStream(anXml);
  try {
    Document doc=XMLHandler.loadXMLString(response);
    Node enveloppeNode=XMLHandler.getSubNode(doc,"soapenv:Envelope");
    Node bodyNode=XMLHandler.getSubNode(enveloppeNode,"soapenv:body");
    Node responseNode=null;
    NodeList responseChildren=bodyNode.getChildNodes();
    for (int i=0; i < responseChildren.getLength(); i++) {
      Node responseChild=responseChildren.item(i);
      if (responseChild.getNodeType() == Node.ELEMENT_NODE) {
        responseNode=responseChild;
        break;
      }
    }
    if (responseNode == null)     return;
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    StringWriter responseXML=new StringWriter();
    transformer.transform(new DOMSource(responseNode),new StreamResult(responseXML));
    Object[] outputRowData=rowData == null ? RowDataUtil.allocateRowData(data.outputRowMeta.size()) : RowDataUtil.createResizedCopy(rowData,data.outputRowMeta.size());
    int outputIndex=rowData == null ? 0 : rowMeta.size();
    boolean singleRow=false;
    int fieldsFound=0;
    NodeList nodeList=responseNode.getChildNodes();
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      WebServiceField field=meta.getFieldOutFromWsName(node.getNodeName());
      if (field != null) {
        if (getNodeValue(outputRowData,outputIndex,node,field,transformer,true)) {
          singleRow=true;
          fieldsFound++;
          outputIndex++;
          if (outputIndex >= data.outputRowMeta.size()) {
            putRow(data.outputRowMeta,outputRowData);
            outputRowData=rowData == null ? RowDataUtil.allocateRowData(data.outputRowMeta.size()) : RowDataUtil.createResizedCopy(rowData,data.outputRowMeta.size());
            outputIndex=rowData == null ? 0 : rowMeta.size();
            fieldsFound=0;
          }
        }
      }
 else {
        StringWriter nodeXML=new StringWriter();
        transformer.transform(new DOMSource(node),new StreamResult(nodeXML));
        outputRowData=rowData == null ? RowDataUtil.allocateRowData(data.outputRowMeta.size()) : RowDataUtil.createResizedCopy(rowData,data.outputRowMeta.size());
        outputIndex=rowData == null ? 0 : rowMeta.size();
        NodeList childNodes=node.getChildNodes();
        for (int j=0; j < childNodes.getLength(); j++) {
          Node childNode=childNodes.item(j);
          field=meta.getFieldOutFromWsName(node.getNodeName());
          if (field != null) {
            if (getNodeValue(outputRowData,outputIndex,childNode,field,transformer,false)) {
              fieldsFound++;
              outputIndex++;
            }
          }
        }
        if (fieldsFound > 0) {
          putRow(data.outputRowMeta,outputRowData);
        }
      }
    }
    if (singleRow && fieldsFound > 0) {
      putRow(data.outputRowMeta,outputRowData);
    }
  }
 catch (  Exception e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0010.OutputParsingError",response.toString()),e);
  }
}
