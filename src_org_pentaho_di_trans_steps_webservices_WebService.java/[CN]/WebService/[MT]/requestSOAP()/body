{
  Level saveLogLevel=Logger.getRootLogger().getLevel();
  Logger.getRootLogger().setLevel(Level.ERROR);
  HttpClient vHttpClient=new HttpClient();
  String vURLSansVariable=environmentSubstitute(meta.getUrl());
  String vURLService;
  int questionMarkIndex=vURLSansVariable.lastIndexOf("?");
  if (questionMarkIndex < 0)   vURLService=vURLSansVariable;
 else   vURLService=vURLSansVariable.substring(0,questionMarkIndex);
  PostMethod vHttpMethod=new PostMethod(vURLService);
  HostConfiguration vHostConfiguration=new HostConfiguration();
  String httpLogin=environmentSubstitute(meta.getHttpLogin());
  if (httpLogin != null && !"".equals(httpLogin)) {
    vHttpClient.getParams().setAuthenticationPreemptive(true);
    Credentials defaultcreds=new UsernamePasswordCredentials(httpLogin,environmentSubstitute(meta.getHttpPassword()));
    vHttpClient.getState().setCredentials(AuthScope.ANY,defaultcreds);
  }
  String proxyHost=environmentSubstitute(meta.getProxyHost());
  if (proxyHost != null && !"".equals(proxyHost)) {
    vHostConfiguration.setProxy(proxyHost,Const.toInt(environmentSubstitute(meta.getProxyPort()),8080));
  }
  try {
    vHttpMethod.setURI(new URI(vURLService,false));
    vHttpMethod.setRequestHeader("Content-Type","text/xml;charset=UTF-8");
    vHttpMethod.setRequestHeader("SOAPAction","\"" + meta.getOperationNamespace() + "/"+ meta.getOperationName()+ "\"");
    RequestEntity requestEntity=new ByteArrayRequestEntity(xml.toString().getBytes("UTF-8"),"UTF-8");
    vHttpMethod.setRequestEntity(requestEntity);
    long currentRequestTime=Const.nanoTime();
    int responseCode=vHttpClient.executeMethod(vHostConfiguration,vHttpMethod);
    if (responseCode == 200) {
      processRows(vHttpMethod.getResponseBodyAsStream());
    }
 else     if (responseCode == 401) {
      throw new KettleStepException(Messages.getString("WebServices.ERROR0011.Authentication"));
    }
 else     if (responseCode == 404) {
      throw new KettleStepException(Messages.getString("WebServices.ERROR0012.NotFound"));
    }
 else {
      throw new KettleStepException(Messages.getString("WebServices.ERROR0001.ServerError",Integer.toString(responseCode),Const.NVL(new String(vHttpMethod.getResponseBody()),"")));
    }
    requestTime+=Const.nanoTime() - currentRequestTime;
  }
 catch (  URIException e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0002.InvalidURI"));
  }
catch (  UnsupportedEncodingException e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0003.UnsupportedEncoding"));
  }
catch (  HttpException e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0004.HttpException"));
  }
catch (  UnknownHostException e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0011.UnknownHost"));
  }
catch (  IOException e) {
    throw new KettleStepException(Messages.getString("WebServices.ERROR0005.IOException"));
  }
 finally {
    vHttpMethod.releaseConnection();
  }
  Logger.getRootLogger().setLevel(saveLogLevel);
}
