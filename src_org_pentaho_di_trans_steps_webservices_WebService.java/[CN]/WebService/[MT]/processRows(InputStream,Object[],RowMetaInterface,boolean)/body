{
  if (meta.isCompatible()) {
    compatibleProcessRows(anXml,rowData,rowMeta,ignoreNamespacePrefix);
    return;
  }
  String response=readStringFromInputStream(anXml);
  try {
    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
    documentBuilderFactory.setNamespaceAware(true);
    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
    Document doc=documentBuilder.parse(new InputSource(new StringReader(response)));
    Node envelopeNode=doc.getFirstChild();
    String nsPrefix=envelopeNode.getPrefix();
    Node bodyNode=XMLHandler.getSubNode(envelopeNode,nsPrefix + ":Body");
    if (bodyNode == null)     XMLHandler.getSubNode(envelopeNode,nsPrefix + ":body");
    Transformer transformer=null;
    try {
      Class<?> clazz=Class.forName("org.apache.xalan.processor.TransformerFactoryImpl");
      TransformerFactory transformerFactory=(TransformerFactory)clazz.newInstance();
      transformer=transformerFactory.newTransformer();
    }
 catch (    Throwable t) {
      TransformerFactory transformerFactory=TransformerFactory.newInstance();
      transformer=transformerFactory.newTransformer();
    }
    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    if (log.isDetailed()) {
      StringWriter bodyXML=new StringWriter();
      transformer.transform(new DOMSource(bodyNode),new StreamResult(bodyXML));
      logDetailed(bodyXML.toString());
    }
    Node responseNode=null;
    NodeList nodeList=null;
    if (!Const.isEmpty(meta.getRepeatingElementName())) {
      nodeList=((Element)bodyNode).getElementsByTagName(meta.getRepeatingElementName());
    }
 else {
      if (meta.isReturningReplyAsString()) {
        StringWriter nodeXML=new StringWriter();
        transformer.transform(new DOMSource(bodyNode),new StreamResult(nodeXML));
        String xml=response;
        Object[] outputRowData=createNewRow(rowData);
        int index=rowData == null ? 0 : getInputRowMeta().size();
        outputRowData[index++]=xml;
        putRow(data.outputRowMeta,outputRowData);
      }
 else {
        NodeList responseChildren=bodyNode.getChildNodes();
        for (int i=0; i < responseChildren.getLength(); i++) {
          Node responseChild=responseChildren.item(i);
          if (responseChild.getNodeType() == Node.ELEMENT_NODE) {
            responseNode=responseChild;
            break;
          }
        }
        if (meta.getFieldsOut().size() == 1) {
          WebServiceField field=meta.getFieldsOut().get(0);
          if (field.getWsName().equals(responseNode.getNodeName())) {
            StringWriter nodeXML=new StringWriter();
            transformer.transform(new DOMSource(responseNode),new StreamResult(nodeXML));
            String xml=nodeXML.toString();
            Object[] outputRowData=createNewRow(rowData);
            int index=rowData == null ? 0 : getInputRowMeta().size();
            outputRowData[index++]=xml;
            putRow(data.outputRowMeta,outputRowData);
          }
 else {
            if (responseNode != null) {
              nodeList=responseNode.getChildNodes();
            }
          }
        }
 else {
          if (responseNode != null) {
            nodeList=responseNode.getChildNodes();
          }
        }
      }
    }
    if (nodeList == null || meta.isReturningReplyAsString())     return;
    Object[] outputRowData=createNewRow(rowData);
    boolean singleRow=false;
    int fieldsFound=0;
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      if (meta.isReturningReplyAsString()) {
        StringWriter nodeXML=new StringWriter();
        transformer.transform(new DOMSource(bodyNode),new StreamResult(nodeXML));
        String xml=nodeXML.toString();
        outputRowData=createNewRow(rowData);
        int index=rowData == null ? 0 : getInputRowMeta().size();
        outputRowData[index++]=xml;
        putRow(data.outputRowMeta,outputRowData);
      }
 else {
        WebServiceField field=meta.getFieldOutFromWsName(node.getNodeName(),ignoreNamespacePrefix);
        if (field != null) {
          if (getNodeValue(outputRowData,node,field,transformer,true)) {
            singleRow=true;
            fieldsFound++;
          }
        }
 else {
          if (!singleRow) {
            if (log.isDetailed()) {
              StringWriter nodeXML=new StringWriter();
              transformer.transform(new DOMSource(node),new StreamResult(nodeXML));
              logDetailed(BaseMessages.getString(PKG,"WebServices.Log.ResultRowDataFound",nodeXML.toString()));
            }
            outputRowData=createNewRow(rowData);
            NodeList childNodes=node.getChildNodes();
            for (int j=0; j < childNodes.getLength(); j++) {
              Node childNode=childNodes.item(j);
              field=meta.getFieldOutFromWsName(childNode.getNodeName(),ignoreNamespacePrefix);
              if (field != null) {
                if (getNodeValue(outputRowData,childNode,field,transformer,false)) {
                  fieldsFound++;
                }
              }
            }
            if (fieldsFound > 0) {
              putRow(data.outputRowMeta,outputRowData);
            }
          }
        }
      }
    }
    if (singleRow && fieldsFound > 0) {
      putRow(data.outputRowMeta,outputRowData);
    }
  }
 catch (  Exception e) {
    throw new KettleStepException(BaseMessages.getString(PKG,"WebServices.ERROR0010.OutputParsingError",response.toString()),e);
  }
}
