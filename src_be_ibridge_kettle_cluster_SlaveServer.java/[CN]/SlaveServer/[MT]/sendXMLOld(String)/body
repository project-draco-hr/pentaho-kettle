{
  URL server=null;
  OutputStream uploadStream=null;
  BufferedInputStream fileStream=null;
  BufferedReader input=null;
  String beforeProxyHost=System.getProperty("http.proxyHost");
  String beforeProxyPort=System.getProperty("http.proxyPort");
  String beforeNonProxyHosts=System.getProperty("http.nonProxyHosts");
  try {
    log.logBasic(toString(),"Connecting to URL: " + serviceUrl);
    if (!Const.isEmpty(proxyHostname)) {
      System.setProperty("http.proxyHost",proxyHostname);
      System.setProperty("http.proxyPort","" + proxyPort);
      if (nonProxyHosts != null)       System.setProperty("http.nonProxyHosts",nonProxyHosts);
    }
    if (username != null && username.length() > 0) {
      Authenticator.setDefault(new Authenticator(){
        protected PasswordAuthentication getPasswordAuthentication(){
          return new PasswordAuthentication(username,password != null ? password.toCharArray() : new char[]{});
        }
      }
);
    }
    byte[] content=xml.getBytes();
    server=new URL(serviceUrl);
    HttpURLConnection connection=(HttpURLConnection)server.openConnection();
    connection.setRequestMethod("POST");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty("Content-Type","text/xml");
    connection.setRequestProperty("Transfer-Encoding","chunked");
    log.logDetailed(toString(),"Start sending content of XML to server.");
    uploadStream=connection.getOutputStream();
    uploadStream.write(content);
    uploadStream.flush();
    uploadStream.close();
    uploadStream=null;
    log.logDetailed(toString(),"Finished sending XML to server.");
    log.logDetailed(toString(),"Start reading reply from webserver.");
    input=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    StringBuffer result=new StringBuffer();
    long bytesRead=0L;
    String line;
    while ((line=input.readLine()) != null) {
      line+=Const.CR;
      result.append(line);
      bytesRead+=line.length();
    }
    input.close();
    log.logBasic(toString(),"Finished reading " + bytesRead + " bytes from the webserver as a result.");
    return result.toString();
  }
 catch (  MalformedURLException e) {
    throw new Exception("The specified URL is not valid [" + serviceUrl + "] : ",e);
  }
catch (  Exception e) {
    throw new Exception("Error posting XML to server: ",e);
  }
 finally {
    try {
      if (uploadStream != null)       uploadStream.close();
      if (fileStream != null)       fileStream.close();
      if (input != null)       input.close();
    }
 catch (    Exception e) {
      throw new Exception("Unable to close streams",e);
    }
    System.setProperty("http.proxyHost",Const.NVL(beforeProxyHost,""));
    System.setProperty("http.proxyPort",Const.NVL(beforeProxyPort,""));
    System.setProperty("http.nonProxyHosts",Const.NVL(beforeNonProxyHosts,""));
  }
}
