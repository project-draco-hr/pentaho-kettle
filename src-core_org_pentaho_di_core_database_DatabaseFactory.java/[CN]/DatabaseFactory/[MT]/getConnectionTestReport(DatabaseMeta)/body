{
  if (databaseMeta.getAccessType() != DatabaseMeta.TYPE_ACCESS_PLUGIN) {
    StringBuffer report=new StringBuffer();
    Database db=new Database(databaseMeta);
    if (databaseMeta.isPartitioned()) {
      PartitionDatabaseMeta[] partitioningInformation=databaseMeta.getPartitioningInformation();
      for (int i=0; i < partitioningInformation.length; i++) {
        try {
          db.connect(partitioningInformation[i].getPartitionId());
          report.append(Messages.getString("DatabaseMeta.report.ConnectionWithPartOk",databaseMeta.getName(),partitioningInformation[i].getPartitionId()) + Const.CR);
        }
 catch (        KettleException e) {
          report.append(Messages.getString("DatabaseMeta.report.ConnectionWithPartError",databaseMeta.getName(),partitioningInformation[i].getPartitionId(),e.toString()) + Const.CR);
          report.append(Const.getStackTracker(e) + Const.CR);
        }
 finally {
          db.disconnect();
        }
        appendConnectionInfo(report,db.environmentSubstitute(partitioningInformation[i].getHostname()),db.environmentSubstitute(partitioningInformation[i].getPort()),db.environmentSubstitute(partitioningInformation[i].getDatabaseName()));
        report.append(Const.CR);
      }
    }
 else {
      try {
        db.connect();
        report.append(Messages.getString("DatabaseMeta.report.ConnectionOk",databaseMeta.getName()) + Const.CR);
      }
 catch (      KettleException e) {
        report.append(Messages.getString("DatabaseMeta.report.ConnectionError",databaseMeta.getName()) + e.toString() + Const.CR);
        report.append(Const.getStackTracker(e) + Const.CR);
      }
 finally {
        db.disconnect();
      }
      appendConnectionInfo(report,db.environmentSubstitute(databaseMeta.getHostname()),db.environmentSubstitute(databaseMeta.getDatabasePortNumberString()),db.environmentSubstitute(databaseMeta.getDatabaseName()));
      report.append(Const.CR);
    }
    return report.toString();
  }
 else {
    return Messages.getString("BaseDatabaseMeta.TestConnectionReportNotImplemented.Message");
  }
}
