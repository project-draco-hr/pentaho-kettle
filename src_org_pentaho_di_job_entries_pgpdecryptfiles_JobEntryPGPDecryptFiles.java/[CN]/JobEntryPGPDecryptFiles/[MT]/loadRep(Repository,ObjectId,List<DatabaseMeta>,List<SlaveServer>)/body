{
  try {
    gpglocation=rep.getJobEntryAttributeString(id_jobentry,"gpglocation");
    arg_from_previous=rep.getJobEntryAttributeBoolean(id_jobentry,"arg_from_previous");
    include_subfolders=rep.getJobEntryAttributeBoolean(id_jobentry,"include_subfolders");
    add_result_filesname=rep.getJobEntryAttributeBoolean(id_jobentry,"add_result_filesname");
    destination_is_a_file=rep.getJobEntryAttributeBoolean(id_jobentry,"destination_is_a_file");
    create_destination_folder=rep.getJobEntryAttributeBoolean(id_jobentry,"create_destination_folder");
    nr_errors_less_than=rep.getJobEntryAttributeString(id_jobentry,"nr_errors_less_than");
    success_condition=rep.getJobEntryAttributeString(id_jobentry,"success_condition");
    add_date=rep.getJobEntryAttributeBoolean(id_jobentry,"add_date");
    add_time=rep.getJobEntryAttributeBoolean(id_jobentry,"add_time");
    SpecifyFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyFormat");
    date_time_format=rep.getJobEntryAttributeString(id_jobentry,"date_time_format");
    AddDateBeforeExtension=rep.getJobEntryAttributeBoolean(id_jobentry,"AddDateBeforeExtension");
    DoNotKeepFolderStructure=rep.getJobEntryAttributeBoolean(id_jobentry,"DoNotKeepFolderStructure");
    iffileexists=rep.getJobEntryAttributeString(id_jobentry,"iffileexists");
    destinationFolder=rep.getJobEntryAttributeString(id_jobentry,"destinationFolder");
    ifmovedfileexists=rep.getJobEntryAttributeString(id_jobentry,"ifmovedfileexists");
    moved_date_time_format=rep.getJobEntryAttributeString(id_jobentry,"moved_date_time_format");
    AddMovedDateBeforeExtension=rep.getJobEntryAttributeBoolean(id_jobentry,"AddMovedDateBeforeExtension");
    create_move_to_folder=rep.getJobEntryAttributeBoolean(id_jobentry,"create_move_to_folder");
    add_moved_date=rep.getJobEntryAttributeBoolean(id_jobentry,"add_moved_date");
    add_moved_time=rep.getJobEntryAttributeBoolean(id_jobentry,"add_moved_time");
    SpecifyMoveFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyMoveFormat");
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"source_filefolder");
    source_filefolder=new String[argnr];
    passphrase=new String[argnr];
    destination_filefolder=new String[argnr];
    wildcard=new String[argnr];
    for (int a=0; a < argnr; a++) {
      source_filefolder[a]=rep.getJobEntryAttributeString(id_jobentry,a,"source_filefolder");
      passphrase[a]=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"passphrase"));
      destination_filefolder[a]=rep.getJobEntryAttributeString(id_jobentry,a,"destination_filefolder");
      wildcard[a]=rep.getJobEntryAttributeString(id_jobentry,a,"wildcard");
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobPGPDecryptFiles.Error.Exception.UnableLoadRep") + id_jobentry,dbe);
  }
}
