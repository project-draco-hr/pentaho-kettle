{
  super.readRep(rep,metaStore,id_step,databases);
  try {
    setCondition(rep.getStepAttributeString(id_step,"condition"));
    setQuery(rep.getStepAttributeString(id_step,"query"));
    setSpecifyQuery(rep.getStepAttributeBoolean(id_step,"specifyQuery"));
    setIncludeTargetURL(rep.getStepAttributeBoolean(id_step,"include_targeturl"));
    setTargetURLField(rep.getStepAttributeString(id_step,"targeturl_field"));
    setIncludeModule(rep.getStepAttributeBoolean(id_step,"include_module"));
    setModuleField(rep.getStepAttributeString(id_step,"module_field"));
    setIncludeRowNumber(rep.getStepAttributeBoolean(id_step,"include_rownum"));
    setIncludeDeletionDate(rep.getStepAttributeBoolean(id_step,"include_deletion_date"));
    setRowNumberField(rep.getStepAttributeString(id_step,"rownum_field"));
    setDeletionDateField(rep.getStepAttributeString(id_step,"deletion_date_field"));
    setIncludeSQL(rep.getStepAttributeBoolean(id_step,"include_sql"));
    setSQLField(rep.getStepAttributeString(id_step,"sql_field"));
    setIncludeTimestamp(rep.getStepAttributeBoolean(id_step,"include_Timestamp"));
    setTimestampField(rep.getStepAttributeString(id_step,"timestamp_field"));
    setRowLimit(rep.getStepAttributeString(id_step,"limit"));
    setReadFrom(rep.getStepAttributeString(id_step,"read_from"));
    setReadTo(rep.getStepAttributeString(id_step,"read_to"));
    setRecordsFilter(SalesforceConnectionUtils.getRecordsFilterByCode(Const.NVL(rep.getStepAttributeString(id_step,"records_filter"),"")));
    setQueryAll(rep.getStepAttributeBoolean(id_step,"queryAll"));
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      SalesforceInputField field=new SalesforceInputField();
      field.readRep(rep,metaStore,id_step,i);
      inputFields[i]=field;
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
