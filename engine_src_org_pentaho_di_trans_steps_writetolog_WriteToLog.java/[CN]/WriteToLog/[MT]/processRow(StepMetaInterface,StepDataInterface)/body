{
  meta=(WriteToLogMeta)smi;
  data=(WriteToLogData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (rowCounterLimitHit) {
    putRow(getInputRowMeta(),r);
    return true;
  }
  if (first) {
    first=false;
    if (meta.getFieldName() != null && meta.getFieldName().length > 0) {
      data.fieldnrs=new int[meta.getFieldName().length];
      for (int i=0; i < data.fieldnrs.length; i++) {
        data.fieldnrs[i]=getInputRowMeta().indexOfValue(meta.getFieldName()[i]);
        if (data.fieldnrs[i] < 0) {
          logError(BaseMessages.getString(PKG,"WriteToLog.Log.CanNotFindField",meta.getFieldName()[i]));
          throw new KettleException(BaseMessages.getString(PKG,"WriteToLog.Log.CanNotFindField",meta.getFieldName()[i]));
        }
      }
    }
 else {
      data.fieldnrs=new int[getInputRowMeta().size()];
      for (int i=0; i < data.fieldnrs.length; i++) {
        data.fieldnrs[i]=i;
      }
    }
    data.fieldnr=data.fieldnrs.length;
    data.loglevel=meta.getLogLevelByDesc();
    data.logmessage=Const.NVL(this.environmentSubstitute(meta.getLogMessage()),"");
    if (!Utils.isEmpty(data.logmessage)) {
      data.logmessage+=Const.CR + Const.CR;
    }
  }
  StringBuilder out=new StringBuilder();
  out.append(Const.CR + "------------> " + BaseMessages.getString(PKG,"WriteToLog.Log.NLigne","" + getLinesRead())+ "------------------------------"+ Const.CR);
  out.append(getRealLogMessage());
  for (int i=0; i < data.fieldnr; i++) {
    String fieldvalue=getInputRowMeta().getString(r,data.fieldnrs[i]);
    if (meta.isdisplayHeader()) {
      String fieldname=getInputRowMeta().getFieldNames()[data.fieldnrs[i]];
      out.append(fieldname + " = " + fieldvalue+ Const.CR);
    }
 else {
      out.append(fieldvalue + Const.CR);
    }
  }
  out.append(Const.CR + "====================");
  setLog(data.loglevel,out);
  if (meta.isLimitRows() && ++rowCounter >= meta.getLimitRowsNumber()) {
    rowCounterLimitHit=true;
  }
  putRow(getInputRowMeta(),r);
  return true;
}
