{
  Row lu=new Row();
  Row add;
  Value technicalKey;
  Value val_version;
  Value val_date=null;
  Value val_datfrom=null;
  Value val_datto=null;
  if (first) {
    first=false;
    determineTechKeyCreation();
    if (getCopy() == 0)     data.db.checkDimZero(meta.getSchemaName(),meta.getTableName(),meta.getKeyField(),meta.getVersionField(),meta.isAutoIncrement());
    data.db.setDimLookup(meta.getSchemaName(),meta.getTableName(),meta.getKeyLookup(),meta.getKeyField(),meta.getVersionField(),meta.getFieldLookup(),meta.getFieldStream(),meta.getDateFrom(),meta.getDateTo());
    data.keynrs=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0) {
        throw new KettleStepException(Messages.getString("DimensionLookup.Exception.KeyFieldNotFound",meta.getKeyStream()[i]));
      }
    }
    if (meta.isUpdate()) {
      data.fieldnrs=new int[meta.getFieldStream().length];
      for (int i=0; meta.getFieldStream() != null && i < meta.getFieldStream().length; i++) {
        data.fieldnrs[i]=row.searchValueIndex(meta.getFieldStream()[i]);
      }
    }
    if (meta.getDateField() != null && meta.getDateField().length() > 0) {
      data.datefieldnr=row.searchValueIndex(meta.getDateField());
    }
 else {
      data.datefieldnr=-1;
    }
    meta.setNotFound(new Value(meta.getKeyField(),(double)meta.getDatabaseMeta().getNotFoundTK(meta.isAutoIncrement())));
    if (meta.getKeyRename() != null && meta.getKeyRename().length() > 0)     meta.getNotFound().setName(meta.getKeyRename());
    if (meta.getDateField() != null && data.datefieldnr >= 0) {
      data.val_datnow=row.getValue(data.datefieldnr);
    }
 else {
      Calendar cal=Calendar.getInstance();
      data.val_datnow=new Value("MIN",new Date(cal.getTimeInMillis()));
    }
  }
  if (meta.getDateField() != null && data.datefieldnr >= 0) {
    data.val_datnow=row.getValue(data.datefieldnr);
  }
  for (int i=0; i < meta.getKeyStream().length; i++) {
    try {
      lu.addValue(row.getValue(data.keynrs[i]));
    }
 catch (    Exception e) {
      throw new KettleStepException(Messages.getString("DimensionLookup.Exception.ErrorDetectedInGettingKey",i + "",data.keynrs[i] + "/" + row.size(),row.toString()));
    }
  }
  if (data.datefieldnr >= 0)   val_date=row.getValue(data.datefieldnr);
 else   val_date=data.val_datnow;
  if (log.isDebug())   logDebug(Messages.getString("DimensionLookup.Log.LookupRow") + lu.toString() + " val_date="+ val_date.toString());
  data.db.setDimValues(lu,val_date);
  add=data.db.getLookup();
  if (!meta.isUpdate()) {
    if (add == null) {
      add=new Row();
      add.addValue(meta.getNotFound());
      Value v;
      for (int i=0; i < meta.getFieldStream().length; i++) {
        if (meta.getFieldStream()[i] != null) {
          if (meta.getFieldStream()[i] != null)           v=new Value(meta.getFieldStream()[i],meta.getFieldUpdate()[i]);
 else           v=new Value(meta.getFieldLookup()[i],meta.getFieldUpdate()[i]);
          v.setNull();
          add.addValue(v);
        }
      }
    }
 else {
      add.removeValue(1);
      if (meta.getKeyRename() != null && meta.getKeyRename().length() > 0)       add.getValue(0).setName(meta.getKeyRename());
    }
  }
 else {
    if (add == null) {
      if (log.isRowLevel())       logRowlevel(Messages.getString("DimensionLookup.Log.NoDimensionEntryFound") + lu + ")");
      val_datfrom=new Value("MIN",meta.getMinDate());
      val_datto=new Value("MAX",meta.getMaxDate());
      val_version=new Value(meta.getVersionField(),1L);
      boolean autoinc=false;
      technicalKey=null;
switch (getTechKeyCreation()) {
case CREATION_METHOD_TABLEMAX:
        technicalKey=new Value(meta.getKeyField(),0L);
      data.db.getNextValue(getTransMeta().getCounters(),meta.getSchemaName() + "." + meta.getTableName(),technicalKey);
    break;
case CREATION_METHOD_AUTOINC:
  autoinc=true;
technicalKey=new Value(meta.getKeyField(),0L);
break;
case CREATION_METHOD_SEQUENCE:
technicalKey=data.db.getNextSequenceValue(meta.getSchemaName(),meta.getSequenceName(),meta.getKeyField());
if (technicalKey != null && log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.FoundNextSequence") + technicalKey.toString());
break;
}
data.db.dimInsert(row,meta.getSchemaName(),meta.getTableName(),true,autoinc ? null : meta.getKeyField(),autoinc,technicalKey,meta.getVersionField(),val_version,meta.getDateFrom(),val_datfrom,meta.getDateTo(),val_datto,meta.getFieldLookup(),data.fieldnrs,meta.getKeyStream(),meta.getKeyLookup(),data.keynrs);
linesOutput++;
add=new Row();
if (meta.getKeyRename() != null && meta.getKeyRename().length() > 0) technicalKey.setName(meta.getKeyRename());
add.addValue(technicalKey);
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.AddedDimensionEntry") + add.toString());
}
 else {
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.DimensionEntryFound") + add);
technicalKey=add.getValue(0);
val_version=add.getValue(1);
val_datfrom=new Value("MIN",meta.getMinDate());
val_datto=new Value("MAX",meta.getMaxDate());
int cmp;
boolean insert=false;
boolean identical=true;
boolean punch=false;
Value v1, v2;
for (int i=0; i < meta.getFieldStream().length; i++) {
v1=row.getValue(data.fieldnrs[i]);
v2=add.getValue(i + 2);
cmp=v1.compare(v2);
if (cmp != 0) identical=false;
if (cmp != 0 && meta.getFieldUpdate()[i] == DimensionLookupMeta.TYPE_UPDATE_DIM_INSERT) {
insert=true;
}
if (cmp != 0 && meta.getFieldUpdate()[i] == DimensionLookupMeta.TYPE_UPDATE_DIM_PUNCHTHROUGH) {
punch=true;
}
logRowlevel(Messages.getString("DimensionLookup.Log.ComparingValues","" + v1,"" + v2,String.valueOf(cmp),String.valueOf(identical),String.valueOf(insert),String.valueOf(punch)));
}
if (!insert) {
if (!identical) {
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.UpdateRowWithValues") + row);
data.db.dimUpdate(row,meta.getSchemaName(),meta.getTableName(),meta.getFieldLookup(),data.fieldnrs,meta.getKeyField(),technicalKey);
linesUpdated++;
}
 else {
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.SkipLine"));
linesSkipped++;
}
}
 else {
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.InsertNewVersion") + technicalKey.toString());
val_datfrom=data.val_datnow;
val_datto=new Value("MAX",meta.getMaxDate());
boolean autoinc=false;
if (meta.getDatabaseMeta().supportsAutoinc() && meta.isAutoIncrement()) {
autoinc=true;
technicalKey=new Value(meta.getKeyField(),0.0);
}
 else if (meta.getDatabaseMeta().supportsSequences() && meta.getSequenceName() != null && meta.getSequenceName().length() > 0) {
technicalKey=data.db.getNextSequenceValue(meta.getSchemaName(),meta.getSequenceName(),meta.getKeyField());
if (technicalKey != null && log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.FoundNextSequence2") + technicalKey.toString());
}
 else {
technicalKey=new Value(meta.getKeyField(),0L);
data.db.getNextValue(getTransMeta().getCounters(),meta.getSchemaName() + "." + meta.getTableName(),technicalKey);
}
data.db.dimInsert(row,meta.getSchemaName(),meta.getTableName(),false,meta.getKeyField(),autoinc,technicalKey,meta.getVersionField(),val_version,meta.getDateFrom(),val_datfrom,meta.getDateTo(),val_datto,meta.getFieldLookup(),data.fieldnrs,meta.getKeyStream(),meta.getKeyLookup(),data.keynrs);
linesOutput++;
}
if (punch) {
data.db.dimPunchThrough(row,meta.getSchemaName(),meta.getTableName(),meta.getFieldUpdate(),meta.getFieldLookup(),data.fieldnrs,meta.getKeyStream(),meta.getKeyLookup(),data.keynrs);
linesUpdated++;
}
add=new Row();
if (meta.getKeyRename() != null && meta.getKeyRename().length() > 0) technicalKey.setName(meta.getKeyRename());
add.addValue(technicalKey);
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.TechnicalKey") + technicalKey);
}
}
if (log.isRowLevel()) logRowlevel(Messages.getString("DimensionLookup.Log.AddValuesToRow") + add);
for (int i=0; i < add.size(); i++) {
row.addValue(add.getValue(i));
}
Value date;
if (data.datefieldnr >= 0) date=row.getValue(data.datefieldnr);
 else date=new Value("date",new Date());
if (data.min_date.compare(date) > 0) data.min_date.setValue(date.getDate());
if (data.max_date.compare(date) < 0) data.max_date.setValue(date.getDate());
}
