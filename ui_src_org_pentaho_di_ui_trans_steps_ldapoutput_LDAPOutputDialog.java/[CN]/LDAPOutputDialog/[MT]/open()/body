{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.DialogTitle"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.General.Tab"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout fileLayout=new FormLayout();
  fileLayout.marginWidth=3;
  fileLayout.marginHeight=3;
  wGeneralComp.setLayout(fileLayout);
  wConnectionGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wConnectionGroup);
  wConnectionGroup.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.ConnectionGroup.Label"));
  FormLayout connectiongroupLayout=new FormLayout();
  connectiongroupLayout.marginWidth=10;
  connectiongroupLayout.marginHeight=10;
  wConnectionGroup.setLayout(connectiongroupLayout);
  wlHost=new Label(wConnectionGroup,SWT.RIGHT);
  wlHost.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Host.Label"));
  props.setLook(wlHost);
  fdlHost=new FormData();
  fdlHost.left=new FormAttachment(0,0);
  fdlHost.top=new FormAttachment(wStepname,margin);
  fdlHost.right=new FormAttachment(middle,-margin);
  wlHost.setLayoutData(fdlHost);
  wHost=new TextVar(transMeta,wConnectionGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wHost.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.Host.Tooltip"));
  props.setLook(wHost);
  wHost.addModifyListener(lsMod);
  fdHost=new FormData();
  fdHost.left=new FormAttachment(middle,0);
  fdHost.top=new FormAttachment(wStepname,margin);
  fdHost.right=new FormAttachment(100,0);
  wHost.setLayoutData(fdHost);
  wlPort=new Label(wConnectionGroup,SWT.RIGHT);
  wlPort.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Port.Label"));
  props.setLook(wlPort);
  fdlPort=new FormData();
  fdlPort.left=new FormAttachment(0,0);
  fdlPort.top=new FormAttachment(wHost,margin);
  fdlPort.right=new FormAttachment(middle,-margin);
  wlPort.setLayoutData(fdlPort);
  wPort=new TextVar(transMeta,wConnectionGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPort);
  wPort.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.Port.Tooltip"));
  wPort.addModifyListener(lsMod);
  fdPort=new FormData();
  fdPort.left=new FormAttachment(middle,0);
  fdPort.top=new FormAttachment(wHost,margin);
  fdPort.right=new FormAttachment(100,0);
  wPort.setLayoutData(fdPort);
  wlReferral=new Label(wConnectionGroup,SWT.RIGHT);
  wlReferral.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Referral.Label"));
  props.setLook(wlReferral);
  fdlReferral=new FormData();
  fdlReferral.left=new FormAttachment(0,0);
  fdlReferral.right=new FormAttachment(middle,-margin);
  fdlReferral.top=new FormAttachment(wPort,margin);
  wlReferral.setLayoutData(fdlReferral);
  wReferral=new CCombo(wConnectionGroup,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wReferral);
  wReferral.addModifyListener(lsMod);
  fdReferral=new FormData();
  fdReferral.left=new FormAttachment(middle,0);
  fdReferral.top=new FormAttachment(wPort,margin);
  fdReferral.right=new FormAttachment(100,-margin);
  wReferral.setLayoutData(fdReferral);
  wReferral.setItems(LDAPOutputMeta.referralTypeDesc);
  wReferral.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
    }
  }
);
  wlDerefAliases=new Label(wConnectionGroup,SWT.RIGHT);
  wlDerefAliases.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.DerefAliases.Label"));
  props.setLook(wlDerefAliases);
  fdlDerefAliases=new FormData();
  fdlDerefAliases.left=new FormAttachment(0,0);
  fdlDerefAliases.right=new FormAttachment(middle,-margin);
  fdlDerefAliases.top=new FormAttachment(wReferral,margin);
  wlDerefAliases.setLayoutData(fdlDerefAliases);
  wDerefAliases=new CCombo(wConnectionGroup,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wDerefAliases);
  wDerefAliases.addModifyListener(lsMod);
  fdDerefAliases=new FormData();
  fdDerefAliases.left=new FormAttachment(middle,0);
  fdDerefAliases.top=new FormAttachment(wReferral,margin);
  fdDerefAliases.right=new FormAttachment(100,-margin);
  wDerefAliases.setLayoutData(fdDerefAliases);
  wDerefAliases.setItems(LDAPOutputMeta.derefAliasesTypeDesc);
  wDerefAliases.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
    }
  }
);
  wlProtocol=new Label(wConnectionGroup,SWT.RIGHT);
  wlProtocol.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Protocol.Label"));
  props.setLook(wlProtocol);
  fdlProtocol=new FormData();
  fdlProtocol.left=new FormAttachment(0,0);
  fdlProtocol.right=new FormAttachment(middle,-margin);
  fdlProtocol.top=new FormAttachment(wDerefAliases,margin);
  wlProtocol.setLayoutData(fdlProtocol);
  wProtocol=new ComboVar(transMeta,wConnectionGroup,SWT.BORDER | SWT.READ_ONLY);
  wProtocol.setEditable(true);
  props.setLook(wProtocol);
  wProtocol.addModifyListener(lsMod);
  fdProtocol=new FormData();
  fdProtocol.left=new FormAttachment(middle,0);
  fdProtocol.top=new FormAttachment(wDerefAliases,margin);
  fdProtocol.right=new FormAttachment(100,-margin);
  wProtocol.setLayoutData(fdProtocol);
  wProtocol.setItems(LdapProtocolFactory.getConnectionTypes(log).toArray(new String[]{}));
  wProtocol.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setProtocol();
    }
  }
);
  fdConnectionGroup=new FormData();
  fdConnectionGroup.left=new FormAttachment(0,margin);
  fdConnectionGroup.top=new FormAttachment(0,margin);
  fdConnectionGroup.right=new FormAttachment(100,-margin);
  wConnectionGroup.setLayoutData(fdConnectionGroup);
  wAuthenticationGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wAuthenticationGroup);
  wAuthenticationGroup.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.AuthenticationGroup.Label"));
  FormLayout AuthenticationGroupLayout=new FormLayout();
  AuthenticationGroupLayout.marginWidth=10;
  AuthenticationGroupLayout.marginHeight=10;
  wAuthenticationGroup.setLayout(AuthenticationGroupLayout);
  wlusingAuthentication=new Label(wAuthenticationGroup,SWT.RIGHT);
  wlusingAuthentication.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.usingAuthentication.Label"));
  props.setLook(wlusingAuthentication);
  fdlusingAuthentication=new FormData();
  fdlusingAuthentication.left=new FormAttachment(0,0);
  fdlusingAuthentication.top=new FormAttachment(wConnectionGroup,margin);
  fdlusingAuthentication.right=new FormAttachment(middle,-margin);
  wlusingAuthentication.setLayoutData(fdlusingAuthentication);
  wusingAuthentication=new Button(wAuthenticationGroup,SWT.CHECK);
  props.setLook(wusingAuthentication);
  wusingAuthentication.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.usingAuthentication.Tooltip"));
  FormData fdusingAuthentication=new FormData();
  fdusingAuthentication.left=new FormAttachment(middle,0);
  fdusingAuthentication.top=new FormAttachment(wConnectionGroup,margin);
  wusingAuthentication.setLayoutData(fdusingAuthentication);
  wusingAuthentication.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      useAuthentication();
    }
  }
);
  wlUserName=new Label(wAuthenticationGroup,SWT.RIGHT);
  wlUserName.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Username.Label"));
  props.setLook(wlUserName);
  fdlUserName=new FormData();
  fdlUserName.left=new FormAttachment(0,0);
  fdlUserName.top=new FormAttachment(wusingAuthentication,margin);
  fdlUserName.right=new FormAttachment(middle,-margin);
  wlUserName.setLayoutData(fdlUserName);
  wUserName=new TextVar(transMeta,wAuthenticationGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wUserName);
  wUserName.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.Username.Tooltip"));
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(middle,0);
  fdUserName.top=new FormAttachment(wusingAuthentication,margin);
  fdUserName.right=new FormAttachment(100,0);
  wUserName.setLayoutData(fdUserName);
  wlPassword=new Label(wAuthenticationGroup,SWT.RIGHT);
  wlPassword.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Password.Label"));
  props.setLook(wlPassword);
  fdlPassword=new FormData();
  fdlPassword.left=new FormAttachment(0,0);
  fdlPassword.top=new FormAttachment(wUserName,margin);
  fdlPassword.right=new FormAttachment(middle,-margin);
  wlPassword.setLayoutData(fdlPassword);
  wPassword=new TextVar(transMeta,wAuthenticationGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wPassword.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.Password.Tooltip"));
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(middle,0);
  fdPassword.top=new FormAttachment(wUserName,margin);
  fdPassword.right=new FormAttachment(100,0);
  wPassword.setLayoutData(fdPassword);
  fdAuthenticationGroup=new FormData();
  fdAuthenticationGroup.left=new FormAttachment(0,margin);
  fdAuthenticationGroup.top=new FormAttachment(wConnectionGroup,margin);
  fdAuthenticationGroup.right=new FormAttachment(100,-margin);
  wAuthenticationGroup.setLayoutData(fdAuthenticationGroup);
  wCertificateGroup=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wCertificateGroup);
  wCertificateGroup.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.CertificateGroup.Label"));
  FormLayout CertificateGroupLayout=new FormLayout();
  CertificateGroupLayout.marginWidth=10;
  CertificateGroupLayout.marginHeight=10;
  wCertificateGroup.setLayout(CertificateGroupLayout);
  wlsetTrustStore=new Label(wCertificateGroup,SWT.RIGHT);
  wlsetTrustStore.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.setTrustStore.Label"));
  props.setLook(wlsetTrustStore);
  fdlsetTrustStore=new FormData();
  fdlsetTrustStore.left=new FormAttachment(0,0);
  fdlsetTrustStore.top=new FormAttachment(wAuthenticationGroup,margin);
  fdlsetTrustStore.right=new FormAttachment(middle,-margin);
  wlsetTrustStore.setLayoutData(fdlsetTrustStore);
  wsetTrustStore=new Button(wCertificateGroup,SWT.CHECK);
  props.setLook(wsetTrustStore);
  wsetTrustStore.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.setTrustStore.Tooltip"));
  fdsetTrustStore=new FormData();
  fdsetTrustStore.left=new FormAttachment(middle,0);
  fdsetTrustStore.top=new FormAttachment(wAuthenticationGroup,margin);
  wsetTrustStore.setLayoutData(fdsetTrustStore);
  wsetTrustStore.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      setTrustStore();
    }
  }
);
  wlTrustStorePath=new Label(wCertificateGroup,SWT.RIGHT);
  wlTrustStorePath.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustStorePath.Label"));
  props.setLook(wlTrustStorePath);
  fdlTrustStorePath=new FormData();
  fdlTrustStorePath.left=new FormAttachment(0,-margin);
  fdlTrustStorePath.top=new FormAttachment(wsetTrustStore,margin);
  fdlTrustStorePath.right=new FormAttachment(middle,-margin);
  wlTrustStorePath.setLayoutData(fdlTrustStorePath);
  wbbFilename=new Button(wCertificateGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wbbFilename);
  wbbFilename.setText(BaseMessages.getString(PKG,"System.Button.Browse"));
  wbbFilename.setToolTipText(BaseMessages.getString(PKG,"System.Tooltip.BrowseForFileOrDirAndAdd"));
  fdbFilename=new FormData();
  fdbFilename.right=new FormAttachment(100,0);
  fdbFilename.top=new FormAttachment(wsetTrustStore,margin);
  wbbFilename.setLayoutData(fdbFilename);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wTrustStorePath.getText() != null) {
        String fpath=transMeta.environmentSubstitute(wTrustStorePath.getText());
        dialog.setFilterPath(fpath);
      }
      if (dialog.open() != null) {
        String str=dialog.getFilterPath();
        wTrustStorePath.setText(str);
      }
    }
  }
);
  wTrustStorePath=new TextVar(transMeta,wCertificateGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTrustStorePath);
  wTrustStorePath.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustStorePath.Tooltip"));
  wTrustStorePath.addModifyListener(lsMod);
  fdTrustStorePath=new FormData();
  fdTrustStorePath.left=new FormAttachment(middle,0);
  fdTrustStorePath.top=new FormAttachment(wsetTrustStore,margin);
  fdTrustStorePath.right=new FormAttachment(wbbFilename,-margin);
  wTrustStorePath.setLayoutData(fdTrustStorePath);
  wlTrustStorePassword=new Label(wCertificateGroup,SWT.RIGHT);
  wlTrustStorePassword.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustStorePassword.Label"));
  props.setLook(wlTrustStorePassword);
  fdlTrustStorePassword=new FormData();
  fdlTrustStorePassword.left=new FormAttachment(0,-margin);
  fdlTrustStorePassword.top=new FormAttachment(wTrustStorePath,margin);
  fdlTrustStorePassword.right=new FormAttachment(middle,-margin);
  wlTrustStorePassword.setLayoutData(fdlTrustStorePassword);
  wTrustStorePassword=new TextVar(transMeta,wCertificateGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTrustStorePassword);
  wTrustStorePassword.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustStorePassword.Tooltip"));
  wTrustStorePassword.addModifyListener(lsMod);
  fdTrustStorePassword=new FormData();
  fdTrustStorePassword.left=new FormAttachment(middle,0);
  fdTrustStorePassword.top=new FormAttachment(wTrustStorePath,margin);
  fdTrustStorePassword.right=new FormAttachment(100,-margin);
  wTrustStorePassword.setLayoutData(fdTrustStorePassword);
  wlTrustAll=new Label(wCertificateGroup,SWT.RIGHT);
  wlTrustAll.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustAll.Label"));
  props.setLook(wlTrustAll);
  fdlTrustAll=new FormData();
  fdlTrustAll.left=new FormAttachment(0,0);
  fdlTrustAll.top=new FormAttachment(wTrustStorePassword,margin);
  fdlTrustAll.right=new FormAttachment(middle,-margin);
  wlTrustAll.setLayoutData(fdlTrustAll);
  wTrustAll=new Button(wCertificateGroup,SWT.CHECK);
  props.setLook(wTrustAll);
  wTrustAll.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.TrustAll.Tooltip"));
  fdTrustAll=new FormData();
  fdTrustAll.left=new FormAttachment(middle,0);
  fdTrustAll.top=new FormAttachment(wTrustStorePassword,margin);
  wTrustAll.setLayoutData(fdTrustAll);
  wTrustAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      trustAll();
    }
  }
);
  fdCertificateGroup=new FormData();
  fdCertificateGroup.left=new FormAttachment(0,margin);
  fdCertificateGroup.top=new FormAttachment(wAuthenticationGroup,margin);
  fdCertificateGroup.right=new FormAttachment(100,-margin);
  wCertificateGroup.setLayoutData(fdCertificateGroup);
  wTest=new Button(wGeneralComp,SWT.PUSH);
  wTest.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.TestConnection.Label"));
  props.setLook(wTest);
  fdTest=new FormData();
  wTest.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.TestConnection.Tooltip"));
  fdTest.top=new FormAttachment(wCertificateGroup,margin);
  fdTest.right=new FormAttachment(100,0);
  wTest.setLayoutData(fdTest);
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(0,0);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  wSettingsTab=new CTabItem(wTabFolder,SWT.NONE);
  wSettingsTab.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Settings.Tab"));
  wSettingsComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wSettingsComp);
  FormLayout settLayout=new FormLayout();
  settLayout.marginWidth=3;
  settLayout.marginHeight=3;
  wSettingsComp.setLayout(settLayout);
  wSettings=new Group(wSettingsComp,SWT.SHADOW_NONE);
  props.setLook(wSettings);
  wSettings.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.Settings.Label"));
  FormLayout SettingsLayout=new FormLayout();
  SettingsLayout.marginWidth=10;
  SettingsLayout.marginHeight=10;
  wSettings.setLayout(SettingsLayout);
  wlOperation=new Label(wSettings,SWT.RIGHT);
  wlOperation.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Operation.Label"));
  props.setLook(wlOperation);
  fdlOperation=new FormData();
  fdlOperation.left=new FormAttachment(0,0);
  fdlOperation.right=new FormAttachment(middle,-margin);
  fdlOperation.top=new FormAttachment(wStepname,margin);
  wlOperation.setLayoutData(fdlOperation);
  wOperation=new CCombo(wSettings,SWT.BORDER | SWT.READ_ONLY);
  props.setLook(wOperation);
  wOperation.addModifyListener(lsMod);
  fdOperation=new FormData();
  fdOperation.left=new FormAttachment(middle,0);
  fdOperation.top=new FormAttachment(wStepname,margin);
  fdOperation.right=new FormAttachment(100,-margin);
  wOperation.setLayoutData(fdOperation);
  wOperation.setItems(LDAPOutputMeta.operationTypeDesc);
  wOperation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateOperation();
      input.setChanged();
    }
  }
);
  wlMultiValuedSeparator=new Label(wSettings,SWT.RIGHT);
  wlMultiValuedSeparator.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.MultiValuedSeparator.Label"));
  props.setLook(wlMultiValuedSeparator);
  fdlMultiValuedSeparator=new FormData();
  fdlMultiValuedSeparator.left=new FormAttachment(0,0);
  fdlMultiValuedSeparator.top=new FormAttachment(wOperation,margin);
  fdlMultiValuedSeparator.right=new FormAttachment(middle,-margin);
  wlMultiValuedSeparator.setLayoutData(fdlMultiValuedSeparator);
  wMultiValuedSeparator=new TextVar(transMeta,wSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wMultiValuedSeparator);
  wMultiValuedSeparator.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.MultiValuedSeparator.Tooltip"));
  wMultiValuedSeparator.addModifyListener(lsMod);
  fdMultiValuedSeparator=new FormData();
  fdMultiValuedSeparator.left=new FormAttachment(middle,0);
  fdMultiValuedSeparator.top=new FormAttachment(wOperation,margin);
  fdMultiValuedSeparator.right=new FormAttachment(100,0);
  wMultiValuedSeparator.setLayoutData(fdMultiValuedSeparator);
  wlFailIfNotExist=new Label(wSettings,SWT.RIGHT);
  wlFailIfNotExist.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.FailIfNotExist.Label"));
  props.setLook(wlFailIfNotExist);
  fdlFailIfNotExist=new FormData();
  fdlFailIfNotExist.left=new FormAttachment(0,0);
  fdlFailIfNotExist.top=new FormAttachment(wMultiValuedSeparator,margin);
  fdlFailIfNotExist.right=new FormAttachment(middle,-margin);
  wlFailIfNotExist.setLayoutData(fdlFailIfNotExist);
  wFailIfNotExist=new Button(wSettings,SWT.CHECK);
  wFailIfNotExist.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.FailIfNotExist.Tooltip"));
  props.setLook(wFailIfNotExist);
  fdFailIfNotExist=new FormData();
  fdFailIfNotExist.left=new FormAttachment(middle,0);
  fdFailIfNotExist.top=new FormAttachment(wMultiValuedSeparator,margin);
  fdFailIfNotExist.right=new FormAttachment(100,0);
  wFailIfNotExist.setLayoutData(fdFailIfNotExist);
  SelectionAdapter lsSelR=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      input.setChanged();
    }
  }
;
  wFailIfNotExist.addSelectionListener(lsSelR);
  wlDnField=new Label(wSettings,SWT.RIGHT);
  wlDnField.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.DnField.Label"));
  props.setLook(wlDnField);
  fdlDnField=new FormData();
  fdlDnField.left=new FormAttachment(0,0);
  fdlDnField.top=new FormAttachment(wFailIfNotExist,margin);
  fdlDnField.right=new FormAttachment(middle,-margin);
  wlDnField.setLayoutData(fdlDnField);
  wDnField=new ComboVar(transMeta,wSettings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wDnField.setEditable(true);
  props.setLook(wDnField);
  wDnField.addModifyListener(lsMod);
  fdDnField=new FormData();
  fdDnField.left=new FormAttachment(middle,0);
  fdDnField.top=new FormAttachment(wFailIfNotExist,margin);
  fdDnField.right=new FormAttachment(100,-margin);
  wDnField.setLayoutData(fdDnField);
  wDnField.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      getPreviousFields();
    }
  }
);
  fdSettings=new FormData();
  fdSettings.left=new FormAttachment(0,margin);
  fdSettings.top=new FormAttachment(wConnectionGroup,margin);
  fdSettings.right=new FormAttachment(100,-margin);
  wSettings.setLayoutData(fdSettings);
  wRenameGroup=new Group(wSettingsComp,SWT.SHADOW_NONE);
  props.setLook(wRenameGroup);
  wRenameGroup.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.RenameGroup.Label"));
  FormLayout RenameGroupLayout=new FormLayout();
  RenameGroupLayout.marginWidth=10;
  RenameGroupLayout.marginHeight=10;
  wRenameGroup.setLayout(RenameGroupLayout);
  wlOldDnField=new Label(wRenameGroup,SWT.RIGHT);
  wlOldDnField.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.OldDnField.Label"));
  props.setLook(wlOldDnField);
  fdlOldDnField=new FormData();
  fdlOldDnField.left=new FormAttachment(0,0);
  fdlOldDnField.top=new FormAttachment(wSettings,margin);
  fdlOldDnField.right=new FormAttachment(middle,-margin);
  wlOldDnField.setLayoutData(fdlOldDnField);
  wOldDnField=new ComboVar(transMeta,wRenameGroup,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wOldDnField.setEditable(true);
  props.setLook(wOldDnField);
  wOldDnField.addModifyListener(lsMod);
  fdOldDnField=new FormData();
  fdOldDnField.left=new FormAttachment(middle,0);
  fdOldDnField.top=new FormAttachment(wSettings,margin);
  fdOldDnField.right=new FormAttachment(100,-margin);
  wOldDnField.setLayoutData(fdOldDnField);
  wOldDnField.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      getPreviousFields();
    }
  }
);
  wlNewDnField=new Label(wRenameGroup,SWT.RIGHT);
  wlNewDnField.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.NewDnField.Label"));
  props.setLook(wlNewDnField);
  fdlNewDnField=new FormData();
  fdlNewDnField.left=new FormAttachment(0,0);
  fdlNewDnField.top=new FormAttachment(wOldDnField,margin);
  fdlNewDnField.right=new FormAttachment(middle,-margin);
  wlNewDnField.setLayoutData(fdlNewDnField);
  wNewDnField=new ComboVar(transMeta,wRenameGroup,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wNewDnField.setEditable(true);
  props.setLook(wNewDnField);
  wNewDnField.addModifyListener(lsMod);
  fdNewDnField=new FormData();
  fdNewDnField.left=new FormAttachment(middle,0);
  fdNewDnField.top=new FormAttachment(wOldDnField,margin);
  fdNewDnField.right=new FormAttachment(100,-margin);
  wNewDnField.setLayoutData(fdNewDnField);
  wNewDnField.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      getPreviousFields();
    }
  }
);
  wlDeleteRDN=new Label(wRenameGroup,SWT.RIGHT);
  wlDeleteRDN.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.DeleteRDN.Label"));
  props.setLook(wlDeleteRDN);
  fdlDeleteRDN=new FormData();
  fdlDeleteRDN.left=new FormAttachment(0,0);
  fdlDeleteRDN.top=new FormAttachment(wNewDnField,margin);
  fdlDeleteRDN.right=new FormAttachment(middle,-margin);
  wlDeleteRDN.setLayoutData(fdlDeleteRDN);
  wDeleteRDN=new Button(wRenameGroup,SWT.CHECK);
  wDeleteRDN.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.DeleteRDN.Tooltip"));
  props.setLook(wDeleteRDN);
  fdDeleteRDN=new FormData();
  fdDeleteRDN.left=new FormAttachment(middle,0);
  fdDeleteRDN.top=new FormAttachment(wNewDnField,margin);
  fdDeleteRDN.right=new FormAttachment(100,0);
  wDeleteRDN.setLayoutData(fdDeleteRDN);
  SelectionAdapter lsSeld=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      input.setChanged();
    }
  }
;
  wDeleteRDN.addSelectionListener(lsSeld);
  fdRenameGroup=new FormData();
  fdRenameGroup.left=new FormAttachment(0,margin);
  fdRenameGroup.top=new FormAttachment(wSettings,margin);
  fdRenameGroup.right=new FormAttachment(100,-margin);
  wRenameGroup.setLayoutData(fdRenameGroup);
  fdSettingsComp=new FormData();
  fdSettingsComp.left=new FormAttachment(0,0);
  fdSettingsComp.top=new FormAttachment(0,0);
  fdSettingsComp.right=new FormAttachment(100,0);
  fdSettingsComp.bottom=new FormAttachment(100,0);
  wSettingsComp.setLayoutData(fdSettingsComp);
  wSettingsComp.layout();
  wSettingsTab.setControl(wSettingsComp);
  wFieldsTab=new CTabItem(wTabFolder,SWT.NONE);
  wFieldsTab.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Fields.Tab"));
  wFieldsComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wFieldsComp);
  FormLayout fieldsLayout=new FormLayout();
  fieldsLayout.marginWidth=3;
  fieldsLayout.marginHeight=3;
  wFieldsComp.setLayout(fieldsLayout);
  wFields=new Group(wFieldsComp,SWT.SHADOW_NONE);
  props.setLook(wFields);
  wFields.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.Group.Fields.Label"));
  FormLayout FieldsLayout=new FormLayout();
  FieldsLayout.marginWidth=10;
  FieldsLayout.marginHeight=10;
  wFields.setLayout(FieldsLayout);
  wlBaseDN=new Label(wFields,SWT.RIGHT);
  wlBaseDN.setText(BaseMessages.getString(PKG,"LDAPOutputDialog.BaseDN.Label"));
  props.setLook(wlBaseDN);
  fdlBaseDN=new FormData();
  fdlBaseDN.left=new FormAttachment(0,0);
  fdlBaseDN.top=new FormAttachment(wSettings,margin);
  fdlBaseDN.right=new FormAttachment(middle,-margin);
  wlBaseDN.setLayoutData(fdlBaseDN);
  wBaseDN=new TextVar(transMeta,wFields,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wBaseDN.setToolTipText(BaseMessages.getString(PKG,"LDAPOutputDialog.BaseDN.Tooltip"));
  props.setLook(wBaseDN);
  wBaseDN.addModifyListener(lsMod);
  fdBaseDN=new FormData();
  fdBaseDN.left=new FormAttachment(middle,0);
  fdBaseDN.top=new FormAttachment(wSettings,margin);
  fdBaseDN.right=new FormAttachment(100,0);
  wBaseDN.setLayoutData(fdBaseDN);
  wBaseDN.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
      if (Const.isEmpty(wBaseDN.getText())) {
        wDoMapping.setEnabled(false);
      }
 else {
        setFieldsCombo();
        wDoMapping.setEnabled(true);
      }
    }
  }
);
  wlReturn=new Label(wFields,SWT.NONE);
  wlReturn.setText(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.UpdateFields.Label"));
  props.setLook(wlReturn);
  fdlReturn=new FormData();
  fdlReturn.left=new FormAttachment(0,0);
  fdlReturn.top=new FormAttachment(wBaseDN,margin);
  wlReturn.setLayoutData(fdlReturn);
  int UpInsCols=3;
  int UpInsRows=(input.getUpdateLookup() != null ? input.getUpdateLookup().length : 1);
  ciReturn=new ColumnInfo[UpInsCols];
  ciReturn[0]=new ColumnInfo(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.ColumnInfo.TableField"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{""},false);
  ciReturn[1]=new ColumnInfo(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.ColumnInfo.StreamField"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{""},false);
  ciReturn[2]=new ColumnInfo(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.ColumnInfo.Update"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{"Y","N"});
  tableFieldColumns.add(ciReturn[0]);
  wReturn=new TableView(transMeta,wFields,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.V_SCROLL| SWT.H_SCROLL,ciReturn,UpInsRows,lsMod,props);
  wGetLU=new Button(wFields,SWT.PUSH);
  wGetLU.setText(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.GetAndUpdateFields.Label"));
  fdGetLU=new FormData();
  fdGetLU.top=new FormAttachment(wlReturn,margin);
  fdGetLU.right=new FormAttachment(100,0);
  wGetLU.setLayoutData(fdGetLU);
  wDoMapping=new Button(wFields,SWT.PUSH);
  wDoMapping.setText(BaseMessages.getString(PKG,"LDAPOutputUpdateDialog.EditMapping.Label"));
  fdDoMapping=new FormData();
  fdDoMapping.top=new FormAttachment(wGetLU,margin);
  fdDoMapping.right=new FormAttachment(100,0);
  wDoMapping.setLayoutData(fdDoMapping);
  wDoMapping.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event arg0){
      generateMappings();
    }
  }
);
  fdReturn=new FormData();
  fdReturn.left=new FormAttachment(0,0);
  fdReturn.top=new FormAttachment(wlReturn,margin);
  fdReturn.right=new FormAttachment(wGetLU,-5 * margin);
  fdReturn.bottom=new FormAttachment(100,-2 * margin);
  wReturn.setLayoutData(fdReturn);
  final Runnable runnable=new Runnable(){
    public void run(){
      StepMeta stepMeta=transMeta.findStep(stepname);
      if (stepMeta != null) {
        try {
          RowMetaInterface row=transMeta.getPrevStepFields(stepMeta);
          for (int i=0; i < row.size(); i++) {
            inputFields.put(row.getValueMeta(i).getName(),Integer.valueOf(i));
          }
          setComboBoxes();
        }
 catch (        KettleException e) {
          logError(BaseMessages.getString(PKG,"System.Dialog.GetFieldsFailed.Message"));
        }
      }
    }
  }
;
  new Thread(runnable).start();
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,margin);
  fdFields.top=new FormAttachment(wSettings,margin);
  fdFields.right=new FormAttachment(100,-margin);
  fdFields.bottom=new FormAttachment(100,-margin);
  wFields.setLayoutData(fdFields);
  fdFieldsComp=new FormData();
  fdFieldsComp.left=new FormAttachment(0,0);
  fdFieldsComp.top=new FormAttachment(0,0);
  fdFieldsComp.right=new FormAttachment(100,0);
  fdFieldsComp.bottom=new FormAttachment(100,0);
  wFieldsComp.setLayoutData(fdFieldsComp);
  wFieldsComp.layout();
  wFieldsTab.setControl(wFieldsComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,wTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsTest=new Listener(){
    public void handleEvent(    Event e){
      test();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsGetLU=new Listener(){
    public void handleEvent(    Event e){
      getUpdate();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wTest.addListener(SWT.Selection,lsTest);
  wCancel.addListener(SWT.Selection,lsCancel);
  wGetLU.addListener(SWT.Selection,lsGetLU);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  setSize();
  getData(input);
  useAuthentication();
  setProtocol();
  setTrustStore();
  updateOperation();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
