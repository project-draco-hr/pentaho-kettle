{
  Object[] outputRow=new Object[inputRow.length];
  for (int i=0; i < inputRow.length; i++) {
    outputRow[i]=inputRow[i];
    String targetField=targetFieldNames[i];
    if (targetField.endsWith(".id")) {
      if (outputRow[i] == null)       outputRow[i]=0;
 else       outputRow[i]=Integer.parseInt(inputRow[i].toString());
      continue;
    }
    if (outputRow[i] == null)     continue;
    for (    Field field : fieldDef)     if (field.getName().equals(targetField)) {
      if (field.getType() == FieldType.SELECTION) {
        boolean validValue=false;
        for (        SelectionOption option : field.getSelectionOptions()) {
          if (option.code.equals(outputRow[i].toString())) {
            validValue=true;
            outputRow[i]=option.value;
            break;
          }
 else           if (option.value.equals(outputRow[i].toString())) {
            validValue=true;
            break;
          }
        }
        if (!validValue)         throw new Exception("Could not find a valid value for section field " + field.getName() + " with value "+ outputRow[i].toString());
      }
switch (field.getType()) {
case MANY2MANY:
        HashMap<String,String> idToName=null;
      if (!modelNameCache.containsKey(field.getRelation())) {
        idToName=new HashMap<String,String>();
        Object[] ids=openERPConnection.searchObject(field.getRelation(),null);
        Object[] names=openERPConnection.nameGet(field.getRelation(),ids);
        for (int j=0; j < ids.length; j++) {
          Object[] nameValue=(Object[])names[j];
          idToName.put(nameValue[0].toString(),nameValue[1].toString());
        }
        modelNameCache.put(field.getRelation(),idToName);
      }
 else       idToName=modelNameCache.get(field.getRelation());
    String newValue="";
  for (  String singleID : inputRow[i].toString().split(","))   if (idToName.containsKey(singleID))   newValue=newValue + "," + idToName.get(singleID);
 else   throw new Exception("Could not find " + field.getRelation() + " with ID "+ singleID);
outputRow[i]=newValue.substring(1);
break;
default :
outputRow[i]=outputRow[i].toString();
break;
}
}
}
return outputRow;
}
