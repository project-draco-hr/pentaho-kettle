{
  if (data.groupBuffer.isEmpty()) {
    return;
  }
  data.groupTimeStart=System.currentTimeMillis();
  if (data.executorJob != null) {
    CentralLogStore.discardLines(data.executorJob.getLogChannelId(),false);
    LoggingRegistry.getInstance().removeIncludingChildren(data.executorJob.getLogChannelId());
  }
  data.executorJob=new Job(meta.getRepository(),data.executorJobMeta,this);
  data.executorJob.setLogLevel(getLogLevel());
  if (meta.getParameters().isInheritingAllVariables()) {
    data.executorJob.shareVariablesWith(this);
  }
  data.executorJob.setInternalKettleVariables(this);
  data.executorJob.copyParametersFrom(data.executorJobMeta);
  data.executorJob.setSourceRows(data.groupBuffer);
  passParametersToJob();
  getTrans().getActiveSubjobs().put(getStepname(),data.executorJob);
  data.executorJob.beginProcessing();
  Result result=new Result();
  try {
    result=data.executorJob.execute(0,result);
  }
 catch (  KettleException e) {
    log.logError("An error occurred executing the job: ",e);
    result.setResult(false);
    result.setNrErrors(1);
  }
 finally {
    try {
      data.executorJob.fireJobFinishListeners();
    }
 catch (    KettleException e) {
      result.setNrErrors(1);
      result.setResult(false);
      log.logError(BaseMessages.getString(PKG,"JobExecutor.Log.ErrorExecJob",e.getMessage()),e);
    }
  }
  if (meta.getExecutionResultTargetStepMeta() != null) {
    Object[] outputRow=RowDataUtil.allocateRowData(data.executionResultsOutputRowMeta.size());
    int idx=0;
    if (!Const.isEmpty(meta.getExecutionTimeField())) {
      outputRow[idx++]=Long.valueOf(System.currentTimeMillis() - data.groupTimeStart);
    }
    if (!Const.isEmpty(meta.getExecutionResultField())) {
      outputRow[idx++]=Boolean.valueOf(result.getResult());
    }
    if (!Const.isEmpty(meta.getExecutionNrErrorsField())) {
      outputRow[idx++]=Long.valueOf(result.getNrErrors());
    }
    if (!Const.isEmpty(meta.getExecutionLinesReadField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesRead());
    }
    if (!Const.isEmpty(meta.getExecutionLinesWrittenField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesWritten());
    }
    if (!Const.isEmpty(meta.getExecutionLinesInputField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesInput());
    }
    if (!Const.isEmpty(meta.getExecutionLinesOutputField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesOutput());
    }
    if (!Const.isEmpty(meta.getExecutionLinesRejectedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesRejected());
    }
    if (!Const.isEmpty(meta.getExecutionLinesUpdatedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesUpdated());
    }
    if (!Const.isEmpty(meta.getExecutionLinesDeletedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrLinesDeleted());
    }
    if (!Const.isEmpty(meta.getExecutionFilesRetrievedField())) {
      outputRow[idx++]=Long.valueOf(result.getNrFilesRetrieved());
    }
    if (!Const.isEmpty(meta.getExecutionExitStatusField())) {
      outputRow[idx++]=Long.valueOf(result.getExitStatus());
    }
    if (!Const.isEmpty(meta.getExecutionLogTextField())) {
      String channelId=data.executorJob.getLogChannelId();
      String logText=CentralLogStore.getAppender().getBuffer(channelId,false).toString();
      outputRow[idx++]=logText;
    }
    if (!Const.isEmpty(meta.getExecutionLogChannelIdField())) {
      outputRow[idx++]=data.executorJob.getLogChannelId();
    }
    putRowTo(data.executionResultsOutputRowMeta,outputRow,data.executionResultRowSet);
  }
  if (meta.getResultRowsTargetStepMeta() != null && result.getRows() != null) {
    for (    RowMetaAndData row : result.getRows()) {
      Object[] targetRow=RowDataUtil.allocateRowData(data.resultRowsOutputRowMeta.size());
      for (int i=0; i < meta.getResultRowsField().length; i++) {
        ValueMetaInterface valueMeta=row.getRowMeta().getValueMeta(i);
        if (valueMeta.getType() != meta.getResultRowsType()[i]) {
          throw new KettleException(BaseMessages.getString(PKG,"JobExecutor.IncorrectDataTypePassed",valueMeta.getTypeDesc(),ValueMeta.getTypeDesc(meta.getResultRowsType()[i])));
        }
        targetRow[i]=row.getData()[i];
      }
      putRowTo(data.resultRowsOutputRowMeta,targetRow,data.resultRowsRowSet);
    }
  }
  if (meta.getResultFilesTargetStepMeta() != null && result.getResultFilesList() != null) {
    for (    ResultFile resultFile : result.getResultFilesList()) {
      Object[] targetRow=RowDataUtil.allocateRowData(data.resultFilesOutputRowMeta.size());
      int idx=0;
      targetRow[idx++]=resultFile.getFile().getName().toString();
      putRowTo(data.resultFilesOutputRowMeta,targetRow,data.resultFilesRowSet);
    }
  }
  data.groupBuffer.clear();
}
