{
  CheckResult cr;
  if (prev != null && prev.size() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.StepReceivingFields",prev.size() + ""),stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (int i=0; i < keystream.length; i++) {
      int idx=prev.indexOfValue(keystream[i]);
      if (idx < 0) {
        error_message+="\t\t" + keystream[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=Messages.getString("StreamLookupMeta.CheckResult.FieldsNotFound") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.AllFieldsFound"),stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("StreamLookupMeta.CheckResult.CouldNotFindFieldsFromPreviousSteps"),stepMeta);
    remarks.add(cr);
  }
  if (info != null && info.size() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.StepReceivingLookupData",info.size() + ""),stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (int i=0; i < keylookup.length; i++) {
      int idx=info.indexOfValue(keylookup[i]);
      if (idx < 0) {
        error_message+="\t\t" + keylookup[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=Messages.getString("StreamLookupMeta.CheckResult.FieldsNotFoundInLookupStream") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.AllFieldsFoundInTheLookupStream"),stepMeta);
      remarks.add(cr);
    }
    for (int i=0; i < value.length; i++) {
      int idx=info.indexOfValue(value[i]);
      if (idx < 0) {
        error_message+="\t\t" + value[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message=Messages.getString("StreamLookupMeta.CheckResult.FieldsNotFoundInLookupStream2") + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.AllFieldsFoundInTheLookupStream2"),stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("StreamLookupMeta.CheckResult.FieldsNotFoundFromInLookupSep"),stepMeta);
    remarks.add(cr);
  }
  if (lookupFromStep == null) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("StreamLookupMeta.CheckResult.SourceStepNotSelected"),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.SourceStepIsSelected"),stepMeta);
    remarks.add(cr);
    if (info != null) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.SourceStepExist",lookupFromStep + ""),stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("StreamLookupMeta.CheckResult.SourceStepDoesNotExist",lookupFromStep + ""),stepMeta);
      remarks.add(cr);
    }
  }
  if (input.length >= 2) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,Messages.getString("StreamLookupMeta.CheckResult.StepReceivingInfoFromInputSteps",input.length + ""),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,Messages.getString("StreamLookupMeta.CheckResult.NeedAtLeast2InputStreams",Const.CR,Const.CR),stepMeta);
    remarks.add(cr);
  }
}
