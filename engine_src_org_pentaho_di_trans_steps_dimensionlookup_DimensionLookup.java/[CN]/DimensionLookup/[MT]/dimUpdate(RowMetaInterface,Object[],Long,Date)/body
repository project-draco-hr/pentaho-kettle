{
  if (data.prepStatementDimensionUpdate == null) {
    data.dimensionUpdateRowMeta=new RowMeta();
    String sql="UPDATE " + data.schemaTable + Const.CR+ "SET ";
    boolean comma=false;
    for (int i=0; i < meta.getFieldLookup().length; i++) {
      if (!DimensionLookupMeta.isUpdateTypeWithoutArgument(meta.isUpdate(),meta.getFieldUpdate()[i])) {
        if (comma)         sql+=", ";
 else         sql+="  ";
        comma=true;
        sql+=meta.getDatabaseMeta().quoteField(meta.getFieldLookup()[i]) + " = ?" + Const.CR;
        data.dimensionUpdateRowMeta.addValueMeta(rowMeta.getValueMeta(data.fieldnrs[i]));
      }
    }
    for (int i=0; i < meta.getFieldUpdate().length; i++) {
      ValueMetaInterface valueMeta=null;
switch (meta.getFieldUpdate()[i]) {
case DimensionLookupMeta.TYPE_UPDATE_DATE_INSUP:
case DimensionLookupMeta.TYPE_UPDATE_DATE_UPDATED:
        valueMeta=new ValueMeta(meta.getFieldLookup()[i],ValueMetaInterface.TYPE_DATE);
      break;
  }
  if (valueMeta != null) {
    if (comma)     sql+=", ";
 else     sql+="  ";
    comma=true;
    sql+=meta.getDatabaseMeta().quoteField(valueMeta.getName()) + " = ?" + Const.CR;
    data.dimensionUpdateRowMeta.addValueMeta(valueMeta);
  }
}
sql+="WHERE  " + meta.getDatabaseMeta().quoteField(meta.getKeyField()) + " = ?";
data.dimensionUpdateRowMeta.addValueMeta(new ValueMeta(meta.getKeyField(),ValueMetaInterface.TYPE_INTEGER));
try {
  if (log.isDebug())   logDebug("Preparing statement: [" + sql + "]");
  data.prepStatementDimensionUpdate=data.db.getConnection().prepareStatement(meta.getDatabaseMeta().stripCR(sql));
}
 catch (SQLException ex) {
  throw new KettleDatabaseException("Couldn't prepare statement :" + Const.CR + sql,ex);
}
}
Object[] dimensionUpdateRow=new Object[data.dimensionUpdateRowMeta.size()];
int updateIndex=0;
for (int i=0; i < data.fieldnrs.length; i++) {
if (data.fieldnrs[i] >= 0) {
  dimensionUpdateRow[updateIndex++]=row[data.fieldnrs[i]];
}
}
for (int i=0; i < meta.getFieldUpdate().length; i++) {
switch (meta.getFieldUpdate()[i]) {
case DimensionLookupMeta.TYPE_UPDATE_DATE_INSUP:
case DimensionLookupMeta.TYPE_UPDATE_DATE_UPDATED:
  dimensionUpdateRow[updateIndex++]=valueDate;
break;
}
}
dimensionUpdateRow[updateIndex++]=dimkey;
data.db.setValues(data.dimensionUpdateRowMeta,dimensionUpdateRow,data.prepStatementDimensionUpdate);
data.db.insertRow(data.prepStatementDimensionUpdate);
}
