{
  DatabaseMeta databaseMeta=meta.getDatabaseMeta();
  data.lookupRowMeta=new RowMeta();
  String sql="SELECT " + databaseMeta.quoteField(meta.getKeyField()) + ", "+ databaseMeta.quoteField(meta.getVersionField());
  if (!Utils.isEmpty(meta.getFieldLookup())) {
    for (int i=0; i < meta.getFieldLookup().length; i++) {
      if (!Utils.isEmpty(meta.getFieldLookup()[i]) && !DimensionLookupMeta.isUpdateTypeWithoutArgument(meta.isUpdate(),meta.getFieldUpdate()[i])) {
        sql+=", " + databaseMeta.quoteField(meta.getFieldLookup()[i]);
        if (!Utils.isEmpty(meta.getFieldStream()[i]) && !meta.getFieldLookup()[i].equals(meta.getFieldStream()[i])) {
          sql+=" AS " + databaseMeta.quoteField(meta.getFieldStream()[i]);
        }
      }
    }
  }
  if (meta.getCacheSize() >= 0) {
    sql+=", " + databaseMeta.quoteField(meta.getDateFrom()) + ", "+ databaseMeta.quoteField(meta.getDateTo());
  }
  sql+=" FROM " + data.schemaTable + " WHERE ";
  for (int i=0; i < meta.getKeyLookup().length; i++) {
    if (i != 0) {
      sql+=" AND ";
    }
    sql+=databaseMeta.quoteField(meta.getKeyLookup()[i]) + " = ? ";
    data.lookupRowMeta.addValueMeta(rowMeta.getValueMeta(data.keynrs[i]));
  }
  String dateFromField=databaseMeta.quoteField(meta.getDateFrom());
  String dateToField=databaseMeta.quoteField(meta.getDateTo());
  if (meta.isUsingStartDateAlternative() && (meta.getStartDateAlternative() == DimensionLookupMeta.START_DATE_ALTERNATIVE_NULL) || (meta.getStartDateAlternative() == DimensionLookupMeta.START_DATE_ALTERNATIVE_COLUMN_VALUE)) {
    sql+=" AND ( " + dateFromField + " IS NULL OR "+ dateFromField+ " <= ? )"+ Const.CR;
    sql+=" AND " + dateToField + " > ?"+ Const.CR;
    data.lookupRowMeta.addValueMeta(new ValueMetaDate(meta.getDateFrom()));
    data.lookupRowMeta.addValueMeta(new ValueMetaDate(meta.getDateTo()));
  }
 else {
    sql+=" AND ? >= " + dateFromField + Const.CR;
    sql+=" AND ? < " + dateToField + Const.CR;
    data.lookupRowMeta.addValueMeta(new ValueMetaDate(meta.getDateFrom()));
    data.lookupRowMeta.addValueMeta(new ValueMetaDate(meta.getDateTo()));
  }
  try {
    logDetailed("Dimension Lookup setting preparedStatement to [" + sql + "]");
    data.prepStatementLookup=data.db.getConnection().prepareStatement(databaseMeta.stripCR(sql));
    if (databaseMeta.supportsSetMaxRows()) {
      data.prepStatementLookup.setMaxRows(1);
    }
    if (databaseMeta.getDatabaseInterface() instanceof MySQLDatabaseMeta) {
      data.prepStatementLookup.setFetchSize(0);
    }
    logDetailed("Finished preparing dimension lookup statement.");
  }
 catch (  SQLException ex) {
    throw new KettleDatabaseException("Unable to prepare dimension lookup",ex);
  }
}
