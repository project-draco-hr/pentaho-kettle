{
  Map<String,String> map=createVariables1("${","}");
  assertEquals("||",StringUtil.substitute("|${EMPTY}|",map,"${","}",0));
  assertEquals("|case1|",StringUtil.substitute("|${checkcase}|",map,"${","}",0));
  assertEquals("|case2|",StringUtil.substitute("|${CheckCase}|",map,"${","}",0));
  assertEquals("|case3|",StringUtil.substitute("|${CHECKCASE}|",map,"${","}",0));
  assertEquals("|Arecurse|",StringUtil.substitute("|${recursive1}|",map,"${","}",0));
  assertEquals("|recurseB|",StringUtil.substitute("|${recursive3}|",map,"${","}",0));
  assertEquals("|ZfinalB|",StringUtil.substitute("|${recursive5}|",map,"${","}",0));
  try {
    StringUtil.substitute("|${recursive_all}|",map,"${","}",0);
    fail("recursive check is failing");
  }
 catch (  RuntimeException rex) {
  }
  map=createVariables1("%%","%%");
  assertEquals("||",StringUtil.substitute("|%%EMPTY%%|",map,"%%","%%",0));
  assertEquals("|case1|",StringUtil.substitute("|%%checkcase%%|",map,"%%","%%",0));
  assertEquals("|case2|",StringUtil.substitute("|%%CheckCase%%|",map,"%%","%%",0));
  assertEquals("|case3|",StringUtil.substitute("|%%CHECKCASE%%|",map,"%%","%%",0));
  assertEquals("|Arecurse|",StringUtil.substitute("|%%recursive1%%|",map,"%%","%%",0));
  assertEquals("|recurseB|",StringUtil.substitute("|%%recursive3%%|",map,"%%","%%",0));
  assertEquals("|ZfinalB|",StringUtil.substitute("|%%recursive5%%|",map,"%%","%%",0));
  try {
    StringUtil.substitute("|%%recursive_all%%|",map,"%%","%%",0);
    fail("recursive check is failing");
  }
 catch (  RuntimeException rex) {
  }
}
