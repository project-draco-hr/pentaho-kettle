{
  List<RowMetaAndData> list=new ArrayList<RowMetaAndData>();
  RowMetaInterface rm=new RowMeta();
  rm.addValueMeta(new ValueMetaString(KEY1));
  rm.addValueMeta(new ValueMetaString(KEY2));
  rm.addValueMeta(new ValueMetaDate(TMS));
  rm.addValueMeta(new ValueMetaInteger(INT));
  rm.addValueMeta(new ValueMetaString(STR));
  rm.addValueMeta(new ValueMetaInteger(INTG1));
  rm.addValueMeta(new ValueMetaString(STRG2));
  rm.addValueMeta(new ValueMetaString(CONST));
  long time=new Date().getTime();
  String prevKey=null;
  int counter=0;
  int group=0;
  for (int idx=0; idx < MAX_COUNT; idx++) {
    String key1=UUID.randomUUID().toString();
    String key2=null;
    if ((idx % 10 == 0 || idx == 11) && idx != 0) {
      key2=prevKey;
    }
 else {
      key2=UUID.randomUUID().toString();
      prevKey=key2;
    }
    int rand=Math.abs(RN.nextInt() % 10000);
    Timestamp tms=new Timestamp(time + rand);
    Long igr=new Long(rand);
    String caseSen=TestUtilities.generateString(RN,10);
    char ch=(char)(65 + counter);
    String gr2=String.valueOf(ch);
    Object[] row=new Object[]{key1,key2,tms,igr,caseSen,new Long(group),gr2,"stable"};
    list.add(new RowMetaAndData(rm,row));
    if (counter == 13) {
      counter=0;
      group++;
    }
 else {
      counter++;
    }
  }
  return list;
}
