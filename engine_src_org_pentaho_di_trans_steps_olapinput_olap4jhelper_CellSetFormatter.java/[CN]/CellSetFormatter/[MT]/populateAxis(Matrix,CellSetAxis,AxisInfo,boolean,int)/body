{
  if (axis == null)   return;
  final Member[] prevMembers=new Member[axisInfo.getWidth()];
  final MemberCell[] prevMemberInfo=new MemberCell[axisInfo.getWidth()];
  final Member[] members=new Member[axisInfo.getWidth()];
  for (int i=0; i < axis.getPositions().size(); i++) {
    final int x=offset + i;
    final Position position=axis.getPositions().get(i);
    int yOffset=0;
    final List<Member> memberList=position.getMembers();
    for (int j=0; j < memberList.size(); j++) {
      Member member=memberList.get(j);
      final AxisOrdinalInfo ordinalInfo=axisInfo.ordinalInfos.get(j);
      while (member != null) {
        if (member.getDepth() < ordinalInfo.minDepth)         break;
        final int y=yOffset + member.getDepth() - ordinalInfo.minDepth;
        members[y]=member;
        member=member.getParentMember();
      }
      yOffset+=ordinalInfo.getWidth();
    }
    boolean same=true;
    for (int y=0; y < members.length; y++) {
      final MemberCell memberInfo=new MemberCell();
      final Member member=members[y];
      final List<String> memberPath=new ArrayList<String>();
      for (int z=0; z <= position.getMembers().size() - 1; z++) {
        if (i < axis.getPositions().size() - 1)         if (axis.getPositions().get(i + 1).getMembers().get(z).getParentMember() != null && axis.getPositions().get(i + 1).getMembers().get(z).getParentMember().equals(member))         if (member == null || position.getMembers().get(z).getUniqueName().equals(member.getUniqueName()))         break;
        memberPath.add(position.getMembers().get(z).getUniqueName());
      }
      if (member != null)       memberPath.add(member.getUniqueName());
      memberInfo.setMemberPath(memberPath);
      same=same && i > 0 && Olap4jUtil.equal(prevMembers[y],member);
      if (member != null) {
        if (x - 1 == offset)         matrix.setOffset(offset);
        memberInfo.setRawValue(member.getCaption());
        memberInfo.setFormattedValue(member.getCaption());
        memberInfo.setParentDimension(member.getDimension().getName());
        memberInfo.setUniqueName(member.getUniqueName());
        if (y > 0 && prevMembers[y - 1] != null)         memberInfo.setRightOf(prevMemberInfo[y - 1]);
        if (y > 0 && prevMembers[y - 1] != null)         memberInfo.setRightOfDimension(prevMembers[y - 1].getDimension().getName());
        if (member.getParentMember() != null)         memberInfo.setParentMember(member.getParentMember().getUniqueName());
      }
 else {
        memberInfo.setRawValue(null);
        memberInfo.setFormattedValue(null);
        memberInfo.setParentDimension(null);
      }
      if (isColumns) {
        memberInfo.setRight(false);
        memberInfo.setSameAsPrev(same);
        if (member != null)         memberInfo.setParentDimension(member.getDimension().getName());
        matrix.set(x,y,memberInfo);
      }
 else {
        if (same) {
          memberInfo.setFormattedValue(null);
          memberInfo.setRawValue(null);
          memberInfo.setParentDimension(null);
        }
        memberInfo.setRight(false);
        memberInfo.setSameAsPrev(false);
        matrix.set(y,x,memberInfo);
      }
      prevMembers[y]=member;
      prevMemberInfo[y]=memberInfo;
      members[y]=null;
    }
  }
}
