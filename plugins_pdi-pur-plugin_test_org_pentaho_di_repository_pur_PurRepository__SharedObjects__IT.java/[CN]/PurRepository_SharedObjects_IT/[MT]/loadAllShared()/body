{
  ClusterSchema cluster=cluster();
  DatabaseMeta database=database();
  SlaveServer slaveServer=slaveServer();
  PartitionSchema partition=partition();
  purRepository.save(cluster,null,null);
  purRepository.save(database,null,null);
  purRepository.save(slaveServer,null,null);
  purRepository.save(partition,null,null);
  Map<RepositoryObjectType,List<? extends SharedObjectInterface>> map=map();
  purRepository.readSharedObjects(map,RepositoryObjectType.CLUSTER_SCHEMA,RepositoryObjectType.DATABASE,RepositoryObjectType.SLAVE_SERVER,RepositoryObjectType.PARTITION_SCHEMA);
  RepositoryElementInterface[] saved=new RepositoryElementInterface[]{cluster,database,slaveServer,partition};
  assertEquals(saved.length,map.size());
  for (  RepositoryElementInterface sharedObject : saved) {
    List<? extends SharedObjectInterface> list=map.get(sharedObject.getRepositoryElementType());
    assertEquals(1,list.size());
    assertEquals(sharedObject,list.get(0));
  }
}
