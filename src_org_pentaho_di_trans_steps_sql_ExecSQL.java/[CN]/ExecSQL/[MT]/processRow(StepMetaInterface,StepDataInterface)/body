{
  meta=(ExecSQLMeta)smi;
  data=(ExecSQLData)sdi;
  if (!meta.isExecutedEachInputRow()) {
    RowMetaAndData resultRow=getResultRow(data.result,meta.getUpdateField(),meta.getInsertField(),meta.getDeleteField(),meta.getReadField());
    putRow(resultRow.getRowMeta(),resultRow.getData());
    setOutputDone();
    return false;
  }
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.argumentIndexes=new int[meta.getArguments().length];
    for (int i=0; i < meta.getArguments().length; i++) {
      data.argumentIndexes[i]=this.getInputRowMeta().indexOfValue(meta.getArguments()[i]);
      if (data.argumentIndexes[i] < 0) {
        logError(BaseMessages.getString(PKG,"ExecSQL.Log.ErrorFindingField") + meta.getArguments()[i] + "]");
        throw new KettleStepException(BaseMessages.getString(PKG,"ExecSQL.Exception.CouldNotFindField",meta.getArguments()[i]));
      }
    }
    data.markerPositions=new ArrayList<Integer>();
    int len=data.sql.length();
    int pos=len - 1;
    while (pos >= 0) {
      if (data.sql.charAt(pos) == '?')       data.markerPositions.add(Integer.valueOf(pos));
      pos--;
    }
  }
  String sql;
  int numMarkers=data.markerPositions.size();
  if (numMarkers > 0) {
    StringBuffer buf=new StringBuffer(data.sql);
    for (int i=0; i < numMarkers; i++) {
      int index=data.argumentIndexes[data.markerPositions.size() - i - 1];
      ValueMetaInterface valueMeta=getInputRowMeta().getValueMeta(index);
      Object valueData=row[index];
      int pos=data.markerPositions.get(i);
      String replaceValue=valueMeta.getString(valueData);
      replaceValue=Const.NVL(replaceValue,"");
      buf.replace(pos,pos + 1,replaceValue);
    }
    sql=buf.toString();
  }
 else {
    sql=data.sql;
  }
  if (log.isRowLevel())   logRowlevel(BaseMessages.getString(PKG,"ExecSQL.Log.ExecutingSQLScript") + Const.CR + data.sql);
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    data.result=data.db.execStatements(sql);
    RowMetaAndData add=getResultRow(data.result,meta.getUpdateField(),meta.getInsertField(),meta.getDeleteField(),meta.getReadField());
    row=RowDataUtil.addRowData(row,getInputRowMeta().size(),add.getData());
    if (!data.db.isAutoCommit()) {
      data.db.commit();
    }
    putRow(data.outputRowMeta,row);
    if (checkFeedback(getLinesWritten())) {
      if (log.isBasic())       logBasic(BaseMessages.getString(PKG,"ExecSQL.Log.LineNumber") + getLinesWritten());
    }
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleStepException(BaseMessages.getString(PKG,"ExecSQL.Log.ErrorInStep"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),row,1,errorMessage,null,"ExecSQL001");
    }
  }
  return true;
}
