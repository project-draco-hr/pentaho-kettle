{
  try {
    protocol=rep.getJobEntryAttributeString(id_jobentry,"protocol");
    port=rep.getJobEntryAttributeString(id_jobentry,"port");
    serverName=rep.getJobEntryAttributeString(id_jobentry,"servername");
    userName=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    ftpDirectory=rep.getJobEntryAttributeString(id_jobentry,"ftpdirectory");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    timeout=(int)rep.getJobEntryAttributeInteger(id_jobentry,"timeout");
    activeConnection=rep.getJobEntryAttributeBoolean(id_jobentry,"active");
    copyprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"copyprevious");
    useproxy=rep.getJobEntryAttributeBoolean(id_jobentry,"useproxy");
    proxyHost=rep.getJobEntryAttributeString(id_jobentry,"proxy_host");
    proxyPort=rep.getJobEntryAttributeString(id_jobentry,"proxy_port");
    proxyUsername=rep.getJobEntryAttributeString(id_jobentry,"proxy_username");
    proxyPassword=rep.getJobEntryAttributeString(id_jobentry,"proxy_password");
    publicpublickey=rep.getJobEntryAttributeBoolean(id_jobentry,"publicpublickey");
    keyFilename=rep.getJobEntryAttributeString(id_jobentry,"keyfilename");
    keyFilePass=rep.getJobEntryAttributeString(id_jobentry,"keyfilepass");
    nr_limit_success=rep.getJobEntryAttributeString(id_jobentry,"nr_limit_success");
    success_condition=rep.getJobEntryAttributeString(id_jobentry,"success_condition");
    FTPSConnectionType=FTPSConnection.getConnectionTypeByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"ftps_connection_type"),""));
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'ftp' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
