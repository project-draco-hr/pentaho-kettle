{
  if (isJettyMode() && !request.getRequestURI().startsWith(CONTEXT_PATH))   return;
  if (log.isDebug())   logDebug("Addition of export requested");
  PrintWriter out=response.getWriter();
  BufferedReader in=request.getReader();
  if (log.isDetailed())   logDetailed("Encoding: " + request.getCharacterEncoding());
  boolean isJob=TYPE_JOB.equalsIgnoreCase(request.getParameter(PARAMETER_TYPE));
  String load=request.getParameter(PARAMETER_LOAD);
  response.setContentType("text/xml");
  out.print(XMLHandler.getXMLHeader());
  response.setStatus(HttpServletResponse.SC_OK);
  OutputStream outputStream=null;
  try {
    FileObject tempFile=KettleVFS.createTempFile("export",".zip",System.getProperty("java.io.tmpdir"));
    outputStream=KettleVFS.getOutputStream(tempFile,false);
    int c;
    while ((c=in.read()) != -1) {
      outputStream.write(c);
    }
    outputStream.flush();
    outputStream.close();
    outputStream=null;
    String archiveUrl=tempFile.getName().toString();
    String fileUrl=null;
    String carteObjectId=null;
    SimpleLoggingObject servletLoggingObject=new SimpleLoggingObject(CONTEXT_PATH,LoggingObjectType.CARTE,null);
    if (!Const.isEmpty(load)) {
      fileUrl="zip:" + archiveUrl + "!"+ load;
      if (isJob) {
        KettleVFS.getFileObject(fileUrl);
        JobMeta jobMeta=new JobMeta(fileUrl,null);
        String configUrl="zip:" + archiveUrl + "!"+ Job.CONFIGURATION_IN_EXPORT_FILENAME;
        Document configDoc=XMLHandler.loadXMLFile(configUrl);
        JobExecutionConfiguration jobExecutionConfiguration=new JobExecutionConfiguration(XMLHandler.getSubNode(configDoc,JobExecutionConfiguration.XML_TAG));
        carteObjectId=UUID.randomUUID().toString();
        servletLoggingObject.setContainerObjectId(carteObjectId);
        servletLoggingObject.setLogLevel(jobExecutionConfiguration.getLogLevel());
        Job job=new Job(null,jobMeta,servletLoggingObject);
        if (jobExecutionConfiguration.isExpandingRemoteJob()) {
          job.addDelegationListener(new CarteDelegationHandler(getTransformationMap(),getJobMap()));
        }
synchronized (getJobMap()) {
          getJobMap().addJob(job.getJobname(),carteObjectId,job,new JobConfiguration(jobMeta,jobExecutionConfiguration));
        }
        log.setLogLevel(jobExecutionConfiguration.getLogLevel());
        job.setArguments(jobExecutionConfiguration.getArgumentStrings());
        jobMeta.injectVariables(jobExecutionConfiguration.getVariables());
        Map<String,String> params=jobExecutionConfiguration.getParams();
        for (        String param : params.keySet()) {
          String value=params.get(param);
          jobMeta.setParameterValue(param,value);
        }
      }
 else {
        TransMeta transMeta=new TransMeta(fileUrl);
        String configUrl="zip:" + archiveUrl + "!"+ Trans.CONFIGURATION_IN_EXPORT_FILENAME;
        Document configDoc=XMLHandler.loadXMLFile(configUrl);
        TransExecutionConfiguration executionConfiguration=new TransExecutionConfiguration(XMLHandler.getSubNode(configDoc,TransExecutionConfiguration.XML_TAG));
        carteObjectId=UUID.randomUUID().toString();
        servletLoggingObject.setContainerObjectId(carteObjectId);
        servletLoggingObject.setLogLevel(executionConfiguration.getLogLevel());
        Trans trans=new Trans(transMeta,servletLoggingObject);
        getTransformationMap().addTransformation(trans.getName(),carteObjectId,trans,new TransConfiguration(transMeta,executionConfiguration));
      }
    }
 else {
      fileUrl=archiveUrl;
    }
    out.println(new WebResult(WebResult.STRING_OK,fileUrl,carteObjectId));
  }
 catch (  Exception ex) {
    out.println(new WebResult(WebResult.STRING_ERROR,Const.getStackTracker(ex)));
  }
 finally {
    if (outputStream != null)     outputStream.close();
  }
}
