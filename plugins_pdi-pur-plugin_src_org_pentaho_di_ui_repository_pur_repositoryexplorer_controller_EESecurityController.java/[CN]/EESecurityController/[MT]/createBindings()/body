{
  super.createBindings();
  systemRoleRadioButton=(XulRadio)document.getElementById("system-role-radio-button");
  roleRadioButton=(XulRadio)document.getElementById("role-radio-button");
  userRadioButton=(XulRadio)document.getElementById("user-radio-button");
  roleAddButton=(XulButton)document.getElementById("role-add");
  roleEditButton=(XulButton)document.getElementById("role-edit");
  roleRemoveButton=(XulButton)document.getElementById("role-remove");
  addUserToRoleButton=(XulButton)document.getElementById("add-user-to-role");
  removeUserFromRoleButton=(XulButton)document.getElementById("remove-user-from-role");
  addRoleToUserButton=(XulButton)document.getElementById("add-role-to-user");
  removeRoleFromUserButton=(XulButton)document.getElementById("remove-role-from-user");
  roleDialog=(XulDialog)document.getElementById("add-role-dialog");
  userRoleDeck=(XulDeck)document.getElementById("user-role-deck");
  roleListBox=(XulListbox)document.getElementById("roles-list");
  roleDetailTable=(XulTree)document.getElementById("role-detail-table");
  userListBox=(XulListbox)document.getElementById("users-list");
  userDetailTable=(XulTree)document.getElementById("user-detail-table");
  availableRoles=(XulListbox)document.getElementById("available-roles-list");
  assignedRoles=(XulListbox)document.getElementById("selected-roles-list");
  assignRoleToUserButton=(XulButton)document.getElementById("assign-role-to-user");
  unassignRoleFromUserButton=(XulButton)document.getElementById("unassign-role-from-user");
  systemRoleListBox=(XulListbox)document.getElementById("system-roles-list");
  innerRoleVbox=(XulVbox)document.getElementById("inner-role-vbox");
  roleVboxNonManaged=(XulVbox)document.getElementById("role-vbox-nonmanaged");
  roleHbox=(XulHbox)document.getElementById("role-hbox");
  instructionalTextLabel=(XulLabel)document.getElementById("instructional-text-label");
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(eeSecurityUser,"assignedRoles",assignedRoles,"elements");
  bf.createBinding(eeSecurityUser,"availableRoles",availableRoles,"elements");
  BindingConvertor<List<IUIRole>,Object[]> arrayToListRoleConverter=new BindingConvertor<List<IUIRole>,Object[]>(){
    @Override public Object[] sourceToTarget(    List<IUIRole> roles){
      if (roles != null) {
        Object[] retVal=new Object[roles.size()];
        int i=0;
        for (        IUIRole role : roles) {
          retVal[i++]=role;
        }
        return retVal;
      }
      return null;
    }
    @Override public List<IUIRole> targetToSource(    Object[] roles){
      if (roles != null) {
        List<IUIRole> retVal=new ArrayList<IUIRole>();
        for (int i=0; i < roles.length; i++) {
          retVal.add((IUIRole)roles[i]);
        }
        return retVal;
      }
      return null;
    }
  }
;
  BindingConvertor<List<IUIUser>,Object[]> arrayToListUserConverter=new BindingConvertor<List<IUIUser>,Object[]>(){
    @Override public Object[] sourceToTarget(    List<IUIUser> users){
      if (users != null) {
        Object[] retVal=new Object[users.size()];
        int i=0;
        for (        IUIUser user : users) {
          retVal[i++]=user;
        }
        return retVal;
      }
      return null;
    }
    @Override public List<IUIUser> targetToSource(    Object[] users){
      if (users != null) {
        List<IUIUser> retVal=new ArrayList<IUIUser>();
        for (int i=0; i < users.length; i++) {
          retVal.add((IUIUser)users[i]);
        }
        return retVal;
      }
      return null;
    }
  }
;
  bf.createBinding(eeSecurityUser,"availableSelectedRoles",availableRoles,"selectedItems",arrayToListRoleConverter);
  bf.createBinding(eeSecurityUser,"assignedSelectedRoles",assignedRoles,"selectedItems",arrayToListRoleConverter);
  BindingConvertor<Integer,Boolean> accumulatorButtonConverter=new BindingConvertor<Integer,Boolean>(){
    @Override public Boolean sourceToTarget(    Integer value){
      if (value != null && value >= 0) {
        return true;
      }
      return false;
    }
    @Override public Integer targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(assignedRoles,"selectedIndex",eeSecurityUser,"roleUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableRoles,"selectedIndex",eeSecurityUser,"roleAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(eeSecurityUser,"roleUnassignmentPossible",unassignRoleFromUserButton,"!disabled");
  bf.createBinding(eeSecurityUser,"roleAssignmentPossible",assignRoleToUserButton,"!disabled");
  rolename=(XulTextbox)document.getElementById("role-name");
  roleDescription=(XulTextbox)document.getElementById("role-description");
  availableUsers=(XulListbox)document.getElementById("available-users-list");
  assignedUsers=(XulListbox)document.getElementById("selected-users-list");
  assignUserToRoleButton=(XulButton)document.getElementById("assign-user-to-role");
  unassignUserFromRoleButton=(XulButton)document.getElementById("unassign-user-from-role");
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(securityRole,"name",rolename,"value");
  bf.createBinding(securityRole,"description",roleDescription,"value");
  bf.createBinding(securityRole,"assignedUsers",assignedUsers,"elements");
  bf.createBinding(securityRole,"availableUsers",availableUsers,"elements");
  bf.createBinding(securityRole,"availableSelectedUsers",availableUsers,"selectedItems",arrayToListUserConverter);
  bf.createBinding(securityRole,"assignedSelectedUsers",assignedUsers,"selectedItems",arrayToListUserConverter);
  bf.createBinding(eeSecurity,"selectedRoleIndex",roleListBox,"selectedIndex");
  bf.createBinding(eeSecurity,"selectedSystemRoleIndex",systemRoleListBox,"selectedIndex");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(assignedUsers,"selectedIndex",securityRole,"userUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableUsers,"selectedIndex",securityRole,"userAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(securityRole,"userUnassignmentPossible",unassignUserFromRoleButton,"!disabled");
  bf.createBinding(securityRole,"userAssignmentPossible",assignUserToRoleButton,"!disabled");
  try {
    bf.setBindingType(Binding.Type.ONE_WAY);
    bf.createBinding(roleListBox,"selectedIndex",this,"enableButtons");
    bf.setBindingType(Binding.Type.ONE_WAY);
    bf.createBinding(roleListBox,"selectedItem",eeSecurity,"selectedRole");
    bf.createBinding(eeSecurity,"roleList",roleListBox,"elements").fireSourceChanged();
    bf.createBinding(roleListBox,"selectedItem",eeSecurity,"selectedRole");
    bf.createBinding(systemRoleListBox,"selectedItem",eeSecurity,"selectedSystemRole");
    bf.createBinding(eeSecurity,"systemRoleList",systemRoleListBox,"elements").fireSourceChanged();
    bf.createBinding(systemRoleListBox,"selectedItem",eeSecurity,"selectedSystemRole");
    if (managed) {
      userDetailBinding=bf.createBinding(eeSecurity,"selectedUser",userDetailTable,"elements",new BindingConvertor<IUIUser,List<IUIRole>>(){
        @Override public List<IUIRole> sourceToTarget(        IUIUser ru){
          if (ru instanceof IUIEEUser) {
            return new ArrayList<IUIRole>(((IUIEEUser)ru).getRoles());
          }
 else {
            return null;
          }
        }
        @Override public IUIUser targetToSource(        List<IUIRole> arg0){
          return null;
        }
      }
);
      roleDetailBinding=bf.createBinding(eeSecurity,"selectedRole",roleDetailTable,"elements",new BindingConvertor<IUIRole,List<IUIUser>>(){
        @Override public List<IUIUser> sourceToTarget(        IUIRole rr){
          return new ArrayList<IUIUser>(rr.getUsers());
        }
        @Override public IUIRole targetToSource(        List<IUIUser> arg0){
          return null;
        }
      }
);
    }
    bf.createBinding(eeSecurity,"selectedDeck",userRoleDeck,"selectedIndex",new BindingConvertor<ObjectRecipient.Type,Integer>(){
      @Override public Integer sourceToTarget(      Type arg0){
        if (arg0 == Type.ROLE) {
          userRadioButton.setSelected(false);
          roleRadioButton.setSelected(true);
          systemRoleRadioButton.setSelected(false);
          return 1;
        }
 else         if (arg0 == Type.USER) {
          userRadioButton.setSelected(true);
          roleRadioButton.setSelected(false);
          systemRoleRadioButton.setSelected(false);
          return 0;
        }
 else         if (arg0 == Type.SYSTEM_ROLE) {
          userRadioButton.setSelected(false);
          roleRadioButton.setSelected(false);
          systemRoleRadioButton.setSelected(true);
          return 2;
        }
 else {
          return -1;
        }
      }
      @Override public Type targetToSource(      Integer arg0){
        return null;
      }
    }
);
    BindingConvertor<Mode,Boolean> modeBindingConverter=new BindingConvertor<Mode,Boolean>(){
      @Override public Boolean sourceToTarget(      Mode arg0){
        if (arg0.equals(Mode.ADD)) {
          return false;
        }
        return true;
      }
      @Override public Mode targetToSource(      Boolean arg0){
        return null;
      }
    }
;
    BindingConvertor<Mode,Boolean> anotherModeBindingConverter=new BindingConvertor<Mode,Boolean>(){
      @Override public Boolean sourceToTarget(      Mode arg0){
        if (arg0.equals(Mode.EDIT_MEMBER)) {
          return true;
        }
 else {
          return false;
        }
      }
      @Override public Mode targetToSource(      Boolean arg0){
        return null;
      }
    }
;
    bf.createBinding(securityRole,"mode",rolename,"disabled",modeBindingConverter);
    bf.createBinding(securityRole,"mode",roleDescription,"disabled",anotherModeBindingConverter);
    bf.createBinding(securityUser,"mode",userPassword,"disabled",anotherModeBindingConverter);
    bf.createBinding(securityUser,"mode",userDescription,"disabled",anotherModeBindingConverter);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
