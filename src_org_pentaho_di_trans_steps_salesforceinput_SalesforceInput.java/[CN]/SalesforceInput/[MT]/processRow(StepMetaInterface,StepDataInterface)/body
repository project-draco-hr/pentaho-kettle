{
  if (first) {
    first=false;
    String soQL=environmentSubstitute(meta.getQuery());
    String realUrl=environmentSubstitute(meta.getTargetURL());
    if (Const.isEmpty(realUrl))     throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.TargetURLMissing.Error"));
    String realUser=environmentSubstitute(meta.getUserName());
    if (Const.isEmpty(realUser))     throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.UsernameMissing.Error"));
    if (meta.isSpecifyQuery()) {
      if (Const.isEmpty(soQL)) {
        throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.QueryMissing.DialogMessage"));
      }
    }
 else {
      data.Module=environmentSubstitute(meta.getModule());
      if (Const.isEmpty(data.Module)) {
        throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.ModuleMissing.DialogMessage"));
      }
      if (meta.getRecordsFilter() != SalesforceConnectionUtils.RECORDS_FILTER_ALL) {
        String realFromDateString=environmentSubstitute(meta.getReadFrom());
        if (Const.isEmpty(realFromDateString))         throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.FromDateMissing.DialogMessage"));
        String realToDateString=environmentSubstitute(meta.getReadTo());
        if (Const.isEmpty(realToDateString))         throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.ToDateMissing.DialogMessage"));
        try {
          SimpleDateFormat startDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
          SimpleDateFormat endDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
          startDate.parse(realFromDateString);
          endDate.parse(realToDateString);
          data.startCal=(GregorianCalendar)startDate.getCalendar();
          data.endCal=(GregorianCalendar)endDate.getCalendar();
        }
 catch (        Exception e) {
          throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.ErrorParsingDate"),e);
        }
      }
    }
    if (Const.isEmpty(meta.getUserName())) {
      throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.UsernameMissing.DialogMessage"));
    }
    data.limit=Const.toLong(environmentSubstitute(meta.getRowLimit()),0);
    data.nrfields=meta.getInputFields().length;
    if (data.nrfields == 0) {
      throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.FieldsMissing.DialogMessage"));
    }
    data.outputRowMeta=new RowMeta();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.convertRowMeta=data.outputRowMeta.clone();
    for (int i=0; i < data.convertRowMeta.size(); i++) {
      data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);
    }
    data.connection=new SalesforceConnection(log,realUrl,realUser,environmentSubstitute(meta.getPassword()),Const.toInt(environmentSubstitute(meta.getTimeOut()),0));
    if (meta.isSpecifyQuery()) {
      data.connection.setSQL(soQL.replace("\n\r","").replace("\n",""));
    }
 else {
      String realCondition=environmentSubstitute(meta.getCondition());
      if (!Const.isEmpty(realCondition))       data.connection.setCondition(realCondition);
      data.connection.setModule(data.Module);
      if (meta.getRecordsFilter() != SalesforceConnectionUtils.RECORDS_FILTER_ALL)       data.connection.setCalendar(meta.getRecordsFilter(),data.startCal,data.endCal);
      data.connection.setSQL(BuiltSOQl());
    }
    data.connection.connect();
    data.connection.query(meta.isSpecifyQuery());
    data.limitReached=true;
    data.recordcount=data.connection.getQueryResultSize();
    if (data.recordcount > 0) {
      data.limitReached=false;
      data.nrRecords=data.connection.getRecordsCount();
    }
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.RecordCount") + " : " + data.recordcount);
  }
  Object[] outputRowData=null;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    outputRowData=getOneRow();
    if (outputRowData == null) {
      setOutputDone();
      return false;
    }
    putRow(data.outputRowMeta,outputRowData);
    if (checkFeedback(getLinesInput())) {
      if (log.isDetailed())       logDetailed(BaseMessages.getString(PKG,"SalesforceInput.log.LineRow","" + getLinesInput()));
    }
    data.rownr++;
    data.recordIndex++;
    return true;
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"SalesforceInput.log.Exception",e.getMessage()));
      logError(Const.getStackTracker(e));
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),outputRowData,1,errorMessage,null,"SalesforceInput001");
    }
  }
  return true;
}
