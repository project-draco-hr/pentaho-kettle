{
  if (data.limitReached || data.rownr >= data.recordcount) {
    return null;
  }
  Object[] outputRowData=buildEmptyRow();
  try {
    if (data.limit > 0 && data.rownr >= data.limit) {
      data.limitReached=true;
      return null;
    }
 else {
      if (data.rownr >= data.nrRecords || data.finishedRecord) {
        if (meta.getRecordsFilter() != SalesforceConnectionUtils.RECORDS_FILTER_UPDATED) {
          if (log.isDetailed())           logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.NeedQueryMore","" + data.rownr));
          if (data.connection.queryMore()) {
            int nr=data.connection.getRecordsCount();
            data.nrRecords+=nr;
            if (log.isDetailed())             logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.QueryMoreRetrieved","" + nr));
            data.recordIndex=0;
            data.finishedRecord=false;
          }
 else {
            return null;
          }
        }
      }
    }
    SalesforceRecordValue srvalue=data.connection.getRecord((int)data.recordIndex);
    data.finishedRecord=srvalue.isAllRecordsProcessed();
    if (meta.getRecordsFilter() == SalesforceConnectionUtils.RECORDS_FILTER_DELETED) {
      if (srvalue.isRecordIndexChanges()) {
        data.recordIndex=srvalue.getRecordIndex();
      }
      if (data.finishedRecord && srvalue.getRecordValue() == null) {
        return null;
      }
    }
    for (int i=0; i < data.nrfields; i++) {
      String value=data.connection.getRecordValue(srvalue.getRecordValue(),i);
switch (meta.getInputFields()[i].getTrimType()) {
case SalesforceInputField.TYPE_TRIM_LEFT:
        value=Const.ltrim(value);
      break;
case SalesforceInputField.TYPE_TRIM_RIGHT:
    value=Const.rtrim(value);
  break;
case SalesforceInputField.TYPE_TRIM_BOTH:
value=Const.trim(value);
break;
default :
break;
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(i);
outputRowData[i]=targetValueMeta.convertData(sourceValueMeta,value);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(value)) {
outputRowData[i]=data.previousRow[i];
}
}
}
int rowIndex=data.nrfields;
if (meta.includeTargetURL() && !Const.isEmpty(meta.getTargetURLField())) {
outputRowData[rowIndex++]=data.connection.getURL();
}
if (meta.includeModule() && !Const.isEmpty(meta.getModuleField())) {
outputRowData[rowIndex++]=data.connection.getModule();
}
if (meta.includeSQL() && !Const.isEmpty(meta.getSQLField())) {
outputRowData[rowIndex++]=data.connection.getSQL();
}
if (meta.includeTimestamp() && !Const.isEmpty(meta.getTimestampField())) {
outputRowData[rowIndex++]=data.connection.getServerTimestamp();
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[rowIndex++]=new Long(data.rownr);
}
if (meta.includeDeletionDate() && !Const.isEmpty(meta.getDeletionDateField())) {
outputRowData[rowIndex++]=srvalue.getDeletionDate();
}
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : (Object[])irow.cloneRow(outputRowData);
}
 catch (Exception e) {
throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.Exception.CanNotReadFromSalesforce"),e);
}
return outputRowData;
}
