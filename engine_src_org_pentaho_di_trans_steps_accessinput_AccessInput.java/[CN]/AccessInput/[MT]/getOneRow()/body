{
  try {
    if (meta.isFileField()) {
      while ((data.readrow == null || ((data.rw=data.t.getNextRow()) == null))) {
        if (!openNextFile())         return null;
      }
    }
 else {
      while ((data.file == null || ((data.rw=data.t.getNextRow()) == null))) {
        if (!openNextFile())         return null;
      }
    }
  }
 catch (  Exception IO) {
    return null;
  }
  Object[] r=buildEmptyRow();
  if (meta.isFileField())   System.arraycopy(data.readrow,0,r,0,data.readrow.length);
  try {
    for (int i=0; i < data.nrFields; i++) {
      AccessInputField field=meta.getInputFields()[i];
      Object obj=data.rw.get(field.getColumn());
      r[data.totalpreviousfields + i]=convert(obj,field,i);
      if (field.isRepeated()) {
        if (data.previousRow != null && obj == null) {
          r[data.totalpreviousfields + i]=data.previousRow[data.totalpreviousfields + i];
        }
      }
    }
    int rowIndex=data.totalpreviousfields + meta.getInputFields().length;
    if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
      r[rowIndex++]=AccessInputMeta.getFilename(data.file);
    }
    if (meta.includeTablename() && !Const.isEmpty(data.t.getName())) {
      r[rowIndex++]=data.t.getName();
    }
    if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
      r[rowIndex++]=new Long(data.rownr);
    }
    if (meta.getShortFileNameField() != null && meta.getShortFileNameField().length() > 0) {
      r[rowIndex++]=data.shortFilename;
    }
    if (meta.getExtensionField() != null && meta.getExtensionField().length() > 0) {
      r[rowIndex++]=data.extension;
    }
    if (meta.getPathField() != null && meta.getPathField().length() > 0) {
      r[rowIndex++]=data.path;
    }
    if (meta.getSizeField() != null && meta.getSizeField().length() > 0) {
      r[rowIndex++]=new Long(data.size);
    }
    if (meta.isHiddenField() != null && meta.isHiddenField().length() > 0) {
      r[rowIndex++]=new Boolean(data.hidden);
    }
    if (meta.getLastModificationDateField() != null && meta.getLastModificationDateField().length() > 0) {
      r[rowIndex++]=data.lastModificationDateTime;
    }
    if (meta.getUriField() != null && meta.getUriField().length() > 0) {
      r[rowIndex++]=data.uriName;
    }
    if (meta.getRootUriField() != null && meta.getRootUriField().length() > 0) {
      r[rowIndex++]=data.rootUriName;
    }
    RowMetaInterface irow=getInputRowMeta();
    data.previousRow=irow == null ? r : irow.cloneRow(r);
    incrementLinesInput();
    data.rownr++;
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"AccessInput.Error.ErrorReadingFile"),e);
  }
  return r;
}
