{
  ti.setText(dir.getName());
  ti.setForeground(dircolor);
  int nrAdded=0;
  for (int i=0; i < dir.getNrSubdirectories(); i++) {
    RepositoryDirectory subdir=dir.getSubdirectory(i);
    TreeItem subti=new TreeItem(ti,SWT.NONE);
    subti.setImage(GUIResource.getInstance().getImageArrow());
    getTreeWithNames(subti,rep,objectMap,dircolor,sortPosition,includeDeleted,ascending,getTransformations,getJobs,subdir,filterString,pattern);
  }
  try {
    List<RepositoryElementMetaInterface> repositoryObjects=new ArrayList<RepositoryElementMetaInterface>();
    if (getTransformations) {
      List<RepositoryElementMetaInterface> repositoryTransformations=rep.getTransformationObjects(dir.getObjectId(),includeDeleted);
      if (repositoryTransformations != null) {
        repositoryObjects.addAll(repositoryTransformations);
      }
    }
    if (getJobs) {
      List<RepositoryElementMetaInterface> repositoryJobs=rep.getJobObjects(dir.getObjectId(),includeDeleted);
      if (repositoryJobs != null) {
        repositoryObjects.addAll(repositoryJobs);
      }
    }
    RepositoryObject.sortRepositoryObjects(repositoryObjects,sortPosition,ascending);
    for (int i=0; i < repositoryObjects.size(); i++) {
      boolean add=false;
      RepositoryElementMetaInterface repositoryObject=repositoryObjects.get(i);
      if (filterString == null && pattern == null)       add=true;
 else {
        add=addItem(repositoryObject.getName(),filterString,pattern);
        if (!add) {
          add=addItem(repositoryObject.getDescription(),filterString,pattern);
        }
        if (!add) {
          add=addItem(repositoryObject.getModifiedUser(),filterString,pattern);
        }
        if (!add) {
          if (repositoryObject.getModifiedDate() != null) {
            SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            add=addItem(simpleDateFormat.format(repositoryObject.getModifiedDate()),filterString,pattern);
          }
        }
        if (!add) {
          if (repositoryObject.getObjectType() != null) {
            add=addItem(repositoryObject.getObjectType().getTypeDescription(),filterString,pattern);
          }
        }
      }
      if (add) {
        nrAdded++;
        TreeItem tiObject=new TreeItem(ti,SWT.NONE);
        if (repositoryObject.getObjectType() == RepositoryObjectType.TRANSFORMATION) {
          tiObject.setImage(GUIResource.getInstance().getImageTransGraph());
        }
 else         if (repositoryObject.getObjectType() == RepositoryObjectType.JOB) {
          tiObject.setImage(GUIResource.getInstance().getImageJobGraph());
        }
        SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        tiObject.setText(0,Const.NVL(repositoryObject.getName(),""));
        tiObject.setText(1,Const.NVL(repositoryObject.getObjectType().getTypeDescription(),""));
        tiObject.setText(2,Const.NVL(repositoryObject.getModifiedUser(),""));
        tiObject.setText(3,repositoryObject.getModifiedDate() != null ? simpleDateFormat.format(repositoryObject.getModifiedDate()) : "");
        tiObject.setText(4,Const.NVL(repositoryObject.getDescription(),""));
        if (repositoryObject.isDeleted()) {
          tiObject.setForeground(GUIResource.getInstance().getColorRed());
        }
        String fullPath=ConstUI.getTreePath(tiObject,0);
        objectMap.put(fullPath,repositoryObject);
      }
    }
  }
 catch (  KettleException dbe) {
    throw new KettleDatabaseException("Unable to populate tree with repository objects",dbe);
  }
  ti.setExpanded(dir.isRoot());
}
