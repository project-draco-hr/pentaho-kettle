{
  ti.setText(dir.getDirectoryName());
  ti.setForeground(dircolor);
  for (int i=0; i < dir.getNrSubdirectories(); i++) {
    RepositoryDirectory subdir=dir.getSubdirectory(i);
    TreeItem subti=new TreeItem(ti,SWT.NONE);
    subti.setImage(GUIResource.getInstance().getImageArrow());
    getTreeWithNames(subti,rep,dircolor,sortPosition,ascending,getTransformations,getJobs,subdir);
  }
  try {
    List<RepositoryObject> repositoryObjects=new ArrayList<RepositoryObject>();
    if (getTransformations) {
      List<RepositoryObject> repositoryTransformations=rep.getTransformationObjects(dir.getID());
      if (repositoryTransformations != null) {
        repositoryObjects.addAll(repositoryTransformations);
      }
    }
    if (getJobs) {
      List<RepositoryObject> repositoryJobs=rep.getJobObjects(dir.getID());
      if (repositoryJobs != null) {
        repositoryObjects.addAll(repositoryJobs);
      }
    }
    RepositoryObject.sortRepositoryObjects(repositoryObjects,sortPosition,ascending);
    for (int i=0; i < repositoryObjects.size(); i++) {
      TreeItem tiObject=new TreeItem(ti,SWT.NONE);
      RepositoryObject repositoryObject=(RepositoryObject)repositoryObjects.get(i);
      if (repositoryObject.getObjectType() == RepositoryObject.STRING_OBJECT_TYPE_TRANSFORMATION)       tiObject.setImage(GUIResource.getInstance().getImageTransGraph());
 else       if (repositoryObject.getObjectType() == RepositoryObject.STRING_OBJECT_TYPE_JOB)       tiObject.setImage(GUIResource.getInstance().getImageJobGraph());
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
      tiObject.setText(0,Const.NVL(repositoryObject.getName(),""));
      tiObject.setText(1,Const.NVL(repositoryObject.getObjectType(),""));
      tiObject.setText(2,Const.NVL(repositoryObject.getModifiedUser(),""));
      tiObject.setText(3,repositoryObject.getModifiedDate() != null ? simpleDateFormat.format(repositoryObject.getModifiedDate()) : "");
      tiObject.setText(4,Const.NVL(repositoryObject.getDescription(),""));
    }
  }
 catch (  KettleException dbe) {
    throw new KettleDatabaseException("Unable to populate tree with repository objects",dbe);
  }
  ti.setExpanded(dir.isRoot());
}
