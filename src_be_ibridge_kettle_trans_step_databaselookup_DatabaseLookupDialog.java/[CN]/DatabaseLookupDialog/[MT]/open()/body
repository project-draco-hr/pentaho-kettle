{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  backupChanged=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("DatabaseLookupDialog.shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(Messages.getString("DatabaseLookupDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wConnection=addConnectionLine(shell,wStepname,middle,margin);
  if (input.getDatabaseMeta() == null && transMeta.nrDatabases() == 1)   wConnection.select(0);
  wConnection.addModifyListener(lsMod);
  wlSchema=new Label(shell,SWT.RIGHT);
  wlSchema.setText(Messages.getString("DatabaseLookupDialog.TargetSchema.Label"));
  props.setLook(wlSchema);
  fdlSchema=new FormData();
  fdlSchema.left=new FormAttachment(0,0);
  fdlSchema.right=new FormAttachment(middle,-margin);
  fdlSchema.top=new FormAttachment(wConnection,margin * 2);
  wlSchema.setLayoutData(fdlSchema);
  wSchema=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSchema);
  wSchema.addModifyListener(lsMod);
  fdSchema=new FormData();
  fdSchema.left=new FormAttachment(middle,0);
  fdSchema.top=new FormAttachment(wConnection,margin * 2);
  fdSchema.right=new FormAttachment(100,0);
  wSchema.setLayoutData(fdSchema);
  wlTable=new Label(shell,SWT.RIGHT);
  wlTable.setText(Messages.getString("DatabaseLookupDialog.Lookuptable.Label"));
  props.setLook(wlTable);
  fdlTable=new FormData();
  fdlTable.left=new FormAttachment(0,0);
  fdlTable.right=new FormAttachment(middle,-margin);
  fdlTable.top=new FormAttachment(wSchema,margin * 2);
  wlTable.setLayoutData(fdlTable);
  wbTable=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTable);
  wbTable.setText(Messages.getString("DatabaseLookupDialog.Browse.Button"));
  fdbTable=new FormData();
  fdbTable.right=new FormAttachment(100,0);
  fdbTable.top=new FormAttachment(wSchema,margin);
  wbTable.setLayoutData(fdbTable);
  wTable=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTable);
  wTable.addModifyListener(lsMod);
  fdTable=new FormData();
  fdTable.left=new FormAttachment(middle,0);
  fdTable.top=new FormAttachment(wSchema,margin * 2);
  fdTable.right=new FormAttachment(wbTable,-margin);
  wTable.setLayoutData(fdTable);
  wlCache=new Label(shell,SWT.RIGHT);
  wlCache.setText(Messages.getString("DatabaseLookupDialog.Cache.Label"));
  props.setLook(wlCache);
  fdlCache=new FormData();
  fdlCache.left=new FormAttachment(0,0);
  fdlCache.right=new FormAttachment(middle,-margin);
  fdlCache.top=new FormAttachment(wbTable,margin);
  wlCache.setLayoutData(fdlCache);
  wCache=new Button(shell,SWT.CHECK);
  props.setLook(wCache);
  fdCache=new FormData();
  fdCache.left=new FormAttachment(middle,0);
  fdCache.top=new FormAttachment(wbTable,margin);
  wCache.setLayoutData(fdCache);
  wCache.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
      wCachesize.setEnabled(wCache.getSelection());
      wlCachesize.setEnabled(wCache.getSelection());
    }
  }
);
  wlCachesize=new Label(shell,SWT.RIGHT);
  wlCachesize.setText(Messages.getString("DatabaseLookupDialog.Cachesize.Label"));
  props.setLook(wlCachesize);
  wlCachesize.setEnabled(input.isCached());
  fdlCachesize=new FormData();
  fdlCachesize.left=new FormAttachment(0,0);
  fdlCachesize.right=new FormAttachment(middle,-margin);
  fdlCachesize.top=new FormAttachment(wlCache,margin);
  wlCachesize.setLayoutData(fdlCachesize);
  wCachesize=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wCachesize);
  wCachesize.setEnabled(input.isCached());
  wCachesize.addModifyListener(lsMod);
  fdCachesize=new FormData();
  fdCachesize.left=new FormAttachment(middle,0);
  fdCachesize.right=new FormAttachment(100,0);
  fdCachesize.top=new FormAttachment(wlCache,margin);
  wCachesize.setLayoutData(fdCachesize);
  wlKey=new Label(shell,SWT.NONE);
  wlKey.setText(Messages.getString("DatabaseLookupDialog.Keys.Label"));
  props.setLook(wlKey);
  fdlKey=new FormData();
  fdlKey.left=new FormAttachment(0,0);
  fdlKey.top=new FormAttachment(wCachesize,margin);
  wlKey.setLayoutData(fdlKey);
  int nrKeyCols=4;
  int nrKeyRows=(input.getStreamKeyField1() != null ? input.getStreamKeyField1().length : 1);
  ColumnInfo[] ciKey=new ColumnInfo[nrKeyCols];
  ciKey[0]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Tablefield"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  ciKey[1]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Comparator"),ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{"=","<>","<","<=",">",">=","LIKE","BETWEEN","IS NULL","IS NOT NULL"});
  ciKey[2]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Field1"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  ciKey[3]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Field2"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  wKey=new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.V_SCROLL| SWT.H_SCROLL,ciKey,nrKeyRows,lsMod,props);
  fdKey=new FormData();
  fdKey.left=new FormAttachment(0,0);
  fdKey.top=new FormAttachment(wlKey,margin);
  fdKey.right=new FormAttachment(100,0);
  fdKey.bottom=new FormAttachment(wlKey,150);
  wKey.setLayoutData(fdKey);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wGet=new Button(shell,SWT.PUSH);
  wGet.setText(Messages.getString("DatabaseLookupDialog.GetFields.Button"));
  wGetLU=new Button(shell,SWT.PUSH);
  wGetLU.setText(Messages.getString("DatabaseLookupDialog.GetLookupFields.Button"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wGet,wGetLU,wCancel},margin,null);
  wlOrderBy=new Label(shell,SWT.RIGHT);
  wlOrderBy.setText(Messages.getString("DatabaseLookupDialog.Orderby.Label"));
  props.setLook(wlOrderBy);
  fdlOrderBy=new FormData();
  fdlOrderBy.left=new FormAttachment(0,0);
  fdlOrderBy.right=new FormAttachment(middle,-margin);
  fdlOrderBy.bottom=new FormAttachment(wOK,-2 * margin);
  wlOrderBy.setLayoutData(fdlOrderBy);
  wOrderBy=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wOrderBy);
  fdOrderBy=new FormData();
  fdOrderBy.left=new FormAttachment(middle,0);
  fdOrderBy.bottom=new FormAttachment(wOK,-2 * margin);
  fdOrderBy.right=new FormAttachment(100,0);
  wOrderBy.setLayoutData(fdOrderBy);
  wlFailMultiple=new Label(shell,SWT.RIGHT);
  wlFailMultiple.setText(Messages.getString("DatabaseLookupDialog.FailMultiple.Label"));
  props.setLook(wlFailMultiple);
  fdlFailMultiple=new FormData();
  fdlFailMultiple.left=new FormAttachment(0,0);
  fdlFailMultiple.right=new FormAttachment(middle,-margin);
  fdlFailMultiple.bottom=new FormAttachment(wOrderBy,-margin);
  wlFailMultiple.setLayoutData(fdlFailMultiple);
  wFailMultiple=new Button(shell,SWT.CHECK);
  props.setLook(wFailMultiple);
  fdFailMultiple=new FormData();
  fdFailMultiple.left=new FormAttachment(middle,0);
  fdFailMultiple.bottom=new FormAttachment(wOrderBy,-margin);
  wFailMultiple.setLayoutData(fdFailMultiple);
  wFailMultiple.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFlags();
    }
  }
);
  wlEatRows=new Label(shell,SWT.RIGHT);
  wlEatRows.setText(Messages.getString("DatabaseLookupDialog.EatRows.Label"));
  props.setLook(wlEatRows);
  fdlEatRows=new FormData();
  fdlEatRows.left=new FormAttachment(0,0);
  fdlEatRows.right=new FormAttachment(middle,-margin);
  fdlEatRows.bottom=new FormAttachment(wFailMultiple,-margin);
  wlEatRows.setLayoutData(fdlEatRows);
  wEatRows=new Button(shell,SWT.CHECK);
  props.setLook(wEatRows);
  fdEatRows=new FormData();
  fdEatRows.left=new FormAttachment(middle,0);
  fdEatRows.bottom=new FormAttachment(wFailMultiple,-margin);
  wEatRows.setLayoutData(fdEatRows);
  wEatRows.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFlags();
    }
  }
);
  wlReturn=new Label(shell,SWT.NONE);
  wlReturn.setText(Messages.getString("DatabaseLookupDialog.Return.Label"));
  props.setLook(wlReturn);
  fdlReturn=new FormData();
  fdlReturn.left=new FormAttachment(0,0);
  fdlReturn.top=new FormAttachment(wKey,margin);
  wlReturn.setLayoutData(fdlReturn);
  int UpInsCols=4;
  int UpInsRows=(input.getReturnValueField() != null ? input.getReturnValueField().length : 1);
  ColumnInfo[] ciReturn=new ColumnInfo[UpInsCols];
  ciReturn[0]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Field"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  ciReturn[1]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Newname"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  ciReturn[2]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Default"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  ciReturn[3]=new ColumnInfo(Messages.getString("DatabaseLookupDialog.ColumnInfo.Type"),ColumnInfo.COLUMN_TYPE_CCOMBO,Value.getTypes());
  wReturn=new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.V_SCROLL| SWT.H_SCROLL,ciReturn,UpInsRows,lsMod,props);
  fdReturn=new FormData();
  fdReturn.left=new FormAttachment(0,0);
  fdReturn.top=new FormAttachment(wlReturn,margin);
  fdReturn.right=new FormAttachment(100,0);
  fdReturn.bottom=new FormAttachment(wEatRows,-margin);
  wReturn.setLayoutData(fdReturn);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
;
  lsGetLU=new Listener(){
    public void handleEvent(    Event e){
      getlookup();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wGet.addListener(SWT.Selection,lsGet);
  wGetLU.addListener(SWT.Selection,lsGetLU);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wTable.addSelectionListener(lsDef);
  wOrderBy.addSelectionListener(lsDef);
  wCachesize.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wbTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getTableName();
    }
  }
);
  setSize();
  getData();
  input.setChanged(backupChanged);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
