{
  Map<String,Type> genericsInfo=new TreeMap<>(ownerGenericsInfo);
  while (type != null) {
    Class<?> clazz;
    ParameterizedType pt;
    if (type instanceof ParameterizedType) {
      pt=(ParameterizedType)type;
      clazz=(Class<?>)pt.getRawType();
    }
 else {
      pt=null;
      clazz=(Class<?>)type;
    }
    TypeVariable<?>[] tps=clazz.getTypeParameters();
    if (tps.length > 0) {
      if (pt == null) {
        throw new RuntimeException("Can't introspect class with parameters on the high level");
      }
      Type[] args=pt.getActualTypeArguments();
      if (tps.length != args.length) {
        throw new RuntimeException("Wrong generics declaration");
      }
      Map<String,Type> prevGenerics=genericsInfo;
      genericsInfo=new TreeMap<>();
      for (int i=0; i < tps.length; i++) {
        if (args[i] instanceof TypeVariable) {
          TypeVariable<?> argsi=(TypeVariable<?>)args[i];
          Type prev=prevGenerics.get(argsi.getName());
          if (prev == null) {
            throw new RuntimeException("Generic '" + args[i] + "' was not declared yet");
          }
          genericsInfo.put(tps[i].getName(),prev);
        }
 else {
          genericsInfo.put(tps[i].getName(),args[i]);
        }
      }
      System.out.println();
    }
    introspect(info,clazz.getDeclaredFields(),clazz.getDeclaredMethods(),genericsInfo);
    for (    Type intf : clazz.getGenericInterfaces()) {
      introspect(info,intf,genericsInfo);
    }
    type=clazz.getGenericSuperclass();
  }
}
