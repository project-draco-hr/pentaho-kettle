{
  for (  Field f : fields) {
    Injection annotationInjection=f.getAnnotation(Injection.class);
    InjectionDeep annotationInjectionDeep=f.getAnnotation(InjectionDeep.class);
    if (annotationInjection == null && annotationInjectionDeep == null) {
      continue;
    }
    if (annotationInjection != null && annotationInjectionDeep != null) {
      throw new RuntimeException("Field can't be annotated twice for injection " + f);
    }
    if (f.isSynthetic() || f.isEnumConstant() || Modifier.isStatic(f.getModifiers())) {
      throw new RuntimeException("Wrong modifier for anotated field " + f);
    }
    BeanLevelInfo leaf=new BeanLevelInfo();
    leaf.parent=this;
    leaf.field=f;
    if (f.getType().isArray()) {
      leaf.dim=DIMENSION.ARRAY;
      leaf.leafClass=f.getType().getComponentType();
    }
 else     if (List.class.isAssignableFrom(f.getType())) {
      leaf.dim=DIMENSION.LIST;
      Type fieldType=f.getGenericType();
      Type listType=((ParameterizedType)fieldType).getActualTypeArguments()[0];
      try {
        leaf.leafClass=Class.forName(listType.getTypeName(),false,leafClass.getClassLoader());
      }
 catch (      Throwable ex) {
        throw new RuntimeException("Can't retrieve type from List for " + f);
      }
    }
 else {
      leaf.dim=DIMENSION.NONE;
      leaf.leafClass=f.getType();
    }
    if (annotationInjection != null) {
      try {
        leaf.converter=annotationInjection.converter().newInstance();
      }
 catch (      Exception ex) {
        throw new RuntimeException("Error instantiate converter for " + f,ex);
      }
      leaf.convertEmpty=annotationInjection.convertEmpty();
      info.addInjectionProperty(annotationInjection,leaf);
    }
 else     if (annotationInjectionDeep != null) {
      leaf.init(info);
    }
  }
  for (  Method m : methods) {
    Injection annotationInjection=m.getAnnotation(Injection.class);
    InjectionDeep annotationInjectionDeep=m.getAnnotation(InjectionDeep.class);
    if (annotationInjection == null && annotationInjectionDeep == null) {
      continue;
    }
    if (annotationInjection != null && annotationInjectionDeep != null) {
      throw new RuntimeException("Method can't be annotated twice for injection " + m);
    }
    if (m.isSynthetic() || Modifier.isStatic(m.getModifiers())) {
      throw new RuntimeException("Wrong modifier for anotated method " + m);
    }
    BeanLevelInfo leaf=new BeanLevelInfo();
    leaf.parent=this;
    if (annotationInjectionDeep != null) {
      Class<?> getterClass=isGetter(m);
      if (getterClass == null || getterClass.isArray()) {
        throw new RuntimeException("Method should be getter: " + m);
      }
      leaf.getter=m;
      leaf.leafClass=getterClass;
      leaf.init(info);
    }
 else {
      Class<?> setterClass=isSetter(m);
      if (setterClass == null || setterClass.isArray()) {
        throw new RuntimeException("Method should be setter: " + m);
      }
      leaf.setter=m;
      leaf.leafClass=setterClass;
      try {
        leaf.converter=annotationInjection.converter().newInstance();
      }
 catch (      Exception ex) {
        throw new RuntimeException("Error instantiate converter for " + m,ex);
      }
      leaf.convertEmpty=annotationInjection.convertEmpty();
      info.addInjectionProperty(annotationInjection,leaf);
    }
  }
}
