{
  try {
    databaseMeta=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    host=rep.getStepAttributeString(id_step,"host");
    port=rep.getStepAttributeString(id_step,"port");
    operation=rep.getStepAttributeString(id_step,"operation");
    custom_sql=rep.getStepAttributeString(id_step,"custom_sql");
    int nrKeyMapping=rep.countNrStepAttributes(id_step,"key_field_name");
    int nrFieldMapping=rep.countNrStepAttributes(id_step,"field_field_name");
    int nrTabIsEnable=rep.countNrStepAttributes(id_step,"tab_is_enable_mapping");
    allocate(nrKeyMapping,nrFieldMapping,nrTabIsEnable);
    for (int i=0; i < nrKeyMapping; i++) {
      fieldTableForKeys[i]=rep.getStepAttributeString(id_step,i,"key_field_name");
      fieldStreamForKeys[i]=rep.getStepAttributeString(id_step,i,"key_stream_name");
      if (fieldStreamForKeys[i] == null)       fieldStreamForKeys[i]=fieldTableForKeys[i];
    }
    for (int i=0; i < nrFieldMapping; i++) {
      fieldTableForFields[i]=rep.getStepAttributeString(id_step,i,"field_field_name");
      fieldStreamForFields[i]=rep.getStepAttributeString(id_step,i,"field_stream_name");
      if (fieldStreamForFields[i] == null)       fieldStreamForFields[i]=fieldTableForFields[i];
      insOrUptFlag[i]=rep.getStepAttributeBoolean(id_step,i,"insert_or_update_flag");
    }
    for (int i=0; i < nrTabIsEnable; i++) {
      tabIsEnable[i]=rep.getStepAttributeBoolean(id_step,i,"tab_is_enable");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LucidDBStreamingLoaderMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
