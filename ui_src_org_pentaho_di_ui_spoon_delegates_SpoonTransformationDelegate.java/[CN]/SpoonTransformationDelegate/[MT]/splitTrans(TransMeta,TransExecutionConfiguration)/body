{
  try {
    final TransSplitter transSplitter=new TransSplitter(transMeta);
    transSplitter.splitOriginalTransformation();
    TransMeta master=transSplitter.getMaster();
    SlaveServer masterServer=null;
    List<StepMeta> masterSteps=master.getTransHopSteps(false);
    SlaveServer[] slaves=transSplitter.getSlaveTargets();
    if (executionConfiguration.isClusterShowingTransformation()) {
      if (masterSteps.size() > 0) {
        masterServer=transSplitter.getMasterServer();
        addTransGraph(master);
      }
      for (int i=0; i < slaves.length; i++) {
        TransMeta slaveTrans=transSplitter.getSlaveTransMap().get(slaves[i]);
        addTransGraph(slaveTrans);
      }
    }
    for (    String var : Const.INTERNAL_TRANS_VARIABLES) {
      executionConfiguration.getVariables().put(var,transMeta.getVariable(var));
    }
    for (    String var : Const.INTERNAL_JOB_VARIABLES) {
      executionConfiguration.getVariables().put(var,transMeta.getVariable(var));
    }
    TransMeta ot=transSplitter.getOriginalTransformation();
    for (    String param : ot.listParameters()) {
      String value=Const.NVL(ot.getParameterValue(param),Const.NVL(ot.getParameterDefault(param),ot.getVariable(param)));
      if (!Utils.isEmpty(value)) {
        executionConfiguration.getVariables().put(param,value);
      }
    }
    try {
      Trans.executeClustered(transSplitter,executionConfiguration);
    }
 catch (    Exception e) {
      try {
        Trans.cleanupCluster(log,transSplitter);
      }
 catch (      Exception ee) {
        throw new Exception("Error executing transformation and error to clenaup cluster",e);
      }
      throw e;
    }
    if (executionConfiguration.isClusterPosting()) {
      if (masterServer != null) {
        spoon.addSpoonSlave(masterServer);
        for (int i=0; i < slaves.length; i++) {
          spoon.addSpoonSlave(slaves[i]);
        }
      }
    }
    new Thread(new Runnable(){
      public void run(){
        Trans.monitorClusteredTransformation(log,transSplitter,null);
        Result result=Trans.getClusteredTransformationResult(log,transSplitter,null);
        log.logBasic("-----------------------------------------------------");
        log.logBasic("Got result back from clustered transformation:");
        log.logBasic(transMeta.toString() + "-----------------------------------------------------");
        log.logBasic(transMeta.toString() + " Errors : " + result.getNrErrors());
        log.logBasic(transMeta.toString() + " Input : " + result.getNrLinesInput());
        log.logBasic(transMeta.toString() + " Output : " + result.getNrLinesOutput());
        log.logBasic(transMeta.toString() + " Updated : " + result.getNrLinesUpdated());
        log.logBasic(transMeta.toString() + " Read : " + result.getNrLinesRead());
        log.logBasic(transMeta.toString() + " Written : " + result.getNrLinesWritten());
        log.logBasic(transMeta.toString() + " Rejected : " + result.getNrLinesRejected());
        log.logBasic(transMeta.toString() + "-----------------------------------------------------");
      }
    }
).start();
  }
 catch (  Exception e) {
    throw new KettleException(e);
  }
}
