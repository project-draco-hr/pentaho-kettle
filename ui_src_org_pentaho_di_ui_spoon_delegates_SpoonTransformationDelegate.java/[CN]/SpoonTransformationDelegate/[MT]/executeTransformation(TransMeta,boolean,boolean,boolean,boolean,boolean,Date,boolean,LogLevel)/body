{
  if (transMeta == null) {
    return;
  }
  TransDebugMeta transDebugMeta=null;
  TransExecutionConfiguration executionConfiguration=null;
  if (preview) {
    executionConfiguration=spoon.getTransPreviewExecutionConfiguration();
  }
 else   if (debug) {
    executionConfiguration=spoon.getTransDebugExecutionConfiguration();
  }
 else {
    executionConfiguration=spoon.getTransExecutionConfiguration();
  }
  transMeta.setRepository(spoon.rep);
  transMeta.setMetaStore(spoon.metaStore);
  executionConfiguration.setRepository(spoon.rep);
  executionConfiguration.setSafeModeEnabled(safe);
  if (debug) {
    transDebugMeta=transDebugMetaMap.get(transMeta);
    if (transDebugMeta == null) {
      transDebugMeta=new TransDebugMeta(transMeta);
      transDebugMetaMap.put(transMeta,transDebugMeta);
    }
    List<StepMeta> selectedSteps=transMeta.getSelectedSteps();
    if (selectedSteps != null && selectedSteps.size() > 0) {
      transDebugMeta.getStepDebugMetaMap().clear();
      for (      StepMeta stepMeta : transMeta.getSelectedSteps()) {
        StepDebugMeta stepDebugMeta=new StepDebugMeta(stepMeta);
        stepDebugMeta.setRowCount(PropsUI.getInstance().getDefaultPreviewSize());
        stepDebugMeta.setPausingOnBreakPoint(true);
        stepDebugMeta.setReadingFirstRows(false);
        transDebugMeta.getStepDebugMetaMap().put(stepMeta,stepDebugMeta);
      }
    }
  }
 else   if (preview) {
    transDebugMeta=transPreviewMetaMap.get(transMeta);
    if (transDebugMeta == null) {
      transDebugMeta=new TransDebugMeta(transMeta);
      transPreviewMetaMap.put(transMeta,transDebugMeta);
    }
    List<StepMeta> selectedSteps=transMeta.getSelectedSteps();
    if (selectedSteps != null && selectedSteps.size() > 0) {
      transDebugMeta.getStepDebugMetaMap().clear();
      for (      StepMeta stepMeta : transMeta.getSelectedSteps()) {
        StepDebugMeta stepDebugMeta=new StepDebugMeta(stepMeta);
        stepDebugMeta.setRowCount(PropsUI.getInstance().getDefaultPreviewSize());
        stepDebugMeta.setPausingOnBreakPoint(false);
        stepDebugMeta.setReadingFirstRows(true);
        transDebugMeta.getStepDebugMetaMap().put(stepMeta,stepDebugMeta);
      }
    }
  }
  int debugAnswer=TransDebugDialog.DEBUG_CONFIG;
  if (debug || preview) {
    transDebugMeta.getTransMeta().setRepository(spoon.rep);
    TransDebugDialog transDebugDialog=new TransDebugDialog(spoon.getShell(),transDebugMeta);
    debugAnswer=transDebugDialog.open();
    if (debugAnswer != TransDebugDialog.DEBUG_CANCEL) {
      executionConfiguration.setExecutingLocally(true);
      executionConfiguration.setExecutingRemotely(false);
      executionConfiguration.setExecutingClustered(false);
    }
 else {
      return;
    }
  }
 else {
    if (transMeta.findFirstUsedClusterSchema() != null) {
      executionConfiguration.setExecutingLocally(false);
      executionConfiguration.setExecutingRemotely(false);
      executionConfiguration.setExecutingClustered(true);
    }
 else {
      executionConfiguration.setExecutingLocally(true);
      executionConfiguration.setExecutingRemotely(false);
      executionConfiguration.setExecutingClustered(false);
    }
  }
  Object[] data=spoon.variables.getData();
  String[] fields=spoon.variables.getRowMeta().getFieldNames();
  Map<String,String> variableMap=new HashMap<String,String>();
  variableMap.putAll(executionConfiguration.getVariables());
  for (int idx=0; idx < fields.length; idx++) {
    String value=executionConfiguration.getVariables().get(fields[idx]);
    if (Const.isEmpty(value)) {
      value=data[idx].toString();
    }
    variableMap.put(fields[idx],value);
  }
  executionConfiguration.setVariables(variableMap);
  executionConfiguration.getUsedVariables(transMeta);
  executionConfiguration.getUsedArguments(transMeta,spoon.getArguments());
  executionConfiguration.setReplayDate(replayDate);
  executionConfiguration.setLogLevel(logLevel);
  boolean execConfigAnswer=true;
  if (debugAnswer == TransDebugDialog.DEBUG_CONFIG && replayDate == null) {
    TransExecutionConfigurationDialog dialog=new TransExecutionConfigurationDialog(spoon.getShell(),executionConfiguration,transMeta);
    execConfigAnswer=dialog.open();
  }
  if (execConfigAnswer) {
    ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.SpoonTransMetaExecutionStart.id,transMeta);
    ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.SpoonTransExecutionConfiguration.id,executionConfiguration);
    if (debug || preview) {
      if (transDebugMeta.getNrOfUsedSteps() == 0) {
        MessageBox box=new MessageBox(spoon.getShell(),SWT.ICON_WARNING | SWT.YES | SWT.NO);
        box.setText(BaseMessages.getString(PKG,"Spoon.Dialog.Warning.NoPreviewOrDebugSteps.Title"));
        box.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.Warning.NoPreviewOrDebugSteps.Message"));
        int answer=box.open();
        if (answer != SWT.YES) {
          return;
        }
      }
    }
    TransGraph activeTransGraph=spoon.getActiveTransGraph();
    if (executionConfiguration.isExecutingLocally()) {
      if (debug || preview) {
        activeTransGraph.debug(executionConfiguration,transDebugMeta);
      }
 else {
        activeTransGraph.start(executionConfiguration);
      }
    }
 else     if (executionConfiguration.isExecutingRemotely()) {
      activeTransGraph.handleTransMetaChanges(transMeta);
      if (transMeta.hasChanged()) {
        showSaveTransformationBeforeRunningDialog(spoon.getShell());
      }
 else       if (executionConfiguration.getRemoteServer() != null) {
        String carteObjectId=Trans.sendToSlaveServer(transMeta,executionConfiguration,spoon.rep,spoon.metaStore);
        monitorRemoteTrans(transMeta,carteObjectId,executionConfiguration.getRemoteServer());
        spoon.delegates.slaves.addSpoonSlave(executionConfiguration.getRemoteServer());
      }
 else {
        MessageBox mb=new MessageBox(spoon.getShell(),SWT.OK | SWT.ICON_INFORMATION);
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.NoRemoteServerSpecified.Message"));
        mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.NoRemoteServerSpecified.Title"));
        mb.open();
      }
    }
 else     if (executionConfiguration.isExecutingClustered()) {
      activeTransGraph.handleTransMetaChanges(transMeta);
      if (transMeta.hasChanged()) {
        showSaveTransformationBeforeRunningDialog(spoon.getShell());
      }
 else {
        splitTrans(transMeta,executionConfiguration);
      }
    }
  }
}
