{
switch (transAction.getType()) {
case TransAction.TYPE_ACTION_NEW_STEP:
    for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
      int idx=transAction.getCurrentIndex()[i];
      transMeta.removeStep(idx);
    }
  spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_NEW_CONNECTION:
for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
int idx=transAction.getCurrentIndex()[i];
transMeta.removeDatabase(idx);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_NEW_NOTE:
for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
int idx=transAction.getCurrentIndex()[i];
transMeta.removeNote(idx);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_NEW_HOP:
for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
int idx=transAction.getCurrentIndex()[i];
transMeta.removeTransHop(idx);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_NEW_SLAVE:
for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
int idx=transAction.getCurrentIndex()[i];
transMeta.getSlaveServers().remove(idx);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_NEW_CLUSTER:
for (int i=transAction.getCurrent().length - 1; i >= 0; i--) {
int idx=transAction.getCurrentIndex()[i];
transMeta.getClusterSchemas().remove(idx);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_STEP:
for (int i=0; i < transAction.getCurrent().length; i++) {
StepMeta stepMeta=(StepMeta)transAction.getCurrent()[i];
int idx=transAction.getCurrentIndex()[i];
transMeta.addStep(idx,stepMeta);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_CONNECTION:
for (int i=0; i < transAction.getCurrent().length; i++) {
DatabaseMeta ci=(DatabaseMeta)transAction.getCurrent()[i];
int idx=transAction.getCurrentIndex()[i];
transMeta.addDatabase(idx,ci);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_NOTE:
for (int i=0; i < transAction.getCurrent().length; i++) {
NotePadMeta ni=(NotePadMeta)transAction.getCurrent()[i];
int idx=transAction.getCurrentIndex()[i];
transMeta.addNote(idx,ni);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_HOP:
for (int i=0; i < transAction.getCurrent().length; i++) {
TransHopMeta hi=(TransHopMeta)transAction.getCurrent()[i];
int idx=transAction.getCurrentIndex()[i];
StepMeta from=transMeta.findStep(hi.getFromStep().getName());
StepMeta to=transMeta.findStep(hi.getToStep().getName());
TransHopMeta hinew=new TransHopMeta(from,to);
transMeta.addTransHop(idx,hinew);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_STEP:
for (int i=0; i < transAction.getCurrent().length; i++) {
StepMeta prev=(StepMeta)((StepMeta)transAction.getPrevious()[i]).clone();
int idx=transAction.getCurrentIndex()[i];
transMeta.getStep(idx).replaceMeta(prev);
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_CONNECTION:
for (int i=0; i < transAction.getCurrent().length; i++) {
DatabaseMeta prev=(DatabaseMeta)transAction.getPrevious()[i];
int idx=transAction.getCurrentIndex()[i];
transMeta.getDatabase(idx).replaceMeta((DatabaseMeta)prev.clone());
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_NOTE:
for (int i=0; i < transAction.getCurrent().length; i++) {
int idx=transAction.getCurrentIndex()[i];
transMeta.removeNote(idx);
NotePadMeta prev=(NotePadMeta)transAction.getPrevious()[i];
transMeta.addNote(idx,(NotePadMeta)prev.clone());
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_HOP:
for (int i=0; i < transAction.getCurrent().length; i++) {
TransHopMeta prev=(TransHopMeta)transAction.getPrevious()[i];
int idx=transAction.getCurrentIndex()[i];
transMeta.removeTransHop(idx);
transMeta.addTransHop(idx,(TransHopMeta)prev.clone());
}
spoon.refreshTree();
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_POSITION_STEP:
for (int i=0; i < transAction.getCurrentIndex().length; i++) {
StepMeta stepMeta=transMeta.getStep(transAction.getCurrentIndex()[i]);
stepMeta.setLocation(transAction.getPreviousLocation()[i]);
}
spoon.refreshGraph();
break;
case TransAction.TYPE_ACTION_POSITION_NOTE:
for (int i=0; i < transAction.getCurrentIndex().length; i++) {
int idx=transAction.getCurrentIndex()[i];
NotePadMeta npi=transMeta.getNote(idx);
Point prev=transAction.getPreviousLocation()[i];
npi.setLocation(prev);
}
spoon.refreshGraph();
break;
default :
break;
}
if (transMeta.viewNextUndo() != null) {
if (transMeta.viewNextUndo().getNextAlso()) {
spoon.undoAction(transMeta);
}
}
}
