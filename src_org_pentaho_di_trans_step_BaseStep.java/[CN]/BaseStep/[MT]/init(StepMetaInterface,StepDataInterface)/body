{
  sdi.setStatus(StepDataInterface.STATUS_INIT);
  String slaveNr=getVariable(Const.INTERNAL_VARIABLE_SLAVE_TRANS_NUMBER);
  String clusterSize=getVariable(Const.INTERNAL_VARIABLE_CLUSTER_SIZE);
  if (!Const.isEmpty(slaveNr) && !Const.isEmpty(clusterSize)) {
    this.slaveNr=Integer.parseInt(slaveNr);
    this.clusterSize=Integer.parseInt(clusterSize);
    logDetailed("Running on slave server #" + slaveNr + "/"+ clusterSize+ ".");
  }
 else {
    this.slaveNr=0;
    this.clusterSize=0;
  }
  uniqueStepNrAcrossSlaves=this.slaveNr * getStepMeta().getCopies() + stepcopy;
  uniqueStepCountAcrossSlaves=this.clusterSize == 0 ? getStepMeta().getCopies() : this.clusterSize * getStepMeta().getCopies();
  if (uniqueStepCountAcrossSlaves == 0)   uniqueStepCountAcrossSlaves=1;
  setVariable(Const.INTERNAL_VARIABLE_STEP_UNIQUE_NUMBER,Integer.toString(uniqueStepNrAcrossSlaves));
  setVariable(Const.INTERNAL_VARIABLE_STEP_UNIQUE_COUNT,Integer.toString(uniqueStepCountAcrossSlaves));
  try {
    remoteOutputSteps=new ArrayList<RemoteStep>();
    for (    RemoteStep remoteStep : stepMeta.getRemoteOutputSteps()) {
      RemoteStep copy=(RemoteStep)remoteStep.clone();
      try {
        copy.openServerSocket(this);
        logBasic("Opened a server socket connection to " + copy);
      }
 catch (      Exception e) {
        log.logError(toString(),"Unable to open server socket during step initialisation: " + copy.toString(),e);
        throw new Exception(e);
      }
      remoteOutputSteps.add(copy);
    }
  }
 catch (  Exception e) {
    for (    RemoteStep remoteStep : remoteOutputSteps) {
      if (remoteStep.getServerSocket() != null) {
        try {
          remoteStep.getServerSocket().close();
        }
 catch (        IOException e1) {
          log.logError(toString(),"Unable to close server socket after error during step initialisation",e);
        }
      }
    }
    return false;
  }
  try {
    remoteInputSteps=new ArrayList<RemoteStep>();
    if (stepMeta.isPartitioned() && stepMeta.getClusterSchema() != null) {
      for (int i=0; i < stepMeta.getRemoteInputSteps().size(); i++) {
        RemoteStep remoteStep=stepMeta.getRemoteInputSteps().get(i);
        if (i == stepcopy) {
          RemoteStep copy=(RemoteStep)remoteStep.clone();
          remoteInputSteps.add(copy);
        }
      }
    }
 else {
      for (      RemoteStep remoteStep : stepMeta.getRemoteInputSteps()) {
        RemoteStep copy=(RemoteStep)remoteStep.clone();
        remoteInputSteps.add(copy);
      }
    }
  }
 catch (  Exception e) {
    log.logError(toString(),"Unable to initialize remote input steps during step initialisation",e);
    return false;
  }
  return true;
}
