{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("testTextFileOutput1");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepName="injector step";
  StepMeta injectorStep=TestUtilities.createInjectorStep(injectorStepName,registry);
  transMeta.addStep(injectorStep);
  StepMeta rowGeneratorStep=createRowGeneratorStep("Create rows for testTextFileOutput1",registry);
  transMeta.addStep(rowGeneratorStep);
  TransHopMeta hop_injectory_rowGenerator=new TransHopMeta(injectorStep,rowGeneratorStep);
  transMeta.addTransHop(hop_injectory_rowGenerator);
  String textFileName=TestUtilities.createEmptyTempFile("testTextFileOutput1");
  StepMeta textFileOutputStep=createTextFileOutputStep("text file output step",textFileName,registry);
  transMeta.addStep(textFileOutputStep);
  TransHopMeta hop_RowGenerator_outputTextFile=new TransHopMeta(rowGeneratorStep,textFileOutputStep);
  transMeta.addTransHop(hop_RowGenerator_outputTextFile);
  String dummyStepName="dummy step";
  StepMeta dummyStep=createDummyStep(dummyStepName,registry);
  transMeta.addStep(dummyStep);
  TransHopMeta hop_outputTextFile_dummyStep=new TransHopMeta(textFileOutputStep,dummyStep);
  transMeta.addTransHop(hop_outputTextFile_dummyStep);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface dummyStepInterface=trans.getStepInterface(dummyStepName,0);
  RowStepCollector dummyRowCollector=new RowStepCollector();
  dummyStepInterface.addRowListener(dummyRowCollector);
  trans.startThreads();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows=dummyRowCollector.getRowsWritten();
  List<RowMetaAndData> goldenImageRows=createResultData1();
  try {
    TestUtilities.checkRows(goldenImageRows,resultRows);
  }
 catch (  TestFailedException tfe) {
    fail(tfe.getMessage());
  }
}
