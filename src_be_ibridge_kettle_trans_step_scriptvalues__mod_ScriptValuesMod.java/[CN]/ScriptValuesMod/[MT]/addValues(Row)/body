{
  if (first) {
    determineUsedFields(row);
    data.cx=Context.enter();
    data.cx.setOptimizationLevel(9);
    data.scope=data.cx.initStandardObjects(null,true);
    first=false;
    bFirstRun=true;
    Scriptable jsvalue=Context.toObject(this,data.scope);
    data.scope.put("_step_",data.scope,jsvalue);
    for (int i=0; i < meta.getNumberOfJSScripts(); i++) {
      Scriptable jsR=Context.toObject(jsScripts[i].getScript(),data.scope);
      data.scope.put(jsScripts[i].getScriptName(),data.scope,jsR);
    }
    data.scope.put("_TransformationName_",data.scope,new String(this.getName()));
    try {
      for (int i=0; i < data.fields_used.length; i++) {
        Value val=row.getValue(data.fields_used[i]);
        Scriptable jsarg=Context.toObject(val,data.scope);
        data.scope.put(val.getName(),data.scope,jsarg);
      }
      try {
        if (meta.getAddClasses() != null) {
          for (int i=0; i < meta.getAddClasses().length; i++) {
            Object jsOut=Context.javaToJS(meta.getAddClasses()[i].getAddObject(),data.scope);
            ScriptableObject.putProperty(data.scope,meta.getAddClasses()[i].getJSName(),jsOut);
          }
        }
      }
 catch (      Exception e) {
        logError(Messages.getString("ScriptValuesMod.Log.CouldNotAttachAdditionalScripts") + e.toString());
        logError(Const.getStackTracker(e));
        setErrors(1);
        stopAll();
        return ERROR_TRANSFORMATION;
      }
      try {
        Context.javaToJS(ScriptValuesAddedFunctions.class,data.scope);
        ((ScriptableObject)data.scope).defineFunctionProperties(ScriptValuesAddedFunctions.jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
      }
 catch (      Exception ex) {
        logError(Messages.getString("ScriptValuesMod.Log.CouldNotAddDefaultFunctions") + ex.toString());
        setErrors(1);
        stopAll();
        return ERROR_TRANSFORMATION;
      }
      ;
      try {
        data.scope.put("SKIP_TRANSFORMATION",data.scope,new Integer(SKIP_TRANSFORMATION));
        data.scope.put("ABORT_TRANSFORMATION",data.scope,new Integer(ABORT_TRANSFORMATION));
        data.scope.put("ERROR_TRANSFORMATION",data.scope,new Integer(ERROR_TRANSFORMATION));
        data.scope.put("CONTINUE_TRANSFORMATION",data.scope,new Integer(CONTINUE_TRANSFORMATION));
      }
 catch (      Exception ex) {
        logError(Messages.getString("ScriptValuesMod.Log.CouldNotAddDefaultConstants") + ex.toString());
        setErrors(1);
        stopAll();
        return ERROR_TRANSFORMATION;
      }
      ;
      try {
        if (strStartScript != null && strStartScript.length() > 0) {
          Script startScript=data.cx.compileString(strStartScript,"trans_Start",1,null);
          startScript.exec(data.cx,data.scope);
          if (log.isDetailed())           logDetailed(("Start Script found!"));
        }
 else {
          if (log.isDetailed())           logDetailed(("No starting Script found!"));
        }
      }
 catch (      Exception es) {
        logError(Messages.getString("ScriptValuesMod.Log.ErrorProcessingStartScript") + es.toString());
        setErrors(1);
        stopAll();
        return ERROR_TRANSFORMATION;
      }
      data.script=data.cx.compileString(strTransformScript,"script",1,null);
    }
 catch (    Exception e) {
      logError(Messages.getString("ScriptValuesMod.Log.CouldNotCompileJavascript") + e.toString());
      setErrors(1);
      stopAll();
      return ERROR_TRANSFORMATION;
    }
  }
  try {
    data.script.exec(data.cx,data.scope);
    if (bFirstRun) {
      bFirstRun=false;
      Object tran_stat=data.scope.get("trans_Status",data.scope);
      if (tran_stat != ScriptableObject.NOT_FOUND) {
        bWithTransStat=true;
        if (log.isDetailed())         logDetailed(("tran_Status found. Checking transformation status while script execution."));
      }
 else {
        if (log.isDetailed())         logDetailed(("No tran_Status found. Transformation status checking not available."));
        bWithTransStat=false;
      }
    }
    if (bWithTransStat) {
      iTranStat=(int)Context.toNumber(data.scope.get("trans_Status",data.scope));
    }
 else {
      iTranStat=CONTINUE_TRANSFORMATION;
    }
    if (iTranStat == CONTINUE_TRANSFORMATION) {
      StringBuffer message=new StringBuffer();
      for (int i=0; i < meta.getName().length; i++) {
        Object result=data.scope.get(meta.getName()[i],data.scope);
        Value res=new Value();
        if (!getValueFromJScript(result,i,res)) {
          logError(message.toString());
          setErrors(1);
          stopAll();
          return ERROR_TRANSFORMATION;
        }
        row.addValue(res);
      }
    }
  }
 catch (  JavaScriptException jse) {
    logError(Messages.getString("ScriptValuesMod.Log.ErrorStackTrace") + Const.CR + Const.getStackTracker(jse));
    setErrors(1);
    stopAll();
    return ERROR_TRANSFORMATION;
  }
catch (  Exception e) {
    logError(Messages.getString("ScriptValuesMod.Log.JavascriptError") + e.toString());
    logError(Messages.getString("ScriptValuesMod.Log.ErrorStackTrace") + Const.CR + Const.getStackTracker(e));
    setErrors(1);
    stopAll();
    return ERROR_TRANSFORMATION;
  }
  return iTranStat;
}
