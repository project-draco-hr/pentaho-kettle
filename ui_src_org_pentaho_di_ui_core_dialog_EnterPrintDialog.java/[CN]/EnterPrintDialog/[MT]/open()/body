{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  retval=SWT.OK;
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.SHEET| SWT.RESIZE| SWT.MAX| SWT.MIN);
  props.setLook(shell);
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"EnterPrintDialog.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlCanvas=new Label(shell,SWT.NONE);
  wlCanvas.setText(BaseMessages.getString(PKG,"EnterPrintDialog.PrintArea.Label"));
  props.setLook(wlCanvas);
  fdlCanvas=new FormData();
  fdlCanvas.left=new FormAttachment(0,0);
  fdlCanvas.top=new FormAttachment(0,margin);
  wlCanvas.setLayoutData(fdlCanvas);
  wCanvas=new Canvas(shell,SWT.BORDER);
  props.setLook(wCanvas);
  wCanvas.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent pe){
      repaint(pe.gc,pe.width,pe.height);
    }
  }
);
  fdCanvas=new FormData();
  fdCanvas.left=new FormAttachment(0,0);
  fdCanvas.top=new FormAttachment(wlCanvas,margin);
  fdCanvas.right=new FormAttachment(100,0);
  fdCanvas.bottom=new FormAttachment(100,-220);
  wCanvas.setLayoutData(fdCanvas);
  wlRows=new Label(shell,SWT.NONE);
  wlRows.setText(BaseMessages.getString(PKG,"EnterPrintDialog.Rows.Label"));
  props.setLook(wlRows);
  fdlRows=new FormData();
  fdlRows.left=new FormAttachment(0,0);
  fdlRows.right=new FormAttachment(middle,-margin);
  fdlRows.top=new FormAttachment(wCanvas,margin);
  wlRows.setLayoutData(fdlRows);
  wRows=new Slider(shell,SWT.HORIZONTAL);
  wRows.setIncrement(1);
  wRows.setMinimum(1);
  wRows.setMaximum(11);
  wRows.setThumb(1);
  wRows.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      Slider sl=(Slider)se.widget;
      nrrows=sl.getSelection();
      wCanvas.redraw();
    }
  }
);
  props.setLook(wRows);
  fdRows=new FormData();
  fdRows.left=new FormAttachment(middle,0);
  fdRows.top=new FormAttachment(wCanvas,margin);
  fdRows.right=new FormAttachment(100,0);
  wRows.setLayoutData(fdRows);
  wlCols=new Label(shell,SWT.NONE);
  wlCols.setText(BaseMessages.getString(PKG,"EnterPrintDialog.Cols.Label"));
  props.setLook(wlCols);
  fdlCols=new FormData();
  fdlCols.left=new FormAttachment(0,0);
  fdlCols.right=new FormAttachment(middle,-margin);
  fdlCols.top=new FormAttachment(wRows,margin);
  wlCols.setLayoutData(fdlCols);
  wCols=new Slider(shell,SWT.HORIZONTAL);
  wCols.setIncrement(1);
  wCols.setMinimum(1);
  wCols.setMaximum(11);
  wCols.setThumb(1);
  wCols.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      Slider sl=(Slider)se.widget;
      nrcols=sl.getSelection();
      wCanvas.redraw();
    }
  }
);
  props.setLook(wCols);
  fdCols=new FormData();
  fdCols.left=new FormAttachment(middle,0);
  fdCols.top=new FormAttachment(wRows,margin);
  fdCols.right=new FormAttachment(100,0);
  wCols.setLayoutData(fdCols);
  wlScale=new Label(shell,SWT.NONE);
  wlScale.setText(BaseMessages.getString(PKG,"EnterPrintDialog.Scaling.Label"));
  props.setLook(wlScale);
  fdlScale=new FormData();
  fdlScale.left=new FormAttachment(0,0);
  fdlScale.right=new FormAttachment(middle,-margin);
  fdlScale.top=new FormAttachment(wCols,margin);
  wlScale.setLayoutData(fdlScale);
  wScale=new Slider(shell,SWT.HORIZONTAL);
  wScale.setIncrement(10);
  wScale.setMinimum(10);
  wScale.setMaximum(500);
  wScale.setThumb(10);
  wScale.setPageIncrement(25);
  wScale.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      Slider sl=(Slider)se.widget;
      scale=sl.getSelection();
      wCanvas.redraw();
    }
  }
);
  props.setLook(wScale);
  fdScale=new FormData();
  fdScale.left=new FormAttachment(middle,0);
  fdScale.top=new FormAttachment(wCols,margin);
  fdScale.right=new FormAttachment(100,0);
  wScale.setLayoutData(fdScale);
  wlLeft=new Label(shell,SWT.NONE);
  wlLeft.setText(BaseMessages.getString(PKG,"EnterPrintDialog.LeftMargin.Label"));
  props.setLook(wlLeft);
  fdlLeft=new FormData();
  fdlLeft.left=new FormAttachment(0,0);
  fdlLeft.right=new FormAttachment(middle,-margin);
  fdlLeft.top=new FormAttachment(wScale,margin);
  wlLeft.setLayoutData(fdlLeft);
  wLeft=new Text(shell,SWT.BORDER);
  wLeft.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      Text w=(Text)e.widget;
      leftMargin=Const.toDouble(w.getText(),0.00);
    }
  }
);
  props.setLook(wLeft);
  fdLeft=new FormData();
  fdLeft.left=new FormAttachment(middle,0);
  fdLeft.top=new FormAttachment(wScale,margin);
  fdLeft.right=new FormAttachment(100,0);
  wLeft.setLayoutData(fdLeft);
  wlRight=new Label(shell,SWT.NONE);
  wlRight.setText(BaseMessages.getString(PKG,"EnterPrintDialog.RightMargin.Label"));
  props.setLook(wlRight);
  fdlRight=new FormData();
  fdlRight.left=new FormAttachment(0,0);
  fdlRight.right=new FormAttachment(middle,-margin);
  fdlRight.top=new FormAttachment(wLeft,margin);
  wlRight.setLayoutData(fdlRight);
  wRight=new Text(shell,SWT.BORDER);
  wRight.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      Text w=(Text)e.widget;
      rightMargin=Const.toDouble(w.getText(),0.00);
    }
  }
);
  props.setLook(wRight);
  fdRight=new FormData();
  fdRight.left=new FormAttachment(middle,0);
  fdRight.top=new FormAttachment(wLeft,margin);
  fdRight.right=new FormAttachment(100,0);
  wRight.setLayoutData(fdRight);
  wlTop=new Label(shell,SWT.NONE);
  wlTop.setText(BaseMessages.getString(PKG,"EnterPrintDialog.TopMargin.Label"));
  props.setLook(wlTop);
  fdlTop=new FormData();
  fdlTop.left=new FormAttachment(0,0);
  fdlTop.right=new FormAttachment(middle,-margin);
  fdlTop.top=new FormAttachment(wRight,margin);
  wlTop.setLayoutData(fdlTop);
  wTop=new Text(shell,SWT.BORDER);
  wTop.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      Text w=(Text)e.widget;
      topMargin=Const.toDouble(w.getText(),0.00);
    }
  }
);
  props.setLook(wTop);
  fdTop=new FormData();
  fdTop.left=new FormAttachment(middle,0);
  fdTop.top=new FormAttachment(wRight,margin);
  fdTop.right=new FormAttachment(100,0);
  wTop.setLayoutData(fdTop);
  wlBottom=new Label(shell,SWT.NONE);
  wlBottom.setText(BaseMessages.getString(PKG,"EnterPrintDialog.BottomMargin.Label"));
  props.setLook(wlBottom);
  fdlBottom=new FormData();
  fdlBottom.left=new FormAttachment(0,0);
  fdlBottom.right=new FormAttachment(middle,-margin);
  fdlBottom.top=new FormAttachment(wTop,margin);
  wlBottom.setLayoutData(fdlBottom);
  wBottom=new Text(shell,SWT.BORDER);
  wBottom.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      Text w=(Text)e.widget;
      bottomMargin=Const.toDouble(w.getText(),0.00);
    }
  }
);
  props.setLook(wBottom);
  fdBottom=new FormData();
  fdBottom.left=new FormAttachment(middle,0);
  fdBottom.top=new FormAttachment(wTop,margin);
  fdBottom.right=new FormAttachment(100,0);
  wBottom.setLayoutData(fdBottom);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  fdOK=new FormData();
  fdOK.left=new FormAttachment(33,0);
  fdOK.bottom=new FormAttachment(100,0);
  wOK.setLayoutData(fdOK);
  fdCancel=new FormData();
  fdCancel.left=new FormAttachment(66,0);
  fdCancel.bottom=new FormAttachment(100,0);
  wCancel.setLayoutData(fdCancel);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel.addListener(SWT.Selection,lsCancel);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return retval;
}
