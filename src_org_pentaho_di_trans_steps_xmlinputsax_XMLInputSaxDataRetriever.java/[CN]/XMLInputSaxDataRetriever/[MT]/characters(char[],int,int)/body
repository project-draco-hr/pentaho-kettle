{
  try {
    tempVal=new String(ch,start,length);
    if (tempVal.equals("1")) {
      System.out.println("tempVal=" + tempVal);
    }
    if (this.fieldToFill >= 0) {
      ValueMetaAndData v=(ValueMetaAndData)row[fieldToFill];
      if (tempVal != "") {
        v.setValueData(tempVal);
      }
 else {
        v.setValueData("");
      }
      XMLInputSaxField xmlInputField=(XMLInputSaxField)fields.get(fieldToFill);
switch (xmlInputField.getTrimType()) {
case XMLInputSaxField.TYPE_TRIM_LEFT:
        v.setValueData(Const.ltrim(v.getValueData().toString()));
      break;
case XMLInputSaxField.TYPE_TRIM_RIGHT:
    v.setValueData(Const.rtrim(v.getValueData().toString()));
  break;
case XMLInputSaxField.TYPE_TRIM_BOTH:
v.setValueData(v.getValueData().toString().trim());
break;
default :
break;
}
switch (xmlInputField.getType()) {
case ValueMeta.TYPE_STRING:
break;
case ValueMeta.TYPE_NUMBER:
if (xmlInputField.getFormat() != null && xmlInputField.getFormat().length() > 0) {
if (xmlInputField.getDecimalSymbol() != null && xmlInputField.getDecimalSymbol().length() > 0) {
if (xmlInputField.getGroupSymbol() != null && xmlInputField.getGroupSymbol().length() > 0) {
if (xmlInputField.getCurrencySymbol() != null && xmlInputField.getCurrencySymbol().length() > 0) {
v.setValueData(new Double(StringUtil.str2num(xmlInputField.getFormat(),xmlInputField.getGroupSymbol(),xmlInputField.getGroupSymbol(),xmlInputField.getCurrencySymbol(),v.getValueData().toString())));
}
 else {
v.setValueData(new Double(StringUtil.str2num(xmlInputField.getFormat(),xmlInputField.getGroupSymbol(),xmlInputField.getGroupSymbol(),null,v.getValueData().toString())));
}
}
 else {
v.setValueData(new Double(StringUtil.str2num(xmlInputField.getFormat(),xmlInputField.getGroupSymbol(),null,null,v.getValueData().toString())));
}
}
 else {
v.setValueData(new Double(StringUtil.str2num(xmlInputField.getFormat(),null,null,null,v.getValueData().toString())));
}
}
 else {
v.setValueData(new Double(StringUtil.str2num(null,null,null,null,v.getValueData().toString())));
}
v.getValueMeta().setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case ValueMeta.TYPE_INTEGER:
v.getValueMeta().setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case ValueMeta.TYPE_BIGNUMBER:
v.getValueMeta().setLength(xmlInputField.getLength(),xmlInputField.getPrecision());
break;
case ValueMeta.TYPE_DATE:
if (xmlInputField.getFormat() != null && xmlInputField.getFormat().length() > 0) {
v.setValueData(StringUtil.str2dat(xmlInputField.getFormat(),null,v.getValueData().toString()));
}
 else {
}
break;
case ValueMeta.TYPE_BOOLEAN:
break;
default :
break;
}
if (xmlInputField.isRepeated()) {
if (v.getValueData() == null && data.previousRow != null) {
ValueMetaAndData previous=(ValueMetaAndData)data.previousRow[fieldToFill];
v.setValueData(previous.getValueData());
}
}
}
fieldToFill=-1;
}
 catch (KettleValueException e) {
LogWriter.getInstance().logError(toString(),Const.getStackTracker(e));
}
}
