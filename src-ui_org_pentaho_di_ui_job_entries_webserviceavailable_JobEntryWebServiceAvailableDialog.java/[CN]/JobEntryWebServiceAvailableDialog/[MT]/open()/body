{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlURL=new Label(shell,SWT.RIGHT);
  wlURL.setText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.URL.Label"));
  props.setLook(wlURL);
  fdlURL=new FormData();
  fdlURL.left=new FormAttachment(0,0);
  fdlURL.top=new FormAttachment(wName,margin);
  fdlURL.right=new FormAttachment(middle,-margin);
  wlURL.setLayoutData(fdlURL);
  wURL=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wURL);
  wURL.addModifyListener(lsMod);
  fdURL=new FormData();
  fdURL.left=new FormAttachment(middle,0);
  fdURL.top=new FormAttachment(wName,margin);
  fdURL.right=new FormAttachment(100,-margin);
  wURL.setLayoutData(fdURL);
  wURL.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wURL.setToolTipText(jobMeta.environmentSubstitute(wURL.getText()));
    }
  }
);
  wlConnectTimeOut=new Label(shell,SWT.RIGHT);
  wlConnectTimeOut.setText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.ConnectTimeOut.Label"));
  props.setLook(wlConnectTimeOut);
  fdlConnectTimeOut=new FormData();
  fdlConnectTimeOut.left=new FormAttachment(0,0);
  fdlConnectTimeOut.top=new FormAttachment(wURL,margin);
  fdlConnectTimeOut.right=new FormAttachment(middle,-margin);
  wlConnectTimeOut.setLayoutData(fdlConnectTimeOut);
  wConnectTimeOut=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wConnectTimeOut.setToolTipText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.ConnectTimeOut.Tooltip"));
  props.setLook(wConnectTimeOut);
  wConnectTimeOut.addModifyListener(lsMod);
  fdConnectTimeOut=new FormData();
  fdConnectTimeOut.left=new FormAttachment(middle,0);
  fdConnectTimeOut.top=new FormAttachment(wURL,margin);
  fdConnectTimeOut.right=new FormAttachment(100,-margin);
  wConnectTimeOut.setLayoutData(fdConnectTimeOut);
  wConnectTimeOut.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wConnectTimeOut.setToolTipText(jobMeta.environmentSubstitute(wConnectTimeOut.getText()));
    }
  }
);
  wlReadTimeOut=new Label(shell,SWT.RIGHT);
  wlReadTimeOut.setText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.ReadTimeOut.Label"));
  props.setLook(wlReadTimeOut);
  fdlReadTimeOut=new FormData();
  fdlReadTimeOut.left=new FormAttachment(0,0);
  fdlReadTimeOut.top=new FormAttachment(wConnectTimeOut,margin);
  fdlReadTimeOut.right=new FormAttachment(middle,-margin);
  wlReadTimeOut.setLayoutData(fdlReadTimeOut);
  wReadTimeOut=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wReadTimeOut.setToolTipText(BaseMessages.getString(PKG,"JobEntryWebServiceAvailable.ReadTimeOut.Tooltip"));
  props.setLook(wReadTimeOut);
  wReadTimeOut.addModifyListener(lsMod);
  fdReadTimeOut=new FormData();
  fdReadTimeOut.left=new FormAttachment(middle,0);
  fdReadTimeOut.top=new FormAttachment(wConnectTimeOut,margin);
  fdReadTimeOut.right=new FormAttachment(100,-margin);
  wReadTimeOut.setLayoutData(fdReadTimeOut);
  wReadTimeOut.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wReadTimeOut.setToolTipText(jobMeta.environmentSubstitute(wReadTimeOut.getText()));
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  FormData fd=new FormData();
  fd.right=new FormAttachment(50,-10);
  fd.bottom=new FormAttachment(100,0);
  fd.width=100;
  wOK.setLayoutData(fd);
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  fd=new FormData();
  fd.left=new FormAttachment(50,10);
  fd.bottom=new FormAttachment(100,0);
  fd.width=100;
  wCancel.setLayoutData(fd);
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wReadTimeOut);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wURL.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  props.setDialogSize(shell,"JobEntryWebServiceAvailableDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
