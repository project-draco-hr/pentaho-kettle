{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"HL7InputDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"HL7InputDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  Label wlMessageField=new Label(shell,SWT.RIGHT);
  wlMessageField.setText(BaseMessages.getString(PKG,"HL7InputDialog.MessageField.Label"));
  props.setLook(wlMessageField);
  FormData fdlMessageField=new FormData();
  fdlMessageField.left=new FormAttachment(0,0);
  fdlMessageField.right=new FormAttachment(middle,-margin);
  fdlMessageField.top=new FormAttachment(wStepname,margin);
  wlMessageField.setLayoutData(fdlMessageField);
  wMessageField=new CCombo(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wMessageField.setText(stepname);
  props.setLook(wMessageField);
  wMessageField.addModifyListener(lsMod);
  FormData fdMessageField=new FormData();
  fdMessageField.left=new FormAttachment(middle,0);
  fdMessageField.top=new FormAttachment(wStepname,margin);
  fdMessageField.right=new FormAttachment(100,0);
  wMessageField.setLayoutData(fdMessageField);
  try {
    RowMetaInterface fields=transMeta.getPrevStepFields(stepMeta);
    String[] names=fields.getFieldNames();
    Arrays.sort(names);
    wMessageField.setItems(names);
  }
 catch (  KettleStepException e) {
    log.logError("Unable to get list of input fields... ",e);
  }
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,wMessageField);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  setSize();
  getData();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
