{
  Object[] outputRow=RowDataUtil.resizeArray(row,data.outputRowMeta.size());
  Object[] lookupRow=new Object[data.lookupMeta.size()];
  int lookupIndex=0;
  for (int i=0; i < meta.getStreamKeyField1().length; i++) {
    if (data.keynrs[i] >= 0) {
      ValueMetaInterface input=inputRowMeta.getValueMeta(data.keynrs[i]);
      ValueMetaInterface value=data.lookupMeta.getValueMeta(lookupIndex);
      lookupRow[lookupIndex]=row[data.keynrs[i]];
      if (input.getType() != value.getType() || ValueMetaInterface.STORAGE_TYPE_BINARY_STRING == input.getStorageType()) {
        lookupRow[lookupIndex]=value.convertData(input,lookupRow[lookupIndex]);
        value.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
      }
      lookupIndex++;
    }
    if (data.keynrs2[i] >= 0) {
      ValueMetaInterface input=inputRowMeta.getValueMeta(data.keynrs2[i]);
      ValueMetaInterface value=data.lookupMeta.getValueMeta(lookupIndex);
      lookupRow[lookupIndex]=row[data.keynrs2[i]];
      if (input.getType() != value.getType() || ValueMetaInterface.STORAGE_TYPE_BINARY_STRING == input.getStorageType()) {
        lookupRow[lookupIndex]=value.convertData(input,lookupRow[lookupIndex]);
        value.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
      }
      lookupIndex++;
    }
  }
  Object[] add;
  boolean cache_now=false;
  boolean cacheHit=false;
  if (meta.isCached()) {
    add=getRowFromCache(data.lookupMeta,lookupRow);
    if (add != null) {
      cacheHit=true;
    }
  }
 else {
    add=null;
  }
  if (add == null) {
    if (!(meta.isCached() && meta.isLoadingAllDataInCache()) || data.hasDBCondition) {
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.AddedValuesToLookupRow1") + meta.getStreamKeyField1().length + BaseMessages.getString(PKG,"DatabaseLookup.Log.AddedValuesToLookupRow2")+ data.lookupMeta.getString(lookupRow));
      }
      data.db.setValuesLookup(data.lookupMeta,lookupRow);
      add=data.db.getLookup(meta.isFailingOnMultipleResults(),meta.getDatabaseMeta().isMySQLVariant());
      cache_now=true;
    }
  }
  if (add == null) {
    if (meta.isEatingRowOnLookupFailure()) {
      return null;
    }
    if (getStepMeta().isDoingErrorHandling()) {
      putError(getInputRowMeta(),row,1L,"No lookup found",null,"DBL001");
      return null;
    }
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.NoResultsFoundAfterLookup"));
    }
    add=new Object[data.returnMeta.size()];
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      if (data.nullif[i] != null) {
        add[i]=data.nullif[i];
      }
 else {
        add[i]=null;
      }
    }
  }
 else {
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.FoundResultsAfterLookup") + Arrays.toString(add));
    }
    if (!cacheHit) {
      incrementLinesInput();
      int[] types=meta.getReturnValueDefaultType();
      for (int i=0; i < types.length; i++) {
        ValueMetaInterface returned=data.db.getReturnRowMeta().getValueMeta(i);
        ValueMetaInterface expected=data.returnMeta.getValueMeta(i);
        if (returned != null && types[i] > 0 && (types[i] != returned.getType() || returned.getType() == ValueMetaInterface.TYPE_STRING && returned.getStorageType() == ValueMetaInterface.STORAGE_TYPE_BINARY_STRING)) {
          add[i]=expected.convertData(returned,add[i]);
        }
      }
    }
  }
  if (meta.isCached() && cache_now && !meta.isLoadingAllDataInCache()&& data.allEquals) {
    storeRowInCache(data.lookupMeta,lookupRow,add);
  }
  for (int i=0; i < data.returnMeta.size(); i++) {
    outputRow[inputRowMeta.size() + i]=add[i];
  }
  return outputRow;
}
