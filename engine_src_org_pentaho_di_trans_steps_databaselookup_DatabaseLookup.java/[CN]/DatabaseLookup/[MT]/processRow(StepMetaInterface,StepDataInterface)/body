{
  meta=(DatabaseLookupMeta)smi;
  data=(DatabaseLookupData)sdi;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isCached()) {
      if (meta.getCacheSize() > 0) {
        data.look=new Hashtable<RowMetaAndData,TimedRow>((int)(meta.getCacheSize() * 1.5));
      }
 else {
        data.look=new Hashtable<RowMetaAndData,TimedRow>();
      }
    }
    data.db.setLookup(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTablename()),meta.getTableKeyField(),meta.getKeyCondition(),meta.getReturnValueField(),meta.getReturnValueNewName(),meta.getOrderByClause(),meta.isFailingOnMultipleResults());
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"DatabaseLookup.Log.CheckingRow") + getInputRowMeta().getString(r));
    }
    data.keynrs=new int[meta.getStreamKeyField1().length];
    data.keynrs2=new int[meta.getStreamKeyField1().length];
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      data.keynrs[i]=getInputRowMeta().indexOfValue(meta.getStreamKeyField1()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired1.Exception") + meta.getStreamKeyField1()[i] + BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired2.Exception"));
      }
      data.keynrs2[i]=getInputRowMeta().indexOfValue(meta.getStreamKeyField2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired3.Exception") + meta.getStreamKeyField2()[i] + BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired4.Exception"));
      }
      if (log.isDebug()) {
        logDebug(BaseMessages.getString(PKG,"DatabaseLookup.Log.FieldHasIndex1") + meta.getStreamKeyField1()[i] + BaseMessages.getString(PKG,"DatabaseLookup.Log.FieldHasIndex2")+ data.keynrs[i]);
      }
    }
    data.nullif=new Object[meta.getReturnValueField().length];
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      ValueMetaInterface stringMeta=new ValueMeta("string",ValueMetaInterface.TYPE_STRING);
      ValueMetaInterface returnMeta=data.outputRowMeta.getValueMeta(i + getInputRowMeta().size());
      if (!Const.isEmpty(meta.getReturnValueDefault()[i])) {
        data.nullif[i]=returnMeta.convertData(stringMeta,meta.getReturnValueDefault()[i]);
      }
 else {
        data.nullif[i]=null;
      }
    }
    data.keytypes=new int[meta.getTableKeyField().length];
    String schemaTable=meta.getDatabaseMeta().getQuotedSchemaTableCombination(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTablename()));
    RowMetaInterface fields=data.db.getTableFields(schemaTable);
    if (fields != null) {
      for (int i=0; i < meta.getTableKeyField().length; i++) {
        ValueMetaInterface key=fields.searchValueMeta(meta.getTableKeyField()[i]);
        if (key != null) {
          data.keytypes[i]=key.getType();
        }
 else {
          throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired5.Exception") + meta.getTableKeyField()[i] + BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired6.Exception"));
        }
      }
    }
 else {
      throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0002.UnableToDetermineFieldsOfTable") + schemaTable + "]");
    }
    data.lookupMeta=new RowMeta();
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      if (data.keynrs[i] >= 0) {
        ValueMetaInterface inputValueMeta=getInputRowMeta().getValueMeta(data.keynrs[i]);
        ValueMetaInterface value=ValueMetaFactory.cloneValueMeta(inputValueMeta,data.keytypes[i]);
        data.lookupMeta.addValueMeta(value);
      }
      if (data.keynrs2[i] >= 0) {
        ValueMetaInterface inputValueMeta=getInputRowMeta().getValueMeta(data.keynrs2[i]);
        ValueMetaInterface value=ValueMetaFactory.cloneValueMeta(inputValueMeta,data.keytypes[i]);
        data.lookupMeta.addValueMeta(value);
      }
    }
    data.returnMeta=new RowMeta();
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      ValueMetaInterface v=data.outputRowMeta.getValueMeta(getInputRowMeta().size() + i).clone();
      data.returnMeta.addValueMeta(v);
    }
    if (meta.isCached() && meta.isLoadingAllDataInCache()) {
      loadAllTableDataIntoTheCache();
    }
  }
  if (log.isRowLevel()) {
    logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.GotRowFromPreviousStep") + getInputRowMeta().getString(r));
  }
  try {
    Object[] outputRow=lookupValues(getInputRowMeta(),r);
    if (outputRow != null) {
      putRow(data.outputRowMeta,outputRow);
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.WroteRowToNextStep") + getInputRowMeta().getString(r));
      }
      if (checkFeedback(getLinesRead())) {
        logBasic("linenr " + getLinesRead());
      }
    }
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"DatabaseLookup.ERROR003.UnexpectedErrorDuringProcessing") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"DBLOOKUPD001");
    }
  }
  return true;
}
