{
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  meta=(DatabaseLookupMeta)smi;
  data=(DatabaseLookupData)sdi;
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isCached()) {
      if (meta.getCacheSize() > 0) {
        data.look=new Hashtable<RowMetaAndData,TimedRow>((int)(meta.getCacheSize() * 1.5));
      }
 else {
        data.look=new Hashtable<RowMetaAndData,TimedRow>();
      }
    }
    data.db.setLookup(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTablename()),meta.getTableKeyField(),meta.getKeyCondition(),meta.getReturnValueField(),meta.getReturnValueNewName(),meta.getOrderByClause(),meta.isFailingOnMultipleResults());
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"DatabaseLookup.Log.CheckingRow") + getInputRowMeta().getString(r));
    }
    data.keynrs=new int[meta.getStreamKeyField1().length];
    data.keynrs2=new int[meta.getStreamKeyField1().length];
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      data.keynrs[i]=getInputRowMeta().indexOfValue(meta.getStreamKeyField1()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired1.Exception") + meta.getStreamKeyField1()[i] + BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired2.Exception"));
      }
      data.keynrs2[i]=getInputRowMeta().indexOfValue(meta.getStreamKeyField2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired3.Exception") + meta.getStreamKeyField2()[i] + BaseMessages.getString(PKG,"DatabaseLookup.ERROR0001.FieldRequired4.Exception"));
      }
      if (log.isDebug()) {
        logDebug(BaseMessages.getString(PKG,"DatabaseLookup.Log.FieldHasIndex1") + meta.getStreamKeyField1()[i] + BaseMessages.getString(PKG,"DatabaseLookup.Log.FieldHasIndex2")+ data.keynrs[i]);
      }
    }
    determineFieldsTypesQueryingDb();
    initNullIf();
    initLookupMeta();
    initReturnMeta();
    if (meta.isCached() && meta.isLoadingAllDataInCache()) {
      loadAllTableDataIntoTheCache();
    }
  }
  if (log.isRowLevel()) {
    logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.GotRowFromPreviousStep") + getInputRowMeta().getString(r));
  }
  try {
    Object[] outputRow=lookupValues(getInputRowMeta(),r);
    if (outputRow != null) {
      putRow(data.outputRowMeta,outputRow);
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"DatabaseLookup.Log.WroteRowToNextStep") + getInputRowMeta().getString(r));
      }
      if (checkFeedback(getLinesRead())) {
        logBasic("linenr " + getLinesRead());
      }
    }
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      putError(getInputRowMeta(),r,1,e.getMessage(),null,"DBLOOKUPD001");
    }
 else {
      logError(BaseMessages.getString(PKG,"DatabaseLookup.ERROR003.UnexpectedErrorDuringProcessing") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
  }
  return true;
}
