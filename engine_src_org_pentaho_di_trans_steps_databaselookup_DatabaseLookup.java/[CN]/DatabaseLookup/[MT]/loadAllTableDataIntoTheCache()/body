{
  DatabaseMeta dbMeta=meta.getDatabaseMeta();
  Database db=getDatabase(dbMeta);
  connectDatabase(db);
  try {
    String sql="SELECT ";
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      if (i > 0) {
        sql+=", ";
      }
      sql+=dbMeta.quoteField(meta.getTableKeyField()[i]);
    }
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      sql+=", " + dbMeta.quoteField(meta.getReturnValueField()[i]);
    }
    sql+=" FROM " + dbMeta.getQuotedSchemaTableCombination(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTablename()));
    if (meta.getOrderByClause() != null && meta.getOrderByClause().length() != 0) {
      sql+=" ORDER BY " + meta.getOrderByClause();
    }
    List<Object[]> rows=db.getRows(sql,0);
    if (rows != null && rows.size() > 0) {
      if (data.allEquals) {
        putToDefaultCache(db,rows);
      }
 else {
        putToReadOnlyCache(db,rows);
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException(e);
  }
 finally {
    if (db != null) {
      db.disconnect();
    }
  }
}
