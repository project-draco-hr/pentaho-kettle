{
  JobMeta jobMeta=new JobMeta();
synchronized (repository) {
    try {
      jobMeta.clear();
      jobMeta.setRepositoryDirectory(repdir);
      jobMeta.setObjectId(getJobID(jobname,repdir.getObjectId()));
      if (jobMeta.getObjectId() != null) {
        ObjectId noteids[]=repository.getJobNoteIDs(jobMeta.getObjectId());
        ObjectId jecids[]=repository.getJobEntryCopyIDs(jobMeta.getObjectId());
        ObjectId hopid[]=repository.getJobHopIDs(jobMeta.getObjectId());
        int nrWork=2 + noteids.length + jecids.length+ hopid.length;
        if (monitor != null)         monitor.beginTask(BaseMessages.getString(PKG,"JobMeta.Monitor.LoadingJob") + repdir + Const.FILE_SEPARATOR+ jobname,nrWork);
        if (monitor != null)         monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.ReadingJobInformation"));
        RowMetaAndData jobRow=getJob(jobMeta.getObjectId());
        jobMeta.setName(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_NAME,null));
        jobMeta.setDescription(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_DESCRIPTION,null));
        jobMeta.setExtendedDescription(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_EXTENDED_DESCRIPTION,null));
        jobMeta.setJobversion(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_JOB_VERSION,null));
        jobMeta.setJobstatus(Const.toInt(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_JOB_STATUS,null),-1));
        jobMeta.setCreatedUser(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_CREATED_USER,null));
        jobMeta.setCreatedDate(jobRow.getDate(KettleDatabaseRepository.FIELD_JOB_CREATED_DATE,new Date()));
        jobMeta.setModifiedUser(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_MODIFIED_USER,null));
        jobMeta.setModifiedDate(jobRow.getDate(KettleDatabaseRepository.FIELD_JOB_MODIFIED_DATE,new Date()));
        jobMeta.setUsingUniqueConnections(jobRow.getBoolean(KettleDatabaseRepository.FIELD_JOB_UNIQUE_CONNECTIONS,false));
        long id_logdb=jobRow.getInteger(KettleDatabaseRepository.FIELD_JOB_ID_DATABASE_LOG,0);
        if (id_logdb > 0) {
          DatabaseMeta logDb=repository.loadDatabaseMeta(new LongObjectId(id_logdb),null);
          jobMeta.getJobLogTable().setConnectionName(logDb.getName());
        }
 else {
        }
        jobMeta.getJobLogTable().setTableName(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_TABLE_NAME_LOG,null));
        jobMeta.getJobLogTable().setBatchIdUsed(jobRow.getBoolean(KettleDatabaseRepository.FIELD_JOB_USE_BATCH_ID,false));
        jobMeta.getJobLogTable().setLogFieldUsed(jobRow.getBoolean(KettleDatabaseRepository.FIELD_JOB_USE_LOGFIELD,false));
        jobMeta.getJobLogTable().setLogSizeLimit(getJobAttributeString(jobMeta.getObjectId(),0,KettleDatabaseRepository.JOB_ATTRIBUTE_LOG_SIZE_LIMIT));
        jobMeta.setBatchIdPassed(jobRow.getBoolean(KettleDatabaseRepository.FIELD_JOB_PASS_BATCH_ID,false));
        RepositoryAttributeInterface attributeInterface=new KettleDatabaseRepositoryJobAttribute(repository.connectionDelegate,jobMeta.getObjectId());
        for (        LogTableInterface logTable : jobMeta.getLogTables()) {
          logTable.loadFromRepository(attributeInterface);
        }
        if (monitor != null)         monitor.worked(1);
        if (monitor != null)         monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.ReadingAvailableDatabasesFromRepository"));
        try {
          jobMeta.setSharedObjectsFile(jobRow.getString(KettleDatabaseRepository.FIELD_JOB_SHARED_FILE,null));
          jobMeta.setSharedObjects(repository != null ? repository.readJobMetaSharedObjects(jobMeta) : jobMeta.readSharedObjects());
        }
 catch (        Exception e) {
          log.logError(BaseMessages.getString(PKG,"JobMeta.ErrorReadingSharedObjects.Message",e.toString()));
          log.logError(Const.getStackTracker(e));
        }
        if (monitor != null)         monitor.worked(1);
        if (log.isDetailed())         log.logDetailed("Loading " + noteids.length + " notes");
        for (int i=0; i < noteids.length; i++) {
          if (monitor != null)           monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.ReadingNoteNr") + (i + 1) + "/"+ noteids.length);
          NotePadMeta ni=repository.notePadDelegate.loadNotePadMeta(noteids[i]);
          if (jobMeta.indexOfNote(ni) < 0)           jobMeta.addNote(ni);
          if (monitor != null)           monitor.worked(1);
        }
        List<JobEntryInterface> jobentries=new ArrayList<JobEntryInterface>();
        if (log.isDetailed())         log.logDetailed("Loading " + jecids.length + " job entries");
        for (int i=0; i < jecids.length; i++) {
          if (monitor != null)           monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.ReadingJobEntryNr") + (i + 1) + "/"+ (jecids.length));
          JobEntryCopy jec=repository.jobEntryDelegate.loadJobEntryCopy(jobMeta.getObjectId(),jecids[i],jobentries,jobMeta.getDatabases(),jobMeta.getSlaveServers());
          int copyNr=0;
          for (          JobEntryCopy copy : jobMeta.getJobCopies()) {
            if (jec.getEntry() == copy.getEntry()) {
              copyNr++;
            }
          }
          jec.setNr(copyNr);
          int idx=jobMeta.indexOfJobEntry(jec);
          if (idx < 0) {
            if (jec.getName() != null && jec.getName().length() > 0)             jobMeta.addJobEntry(jec);
          }
 else {
            jobMeta.setJobEntry(idx,jec);
          }
          if (monitor != null)           monitor.worked(1);
        }
        if (log.isDetailed())         log.logDetailed("Loading " + hopid.length + " job hops");
        for (int i=0; i < hopid.length; i++) {
          if (monitor != null)           monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.ReadingJobHopNr") + (i + 1) + "/"+ (jecids.length));
          JobHopMeta hi=loadJobHopMeta(hopid[i],jobMeta.getJobCopies());
          jobMeta.getJobhops().add(hi);
          if (monitor != null)           monitor.worked(1);
        }
        loadRepParameters(jobMeta);
        jobMeta.clearChanged();
        if (monitor != null)         monitor.subTask(BaseMessages.getString(PKG,"JobMeta.Monitor.FinishedLoadOfJob"));
        if (monitor != null)         monitor.done();
        return jobMeta;
      }
 else {
        throw new KettleException(BaseMessages.getString(PKG,"JobMeta.Exception.CanNotFindJob") + jobname);
      }
    }
 catch (    KettleException dbe) {
      throw new KettleException(BaseMessages.getString(PKG,"JobMeta.Exception.AnErrorOccuredReadingJob",jobname),dbe);
    }
 finally {
      jobMeta.initializeVariablesFrom(jobMeta.getParentVariableSpace());
      jobMeta.setInternalKettleVariables();
    }
  }
}
