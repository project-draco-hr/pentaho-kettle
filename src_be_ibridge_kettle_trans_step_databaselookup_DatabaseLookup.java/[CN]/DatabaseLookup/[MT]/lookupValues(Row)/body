{
  Row lu;
  Row add;
  boolean cache_now=false;
  if (first) {
    first=false;
    if (meta.isCached()) {
      if (meta.getCacheSize() > 0) {
        data.look=new Hashtable((int)(meta.getCacheSize() * 1.5));
      }
 else {
        data.look=new Hashtable();
      }
    }
    data.db.setLookup(meta.getSchemaName(),meta.getTablename(),meta.getTableKeyField(),meta.getKeyCondition(),meta.getReturnValueField(),meta.getReturnValueNewName(),meta.getOrderByClause(),meta.isFailingOnMultipleResults());
    if (log.isDetailed())     logDetailed(Messages.getString("DatabaseLookup.Log.CheckingRow") + row.toString());
    data.keynrs=new int[meta.getStreamKeyField1().length];
    data.keynrs2=new int[meta.getStreamKeyField1().length];
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getStreamKeyField1()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("DatabaseLookup.ERROR0001.FieldRequired1.Exception") + meta.getStreamKeyField1()[i] + Messages.getString("DatabaseLookup.ERROR0001.FieldRequired2.Exception"));
      }
      data.keynrs2[i]=row.searchValueIndex(meta.getStreamKeyField2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("DatabaseLookup.ERROR0001.FieldRequired3.Exception") + meta.getStreamKeyField2()[i] + Messages.getString("DatabaseLookup.ERROR0001.FieldRequired4.Exception"));
      }
      if (log.isDebug())       logDebug(Messages.getString("DatabaseLookup.Log.FieldHasIndex1") + meta.getStreamKeyField1()[i] + Messages.getString("DatabaseLookup.Log.FieldHasIndex2")+ data.keynrs[i]);
    }
    data.nullif=new Value[meta.getReturnValueField().length];
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      data.nullif[i]=new Value(meta.getReturnValueNewName()[i],meta.getReturnValueDefaultType()[i]);
      if (!Const.isEmpty(meta.getReturnValueDefault()[i])) {
        data.nullif[i].setValue(meta.getReturnValueDefault()[i]);
        data.nullif[i].setType(meta.getReturnValueDefaultType()[i]);
      }
 else {
        data.nullif[i].setType(meta.getReturnValueDefaultType()[i]);
        data.nullif[i].setNull();
      }
    }
    data.keytypes=new int[meta.getTableKeyField().length];
    String schemaTable=meta.getDatabaseMeta().getQuotedSchemaTableCombination(meta.getSchemaName(),meta.getTablename());
    Row fields=data.db.getTableFields(schemaTable);
    if (fields != null) {
      for (int i=0; i < meta.getTableKeyField().length; i++) {
        Value key=fields.searchValue(meta.getTableKeyField()[i]);
        if (key != null) {
          data.keytypes[i]=key.getType();
        }
 else {
          throw new KettleStepException(Messages.getString("DatabaseLookup.ERROR0001.FieldRequired5.Exception") + meta.getTableKeyField()[i] + Messages.getString("DatabaseLookup.ERROR0001.FieldRequired6.Exception"));
        }
      }
    }
 else {
      throw new KettleStepException(Messages.getString("DatabaseLookup.ERROR0002.UnableToDetermineFieldsOfTable") + schemaTable + "]");
    }
  }
  lu=new Row();
  for (int i=0; i < meta.getStreamKeyField1().length; i++) {
    if (data.keynrs[i] >= 0) {
      Value value=row.getValue(data.keynrs[i]);
      Value clonedValue=value.Clone();
      if (clonedValue.getType() != data.keytypes[i])       clonedValue.setType(data.keytypes[i]);
      lu.addValue(clonedValue);
    }
    if (data.keynrs2[i] >= 0) {
      Value value=row.getValue(data.keynrs2[i]);
      Value clonedValue=value.Clone();
      if (clonedValue.getType() != data.keytypes[i])       clonedValue.setType(data.keytypes[i]);
      lu.addValue(clonedValue);
    }
  }
  if (meta.isCached()) {
    TimedRow timedRow=(TimedRow)data.look.get(lu);
    if (timedRow == null) {
      add=null;
    }
 else {
      add=timedRow.getRow();
    }
  }
 else   add=null;
  if (add == null) {
    if (log.isRowLevel())     logRowlevel(Messages.getString("DatabaseLookup.Log.AddedValuesToLookupRow1") + meta.getStreamKeyField1().length + Messages.getString("DatabaseLookup.Log.AddedValuesToLookupRow2")+ lu);
    data.db.setValuesLookup(lu);
    add=data.db.getLookup(meta.isFailingOnMultipleResults());
    cache_now=true;
  }
  if (add == null) {
    if (meta.isEatingRowOnLookupFailure()) {
      return false;
    }
    if (getStepMeta().isDoingErrorHandling()) {
      putError(row,1L,"No lookup found",null,"DBL001");
      row.setIgnore();
      return false;
    }
    if (log.isRowLevel())     logRowlevel(Messages.getString("DatabaseLookup.Log.NoResultsFoundAfterLookup"));
    add=new Row();
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      if (data.nullif[i] != null) {
        add.addValue(new Value(data.nullif[i]));
      }
 else {
        Value v=new Value(meta.getReturnValueNewName()[i],meta.getReturnValueDefaultType()[i]);
        v.setNull();
        add.addValue(v);
      }
    }
  }
 else {
    if (log.isRowLevel())     logRowlevel(Messages.getString("DatabaseLookup.Log.FoundResultsAfterLookup") + add);
    int types[]=meta.getReturnValueDefaultType();
    for (int i=0; i < types.length; i++) {
      Value value=add.getValue(i);
      if (value != null && types[i] > 0 && types[i] != value.getType()) {
        value.setType(types[i]);
      }
    }
  }
  if (meta.isCached() && cache_now) {
    data.look.put(lu,new TimedRow(add));
    if (meta.getCacheSize() > 0 && data.look.size() > meta.getCacheSize()) {
      long last_date=-1L;
      Enumeration elem=data.look.elements();
      TimedRow smallest=null;
      while (elem.hasMoreElements()) {
        TimedRow r=(TimedRow)elem.nextElement();
        long time=r.getLogtime();
        if (last_date < 0 || time < last_date) {
          last_date=time;
          smallest=r;
        }
      }
      if (smallest != null)       data.look.remove(smallest);
    }
  }
  for (int i=0; i < add.size(); i++) {
    row.addValue(add.getValue(i));
  }
  return true;
}
