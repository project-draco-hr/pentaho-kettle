{
  Row lu;
  Row add;
  boolean cache_now=false;
  debug="Start of lookupValues()";
  if (first) {
    first=false;
    debug="first row: start";
    if (meta.isCached()) {
      debug="first row: cache allocate";
      if (meta.getCacheSize() > 0) {
        data.look=new Hashtable((int)(meta.getCacheSize() * 1.5));
      }
 else {
        data.look=new Hashtable();
      }
    }
    debug="first row: set lookup statement";
    data.db.setLookup(meta.getTablename(),meta.getTableKeyField(),meta.getKeyCondition(),meta.getReturnValueField(),meta.getReturnValueNewName(),meta.getOrderByClause(),meta.isFailingOnMultipleResults());
    logDetailed("Checking row: " + row.toString());
    data.keynrs=new int[meta.getStreamKeyField1().length];
    data.keynrs2=new int[meta.getStreamKeyField1().length];
    debug="first row: get key fieldnrs";
    for (int i=0; i < meta.getStreamKeyField1().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getStreamKeyField1()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException("Field [" + meta.getStreamKeyField1()[i] + "] is required and couldn't be found!");
      }
      data.keynrs2[i]=row.searchValueIndex(meta.getStreamKeyField2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException("Field [" + meta.getStreamKeyField2()[i] + "] is required and couldn't be found!");
      }
      logDebug("Field [" + meta.getStreamKeyField1()[i] + "] has nr. "+ data.keynrs[i]);
    }
    data.nullif=new Value[meta.getReturnValueField().length];
    debug="first row: get value fieldnrs";
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      data.nullif[i]=new Value(meta.getReturnValueNewName()[i],meta.getReturnValueDefaultType()[i]);
      if (meta.getReturnValueDefault()[i] != null && meta.getReturnValueDefault()[i].length() > 0) {
        data.nullif[i].setValue(meta.getReturnValueDefault()[i]);
        data.nullif[i].setType(meta.getReturnValueDefaultType()[i]);
      }
 else {
        data.nullif[i].setNull();
      }
    }
    data.keytypes=new int[meta.getTableKeyField().length];
    Row fields=data.db.getTableFields(meta.getTablename());
    if (fields != null) {
      for (int i=0; i < meta.getTableKeyField().length; i++) {
        Value key=fields.searchValue(meta.getTableKeyField()[i]);
        if (key != null) {
          data.keytypes[i]=key.getType();
        }
 else {
          throw new KettleStepException("Field [" + meta.getTableKeyField()[i] + "] couldn't be found in the table!");
        }
      }
    }
 else {
      throw new KettleStepException("Unable to determine the fields of table [" + meta.getTablename() + "]");
    }
  }
  lu=new Row();
  debug="Adding values to lookup row";
  for (int i=0; i < meta.getStreamKeyField1().length; i++) {
    if (data.keynrs[i] >= 0) {
      Value value=row.getValue(data.keynrs[i]);
      if (value.getType() != data.keytypes[i])       value.setType(data.keytypes[i]);
      lu.addValue(value);
    }
    if (data.keynrs2[i] >= 0) {
      Value value=row.getValue(data.keynrs2[i]);
      if (value.getType() != data.keytypes[i])       value.setType(data.keytypes[i]);
      lu.addValue(value);
    }
  }
  if (meta.isCached())   add=(Row)data.look.get(lu);
 else   add=null;
  if (add == null) {
    logRowlevel("Added " + meta.getStreamKeyField1().length + " values to lookup row: "+ lu);
    debug="setValuesLookup()";
    data.db.setValuesLookup(lu);
    debug="getLookup()";
    add=data.db.getLookup(meta.isFailingOnMultipleResults());
    cache_now=true;
  }
  debug="add null values to result";
  if (add == null) {
    if (meta.isEatingRowOnLookupFailure()) {
      return false;
    }
    logRowlevel("No result found after database lookup! (add defaults)");
    add=new Row();
    for (int i=0; i < meta.getReturnValueField().length; i++) {
      if (data.nullif[i] != null) {
        add.addValue(new Value(data.nullif[i]));
      }
 else {
        Value v=new Value(meta.getReturnValueNewName()[i],meta.getReturnValueDefaultType()[i]);
        v.setNull();
        add.addValue(v);
      }
    }
  }
 else {
    logRowlevel("Found result after database lookup: " + add);
  }
  debug="Store result in cache";
  if (meta.isCached() && cache_now) {
    add.setLogdate();
    data.look.put(lu,add);
    if (meta.getCacheSize() > 0 && data.look.size() > meta.getCacheSize()) {
      long last_date=-1L;
      Enumeration elem=data.look.elements();
      Row smallest=null;
      while (elem.hasMoreElements()) {
        Row r=(Row)elem.nextElement();
        long time=r.getLogtime();
        if (last_date < 0 || time < last_date) {
          last_date=time;
          smallest=r;
        }
      }
      if (smallest != null)       data.look.remove(smallest);
    }
  }
  debug="Add values to resulting row...";
  for (int i=0; i < add.size(); i++) {
    row.addValue(add.getValue(i));
  }
  debug="end of lookupValues()";
  return true;
}
