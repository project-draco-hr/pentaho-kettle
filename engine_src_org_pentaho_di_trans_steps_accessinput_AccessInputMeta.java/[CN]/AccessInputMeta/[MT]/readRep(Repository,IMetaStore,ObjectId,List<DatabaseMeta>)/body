{
  try {
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    TableName=rep.getStepAttributeString(id_step,"table_name");
    includeTablename=rep.getStepAttributeBoolean(id_step,"tablename");
    dynamicFilenameField=rep.getStepAttributeString(id_step,"filename_Field");
    tablenameField=rep.getStepAttributeString(id_step,"tablename_field");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    String addresult=rep.getStepAttributeString(id_step,"isaddresult");
    if (Utils.isEmpty(addresult)) {
      isaddresult=true;
    }
 else {
      isaddresult=rep.getStepAttributeBoolean(id_step,"isaddresult");
    }
    filefield=rep.getStepAttributeBoolean(id_step,"filefield");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    resetRowNumber=rep.getStepAttributeBoolean(id_step,"reset_rownumber");
    rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i])) {
        fileRequired[i]=RequiredFilesCode[0];
      }
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i])) {
        includeSubFolders[i]=RequiredFilesCode[0];
      }
    }
    for (int i=0; i < nrFields; i++) {
      AccessInputField field=new AccessInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setColumn(rep.getStepAttributeString(id_step,i,"field_attribut"));
      field.setType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(AccessInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
    shortFileFieldName=rep.getStepAttributeString(id_step,"shortFileFieldName");
    pathFieldName=rep.getStepAttributeString(id_step,"pathFieldName");
    hiddenFieldName=rep.getStepAttributeString(id_step,"hiddenFieldName");
    lastModificationTimeFieldName=rep.getStepAttributeString(id_step,"lastModificationTimeFieldName");
    uriNameFieldName=rep.getStepAttributeString(id_step,"uriNameFieldName");
    rootUriNameFieldName=rep.getStepAttributeString(id_step,"rootUriNameFieldName");
    extensionFieldName=rep.getStepAttributeString(id_step,"extensionFieldName");
    sizeFieldName=rep.getStepAttributeString(id_step,"sizeFieldName");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"AccessInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
