{
  try {
    includeFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include"));
    filenameField=XMLHandler.getTagValue(stepnode,"include_field");
    includeTablename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"tablename"));
    tablenameField=XMLHandler.getTagValue(stepnode,"tablename_field");
    includeRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    String addresult=XMLHandler.getTagValue(stepnode,"isaddresult");
    if (Const.isEmpty(addresult)) {
      isaddresult=true;
    }
 else {
      isaddresult="Y".equalsIgnoreCase(addresult);
    }
    filefield="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"filefield"));
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    TableName=XMLHandler.getTagValue(stepnode,"table_name");
    dynamicFilenameField=XMLHandler.getTagValue(stepnode,"filename_Field");
    resetRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"resetrownumber"));
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrFiles=XMLHandler.countNodes(filenode,"name");
    int nrFields=XMLHandler.countNodes(fields,"field");
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      Node excludefilemasknode=XMLHandler.getSubNodeByNr(filenode,"exclude_filemask",i);
      Node fileRequirednode=XMLHandler.getSubNodeByNr(filenode,"file_required",i);
      Node includeSubFoldersnode=XMLHandler.getSubNodeByNr(filenode,"include_subfolders",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
      excludeFileMask[i]=XMLHandler.getNodeValue(excludefilemasknode);
      fileRequired[i]=XMLHandler.getNodeValue(fileRequirednode);
      includeSubFolders[i]=XMLHandler.getNodeValue(includeSubFoldersnode);
    }
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      inputFields[i]=new AccessInputField();
      inputFields[i].setName(XMLHandler.getTagValue(fnode,"name"));
      inputFields[i].setColumn(XMLHandler.getTagValue(fnode,"attribut"));
      inputFields[i].setType(ValueMeta.getType(XMLHandler.getTagValue(fnode,"type")));
      inputFields[i].setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      inputFields[i].setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      String srepeat=XMLHandler.getTagValue(fnode,"repeat");
      inputFields[i].setTrimType(getTrimTypeByCode(XMLHandler.getTagValue(fnode,"trim_type")));
      if (srepeat != null) {
        inputFields[i].setRepeated(YES.equalsIgnoreCase(srepeat));
      }
 else {
        inputFields[i].setRepeated(false);
      }
      inputFields[i].setFormat(XMLHandler.getTagValue(fnode,"format"));
      inputFields[i].setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      inputFields[i].setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      inputFields[i].setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
    }
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0L);
    shortFileFieldName=XMLHandler.getTagValue(stepnode,"shortFileFieldName");
    pathFieldName=XMLHandler.getTagValue(stepnode,"pathFieldName");
    hiddenFieldName=XMLHandler.getTagValue(stepnode,"hiddenFieldName");
    lastModificationTimeFieldName=XMLHandler.getTagValue(stepnode,"lastModificationTimeFieldName");
    uriNameFieldName=XMLHandler.getTagValue(stepnode,"uriNameFieldName");
    rootUriNameFieldName=XMLHandler.getTagValue(stepnode,"rootUriNameFieldName");
    extensionFieldName=XMLHandler.getTagValue(stepnode,"extensionFieldName");
    sizeFieldName=XMLHandler.getTagValue(stepnode,"sizeFieldName");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
