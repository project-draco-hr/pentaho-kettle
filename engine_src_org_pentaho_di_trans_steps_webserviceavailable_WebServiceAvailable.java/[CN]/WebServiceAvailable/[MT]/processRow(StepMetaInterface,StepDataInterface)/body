{
  meta=(WebServiceAvailableMeta)smi;
  data=(WebServiceAvailableData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    data.NrPrevFields=data.previousRowMeta.size();
    data.outputRowMeta=data.previousRowMeta;
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (Const.isEmpty(meta.getURLField())) {
      logError(BaseMessages.getString(PKG,"WebServiceAvailable.Error.FilenameFieldMissing"));
      throw new KettleException(BaseMessages.getString(PKG,"WebServiceAvailable.Error.FilenameFieldMissing"));
    }
    data.indexOfURL=data.previousRowMeta.indexOfValue(meta.getURLField());
    if (data.indexOfURL < 0) {
      logError(BaseMessages.getString(PKG,"WebServiceAvailable.Exception.CouldnotFindField") + "[" + meta.getURLField()+ "]");
      throw new KettleException(BaseMessages.getString(PKG,"WebServiceAvailable.Exception.CouldnotFindField",meta.getURLField()));
    }
  }
  try {
    String url=data.previousRowMeta.getString(r,data.indexOfURL);
    if (Const.isEmpty(url))     throw new KettleException(BaseMessages.getString(PKG,"WebServiceAvailable.Error.URLEmpty"));
    if (isDetailed())     logDetailed(BaseMessages.getString(PKG,"WebServiceAvailable.Log.CheckingURL",url));
    boolean WebServiceAvailable=false;
    InputStream in=null;
    try {
      URLConnection conn=new URL(url).openConnection();
      conn.setConnectTimeout(data.connectTimeOut);
      conn.setReadTimeout(data.readTimeOut);
      in=conn.getInputStream();
      WebServiceAvailable=true;
    }
 catch (    Exception e) {
      if (isDebug())       logDebug(BaseMessages.getString(PKG,"WebServiceAvailable.Error.ServiceNotReached",url,e.toString()));
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        Exception e) {
        }
        ;
      }
    }
    putRow(data.outputRowMeta,RowDataUtil.addValueData(r,data.NrPrevFields,WebServiceAvailable));
    if (isRowLevel())     logRowlevel(BaseMessages.getString(PKG,"FileExists.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
  }
 catch (  Exception e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"WebServiceAvailable.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,meta.getResultFieldName(),"WebServiceAvailable001");
    }
  }
  return true;
}
