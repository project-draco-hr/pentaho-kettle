{
  ValueMetaAndData result;
  result=new ValueMetaAndData(new ValueMetaString("ValueStringName"),"testValue1");
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_STRING,result.getValueMeta().getType());
  assertEquals("ValueStringName",result.getValueMeta().getName());
  assertEquals("testValue1",result.getValueData());
  result=new ValueMetaAndData("StringName","testValue2");
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_STRING,result.getValueMeta().getType());
  assertEquals("StringName",result.getValueMeta().getName());
  assertEquals("testValue2",result.getValueData());
  result=new ValueMetaAndData("NumberName",Double.valueOf("123.45"));
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_NUMBER,result.getValueMeta().getType());
  assertEquals("NumberName",result.getValueMeta().getName());
  assertEquals(Double.valueOf("123.45"),result.getValueData());
  result=new ValueMetaAndData("IntegerName",Long.valueOf(234));
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_INTEGER,result.getValueMeta().getType());
  assertEquals("IntegerName",result.getValueMeta().getName());
  assertEquals(Long.valueOf(234),result.getValueData());
  Date testDate=Calendar.getInstance().getTime();
  result=new ValueMetaAndData("DateName",testDate);
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_DATE,result.getValueMeta().getType());
  assertEquals("DateName",result.getValueMeta().getName());
  assertEquals(testDate,result.getValueData());
  result=new ValueMetaAndData("BigNumberName",new BigDecimal("123456789.987654321"));
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_BIGNUMBER,result.getValueMeta().getType());
  assertEquals("BigNumberName",result.getValueMeta().getName());
  assertEquals(new BigDecimal("123456789.987654321"),result.getValueData());
  result=new ValueMetaAndData("BooleanName",Boolean.TRUE);
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_BOOLEAN,result.getValueMeta().getType());
  assertEquals("BooleanName",result.getValueMeta().getName());
  assertEquals(Boolean.TRUE,result.getValueData());
  byte[] testBytes=new byte[50];
  new Random().nextBytes(testBytes);
  result=new ValueMetaAndData("BinaryName",testBytes);
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_BINARY,result.getValueMeta().getType());
  assertEquals("BinaryName",result.getValueMeta().getName());
  assertArrayEquals(testBytes,(byte[])result.getValueData());
  result=new ValueMetaAndData("SerializableName",new StringBuilder("serializable test"));
  assertNotNull(result);
  assertEquals(ValueMetaInterface.TYPE_SERIALIZABLE,result.getValueMeta().getType());
  assertEquals("SerializableName",result.getValueMeta().getName());
  assertTrue(result.getValueData() instanceof StringBuilder);
  assertEquals("serializable test",result.getValueData().toString());
}
