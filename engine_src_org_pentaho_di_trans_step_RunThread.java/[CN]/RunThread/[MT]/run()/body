{
  try {
    step.setRunning(true);
    step.getLogChannel().snap(Metrics.METRIC_STEP_EXECUTION_START);
    if (log.isDetailed()) {
      log.logDetailed(BaseMessages.getString("System.Log.StartingToRun"));
    }
    while (step.processRow(meta,data)) {
      if (step.isStopped()) {
        break;
      }
    }
  }
 catch (  Throwable t) {
    try {
      if (t instanceof OutOfMemoryError) {
        log.logError("UnexpectedError: ",t);
      }
 else {
        t.printStackTrace();
        log.logError(BaseMessages.getString("System.Log.UnexpectedError"),t);
      }
      String logChannelId=log.getLogChannelId();
      LoggingObjectInterface loggingObject=LoggingRegistry.getInstance().getLoggingObject(logChannelId);
      String parentLogChannelId=loggingObject.getParent().getLogChannelId();
      List<String> logChannelChildren=LoggingRegistry.getInstance().getLogChannelChildren(parentLogChannelId);
      int childIndex=Const.indexOfString(log.getLogChannelId(),logChannelChildren);
      System.out.println("child index = " + childIndex + ", logging object : "+ loggingObject.toString()+ " parent="+ parentLogChannelId);
      KettleLogStore.getAppender().getBuffer("2bcc6b3f-c660-4a8b-8b17-89e8cbd5b29b",false);
    }
 catch (    OutOfMemoryError e) {
      e.printStackTrace();
    }
 finally {
      step.setErrors(1);
      step.stopAll();
    }
  }
 finally {
    step.dispose(meta,data);
    step.getLogChannel().snap(Metrics.METRIC_STEP_EXECUTION_STOP);
    try {
      long li=step.getLinesInput();
      long lo=step.getLinesOutput();
      long lr=step.getLinesRead();
      long lw=step.getLinesWritten();
      long lu=step.getLinesUpdated();
      long lj=step.getLinesRejected();
      long e=step.getErrors();
      if (li > 0 || lo > 0 || lr > 0 || lw > 0 || lu > 0 || lj > 0 || e > 0) {
        log.logBasic(BaseMessages.getString(PKG,"BaseStep.Log.SummaryInfo",String.valueOf(li),String.valueOf(lo),String.valueOf(lr),String.valueOf(lw),String.valueOf(lu),String.valueOf(e + lj)));
      }
 else {
        log.logDetailed(BaseMessages.getString(PKG,"BaseStep.Log.SummaryInfo",String.valueOf(li),String.valueOf(lo),String.valueOf(lr),String.valueOf(lw),String.valueOf(lu),String.valueOf(e + lj)));
      }
    }
 catch (    Throwable t) {
      log.logError("UnexpectedError: " + Const.getStackTracker(t));
    }
 finally {
      step.markStop();
    }
  }
}
