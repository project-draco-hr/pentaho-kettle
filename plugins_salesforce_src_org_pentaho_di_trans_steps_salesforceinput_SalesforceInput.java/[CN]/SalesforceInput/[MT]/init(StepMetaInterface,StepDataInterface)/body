{
  meta=(SalesforceInputMeta)smi;
  data=(SalesforceInputData)sdi;
  if (super.init(smi,sdi)) {
    data.nrfields=meta.getInputFields().length;
    if (data.nrfields == 0) {
      log.logError(BaseMessages.getString(PKG,"SalesforceInputDialog.FieldsMissing.DialogMessage"));
      return false;
    }
    String soSQL=environmentSubstitute(meta.getQuery());
    try {
      if (meta.isSpecifyQuery()) {
        if (Utils.isEmpty(soSQL)) {
          log.logError(BaseMessages.getString(PKG,"SalesforceInputDialog.QueryMissing.DialogMessage"));
          return false;
        }
      }
 else {
        if (meta.getRecordsFilter() != SalesforceConnectionUtils.RECORDS_FILTER_ALL) {
          String realFromDateString=environmentSubstitute(meta.getReadFrom());
          if (Utils.isEmpty(realFromDateString)) {
            log.logError(BaseMessages.getString(PKG,"SalesforceInputDialog.FromDateMissing.DialogMessage"));
            return false;
          }
          String realToDateString=environmentSubstitute(meta.getReadTo());
          if (Utils.isEmpty(realToDateString)) {
            log.logError(BaseMessages.getString(PKG,"SalesforceInputDialog.ToDateMissing.DialogMessage"));
            return false;
          }
          try {
            SimpleDateFormat dateFormat=new SimpleDateFormat(SalesforceInputMeta.DATE_TIME_FORMAT);
            data.startCal=new GregorianCalendar();
            data.startCal.setTime(dateFormat.parse(realFromDateString));
            data.endCal=new GregorianCalendar();
            data.endCal.setTime(dateFormat.parse(realToDateString));
            dateFormat=null;
          }
 catch (          Exception e) {
            log.logError(BaseMessages.getString(PKG,"SalesforceInput.ErrorParsingDate"),e);
            return false;
          }
        }
      }
      data.limit=Const.toLong(environmentSubstitute(meta.getRowLimit()),0);
      data.connection.setQueryAll(meta.isQueryAll());
      if (meta.isSpecifyQuery()) {
        data.connection.setSQL(soSQL.replace("\n\r"," ").replace("\n"," "));
      }
 else {
        if (meta.getRecordsFilter() != SalesforceConnectionUtils.RECORDS_FILTER_ALL) {
          data.connection.setCalendar(meta.getRecordsFilter(),data.startCal,data.endCal);
        }
        if (meta.getRecordsFilter() == SalesforceConnectionUtils.RECORDS_FILTER_UPDATED) {
          data.connection.setFieldsList(BuiltSOQl());
        }
 else {
          data.connection.setSQL(BuiltSOQl());
        }
      }
      data.connection.connect();
      return true;
    }
 catch (    KettleException ke) {
      logError(BaseMessages.getString(PKG,"SalesforceInput.Log.ErrorOccurredDuringStepInitialize") + ke.getMessage());
      return false;
    }
  }
  return false;
}
