{
  try {
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    rowLimit=(int)rep.getStepAttributeInteger(id_step,"limit");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrAttributes=rep.countNrStepAttributes(id_step,"def_element");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    int nrPositions=rep.countNrStepAttributes(id_step,"input_position");
    allocate(nrFiles,nrFields,nrPositions);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
    }
    for (int i=0; i < nrAttributes; i++) {
      definitionElement.set(i,rep.getStepAttributeString(id_step,i,"def_element"));
      definitionAttribute.set(i,rep.getStepAttributeString(id_step,i,"def_attribute"));
    }
    for (int i=0; i < nrFields; i++) {
      XMLInputSaxField field=new XMLInputSaxField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(XMLInputSaxField.getTrimType(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      String fieldPositionCode=rep.getStepAttributeString(id_step,i,"field_position_code");
      if (fieldPositionCode != null) {
        field.setFieldPosition(fieldPositionCode);
      }
      inputFields[i]=field;
    }
    for (int i=0; i < nrPositions; i++) {
      String encoded=rep.getStepAttributeString(id_step,i,"input_position");
      inputPosition[i]=new XMLInputSaxFieldPosition(encoded);
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
