{
  String retval="";
  if (field == null) {
    return "";
  }
  if (valueMeta == null || valueMeta.isNull(valueData)) {
    String defaultNullValue=field.getNullString();
    return Const.isEmpty(defaultNullValue) ? "" : defaultNullValue;
  }
  if (valueMeta.isNumeric()) {
    if (!Const.isEmpty(field.getFormat())) {
      data.df.applyPattern(field.getFormat());
    }
 else {
      data.df.applyPattern(data.defaultDecimalFormat.toPattern());
    }
    if (!Const.isEmpty(field.getDecimalSymbol())) {
      data.dfs.setDecimalSeparator(field.getDecimalSymbol().charAt(0));
    }
 else {
      data.dfs.setDecimalSeparator(data.defaultDecimalFormatSymbols.getDecimalSeparator());
    }
    if (!Const.isEmpty(field.getGroupingSymbol())) {
      data.dfs.setGroupingSeparator(field.getGroupingSymbol().charAt(0));
    }
 else {
      data.dfs.setGroupingSeparator(data.defaultDecimalFormatSymbols.getGroupingSeparator());
    }
    if (!Const.isEmpty(field.getCurrencySymbol())) {
      data.dfs.setCurrencySymbol(field.getCurrencySymbol());
    }
 else {
      data.dfs.setCurrencySymbol(data.defaultDecimalFormatSymbols.getCurrencySymbol());
    }
    data.df.setDecimalFormatSymbols(data.dfs);
    if (valueMeta.isBigNumber()) {
      retval=data.df.format(valueMeta.getBigNumber(valueData));
    }
 else     if (valueMeta.isNumber()) {
      retval=data.df.format(valueMeta.getNumber(valueData));
    }
 else {
      retval=data.df.format(valueMeta.getInteger(valueData));
    }
  }
 else   if (valueMeta.isDate()) {
    if (field != null && !Const.isEmpty(field.getFormat()) && valueMeta.getDate(valueData) != null) {
      if (!Const.isEmpty(field.getFormat())) {
        data.daf.applyPattern(field.getFormat());
      }
 else {
        data.daf.applyPattern(data.defaultDateFormat.toLocalizedPattern());
      }
      data.daf.setDateFormatSymbols(data.dafs);
      retval=data.daf.format(valueMeta.getDate(valueData));
    }
 else {
      if (valueMeta.isNull(valueData)) {
        if (field != null && !Const.isEmpty(field.getNullString())) {
          retval=field.getNullString();
        }
      }
 else {
        retval=valueMeta.getString(valueData);
      }
    }
  }
 else   if (valueMeta.isString()) {
    retval=valueMeta.getString(valueData);
  }
 else   if (valueMeta.isBinary()) {
    if (valueMeta.isNull(valueData)) {
      if (!Const.isEmpty(field.getNullString())) {
        retval=field.getNullString();
      }
 else {
        retval=Const.NULL_BINARY;
      }
    }
 else {
      try {
        retval=new String(valueMeta.getBinary(valueData),"UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        retval=Const.NULL_BINARY;
      }
    }
  }
 else {
    retval=valueMeta.getString(valueData);
  }
  return retval;
}
