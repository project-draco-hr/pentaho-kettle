{
  try {
    String lim;
    includeFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include"));
    filenameField=XMLHandler.getTagValue(stepnode,"include_field");
    includeRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node attributes=XMLHandler.getSubNode(stepnode,"def_attributes");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    Node positions=XMLHandler.getSubNode(stepnode,"positions");
    int nrFiles=XMLHandler.countNodes(filenode,"name");
    int nrAttributes=XMLHandler.countNodes(attributes,"def_element");
    int nrFields=XMLHandler.countNodes(fields,"field");
    int nrPositions=XMLHandler.countNodes(positions,"position");
    allocate(nrFiles,nrFields,nrPositions);
    for (int i=0; i < nrFiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
    }
    this.clearDefinition();
    for (int i=0; i < nrAttributes; i++) {
      Node elementnode=XMLHandler.getSubNodeByNr(attributes,"def_element",i);
      Node attributenode=XMLHandler.getSubNodeByNr(attributes,"def_attribute",i);
      String a=XMLHandler.getNodeValue(elementnode);
      String b=XMLHandler.getNodeValue(attributenode);
      this.setDefiningAttribute(a,b);
    }
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      XMLInputSaxField field=new XMLInputSaxField(fnode);
      inputFields[i]=field;
    }
    for (int i=0; i < nrPositions; i++) {
      Node positionnode=XMLHandler.getSubNodeByNr(positions,"position",i);
      String encoded=XMLHandler.getNodeValue(positionnode);
      inputPosition[i]=new XMLInputSaxFieldPosition(encoded);
    }
    lim=XMLHandler.getTagValue(stepnode,"limit");
    rowLimit=Const.toLong(lim,0L);
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
