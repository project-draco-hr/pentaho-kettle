{
  try {
    rep.saveJobEntryAttribute(id_job,getObjectId(),"file_name",filename);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"work_directory",workDirectory);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"arg_from_previous",argFromPrevious);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"exec_per_row",execPerRow);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"set_logfile",setLogfile);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"set_append_logfile",setAppendLogfile);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"add_date",addDate);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"add_time",addTime);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"logfile",logfile);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"logext",logext);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"loglevel",logFileLevel.getCode());
    rep.saveJobEntryAttribute(id_job,getObjectId(),"insertScript",insertScript);
    rep.saveJobEntryAttribute(id_job,getObjectId(),"script",script);
    if (arguments != null) {
      for (int i=0; i < arguments.length; i++) {
        rep.saveJobEntryAttribute(id_job,getObjectId(),i,"argument",arguments[i]);
      }
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save job entry of type 'shell' to the repository",dbe);
  }
}
