{
  try {
    LDIF InputLDIF=new LDIF(KettleVFS.getFilename(file));
    for (LDIFRecord recordLDIF=InputLDIF.nextRecord(); recordLDIF != null; recordLDIF=InputLDIF.nextRecord()) {
      LDIFContent contentLDIF=recordLDIF.getContent();
      if (((meta.getRowLimit() > 0 && data.rownr < meta.getRowLimit()) || meta.getRowLimit() == 0) && (contentLDIF.getType() == LDIFContent.ATTRIBUTE_CONTENT)) {
        Row row=buildEmptyRow();
        LDIFAttributeContent attrContentLDIF=(LDIFAttributeContent)contentLDIF;
        LDAPAttribute[] attributes_LDIF=attrContentLDIF.getAttributes();
        for (int i=0; i < meta.getInputFields().length; i++) {
          LDIFInputField ldifInputField=meta.getInputFields()[i];
          String AttributValue=ldifInputField.getRealAttribut();
          Value v=row.getValue(i);
          v.setValue(GetValue(attributes_LDIF,AttributValue));
          if (ldifInputField.getTrimType() == ldifInputField.TYPE_TRIM_LEFT)           v.ltrim();
 else           if (ldifInputField.getTrimType() == ldifInputField.TYPE_TRIM_RIGHT)           v.rtrim();
 else           if (ldifInputField.getTrimType() == ldifInputField.TYPE_TRIM_BOTH)           v.trim();
switch (ldifInputField.getType()) {
case Value.VALUE_TYPE_STRING:
            break;
case Value.VALUE_TYPE_NUMBER:
          if (ldifInputField.getFormat() != null && ldifInputField.getFormat().length() > 0) {
            if (ldifInputField.getDecimalSymbol() != null && ldifInputField.getDecimalSymbol().length() > 0) {
              if (ldifInputField.getGroupSymbol() != null && ldifInputField.getGroupSymbol().length() > 0) {
                if (ldifInputField.getCurrencySymbol() != null && ldifInputField.getCurrencySymbol().length() > 0) {
                  v.str2num(ldifInputField.getFormat(),ldifInputField.getDecimalSymbol(),ldifInputField.getGroupSymbol(),ldifInputField.getCurrencySymbol());
                }
 else {
                  v.str2num(ldifInputField.getFormat(),ldifInputField.getDecimalSymbol(),ldifInputField.getGroupSymbol());
                }
              }
 else {
                v.str2num(ldifInputField.getFormat(),ldifInputField.getDecimalSymbol());
              }
            }
 else {
              v.str2num(ldifInputField.getFormat());
            }
          }
 else {
            v.str2num();
          }
        v.setLength(ldifInputField.getLength(),ldifInputField.getPrecision());
      break;
case Value.VALUE_TYPE_INTEGER:
    v.setValue(v.getInteger());
  v.setLength(ldifInputField.getLength(),ldifInputField.getPrecision());
break;
case Value.VALUE_TYPE_BIGNUMBER:
v.setValue(v.getBigNumber());
v.setLength(ldifInputField.getLength(),ldifInputField.getPrecision());
break;
case Value.VALUE_TYPE_DATE:
if (ldifInputField.getFormat() != null && ldifInputField.getFormat().length() > 0) {
v.str2dat(ldifInputField.getFormat());
}
 else {
v.setValue(v.getDate());
}
break;
case Value.VALUE_TYPE_BOOLEAN:
v.setValue(v.getBoolean());
break;
default :
break;
}
if (meta.getInputFields()[i].isRepeated()) {
if (v.isNull() && data.previousRow != null) {
Value previous=data.previousRow.getValue(i);
v.setValue(previous);
}
}
}
if (meta.includeFilename() && meta.getFilenameField() != null && meta.getFilenameField().length() > 0) {
Value fn=new Value(meta.getFilenameField(),KettleVFS.getFilename(data.file));
row.addValue(fn);
}
if (meta.includeRowNumber() && meta.getRowNumberField() != null && meta.getRowNumberField().length() > 0) {
Value fn=new Value(meta.getRowNumberField(),data.rownr);
row.addValue(fn);
}
data.previousRow=new Row(row);
data.rownr++;
if (log.isRowLevel()) logRowlevel(Messages.getString("LDIFInput.Log.ReadRow",row.toString()));
putRow(row);
}
}
}
 catch (Exception e) {
logError(Messages.getString("LDIFInput.Log.UnableToOpenFile","" + data.filenr,data.file.toString(),e.toString()));
stopAll();
setErrors(1);
}
}
