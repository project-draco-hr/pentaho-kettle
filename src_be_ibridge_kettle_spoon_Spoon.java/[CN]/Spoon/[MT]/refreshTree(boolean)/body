{
  if (shell.isDisposed())   return;
  if (!transMeta.hasChanged() && !complete)   return;
  int idx;
  TreeItem treeItems[];
  if (transMeta.haveConnectionsChanged() || complete) {
    tiConn.setText(STRING_CONNECTIONS);
    treeItems=tiConn.getItems();
    for (int i=0; i < treeItems.length; i++)     treeItems[i].dispose();
    treeItems=tiConn.getItems();
    for (int i=0; i < transMeta.nrDatabases(); i++) {
      DatabaseMeta inf=transMeta.getDatabase(i);
      TreeItem newitem=new TreeItem(tiConn,SWT.NONE);
      newitem.setText(inf.getName());
      newitem.setForeground(GUIResource.getInstance().getColorBlack());
      newitem.setImage(GUIResource.getInstance().getImageConnection());
      if (inf.isShared())       newitem.setFont(GUIResource.getInstance().getFontBold().getFont());
    }
  }
  if (transMeta.haveStepsChanged() || complete) {
    tiStep.setText(STRING_STEPS);
    treeItems=tiStep.getItems();
    if (complete) {
      for (int i=0; i < treeItems.length; i++)       treeItems[i].dispose();
      treeItems=tiStep.getItems();
    }
    log.logDebug(toString(),Messages.getString("Spoon.Log.CheckSteps"));
    for (int i=0; i < treeItems.length; i++) {
      String str=treeItems[i].getText();
      log.logDebug(toString(),"  " + Messages.getString("Spoon.Log.CheckStepTreeItem") + i+ " : ["+ str+ "]");
      StepMeta inf=transMeta.findStep(str);
      if (inf != null)       idx=transMeta.indexOfStep(inf);
 else       idx=-1;
      if (idx < 0 || idx > i) {
        log.logDebug(toString(),"     " + Messages.getString("Spoon.Log.RemoveTreeItem") + "["+ str+ "]");
        treeItems[i].dispose();
      }
    }
    treeItems=tiStep.getItems();
    int j=0;
    for (int i=0; i < transMeta.nrSteps(); i++) {
      StepMeta inf=transMeta.getStep(i);
      String step_name=inf.getName();
      String step_id=inf.getStepID();
      if (step_id == null) {
        System.out.println("Oups!");
      }
      String ti_name="";
      if (j < treeItems.length)       ti_name=treeItems[j].getText();
      if (!step_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiStep,j);
        newitem.setText(inf.getName());
        Image img=(Image)GUIResource.getInstance().getImagesStepsSmall().get(step_id);
        newitem.setImage(img);
        if (inf.isShared())         newitem.setFont(GUIResource.getInstance().getFontBold().getFont());
        j++;
        treeItems=tiStep.getItems();
      }
 else {
        j++;
      }
    }
    for (int i=0; i < treeItems.length; i++) {
      StepMeta inf=transMeta.findStep(treeItems[i].getText());
      Color col=treeItems[i].getForeground();
      Color newcol;
      if (transMeta.isStepUsedInTransHops(inf))       newcol=GUIResource.getInstance().getColorBlack();
 else       newcol=GUIResource.getInstance().getColorGray();
      if (!newcol.equals(col))       treeItems[i].setForeground(newcol);
    }
  }
  if (transMeta.haveHopsChanged() || complete) {
    tiHops.setText(STRING_HOPS);
    treeItems=tiHops.getItems();
    if (complete) {
      for (int i=0; i < treeItems.length; i++)       treeItems[i].dispose();
      treeItems=tiHops.getItems();
    }
    for (int i=0; i < treeItems.length; i++) {
      String str=treeItems[i].getText();
      TransHopMeta inf=transMeta.findTransHop(str);
      if (inf != null)       idx=transMeta.indexOfTransHop(inf);
 else       idx=-1;
      if (idx < 0 || idx > i)       treeItems[i].dispose();
    }
    treeItems=tiHops.getItems();
    int j=0;
    for (int i=0; i < transMeta.nrTransHops(); i++) {
      TransHopMeta inf=transMeta.getTransHop(i);
      String trans_name=inf.toString();
      String ti_name="";
      if (j < treeItems.length)       ti_name=treeItems[j].getText();
      if (!trans_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiHops,j);
        newitem.setText(inf.toString());
        newitem.setForeground(GUIResource.getInstance().getColorBlack());
        newitem.setImage(GUIResource.getInstance().getImageHop());
        j++;
        treeItems=tiHops.getItems();
      }
 else {
        j++;
      }
    }
  }
  if (transMeta.havePartitionSchemasChanged() || complete) {
    tiPart.setText(STRING_PARTITIONS);
    treeItems=tiPart.getItems();
    for (int i=0; i < treeItems.length; i++)     treeItems[i].dispose();
    for (int i=0; i < transMeta.getPartitionSchemas().size(); i++) {
      PartitionSchema schema=(PartitionSchema)transMeta.getPartitionSchemas().get(i);
      TreeItem schemaItem=new TreeItem(tiPart,SWT.NONE);
      schemaItem.setText(schema.toString());
      schemaItem.setForeground(GUIResource.getInstance().getColorBlack());
      schemaItem.setImage(GUIResource.getInstance().getImageConnection());
      if (schema.isShared())       schemaItem.setFont(GUIResource.getInstance().getFontBold().getFont());
    }
  }
  if (transMeta.haveClusterSchemasChanged() || complete) {
    tiClus.setText(STRING_CLUSTERS);
    treeItems=tiClus.getItems();
    for (int i=0; i < treeItems.length; i++)     treeItems[i].dispose();
    for (int i=0; i < transMeta.getClusterSchemas().size(); i++) {
      ClusterSchema schema=(ClusterSchema)transMeta.getClusterSchemas().get(i);
      TreeItem schemaItem=new TreeItem(tiClus,SWT.NONE);
      schemaItem.setText(schema.toString());
      schemaItem.setForeground(GUIResource.getInstance().getColorBlack());
      schemaItem.setImage(GUIResource.getInstance().getImageBol());
      if (schema.isShared())       schemaItem.setFont(GUIResource.getInstance().getFontBold().getFont());
      for (int j=0; j < schema.getSlaveServers().size(); j++) {
        SlaveServer slaveServer=(SlaveServer)schema.getSlaveServers().get(j);
        TreeItem slaveItem=new TreeItem(schemaItem,SWT.NONE);
        slaveItem.setText(slaveServer.toString());
        slaveItem.setForeground(GUIResource.getInstance().getColorBlue());
        slaveItem.setImage(GUIResource.getInstance().getImageBol());
      }
    }
  }
  TreeMemory.setExpandedFromMemory(selectionTree,STRING_SPOON_MAIN_TREE);
  selectionTree.setFocus();
  setShellText();
}
