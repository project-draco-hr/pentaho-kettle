{
  if (!transMeta.hasChanged() && !complete)   return;
  int idx;
  TreeItem ti[];
  if (transMeta.haveConnectionsChanged() || complete) {
    ti=tiConn.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiConn.getItems();
    }
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      DatabaseMeta inf=transMeta.findDatabase(str);
      if (inf != null)       idx=transMeta.indexOfDatabase(inf);
 else       idx=-1;
      if (idx < 0 || idx > i)       ti[i].dispose();
    }
    ti=tiConn.getItems();
    int j=0;
    for (int i=0; i < transMeta.nrDatabases(); i++) {
      DatabaseMeta inf=transMeta.getDatabase(i);
      String con_name=inf.getName();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!con_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiConn,j);
        newitem.setText(inf.getName());
        newitem.setForeground(GUIResource.getInstance().getColorBlack());
        newitem.setImage(GUIResource.getInstance().getImageConnection());
        j++;
        ti=tiConn.getItems();
      }
 else {
        j++;
      }
    }
  }
  if (transMeta.haveStepsChanged() || complete) {
    ti=tiStep.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiStep.getItems();
    }
    log.logDebug(toString(),Messages.getString("Log.CheckSteps"));
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      log.logDebug(toString(),"  " + Messages.getString("Log.CheckStepTreeItem") + i+ " : ["+ str+ "]");
      StepMeta inf=transMeta.findStep(str);
      if (inf != null)       idx=transMeta.indexOfStep(inf);
 else       idx=-1;
      if (idx < 0 || idx > i) {
        log.logDebug(toString(),"     " + Messages.getString("Log.RemoveTreeItem") + "["+ str+ "]");
        ti[i].dispose();
      }
    }
    ti=tiStep.getItems();
    int j=0;
    for (int i=0; i < transMeta.nrSteps(); i++) {
      StepMeta inf=transMeta.getStep(i);
      String step_name=inf.getName();
      String step_desc=inf.getStepID();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!step_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiStep,j);
        newitem.setText(inf.getName());
        Image img=(Image)GUIResource.getInstance().getImagesStepsSmall().get(step_desc);
        newitem.setImage(img);
        j++;
        ti=tiStep.getItems();
      }
 else {
        j++;
      }
    }
    for (int i=0; i < ti.length; i++) {
      StepMeta inf=transMeta.findStep(ti[i].getText());
      Color col=ti[i].getForeground();
      Color newcol;
      if (transMeta.isStepUsedInTransHops(inf))       newcol=GUIResource.getInstance().getColorBlack();
 else       newcol=GUIResource.getInstance().getColorGray();
      if (!newcol.equals(col))       ti[i].setForeground(newcol);
    }
  }
  if (transMeta.haveHopsChanged() || complete) {
    ti=tiHops.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiHops.getItems();
    }
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      TransHopMeta inf=transMeta.findTransHop(str);
      if (inf != null)       idx=transMeta.indexOfTransHop(inf);
 else       idx=-1;
      if (idx < 0 || idx > i)       ti[i].dispose();
    }
    ti=tiHops.getItems();
    int j=0;
    for (int i=0; i < transMeta.nrTransHops(); i++) {
      TransHopMeta inf=transMeta.getTransHop(i);
      String trans_name=inf.toString();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!trans_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiHops,j);
        newitem.setText(inf.toString());
        newitem.setForeground(GUIResource.getInstance().getColorBlack());
        newitem.setImage(GUIResource.getInstance().getImageHop());
        j++;
        ti=tiHops.getItems();
      }
 else {
        j++;
      }
    }
  }
  selectionTree.setFocus();
  setShellText();
}
