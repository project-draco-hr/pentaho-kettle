{
  int idx=msFile.indexOf(miFileSep3);
  int max=msFile.getItemCount();
  for (int i=max - 1; i > idx; i--) {
    MenuItem mi=msFile.getItem(i);
    mi.dispose();
  }
  String lf[]=props.getLastFiles();
  String ld[]=props.getLastDirs();
  boolean lt[]=props.getLastTypes();
  String lr[]=props.getLastRepositories();
  for (int i=0; i < lf.length; i++) {
    MenuItem miFileLast=new MenuItem(msFile,SWT.CASCADE);
    char chr=(char)('1' + i);
    int accel=SWT.CTRL | chr;
    String repository=(lr[i] != null && lr[i].length() > 0) ? ("[" + lr[i] + "] ") : "";
    String filename=RepositoryDirectory.DIRECTORY_SEPARATOR + lf[i];
    if (!lt[i])     filename=lf[i];
    if (!ld[i].equals(RepositoryDirectory.DIRECTORY_SEPARATOR)) {
      filename=ld[i] + filename;
    }
    if (i < 9) {
      miFileLast.setAccelerator(accel);
      miFileLast.setText("&" + chr + "  "+ repository+ filename+ "\tCTRL-"+ chr);
    }
 else {
      miFileLast.setText("   " + repository + filename);
    }
    final String fn=lf[i];
    final String fd=ld[i];
    final boolean ft=lt[i];
    final String fr=lr[i];
    Listener lsFileLast=new Listener(){
      public void handleEvent(      Event e){
        if (showChangedWarning()) {
          boolean noRepository=false;
          if (ft && (rep == null || !rep.getRepositoryInfo().getName().equalsIgnoreCase(fr))) {
            int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION};
            RepositoriesDialog rd=new RepositoriesDialog(disp,SWT.NONE,perms,Messages.getString("Spoon.Application.Name"));
            rd.setRepositoryName(fr);
            if (rd.open()) {
              if (rep != null)               rep.disconnect();
              rep=new Repository(log,rd.getRepository(),rd.getUser());
              try {
                rep.connect(APP_NAME);
              }
 catch (              KettleException ke) {
                rep=null;
                new ErrorDialog(shell,Messages.getString("Spoon.Dialog.UnableConnectRepository.Title"),Messages.getString("Spoon.Dialog.UnableConnectRepository.Message"),ke);
              }
            }
 else {
              noRepository=true;
            }
          }
          if (ft) {
            if (!noRepository && rep != null && rep.getRepositoryInfo().getName().equalsIgnoreCase(fr)) {
              RepositoryDirectory fdRepdir=rep.getDirectoryTree().findDirectory(fd);
              TransLoadProgressDialog tlpd=new TransLoadProgressDialog(shell,rep,fn,fdRepdir);
              TransMeta transInfo=tlpd.open();
              if (transInfo != null) {
                transMeta=transInfo;
                transMeta.clearChanged();
                props.addLastFile(Props.TYPE_PROPERTIES_SPOON,fn,fdRepdir.getPath(),true,rep.getName());
              }
            }
 else {
              clear();
              MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
              mb.setMessage(Messages.getString("Spoon.Dialog.UnableLoadTransformation.Message"));
              mb.setText(Messages.getString("Spoon.Dialog.UnableLoadTransformation.Title"));
              mb.open();
            }
          }
 else {
            try {
              transMeta=new TransMeta(fn);
              transMeta.clearChanged();
              transMeta.setFilename(fn);
              props.addLastFile(Props.TYPE_PROPERTIES_SPOON,fn,null,false,null);
            }
 catch (            KettleException ke) {
              clear();
              new ErrorDialog(shell,Messages.getString("Spoon.Dialog.LoadTransformationError.Title"),Messages.getString("Spoon.Dialog.LoadTransformationError.Message"),ke);
            }
          }
          setShellText();
          addMenuLast();
          refreshTree();
          refreshGraph();
          refreshHistory();
        }
      }
    }
;
    miFileLast.addListener(SWT.Selection,lsFileLast);
  }
}
