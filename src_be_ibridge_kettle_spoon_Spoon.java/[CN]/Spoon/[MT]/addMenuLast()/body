{
  int idx=msFile.indexOf(miFileSep3);
  int max=msFile.getItemCount();
  for (int i=max - 1; i > idx; i--) {
    MenuItem mi=msFile.getItem(i);
    mi.dispose();
  }
  List lastUsedFiles=props.getLastUsedFiles();
  for (int i=0; i < lastUsedFiles.size(); i++) {
    final LastUsedFile lastUsedFile=(LastUsedFile)lastUsedFiles.get(i);
    MenuItem miFileLast=new MenuItem(msFile,SWT.CASCADE);
    char chr=(char)('1' + i);
    int accel=SWT.CTRL | chr;
    if (i < 9) {
      miFileLast.setAccelerator(accel);
      miFileLast.setText("&" + chr + "  "+ lastUsedFile+ "\tCTRL-"+ chr);
    }
 else {
      miFileLast.setText("   " + lastUsedFile);
    }
    Listener lsFileLast=new Listener(){
      public void handleEvent(      Event e){
        boolean noRepository=false;
        if (lastUsedFile.isSourceRepository() && (rep == null || !rep.getRepositoryInfo().getName().equalsIgnoreCase(lastUsedFile.getRepositoryName()))) {
          int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION};
          RepositoriesDialog rd=new RepositoriesDialog(disp,SWT.NONE,perms,Messages.getString("Spoon.Application.Name"));
          rd.setRepositoryName(lastUsedFile.getRepositoryName());
          if (rd.open()) {
            if (rep != null)             rep.disconnect();
            rep=new Repository(log,rd.getRepository(),rd.getUser());
            try {
              rep.connect(APP_NAME);
            }
 catch (            KettleException ke) {
              rep=null;
              new ErrorDialog(shell,Messages.getString("Spoon.Dialog.UnableConnectRepository.Title"),Messages.getString("Spoon.Dialog.UnableConnectRepository.Message"),ke);
            }
          }
 else {
            noRepository=true;
          }
        }
        if (lastUsedFile.isSourceRepository()) {
          if (!noRepository && rep != null && rep.getRepositoryInfo().getName().equalsIgnoreCase(lastUsedFile.getRepositoryName())) {
            RepositoryDirectory fdRepdir=rep.getDirectoryTree().findDirectory(lastUsedFile.getDirectory());
            TransLoadProgressDialog tlpd=new TransLoadProgressDialog(shell,rep,lastUsedFile.getFilename(),fdRepdir);
            TransMeta transMeta=tlpd.open();
            if (transMeta != null) {
              transMeta.clearChanged();
              addSpoonGraph(transMeta);
              props.addLastFile(Props.TYPE_PROPERTIES_SPOON,lastUsedFile.getFilename(),fdRepdir.getPath(),true,rep.getName());
            }
          }
 else {
            MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
            mb.setMessage(Messages.getString("Spoon.Dialog.UnableLoadTransformation.Message"));
            mb.setText(Messages.getString("Spoon.Dialog.UnableLoadTransformation.Title"));
            mb.open();
          }
        }
 else {
          try {
            TransMeta transMeta=new TransMeta(lastUsedFile.getFilename());
            transMeta.clearChanged();
            transMeta.setFilename(lastUsedFile.getFilename());
            addSpoonGraph(transMeta);
            props.addLastFile(Props.TYPE_PROPERTIES_SPOON,lastUsedFile.getFilename(),null,false,null);
          }
 catch (          KettleException ke) {
            new ErrorDialog(shell,Messages.getString("Spoon.Dialog.LoadTransformationError.Title"),Messages.getString("Spoon.Dialog.LoadTransformationError.Message"),ke);
          }
        }
        addMenuLast();
        refreshTree();
        refreshGraph();
        refreshHistory();
      }
    }
;
    miFileLast.addListener(SWT.Selection,lsFileLast);
  }
}
