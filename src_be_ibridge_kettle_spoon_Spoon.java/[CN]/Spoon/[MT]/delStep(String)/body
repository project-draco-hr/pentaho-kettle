{
  log.logDebug(toString(),Messages.getString("Log.DeleteStep") + name);
  int i, pos=0;
  StepMeta stepMeta=null, look=null;
  for (i=0; i < transMeta.nrSteps() && stepMeta == null; i++) {
    look=transMeta.getStep(i);
    if (look.getName().equalsIgnoreCase(name)) {
      stepMeta=look;
      pos=i;
    }
  }
  if (stepMeta != null) {
    for (i=transMeta.nrTransHops() - 1; i >= 0; i--) {
      TransHopMeta hi=transMeta.getTransHop(i);
      if (hi.getFromStep().equals(stepMeta) || hi.getToStep().equals(stepMeta)) {
        addUndoDelete(new TransHopMeta[]{hi},new int[]{transMeta.indexOfTransHop(hi)},true);
        transMeta.removeTransHop(i);
        refreshTree();
      }
    }
    transMeta.removeStep(pos);
    addUndoDelete(new StepMeta[]{stepMeta},new int[]{pos});
    refreshTree();
    refreshGraph();
  }
 else {
    log.logDebug(toString(),Messages.getString("Log.UnableFindStepToDelete",name));
  }
}
