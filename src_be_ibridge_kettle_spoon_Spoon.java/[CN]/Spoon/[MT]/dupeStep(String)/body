{
  log.logDebug(toString(),Messages.getString("Log.DuplicateStep") + name);
  StepMeta stMeta=null, stepMeta=null, look=null;
  for (int i=0; i < transMeta.nrSteps() && stepMeta == null; i++) {
    look=transMeta.getStep(i);
    if (look.getName().equalsIgnoreCase(name)) {
      stepMeta=look;
    }
  }
  if (stepMeta != null) {
    stMeta=(StepMeta)stepMeta.clone();
    if (stMeta != null) {
      String newname=transMeta.getAlternativeStepname(stepMeta.getName());
      int nr=2;
      while (transMeta.findStep(newname) != null) {
        newname=stepMeta.getName() + " (copy " + nr+ ")";
        nr++;
      }
      stMeta.setName(newname);
      stMeta.setSelected(false);
      Point loc=stMeta.getLocation();
      stMeta.setLocation(loc.x + 20,loc.y + 20);
      transMeta.addStep(stMeta);
      addUndoNew(new StepMeta[]{(StepMeta)stMeta.clone()},new int[]{transMeta.indexOfStep(stMeta)});
      refreshTree();
      refreshGraph();
    }
  }
}
