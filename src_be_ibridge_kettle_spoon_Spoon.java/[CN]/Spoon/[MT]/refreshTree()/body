{
  if (shell.isDisposed())   return;
  GUIResource guiResource=GUIResource.getInstance();
  Collection collection=transformationMap.values();
  TransMeta[] transMetas=(TransMeta[])collection.toArray(new TransMeta[collection.size()]);
  tiTrans.removeAll();
  for (int t=0; t < transMetas.length; t++) {
    TransMeta transMeta=transMetas[t];
    TreeItem tiTransName=new TreeItem(tiTrans,SWT.NONE);
    String name=makeGraphTabName(transMeta);
    if (Const.isEmpty(name))     name=STRING_TRANS_NO_NAME;
    tiTransName.setText(name);
    tiTransName.setImage(guiResource.getImageBol());
    TreeItem tiDbTitle=new TreeItem(tiTransName,SWT.NONE);
    tiDbTitle.setText(STRING_CONNECTIONS);
    tiDbTitle.setImage(guiResource.getImageConnection());
    for (int i=0; i < transMeta.nrDatabases(); i++) {
      DatabaseMeta databaseMeta=transMeta.getDatabase(i);
      TreeItem tiDb=new TreeItem(tiDbTitle,SWT.NONE);
      tiDb.setText(databaseMeta.getName());
      if (databaseMeta.isShared())       tiDb.setFont(guiResource.getFontBold());
      tiDb.setImage(guiResource.getImageConnection());
    }
    TreeItem tiStepTitle=new TreeItem(tiTransName,SWT.NONE);
    tiStepTitle.setText(STRING_STEPS);
    tiStepTitle.setImage(guiResource.getImageBol());
    for (int i=0; i < transMeta.nrSteps(); i++) {
      StepMeta stepMeta=transMeta.getStep(i);
      TreeItem tiStep=new TreeItem(tiStepTitle,SWT.NONE);
      tiStep.setText(stepMeta.getName());
      if (stepMeta.isShared())       tiStep.setFont(guiResource.getFontBold());
      tiStep.setImage(guiResource.getImageBol());
    }
    TreeItem tiHopTitle=new TreeItem(tiTransName,SWT.NONE);
    tiHopTitle.setText(STRING_HOPS);
    tiHopTitle.setImage(guiResource.getImageHop());
    for (int i=0; i < transMeta.nrTransHops(); i++) {
      TransHopMeta hopMeta=transMeta.getTransHop(i);
      TreeItem tiHop=new TreeItem(tiHopTitle,SWT.NONE);
      tiHop.setText(hopMeta.toString());
      tiHop.setImage(guiResource.getImageHop());
    }
    TreeItem tiPartitionTitle=new TreeItem(tiTransName,SWT.NONE);
    tiPartitionTitle.setText(STRING_PARTITIONS);
    tiPartitionTitle.setImage(guiResource.getImageConnection());
    for (int i=0; i < transMeta.getPartitionSchemas().size(); i++) {
      PartitionSchema partitionSchema=(PartitionSchema)transMeta.getPartitionSchemas().get(i);
      TreeItem tiPartition=new TreeItem(tiPartitionTitle,SWT.NONE);
      tiPartition.setText(partitionSchema.getName());
      tiPartition.setImage(guiResource.getImageBol());
      if (partitionSchema.isShared())       tiPartition.setFont(guiResource.getFontBold());
    }
    TreeItem tiSlaveTitle=new TreeItem(tiTransName,SWT.NONE);
    tiSlaveTitle.setText(STRING_SLAVES);
    tiSlaveTitle.setImage(guiResource.getImageBol());
    for (int i=0; i < transMeta.getSlaveServers().size(); i++) {
      SlaveServer slaveServer=(SlaveServer)transMeta.getSlaveServers().get(i);
      TreeItem tiSlave=new TreeItem(tiSlaveTitle,SWT.NONE);
      tiSlave.setText(slaveServer.getName());
      tiSlave.setImage(guiResource.getImageBol());
      if (slaveServer.isShared())       tiSlave.setFont(guiResource.getFontBold());
    }
    TreeItem tiClusterTitle=new TreeItem(tiTransName,SWT.NONE);
    tiClusterTitle.setText(STRING_CLUSTERS);
    tiClusterTitle.setImage(guiResource.getImageBol());
    for (int i=0; i < transMeta.getClusterSchemas().size(); i++) {
      ClusterSchema clusterSchema=(ClusterSchema)transMeta.getClusterSchemas().get(i);
      TreeItem tiCluster=new TreeItem(tiClusterTitle,SWT.NONE);
      tiCluster.setText(clusterSchema.toString());
      tiCluster.setImage(guiResource.getImageBol());
      if (clusterSchema.isShared())       tiCluster.setFont(guiResource.getFontBold());
    }
  }
  TreeMemory.setExpandedFromMemory(selectionTree,STRING_SPOON_MAIN_TREE);
  selectionTree.setFocus();
  refreshPluginHistory();
  setShellText();
}
