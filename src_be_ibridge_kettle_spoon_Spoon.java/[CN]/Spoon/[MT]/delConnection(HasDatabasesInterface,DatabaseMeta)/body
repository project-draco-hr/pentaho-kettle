{
  int pos=hasDatabasesInterface.indexOfDatabase(db);
  boolean worked=false;
  if (rep != null) {
    if (!rep.getUserInfo().isReadonly()) {
      try {
        long id_database=rep.getDatabaseID(db.getName());
        rep.delDatabase(id_database);
        worked=true;
      }
 catch (      KettleDatabaseException dbe) {
        new ErrorDialog(shell,Messages.getString("Spoon.Dialog.ErrorDeletingConnection.Title"),Messages.getString("Spoon.Dialog.ErrorDeletingConnection.Message",db.getName()),dbe);
      }
    }
 else {
      new ErrorDialog(shell,Messages.getString("Spoon.Dialog.ErrorDeletingConnection.Title"),Messages.getString("Spoon.Dialog.ErrorDeletingConnection.Message",db.getName()),new KettleException(Messages.getString("Spoon.Dialog.Exception.ReadOnlyUser")));
    }
  }
  if (rep == null || worked) {
    addUndoDelete((UndoInterface)hasDatabasesInterface,new DatabaseMeta[]{(DatabaseMeta)db.clone()},new int[]{pos});
    hasDatabasesInterface.removeDatabase(pos);
  }
  refreshTree();
  setShellText();
}
