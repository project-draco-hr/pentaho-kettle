{
  tBar=new ToolBar(shell,SWT.HORIZONTAL | SWT.FLAT);
  final ToolItem tiFileNew=new ToolItem(tBar,SWT.PUSH);
  final Image imFileNew=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "new.png"));
  tiFileNew.setImage(imFileNew);
  tiFileNew.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      newFile();
    }
  }
);
  tiFileNew.setToolTipText(Messages.getString("Spoon.Tooltip.NewTranformation"));
  final ToolItem tiFileOpen=new ToolItem(tBar,SWT.PUSH);
  final Image imFileOpen=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "open.png"));
  tiFileOpen.setImage(imFileOpen);
  tiFileOpen.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openFile(false);
    }
  }
);
  tiFileOpen.setToolTipText(Messages.getString("Spoon.Tooltip.OpenTranformation"));
  tiFileSave=new ToolItem(tBar,SWT.PUSH);
  final Image imFileSave=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "save.png"));
  tiFileSave.setImage(imFileSave);
  tiFileSave.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      saveTransFile(getActiveTransformation());
    }
  }
);
  tiFileSave.setToolTipText(Messages.getString("Spoon.Tooltip.SaveCurrentTranformation"));
  tiFileSaveAs=new ToolItem(tBar,SWT.PUSH);
  final Image imFileSaveAs=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "saveas.png"));
  tiFileSaveAs.setImage(imFileSaveAs);
  tiFileSaveAs.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      saveTransFileAs(getActiveTransformation());
    }
  }
);
  tiFileSaveAs.setToolTipText(Messages.getString("Spoon.Tooltip.SaveDifferentNameTranformation"));
  new ToolItem(tBar,SWT.SEPARATOR);
  tiFilePrint=new ToolItem(tBar,SWT.PUSH);
  final Image imFilePrint=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "print.png"));
  tiFilePrint.setImage(imFilePrint);
  tiFilePrint.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      printFile();
    }
  }
);
  tiFilePrint.setToolTipText(Messages.getString("Spoon.Tooltip.Print"));
  new ToolItem(tBar,SWT.SEPARATOR);
  tiFileRun=new ToolItem(tBar,SWT.PUSH);
  final Image imFileRun=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "run.png"));
  tiFileRun.setImage(imFileRun);
  tiFileRun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeFile(true,false,false,false,null);
    }
  }
);
  tiFileRun.setToolTipText(Messages.getString("Spoon.Tooltip.RunTranformation"));
  tiFilePreview=new ToolItem(tBar,SWT.PUSH);
  final Image imFilePreview=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "preview.png"));
  tiFilePreview.setImage(imFilePreview);
  tiFilePreview.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeFile(true,false,false,true,null);
    }
  }
);
  tiFilePreview.setToolTipText(Messages.getString("Spoon.Tooltip.PreviewTranformation"));
  tiFileReplay=new ToolItem(tBar,SWT.PUSH);
  final Image imFileReplay=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "replay.png"));
  tiFileReplay.setImage(imFileReplay);
  tiFileReplay.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeFile(true,false,false,true,null);
    }
  }
);
  tiFileReplay.setToolTipText("Replay this transformation");
  new ToolItem(tBar,SWT.SEPARATOR);
  tiFileCheck=new ToolItem(tBar,SWT.PUSH);
  final Image imFileCheck=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "check.png"));
  tiFileCheck.setImage(imFileCheck);
  tiFileCheck.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkTrans(getActiveTransformation());
    }
  }
);
  tiFileCheck.setToolTipText(Messages.getString("Spoon.Tooltip.VerifyTranformation"));
  new ToolItem(tBar,SWT.SEPARATOR);
  tiImpact=new ToolItem(tBar,SWT.PUSH);
  final Image imImpact=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "impact.png"));
  ImageData idImpact=imImpact.getImageData();
  int impactPixel=idImpact.palette.getPixel(new RGB(255,255,255));
  idImpact.transparentPixel=impactPixel;
  Image imImpact2=new Image(disp,idImpact);
  tiImpact.setImage(imImpact2);
  tiImpact.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      analyseImpact(getActiveTransformation());
    }
  }
);
  tiImpact.setToolTipText(Messages.getString("Spoon.Tooltip.AnalyzeTranformation"));
  new ToolItem(tBar,SWT.SEPARATOR);
  tiSQL=new ToolItem(tBar,SWT.PUSH);
  final Image imSQL=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "SQLbutton.png"));
  ImageData idSQL=imSQL.getImageData();
  int sqlPixel=idSQL.palette.getPixel(new RGB(255,255,255));
  idSQL.transparentPixel=sqlPixel;
  Image imSQL2=new Image(disp,idSQL);
  tiSQL.setImage(imSQL2);
  tiSQL.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getSQL();
    }
  }
);
  tiSQL.setToolTipText(Messages.getString("Spoon.Tooltip.GenerateSQLForTranformation"));
  tBar.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      imFileNew.dispose();
      imFileOpen.dispose();
      imFileSave.dispose();
      imFileSaveAs.dispose();
    }
  }
);
  tBar.addKeyListener(defKeys);
  tBar.addKeyListener(modKeys);
  tBar.pack();
}
