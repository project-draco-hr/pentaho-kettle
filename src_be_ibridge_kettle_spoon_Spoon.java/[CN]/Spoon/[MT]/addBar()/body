{
  tBar=new ToolBar(shell,SWT.HORIZONTAL | SWT.FLAT);
  final ToolItem tiFileNew=new ToolItem(tBar,SWT.PUSH);
  final Image imFileNew=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "new.png"));
  tiFileNew.setImage(imFileNew);
  tiFileNew.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      newFile();
    }
  }
);
  tiFileNew.setToolTipText("New transformation, clear all settings");
  final ToolItem tiFileOpen=new ToolItem(tBar,SWT.PUSH);
  final Image imFileOpen=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "open.png"));
  tiFileOpen.setImage(imFileOpen);
  tiFileOpen.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openFile(false);
    }
  }
);
  tiFileOpen.setToolTipText("Open tranformation");
  final ToolItem tiFileSave=new ToolItem(tBar,SWT.PUSH);
  final Image imFileSave=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "save.png"));
  tiFileSave.setImage(imFileSave);
  tiFileSave.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      saveFile();
    }
  }
);
  tiFileSave.setToolTipText("Save current transformation");
  final ToolItem tiFileSaveAs=new ToolItem(tBar,SWT.PUSH);
  final Image imFileSaveAs=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "saveas.png"));
  tiFileSaveAs.setImage(imFileSaveAs);
  tiFileSaveAs.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      saveFileAs();
    }
  }
);
  tiFileSaveAs.setToolTipText("Save transformation with different name");
  new ToolItem(tBar,SWT.SEPARATOR);
  final ToolItem tiFilePrint=new ToolItem(tBar,SWT.PUSH);
  final Image imFilePrint=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "print.png"));
  tiFilePrint.setImage(imFilePrint);
  tiFilePrint.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      printFile();
    }
  }
);
  tiFilePrint.setToolTipText("Print");
  new ToolItem(tBar,SWT.SEPARATOR);
  final ToolItem tiFileRun=new ToolItem(tBar,SWT.PUSH);
  final Image imFileRun=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "run.png"));
  tiFileRun.setImage(imFileRun);
  tiFileRun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tabfolder.setSelection(1);
      spoonlog.startstop();
    }
  }
);
  tiFileRun.setToolTipText("Run this transformation");
  final ToolItem tiFilePreview=new ToolItem(tBar,SWT.PUSH);
  final Image imFilePreview=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "preview.png"));
  tiFilePreview.setImage(imFilePreview);
  tiFilePreview.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      spoonlog.preview();
    }
  }
);
  tiFilePreview.setToolTipText("Preview this transformation");
  new ToolItem(tBar,SWT.SEPARATOR);
  final ToolItem tiFileCheck=new ToolItem(tBar,SWT.PUSH);
  final Image imFileCheck=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "check.png"));
  tiFileCheck.setImage(imFileCheck);
  tiFileCheck.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkTrans();
    }
  }
);
  tiFileCheck.setToolTipText("Verify this transformation");
  new ToolItem(tBar,SWT.SEPARATOR);
  final ToolItem tiImpact=new ToolItem(tBar,SWT.PUSH);
  final Image imImpact=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "impact.png"));
  ImageData idImpact=imImpact.getImageData();
  int impactPixel=idImpact.palette.getPixel(new RGB(255,255,255));
  idImpact.transparentPixel=impactPixel;
  Image imImpact2=new Image(disp,idImpact);
  tiImpact.setImage(imImpact2);
  tiImpact.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      analyseImpact();
    }
  }
);
  tiImpact.setToolTipText("Analyze the impact of this transformation on the database(s)");
  new ToolItem(tBar,SWT.SEPARATOR);
  final ToolItem tiSQL=new ToolItem(tBar,SWT.PUSH);
  final Image imSQL=new Image(disp,getClass().getResourceAsStream(Const.IMAGE_DIRECTORY + "SQLbutton.png"));
  ImageData idSQL=imSQL.getImageData();
  int sqlPixel=idSQL.palette.getPixel(new RGB(255,255,255));
  idSQL.transparentPixel=sqlPixel;
  Image imSQL2=new Image(disp,idSQL);
  tiSQL.setImage(imSQL2);
  tiSQL.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getSQL();
    }
  }
);
  tiSQL.setToolTipText("Generate the SQL needed to run this transformation");
  tBar.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      imFileNew.dispose();
      imFileOpen.dispose();
      imFileSave.dispose();
      imFileSaveAs.dispose();
    }
  }
);
  tBar.addKeyListener(defKeys);
  tBar.addKeyListener(modKeys);
  tBar.pack();
}
