{
  if (leftSash != null) {
    leftSash.dispose();
  }
  leftSash=new SashForm(sashform,SWT.VERTICAL);
  selectionTree=new Tree(leftSash,SWT.SINGLE | SWT.BORDER);
  props.setLook(selectionTree);
  selectionTree.setLayout(new FillLayout());
  TreeMemory.addTreeListener(selectionTree);
  tiConn=new TreeItem(selectionTree,SWT.NONE);
  tiConn.setText(STRING_CONNECTIONS);
  tiStep=new TreeItem(selectionTree,SWT.NONE);
  tiStep.setText(STRING_STEPS);
  tiHops=new TreeItem(selectionTree,SWT.NONE);
  tiHops.setText(STRING_HOPS);
  tiBase=new TreeItem(selectionTree,SWT.NONE);
  tiBase.setText(STRING_BASE);
  tiPlug=new TreeItem(selectionTree,SWT.NONE);
  tiPlug.setText(STRING_PLUGIN);
  StepLoader steploader=StepLoader.getInstance();
  StepPlugin basesteps[]=steploader.getStepsWithType(StepPlugin.TYPE_NATIVE);
  String basecat[]=steploader.getCategories(StepPlugin.TYPE_NATIVE);
  TreeItem tiBaseCat[]=new TreeItem[basecat.length];
  for (int i=0; i < basecat.length; i++) {
    tiBaseCat[i]=new TreeItem(tiBase,SWT.NONE);
    tiBaseCat[i].setText(basecat[i]);
    for (int j=0; j < basesteps.length; j++) {
      if (basesteps[j].getCategory().equalsIgnoreCase(basecat[i])) {
        TreeItem ti=new TreeItem(tiBaseCat[i],0);
        ti.setText(basesteps[j].getDescription());
      }
    }
  }
  StepPlugin plugins[]=steploader.getStepsWithType(StepPlugin.TYPE_PLUGIN);
  String plugcat[]=steploader.getCategories(StepPlugin.TYPE_PLUGIN);
  TreeItem tiPlugCat[]=new TreeItem[plugcat.length];
  for (int i=0; i < plugcat.length; i++) {
    tiPlugCat[i]=new TreeItem(tiPlug,SWT.NONE);
    tiPlugCat[i].setText(plugcat[i]);
    for (int j=0; j < plugins.length; j++) {
      if (plugins[j].getCategory().equalsIgnoreCase(plugcat[i])) {
        TreeItem ti=new TreeItem(tiPlugCat[i],0);
        ti.setText(plugins[j].getDescription());
      }
    }
  }
  tiConn.setExpanded(true);
  tiStep.setExpanded(false);
  tiBase.setExpanded(true);
  tiPlug.setExpanded(true);
  addToolTipsToTree(selectionTree);
  lsNew=new Listener(){
    public void handleEvent(    Event e){
      newSelected();
    }
  }
;
  lsEdit=new Listener(){
    public void handleEvent(    Event e){
      editSelected();
    }
  }
;
  lsDupe=new Listener(){
    public void handleEvent(    Event e){
      dupeSelected();
    }
  }
;
  lsCopy=new Listener(){
    public void handleEvent(    Event e){
      clipSelected();
    }
  }
;
  lsDel=new Listener(){
    public void handleEvent(    Event e){
      delSelected();
    }
  }
;
  lsSQL=new Listener(){
    public void handleEvent(    Event e){
      sqlSelected();
    }
  }
;
  lsCache=new Listener(){
    public void handleEvent(    Event e){
      clearDBCache();
    }
  }
;
  lsExpl=new Listener(){
    public void handleEvent(    Event e){
      exploreDB();
    }
  }
;
  lsEditDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSelected();
    }
  }
;
  lsEditSel=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setMenu(e);
    }
  }
;
  selectionTree.addSelectionListener(lsEditDef);
  selectionTree.addSelectionListener(lsEditSel);
  selectionTree.addKeyListener(defKeys);
  selectionTree.addKeyListener(modKeys);
  addDragSourceToTree(selectionTree);
  pluginHistoryTree=new Tree(leftSash,SWT.SINGLE);
  addToolTipsToTree(pluginHistoryTree);
  addDragSourceToTree(pluginHistoryTree);
  leftSash.setWeights(new int[]{70,30});
}
