{
  if (leftSash != null) {
    leftSash.dispose();
  }
  leftSash=new SashForm(sashform,SWT.VERTICAL);
  selectionTree=new Tree(leftSash,SWT.SINGLE | SWT.BORDER);
  props.setLook(selectionTree);
  selectionTree.setLayout(new FillLayout());
  TreeMemory.addTreeListener(selectionTree,STRING_SPOON_MAIN_TREE);
  tiTrans=new TreeItem(selectionTree,SWT.NONE);
  tiTrans.setText(STRING_TRANSFORMATIONS);
  tiJobs=new TreeItem(selectionTree,SWT.NONE);
  tiJobs.setText(STRING_JOBS);
  tiBlocks=new TreeItem(selectionTree,SWT.NONE);
  tiBlocks.setText(STRING_BUILDING_BLOCKS);
  tiTransBase=new TreeItem(tiBlocks,SWT.NONE);
  tiTransBase.setText(STRING_TRANS_BASE);
  tiJobBase=new TreeItem(tiBlocks,SWT.NONE);
  tiJobBase.setText(STRING_JOB_BASE);
  StepLoader steploader=StepLoader.getInstance();
  StepPlugin basesteps[]=steploader.getStepsWithType(StepPlugin.TYPE_ALL);
  String basecat[]=steploader.getCategories(StepPlugin.TYPE_ALL);
  TreeItem tiBaseCat[]=new TreeItem[basecat.length];
  for (int i=0; i < basecat.length; i++) {
    tiBaseCat[i]=new TreeItem(tiTransBase,SWT.NONE);
    tiBaseCat[i].setText(basecat[i]);
    for (int j=0; j < basesteps.length; j++) {
      if (basesteps[j].getCategory().equalsIgnoreCase(basecat[i])) {
        TreeItem ti=new TreeItem(tiBaseCat[i],0);
        ti.setText(basesteps[j].getDescription());
        if (basesteps[j].isPlugin())         ti.setFont(GUIResource.getInstance().getFontBold());
      }
    }
  }
  tiTransBase.setExpanded(true);
  JobEntryLoader jobEntryLoader=JobEntryLoader.getInstance();
  JobPlugin baseEntries[]=jobEntryLoader.getJobEntriesWithType(JobPlugin.TYPE_NATIVE);
  for (int i=0; i < baseEntries.length; i++) {
    TreeItem tiBaseItem=new TreeItem(tiJobBase,SWT.NONE);
    tiBaseItem.setText(baseEntries[i].getDescription());
    if (baseEntries[i].isPlugin())     tiBaseItem.setFont(GUIResource.getInstance().getFontBold());
    Image image=(Image)GUIResource.getInstance().getImagesJobentriesSmall().get(baseEntries[i].getID());
    tiBaseItem.setImage(image);
  }
  tiJobBase.setExpanded(true);
  addToolTipsToTree(selectionTree);
  selectionTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setMenu();
    }
  }
);
  selectionTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      showSelection();
    }
  }
);
  selectionTree.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSelected();
    }
  }
);
  selectionTree.addKeyListener(defKeys);
  selectionTree.addKeyListener(modKeys);
  addDragSourceToTree(selectionTree);
  pluginHistoryTree=new Tree(leftSash,SWT.SINGLE);
  addToolTipsToTree(pluginHistoryTree);
  addDragSourceToTree(pluginHistoryTree);
  leftSash.setWeights(new int[]{70,30});
  setTreeImages();
}
