{
  if (tabComp != null) {
    tabComp.dispose();
  }
  tabComp=new Composite(sashform,SWT.BORDER);
  props.setLook(tabComp);
  tabComp.setLayout(new GridLayout());
  tabfolder=new CTabFolder(tabComp,SWT.BORDER);
  tabfolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  props.setLook(tabfolder,Props.WIDGET_STYLE_TAB);
  tabfolder.setSimple(false);
  tabfolder.setUnselectedImageVisible(true);
  tabfolder.setUnselectedCloseVisible(true);
  tabfolder.addKeyListener(defKeys);
  tabfolder.addKeyListener(modKeys);
  sashform.addKeyListener(defKeys);
  sashform.addKeyListener(modKeys);
  int weights[]=props.getSashWeights();
  sashform.setWeights(weights);
  sashform.setVisible(true);
  tabfolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ArrayList collection=new ArrayList();
      collection.addAll(tabMap.values());
      for (Iterator iter=collection.iterator(); iter.hasNext(); ) {
        TabMapEntry entry=(TabMapEntry)iter.next();
        if (event.item.equals(entry.getTabItem())) {
          if (event.doit && entry.getObject() instanceof SpoonGraph) {
            if (getCoreObjectsState() != STATE_CORE_OBJECTS_SPOON) {
              refreshCoreObjectsTree();
            }
          }
          if (event.doit && entry.getObject() instanceof ChefGraph) {
            if (getCoreObjectsState() != STATE_CORE_OBJECTS_CHEF) {
              refreshCoreObjectsTree();
            }
          }
        }
      }
    }
  }
);
  tabfolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    public void close(    CTabFolderEvent event){
      ArrayList collection=new ArrayList();
      collection.addAll(tabMap.values());
      for (Iterator iter=collection.iterator(); iter.hasNext(); ) {
        TabMapEntry entry=(TabMapEntry)iter.next();
        if (event.item.equals(entry.getTabItem())) {
          TabItemInterface itemInterface=entry.getObject();
          boolean close=true;
          if (!itemInterface.canBeClosed()) {
            int reply=itemInterface.showChangedWarning();
            if (reply == SWT.YES) {
              close=itemInterface.applyChanges();
            }
 else {
              if (reply == SWT.CANCEL) {
                close=false;
              }
 else {
                close=true;
              }
            }
          }
          event.doit=close;
          if (event.doit && entry.getObject() instanceof SpoonGraph) {
            TransMeta transMeta=(TransMeta)entry.getObject().getManagedObject();
            closeTransformation(transMeta);
            refreshTree();
          }
          if (event.doit && entry.getObject() instanceof ChefGraph) {
            JobMeta jobMeta=(JobMeta)entry.getObject().getManagedObject();
            closeJob(jobMeta);
            refreshTree();
          }
          if (event.doit && entry.getObject() instanceof SpoonBrowser) {
            closeSpoonBrowser();
            refreshTree();
          }
        }
      }
    }
  }
);
  Transfer[] ttypes=new Transfer[]{XMLTransfer.getInstance()};
  DropTarget ddTarget=new DropTarget(tabfolder,DND.DROP_MOVE);
  ddTarget.setTransfer(ttypes);
  ddTarget.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Point p=new Point(event.x,event.y);
      Composite follow=tabfolder;
      while (follow.getParent() != null) {
        follow=follow.getParent();
        org.eclipse.swt.graphics.Point parentLoc=follow.getLocation();
        p.x-=parentLoc.x;
        p.y-=parentLoc.y;
      }
      p.x-=10;
      p.y-=75;
      try {
        DragAndDropContainer container=(DragAndDropContainer)event.data;
switch (container.getType()) {
case DragAndDropContainer.TYPE_BASE_STEP_TYPE:
{
            TransMeta transMeta=new TransMeta();
            addSpoonGraph(transMeta);
            String steptype=container.getData();
            StepMeta stepMeta=newStep(transMeta,steptype,steptype,false,true);
            stepMeta.setLocation(p);
            stepMeta.setDraw(true);
            refreshTree();
          }
        break;
case DragAndDropContainer.TYPE_BASE_JOB_ENTRY:
{
        JobMeta jobMeta=new JobMeta(log);
        addChefGraph(jobMeta);
        String steptype=container.getData();
        JobEntryCopy jobEntry=newChefGraphEntry(jobMeta,steptype,false);
        jobEntry.setLocation(p);
        jobEntry.setDrawn(true);
        refreshGraph();
        refreshTree();
      }
    break;
}
}
 catch (Exception e) {
new ErrorDialog(shell,Messages.getString("SpoonGraph.Dialog.ErrorDroppingObject.Message"),Messages.getString("SpoonGraph.Dialog.ErrorDroppingObject.Title"),e);
}
}
public void dropAccept(DropTargetEvent event){
}
}
);
}
