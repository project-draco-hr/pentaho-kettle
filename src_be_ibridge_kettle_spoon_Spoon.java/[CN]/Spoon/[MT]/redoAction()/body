{
  spoongraph.forceFocus();
  TransAction ta=transMeta.nextUndo();
  if (ta == null)   return;
  setUndoMenu();
switch (ta.getType()) {
case TransAction.TYPE_ACTION_NEW_STEP:
    for (int i=0; i < ta.getCurrent().length; i++) {
      StepMeta stepMeta=(StepMeta)ta.getCurrent()[i];
      int idx=ta.getCurrentIndex()[i];
      transMeta.addStep(idx,stepMeta);
      refreshTree();
      refreshGraph();
    }
  break;
case TransAction.TYPE_ACTION_NEW_CONNECTION:
for (int i=0; i < ta.getCurrent().length; i++) {
  DatabaseMeta ci=(DatabaseMeta)ta.getCurrent()[i];
  int idx=ta.getCurrentIndex()[i];
  transMeta.addDatabase(idx,ci);
  refreshTree();
  refreshGraph();
}
break;
case TransAction.TYPE_ACTION_NEW_NOTE:
for (int i=0; i < ta.getCurrent().length; i++) {
NotePadMeta ni=(NotePadMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.addNote(idx,ni);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_NEW_HOP:
for (int i=0; i < ta.getCurrent().length; i++) {
TransHopMeta hi=(TransHopMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.addTransHop(idx,hi);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_STEP:
for (int i=ta.getCurrent().length - 1; i >= 0; i--) {
int idx=ta.getCurrentIndex()[i];
transMeta.removeStep(idx);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_CONNECTION:
for (int i=ta.getCurrent().length - 1; i >= 0; i--) {
int idx=ta.getCurrentIndex()[i];
transMeta.removeDatabase(idx);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_NOTE:
for (int i=ta.getCurrent().length - 1; i >= 0; i--) {
int idx=ta.getCurrentIndex()[i];
transMeta.removeNote(idx);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_DELETE_HOP:
for (int i=ta.getCurrent().length - 1; i >= 0; i--) {
int idx=ta.getCurrentIndex()[i];
transMeta.removeTransHop(idx);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_STEP:
for (int i=0; i < ta.getCurrent().length; i++) {
StepMeta stepMeta=(StepMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.removeStep(idx);
transMeta.addStep(idx,stepMeta);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_CONNECTION:
for (int i=0; i < ta.getCurrent().length; i++) {
DatabaseMeta ci=(DatabaseMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.removeDatabase(idx);
transMeta.addDatabase(idx,ci);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_NOTE:
for (int i=0; i < ta.getCurrent().length; i++) {
NotePadMeta ni=(NotePadMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.removeNote(idx);
transMeta.addNote(idx,ni);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_CHANGE_HOP:
for (int i=0; i < ta.getCurrent().length; i++) {
TransHopMeta hi=(TransHopMeta)ta.getCurrent()[i];
int idx=ta.getCurrentIndex()[i];
transMeta.removeTransHop(idx);
transMeta.addTransHop(idx,hi);
}
refreshTree();
refreshGraph();
break;
case TransAction.TYPE_ACTION_POSITION_STEP:
for (int i=0; i < ta.getCurrentIndex().length; i++) {
StepMeta stepMeta=transMeta.getStep(ta.getCurrentIndex()[i]);
stepMeta.setLocation(ta.getCurrentLocation()[i]);
}
refreshGraph();
break;
case TransAction.TYPE_ACTION_POSITION_NOTE:
for (int i=0; i < ta.getCurrentIndex().length; i++) {
int idx=ta.getCurrentIndex()[i];
NotePadMeta npi=transMeta.getNote(idx);
Point curr=ta.getCurrentLocation()[i];
npi.setLocation(curr);
}
refreshGraph();
break;
default :
break;
}
if (transMeta.viewNextUndo() != null) {
if (transMeta.viewNextUndo().getNextAlso()) redoAction();
}
}
