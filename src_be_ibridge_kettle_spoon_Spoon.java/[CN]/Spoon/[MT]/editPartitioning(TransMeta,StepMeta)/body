{
  StepPartitioningMeta stepPartitioningMeta=stepMeta.getStepPartitioningMeta();
  if (stepPartitioningMeta == null)   stepPartitioningMeta=new StepPartitioningMeta();
  String[] options=StepPartitioningMeta.methodDescriptions;
  EnterSelectionDialog dialog=new EnterSelectionDialog(shell,options,"Partioning method","Select the partitioning method");
  String methodDescription=dialog.open(stepPartitioningMeta.getMethod());
  if (methodDescription != null) {
    int method=StepPartitioningMeta.getMethod(methodDescription);
    stepPartitioningMeta.setMethod(method);
switch (method) {
case StepPartitioningMeta.PARTITIONING_METHOD_NONE:
      break;
case StepPartitioningMeta.PARTITIONING_METHOD_MIRROR:
case StepPartitioningMeta.PARTITIONING_METHOD_MOD:
    String schemaNames[]=transMeta.getPartitionSchemasNames();
  if (schemaNames.length == 0) {
    MessageBox box=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    box.setText("Create a partition schema");
    box.setMessage("You first need to create one or more partition schemas in the transformation settings dialog before you can select one!");
    box.open();
  }
 else {
    PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
    int idx=-1;
    if (partitionSchema != null) {
      idx=Const.indexOfString(partitionSchema.getName(),schemaNames);
    }
    EnterSelectionDialog askSchema=new EnterSelectionDialog(shell,schemaNames,"Select a partition schema","Select the partition schema to use:");
    String schemaName=askSchema.open(idx);
    if (schemaName != null) {
      idx=Const.indexOfString(schemaName,schemaNames);
      stepPartitioningMeta.setPartitionSchema((PartitionSchema)transMeta.getPartitionSchemas().get(idx));
    }
  }
if (method == StepPartitioningMeta.PARTITIONING_METHOD_MOD) {
  EnterStringDialog stringDialog=new EnterStringDialog(shell,Const.NVL(stepPartitioningMeta.getFieldName(),""),"Fieldname","Enter a field name to partition on");
  String fieldName=stringDialog.open();
  stepPartitioningMeta.setFieldName(fieldName);
}
break;
}
refreshGraph();
}
}
