{
  if (spoonMenu == null) {
    spoonMenu=new Menu(shell,SWT.POP_UP);
  }
 else {
    MenuItem[] items=spoonMenu.getItems();
    for (int i=0; i < items.length; i++)     items[i].dispose();
  }
  TreeSelection[] objects=getTreeObjects(selectionTree);
  if (objects.length != 1)   return;
  TreeSelection object=objects[0];
  final Object selection=object.getSelection();
  final Object parent=object.getParent();
  if (selection instanceof Class) {
    if (selection.equals(TransMeta.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newTransFile();
        }
      }
);
    }
    if (selection.equals(JobMeta.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newJobFile();
        }
      }
);
    }
    if (selection.equals(TransHopMeta.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newHop((TransMeta)parent);
        }
      }
);
      MenuItem miSort=new MenuItem(spoonMenu,SWT.PUSH);
      miSort.setText(Messages.getString("Spoon.Menu.Popup.HOPS.SortHops"));
      miSort.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          ((TransMeta)parent).sortHops();
          refreshTree();
        }
      }
);
    }
    if (selection.equals(DatabaseMeta.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newConnection((HasDatabasesInterface)parent);
        }
      }
);
      MenuItem miWizard=new MenuItem(spoonMenu,SWT.PUSH);
      miWizard.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.NewConnectionWizard"));
      miWizard.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent arg0){
          createDatabaseWizard((HasDatabasesInterface)parent);
        }
      }
);
      MenuItem miCache=new MenuItem(spoonMenu,SWT.PUSH);
      miCache.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.ClearDBCacheComplete"));
      miCache.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          clearDBCache();
        }
      }
);
    }
    if (selection.equals(PartitionSchema.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newDatabasePartitioningSchema((TransMeta)parent);
        }
      }
);
    }
    if (selection.equals(ClusterSchema.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.CLUSTERS.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newClusteringSchema((TransMeta)parent);
        }
      }
);
    }
    if (selection.equals(SlaveServer.class)) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.SLAVE_SERVER.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newSlaveServer((TransMeta)parent);
        }
      }
);
    }
  }
 else {
    if (selection instanceof TransMeta) {
      MenuItem miLog=new MenuItem(spoonMenu,SWT.PUSH);
      miLog.setText(Messages.getString("Spoon.Menu.Popup.BASE.LogWindow"));
      miLog.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          addSpoonLog((TransMeta)selection);
        }
      }
);
      MenuItem miHistory=new MenuItem(spoonMenu,SWT.PUSH);
      miHistory.setText(Messages.getString("Spoon.Menu.Popup.BASE.HistoryWindow"));
      miHistory.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          addSpoonHistory((TransMeta)selection,true);
        }
      }
);
    }
    if (selection instanceof JobMeta) {
      MenuItem miLog=new MenuItem(spoonMenu,SWT.PUSH);
      miLog.setText(Messages.getString("Spoon.Menu.Popup.BASE.LogWindow"));
      miLog.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          addChefLog((JobMeta)selection);
        }
      }
);
      MenuItem miHistory=new MenuItem(spoonMenu,SWT.PUSH);
      miHistory.setText(Messages.getString("Spoon.Menu.Popup.BASE.HistoryWindow"));
      miHistory.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          addChefHistory((JobMeta)selection,true);
        }
      }
);
    }
    if (selection instanceof StepPlugin) {
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.BASE.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newStep(getActiveTransformation());
        }
      }
);
    }
    if (selection instanceof DatabaseMeta) {
      final DatabaseMeta databaseMeta=(DatabaseMeta)selection;
      final HasDatabasesInterface transMeta=(HasDatabasesInterface)parent;
      MenuItem miNew=new MenuItem(spoonMenu,SWT.PUSH);
      miNew.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.New"));
      miNew.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          newConnection(transMeta);
        }
      }
);
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editConnection(transMeta,databaseMeta);
        }
      }
);
      MenuItem miDupe=new MenuItem(spoonMenu,SWT.PUSH);
      miDupe.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.Duplicate"));
      miDupe.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          dupeConnection(transMeta,databaseMeta);
        }
      }
);
      MenuItem miCopy=new MenuItem(spoonMenu,SWT.PUSH);
      miCopy.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.CopyToClipboard"));
      miCopy.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          clipConnection(databaseMeta);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delConnection(transMeta,databaseMeta);
        }
      }
);
      new MenuItem(spoonMenu,SWT.SEPARATOR);
      MenuItem miSQL=new MenuItem(spoonMenu,SWT.PUSH);
      miSQL.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.SQLEditor"));
      miSQL.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          sqlConnection(databaseMeta);
        }
      }
);
      MenuItem miCache=new MenuItem(spoonMenu,SWT.PUSH);
      miCache.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.ClearDBCache") + databaseMeta.getName());
      miCache.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          clearDBCache(databaseMeta);
        }
      }
);
      new MenuItem(spoonMenu,SWT.SEPARATOR);
      MenuItem miShare=new MenuItem(spoonMenu,SWT.PUSH);
      miShare.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.Share"));
      miShare.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          shareObject(databaseMeta);
        }
      }
);
      new MenuItem(spoonMenu,SWT.SEPARATOR);
      MenuItem miExpl=new MenuItem(spoonMenu,SWT.PUSH);
      miExpl.setText(Messages.getString("Spoon.Menu.Popup.CONNECTIONS.Explore"));
      miExpl.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          exploreDB(transMeta,databaseMeta);
        }
      }
);
      if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_SAPR3)       miExpl.setEnabled(false);
    }
    if (selection instanceof StepMeta) {
      final TransMeta transMeta=(TransMeta)parent;
      final StepMeta stepMeta=(StepMeta)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.STEPS.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editStep(transMeta,stepMeta);
        }
      }
);
      MenuItem miDupe=new MenuItem(spoonMenu,SWT.PUSH);
      miDupe.setText(Messages.getString("Spoon.Menu.Popup.STEPS.Duplicate"));
      miDupe.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          dupeStep(transMeta,stepMeta);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.STEPS.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delStep(transMeta,stepMeta);
        }
      }
);
      MenuItem miShare=new MenuItem(spoonMenu,SWT.PUSH);
      miShare.setText(Messages.getString("Spoon.Menu.Popup.STEPS.Share"));
      miShare.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          shareObject(stepMeta);
        }
      }
);
    }
    if (selection instanceof JobEntryCopy) {
      final JobMeta jobMeta=(JobMeta)parent;
      final JobEntryCopy jobEntry=(JobEntryCopy)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.JOBENTRIES.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editJobEntry(jobMeta,jobEntry);
        }
      }
);
      MenuItem miDupe=new MenuItem(spoonMenu,SWT.PUSH);
      miDupe.setText(Messages.getString("Spoon.Menu.Popup.JOBENTRIES.Duplicate"));
      miDupe.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          dupeJobEntry(jobMeta,jobEntry);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.JOBENTRIES.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          deleteJobEntryCopies(jobMeta,jobEntry);
        }
      }
);
    }
    if (selection instanceof TransHopMeta) {
      final TransMeta transMeta=(TransMeta)parent;
      final TransHopMeta transHopMeta=(TransHopMeta)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.HOPS.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editHop(transMeta,transHopMeta);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.HOPS.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delHop(transMeta,transHopMeta);
        }
      }
);
    }
    if (selection instanceof PartitionSchema) {
      final TransMeta transMeta=(TransMeta)parent;
      final PartitionSchema partitionSchema=(PartitionSchema)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.PARTITIONS.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editPartitionSchema(transMeta,partitionSchema);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.PARTITIONS.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delPartitionSchema(transMeta,partitionSchema);
        }
      }
);
      MenuItem miShare=new MenuItem(spoonMenu,SWT.PUSH);
      miShare.setText(Messages.getString("Spoon.Menu.Popup.PARTITIONS.Share"));
      miShare.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          shareObject(partitionSchema);
        }
      }
);
    }
    if (selection instanceof ClusterSchema) {
      final TransMeta transMeta=(TransMeta)parent;
      final ClusterSchema clusterSchema=(ClusterSchema)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.CLUSTERS.Edit"));
      miEdit.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          editClusterSchema(transMeta,clusterSchema);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.CLUSTERS.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delClusterSchema(transMeta,clusterSchema);
        }
      }
);
      MenuItem miShare=new MenuItem(spoonMenu,SWT.PUSH);
      miShare.setText(Messages.getString("Spoon.Menu.Popup.CLUSTERS.Share"));
      miShare.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          shareObject(clusterSchema);
        }
      }
);
      MenuItem miMonitor=new MenuItem(spoonMenu,SWT.PUSH);
      miMonitor.setText(Messages.getString("Spoon.Menu.Popup.CLUSTERS.Monitor"));
      miMonitor.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event e){
          monitorClusterSchema(clusterSchema);
        }
      }
);
    }
    if (selection instanceof SlaveServer) {
      final TransMeta transMeta=(TransMeta)parent;
      final SlaveServer slaveServer=(SlaveServer)selection;
      MenuItem miEdit=new MenuItem(spoonMenu,SWT.PUSH);
      miEdit.setText(Messages.getString("Spoon.Menu.Popup.SLAVE_SERVER.Edit"));
      miEdit.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event e){
          editSlaveServer(slaveServer);
        }
      }
);
      MenuItem miDel=new MenuItem(spoonMenu,SWT.PUSH);
      miDel.setText(Messages.getString("Spoon.Menu.Popup.SLAVE_SERVER.Delete"));
      miDel.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          delSlaveServer(transMeta,slaveServer);
        }
      }
);
      MenuItem miMonitor=new MenuItem(spoonMenu,SWT.PUSH);
      miMonitor.setText(Messages.getString("Spoon.Menu.Popup.SLAVE_SERVER.Monitor"));
      miMonitor.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event e){
          addSpoonSlave(slaveServer);
        }
      }
);
    }
  }
  selectionTree.setMenu(spoonMenu);
}
