{
  Map map=new Hashtable();
  HasDatabasesInterface transMeta=getActiveTransformation();
  if (transMeta != null) {
    for (int i=0; i < transMeta.nrDatabases(); i++) {
      map.put(transMeta.getDatabase(i).getName(),transMeta.getDatabase(i));
    }
  }
  HasDatabasesInterface jobMeta=getActiveJob();
  if (jobMeta != null) {
    for (int i=0; i < jobMeta.nrDatabases(); i++) {
      map.put(jobMeta.getDatabase(i).getName(),jobMeta.getDatabase(i));
    }
  }
  if (rep != null) {
    try {
      List repDBs=rep.getDatabases();
      for (int i=0; i < repDBs.size(); i++) {
        DatabaseMeta databaseMeta=(DatabaseMeta)repDBs.get(i);
        map.put(databaseMeta.getName(),databaseMeta);
      }
    }
 catch (    Exception e) {
      log.logError(toString(),"Unexpected error reading databases from the repository: " + e.toString());
      log.logError(toString(),Const.getStackTracker(e));
    }
  }
  ArrayList databases=new ArrayList();
  databases.addAll(map.values());
  return databases;
}
