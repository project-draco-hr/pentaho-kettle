{
  EnvUtil.environmentInit();
  ArrayList args=new ArrayList();
  for (int i=0; i < a.length; i++)   args.add(a[i]);
  Display display=new Display();
  Splash splash=new Splash(display);
  StringBuffer optionRepname, optionUsername, optionPassword, optionJobname, optionTransname, optionFilename, optionDirname, optionLogfile, optionLoglevel;
  CommandLineOption options[]=new CommandLineOption[]{new CommandLineOption("rep","Repository name",optionRepname=new StringBuffer()),new CommandLineOption("user","Repository username",optionUsername=new StringBuffer()),new CommandLineOption("pass","Repository password",optionPassword=new StringBuffer()),new CommandLineOption("job","The name of the job to launch",optionJobname=new StringBuffer()),new CommandLineOption("trans","The name of the transformation to launch",optionTransname=new StringBuffer()),new CommandLineOption("dir","The directory (don't forget the leading /)",optionDirname=new StringBuffer()),new CommandLineOption("file","The filename (Transformation in XML) to launch",optionFilename=new StringBuffer()),new CommandLineOption("level","The logging level (Basic, Detailed, Debug, Rowlevel, Error, Nothing)",optionLoglevel=new StringBuffer()),new CommandLineOption("logfile","The logging file to write to",optionLogfile=new StringBuffer()),new CommandLineOption("log","The logging file to write to (deprecated)",optionLogfile=new StringBuffer(),false,true)};
  CommandLineOption.parseArguments(args,options);
  String kettleRepname=Const.getEnvironmentVariable("KETTLE_REPOSITORY",null);
  String kettleUsername=Const.getEnvironmentVariable("KETTLE_USER",null);
  String kettlePassword=Const.getEnvironmentVariable("KETTLE_PASSWORD",null);
  if (!Const.isEmpty(kettleRepname))   optionRepname=new StringBuffer(kettleRepname);
  if (!Const.isEmpty(kettleUsername))   optionUsername=new StringBuffer(kettleUsername);
  if (!Const.isEmpty(kettlePassword))   optionPassword=new StringBuffer(kettlePassword);
  String version=Const.JAVA_VERSION;
  if ("1.4".compareToIgnoreCase(version) > 0) {
    System.out.println("The System is running on Java version " + version);
    System.out.println("Unfortunately, it needs version 1.4 or higher to run.");
    return;
  }
  Locale.setDefault(Const.DEFAULT_LOCALE);
  LogWriter log;
  LogWriter.setConsoleAppenderDebug();
  if (Const.isEmpty(optionLogfile)) {
    log=LogWriter.getInstance(Const.SPOON_LOG_FILE,false,LogWriter.LOG_LEVEL_BASIC);
  }
 else {
    log=LogWriter.getInstance(optionLogfile.toString(),true,LogWriter.LOG_LEVEL_BASIC);
  }
  if (log.getRealFilename() != null)   log.logBasic(APP_NAME,Messages.getString("Spoon.Log.LoggingToFile") + log.getRealFilename());
  if (!Const.isEmpty(optionLoglevel)) {
    log.setLogLevel(optionLoglevel.toString());
    log.logBasic(APP_NAME,Messages.getString("Spoon.Log.LoggingAtLevel") + log.getLogLevelDesc());
  }
  StepLoader stloader=StepLoader.getInstance();
  if (!stloader.read()) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.ErrorLoadingAndHaltSystem"));
    return;
  }
  JobEntryLoader jeloader=JobEntryLoader.getInstance();
  if (!jeloader.read()) {
    log.logError("Spoon","Error loading job entries & plugins... halting Kitchen!");
    return;
  }
  final Spoon spoon=new Spoon(log,display,null);
  staticSpoon=spoon;
  spoon.setDestroy(true);
  spoon.setArguments((String[])args.toArray(new String[args.size()]));
  log.logBasic(APP_NAME,Messages.getString("Spoon.Log.MainWindowCreated"));
  RepositoryMeta repositoryMeta=null;
  UserInfo userinfo=null;
  if (Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename) && spoon.props.showRepositoriesDialogAtStartup()) {
    log.logBasic(APP_NAME,Messages.getString("Spoon.Log.AskingForRepository"));
    int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION,PermissionMeta.TYPE_PERMISSION_JOB};
    splash.hide();
    RepositoriesDialog rd=new RepositoriesDialog(spoon.display,perms,Messages.getString("Spoon.Application.Name"));
    if (rd.open()) {
      repositoryMeta=rd.getRepository();
      userinfo=rd.getUser();
      if (!userinfo.useTransformations()) {
        MessageBox mb=new MessageBox(spoon.shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(Messages.getString("Spoon.Dialog.RepositoryUserCannotWork.Message"));
        mb.setText(Messages.getString("Spoon.Dialog.RepositoryUserCannotWork.Title"));
        mb.open();
        userinfo=null;
        repositoryMeta=null;
      }
    }
 else {
      if (rd.isCancelled()) {
        splash.dispose();
        spoon.quitFile();
        return;
      }
    }
  }
  try {
    if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {
      if (!Const.isEmpty(optionRepname)) {
        RepositoriesMeta repsinfo=new RepositoriesMeta(log);
        if (repsinfo.readData()) {
          repositoryMeta=repsinfo.findRepository(optionRepname.toString());
          if (repositoryMeta != null) {
            spoon.rep=new Repository(log,repositoryMeta,userinfo);
            if (spoon.rep.connect(Messages.getString("Spoon.Application.Name"))) {
              if (Const.isEmpty(optionDirname))               optionDirname=new StringBuffer(RepositoryDirectory.DIRECTORY_SEPARATOR);
              spoon.rep.userinfo=new UserInfo(spoon.rep,optionUsername.toString(),optionPassword.toString());
              if (spoon.rep.userinfo.getID() > 0) {
                int t=(Const.isEmpty(optionFilename) ? 0 : 1) + (Const.isEmpty(optionJobname) ? 0 : 1) + (Const.isEmpty(optionTransname) ? 0 : 1);
                if (t > 1) {
                  log.logError(APP_NAME,Messages.getString("Spoon.Log.MutuallyExcusive"));
                }
 else                 if (t == 1) {
                  if (!Const.isEmpty(optionFilename)) {
                    spoon.openFile(optionFilename.toString(),false);
                  }
 else {
                    RepositoryDirectory repdir=spoon.rep.getDirectoryTree().findDirectory(optionDirname.toString());
                    if (repdir == null) {
                      log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableFindDirectory",optionDirname.toString()));
                    }
 else {
                      if (!Const.isEmpty(optionTransname)) {
                        TransMeta transMeta=new TransMeta(spoon.rep,optionTransname.toString(),repdir);
                        transMeta.setFilename(optionRepname.toString());
                        transMeta.clearChanged();
                        transMeta.setInternalKettleVariables();
                        spoon.addSpoonGraph(transMeta);
                      }
 else {
                        JobMeta jobMeta=new JobMeta(log,spoon.rep,optionJobname.toString(),repdir);
                        jobMeta.setFilename(optionRepname.toString());
                        jobMeta.clearChanged();
                        jobMeta.setInternalKettleVariables();
                        spoon.addChefGraph(jobMeta);
                      }
                    }
                  }
                }
              }
 else {
                log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableVerifyUser"));
                spoon.rep.disconnect();
                spoon.rep=null;
              }
            }
 else {
              log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableConnectToRepository"));
            }
          }
 else {
            log.logError(APP_NAME,Messages.getString("Spoon.Log.NoRepositoryRrovided"));
          }
        }
 else {
          log.logError(APP_NAME,Messages.getString("Spoon.Log.NoRepositoriesDefined"));
        }
      }
 else       if (!Const.isEmpty(optionFilename)) {
        spoon.openFile(optionFilename.toString(),false);
      }
    }
 else {
      if (repositoryMeta != null && userinfo != null) {
        spoon.rep=new Repository(log,repositoryMeta,userinfo);
        if (!spoon.rep.connect(Messages.getString("Spoon.Application.Name"))) {
          spoon.rep=null;
        }
      }
      if (spoon.props.openLastFile()) {
        log.logDetailed(APP_NAME,Messages.getString("Spoon.Log.TryingOpenLastUsedFile"));
        List lastUsedFiles=spoon.props.getLastUsedFiles();
        if (lastUsedFiles.size() > 0) {
          LastUsedFile lastUsedFile=(LastUsedFile)lastUsedFiles.get(0);
          spoon.loadLastUsedFile(lastUsedFile,repositoryMeta);
        }
      }
    }
  }
 catch (  KettleException ke) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage());
    spoon.rep=null;
  }
  spoon.open();
  splash.dispose();
  try {
    while (!spoon.isDisposed()) {
      if (!spoon.readAndDispatch())       spoon.sleep();
    }
  }
 catch (  Throwable e) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.UnexpectedErrorOccurred") + Const.CR + e.getMessage());
    e.printStackTrace();
  }
  spoon.dispose();
  log.logBasic(APP_NAME,APP_NAME + " " + Messages.getString("Spoon.Log.AppHasEnded"));
  log.close();
  System.exit(0);
}
