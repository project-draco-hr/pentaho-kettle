{
  EnvUtil.environmentInit();
  ArrayList args=new ArrayList();
  for (int i=0; i < a.length; i++)   args.add(a[i]);
  Display display=new Display();
  Splash splash=new Splash(display);
  StringBuffer optionRepname, optionUsername, optionPassword, optionTransname, optionFilename, optionDirname, optionLogfile, optionLoglevel;
  CommandLineOption options[]=new CommandLineOption[]{new CommandLineOption("rep","Repository name",optionRepname=new StringBuffer()),new CommandLineOption("user","Repository username",optionUsername=new StringBuffer()),new CommandLineOption("pass","Repository password",optionPassword=new StringBuffer()),new CommandLineOption("trans","The name of the transformation to launch",optionTransname=new StringBuffer()),new CommandLineOption("dir","The directory (don't forget the leading /)",optionDirname=new StringBuffer()),new CommandLineOption("file","The filename (Transformation in XML) to launch",optionFilename=new StringBuffer()),new CommandLineOption("level","The logging level (Basic, Detailed, Debug, Rowlevel, Error, Nothing)",optionLoglevel=new StringBuffer()),new CommandLineOption("logfile","The logging file to write to",optionLogfile=new StringBuffer()),new CommandLineOption("log","The logging file to write to (deprecated)",optionLogfile=new StringBuffer(),false,true)};
  CommandLineOption.parseArguments(args,options);
  String kettleRepname=Const.getEnvironmentVariable("KETTLE_REPOSITORY",null);
  String kettleUsername=Const.getEnvironmentVariable("KETTLE_USER",null);
  String kettlePassword=Const.getEnvironmentVariable("KETTLE_PASSWORD",null);
  if (!Const.isEmpty(kettleRepname))   optionRepname=new StringBuffer(kettleRepname);
  if (!Const.isEmpty(kettleUsername))   optionUsername=new StringBuffer(kettleUsername);
  if (!Const.isEmpty(kettlePassword))   optionPassword=new StringBuffer(kettlePassword);
  String version=Const.JAVA_VERSION;
  if ("1.4".compareToIgnoreCase(version) > 0) {
    System.out.println("The System is running on Java version " + version);
    System.out.println("Unfortunately, it needs version 1.4 or higher to run.");
    return;
  }
  Locale.setDefault(Const.DEFAULT_LOCALE);
  LogWriter log;
  if (Const.isEmpty(optionLogfile)) {
    log=LogWriter.getInstance(Const.SPOON_LOG_FILE,false,LogWriter.LOG_LEVEL_BASIC);
  }
 else {
    log=LogWriter.getInstance(optionLogfile.toString(),true,LogWriter.LOG_LEVEL_BASIC);
  }
  if (log.getRealFilename() != null)   log.logBasic(APP_NAME,Messages.getString("Spoon.Log.LoggingToFile") + log.getRealFilename());
  if (!Const.isEmpty(optionLoglevel)) {
    log.setLogLevel(optionLoglevel.toString());
    log.logBasic(APP_NAME,Messages.getString("Spoon.Log.LoggingAtLevel") + log.getLogLevelDesc());
  }
  StepLoader stloader=StepLoader.getInstance();
  if (!stloader.read()) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.ErrorLoadingAndHaltSystem"));
    return;
  }
  JobEntryLoader jeloader=JobEntryLoader.getInstance();
  if (!jeloader.read()) {
    log.logError("Spoon","Error loading job entries & plugins... halting Kitchen!");
    return;
  }
  final Spoon win=new Spoon(log,display,null);
  win.setDestroy(true);
  win.setArguments((String[])args.toArray(new String[args.size()]));
  log.logBasic(APP_NAME,Messages.getString("Spoon.Log.MainWindowCreated"));
  RepositoryMeta repinfo=null;
  UserInfo userinfo=null;
  if (Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename) && win.props.showRepositoriesDialogAtStartup()) {
    log.logBasic(APP_NAME,Messages.getString("Spoon.Log.AskingForRepository"));
    int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION};
    splash.hide();
    RepositoriesDialog rd=new RepositoriesDialog(win.disp,SWT.NONE,perms,Messages.getString("Spoon.Application.Name"));
    if (rd.open()) {
      repinfo=rd.getRepository();
      userinfo=rd.getUser();
      if (!userinfo.useTransformations()) {
        MessageBox mb=new MessageBox(win.shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(Messages.getString("Spoon.Dialog.RepositoryUserCannotWork.Message"));
        mb.setText(Messages.getString("Spoon.Dialog.RepositoryUserCannotWork.Title"));
        mb.open();
        userinfo=null;
        repinfo=null;
      }
    }
 else {
      if (rd.isCancelled()) {
        splash.dispose();
        win.quitFile();
        return;
      }
    }
  }
  try {
    if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {
      if (!Const.isEmpty(optionRepname)) {
        RepositoriesMeta repsinfo=new RepositoriesMeta(log);
        if (repsinfo.readData()) {
          repinfo=repsinfo.findRepository(optionRepname.toString());
          if (repinfo != null) {
            win.rep=new Repository(log,repinfo,userinfo);
            if (win.rep.connect(Messages.getString("Spoon.Application.Name"))) {
              if (Const.isEmpty(optionDirname))               optionDirname=new StringBuffer(RepositoryDirectory.DIRECTORY_SEPARATOR);
              win.rep.userinfo=new UserInfo(win.rep,optionUsername.toString(),optionPassword.toString());
              if (win.rep.userinfo.getID() > 0) {
                if (!Const.isEmpty(optionTransname)) {
                  RepositoryDirectory repdir=win.rep.getDirectoryTree().findDirectory(optionDirname.toString());
                  if (repdir != null) {
                    win.transMeta=new TransMeta(win.rep,optionTransname.toString(),repdir);
                    win.setFilename(optionRepname.toString());
                    win.transMeta.clearChanged();
                  }
 else {
                    log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableFindDirectory",optionDirname.toString()));
                  }
                }
              }
 else {
                log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableVerifyUser"));
                win.rep.disconnect();
                win.rep=null;
              }
            }
 else {
              log.logError(APP_NAME,Messages.getString("Spoon.Log.UnableConnectToRepository"));
            }
          }
 else {
            log.logError(APP_NAME,Messages.getString("Spoon.Log.NoRepositoryRrovided"));
          }
        }
 else {
          log.logError(APP_NAME,Messages.getString("Spoon.Log.NoRepositoriesDefined"));
        }
      }
 else       if (!Const.isEmpty(optionFilename)) {
        win.transMeta=new TransMeta(optionFilename.toString());
        win.setFilename(optionFilename.toString());
        win.transMeta.clearChanged();
      }
    }
 else {
      if (repinfo != null && userinfo != null) {
        win.rep=new Repository(log,repinfo,userinfo);
        if (!win.rep.connect(Messages.getString("Spoon.Application.Name"))) {
          win.rep=null;
        }
      }
      if (win.props.openLastFile()) {
        log.logDetailed(APP_NAME,Messages.getString("Spoon.Log.TryingOpenLastUsedFile"));
        String lastfiles[]=win.props.getLastFiles();
        String lastdirs[]=win.props.getLastDirs();
        boolean lasttypes[]=win.props.getLastTypes();
        String lastrepos[]=win.props.getLastRepositories();
        if (lastfiles.length > 0) {
          boolean use_repository=repinfo != null;
          if (lasttypes[0]) {
            if (lastrepos[0] != null && lastrepos[0].length() > 0) {
              if (use_repository && !lastrepos[0].equalsIgnoreCase(repinfo.getName())) {
                use_repository=false;
              }
            }
          }
          if (use_repository || !lasttypes[0]) {
            if (win.rep != null) {
              if (win.rep.getName().equalsIgnoreCase(lastrepos[0])) {
                RepositoryDirectory repdir=win.rep.getDirectoryTree().findDirectory(lastdirs[0]);
                if (repdir != null) {
                  log.logDetailed(APP_NAME,Messages.getString("Spoon.Log.AutoLoadingTransformation",lastfiles[0],lastdirs[0]));
                  TransLoadProgressDialog tlpd=new TransLoadProgressDialog(win.shell,win.rep,lastfiles[0],repdir);
                  TransMeta transInfo=tlpd.open();
                  if (transInfo != null) {
                    win.transMeta=transInfo;
                    win.setFilename(lastfiles[0]);
                  }
                }
              }
            }
 else {
              win.transMeta=new TransMeta(lastfiles[0]);
              win.setFilename(lastfiles[0]);
            }
          }
          win.transMeta.clearChanged();
        }
      }
    }
  }
 catch (  KettleException ke) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage());
    win.rep=null;
  }
  win.open();
  splash.dispose();
  try {
    while (!win.isDisposed()) {
      if (!win.readAndDispatch())       win.sleep();
    }
  }
 catch (  Throwable e) {
    log.logError(APP_NAME,Messages.getString("Spoon.Log.UnexpectedErrorOccurred") + Const.CR + e.getMessage());
    e.printStackTrace();
  }
  win.dispose();
  log.logBasic(APP_NAME,APP_NAME + " " + Messages.getString("Spoon.Log.AppHasEnded"));
  log.close();
  System.exit(0);
}
