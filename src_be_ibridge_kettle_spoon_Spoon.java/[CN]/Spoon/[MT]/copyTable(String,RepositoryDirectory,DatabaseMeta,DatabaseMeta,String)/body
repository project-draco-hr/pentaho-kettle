{
  try {
    TransMeta ti=new TransMeta();
    ti.setName(transname);
    ti.setDirectory(repdir);
    ti.setDatabases(transMeta.getDatabases());
    String note=Messages.getString("Message.Note.ReadInformationFromTableOnDB",tablename,sourceDBInfo.getDatabaseName()) + Const.CR;
    note+=Messages.getString("Message.Note.WriteInformationToTableOnDB",tablename,targetDBInfo.getDatabaseName());
    NotePadMeta ni=new NotePadMeta(note,150,10,-1,-1);
    ti.addNote(ni);
    String fromstepname=Messages.getString("Message.Note.ReadFromTable",tablename);
    TableInputMeta tii=new TableInputMeta();
    tii.setDatabaseMeta(sourceDBInfo);
    tii.setSQL("SELECT * FROM " + tablename);
    StepLoader steploader=StepLoader.getInstance();
    String fromstepid=steploader.getStepPluginID(tii);
    StepMeta fromstep=new StepMeta(log,fromstepid,fromstepname,(StepMetaInterface)tii);
    fromstep.setLocation(150,100);
    fromstep.setDraw(true);
    fromstep.setDescription(Messages.getString("Message.Note.ReadInformationFromTableOnDB",tablename,sourceDBInfo.getDatabaseName()));
    ti.addStep(fromstep);
    Database sourceDB=new Database(sourceDBInfo);
    sourceDB.connect();
    Row fields=sourceDB.getTableFields(tablename);
    int nrReserved=targetDBInfo.getNrReservedWords(fields);
    if (nrReserved > 0) {
      SelectValuesMeta svi=new SelectValuesMeta();
      svi.allocate(0,0,nrReserved);
      int nr=0;
      for (int i=0; i < fields.size(); i++) {
        Value v=fields.getValue(i);
        if (targetDBInfo.isReservedWord(v.getName())) {
          svi.getMetaName()[nr]=v.getName();
          svi.getMetaRename()[nr]=targetDBInfo.quoteField(v.getName());
          nr++;
        }
      }
      String selstepname=Messages.getString("Message.Note.HandleReservedWords");
      String selstepid=steploader.getStepPluginID(svi);
      StepMeta selstep=new StepMeta(log,selstepid,selstepname,(StepMetaInterface)svi);
      selstep.setLocation(350,100);
      selstep.setDraw(true);
      selstep.setDescription(Messages.getString("Message.Note.RenamesReservedWords",targetDBInfo.getDatabaseTypeDesc()));
      ti.addStep(selstep);
      TransHopMeta shi=new TransHopMeta(fromstep,selstep);
      ti.addTransHop(shi);
      fromstep=selstep;
    }
    String tostepname=Messages.getString("Message.Note.WriteToTable",tablename);
    TableOutputMeta toi=new TableOutputMeta();
    toi.setDatabase(targetDBInfo);
    toi.setTablename(tablename);
    toi.setCommitSize(200);
    toi.setTruncateTable(true);
    String tostepid=steploader.getStepPluginID(toi);
    StepMeta tostep=new StepMeta(log,tostepid,tostepname,(StepMetaInterface)toi);
    tostep.setLocation(550,100);
    tostep.setDraw(true);
    tostep.setDescription(Messages.getString("Message.Note.WriteInformationToTableOnDB2",tablename,targetDBInfo.getDatabaseName()));
    ti.addStep(tostep);
    TransHopMeta hi=new TransHopMeta(fromstep,tostep);
    ti.addTransHop(hi);
    transMeta=ti;
    refreshGraph();
    refreshTree(true);
  }
 catch (  Exception e) {
    new ErrorDialog(shell,props,Messages.getString("Message.ErrorDialog.Title.UnexpectedError"),Messages.getString("Message.ErrorDialog.Info.UnexpectedError"),new KettleException(e.getMessage(),e));
    return false;
  }
  return true;
}
