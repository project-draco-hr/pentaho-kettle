{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ftpclient=null;
      ftpclient=null;
      conn=null;
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("JobFTPDelete.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wName=new LabelText(shell,Messages.getString("JobFTPDelete.Name.Label"),Messages.getString("JobFTPDelete.Name.Tooltip"));
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.top=new FormAttachment(0,0);
  fdName.left=new FormAttachment(0,0);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wGeneralTab=new CTabItem(wTabFolder,SWT.NONE);
  wGeneralTab.setText(Messages.getString("JobFTPDelete.Tab.General.Label"));
  wGeneralComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wGeneralComp);
  FormLayout generalLayout=new FormLayout();
  generalLayout.marginWidth=3;
  generalLayout.marginHeight=3;
  wGeneralComp.setLayout(generalLayout);
  wServerSettings=new Group(wGeneralComp,SWT.SHADOW_NONE);
  props.setLook(wServerSettings);
  wServerSettings.setText(Messages.getString("JobFTPDelete.ServerSettings.Group.Label"));
  FormLayout ServerSettingsgroupLayout=new FormLayout();
  ServerSettingsgroupLayout.marginWidth=10;
  ServerSettingsgroupLayout.marginHeight=10;
  wServerSettings.setLayout(ServerSettingsgroupLayout);
  wlProtocol=new Label(wServerSettings,SWT.RIGHT);
  wlProtocol.setText(Messages.getString("JobFTPDelete.Protocol.Label"));
  props.setLook(wlProtocol);
  fdlProtocol=new FormData();
  fdlProtocol.left=new FormAttachment(0,0);
  fdlProtocol.top=new FormAttachment(wName,margin);
  fdlProtocol.right=new FormAttachment(middle,0);
  wlProtocol.setLayoutData(fdlProtocol);
  wProtocol=new Combo(wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wProtocol.setToolTipText(Messages.getString("JobFTPDelete.Protocol.Tooltip"));
  wProtocol.add("FTP");
  wProtocol.add("SFTP");
  wProtocol.add("SSH");
  props.setLook(wProtocol);
  fdProtocol=new FormData();
  fdProtocol.left=new FormAttachment(middle,margin);
  fdProtocol.top=new FormAttachment(wName,margin);
  fdProtocol.right=new FormAttachment(100,0);
  wProtocol.setLayoutData(fdProtocol);
  wProtocol.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeFTPProtocol();
      jobEntry.setChanged();
    }
  }
);
  wServerName=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.Server.Label"),Messages.getString("JobFTPDelete.Server.Tooltip"));
  props.setLook(wServerName);
  wServerName.addModifyListener(lsMod);
  fdServerName=new FormData();
  fdServerName.left=new FormAttachment(0,0);
  fdServerName.top=new FormAttachment(wProtocol,margin);
  fdServerName.right=new FormAttachment(100,0);
  wServerName.setLayoutData(fdServerName);
  wPort=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.Port.Label"),Messages.getString("JobFTPDelete.Port.Tooltip"));
  props.setLook(wPort);
  wPort.addModifyListener(lsMod);
  fdPort=new FormData();
  fdPort.left=new FormAttachment(0,0);
  fdPort.top=new FormAttachment(wServerName,margin);
  fdPort.right=new FormAttachment(100,0);
  wPort.setLayoutData(fdPort);
  wUserName=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.User.Label"),Messages.getString("JobFTPDelete.User.Tooltip"));
  props.setLook(wUserName);
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(0,0);
  fdUserName.top=new FormAttachment(wPort,margin);
  fdUserName.right=new FormAttachment(100,0);
  wUserName.setLayoutData(fdUserName);
  wPassword=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.Password.Label"),Messages.getString("JobFTPDelete.Password.Tooltip"));
  props.setLook(wPassword);
  wPassword.setEchoChar('*');
  wPassword.addModifyListener(lsMod);
  fdPassword=new FormData();
  fdPassword.left=new FormAttachment(0,0);
  fdPassword.top=new FormAttachment(wUserName,margin);
  fdPassword.right=new FormAttachment(100,0);
  wPassword.setLayoutData(fdPassword);
  wPassword.getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkPasswordVisible();
    }
  }
);
  wluseProxy=new Label(wServerSettings,SWT.RIGHT);
  wluseProxy.setText(Messages.getString("JobFTPDelete.useProxy.Label"));
  props.setLook(wluseProxy);
  fdluseProxy=new FormData();
  fdluseProxy.left=new FormAttachment(0,0);
  fdluseProxy.top=new FormAttachment(wPassword,margin);
  fdluseProxy.right=new FormAttachment(middle,0);
  wluseProxy.setLayoutData(fdluseProxy);
  wuseProxy=new Button(wServerSettings,SWT.CHECK);
  props.setLook(wuseProxy);
  wuseProxy.setToolTipText(Messages.getString("JobFTPDelete.useProxy.Tooltip"));
  fduseProxy=new FormData();
  fduseProxy.left=new FormAttachment(middle,margin);
  fduseProxy.top=new FormAttachment(wPassword,margin);
  fduseProxy.right=new FormAttachment(100,0);
  wuseProxy.setLayoutData(fduseProxy);
  wuseProxy.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeProxy();
      jobEntry.setChanged();
    }
  }
);
  wProxyHost=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.ProxyHost.Label"),Messages.getString("JobFTPDelete.ProxyHost.Tooltip"));
  props.setLook(wProxyHost);
  wProxyHost.addModifyListener(lsMod);
  fdProxyHost=new FormData();
  fdProxyHost.left=new FormAttachment(0,0);
  fdProxyHost.top=new FormAttachment(wuseProxy,margin);
  fdProxyHost.right=new FormAttachment(100,0);
  wProxyHost.setLayoutData(fdProxyHost);
  wProxyPort=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.ProxyPort.Label"),Messages.getString("JobFTPDelete.ProxyPort.Tooltip"));
  props.setLook(wProxyPort);
  wProxyPort.addModifyListener(lsMod);
  fdProxyPort=new FormData();
  fdProxyPort.left=new FormAttachment(0,0);
  fdProxyPort.top=new FormAttachment(wProxyHost,margin);
  fdProxyPort.right=new FormAttachment(100,0);
  wProxyPort.setLayoutData(fdProxyPort);
  wProxyUsername=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.ProxyUsername.Label"),Messages.getString("JobFTPDelete.ProxyUsername.Tooltip"));
  props.setLook(wProxyUsername);
  wProxyUsername.addModifyListener(lsMod);
  fdProxyUsername=new FormData();
  fdProxyUsername.left=new FormAttachment(0,0);
  fdProxyUsername.top=new FormAttachment(wProxyPort,margin);
  fdProxyUsername.right=new FormAttachment(100,0);
  wProxyUsername.setLayoutData(fdProxyUsername);
  wProxyPassword=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.ProxyPassword.Label"),Messages.getString("JobFTPDelete.ProxyPassword.Tooltip"));
  props.setLook(wProxyPassword);
  wProxyPassword.addModifyListener(lsMod);
  fdProxyPasswd=new FormData();
  fdProxyPasswd.left=new FormAttachment(0,0);
  fdProxyPasswd.top=new FormAttachment(wProxyUsername,margin);
  fdProxyPasswd.right=new FormAttachment(100,0);
  wProxyPassword.setLayoutData(fdProxyPasswd);
  wlusePublicKey=new Label(wServerSettings,SWT.RIGHT);
  wlusePublicKey.setText(Messages.getString("JobFTPDelete.usePublicKeyFiles.Label"));
  props.setLook(wlusePublicKey);
  fdlusePublicKey=new FormData();
  fdlusePublicKey.left=new FormAttachment(0,0);
  fdlusePublicKey.top=new FormAttachment(wProxyPassword,margin);
  fdlusePublicKey.right=new FormAttachment(middle,0);
  wlusePublicKey.setLayoutData(fdlusePublicKey);
  wusePublicKey=new Button(wServerSettings,SWT.CHECK);
  wusePublicKey.setToolTipText(Messages.getString("JobFTPDelete.usePublicKeyFiles.Tooltip"));
  props.setLook(wusePublicKey);
  fdusePublicKey=new FormData();
  fdusePublicKey.left=new FormAttachment(middle,margin);
  fdusePublicKey.top=new FormAttachment(wProxyPassword,margin);
  fdusePublicKey.right=new FormAttachment(100,0);
  wusePublicKey.setLayoutData(fdusePublicKey);
  wusePublicKey.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeUsePublicKey();
      jobEntry.setChanged();
    }
  }
);
  wlKeyFilename=new Label(wServerSettings,SWT.RIGHT);
  wlKeyFilename.setText(Messages.getString("JobFTPDelete.KeyFilename.Label"));
  props.setLook(wlKeyFilename);
  fdlKeyFilename=new FormData();
  fdlKeyFilename.left=new FormAttachment(0,0);
  fdlKeyFilename.top=new FormAttachment(wusePublicKey,margin);
  fdlKeyFilename.right=new FormAttachment(middle,-margin);
  wlKeyFilename.setLayoutData(fdlKeyFilename);
  wbKeyFilename=new Button(wServerSettings,SWT.PUSH | SWT.CENTER);
  props.setLook(wbKeyFilename);
  wbKeyFilename.setText(Messages.getString("System.Button.Browse"));
  fdbKeyFilename=new FormData();
  fdbKeyFilename.right=new FormAttachment(100,0);
  fdbKeyFilename.top=new FormAttachment(wusePublicKey,0);
  wbKeyFilename.setLayoutData(fdbKeyFilename);
  wKeyFilename=new TextVar(jobMeta,wServerSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wKeyFilename.setToolTipText(Messages.getString("JobFTPDelete.KeyFilename.Tooltip"));
  props.setLook(wKeyFilename);
  wKeyFilename.addModifyListener(lsMod);
  fdKeyFilename=new FormData();
  fdKeyFilename.left=new FormAttachment(middle,margin);
  fdKeyFilename.top=new FormAttachment(wusePublicKey,margin);
  fdKeyFilename.right=new FormAttachment(wbKeyFilename,-margin);
  wKeyFilename.setLayoutData(fdKeyFilename);
  wKeyFilename.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wKeyFilename.setToolTipText(jobMeta.environmentSubstitute(wKeyFilename.getText()));
    }
  }
);
  wbKeyFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*.pem","*"});
      if (wKeyFilename.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wKeyFilename.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wKeyFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wkeyfilePass=new LabelTextVar(jobMeta,wServerSettings,Messages.getString("JobFTPDelete.keyfilePass.Label"),Messages.getString("JobFTPDelete.keyfilePass.Tooltip"));
  props.setLook(wkeyfilePass);
  wkeyfilePass.setEchoChar('*');
  wkeyfilePass.addModifyListener(lsMod);
  fdkeyfilePass=new FormData();
  fdkeyfilePass.left=new FormAttachment(0,0);
  fdkeyfilePass.top=new FormAttachment(wKeyFilename,margin);
  fdkeyfilePass.right=new FormAttachment(100,0);
  wkeyfilePass.setLayoutData(fdkeyfilePass);
  wkeyfilePass.getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      DatabaseDialog.checkPasswordVisible(wkeyfilePass.getTextWidget());
    }
  }
);
  wTest=new Button(wServerSettings,SWT.PUSH);
  wTest.setText(Messages.getString("JobFTPDelete.TestConnection.Label"));
  props.setLook(wTest);
  fdTest=new FormData();
  wTest.setToolTipText(Messages.getString("JobFTPDelete.TestConnection.Tooltip"));
  fdTest.top=new FormAttachment(wkeyfilePass,margin);
  fdTest.right=new FormAttachment(100,0);
  wTest.setLayoutData(fdTest);
  fdServerSettings=new FormData();
  fdServerSettings.left=new FormAttachment(0,margin);
  fdServerSettings.top=new FormAttachment(wName,margin);
  fdServerSettings.right=new FormAttachment(100,-margin);
  wServerSettings.setLayoutData(fdServerSettings);
  fdGeneralComp=new FormData();
  fdGeneralComp.left=new FormAttachment(0,0);
  fdGeneralComp.top=new FormAttachment(0,0);
  fdGeneralComp.right=new FormAttachment(100,0);
  fdGeneralComp.bottom=new FormAttachment(100,0);
  wGeneralComp.setLayoutData(fdGeneralComp);
  wGeneralComp.layout();
  wGeneralTab.setControl(wGeneralComp);
  props.setLook(wGeneralComp);
  wFilesTab=new CTabItem(wTabFolder,SWT.NONE);
  wFilesTab.setText(Messages.getString("JobFTPDelete.Tab.Files.Label"));
  wFilesComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wFilesComp);
  FormLayout AdvancedLayout=new FormLayout();
  AdvancedLayout.marginWidth=3;
  AdvancedLayout.marginHeight=3;
  wFilesComp.setLayout(AdvancedLayout);
  wAdvancedSettings=new Group(wFilesComp,SWT.SHADOW_NONE);
  props.setLook(wAdvancedSettings);
  wAdvancedSettings.setText(Messages.getString("JobFTPDelete.AdvancedSettings.Group.Label"));
  FormLayout AdvancedSettingsgroupLayout=new FormLayout();
  AdvancedSettingsgroupLayout.marginWidth=10;
  AdvancedSettingsgroupLayout.marginHeight=10;
  wAdvancedSettings.setLayout(AdvancedSettingsgroupLayout);
  wTimeout=new LabelTextVar(jobMeta,wAdvancedSettings,Messages.getString("JobFTPDelete.Timeout.Label"),Messages.getString("JobFTPDelete.Timeout.Tooltip"));
  props.setLook(wTimeout);
  wTimeout.addModifyListener(lsMod);
  fdTimeout=new FormData();
  fdTimeout.left=new FormAttachment(0,0);
  fdTimeout.top=new FormAttachment(wActive,margin);
  fdTimeout.right=new FormAttachment(100,0);
  wTimeout.setLayoutData(fdTimeout);
  wlActive=new Label(wAdvancedSettings,SWT.RIGHT);
  wlActive.setText(Messages.getString("JobFTPDelete.ActiveConns.Label"));
  props.setLook(wlActive);
  fdlActive=new FormData();
  fdlActive.left=new FormAttachment(0,0);
  fdlActive.top=new FormAttachment(wTimeout,margin);
  fdlActive.right=new FormAttachment(middle,0);
  wlActive.setLayoutData(fdlActive);
  wActive=new Button(wAdvancedSettings,SWT.CHECK);
  wActive.setToolTipText(Messages.getString("JobFTPDelete.ActiveConns.Tooltip"));
  props.setLook(wActive);
  fdActive=new FormData();
  fdActive.left=new FormAttachment(middle,margin);
  fdActive.top=new FormAttachment(wTimeout,margin);
  fdActive.right=new FormAttachment(100,0);
  wActive.setLayoutData(fdActive);
  fdAdvancedSettings=new FormData();
  fdAdvancedSettings.left=new FormAttachment(0,margin);
  fdAdvancedSettings.top=new FormAttachment(0,margin);
  fdAdvancedSettings.right=new FormAttachment(100,-margin);
  wAdvancedSettings.setLayoutData(fdAdvancedSettings);
  wRemoteSettings=new Group(wFilesComp,SWT.SHADOW_NONE);
  props.setLook(wRemoteSettings);
  wRemoteSettings.setText(Messages.getString("JobFTPDelete.RemoteSettings.Group.Label"));
  FormLayout RemoteSettinsgroupLayout=new FormLayout();
  RemoteSettinsgroupLayout.marginWidth=10;
  RemoteSettinsgroupLayout.marginHeight=10;
  wRemoteSettings.setLayout(RemoteSettinsgroupLayout);
  wlgetPrevious=new Label(wRemoteSettings,SWT.RIGHT);
  wlgetPrevious.setText(Messages.getString("JobFTPDelete.getPrevious.Label"));
  props.setLook(wlgetPrevious);
  fdlgetPrevious=new FormData();
  fdlgetPrevious.left=new FormAttachment(0,0);
  fdlgetPrevious.top=new FormAttachment(wAdvancedSettings,margin);
  fdlgetPrevious.right=new FormAttachment(middle,0);
  wlgetPrevious.setLayoutData(fdlgetPrevious);
  wgetPrevious=new Button(wRemoteSettings,SWT.CHECK);
  props.setLook(wgetPrevious);
  wgetPrevious.setToolTipText(Messages.getString("JobFTPDelete.getPrevious.Tooltip"));
  fdgetPrevious=new FormData();
  fdgetPrevious.left=new FormAttachment(middle,margin);
  fdgetPrevious.top=new FormAttachment(wAdvancedSettings,margin);
  fdgetPrevious.right=new FormAttachment(100,0);
  wgetPrevious.setLayoutData(fdgetPrevious);
  wgetPrevious.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeCopyFromPrevious();
      jobEntry.setChanged();
    }
  }
);
  wlFtpDirectory=new Label(wRemoteSettings,SWT.RIGHT);
  wlFtpDirectory.setText(Messages.getString("JobFTPDelete.RemoteDir.Label"));
  props.setLook(wlFtpDirectory);
  fdlFtpDirectory=new FormData();
  fdlFtpDirectory.left=new FormAttachment(0,0);
  fdlFtpDirectory.top=new FormAttachment(wgetPrevious,margin);
  fdlFtpDirectory.right=new FormAttachment(middle,0);
  wlFtpDirectory.setLayoutData(fdlFtpDirectory);
  wbTestChangeFolderExists=new Button(wRemoteSettings,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTestChangeFolderExists);
  wbTestChangeFolderExists.setText(Messages.getString("JobFTPDelete.TestFolderExists.Label"));
  fdbTestChangeFolderExists=new FormData();
  fdbTestChangeFolderExists.right=new FormAttachment(100,0);
  fdbTestChangeFolderExists.top=new FormAttachment(wgetPrevious,margin);
  wbTestChangeFolderExists.setLayoutData(fdbTestChangeFolderExists);
  wFtpDirectory=new TextVar(jobMeta,wRemoteSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER,Messages.getString("JobFTPDelete.RemoteDir.Tooltip"));
  props.setLook(wFtpDirectory);
  wFtpDirectory.addModifyListener(lsMod);
  fdFtpDirectory=new FormData();
  fdFtpDirectory.left=new FormAttachment(middle,margin);
  fdFtpDirectory.top=new FormAttachment(wgetPrevious,margin);
  fdFtpDirectory.right=new FormAttachment(wbTestChangeFolderExists,-margin);
  wFtpDirectory.setLayoutData(fdFtpDirectory);
  wWildcard=new LabelTextVar(jobMeta,wRemoteSettings,Messages.getString("JobFTPDelete.Wildcard.Label"),Messages.getString("JobFTPDelete.Wildcard.Tooltip"));
  props.setLook(wWildcard);
  wWildcard.addModifyListener(lsMod);
  fdWildcard=new FormData();
  fdWildcard.left=new FormAttachment(0,0);
  fdWildcard.top=new FormAttachment(wFtpDirectory,margin);
  fdWildcard.right=new FormAttachment(100,0);
  wWildcard.setLayoutData(fdWildcard);
  fdRemoteSettings=new FormData();
  fdRemoteSettings.left=new FormAttachment(0,margin);
  fdRemoteSettings.top=new FormAttachment(wAdvancedSettings,margin);
  fdRemoteSettings.right=new FormAttachment(100,-margin);
  wRemoteSettings.setLayoutData(fdRemoteSettings);
  wSuccessOn=new Group(wFilesComp,SWT.SHADOW_NONE);
  props.setLook(wSuccessOn);
  wSuccessOn.setText(Messages.getString("JobFTPDelete.SuccessOn.Group.Label"));
  FormLayout successongroupLayout=new FormLayout();
  successongroupLayout.marginWidth=10;
  successongroupLayout.marginHeight=10;
  wSuccessOn.setLayout(successongroupLayout);
  wlSuccessCondition=new Label(wSuccessOn,SWT.RIGHT);
  wlSuccessCondition.setText(Messages.getString("JobFTPDelete.SuccessCondition.Label") + " ");
  props.setLook(wlSuccessCondition);
  fdlSuccessCondition=new FormData();
  fdlSuccessCondition.left=new FormAttachment(0,0);
  fdlSuccessCondition.right=new FormAttachment(middle,0);
  fdlSuccessCondition.top=new FormAttachment(wRemoteSettings,margin);
  wlSuccessCondition.setLayoutData(fdlSuccessCondition);
  wSuccessCondition=new CCombo(wSuccessOn,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wSuccessCondition.add(Messages.getString("JobFTPDelete.SuccessWhenAllWorksFine.Label"));
  wSuccessCondition.add(Messages.getString("JobFTPDelete.SuccessWhenAtLeat.Label"));
  wSuccessCondition.add(Messages.getString("JobFTPDelete.SuccessWhenNrErrorsLessThan.Label"));
  wSuccessCondition.select(0);
  props.setLook(wSuccessCondition);
  fdSuccessCondition=new FormData();
  fdSuccessCondition.left=new FormAttachment(middle,0);
  fdSuccessCondition.top=new FormAttachment(wRemoteSettings,margin);
  fdSuccessCondition.right=new FormAttachment(100,0);
  wSuccessCondition.setLayoutData(fdSuccessCondition);
  wSuccessCondition.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeSuccessCondition();
    }
  }
);
  wlNrErrorsLessThan=new Label(wSuccessOn,SWT.RIGHT);
  wlNrErrorsLessThan.setText(Messages.getString("JobFTPDelete.NrBadFormedLessThan.Label") + " ");
  props.setLook(wlNrErrorsLessThan);
  fdlNrErrorsLessThan=new FormData();
  fdlNrErrorsLessThan.left=new FormAttachment(0,0);
  fdlNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdlNrErrorsLessThan.right=new FormAttachment(middle,-margin);
  wlNrErrorsLessThan.setLayoutData(fdlNrErrorsLessThan);
  wNrErrorsLessThan=new TextVar(jobMeta,wSuccessOn,SWT.SINGLE | SWT.LEFT | SWT.BORDER,Messages.getString("JobFTPDelete.NrBadFormedLessThan.Tooltip"));
  props.setLook(wNrErrorsLessThan);
  wNrErrorsLessThan.addModifyListener(lsMod);
  fdNrErrorsLessThan=new FormData();
  fdNrErrorsLessThan.left=new FormAttachment(middle,0);
  fdNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdNrErrorsLessThan.right=new FormAttachment(100,-margin);
  wNrErrorsLessThan.setLayoutData(fdNrErrorsLessThan);
  fdSuccessOn=new FormData();
  fdSuccessOn.left=new FormAttachment(0,margin);
  fdSuccessOn.top=new FormAttachment(wRemoteSettings,margin);
  fdSuccessOn.right=new FormAttachment(100,-margin);
  wSuccessOn.setLayoutData(fdSuccessOn);
  fdFilesComp=new FormData();
  fdFilesComp.left=new FormAttachment(0,0);
  fdFilesComp.top=new FormAttachment(0,0);
  fdFilesComp.right=new FormAttachment(100,0);
  fdFilesComp.bottom=new FormAttachment(100,0);
  wFilesComp.setLayoutData(fdFilesComp);
  wFilesComp.layout();
  wFilesTab.setControl(wFilesComp);
  props.setLook(wFilesComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wName,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wTabFolder);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsTest=new Listener(){
    public void handleEvent(    Event e){
      test();
    }
  }
;
  lsCheckFolder=new Listener(){
    public void handleEvent(    Event e){
      checkFTPFolder();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  wTest.addListener(SWT.Selection,lsTest);
  wbTestChangeFolderExists.addListener(SWT.Selection,lsCheckFolder);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wServerName.addSelectionListener(lsDef);
  wUserName.addSelectionListener(lsDef);
  wPassword.addSelectionListener(lsDef);
  wFtpDirectory.addSelectionListener(lsDef);
  wFtpDirectory.addSelectionListener(lsDef);
  wWildcard.addSelectionListener(lsDef);
  wTimeout.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  activeSuccessCondition();
  activeUsePublicKey();
  activeProxy();
  activeFTPProtocol();
  activeCopyFromPrevious();
  wTabFolder.setSelection(0);
  BaseStepDialog.setSize(shell);
  shell.open();
  props.setDialogSize(shell,"JobFTPDeleteDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
