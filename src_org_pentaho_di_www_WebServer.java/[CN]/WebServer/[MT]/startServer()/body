{
  server=new Server();
  Constraint constraint=new Constraint();
  constraint.setName(Constraint.__BASIC_AUTH);
  ;
  constraint.setRoles(new String[]{Constraint.ANY_ROLE});
  constraint.setAuthenticate(true);
  ConstraintMapping constraintMapping=new ConstraintMapping();
  constraintMapping.setConstraint(constraint);
  constraintMapping.setPathSpec("/*");
  SecurityHandler securityHandler=new SecurityHandler();
  if (System.getProperty("loginmodulename") != null && System.getProperty("java.security.auth.login.config") != null) {
    JAASUserRealm jaasRealm=new JAASUserRealm("Kettle");
    jaasRealm.setLoginModuleName(System.getProperty("loginmodulename"));
    securityHandler.setUserRealm(jaasRealm);
  }
 else {
    File homePwdFile=new File(Const.getKettleCartePasswordFile());
    if (homePwdFile.exists()) {
      securityHandler.setUserRealm(new HashUserRealm("Kettle",Const.getKettleCartePasswordFile()));
    }
 else {
      securityHandler.setUserRealm(new HashUserRealm("Kettle",Const.getKettleLocalCartePasswordFile()));
    }
  }
  securityHandler.setConstraintMappings(new ConstraintMapping[]{constraintMapping});
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  Context root=new Context(contexts,GetRootServlet.CONTEXT_PATH,Context.SESSIONS);
  GetRootServlet rootServlet=new GetRootServlet();
  rootServlet.setJettyMode(true);
  root.addServlet(new ServletHolder(rootServlet),"/*");
  Context status=new Context(contexts,GetStatusServlet.CONTEXT_PATH,Context.SESSIONS);
  status.addServlet(new ServletHolder(new GetStatusServlet(transformationMap,jobMap)),"/*");
  Context transStatus=new Context(contexts,GetTransStatusServlet.CONTEXT_PATH,Context.SESSIONS);
  transStatus.addServlet(new ServletHolder(new GetTransStatusServlet(transformationMap)),"/*");
  Context prepareExecution=new Context(contexts,PrepareExecutionTransServlet.CONTEXT_PATH,Context.SESSIONS);
  prepareExecution.addServlet(new ServletHolder(new PrepareExecutionTransServlet(transformationMap)),"/*");
  Context startExecution=new Context(contexts,StartExecutionTransServlet.CONTEXT_PATH,Context.SESSIONS);
  startExecution.addServlet(new ServletHolder(new StartExecutionTransServlet(transformationMap)),"/*");
  Context startTrans=new Context(contexts,StartTransServlet.CONTEXT_PATH,Context.SESSIONS);
  startTrans.addServlet(new ServletHolder(new StartTransServlet(transformationMap)),"/*");
  Context pauseTrans=new Context(contexts,PauseTransServlet.CONTEXT_PATH,Context.SESSIONS);
  pauseTrans.addServlet(new ServletHolder(new PauseTransServlet(transformationMap)),"/*");
  Context stopTrans=new Context(contexts,StopTransServlet.CONTEXT_PATH,Context.SESSIONS);
  stopTrans.addServlet(new ServletHolder(new StopTransServlet(transformationMap)),"/*");
  Context cleanupTrans=new Context(contexts,CleanupTransServlet.CONTEXT_PATH,Context.SESSIONS);
  cleanupTrans.addServlet(new ServletHolder(new CleanupTransServlet(transformationMap)),"/*");
  Context addTrans=new Context(contexts,AddTransServlet.CONTEXT_PATH,Context.SESSIONS);
  addTrans.addServlet(new ServletHolder(new AddTransServlet(transformationMap,socketRepository)),"/*");
  Context getPort=new Context(contexts,AllocateServerSocketServlet.CONTEXT_PATH,Context.SESSIONS);
  getPort.addServlet(new ServletHolder(new AllocateServerSocketServlet(transformationMap)),"/*");
  Context sniffStep=new Context(contexts,SniffStepServlet.CONTEXT_PATH,Context.SESSIONS);
  sniffStep.addServlet(new ServletHolder(new SniffStepServlet(transformationMap)),"/*");
  Context startJob=new Context(contexts,StartJobServlet.CONTEXT_PATH,Context.SESSIONS);
  startJob.addServlet(new ServletHolder(new StartJobServlet(jobMap)),"/*");
  Context stopJob=new Context(contexts,StopJobServlet.CONTEXT_PATH,Context.SESSIONS);
  stopJob.addServlet(new ServletHolder(new StopJobServlet(jobMap)),"/*");
  Context jobStatus=new Context(contexts,GetJobStatusServlet.CONTEXT_PATH,Context.SESSIONS);
  jobStatus.addServlet(new ServletHolder(new GetJobStatusServlet(jobMap)),"/*");
  Context addJob=new Context(contexts,AddJobServlet.CONTEXT_PATH,Context.SESSIONS);
  addJob.addServlet(new ServletHolder(new AddJobServlet(jobMap,socketRepository)),"/*");
  Context registerSlave=new Context(contexts,RegisterSlaveServlet.CONTEXT_PATH,Context.SESSIONS);
  registerSlave.addServlet(new ServletHolder(new RegisterSlaveServlet(detections)),"/*");
  Context getSlaves=new Context(contexts,GetSlavesServlet.CONTEXT_PATH,Context.SESSIONS);
  getSlaves.addServlet(new ServletHolder(new GetSlavesServlet(detections)),"/*");
  Context addExport=new Context(contexts,AddExportServlet.CONTEXT_PATH,Context.SESSIONS);
  addExport.addServlet(new ServletHolder(new AddExportServlet(jobMap,transformationMap)),"/*");
  server.setHandlers(new Handler[]{securityHandler,contexts});
  createListeners();
  server.start();
}
