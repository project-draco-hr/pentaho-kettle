{
  if (jobMeta != null && !Const.isEmpty(jobMeta.getName()) && logTable.isDefined()) {
    DatabaseMeta logConnection=logTable.getDatabaseMeta();
    Database database=null;
    try {
      database=new Database(loggingObject,logConnection);
      database.shareVariablesWith(jobMeta);
      database.connect();
      String schemaTable=logTable.getQuotedSchemaTableCombination();
      String sql="SELECT ";
      boolean first=true;
      for (      LogTableField field : logTable.getFields()) {
        if (field.isEnabled() && field.isVisible()) {
          if (!first)           sql+=", ";
          first=false;
          sql+=logConnection.quoteField(field.getFieldName());
        }
      }
      sql+=" FROM " + schemaTable;
      RowMetaAndData params=new RowMetaAndData();
      LogTableField nameField=logTable.getNameField();
      LogTableField keyField=logTable.getKeyField();
      if (keyField != null && (logTable instanceof JobEntryLogTable || logTable instanceof ChannelLogTable)) {
        String keyFieldName=logConnection.quoteField(keyField.getFieldName());
        String maxSql="SELECT MAX(" + keyFieldName + ") FROM "+ schemaTable;
        RowMetaAndData maxRow=database.getOneRow(maxSql);
        Long lastId=maxRow.getInteger(0);
        sql+=" WHERE " + keyFieldName + " = "+ (lastId == null ? 0 : lastId.longValue());
      }
 else       if (nameField != null) {
        sql+=" WHERE " + logConnection.quoteField(nameField.getFieldName()) + " LIKE ?";
        params.addValue(new ValueMeta("transname_literal",ValueMetaInterface.TYPE_STRING),jobMeta.getName());
      }
      if (keyField != null && keyField.isEnabled()) {
        sql+=" ORDER BY " + logConnection.quoteField(keyField.getFieldName()) + " DESC";
      }
      ResultSet resultSet=database.openQuery(sql,params.getRowMeta(),params.getData());
      List<Object[]> rows=new ArrayList<Object[]>();
      Object[] rowData=database.getRow(resultSet);
      while (rowData != null) {
        rows.add(rowData);
        if (rowList.size() < Props.getInstance().getMaxNrLinesInHistory() || Props.getInstance().getMaxNrLinesInHistory() <= 0) {
          rowData=database.getRow(resultSet);
        }
 else {
          break;
        }
      }
      database.closeQuery(resultSet);
      return rows;
    }
 catch (    Exception e) {
      throw new KettleException("Error retrieveing log records for log table '" + logTable.getLogTableType(),e);
    }
 finally {
      if (database != null)       database.disconnect();
    }
  }
 else {
    return new ArrayList<Object[]>();
  }
}
