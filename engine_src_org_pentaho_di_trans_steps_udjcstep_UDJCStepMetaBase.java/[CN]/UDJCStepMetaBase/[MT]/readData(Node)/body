{
  try {
    Node definitionsNode=XMLHandler.getSubNode(stepnode,ElementNames.definitions.name());
    int nrDefinitions=XMLHandler.countNodes(definitionsNode,ElementNames.definition.name());
    for (int i=0; i < nrDefinitions; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(definitionsNode,ElementNames.definition.name(),i);
      definitions.add(new UDJCStepDef(ClassType.valueOf(XMLHandler.getTagValue(fnode,ElementNames.class_type.name())),XMLHandler.getTagValue(fnode,ElementNames.class_name.name()),XMLHandler.getTagValue(fnode,ElementNames.class_source.name())));
    }
    Node fieldsNode=XMLHandler.getSubNode(stepnode,ElementNames.fields.name());
    int nrfields=XMLHandler.countNodes(fieldsNode,ElementNames.field.name());
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fieldsNode,ElementNames.field.name(),i);
      fields.add(new FieldInfo(XMLHandler.getTagValue(fnode,ElementNames.field_name.name()),ValueMeta.getType(XMLHandler.getTagValue(fnode,ElementNames.field_type.name())),Const.toInt(XMLHandler.getTagValue(fnode,ElementNames.field_length.name()),-1),Const.toInt(XMLHandler.getTagValue(fnode,ElementNames.field_precision.name()),-1)));
    }
    setClearingResultFields(!"N".equals(XMLHandler.getTagValue(stepnode,ElementNames.clear_result_fields.name())));
    infoStepDefinitions.clear();
    Node infosNode=XMLHandler.getSubNode(stepnode,ElementNames.info_steps.name());
    int nrInfos=XMLHandler.countNodes(infosNode,ElementNames.info_step.name());
    for (int i=0; i < nrInfos; i++) {
      Node infoNode=XMLHandler.getSubNodeByNr(infosNode,ElementNames.info_step.name(),i);
      StepDefinition stepDefinition=new StepDefinition();
      stepDefinition.tag=XMLHandler.getTagValue(infoNode,ElementNames.step_tag.name());
      stepDefinition.stepName=XMLHandler.getTagValue(infoNode,ElementNames.step_name.name());
      stepDefinition.description=XMLHandler.getTagValue(infoNode,ElementNames.step_description.name());
      infoStepDefinitions.add(stepDefinition);
    }
    targetStepDefinitions.clear();
    Node targetsNode=XMLHandler.getSubNode(stepnode,ElementNames.target_steps.name());
    int nrTargets=XMLHandler.countNodes(targetsNode,ElementNames.target_step.name());
    for (int i=0; i < nrTargets; i++) {
      Node targetNode=XMLHandler.getSubNodeByNr(targetsNode,ElementNames.target_step.name(),i);
      StepDefinition stepDefinition=new StepDefinition();
      stepDefinition.tag=XMLHandler.getTagValue(targetNode,ElementNames.step_tag.name());
      stepDefinition.stepName=XMLHandler.getTagValue(targetNode,ElementNames.step_name.name());
      stepDefinition.description=XMLHandler.getTagValue(targetNode,ElementNames.step_description.name());
      targetStepDefinitions.add(stepDefinition);
    }
    usageParameters.clear();
    Node parametersNode=XMLHandler.getSubNode(stepnode,ElementNames.usage_parameters.name());
    int nrParameters=XMLHandler.countNodes(parametersNode,ElementNames.usage_parameter.name());
    for (int i=0; i < nrParameters; i++) {
      Node parameterNode=XMLHandler.getSubNodeByNr(parametersNode,ElementNames.usage_parameter.name(),i);
      UsageParameter usageParameter=new UsageParameter();
      usageParameter.tag=XMLHandler.getTagValue(parameterNode,ElementNames.parameter_tag.name());
      usageParameter.value=XMLHandler.getTagValue(parameterNode,ElementNames.parameter_value.name());
      usageParameter.description=XMLHandler.getTagValue(parameterNode,ElementNames.parameter_description.name());
      usageParameters.add(usageParameter);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"UserDefinedJavaClassMeta.Exception.UnableToLoadStepInfoFromXML"),e);
  }
}
