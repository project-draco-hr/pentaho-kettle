{
  Result result=previousResult;
  result.setResult(false);
  result.setNrErrors(0);
  int missingfiles=0;
  int nrErrors=0;
  boolean oldBehavior="Y".equalsIgnoreCase(getVariable(Const.KETTLE_COMPATIBILITY_SET_ERROR_ON_SPECIFIC_JOB_ENTRIES,"N"));
  if (arguments != null) {
    for (int i=0; i < arguments.length && !parentJob.isStopped(); i++) {
      FileObject file=null;
      try {
        String realFilefoldername=environmentSubstitute(arguments[i]);
        file=KettleVFS.getFileObject(realFilefoldername,this);
        if (file.exists() && file.isReadable()) {
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobEntryFilesExist.File_Exists",realFilefoldername));
          }
        }
 else {
          missingfiles++;
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobEntryFilesExist.File_Does_Not_Exist",realFilefoldername));
          }
        }
      }
 catch (      Exception e) {
        nrErrors++;
        missingfiles++;
        logError(BaseMessages.getString(PKG,"JobEntryFilesExist.ERROR_0004_IO_Exception",e.toString()),e);
      }
 finally {
        if (file != null) {
          try {
            file.close();
            file=null;
          }
 catch (          IOException ex) {
          }
        }
      }
    }
  }
  result.setNrErrors(nrErrors);
  if (oldBehavior) {
    result.setNrErrors(missingfiles);
  }
  if (missingfiles == 0) {
    result.setResult(true);
  }
  return result;
}
