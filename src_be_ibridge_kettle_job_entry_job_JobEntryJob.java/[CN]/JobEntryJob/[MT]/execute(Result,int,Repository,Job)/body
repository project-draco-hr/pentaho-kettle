{
  LogWriter log=LogWriter.getInstance();
  Result result=prev_result;
  result.setEntryNr(nr);
  LogWriter logwriter=log;
  if (setLogfile)   logwriter=LogWriter.getInstance(getLogFilename(),true,loglevel);
  try {
    JobMeta jobMeta=null;
    if (rep != null && jobname != null && jobname.length() > 0 && directory != null) {
      log.logDetailed(toString(),"Loading job from repository : [" + directory + " : "+ jobname+ "]");
      jobMeta=new JobMeta(logwriter,rep,jobname,directory);
    }
 else     if (filename != null) {
      log.logDetailed(toString(),"Loading job from XML file : [" + filename + "]");
      jobMeta=new JobMeta(logwriter,filename);
    }
    if (jobMeta == null) {
      throw new KettleException("Unable to load the job: please specify the name and repository directory OR a filename");
    }
    Job job=new Job(logwriter,StepLoader.getInstance(),rep,jobMeta);
    parentJob.getJobTracker().addJobTracker(job.getJobTracker());
    job.getJobTracker().setParentJobTracker(parentJob.getJobTracker());
    if (parentJob.getJobMeta().isBatchIdPassed()) {
      job.getJobMeta().setBatchId(parentJob.getJobMeta().getBatchId());
    }
    int runNr=0;
    int nrRuns=1;
    boolean forEvery=false;
    if (prev_result.getRows() != null)     nrRuns=prev_result.getRows().size();
    while (runNr < nrRuns && result.getResult()) {
      Result pass;
      if (forEvery) {
        pass=(Result)prev_result.clone();
        ArrayList passRows=new ArrayList();
        passRows.add(prev_result.getRows().get(runNr));
        pass.setRows(passRows);
      }
 else {
        pass=prev_result;
      }
      JobEntryJobRunner runner=new JobEntryJobRunner(job,prev_result,nr);
      new Thread(runner).start();
      while (!runner.isFinished() && !parentJob.isStopped()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
      if (parentJob.isStopped()) {
        job.stopAll();
        runner.waitUntilFinished();
        job.endProcessing("stop");
      }
 else {
        job.endProcessing("end");
      }
      Result oneResult=runner.getResult();
      if (runNr == 0) {
        result=oneResult;
      }
 else {
        result.add(oneResult);
      }
      runNr++;
    }
  }
 catch (  KettleException je) {
    log.logError(toString(),"Unable to open job entry job with name [" + getName() + "] : "+ Const.CR+ je.toString());
    result.setNrErrors(1);
  }
  if (setLogfile)   logwriter.close();
  if (result.getNrErrors() > 0) {
    result.setResult(false);
  }
 else {
    result.setResult(true);
  }
  return result;
}
