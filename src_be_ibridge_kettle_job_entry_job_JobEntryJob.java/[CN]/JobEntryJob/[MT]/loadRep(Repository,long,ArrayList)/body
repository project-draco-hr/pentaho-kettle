{
  try {
    super.loadRep(rep,id_jobentry,databases);
    long id_job_attr=rep.getJobEntryAttributeInteger(id_jobentry,"id_job");
    Row r=rep.getJob(id_job_attr);
    if (r != null) {
      jobname=r.getString("NAME",null);
      long id_directory=r.getInteger("ID_DIRECTORY",0L);
      if (id_directory > 0) {
        directory=rep.getDirectoryTree().findDirectory(id_directory);
      }
 else {
        directory=rep.getDirectoryTree();
      }
    }
    filename=rep.getJobEntryAttributeString(id_jobentry,"filename");
    argFromPrevious=rep.getJobEntryAttributeBoolean(id_jobentry,"arg_from_previous");
    runEveryResultRow=rep.getJobEntryAttributeBoolean(id_jobentry,"run_every_result_row");
    setLogfile=rep.getJobEntryAttributeBoolean(id_jobentry,"set_logfile");
    addDate=rep.getJobEntryAttributeBoolean(id_jobentry,"add_date");
    addTime=rep.getJobEntryAttributeBoolean(id_jobentry,"arg_time");
    logfile=rep.getJobEntryAttributeString(id_jobentry,"logfile");
    logext=rep.getJobEntryAttributeString(id_jobentry,"logext");
    loglevel=LogWriter.getLogLevel(rep.getJobEntryAttributeString(id_jobentry,"loglevel"));
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"argument");
    arguments=new String[argnr];
    for (int a=0; a < argnr; a++) {
      arguments[a]=rep.getJobEntryAttributeString(id_jobentry,a,"argument");
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to load job entry of type 'job' from the repository with id_jobentry=" + id_jobentry,dbe);
  }
}
