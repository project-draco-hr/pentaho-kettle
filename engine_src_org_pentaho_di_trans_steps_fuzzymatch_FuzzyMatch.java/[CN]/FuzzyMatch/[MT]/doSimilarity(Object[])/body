{
  Object[] rowData=buildEmptyRow();
  Iterator<Object[]> it=data.look.iterator();
  double similarity=0;
  Object o=row[data.indexOfMainField];
  String lookupvalue=o == null ? "" : (String)o;
  while (it.hasNext()) {
    Object[] cachedData=it.next();
    String cacheValue=(String)cachedData[0];
    double csimilarity=new Double(0);
switch (meta.getAlgorithmType()) {
case FuzzyMatchMeta.OPERATION_TYPE_JARO:
      csimilarity=new Jaro().score(cacheValue,lookupvalue);
    break;
case FuzzyMatchMeta.OPERATION_TYPE_JARO_WINKLER:
  csimilarity=new JaroWinkler().score(cacheValue,lookupvalue);
break;
default :
csimilarity=LetterPairSimilarity.getSimiliarity(cacheValue,lookupvalue);
break;
}
if (data.minimalSimilarity <= csimilarity && csimilarity <= data.maximalSimilarity) {
if (meta.isGetCloserValue()) {
if (csimilarity > similarity || (csimilarity == 0 && cacheValue.equals(lookupvalue))) {
similarity=csimilarity;
int index=0;
rowData[index++]=cacheValue;
if (data.addValueFieldName) {
rowData[index++]=new Double(similarity);
}
if (data.addAdditionalFields) {
for (int i=0; i < meta.getValue().length; i++) {
  int nf=i + index;
  int nr=i + 1;
  rowData[nf]=cachedData[nr];
}
}
}
}
 else {
if (rowData[0] == null) {
rowData[0]=cacheValue;
}
 else {
rowData[0]=(String)rowData[0] + data.valueSeparator + cacheValue;
}
}
}
}
return rowData;
}
