{
  try {
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldName[i]=rep.getStepAttributeString(id_step,i,"field_name");
      variableString[i]=rep.getStepAttributeString(id_step,i,"field_variable");
      fieldType[i]=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      fieldFormat[i]=rep.getStepAttributeString(id_step,i,"field_format");
      currency[i]=rep.getStepAttributeString(id_step,i,"field_currency");
      decimal[i]=rep.getStepAttributeString(id_step,i,"field_decimal");
      group[i]=rep.getStepAttributeString(id_step,i,"field_group");
      fieldLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      fieldPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
      trimType[i]=ValueMeta.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type"));
      if (fieldType[i] == ValueMetaInterface.TYPE_NONE) {
        fieldType[i]=ValueMetaInterface.TYPE_STRING;
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
