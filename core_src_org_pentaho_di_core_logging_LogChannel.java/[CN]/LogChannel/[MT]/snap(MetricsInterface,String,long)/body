{
  if (!isGatheringMetrics())   return;
  String key=MetricsSnapshot.getKey(metric,subject);
switch (metric.getType()) {
case MAX:
{
      if (value.length != 1)       break;
      Map<String,MetricsSnapshotInterface> metricsMap=metricsRegistry.getSnapshotMap(logChannelId);
      MetricsSnapshotInterface snapshot=metricsMap.get(key);
      if (snapshot != null) {
        if (value[0] > snapshot.getValue()) {
          snapshot.setValue(value[0]);
          snapshot.setDate(new Date());
        }
      }
 else {
        snapshot=new MetricsSnapshot(MetricsSnapshotType.MAX,metric,subject,value[0],logChannelId);
        metricsMap.put(key,snapshot);
      }
    }
  break;
case MIN:
{
  if (value.length != 1)   break;
  Map<String,MetricsSnapshotInterface> metricsMap=metricsRegistry.getSnapshotMap(logChannelId);
  MetricsSnapshotInterface snapshot=metricsMap.get(key);
  if (snapshot != null) {
    if (value[0] < snapshot.getValue()) {
      snapshot.setValue(value[0]);
      snapshot.setDate(new Date());
    }
  }
 else {
    snapshot=new MetricsSnapshot(MetricsSnapshotType.MIN,metric,subject,value[0],logChannelId);
    metricsMap.put(key,snapshot);
  }
}
break;
case SUM:
{
Map<String,MetricsSnapshotInterface> metricsMap=metricsRegistry.getSnapshotMap(logChannelId);
MetricsSnapshotInterface snapshot=metricsMap.get(key);
if (snapshot != null) {
snapshot.setValue(snapshot.getValue() + value[0]);
}
 else {
snapshot=new MetricsSnapshot(MetricsSnapshotType.SUM,metric,subject,value[0],logChannelId);
metricsMap.put(key,snapshot);
}
}
break;
case COUNT:
{
Map<String,MetricsSnapshotInterface> metricsMap=metricsRegistry.getSnapshotMap(logChannelId);
MetricsSnapshotInterface snapshot=metricsMap.get(key);
if (snapshot != null) {
snapshot.setValue(snapshot.getValue() + 1L);
}
 else {
snapshot=new MetricsSnapshot(MetricsSnapshotType.COUNT,metric,subject,1L,logChannelId);
metricsMap.put(key,snapshot);
}
}
break;
case START:
{
Deque<MetricsSnapshotInterface> metricsList=metricsRegistry.getSnapshotList(logChannelId);
MetricsSnapshotInterface snapshot=new MetricsSnapshot(MetricsSnapshotType.START,metric,subject,1L,logChannelId);
metricsList.add(snapshot);
}
break;
case STOP:
{
Deque<MetricsSnapshotInterface> metricsList=metricsRegistry.getSnapshotList(logChannelId);
MetricsSnapshotInterface snapshot=new MetricsSnapshot(MetricsSnapshotType.STOP,metric,subject,1L,logChannelId);
metricsList.add(snapshot);
}
break;
default :
break;
}
}
