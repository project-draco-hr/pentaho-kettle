{
  List<StringEvaluationResult> all=new ArrayList<StringEvaluationResult>(evaluationResults);
  ValueMetaInterface stringMetaClone=null;
  for (  StringEvaluationResult cmm : all) {
    if (cmm.getConversionMeta().isBoolean()) {
      String string;
      if (tryTrimming) {
        string=Const.trim(value);
      }
 else {
        string=value;
      }
      if (StringUtils.isEmpty(value)) {
        cmm.incrementNrNull();
      }
 else       if (!("Y".equalsIgnoreCase(string) || "N".equalsIgnoreCase(string) || "TRUE".equalsIgnoreCase(string)|| "FALSE".equalsIgnoreCase(string))) {
        evaluationResults.remove(cmm);
      }
 else {
        cmm.incrementSuccesses();
      }
    }
 else     if (cmm.getConversionMeta().isDate()) {
      String dateFormat=cmm.getConversionMeta().getConversionMask();
      if (!DateDetector.isValidDateFormatToStringDate(dateFormat,value,"en_US")) {
        evaluationResults.remove(cmm);
      }
 else {
        try {
          Object object=DateDetector.getDateFromStringByFormat(value,dateFormat);
          cmm.incrementSuccesses();
          if (cmm.getMin() == null || cmm.getConversionMeta().compare(cmm.getMin(),object) > 0) {
            cmm.setMin(object);
          }
          if (cmm.getMax() == null || cmm.getConversionMeta().compare(cmm.getMax(),object) < 0) {
            cmm.setMax(object);
          }
        }
 catch (        ParseException e) {
          evaluationResults.remove(cmm);
        }
catch (        KettleValueException e) {
          evaluationResults.remove(cmm);
        }
      }
    }
 else {
      try {
        if (cmm.getConversionMeta().isNumeric()) {
          boolean stop=false;
          int nrDots=0;
          int nrCommas=0;
          int pos=0;
          for (          char c : value.toCharArray()) {
            boolean currencySymbolMatch=!String.valueOf(c).equals(cmm.getConversionMeta().getCurrencySymbol()) && c != '(' && c != ')';
            if (!Character.isDigit(c) && c != '.' && c != ',' && !Character.isSpaceChar(c) && currencySymbolMatch && (pos > 0 && (c == '+' || c == '-'))) {
              evaluationResults.remove(cmm);
              stop=true;
              break;
            }
            if ((c == '.' && cmm.getConversionMeta().isInteger()) || (c == ',' && cmm.getConversionMeta().isInteger())) {
              evaluationResults.remove(cmm);
              stop=true;
              break;
            }
            if (c == '.') {
              nrDots++;
            }
            if (c == ',') {
              nrCommas++;
            }
            pos++;
          }
          if (nrDots > 1 && nrCommas > 1) {
            evaluationResults.remove(cmm);
            stop=true;
          }
          if (stop) {
            continue;
          }
        }
        if (stringMetaClone == null) {
          stringMetaClone=stringMeta.clone();
        }
        stringMetaClone.setConversionMetadata(cmm.getConversionMeta());
        stringMetaClone.setTrimType(cmm.getConversionMeta().getTrimType());
        Object object=stringMetaClone.convertDataUsingConversionMetaData(value);
        if (cmm.getConversionMeta().isNull(object)) {
          cmm.incrementNrNull();
        }
 else {
          cmm.incrementSuccesses();
        }
        if (cmm.getMin() == null || cmm.getConversionMeta().compare(cmm.getMin(),object) > 0) {
          cmm.setMin(object);
        }
        if (cmm.getMax() == null || cmm.getConversionMeta().compare(cmm.getMax(),object) < 0) {
          cmm.setMax(object);
        }
      }
 catch (      KettleValueException e) {
        evaluationResults.remove(cmm);
      }
    }
  }
}
