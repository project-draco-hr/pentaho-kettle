{
  try {
    super.loadRep(rep,id_jobentry,databases);
    serverName=rep.getJobEntryAttributeString(id_jobentry,"servername");
    int intServerPort=(int)rep.getJobEntryAttributeInteger(id_jobentry,"serverport");
    serverPort=rep.getJobEntryAttributeString(id_jobentry,"serverport");
    if (intServerPort > 0 && Const.isEmpty(serverPort))     serverPort=Integer.toString(intServerPort);
    userName=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=rep.getJobEntryAttributeString(id_jobentry,"password");
    sftpDirectory=rep.getJobEntryAttributeString(id_jobentry,"sftpdirectory");
    targetDirectory=rep.getJobEntryAttributeString(id_jobentry,"targetdirectory");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    binaryMode=rep.getJobEntryAttributeBoolean(id_jobentry,"binary");
    timeout=(int)rep.getJobEntryAttributeInteger(id_jobentry,"timeout");
    remove=rep.getJobEntryAttributeBoolean(id_jobentry,"remove");
    onlyPuttingNewFiles=rep.getJobEntryAttributeBoolean(id_jobentry,"only_new");
    activeConnection=rep.getJobEntryAttributeBoolean(id_jobentry,"active");
    controlEncoding=rep.getJobEntryAttributeString(id_jobentry,"control_encoding");
    if (controlEncoding == null) {
      controlEncoding=LEGACY_CONTROL_ENCODING;
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'SFTP' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
