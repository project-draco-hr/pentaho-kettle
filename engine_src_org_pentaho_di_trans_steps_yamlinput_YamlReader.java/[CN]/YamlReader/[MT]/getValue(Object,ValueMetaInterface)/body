{
  if (value == null)   return null;
  Object o=null;
  if (value instanceof List) {
    value=getYaml().dump(value);
  }
switch (valueMeta.getType()) {
case ValueMeta.TYPE_INTEGER:
    if (value instanceof Integer) {
      o=new Long((Integer)value);
    }
 else     if (value instanceof BigInteger) {
      o=new Long(((BigInteger)value).longValue());
    }
 else     if (value instanceof Long) {
      o=new Long((Long)value);
    }
 else {
      o=new Long(value.toString());
    }
  break;
case ValueMeta.TYPE_NUMBER:
if (value instanceof Integer) {
  o=new Double((Integer)value);
}
 else if (value instanceof BigInteger) {
  o=new Double(((BigInteger)value).doubleValue());
}
 else if (value instanceof Long) {
  o=new Double((Long)value);
}
 else if (value instanceof Double) {
  o=value;
}
 else {
  o=new Double((String)value);
}
break;
case ValueMeta.TYPE_BIGNUMBER:
if (value instanceof Integer) {
o=new BigDecimal((Integer)value);
}
 else if (value instanceof BigInteger) {
o=new BigDecimal((BigInteger)value);
}
 else if (value instanceof Long) {
o=new BigDecimal((Long)value);
}
 else if (value instanceof Double) {
o=new BigDecimal((Double)value);
}
break;
case ValueMeta.TYPE_BOOLEAN:
o=value;
break;
case ValueMeta.TYPE_DATE:
o=value;
break;
case ValueMeta.TYPE_BINARY:
o=value;
break;
default :
String s=setMap(value);
switch (valueMeta.getTrimType()) {
case YamlInputField.TYPE_TRIM_LEFT:
s=Const.ltrim(s);
break;
case YamlInputField.TYPE_TRIM_RIGHT:
s=Const.rtrim(s);
break;
case YamlInputField.TYPE_TRIM_BOTH:
s=Const.trim(s);
break;
default :
break;
}
o=s;
break;
}
return o;
}
