{
  if (!running) {
    try {
      this.lastTransDebugMeta=transDebugMeta;
      log.setLogLevel(executionConfiguration.getLogLevel());
      if (log.isDetailed()) {
        log.logDetailed(BaseMessages.getString(PKG,"TransLog.Log.DoPreview"));
      }
      String[] args=null;
      Map<String,String> arguments=executionConfiguration.getArguments();
      if (arguments != null) {
        args=convertArguments(arguments);
      }
      transMeta.injectVariables(executionConfiguration.getVariables());
      Map<String,String> paramMap=executionConfiguration.getParams();
      Set<String> keys=paramMap.keySet();
      for (      String key : keys) {
        transMeta.setParameterValue(key,Const.NVL(paramMap.get(key),""));
      }
      transMeta.activateParameters();
      if (executionConfiguration.isClearingLog()) {
        transLogDelegate.clearLog();
      }
      if (trans != null) {
        KettleLogStore.discardLines(trans.getLogChannelId(),false);
        LoggingRegistry.getInstance().removeIncludingChildren(trans.getLogChannelId());
      }
      trans=new Trans(transMeta);
      trans.setSafeModeEnabled(executionConfiguration.isSafeModeEnabled());
      trans.setPreview(true);
      trans.setGatheringMetrics(executionConfiguration.isGatheringMetrics());
      trans.setMetaStore(spoon.getMetaStore());
      trans.prepareExecution(args);
      trans.setRepository(spoon.rep);
      List<SpoonUiExtenderPluginInterface> relevantExtenders=SpoonUiExtenderPluginType.getInstance().getRelevantExtenders(TransDebugMetaWrapper.class,PREVIEW_TRANS);
      TransDebugMetaWrapper transDebugMetaWrapper=new TransDebugMetaWrapper(trans,transDebugMeta);
      for (      SpoonUiExtenderPluginInterface relevantExtender : relevantExtenders) {
        relevantExtender.uiEvent(transDebugMetaWrapper,PREVIEW_TRANS);
      }
      transDebugMeta.addRowListenersToTransformation(trans);
      final TransPreviewDialog previewRowsDialog=new TransPreviewDialog(shell,transMeta,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.APPLICATION_MODAL| SWT.SHEET,BaseMessages.getString(PKG,"PreviewRowsDialog.Title"),new Runnable(){
        @Override public void run(){
          pauseResume();
        }
      }
,new Runnable(){
        @Override public void run(){
          stop();
        }
      }
);
      transDebugMeta.addBreakPointListers(new BreakPointListener(){
        public void breakPointHit(        TransDebugMeta transDebugMeta,        StepDebugMeta stepDebugMeta,        RowMetaInterface rowBufferMeta,        List<Object[]> rowBuffer){
          if (isDisposed()) {
            return;
          }
          shell.getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              spoon.enableMenus();
              pausing=true;
              setControlStates();
              checkErrorVisuals();
            }
          }
);
          previewRowsDialog.setData(stepDebugMeta,rowBufferMeta,new ArrayList<Object[]>(rowBuffer));
          rowBuffer.clear();
          shell.getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              setControlStates();
              checkErrorVisuals();
            }
          }
);
        }
      }
);
      if (transPreviewDelegate.isActive()) {
        transPreviewDelegate.capturePreviewData(trans,transMeta.getSteps());
      }
      startThreads();
      debug=true;
      shell.getDisplay().asyncExec(new Runnable(){
        public void run(){
          addAllTabs();
        }
      }
);
      previewRowsDialog.open();
    }
 catch (    Exception e) {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"TransLog.Dialog.UnexpectedErrorDuringPreview.Title"),BaseMessages.getString(PKG,"TransLog.Dialog.UnexpectedErrorDuringPreview.Message"),e);
    }
  }
 else {
    MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
    m.setText(BaseMessages.getString(PKG,"TransLog.Dialog.DoNoPreviewWhileRunning.Title"));
    m.setMessage(BaseMessages.getString(PKG,"TransLog.Dialog.DoNoPreviewWhileRunning.Message"));
    m.open();
  }
  checkErrorVisuals();
}
