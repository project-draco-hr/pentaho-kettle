{
  handleTransMetaChanges(transMeta);
  if (((transMeta.getName() != null && transMeta.getObjectId() != null && spoon.rep != null) || (transMeta.getFilename() != null && spoon.rep == null)) && !transMeta.hasChanged()) {
    if (trans == null || (trans != null && !running)) {
      try {
        DefaultLogLevel.setLogLevel(executionConfiguration.getLogLevel());
        transMeta.injectVariables(executionConfiguration.getVariables());
        Map<String,String> paramMap=executionConfiguration.getParams();
        Set<String> keys=paramMap.keySet();
        for (        String key : keys) {
          transMeta.setParameterValue(key,Const.NVL(paramMap.get(key),""));
        }
        transMeta.activateParameters();
        if (executionConfiguration.isClearingLog()) {
          transLogDelegate.clearLog();
        }
        if (trans != null) {
          KettleLogStore.discardLines(trans.getLogChannelId(),true);
        }
        trans=new Trans(transMeta,spoon.rep,transMeta.getName(),transMeta.getRepositoryDirectory().getPath(),transMeta.getFilename());
        trans.setRepository(spoon.getRepository());
        trans.setMetaStore(spoon.getMetaStore());
        String spoonLogObjectId=UUID.randomUUID().toString();
        SimpleLoggingObject spoonLoggingObject=new SimpleLoggingObject("SPOON",LoggingObjectType.SPOON,null);
        spoonLoggingObject.setContainerObjectId(spoonLogObjectId);
        spoonLoggingObject.setLogLevel(executionConfiguration.getLogLevel());
        trans.setParent(spoonLoggingObject);
        trans.setLogLevel(executionConfiguration.getLogLevel());
        trans.setReplayDate(executionConfiguration.getReplayDate());
        trans.setRepository(executionConfiguration.getRepository());
        trans.setMonitored(true);
        log.logBasic(BaseMessages.getString(PKG,"TransLog.Log.TransformationOpened"));
      }
 catch (      KettleException e) {
        trans=null;
        new ErrorDialog(shell,BaseMessages.getString(PKG,"TransLog.Dialog.ErrorOpeningTransformation.Title"),BaseMessages.getString(PKG,"TransLog.Dialog.ErrorOpeningTransformation.Message"),e);
      }
      if (trans != null) {
        Map<String,String> arguments=executionConfiguration.getArguments();
        final String[] args;
        if (arguments != null) {
          args=convertArguments(arguments);
        }
 else {
          args=null;
        }
        log.logMinimal(BaseMessages.getString(PKG,"TransLog.Log.LaunchingTransformation") + trans.getTransMeta().getName() + "]...");
        trans.setSafeModeEnabled(executionConfiguration.isSafeModeEnabled());
        trans.setGatheringMetrics(executionConfiguration.isGatheringMetrics());
        final Thread parentThread=Thread.currentThread();
        shell.getDisplay().asyncExec(new Runnable(){
          public void run(){
            addAllTabs();
            prepareTrans(parentThread,args);
          }
        }
);
        log.logMinimal(BaseMessages.getString(PKG,"TransLog.Log.StartedExecutionOfTransformation"));
        setControlStates();
      }
    }
 else {
      MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
      m.setText(BaseMessages.getString(PKG,"TransLog.Dialog.DoNoStartTransformationTwice.Title"));
      m.setMessage(BaseMessages.getString(PKG,"TransLog.Dialog.DoNoStartTransformationTwice.Message"));
      m.open();
    }
  }
 else {
    if (transMeta.hasChanged()) {
      MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
      m.setText(BaseMessages.getString(PKG,"TransLog.Dialog.SaveTransformationBeforeRunning.Title"));
      m.setMessage(BaseMessages.getString(PKG,"TransLog.Dialog.SaveTransformationBeforeRunning.Message"));
      m.open();
    }
 else     if (spoon.rep != null && transMeta.getName() == null) {
      MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
      m.setText(BaseMessages.getString(PKG,"TransLog.Dialog.GiveTransformationANameBeforeRunning.Title"));
      m.setMessage(BaseMessages.getString(PKG,"TransLog.Dialog.GiveTransformationANameBeforeRunning.Message"));
      m.open();
    }
 else {
      MessageBox m=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
      m.setText(BaseMessages.getString(PKG,"TransLog.Dialog.SaveTransformationBeforeRunning2.Title"));
      m.setMessage(BaseMessages.getString(PKG,"TransLog.Dialog.SaveTransformationBeforeRunning2.Message"));
      m.open();
    }
  }
}
