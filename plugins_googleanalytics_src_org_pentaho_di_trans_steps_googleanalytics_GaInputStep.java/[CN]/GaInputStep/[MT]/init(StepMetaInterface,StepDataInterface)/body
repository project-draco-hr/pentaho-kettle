{
  meta=(GaInputStepMeta)smi;
  data=(GaInputStepData)sdi;
  if (!super.init(smi,sdi)) {
    return false;
  }
  String[] types=environmentSubstitute(meta.getFeedFieldType());
  if (types != null) {
    for (    String type : types) {
      if (GaInputStepMeta.DEPRECATED_FIELD_TYPE_CONFIDENCE_INTERVAL.equals(type)) {
        logError(BaseMessages.getString(PKG,"GoogleAnalytics.Warn.FieldTypeNotSupported",GaInputStepMeta.DEPRECATED_FIELD_TYPE_CONFIDENCE_INTERVAL));
      }
    }
  }
  String appName=environmentSubstitute(meta.getGaAppName());
  String serviceAccount=environmentSubstitute(meta.getOAuthServiceAccount());
  String OAuthKeyFile=environmentSubstitute(meta.getOAuthKeyFile());
  if (log.isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"GoogleAnalyticsDialog.AppName.Label") + ": " + appName);
    logDetailed(BaseMessages.getString(PKG,"GoogleAnalyticsDialog.OauthAccount.Label") + ": " + serviceAccount);
    logDetailed(BaseMessages.getString(PKG,"GoogleAnalyticsDialog.KeyFile.Label") + ": " + OAuthKeyFile);
  }
  try {
    analytics=GoogleAnalyticsApiFacade.createFor(appName,serviceAccount,OAuthKeyFile).getAnalytics();
    accountName=analytics.management().accounts().list().execute().getItems().iterator().next().getName();
  }
 catch (  Exception e) {
    logError(e.toString());
    return false;
  }
  return true;
}
