{
  LogWriter log=LogWriter.getInstance();
  int count;
  byte[] buffer=new byte[4096];
  KettleDependencies deps=new KettleDependencies(transMeta);
  File karFile=new File("kettle.kar");
  String classPath="";
  JarOutputStream jarOutputStream=null;
  try {
    jarOutputStream=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(karFile)));
    for (int i=0; i < deps.getLibraryFiles().length; i++) {
      String libFilename=deps.getLibraryFiles()[i];
      classPath+=" " + libFilename;
      File libFile=new File(libFilename);
      JarEntry jarEntry=new JarEntry(libFile.getPath());
      jarOutputStream.putNextEntry(jarEntry);
      BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(libFile));
      while ((count=inputStream.read(buffer)) != -1)       jarOutputStream.write(buffer,0,count);
      inputStream.close();
      jarOutputStream.closeEntry();
    }
    String strManifest=Attributes.Name.MAIN_CLASS.toString() + ": " + (JarPan.class.getName())+ Const.CR;
    strManifest+=Attributes.Name.CLASS_PATH.toString() + ":" + classPath+ Const.CR;
    File manifestFile=new File("Manifest.mf");
    FileOutputStream fos=new FileOutputStream(manifestFile);
    fos.write(strManifest.getBytes());
    fos.close();
    JarEntry jarEntry=new JarEntry("meta-inf/Manifest.mf");
    jarOutputStream.putNextEntry(jarEntry);
    FileInputStream inputStream=new FileInputStream(manifestFile);
    while ((count=inputStream.read(buffer)) != -1)     jarOutputStream.write(buffer,0,count);
    inputStream.close();
    jarOutputStream.closeEntry();
    String strTrans=transMeta.getXML();
    File transFile=new File(TRANSFORMATION_FILENAME);
    fos=new FileOutputStream(transFile);
    fos.write(strTrans.getBytes());
    fos.close();
    jarEntry=new JarEntry(TRANSFORMATION_FILENAME);
    jarOutputStream.putNextEntry(jarEntry);
    inputStream=new FileInputStream(transFile);
    while ((count=inputStream.read(buffer)) != -1)     jarOutputStream.write(buffer,0,count);
    inputStream.close();
    jarOutputStream.closeEntry();
  }
 catch (  Exception e) {
    log.logError(JarfileGenerator.class.getName(),"Error zipping files into archive [" + karFile.getPath() + "] : "+ e.toString());
    log.logError(JarfileGenerator.class.getName(),Const.getStackTracker(e));
  }
 finally {
    if (jarOutputStream != null) {
      try {
        jarOutputStream.flush();
        jarOutputStream.finish();
        jarOutputStream.close();
      }
 catch (      IOException e) {
        log.logError(JarfileGenerator.class.getName(),"Unable to close kar archive zip file archive : " + e.toString());
        log.logError(JarfileGenerator.class.getName(),Const.getStackTracker(e));
      }
    }
  }
}
