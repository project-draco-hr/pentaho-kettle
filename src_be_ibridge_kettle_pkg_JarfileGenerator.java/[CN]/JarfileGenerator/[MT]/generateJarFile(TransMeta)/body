{
  int count;
  byte[] buffer=new byte[4096];
  KettleDependencies deps=new KettleDependencies(transMeta);
  File kar=new File("kar");
  if (kar.exists())   deleteDirectory(kar);
  kar.mkdir();
  File libDir=new File(kar.getPath() + Const.FILE_SEPARATOR + "lib");
  libDir.mkdir();
  File libextDir=new File(kar.getPath() + Const.FILE_SEPARATOR + "libext");
  libextDir.mkdir();
  Value karFilename=new Value("filename","kettle.jar");
  if (!Const.isEmpty(transMeta.getFilename())) {
    karFilename.setValue(transMeta.getFilename());
    karFilename.replace(" ","_").replace(".","_").lower();
    karFilename.setValue(karFilename.getString() + ".kar");
  }
  karFilename.setValue(karFilename.getString());
  File karFile=new File(karFilename.getString());
  String classPath="";
  try {
    for (int i=0; i < deps.getLibraryFiles().length; i++) {
      String libFilename=deps.getLibraryFiles()[i];
      classPath+=" " + libFilename;
      File libFile=new File(libFilename);
      File target=new File(kar.getPath() + Const.FILE_SEPARATOR + libFilename);
      FileOutputStream fileOutputStream=new FileOutputStream(target);
      BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(libFile));
      while ((count=inputStream.read(buffer)) != -1)       fileOutputStream.write(buffer,0,count);
      inputStream.close();
      fileOutputStream.close();
    }
    String strManifest="";
    strManifest+="Manifest-Version: 1.0" + Const.CR;
    strManifest+="Created-By: Kettle version " + Const.VERSION + Const.CR;
    strManifest+=Attributes.Name.MAIN_CLASS.toString() + ": " + (JarPan.class.getName())+ Const.CR;
    strManifest+=Attributes.Name.CLASS_PATH.toString() + ":" + classPath+ Const.CR;
    File manifestFile=new File(kar.getPath() + Const.FILE_SEPARATOR + "manifest.mf");
    FileOutputStream fos=new FileOutputStream(manifestFile);
    fos.write(strManifest.getBytes());
    fos.close();
    String strTrans=transMeta.getXML();
    File transFile=new File(kar.getPath() + Const.FILE_SEPARATOR + TRANSFORMATION_FILENAME);
    fos=new FileOutputStream(transFile);
    fos.write(strTrans.getBytes());
    fos.close();
    executeJarCommand(kar,karFile,new File(manifestFile.getPath()),new File(TRANSFORMATION_FILENAME),new File[]{new File("lib"),new File("libext")});
  }
 catch (  Exception e) {
    log.logError(JarfileGenerator.class.getName(),"Error zipping files into archive [" + karFile.getPath() + "] : "+ e.toString());
    log.logError(JarfileGenerator.class.getName(),Const.getStackTracker(e));
  }
}
