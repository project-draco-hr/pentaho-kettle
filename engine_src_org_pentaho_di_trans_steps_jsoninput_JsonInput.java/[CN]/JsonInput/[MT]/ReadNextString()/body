{
  try {
    data.readrow=getRow();
    if (data.readrow == null) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JsonInput.Log.FinishedProcessing"));
      }
      return false;
    }
    if (first) {
      first=false;
      data.inputRowMeta=getInputRowMeta();
      data.outputRowMeta=data.inputRowMeta.clone();
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
      data.totalpreviousfields=data.inputRowMeta.size();
      data.convertRowMeta=data.outputRowMeta.cloneToType(ValueMetaInterface.TYPE_STRING);
      if (Const.isEmpty(meta.getFieldValue())) {
        logError(BaseMessages.getString(PKG,"JsonInput.Log.NoField"));
        throw new KettleException(BaseMessages.getString(PKG,"JsonInput.Log.NoField"));
      }
      if (data.indexSourceField < 0) {
        data.indexSourceField=getInputRowMeta().indexOfValue(meta.getFieldValue());
        if (data.indexSourceField < 0) {
          logError(BaseMessages.getString(PKG,"JsonInput.Log.ErrorFindingField",meta.getFieldValue()));
          throw new KettleException(BaseMessages.getString(PKG,"JsonInput.Exception.CouldnotFindField",meta.getFieldValue()));
        }
      }
    }
    String fieldValue=getInputRowMeta().getString(data.readrow,data.indexSourceField);
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JsonInput.Log.SourceValue",meta.getFieldValue(),fieldValue));
    }
    if (meta.getIsAFile()) {
      data.file=KettleVFS.getFileObject(fieldValue,getTransMeta());
      if (meta.isIgnoreEmptyFile() && data.file.getContent().getSize() == 0) {
        logBasic(BaseMessages.getString(PKG,"JsonInput.Error.FileSizeZero",data.file.getName()));
        ReadNextString();
      }
    }
 else {
      data.stringToParse=fieldValue;
    }
    readFileOrString();
  }
 catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"JsonInput.Log.UnexpectedError",e.toString()));
    stopAll();
    logError(Const.getStackTracker(e));
    setErrors(1);
    return false;
  }
  return true;
}
