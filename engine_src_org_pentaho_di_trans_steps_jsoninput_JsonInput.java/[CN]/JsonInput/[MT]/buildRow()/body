{
  Object[] outputRowData=null;
  if (data.readrow != null) {
    outputRowData=data.readrow.clone();
  }
 else {
    outputRowData=buildEmptyRow();
  }
  for (int i=0; i < data.nrInputFields; i++) {
    JsonInputField field=meta.getInputFields()[i];
    JSONArray jsona=data.resultList.get(i).getJSONArray();
    String nodevalue=null;
    if (jsona != null) {
      Object jo=jsona.get(data.recordnr);
      if (jo != null) {
        nodevalue=jo.toString();
      }
    }
switch (field.getTrimType()) {
case JsonInputField.TYPE_TRIM_LEFT:
      nodevalue=Const.ltrim(nodevalue);
    break;
case JsonInputField.TYPE_TRIM_RIGHT:
  nodevalue=Const.rtrim(nodevalue);
break;
case JsonInputField.TYPE_TRIM_BOTH:
nodevalue=Const.trim(nodevalue);
break;
default :
break;
}
if (meta.isInFields()) {
outputRowData=RowDataUtil.addValueData(outputRowData,data.totalpreviousfields + i,nodevalue);
}
ValueMetaInterface targetValueMeta=data.outputRowMeta.getValueMeta(data.totalpreviousfields + i);
ValueMetaInterface sourceValueMeta=data.convertRowMeta.getValueMeta(data.totalpreviousfields + i);
outputRowData[data.totalpreviousfields + i]=targetValueMeta.convertData(sourceValueMeta,nodevalue);
if (meta.getInputFields()[i].isRepeated()) {
if (data.previousRow != null && Const.isEmpty(nodevalue)) {
outputRowData[data.totalpreviousfields + i]=data.previousRow[data.totalpreviousfields + i];
}
}
}
int rowIndex=data.totalpreviousfields + data.nrInputFields;
if (meta.includeFilename() && !Const.isEmpty(meta.getFilenameField())) {
outputRowData[rowIndex++]=data.filename;
}
if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField())) {
outputRowData[rowIndex++]=new Long(data.rownr);
}
if (meta.getShortFileNameField() != null && meta.getShortFileNameField().length() > 0) {
outputRowData[rowIndex++]=data.shortFilename;
}
if (meta.getExtensionField() != null && meta.getExtensionField().length() > 0) {
outputRowData[rowIndex++]=data.extension;
}
if (meta.getPathField() != null && meta.getPathField().length() > 0) {
outputRowData[rowIndex++]=data.path;
}
if (meta.getSizeField() != null && meta.getSizeField().length() > 0) {
outputRowData[rowIndex++]=new Long(data.size);
}
if (meta.isHiddenField() != null && meta.isHiddenField().length() > 0) {
outputRowData[rowIndex++]=new Boolean(data.path);
}
if (meta.getLastModificationDateField() != null && meta.getLastModificationDateField().length() > 0) {
outputRowData[rowIndex++]=data.lastModificationDateTime;
}
if (meta.getUriField() != null && meta.getUriField().length() > 0) {
outputRowData[rowIndex++]=data.uriName;
}
if (meta.getRootUriField() != null && meta.getRootUriField().length() > 0) {
outputRowData[rowIndex++]=data.rootUriName;
}
data.recordnr++;
RowMetaInterface irow=getInputRowMeta();
data.previousRow=irow == null ? outputRowData : irow.cloneRow(outputRowData);
return outputRowData;
}
