{
  return new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.character == ' ' && ((e.stateMask & SWT.CONTROL) != 0) && ((e.stateMask & SWT.ALT) == 0)) {
        Rectangle bounds=textField.getBounds();
        Point location=textField.getLocation();
        Composite parent=textField.getParent();
        while (parent != null) {
          location.x+=parent.getLocation().x + parent.getBorderWidth();
          location.y+=parent.getLocation().y + parent.getBorderWidth();
          parent=parent.getParent();
        }
        final Shell shell=new Shell(textField.getShell(),SWT.NONE);
        shell.setSize(bounds.width,200);
        shell.setLocation(location.x + 5,location.y + bounds.height + bounds.height);
        shell.setLayout(new FillLayout());
        final List list=new List(shell,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL);
        props.setLook(list);
        list.setItems(getVariableNames(space));
        final DefaultToolTip toolTip=new DefaultToolTip(list,ToolTip.RECREATE,true);
        toolTip.setImage(GUIResource.getInstance().getImageSpoon());
        toolTip.setHideOnMouseDown(true);
        toolTip.setRespectMonitorBounds(true);
        toolTip.setRespectDisplayBounds(true);
        toolTip.setPopupDelay(350);
        list.addSelectionListener(new SelectionAdapter(){
          public void widgetDefaultSelected(          SelectionEvent arg0){
            if (list.getSelectionCount() <= 0)             return;
            textField.insert("${" + list.getSelection()[0] + "}");
            shell.dispose();
          }
          public void widgetSelected(          SelectionEvent event){
            if (list.getSelectionCount() <= 0)             return;
            String name=list.getSelection()[0];
            String value=space.getVariable(name);
            Rectangle shellBounds=shell.getBounds();
            String message=Messages.getString("TextVar.VariableValue.Message",name,value);
            if (name.startsWith(Const.INTERNAL_VARIABLE_PREFIX))             message+=Messages.getString("TextVar.InternalVariable.Message");
            toolTip.setText(message);
            toolTip.hide();
            toolTip.show(new Point(shellBounds.width,0));
          }
        }
);
        shell.addFocusListener(new FocusAdapter(){
          public void focusLost(          FocusEvent event){
            shell.dispose();
          }
        }
);
        list.addFocusListener(new FocusAdapter(){
          public void focusLost(          FocusEvent event){
            shell.dispose();
          }
        }
);
        shell.open();
      }
      ;
    }
  }
;
}
