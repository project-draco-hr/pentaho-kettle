{
  meta=(HTTPPOSTMeta)smi;
  data=(HTTPPOSTData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isUrlInField()) {
      if (Utils.isEmpty(meta.getUrlField())) {
        logError(BaseMessages.getString(PKG,"HTTPPOST.Log.NoField"));
        throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Log.NoField"));
      }
      if (data.indexOfUrlField < 0) {
        String realUrlfieldName=environmentSubstitute(meta.getUrlField());
        data.indexOfUrlField=data.inputRowMeta.indexOfValue((realUrlfieldName));
        if (data.indexOfUrlField < 0) {
          logError(BaseMessages.getString(PKG,"HTTPPOST.Log.ErrorFindingField",realUrlfieldName));
          throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Exception.ErrorFindingField",realUrlfieldName));
        }
      }
    }
 else {
      data.realUrl=environmentSubstitute(meta.getUrl());
    }
    int nrargs=meta.getArgumentField().length;
    if (nrargs > 0) {
      data.useBodyParameters=false;
      data.useHeaderParameters=false;
      data.contentTypeHeaderOverwrite=false;
      int nrheader=0;
      int nrbody=0;
      for (int i=0; i < nrargs; i++) {
        if (meta.getArgumentHeader()[i]) {
          data.useHeaderParameters=true;
          nrheader++;
        }
 else {
          data.useBodyParameters=true;
          nrbody++;
        }
      }
      data.header_parameters_nrs=new int[nrheader];
      data.headerParameters=new NameValuePair[nrheader];
      data.body_parameters_nrs=new int[nrbody];
      data.bodyParameters=new NameValuePair[nrbody];
      int posHeader=0;
      int posBody=0;
      for (int i=0; i < nrargs; i++) {
        int fieldIndex=data.inputRowMeta.indexOfValue(meta.getArgumentField()[i]);
        if (fieldIndex < 0) {
          logError(BaseMessages.getString(PKG,"HTTPPOST.Log.ErrorFindingField") + meta.getArgumentField()[i] + "]");
          throw new KettleStepException(BaseMessages.getString(PKG,"HTTPPOST.Exception.CouldnotFindField",meta.getArgumentField()[i]));
        }
        if (meta.getArgumentHeader()[i]) {
          data.header_parameters_nrs[posHeader]=fieldIndex;
          data.headerParameters[posHeader]=new NameValuePair(environmentSubstitute(meta.getArgumentParameter()[i]),data.outputRowMeta.getString(r,data.header_parameters_nrs[posHeader]));
          posHeader++;
          if (CONTENT_TYPE.equalsIgnoreCase(meta.getArgumentParameter()[i])) {
            data.contentTypeHeaderOverwrite=true;
          }
        }
 else {
          data.body_parameters_nrs[posBody]=fieldIndex;
          data.bodyParameters[posBody]=new NameValuePair(environmentSubstitute(meta.getArgumentParameter()[i]),data.outputRowMeta.getString(r,data.body_parameters_nrs[posBody]));
          posBody++;
        }
      }
    }
    int nrQuery=meta.getQueryField().length;
    if (nrQuery > 0) {
      data.useQueryParameters=true;
      data.query_parameters_nrs=new int[nrQuery];
      data.queryParameters=new NameValuePair[nrQuery];
      for (int i=0; i < nrQuery; i++) {
        data.query_parameters_nrs[i]=data.inputRowMeta.indexOfValue(meta.getQueryField()[i]);
        if (data.query_parameters_nrs[i] < 0) {
          logError(BaseMessages.getString(PKG,"HTTPPOST.Log.ErrorFindingField") + meta.getQueryField()[i] + "]");
          throw new KettleStepException(BaseMessages.getString(PKG,"HTTPPOST.Exception.CouldnotFindField",meta.getQueryField()[i]));
        }
        data.queryParameters[i]=new NameValuePair(environmentSubstitute(meta.getQueryParameter()[i]),data.outputRowMeta.getString(r,data.query_parameters_nrs[i]));
      }
    }
    if (!Utils.isEmpty(meta.getRequestEntity())) {
      data.indexOfRequestEntity=data.inputRowMeta.indexOfValue(environmentSubstitute(meta.getRequestEntity()));
      if (data.indexOfRequestEntity < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"HTTPPOST.Exception.CouldnotFindRequestEntityField",meta.getRequestEntity()));
      }
    }
    data.realEncoding=environmentSubstitute(meta.getEncoding());
  }
  try {
    Object[] outputRowData=callHTTPPOST(r);
    putRow(data.outputRowMeta,outputRowData);
    if (checkFeedback(getLinesRead())) {
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"HTTPPOST.LineNumber") + getLinesRead());
      }
    }
  }
 catch (  KettleException e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"HTTPPOST.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      logError(Const.getStackTracker(e));
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"HTTPPOST001");
    }
  }
  return true;
}
