{
  if (meta.isUrlInField()) {
    data.realUrl=data.inputRowMeta.getString(rowData,data.indexOfUrlField);
  }
  FileInputStream fis=null;
  try {
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"HTTPPOST.Log.ConnectingToURL",data.realUrl));
    }
    HttpClient httpPostClient=SlaveConnectionManager.getInstance().createHttpClient();
    PostMethod post=new PostMethod(data.realUrl);
    if (data.realConnectionTimeout > -1) {
      httpPostClient.getHttpConnectionManager().getParams().setConnectionTimeout(data.realConnectionTimeout);
    }
    if (data.realSocketTimeout > -1) {
      httpPostClient.getHttpConnectionManager().getParams().setSoTimeout(data.realSocketTimeout);
    }
    if (!Utils.isEmpty(data.realHttpLogin)) {
      httpPostClient.getParams().setAuthenticationPreemptive(true);
      Credentials defaultcreds=new UsernamePasswordCredentials(data.realHttpLogin,data.realHttpPassword);
      httpPostClient.getState().setCredentials(AuthScope.ANY,defaultcreds);
    }
    HostConfiguration hostConfiguration=new HostConfiguration();
    if (!Utils.isEmpty(data.realProxyHost)) {
      hostConfiguration.setProxy(data.realProxyHost,data.realProxyPort);
    }
    if (!data.contentTypeHeaderOverwrite) {
      if (Utils.isEmpty(data.realEncoding)) {
        post.setRequestHeader(CONTENT_TYPE,CONTENT_TYPE_TEXT_XML);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",CONTENT_TYPE,CONTENT_TYPE_TEXT_XML));
        }
      }
 else {
        post.setRequestHeader(CONTENT_TYPE,CONTENT_TYPE_TEXT_XML + "; " + data.realEncoding);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",CONTENT_TYPE,CONTENT_TYPE_TEXT_XML + "; " + data.realEncoding));
        }
      }
    }
    if (data.useHeaderParameters) {
      for (int i=0; i < data.header_parameters_nrs.length; i++) {
        post.addRequestHeader(data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i]));
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i])));
        }
      }
    }
    if (data.useBodyParameters) {
      for (int i=0; i < data.body_parameters_nrs.length; i++) {
        data.bodyParameters[i].setValue(data.inputRowMeta.getString(rowData,data.body_parameters_nrs[i]));
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.BodyValue",data.bodyParameters[i].getName(),data.inputRowMeta.getString(rowData,data.body_parameters_nrs[i])));
        }
      }
      post.setRequestBody(data.bodyParameters);
    }
    if (data.useQueryParameters) {
      for (int i=0; i < data.query_parameters_nrs.length; i++) {
        data.queryParameters[i].setValue(data.inputRowMeta.getString(rowData,data.query_parameters_nrs[i]));
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.QueryValue",data.queryParameters[i].getName(),data.inputRowMeta.getString(rowData,data.query_parameters_nrs[i])));
        }
      }
      post.setQueryString(data.queryParameters);
    }
    if (data.indexOfRequestEntity >= 0) {
      String tmp=data.inputRowMeta.getString(rowData,data.indexOfRequestEntity);
      if (meta.isPostAFile()) {
        File input=new File(tmp);
        fis=new FileInputStream(input);
        post.setRequestEntity(new InputStreamRequestEntity(fis,input.length()));
      }
 else {
        byte[] bytes;
        if ((data.realEncoding != null) && (data.realEncoding.length() > 0)) {
          bytes=tmp.getBytes(data.realEncoding);
        }
 else {
          bytes=tmp.getBytes();
        }
        post.setRequestEntity(new InputStreamRequestEntity(new ByteArrayInputStream(bytes),bytes.lenght));
      }
    }
    InputStreamReader inputStreamReader=null;
    Object[] newRow=null;
    if (rowData != null) {
      newRow=rowData.clone();
    }
    try {
      long startTime=System.currentTimeMillis();
      int statusCode=requestStatusCode(post,hostConfiguration,httpPostClient);
      long responseTime=System.currentTimeMillis() - startTime;
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseTime",responseTime,data.realUrl));
      }
      if (isDebug()) {
        logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseCode",String.valueOf(statusCode)));
      }
      String body=null;
      String headerString=null;
      if (statusCode != -1) {
        if (statusCode == 204) {
          body="";
        }
 else {
          if (statusCode != 401) {
            Header[] headers=searchForHeaders(post);
            String encoding=data.realEncoding;
            if (Utils.isEmpty(encoding)) {
              String contentType=post.getResponseHeader("Content-Type").getValue();
              if (contentType != null && contentType.contains("charset")) {
                encoding=contentType.replaceFirst("^.*;\\s*charset\\s*=\\s*","").replace("\"","").trim();
              }
            }
            JSONObject json=new JSONObject();
            for (            Header header : headers) {
              json.put(header.getName(),header.getValue());
            }
            headerString=json.toJSONString();
            inputStreamReader=openStream(encoding,post);
            StringBuilder bodyBuffer=new StringBuilder();
            int c;
            while ((c=inputStreamReader.read()) != -1) {
              bodyBuffer.append((char)c);
            }
            inputStreamReader.close();
            body=bodyBuffer.toString();
            if (isDebug()) {
              logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseBody",body));
            }
          }
 else {
            throw new KettleStepException(BaseMessages.getString(PKG,"HTTPPOST.Exception.Authentication",data.realUrl));
          }
        }
      }
      int returnFieldsOffset=data.inputRowMeta.size();
      if (!Utils.isEmpty(meta.getFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,body);
        returnFieldsOffset++;
      }
      if (!Utils.isEmpty(meta.getResultCodeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(statusCode));
        returnFieldsOffset++;
      }
      if (!Utils.isEmpty(meta.getResponseTimeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(responseTime));
      }
      if (!Utils.isEmpty(meta.getResponseHeaderFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,headerString.toString());
      }
    }
  finally {
      if (inputStreamReader != null) {
        inputStreamReader.close();
      }
      post.releaseConnection();
      if (data.realcloseIdleConnectionsTime > -1) {
        httpPostClient.getHttpConnectionManager().closeIdleConnections(data.realcloseIdleConnectionsTime);
      }
    }
    return newRow;
  }
 catch (  UnknownHostException uhe) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Error.UnknownHostException",uhe.getMessage()));
  }
catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Error.CanNotReadURL",data.realUrl),e);
  }
 finally {
    if (fis != null) {
      BaseStep.closeQuietly(fis);
    }
  }
}
