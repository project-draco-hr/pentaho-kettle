{
  CheckResult cr;
  if (Utils.isEmpty(filename)) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Filename is not given",stepMeta);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Filename is given",stepMeta);
  }
  remarks.add(cr);
  if (transMeta.findNrPrevSteps(stepMeta) > 0) {
    RowMetaInterface previousFields;
    try {
      previousFields=transMeta.getPrevStepFields(stepMeta);
      if (null == previousFields.searchValueMeta(filename)) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Field name is not in previous step",stepMeta);
      }
 else {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Field name is in previous step",stepMeta);
      }
    }
 catch (    KettleStepException e) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Could not find previous step",stepMeta);
    }
    remarks.add(cr);
  }
  if (includeXmlDataTypeNumericField || includeXmlDataTypeDescriptionField) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_COMMENT,"At least one Data Type field (numeric or description) is in the data stream",stepMeta);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_WARNING,"Data Type field (numeric or description) is missing in the data stream",stepMeta);
  }
  remarks.add(cr);
  if (includeXmlDataValueField && includeXmlDataNameField) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_COMMENT,"Data Name and Data Value fields are in the data stream",stepMeta);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_WARNING,"Both Data Name and Data Value fields should be in the data stream",stepMeta);
  }
  remarks.add(cr);
}
