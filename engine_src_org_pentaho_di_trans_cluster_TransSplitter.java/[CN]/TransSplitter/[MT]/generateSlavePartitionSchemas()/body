{
  slaveServerPartitionsMap=new Hashtable<SlaveServer,Map<PartitionSchema,List<String>>>();
  for (int i=0; i < referenceSteps.length; i++) {
    StepMeta stepMeta=referenceSteps[i];
    StepPartitioningMeta stepPartitioningMeta=stepMeta.getStepPartitioningMeta();
    if (stepPartitioningMeta == null) {
      continue;
    }
    if (stepPartitioningMeta.getMethodType() == StepPartitioningMeta.PARTITIONING_METHOD_NONE) {
      continue;
    }
    ClusterSchema clusterSchema=stepMeta.getClusterSchema();
    if (clusterSchema == null) {
      continue;
    }
    PartitionSchema partitionSchema=(PartitionSchema)stepPartitioningMeta.getPartitionSchema().clone();
    int nrSlaves=clusterSchema.findNrSlaves();
    if (nrSlaves == 0) {
      continue;
    }
    if (partitionSchema.isDynamicallyDefined()) {
      partitionSchema.expandPartitionsDynamically(nrSlaves,originalTransformation);
    }
    int nrPartitions=partitionSchema.getPartitionIDs().size();
    if (nrPartitions < nrSlaves) {
      throw new KettleException("It doesn't make sense to have a partitioned, clustered step with less partitions (" + nrPartitions + ") than that there are slave servers ("+ nrSlaves+ ")");
    }
    int slaveServerNr=0;
    List<SlaveServer> slaveServers=clusterSchema.getSlaveServers();
    for (int p=0; p < nrPartitions; p++) {
      String partitionId=partitionSchema.getPartitionIDs().get(p);
      SlaveServer slaveServer=slaveServers.get(slaveServerNr);
      if (slaveServer.isMaster()) {
        slaveServerNr++;
        if (slaveServerNr >= slaveServers.size()) {
          slaveServerNr=0;
        }
        slaveServer=slaveServers.get(slaveServerNr);
      }
      Map<PartitionSchema,List<String>> schemaPartitionsMap=slaveServerPartitionsMap.get(slaveServer);
      if (schemaPartitionsMap == null) {
        schemaPartitionsMap=new HashMap<PartitionSchema,List<String>>();
        slaveServerPartitionsMap.put(slaveServer,schemaPartitionsMap);
      }
      List<String> partitions=schemaPartitionsMap.get(partitionSchema);
      if (partitions == null) {
        partitions=new ArrayList<String>();
        schemaPartitionsMap.put(partitionSchema,partitions);
      }
      if (partitions.indexOf(partitionId) < 0) {
        partitions.add(partitionId);
      }
      slaveServerNr++;
      if (slaveServerNr >= clusterSchema.getSlaveServers().size()) {
        slaveServerNr=0;
      }
    }
  }
}
