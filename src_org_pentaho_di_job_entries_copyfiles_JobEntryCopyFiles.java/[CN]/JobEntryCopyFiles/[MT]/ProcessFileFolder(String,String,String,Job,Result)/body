{
  LogWriter log=LogWriter.getInstance();
  boolean entrystatus=false;
  FileObject sourcefilefolder=null;
  FileObject destinationfilefolder=null;
  list_files_remove.clear();
  list_add_result.clear();
  String realSourceFilefoldername=environmentSubstitute(sourcefilefoldername);
  String realDestinationFilefoldername=environmentSubstitute(destinationfilefoldername);
  String realWildcard=environmentSubstitute(wildcard);
  try {
    System.gc();
    sourcefilefolder=KettleVFS.getFileObject(realSourceFilefoldername);
    destinationfilefolder=KettleVFS.getFileObject(realDestinationFilefoldername);
    if (sourcefilefolder.exists()) {
      if (CreateDestinationFolder(destinationfilefolder)) {
        if (sourcefilefolder.getType().equals(FileType.FOLDER) && destination_is_a_file) {
          log.logError(BaseMessages.getString(PKG,"JobCopyFiles.Log.Forbidden"),BaseMessages.getString(PKG,"JobCopyFiles.Log.CanNotCopyFolderToFile",realSourceFilefoldername,realDestinationFilefoldername));
          NbrFail++;
        }
 else {
          if (destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE)) {
            destinationfilefolder.copyFrom(sourcefilefolder.getParent(),new TextOneFileSelector(sourcefilefolder.getParent().toString(),sourcefilefolder.getName().getBaseName(),destinationfilefolder.toString()));
            if (log.isDetailed())             log.logDetailed(BaseMessages.getString(PKG,"JobCopyFiles.Log.FileCopiedInfos"),BaseMessages.getString(PKG,"JobCopyFiles.Log.FileCopied",sourcefilefolder.getName().toString(),destinationfilefolder.getName().toString()));
          }
 else           if (sourcefilefolder.getType().equals(FileType.FILE) && destination_is_a_file) {
            destinationfilefolder.copyFrom(sourcefilefolder,new TextOneToOneFileSelector(destinationfilefolder));
          }
 else {
            if (log.isDetailed()) {
              log.logDetailed("","  ");
              log.logDetailed(toString(),BaseMessages.getString(PKG,"JobCopyFiles.Log.FetchFolder",sourcefilefolder.toString()));
            }
            destinationfilefolder.copyFrom(sourcefilefolder,new TextFileSelector(sourcefilefolder.toString(),destinationfilefolder.toString(),realWildcard,parentJob));
          }
          if (remove_source_files && !list_files_remove.isEmpty()) {
            for (Iterator<String> iter=list_files_remove.iterator(); iter.hasNext() && !parentJob.isStopped(); ) {
              String fileremoventry=(String)iter.next();
              if (KettleVFS.getFileObject(fileremoventry).getType() == FileType.FILE) {
                boolean deletefile=KettleVFS.getFileObject(fileremoventry).delete();
                log.logBasic(""," ------ ");
                if (!deletefile) {
                  log.logError("      " + BaseMessages.getString(PKG,"JobCopyFiles.Log.Error"),BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.CanRemoveFileFolder",fileremoventry));
                }
 else {
                  if (log.isDetailed())                   log.logDetailed("      " + BaseMessages.getString(PKG,"JobCopyFiles.Log.FileFolderRemovedInfos"),BaseMessages.getString(PKG,"JobCopyFiles.Log.FileFolderRemoved",fileremoventry));
                }
              }
            }
          }
          if (add_result_filesname && !list_add_result.isEmpty()) {
            for (Iterator<String> iter=list_add_result.iterator(); iter.hasNext(); ) {
              String fileaddentry=(String)iter.next();
              if (KettleVFS.getFileObject(fileaddentry).getType() == FileType.FILE) {
                ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(fileaddentry),parentJob.getJobname(),toString());
                result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
                if (log.isDetailed()) {
                  log.logDetailed(""," ------ ");
                  log.logDetailed("      " + BaseMessages.getString(PKG,"JobCopyFiles.Log.ResultFilesName"),BaseMessages.getString(PKG,"JobCopyFiles.Log.FileAddedToResultFilesName",fileaddentry));
                }
              }
            }
          }
        }
        entrystatus=true;
      }
 else {
        log.logError(toString(),BaseMessages.getString(PKG,"JobCopyFiles.Error.DestinationFolderNotFound",realDestinationFilefoldername));
      }
    }
 else {
      log.logError(toString(),BaseMessages.getString(PKG,"JobCopyFiles.Error.SourceFileNotExists",realSourceFilefoldername));
    }
  }
 catch (  IOException e) {
    log.logError("Error",BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.CopyProcess",realSourceFilefoldername.toString(),destinationfilefolder.toString(),e.getMessage()));
  }
 finally {
    if (sourcefilefolder != null) {
      try {
        sourcefilefolder.close();
      }
 catch (      IOException ex) {
      }
      ;
    }
    if (destinationfilefolder != null) {
      try {
        destinationfilefolder.close();
      }
 catch (      IOException ex) {
      }
      ;
    }
  }
  return entrystatus;
}
