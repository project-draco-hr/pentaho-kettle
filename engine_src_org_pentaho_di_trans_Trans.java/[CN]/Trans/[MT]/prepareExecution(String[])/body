{
  preparing=true;
  startDate=null;
  running=false;
  log.snap(Metrics.METRIC_TRANSFORMATION_EXECUTION_START);
  log.snap(Metrics.METRIC_TRANSFORMATION_INIT_START);
  if (arguments != null)   transMeta.setArguments(arguments);
  activateParameters();
  transMeta.activateParameters();
  if (transMeta.getName() == null) {
    if (transMeta.getFilename() != null) {
      log.logBasic(BaseMessages.getString(PKG,"Trans.Log.DispacthingStartedForFilename",transMeta.getFilename()));
    }
  }
 else {
    log.logBasic(BaseMessages.getString(PKG,"Trans.Log.DispacthingStartedForTransformation",transMeta.getName()));
  }
  if (transMeta.getArguments() != null) {
    if (log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.NumberOfArgumentsDetected",String.valueOf(transMeta.getArguments().length)));
  }
  if (isSafeModeEnabled()) {
    if (log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.SafeModeIsEnabled",transMeta.getName()));
  }
  if (getReplayDate() != null) {
    SimpleDateFormat df=new SimpleDateFormat(REPLAY_DATE_FORMAT);
    log.logBasic(BaseMessages.getString(PKG,"Trans.Log.ThisIsAReplayTransformation") + df.format(getReplayDate()));
  }
 else {
    if (log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.ThisIsNotAReplayTransformation"));
  }
  if (servletPrintWriter == null) {
    servletPrintWriter=new PrintWriter(new OutputStreamWriter(System.out));
  }
  steps=new ArrayList<StepMetaDataCombi>();
  rowsets=new ArrayList<RowSet>();
  if (isMonitored()) {
    transMeta.sortStepsNatural();
  }
  List<StepMeta> hopsteps=transMeta.getTransHopSteps(false);
  if (log.isDetailed()) {
    log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.FoundDefferentSteps",String.valueOf(hopsteps.size())));
    log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.AllocatingRowsets"));
  }
  for (int i=0; i < hopsteps.size(); i++) {
    StepMeta thisStep=hopsteps.get(i);
    if (thisStep.isMapping())     continue;
    if (log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.AllocateingRowsetsForStep",String.valueOf(i),thisStep.getName()));
    List<StepMeta> nextSteps=transMeta.findNextSteps(thisStep);
    int nrTargets=nextSteps.size();
    for (int n=0; n < nrTargets; n++) {
      StepMeta nextStep=nextSteps.get(n);
      if (nextStep.isMapping())       continue;
      int thisCopies=thisStep.getCopies();
      if (thisCopies < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Trans.Log.StepCopiesNotCorrectlyDefined",thisStep.getCopiesString(),thisStep.getName()));
      }
      int nextCopies=nextStep.getCopies();
      boolean repartitioning=!thisStep.isPartitioned() && nextStep.isPartitioned();
      int nrCopies;
      if (log.isDetailed())       log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.copiesInfo",String.valueOf(thisCopies),String.valueOf(nextCopies)));
      int dispatchType;
      if (thisCopies == 1 && nextCopies == 1) {
        dispatchType=TYPE_DISP_1_1;
        nrCopies=1;
      }
 else       if (thisCopies == 1 && nextCopies > 1) {
        dispatchType=TYPE_DISP_1_N;
        nrCopies=nextCopies;
      }
 else       if (thisCopies > 1 && nextCopies == 1) {
        dispatchType=TYPE_DISP_N_1;
        nrCopies=thisCopies;
      }
 else       if (thisCopies == nextCopies && !repartitioning) {
        dispatchType=TYPE_DISP_N_N;
        nrCopies=nextCopies;
      }
 else {
        dispatchType=TYPE_DISP_N_M;
        nrCopies=nextCopies;
      }
      if (dispatchType != TYPE_DISP_N_M) {
        for (int c=0; c < nrCopies; c++) {
          RowSet rowSet;
switch (transMeta.getTransformationType()) {
case Normal:
            Boolean batchingRowSet=ValueMeta.convertStringToBoolean(System.getProperty(Const.KETTLE_BATCHING_ROWSET));
          if (batchingRowSet != null && batchingRowSet.booleanValue()) {
            rowSet=new BlockingBatchingRowSet(transMeta.getSizeRowset());
          }
 else {
            rowSet=new BlockingRowSet(transMeta.getSizeRowset());
          }
        break;
case SerialSingleThreaded:
      rowSet=new SingleRowRowSet();
    break;
case SingleThreaded:
  rowSet=new QueueRowSet();
break;
default :
throw new KettleException("Unhandled transformation type: " + transMeta.getTransformationType());
}
switch (dispatchType) {
case TYPE_DISP_1_1:
rowSet.setThreadNameFromToCopy(thisStep.getName(),0,nextStep.getName(),0);
break;
case TYPE_DISP_1_N:
rowSet.setThreadNameFromToCopy(thisStep.getName(),0,nextStep.getName(),c);
break;
case TYPE_DISP_N_1:
rowSet.setThreadNameFromToCopy(thisStep.getName(),c,nextStep.getName(),0);
break;
case TYPE_DISP_N_N:
rowSet.setThreadNameFromToCopy(thisStep.getName(),c,nextStep.getName(),c);
break;
}
rowsets.add(rowSet);
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.TransformationAllocatedNewRowset",rowSet.toString()));
}
}
 else {
for (int s=0; s < thisCopies; s++) {
for (int t=0; t < nextCopies; t++) {
BlockingRowSet rowSet=new BlockingRowSet(transMeta.getSizeRowset());
rowSet.setThreadNameFromToCopy(thisStep.getName(),s,nextStep.getName(),t);
rowsets.add(rowSet);
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.TransformationAllocatedNewRowset",rowSet.toString()));
}
}
}
}
log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.AllocatedRowsets",String.valueOf(rowsets.size()),String.valueOf(i),thisStep.getName()) + " ");
}
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.AllocatingStepsAndStepData"));
for (int i=0; i < hopsteps.size(); i++) {
StepMeta stepMeta=hopsteps.get(i);
String stepid=stepMeta.getStepID();
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.TransformationIsToAllocateStep",stepMeta.getName(),stepid));
int nrCopies=stepMeta.getCopies();
if (log.isDebug()) log.logDebug(BaseMessages.getString(PKG,"Trans.Log.StepHasNumberRowCopies",String.valueOf(nrCopies)));
for (int c=0; c < nrCopies; c++) {
if (!hasStepStarted(stepMeta.getName(),c)) {
StepMetaDataCombi combi=new StepMetaDataCombi();
combi.stepname=stepMeta.getName();
combi.copy=c;
combi.stepMeta=stepMeta;
combi.meta=stepMeta.getStepMetaInterface();
StepDataInterface data=combi.meta.getStepData();
combi.data=data;
StepInterface step=combi.meta.getStep(stepMeta,data,c,transMeta,this);
step.initializeVariablesFrom(this);
step.setUsingThreadPriorityManagment(transMeta.isUsingThreadPriorityManagment());
if (stepMeta.isPartitioned()) {
List<String> partitionIDs=stepMeta.getStepPartitioningMeta().getPartitionSchema().getPartitionIDs();
if (partitionIDs != null && partitionIDs.size() > 0) {
step.setPartitionID(partitionIDs.get(c));
}
}
combi.step=step;
if (combi.step instanceof LoggingObjectInterface) {
LogChannelInterface logChannel=combi.step.getLogChannel();
logChannel.setLogLevel(logLevel);
logChannel.setGatheringMetrics(log.isGatheringMetrics());
}
steps.add(combi);
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.TransformationHasAllocatedANewStep",stepMeta.getName(),String.valueOf(c)));
}
}
}
for (int s=0; s < steps.size(); s++) {
StepMetaDataCombi combi=steps.get(s);
if (combi.stepMeta.isDoingErrorHandling()) {
combi.step.identifyErrorOutput();
}
}
Object syncObject=this;
if (parentJob != null) syncObject=parentJob;
if (parentTrans != null) syncObject=parentTrans;
synchronized (syncObject) {
calculateBatchIdAndDateRange();
beginProcessing();
}
for (int i=0; i < steps.size(); i++) {
StepMetaDataCombi sid=steps.get(i);
StepMeta stepMeta=sid.stepMeta;
StepInterface baseStep=sid.step;
baseStep.setPartitioned(stepMeta.isPartitioned());
boolean isThisPartitioned=stepMeta.isPartitioned();
PartitionSchema thisPartitionSchema=null;
if (isThisPartitioned) thisPartitionSchema=stepMeta.getStepPartitioningMeta().getPartitionSchema();
boolean isNextPartitioned=false;
StepPartitioningMeta nextStepPartitioningMeta=null;
PartitionSchema nextPartitionSchema=null;
List<StepMeta> nextSteps=transMeta.findNextSteps(stepMeta);
int nrNext=nextSteps.size();
for (int p=0; p < nrNext; p++) {
StepMeta nextStep=nextSteps.get(p);
if (nextStep.isPartitioned()) {
isNextPartitioned=true;
nextStepPartitioningMeta=nextStep.getStepPartitioningMeta();
nextPartitionSchema=nextStepPartitioningMeta.getPartitionSchema();
}
}
baseStep.setRepartitioning(StepPartitioningMeta.PARTITIONING_METHOD_NONE);
if ((!isThisPartitioned && isNextPartitioned) || (isThisPartitioned && isNextPartitioned && !thisPartitionSchema.equals(nextPartitionSchema))) {
baseStep.setRepartitioning(nextStepPartitioningMeta.getMethodType());
}
StepPartitioningMeta targetStepPartitioningMeta=baseStep.getStepMeta().getTargetStepPartitioningMeta();
if (targetStepPartitioningMeta != null) {
baseStep.setRepartitioning(targetStepPartitioningMeta.getMethodType());
}
}
preparing=false;
initializing=true;
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.InitialisingSteps",String.valueOf(steps.size())));
StepInitThread initThreads[]=new StepInitThread[steps.size()];
Thread[] threads=new Thread[steps.size()];
for (int i=0; i < steps.size(); i++) {
final StepMetaDataCombi sid=steps.get(i);
initThreads[i]=new StepInitThread(sid,log);
threads[i]=new Thread(initThreads[i]);
threads[i].setName("init of " + sid.stepname + "."+ sid.copy+ " ("+ threads[i].getName()+ ")");
threads[i].start();
}
for (int i=0; i < threads.length; i++) {
try {
threads[i].join();
}
 catch (Exception ex) {
log.logError("Error with init thread: " + ex.getMessage(),ex.getMessage());
log.logError(Const.getStackTracker(ex));
}
}
initializing=false;
boolean ok=true;
for (int i=0; i < initThreads.length; i++) {
StepMetaDataCombi combi=initThreads[i].getCombi();
if (!initThreads[i].isOk()) {
log.logError(BaseMessages.getString(PKG,"Trans.Log.StepFailedToInit",combi.stepname + "." + combi.copy));
combi.data.setStatus(StepExecutionStatus.STATUS_STOPPED);
ok=false;
}
 else {
combi.data.setStatus(StepExecutionStatus.STATUS_IDLE);
if (log.isDetailed()) log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.StepInitialized",combi.stepname + "." + combi.copy));
}
}
if (!ok) {
for (int i=0; i < initThreads.length; i++) {
StepMetaDataCombi combi=initThreads[i].getCombi();
combi.step.dispose(combi.meta,combi.data);
if (initThreads[i].isOk()) {
combi.data.setStatus(StepExecutionStatus.STATUS_HALTED);
}
 else {
combi.data.setStatus(StepExecutionStatus.STATUS_STOPPED);
}
}
fireTransFinishedListeners();
finished.set(true);
if (preview) {
String logText=CentralLogStore.getAppender().getBuffer(getLogChannelId(),true).toString();
throw new KettleException(BaseMessages.getString(PKG,"Trans.Log.FailToInitializeAtLeastOneStep") + Const.CR + logText);
}
 else {
throw new KettleException(BaseMessages.getString(PKG,"Trans.Log.FailToInitializeAtLeastOneStep") + Const.CR);
}
}
log.snap(Metrics.METRIC_TRANSFORMATION_INIT_STOP);
KettleEnvironment.setExecutionInformation(this,repository);
readyToStart=true;
}
