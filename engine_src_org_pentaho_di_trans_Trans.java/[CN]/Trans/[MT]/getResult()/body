{
  if (steps == null)   return null;
  Result result=new Result();
  result.setNrErrors(errors.longValue());
  result.setResult(errors.longValue() == 0);
  TransLogTable transLogTable=transMeta.getTransLogTable();
  for (int i=0; i < steps.size(); i++) {
    StepMetaDataCombi sid=steps.get(i);
    StepInterface step=sid.step;
    result.setNrErrors(result.getNrErrors() + sid.step.getErrors());
    result.getResultFiles().putAll(step.getResultFiles());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_READ)))     result.setNrLinesRead(result.getNrLinesRead() + step.getLinesRead());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_INPUT)))     result.setNrLinesInput(result.getNrLinesInput() + step.getLinesInput());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_WRITTEN)))     result.setNrLinesWritten(result.getNrLinesWritten() + step.getLinesWritten());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_OUTPUT)))     result.setNrLinesOutput(result.getNrLinesOutput() + step.getLinesOutput());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_UPDATED)))     result.setNrLinesUpdated(result.getNrLinesUpdated() + step.getLinesUpdated());
    if (step.getStepname().equals(transLogTable.getSubjectString(TransLogTable.ID.LINES_REJECTED)))     result.setNrLinesRejected(result.getNrLinesRejected() + step.getLinesRejected());
  }
  result.setRows(resultRows);
  result.setResultFiles(new HashMap<String,ResultFile>());
  if (resultFiles != null) {
    for (    ResultFile resultFile : resultFiles) {
      result.getResultFiles().put(resultFile.toString(),resultFile);
    }
  }
  result.setStopped(isStopped());
  result.setLogChannelId(log.getLogChannelId());
  return result;
}
