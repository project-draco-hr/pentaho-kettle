{
  try {
    for (    StepMetaDataCombi combi : steps) {
      combi.step.setUsingThreadPriorityManagment(false);
    }
    Collections.sort(steps,new Comparator<StepMetaDataCombi>(){
      @Override public int compare(      StepMetaDataCombi c1,      StepMetaDataCombi c2){
        boolean c1BeforeC2=transMeta.findPrevious(c2.stepMeta,c1.stepMeta);
        if (c1BeforeC2) {
          return -1;
        }
 else {
          return 1;
        }
      }
    }
);
    boolean[] stepDone=new boolean[steps.size()];
    int nrDone=0;
    while (nrDone < steps.size() && !isStopped()) {
      for (int i=0; i < steps.size() && !isStopped(); i++) {
        StepMetaDataCombi combi=steps.get(i);
        if (!stepDone[i]) {
          boolean cont=combi.step.processRow(combi.meta,combi.data);
          if (!cont) {
            stepDone[i]=true;
            nrDone++;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    errors.addAndGet(1);
    log.logError("Error executing single threaded",e);
  }
 finally {
    for (int i=0; i < steps.size(); i++) {
      StepMetaDataCombi combi=steps.get(i);
      combi.step.dispose(combi.meta,combi.data);
      combi.step.markStop();
    }
  }
}
