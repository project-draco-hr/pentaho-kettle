{
  nrOfFinishedSteps=0;
  nrOfActiveSteps=0;
  ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.TransformationStartThreads.id,this);
  fireTransStartedListeners();
  for (int i=0; i < steps.size(); i++) {
    final StepMetaDataCombi sid=steps.get(i);
    sid.step.markStart();
    sid.step.initBeforeStart();
    StepListener stepListener=new StepListener(){
      public void stepActive(      Trans trans,      StepMeta stepMeta,      StepInterface step){
        nrOfActiveSteps++;
        if (nrOfActiveSteps == 1) {
synchronized (transListeners) {
            for (            TransListener listener : transListeners) {
              listener.transActive(Trans.this);
            }
          }
        }
      }
      public void stepFinished(      Trans trans,      StepMeta stepMeta,      StepInterface step){
synchronized (Trans.this) {
          nrOfFinishedSteps++;
          if (nrOfFinishedSteps >= steps.size()) {
            setFinished(true);
            addStepPerformanceSnapShot();
            try {
              fireTransFinishedListeners();
            }
 catch (            Exception e) {
              step.setErrors(step.getErrors() + 1L);
              log.logError(getName() + " : " + BaseMessages.getString(PKG,"Trans.Log.UnexpectedErrorAtTransformationEnd"),e);
            }
          }
          if (step.getErrors() > 0) {
            log.logMinimal(getName(),BaseMessages.getString(PKG,"Trans.Log.TransformationDetectedErrors"));
            log.logMinimal(getName(),BaseMessages.getString(PKG,"Trans.Log.TransformationIsKillingTheOtherSteps"));
            killAllNoWait();
          }
        }
      }
    }
;
    if (sid.step instanceof BaseStep) {
      ((BaseStep)sid.step).getStepListeners().add(0,stepListener);
    }
 else {
      sid.step.addStepListener(stepListener);
    }
  }
  if (transMeta.isCapturingStepPerformanceSnapShots()) {
    stepPerformanceSnapshotSeqNr=new AtomicInteger(0);
    stepPerformanceSnapShots=new ConcurrentHashMap<String,List<StepPerformanceSnapShot>>();
    String limitString=environmentSubstitute(transMeta.getStepPerformanceCapturingSizeLimit());
    if (Const.isEmpty(limitString)) {
      limitString=EnvUtil.getSystemProperty(Const.KETTLE_STEP_PERFORMANCE_SNAPSHOT_LIMIT);
    }
    stepPerformanceSnapshotSizeLimit=Const.toInt(limitString,0);
    stepPerformanceSnapShotTimer=new Timer("stepPerformanceSnapShot Timer: " + transMeta.getName());
    TimerTask timerTask=new TimerTask(){
      public void run(){
        if (!isFinished()) {
          addStepPerformanceSnapShot();
        }
      }
    }
;
    stepPerformanceSnapShotTimer.schedule(timerTask,100,transMeta.getStepPerformanceCapturingDelay());
  }
  setFinished(false);
  paused.set(false);
  stopped.set(false);
  transFinishedBlockingQueue=new ArrayBlockingQueue<Object>(10);
  TransListener transListener=new TransAdapter(){
    public void transFinished(    Trans trans){
      try {
        ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.TransformationFinish.id,this);
      }
 catch (      KettleException e) {
        throw new RuntimeException("Error calling extension point at end of transformation",e);
      }
      if (transMeta.isCapturingStepPerformanceSnapShots() && stepPerformanceSnapShotTimer != null) {
        stepPerformanceSnapShotTimer.cancel();
      }
      setFinished(true);
      running=false;
      log.snap(Metrics.METRIC_TRANSFORMATION_EXECUTION_STOP);
      MetricsLogTable metricsLogTable=transMeta.getMetricsLogTable();
      if (metricsLogTable.isDefined()) {
        try {
          writeMetricsInformation();
        }
 catch (        Exception e) {
          log.logError("Error writing metrics information",e);
          errors.incrementAndGet();
        }
      }
      if (transMeta.isUsingUniqueConnections()) {
        trans.closeUniqueDatabaseConnections(getResult());
      }
    }
  }
;
  transListeners.add(0,transListener);
  running=true;
switch (transMeta.getTransformationType()) {
case Normal:
    for (int i=0; i < steps.size(); i++) {
      final StepMetaDataCombi combi=steps.get(i);
      RunThread runThread=new RunThread(combi);
      Thread thread=new Thread(runThread);
      thread.setName(getName() + " - " + combi.stepname);
      ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.StepBeforeStart.id,combi);
      combi.step.addStepListener(new StepAdapter(){
        @Override public void stepFinished(        Trans trans,        StepMeta stepMeta,        StepInterface step){
          try {
            ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.StepFinished.id,combi);
          }
 catch (          KettleException e) {
            throw new RuntimeException("Unexpected error in calling extension point upon step finish",e);
          }
        }
      }
);
      thread.start();
    }
  break;
case SerialSingleThreaded:
new Thread(new Runnable(){
  public void run(){
    try {
      for (      StepMetaDataCombi combi : steps) {
        combi.step.setUsingThreadPriorityManagment(false);
      }
      Collections.sort(steps,new Comparator<StepMetaDataCombi>(){
        public int compare(        StepMetaDataCombi c1,        StepMetaDataCombi c2){
          boolean c1BeforeC2=transMeta.findPrevious(c2.stepMeta,c1.stepMeta);
          if (c1BeforeC2) {
            return -1;
          }
 else {
            return 1;
          }
        }
      }
);
      boolean[] stepDone=new boolean[steps.size()];
      int nrDone=0;
      while (nrDone < steps.size() && !isStopped()) {
        for (int i=0; i < steps.size() && !isStopped(); i++) {
          StepMetaDataCombi combi=steps.get(i);
          if (!stepDone[i]) {
            boolean cont=combi.step.processRow(combi.meta,combi.data);
            if (!cont) {
              stepDone[i]=true;
              nrDone++;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      errors.addAndGet(1);
      log.logError("Error executing single threaded",e);
    }
 finally {
      for (int i=0; i < steps.size(); i++) {
        StepMetaDataCombi combi=steps.get(i);
        combi.step.dispose(combi.meta,combi.data);
        combi.step.markStop();
      }
    }
  }
}
).start();
break;
case SingleThreaded:
break;
default :
break;
}
ExtensionPointHandler.callExtensionPoint(log,KettleExtensionPoint.TransformationStarted.id,this);
if (log.isDetailed()) {
log.logDetailed(BaseMessages.getString(PKG,"Trans.Log.TransformationHasAllocated",String.valueOf(steps.size()),String.valueOf(rowsets.size())));
}
}
