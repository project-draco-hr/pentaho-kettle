{
  String carteObjectId;
  SlaveServer slaveServer=executionConfiguration.getRemoteServer();
  if (slaveServer == null) {
    throw new KettleException("No slave server specified");
  }
  if (Const.isEmpty(transMeta.getName())) {
    throw new KettleException("The transformation needs a name to uniquely identify it by on the remote server.");
  }
  try {
    Map<String,String> vars=new HashMap<String,String>();
    for (    String var : Const.INTERNAL_TRANS_VARIABLES) {
      vars.put(var,transMeta.getVariable(var));
    }
    for (    String var : Const.INTERNAL_JOB_VARIABLES) {
      vars.put(var,transMeta.getVariable(var));
    }
    executionConfiguration.getVariables().putAll(vars);
    slaveServer.injectVariables(executionConfiguration.getVariables());
    slaveServer.getLogChannel().setLogLevel(executionConfiguration.getLogLevel());
    if (executionConfiguration.isPassingExport()) {
      FileObject tempFile=KettleVFS.createTempFile("transExport",".zip",System.getProperty("java.io.tmpdir"),transMeta);
      TopLevelResource topLevelResource=ResourceUtil.serializeResourceExportInterface(tempFile.getName().toString(),transMeta,transMeta,repository,metaStore,executionConfiguration.getXML(),CONFIGURATION_IN_EXPORT_FILENAME);
      String result=slaveServer.sendExport(topLevelResource.getArchiveName(),AddExportServlet.TYPE_TRANS,topLevelResource.getBaseResourceName());
      WebResult webResult=WebResult.fromXMLString(result);
      if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
        throw new KettleException("There was an error passing the exported transformation to the remote server: " + Const.CR + webResult.getMessage());
      }
      carteObjectId=webResult.getId();
    }
 else {
      String xml=new TransConfiguration(transMeta,executionConfiguration).getXML();
      String reply=slaveServer.sendXML(xml,RegisterTransServlet.CONTEXT_PATH + "/?xml=Y");
      WebResult webResult=WebResult.fromXMLString(reply);
      if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
        throw new KettleException("There was an error posting the transformation on the remote server: " + Const.CR + webResult.getMessage());
      }
      carteObjectId=webResult.getId();
    }
    String reply=slaveServer.execService(PrepareExecutionTransServlet.CONTEXT_PATH + "/?name=" + URLEncoder.encode(transMeta.getName(),"UTF-8")+ "&xml=Y&id="+ carteObjectId);
    WebResult webResult=WebResult.fromXMLString(reply);
    if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
      throw new KettleException("There was an error preparing the transformation for excution on the remote server: " + Const.CR + webResult.getMessage());
    }
    reply=slaveServer.execService(StartExecutionTransServlet.CONTEXT_PATH + "/?name=" + URLEncoder.encode(transMeta.getName(),"UTF-8")+ "&xml=Y&id="+ carteObjectId);
    webResult=WebResult.fromXMLString(reply);
    if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
      throw new KettleException("There was an error starting the transformation on the remote server: " + Const.CR + webResult.getMessage());
    }
    return carteObjectId;
  }
 catch (  KettleException ke) {
    throw ke;
  }
catch (  Exception e) {
    throw new KettleException(e);
  }
}
