{
  List<MetricsDuration> metricsList=MetricsUtil.getDuration(log.getLogChannelId(),Metrics.METRIC_PLUGIN_REGISTRY_REGISTER_EXTENSIONS_START);
  if (!metricsList.isEmpty()) {
    System.out.println(metricsList.get(0));
  }
  metricsList=MetricsUtil.getDuration(log.getLogChannelId(),Metrics.METRIC_PLUGIN_REGISTRY_PLUGIN_REGISTRATION_START);
  if (!metricsList.isEmpty()) {
    System.out.println(metricsList.get(0));
  }
  long total=0;
  metricsList=MetricsUtil.getDuration(log.getLogChannelId(),Metrics.METRIC_PLUGIN_REGISTRY_PLUGIN_TYPE_REGISTRATION_START);
  if (metricsList != null) {
    for (    MetricsDuration duration : metricsList) {
      total+=duration.getDuration();
      System.out.println("   - " + duration.toString() + "  Total="+ total);
    }
  }
  Database db=null;
  MetricsLogTable metricsLogTable=transMeta.getMetricsLogTable();
  try {
    db=new Database(this,metricsLogTable.getDatabaseMeta());
    db.shareVariablesWith(this);
    db.connect();
    db.setCommit(logCommitSize);
    List<String> logChannelIds=LoggingRegistry.getInstance().getLogChannelChildren(getLogChannelId());
    for (    String logChannelId : logChannelIds) {
      Queue<MetricsSnapshotInterface> snapshotList=MetricsRegistry.getInstance().getSnapshotLists().get(logChannelId);
      if (snapshotList != null) {
        Iterator<MetricsSnapshotInterface> iterator=snapshotList.iterator();
        while (iterator.hasNext()) {
          MetricsSnapshotInterface snapshot=iterator.next();
          db.writeLogRecord(metricsLogTable,LogStatus.START,new LoggingMetric(batchId,snapshot),null);
        }
      }
      Map<String,MetricsSnapshotInterface> snapshotMap=MetricsRegistry.getInstance().getSnapshotMaps().get(logChannelId);
      if (snapshotMap != null) {
synchronized (snapshotMap) {
          Iterator<MetricsSnapshotInterface> iterator=snapshotMap.values().iterator();
          while (iterator.hasNext()) {
            MetricsSnapshotInterface snapshot=iterator.next();
            db.writeLogRecord(metricsLogTable,LogStatus.START,new LoggingMetric(batchId,snapshot),null);
          }
        }
      }
    }
    db.cleanupLogRecords(metricsLogTable);
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"Trans.Exception.UnableToWriteMetricsInformationToLogTable"),e);
  }
 finally {
    if (!db.isAutoCommit()) {
      db.commit(true);
    }
    db.disconnect();
  }
}
