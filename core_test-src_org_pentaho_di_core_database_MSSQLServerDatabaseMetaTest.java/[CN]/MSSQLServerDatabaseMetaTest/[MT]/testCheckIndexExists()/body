{
  String expectedSQL="select i.name table_name, c.name column_name from     sysindexes i, sysindexkeys k, syscolumns c where    i.name = 'FOO' AND      i.id = k.id AND      i.id = c.id AND      k.colid = c.colid ";
  Database db=Mockito.mock(Database.class);
  RowMetaInterface rm=Mockito.mock(RowMetaInterface.class);
  ResultSet rs=Mockito.mock(ResultSet.class);
  DatabaseMeta dm=Mockito.mock(DatabaseMeta.class);
  Mockito.when(dm.getQuotedSchemaTableCombination("","FOO")).thenReturn("FOO");
  Mockito.when(rs.next()).thenReturn(rowCnt < 2);
  Mockito.when(db.openQuery(expectedSQL)).thenReturn(rs);
  Mockito.when(db.getReturnRowMeta()).thenReturn(rm);
  Mockito.when(rm.getString(row1,"column_name","")).thenReturn("ROW1COL2");
  Mockito.when(rm.getString(row2,"column_name","")).thenReturn("ROW2COL2");
  Mockito.when(db.getRow(rs)).thenAnswer(new Answer<Object[]>(){
    @Override public Object[] answer(    InvocationOnMock invocation) throws Throwable {
      rowCnt++;
      if (rowCnt == 1) {
        return row1;
      }
 else       if (rowCnt == 2) {
        return row2;
      }
 else {
        return null;
      }
    }
  }
);
  Mockito.when(db.getDatabaseMeta()).thenReturn(dm);
  assertTrue(nativeMeta.checkIndexExists(db,"","FOO",new String[]{"ROW1COL2","ROW2COL2"}));
  assertFalse(nativeMeta.checkIndexExists(db,"","FOO",new String[]{"ROW2COL2","NOTTHERE"}));
  assertFalse(nativeMeta.checkIndexExists(db,"","FOO",new String[]{"NOTTHERE","ROW1COL2"}));
}
