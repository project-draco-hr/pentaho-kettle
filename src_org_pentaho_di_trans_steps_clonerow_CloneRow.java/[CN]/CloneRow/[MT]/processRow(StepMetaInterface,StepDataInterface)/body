{
  meta=(CloneRowMeta)smi;
  data=(CloneRowData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    if (meta.isAddCloneFlag()) {
      String realflagfield=environmentSubstitute(meta.getCloneFlagField());
      if (Const.isEmpty(realflagfield)) {
        logError(Messages.getString("CloneRow.Error.CloneFlagFieldMissing"));
        throw new KettleException(Messages.getString("CloneRow.Error.CloneFlagFieldMissing"));
      }
      meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    }
    if (meta.isNrCloneInField()) {
      String cloneinfieldname=meta.getNrCloneField();
      if (Const.isEmpty(cloneinfieldname)) {
        logError(Messages.getString("CloneRow.Error.NrCloneInFieldMissing"));
        throw new KettleException(Messages.getString("CloneRow.Error.NrCloneInFieldMissing"));
      }
      if (data.indexOfNrCloneField < 0) {
        data.indexOfNrCloneField=getInputRowMeta().indexOfValue(cloneinfieldname);
        if (data.indexOfNrCloneField < 0) {
          logError(Messages.getString("CloneRow.Log.ErrorFindingField") + "[" + cloneinfieldname+ "]");
          throw new KettleException(Messages.getString("CloneRow.Exception.CouldnotFindField",cloneinfieldname));
        }
      }
    }
 else {
      String nrclonesString=environmentSubstitute(meta.getNrClones());
      data.nrclones=Const.toInt(nrclonesString,0);
      if (log.isDebug())       log.logDebug(toString(),Messages.getString("CloneRow.Log.NrClones","" + data.nrclones));
    }
  }
  if (meta.isAddCloneFlag()) {
    Object[] outputRowData=RowDataUtil.addValueData(r,getInputRowMeta().size(),false);
    putRow(data.outputRowMeta,outputRowData);
  }
 else {
    putRow(data.outputRowMeta,r);
  }
  if (meta.isNrCloneInField()) {
    data.nrclones=getInputRowMeta().getInteger(r,data.indexOfNrCloneField);
    if (log.isDebug())     log.logDebug(toString(),Messages.getString("CloneRow.Log.NrClones","" + data.nrclones));
  }
  for (int i=0; i < data.nrclones; i++) {
    Object[] outputRowData=RowDataUtil.createResizedCopy(r,data.outputRowMeta.size());
    if (meta.isAddCloneFlag()) {
      outputRowData=RowDataUtil.addValueData(outputRowData,getInputRowMeta().size(),true);
    }
    putRow(data.outputRowMeta,outputRowData);
  }
  if (checkFeedback(getLinesRead())) {
    if (log.isDetailed())     logDetailed(Messages.getString("CloneRow.Log.LineNumber","" + getLinesRead()));
  }
  return true;
}
