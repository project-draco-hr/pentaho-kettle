{
  try {
    ClusterSchema cluster=new ClusterSchema();
    ClusterSchemaDialog clusterDialog=new ClusterSchemaDialog(shell,cluster,repository.getSlaveServers());
    if (clusterDialog.open()) {
      ObjectId idCluster=repository.getClusterID(cluster.getName());
      if (idCluster == null) {
        if (cluster.getName() != null && !cluster.getName().equals("")) {
          repository.insertLogEntry(BaseMessages.getString(RepositoryExplorer.class,"ClusterController.Message.CreatingNewCluster",cluster.getName()));
          repository.save(cluster,Const.VERSION_COMMENT_INITIAL_VERSION,null);
        }
 else {
          MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
          mb.setMessage(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Edit.InvalidName.Message"));
          mb.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Edit.Title"));
          mb.open();
        }
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
        mb.setMessage(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Create.AlreadyExists.Message"));
        mb.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Create.AlreadyExists.Title"));
        mb.open();
      }
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Create.UnexpectedError.Title"),BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.Create.UnexpectedError.Message"),e);
  }
 finally {
    refreshClusters();
  }
}
