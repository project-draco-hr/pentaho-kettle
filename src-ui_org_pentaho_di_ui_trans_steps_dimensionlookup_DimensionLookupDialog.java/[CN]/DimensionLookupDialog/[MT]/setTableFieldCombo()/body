{
  Runnable fieldLoader=new Runnable(){
    public void run(){
      if (busyWithFields.get())       return;
      busyWithFields.set(true);
      try {
        for (int i=0; i < tableFieldColumns.size(); i++) {
          ColumnInfo colInfo=(ColumnInfo)tableFieldColumns.get(i);
          colInfo.setComboValues(new String[]{});
        }
        gotTableFields=false;
        if (!Const.isEmpty(wTable.getText())) {
          DatabaseMeta ci=transMeta.findDatabase(wConnection.getText());
          if (ci != null) {
            Database db=new Database(loggingObject,ci);
            try {
              db.connect();
              String schemaTable=ci.getQuotedSchemaTableCombination(transMeta.environmentSubstitute(wSchema.getText()),transMeta.environmentSubstitute(wTable.getText()));
              RowMetaInterface r=db.getTableFields(schemaTable);
              if (null != r) {
                String[] fieldNames=r.getFieldNames();
                if (null != fieldNames) {
                  for (int i=0; i < tableFieldColumns.size(); i++) {
                    ColumnInfo colInfo=(ColumnInfo)tableFieldColumns.get(i);
                    colInfo.setComboValues(fieldNames);
                  }
                  wTk.setItems(fieldNames);
                }
              }
            }
 catch (            Exception e) {
              for (int i=0; i < tableFieldColumns.size(); i++) {
                ColumnInfo colInfo=(ColumnInfo)tableFieldColumns.get(i);
                colInfo.setComboValues(new String[]{});
              }
            }
          }
        }
      }
  finally {
        busyWithFields.set(false);
      }
    }
  }
;
  shell.getDisplay().asyncExec(fieldLoader);
}
