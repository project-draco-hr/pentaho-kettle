{
  FieldAccessorUtl.ensureEmptyStringIsNotNull(false);
  final DataGridMeta meta=new DataGridMeta();
  String[] fieldNames=new String[]{FIELD_NAME_NUM_1};
  final String[] fieldTypes=new String[]{FIELD_TYPE_NUMBER};
  String[] fieldFormats=new String[]{null};
  String[] currencies=new String[]{null};
  String[] decimals=new String[]{null};
  String[] groups=new String[]{null};
  int[] fieldLengths=new int[]{-1};
  int[] fieldPrecisions=new int[]{-1};
  boolean[] setEmptyStrings=new boolean[]{false};
  final int fieldsCount=fieldNames.length;
  Assert.assertEquals("(test data) fieldTypes.length",fieldsCount,fieldTypes.length);
  Assert.assertEquals("(test data) fieldFormats.length",fieldsCount,fieldFormats.length);
  Assert.assertEquals("(test data) currencies.length",fieldsCount,currencies.length);
  Assert.assertEquals("(test data) decimals.length",fieldsCount,decimals.length);
  Assert.assertEquals("(test data) groups.length",fieldsCount,groups.length);
  Assert.assertEquals("(test data) fieldLengths.length",fieldsCount,fieldLengths.length);
  Assert.assertEquals("(test data) fieldPrecisions.length",fieldsCount,fieldPrecisions.length);
  Assert.assertEquals("(test data) setEmptyStrings.length",fieldsCount,setEmptyStrings.length);
  final String[][] dataRows=new String[][]{new String[]{"a"},new String[]{"1"}};
  final int rowCount=dataRows.length;
  assertSize("(test data) dataRows",rowCount,fieldsCount,dataRows);
  meta.setFieldName(fieldNames);
  meta.setFieldType(fieldTypes);
  meta.setFieldFormat(fieldFormats);
  meta.setCurrency(currencies);
  meta.setDecimal(decimals);
  meta.setGroup(groups);
  meta.setFieldLength(fieldLengths);
  meta.setFieldPrecision(fieldPrecisions);
  meta.setEmptyString(setEmptyStrings);
  meta.setDataLines(buildListListString(dataRows));
{
    final TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,STEP_NAME);
    final List<RowMetaAndData> inputList=java.util.Collections.singletonList(new RowMetaAndData(new RowMeta(),new Object[0]));
    try {
      List<RowMetaAndData> ret=TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,STEP_NAME,TransTestFactory.DUMMY_STEPNAME,inputList);
      Assert.fail("empty input data. KettleException expected");
    }
 catch (    KettleException e) {
    }
  }
{
    final TransMeta transMeta=TransTestFactory.generateTestTransformation(null,meta,STEP_NAME);
    final RowMetaInterface inputRowMeta=buildRowMeta(new ValueMetaString("ff"));
    final Object[] inputRowData=new Object[]{"asdf"};
    final List<RowMetaAndData> inputList=java.util.Collections.singletonList(new RowMetaAndData(inputRowMeta,inputRowData));
    try {
      List<RowMetaAndData> ret=TransTestFactory.executeTestTransformation(transMeta,TransTestFactory.INJECTOR_STEPNAME,STEP_NAME,TransTestFactory.DUMMY_STEPNAME,inputList);
      Assert.fail("not empty input data. KettleException expected");
    }
 catch (    KettleException e) {
    }
  }
}
