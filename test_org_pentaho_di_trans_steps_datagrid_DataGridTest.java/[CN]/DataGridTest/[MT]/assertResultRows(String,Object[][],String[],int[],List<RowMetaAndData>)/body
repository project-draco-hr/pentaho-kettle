{
  Assert.assertNotNull(msg + ". So we have some results",ret);
  final int expectedRowCount=expectedRows.length;
  Assert.assertEquals(msg + ". We have one result row",expectedRowCount,ret.size());
  if (expectedRowCount > 0) {
    Assert.assertNotNull(msg + ". expectedRows[0]",expectedRows[0]);
    final int expectedFieldsCount=expectedRows[0].length;
    for (int iRow=0; iRow < expectedRowCount; iRow++) {
      RowMetaAndData rmd=ret.get(iRow);
      Assert.assertEquals(msg + ". Result row includes input plus result columns[" + iRow+ "]",expectedFieldsCount,rmd.size());
      for (int iField=0, nFields=expectedFieldsCount; iField < nFields; iField++) {
        final Object expectedResult=expectedRows[iRow][iField];
        ValueMetaInterface resultValueMeta=rmd.getValueMeta(iField);
        Assert.assertNotNull(resultValueMeta);
        Assert.assertEquals(msg + ". resultName[" + iRow+ "]["+ iField+ "]",expectedFieldNames[iField],resultValueMeta.getName());
        Assert.assertEquals(msg + ". resultType[" + iRow+ "]["+ iField+ "]",expectedFieldTypes[iField],resultValueMeta.getType());
switch (expectedFieldTypes[iField]) {
case ValueMetaInterface.TYPE_STRING:
          Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].0",expectedResult,rmd.getString(iField,null));
        Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].1",expectedResult,rmd.getString(expectedFieldNames[iField],null));
      break;
case ValueMetaInterface.TYPE_NUMBER:
    if (expectedResult != null) {
      final double defaulValue=(expectedResult instanceof Number && ((Number)expectedResult).doubleValue() == 0.0) ? 1.0 : 0.0;
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].00",expectedResult,rmd.getNumber(iField,defaulValue));
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].10",expectedResult,rmd.getNumber(expectedFieldNames[iField],defaulValue));
    }
 else {
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].00",0.0,rmd.getNumber(iField,0.0),0.0);
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].01",1.0,rmd.getNumber(iField,1.0),0.0);
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].10",0.0,rmd.getNumber(expectedFieldNames[iField],0.0),0.0);
      Assert.assertEquals(msg + ". expectedResult[" + iRow+ "]["+ iField+ "].11",1.0,rmd.getNumber(expectedFieldNames[iField],0.1),1.0);
    }
  break;
default :
Assert.fail("unpredicted Field type: " + expectedFieldTypes[iField]);
}
}
}
}
}
