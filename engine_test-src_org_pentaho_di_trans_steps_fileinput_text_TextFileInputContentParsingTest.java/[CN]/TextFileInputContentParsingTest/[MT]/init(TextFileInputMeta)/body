{
  KettleEnvironment.init();
  PluginRegistry.addPluginType(CompressionPluginType.getInstance());
  PluginRegistry.init(true);
  inPrefix='/' + TextFileInputContentParsingTest.class.getPackage().getName().replace('.','/') + "/texts/";
  fs=VFS.getManager();
  this.meta=meta;
  data=new TextFileInputData();
  data.outputRowMeta=new RowMeta();
  data.separator=meta.content.separator;
  data.enclosure=meta.content.enclosure;
  data.escapeCharacter=meta.content.escapeCharacter;
  data.filterProcessor=new TextFileFilterProcessor(new TextFileFilter[0],new Variables());
  data.dataErrorLineHandler=new FileErrorHandler(){
    @Override public void handleNonExistantFile(    FileObject file) throws KettleException {
      errorsCount++;
    }
    @Override public void handleNonAccessibleFile(    FileObject file) throws KettleException {
      errorsCount++;
    }
    @Override public void handleLineError(    long lineNr,    String filePart) throws KettleException {
      errorsCount++;
    }
    @Override public void handleFile(    FileObject file) throws KettleException {
    }
    @Override public void close() throws KettleException {
    }
  }
;
  stepControl=new IBaseFileInputStepControl(){
    @Override public void stopAll(){
    }
    @Override public void setErrors(    long e){
    }
    @Override public void putRow(    RowMetaInterface rowMeta,    Object[] row) throws KettleStepException {
      rows.add(Arrays.copyOf(row,rowMeta.size()));
    }
    @Override public long incrementLinesUpdated(){
      return 0;
    }
    @Override public long incrementLinesInput(){
      return 0;
    }
    @Override public long getLinesWritten(){
      return 0;
    }
    @Override public long getLinesInput(){
      return 0;
    }
    @Override public long getErrors(){
      return 0;
    }
    @Override public boolean failAfterBadFile(    String errorMsg){
      return false;
    }
    @Override public boolean checkFeedback(    long lines){
      return false;
    }
  }
;
  data.filePlayList=new FilePlayList(){
    public boolean isProcessingNeeded(    FileObject file,    long lineNr,    String filePart) throws KettleException {
      return true;
    }
  }
;
}
