{
  LogWriter log=LogWriter.getInstance();
  Result result=new Result(nr);
  Properties props=new Properties();
  props.put("mail.smtp.host",server);
  boolean debug=log.getLogLevel() >= LogWriter.LOG_LEVEL_DEBUG;
  if (debug)   props.put("mail.debug","true");
  Session session=Session.getInstance(props,null);
  session.setDebug(debug);
  try {
    Message msg=new MimeMessage(session);
    msg.setFrom(new InternetAddress(replyto));
    InternetAddress[] address={new InternetAddress(destination)};
    msg.setRecipients(Message.RecipientType.TO,address);
    msg.setSubject(subject);
    msg.setSentDate(new Date());
    StringBuffer messageText=new StringBuffer();
    if (comment != null) {
      messageText.append(comment).append(Const.CR).append(Const.CR);
    }
    messageText.append("Job:").append(Const.CR);
    messageText.append("-----").append(Const.CR);
    messageText.append("Name       : ").append(parentJob.getJobinfo().getName()).append(Const.CR);
    messageText.append("Directory  : ").append(parentJob.getJobinfo().getDirectory()).append(Const.CR);
    messageText.append("JobEntry   : ").append(getName()).append(Const.CR);
    messageText.append(Const.CR);
    if (include_date) {
      Value date=new Value("date",new Date());
      messageText.append("Message date: ").append(date.toString()).append(Const.CR).append(Const.CR);
    }
    if (prev_result != null) {
      messageText.append("Previous result:").append(Const.CR);
      messageText.append("-----------------").append(Const.CR);
      messageText.append("Job entry nr         : ").append(prev_result.getEntryNr()).append(Const.CR);
      messageText.append("Errors               : ").append(prev_result.getNrErrors()).append(Const.CR);
      messageText.append("Lines read           : ").append(prev_result.getNrLinesRead()).append(Const.CR);
      messageText.append("Lines written        : ").append(prev_result.getNrLinesWritten()).append(Const.CR);
      messageText.append("Lines input          : ").append(prev_result.getNrLinesInput()).append(Const.CR);
      messageText.append("Lines output         : ").append(prev_result.getNrLinesOutput()).append(Const.CR);
      messageText.append("Lines updated        : ").append(prev_result.getNrLinesUpdated()).append(Const.CR);
      messageText.append("Script exit status   : ").append(prev_result.getExitStatus()).append(Const.CR);
      messageText.append("Result               : ").append(prev_result.getResult()).append(Const.CR);
      messageText.append(Const.CR);
    }
    ArrayList path=parentJob.getJobEntryResults();
    if (path != null) {
      messageText.append("Path to this job entry:").append(Const.CR);
      messageText.append("------------------------").append(Const.CR);
      for (int i=0; i < path.size(); i++) {
        JobEntryResult jer=(JobEntryResult)path.get(i);
        messageText.append("#" + i + " : "+ jer.getThisJobEntry().getName()).append(Const.CR);
      }
    }
    Multipart parts=new MimeMultipart();
    MimeBodyPart part1=new MimeBodyPart();
    part1.setText(messageText.toString());
    parts.addBodyPart(part1);
    if (includeFiles && prev_result != null && prev_result.interestingFiles.size() > 0) {
      for (Iterator iter=prev_result.interestingFiles.iterator(); iter.hasNext(); ) {
        File file=(File)iter.next();
        if (file != null && file.exists()) {
          MimeBodyPart files=new MimeBodyPart();
          FileDataSource fds=new FileDataSource(file);
          files.setDataHandler(new DataHandler(fds));
          files.setFileName(fds.getName());
          parts.addBodyPart(files);
        }
      }
    }
    msg.setContent(parts);
    Transport.send(msg);
  }
 catch (  MessagingException mex) {
    log.logError(toString(),"Problem while sending message: " + mex.toString());
    result.setNrErrors(1);
    Exception ex=mex;
    do {
      if (ex instanceof SendFailedException) {
        SendFailedException sfex=(SendFailedException)ex;
        Address[] invalid=sfex.getInvalidAddresses();
        if (invalid != null) {
          log.logError(toString(),"    ** Invalid Addresses");
          if (invalid != null) {
            for (int i=0; i < invalid.length; i++) {
              log.logError(toString(),"         " + invalid[i]);
              result.setNrErrors(1);
            }
          }
        }
        Address[] validUnsent=sfex.getValidUnsentAddresses();
        if (validUnsent != null) {
          log.logError(toString(),"    ** ValidUnsent Addresses");
          if (validUnsent != null) {
            for (int i=0; i < validUnsent.length; i++) {
              log.logError(toString(),"         " + validUnsent[i]);
              result.setNrErrors(1);
            }
          }
        }
        Address[] validSent=sfex.getValidSentAddresses();
        if (validSent != null) {
          if (validSent != null) {
            for (int i=0; i < validSent.length; i++) {
              log.logError(toString(),"         " + validSent[i]);
              result.setNrErrors(1);
            }
          }
        }
      }
      if (ex instanceof MessagingException) {
        ex=((MessagingException)ex).getNextException();
      }
 else {
        ex=null;
      }
    }
 while (ex != null);
  }
  if (result.getNrErrors() > 0) {
    result.setResult(false);
  }
 else {
    result.setResult(true);
  }
  return result;
}
