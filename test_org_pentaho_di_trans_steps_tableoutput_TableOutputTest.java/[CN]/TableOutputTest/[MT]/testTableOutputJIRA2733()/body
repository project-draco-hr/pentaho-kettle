{
  KettleEnvironment.init();
  try {
    TransMeta transMeta=new TransMeta();
    transMeta.setName("table output JIRA2733 test");
    for (int i=0; i < databasesXML.length; i++) {
      DatabaseMeta databaseMeta=new DatabaseMeta(databasesXML[i]);
      transMeta.addDatabase(databaseMeta);
    }
    DatabaseMeta dbInfo=transMeta.findDatabase("db");
    Database database=new Database(transMeta,dbInfo);
    database.connect();
    createTable(database,target_table3,createSourceRowMetaInterface1());
    database.execStatement("ALTER TABLE " + target_table3 + " ADD COLUMN ts TIMESTAMP DEFAULT NOW() ");
    PluginRegistry registry=PluginRegistry.getInstance();
    String injectorStepname="injector step";
    InjectorMeta im=new InjectorMeta();
    String injectorPid=registry.getPluginId(StepPluginType.class,im);
    StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
    transMeta.addStep(injectorStep);
    String outputname="output to [" + target_table3 + "]";
    TableOutputMeta tom=new TableOutputMeta();
    tom.setDatabaseMeta(transMeta.findDatabase("db"));
    tom.setTablename(target_table3);
    tom.setTruncateTable(true);
    tom.setUseBatchUpdate(true);
    String fromid=registry.getPluginId(StepPluginType.class,tom);
    StepMeta fromstep=new StepMeta(fromid,outputname,(StepMetaInterface)tom);
    fromstep.setDescription("write data to table [" + target_table3 + "] on database ["+ dbInfo+ "]");
    transMeta.addStep(fromstep);
    TransHopMeta hi=new TransHopMeta(injectorStep,fromstep);
    transMeta.addTransHop(hi);
    int goldRowCounts[]={1,8,4,3,2,2,2,2,1};
    for (int commitSize=0; commitSize <= 8; commitSize++) {
      tom.setCommitSize(commitSize);
      Trans trans=new Trans(transMeta);
      trans.prepareExecution(null);
      StepInterface si=trans.getStepInterface(outputname,0);
      RowStepCollector rc=new RowStepCollector();
      si.addRowListener(rc);
      RowProducer rp=trans.addRowProducer(injectorStepname,0);
      trans.startThreads();
      List<RowMetaAndData> inputList=createNormalDataRows();
      for (      RowMetaAndData rm : inputList) {
        rp.putRow(rm.getRowMeta(),rm.getData());
      }
      rp.finished();
      trans.waitUntilFinished();
      TableOutputData data=(TableOutputData)trans.findDataInterface(outputname);
      int exp=goldRowCounts[commitSize];
      int act=data.db.getNrExecutedCommits() - 1;
      assertEquals("Incorrect number of commits with commitSize=" + commitSize + Const.CR,exp,act);
    }
    dropTable(database,target_table3);
  }
  finally {
  }
}
