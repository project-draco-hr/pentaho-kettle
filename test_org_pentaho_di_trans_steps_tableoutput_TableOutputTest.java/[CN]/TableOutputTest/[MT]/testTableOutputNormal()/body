{
  EnvUtil.environmentInit();
  try {
    TransMeta transMeta=new TransMeta();
    transMeta.setName("table output normal test");
    for (int i=0; i < databasesXML.length; i++) {
      DatabaseMeta databaseMeta=new DatabaseMeta(databasesXML[i]);
      transMeta.addDatabase(databaseMeta);
    }
    DatabaseMeta dbInfo=transMeta.findDatabase("db");
    Database database=new Database(this,dbInfo);
    database.connect();
    createTable(database,target_table,createSourceRowMetaInterface1());
    StepLoader steploader=StepLoader.getInstance();
    String injectorStepname="injector step";
    InjectorMeta im=new InjectorMeta();
    String injectorPid=steploader.getStepPluginID(im);
    StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
    transMeta.addStep(injectorStep);
    String outputname="output to [" + target_table + "]";
    TableOutputMeta tom=new TableOutputMeta();
    tom.setDatabaseMeta(transMeta.findDatabase("db"));
    tom.setTablename(target_table);
    String fromid=steploader.getStepPluginID(tom);
    StepMeta fromstep=new StepMeta(fromid,outputname,(StepMetaInterface)tom);
    fromstep.setDescription("write data to table [" + target_table + "] on database ["+ dbInfo+ "]");
    transMeta.addStep(fromstep);
    TransHopMeta hi=new TransHopMeta(injectorStep,fromstep);
    transMeta.addTransHop(hi);
    Trans trans=new Trans(transMeta);
    trans.prepareExecution(null);
    StepInterface si=trans.getStepInterface(outputname,0);
    RowStepCollector rc=new RowStepCollector();
    si.addRowListener(rc);
    RowProducer rp=trans.addRowProducer(injectorStepname,0);
    trans.startThreads();
    List<RowMetaAndData> inputList=createNormalDataRows();
    for (    RowMetaAndData rm : inputList) {
      rp.putRow(rm.getRowMeta(),rm.getData());
    }
    rp.finished();
    trans.waitUntilFinished();
    List<RowMetaAndData> resultRows=rc.getRowsWritten();
    List<RowMetaAndData> goldRows=createNormalDataRows();
    checkRows(goldRows,resultRows);
    checkResultsNormal(database);
  }
  finally {
  }
}
