{
  TextFileField tfFieldMock=mock(TextFileField.class);
  TextFileField[] textFileFields={tfFieldMock};
  when(stepMockHelper.initStepMetaInterface.getEndedLine()).thenReturn(EMPTY_STRING);
  when(stepMockHelper.initStepMetaInterface.getOutputFields()).thenReturn(textFileFields);
  when(stepMockHelper.initStepMetaInterface.isDoNotOpenNewFileInit()).thenReturn(true);
  when(stepMockHelper.processRowsStepMetaInterface.getEndedLine()).thenReturn(EMPTY_STRING);
  when(stepMockHelper.processRowsStepMetaInterface.getFileName()).thenReturn(EMPTY_FILE_NAME);
  when(stepMockHelper.processRowsStepMetaInterface.isDoNotOpenNewFileInit()).thenReturn(true);
  when(stepMockHelper.processRowsStepMetaInterface.getOutputFields()).thenReturn(textFileFields);
  when(stepMockHelper.processRowsStepDataInterface.getPreviouslyOpenedFiles()).thenReturn(new ArrayList<String>());
  textFileOutput=new TextFileOutput(stepMockHelper.stepMeta,stepMockHelper.stepDataInterface,0,stepMockHelper.transMeta,stepMockHelper.trans);
  TextFileOutput textFileoutputSpy=spy(textFileOutput);
  doNothing().when(textFileoutputSpy).openNewFile(EMPTY_FILE_NAME);
  textFileoutputSpy.init(stepMockHelper.initStepMetaInterface,stepMockHelper.initStepDataInterface);
  textFileoutputSpy.processRow(stepMockHelper.processRowsStepMetaInterface,stepMockHelper.initStepDataInterface);
  verify(textFileoutputSpy,never()).openNewFile(EMPTY_FILE_NAME);
  verify(textFileoutputSpy,never()).writeEndedLine();
  verify(textFileoutputSpy).setOutputDone();
}
