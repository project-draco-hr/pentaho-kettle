{
  if (!databaseMeta.supportsViews())   return new String[]{};
  String schemaname=null;
  if (databaseMeta.useSchemaNameForTableList())   schemaname=databaseMeta.getUsername().toUpperCase();
  ArrayList<String> names=new ArrayList<String>();
  ResultSet alltables=null;
  try {
    alltables=dbmd.getTables(null,schemaname,null,databaseMeta.getViewTypes());
    while (alltables.next()) {
      String table=alltables.getString("TABLE_NAME");
      String schema=alltables.getString("TABLE_SCHEM");
      if (Const.isEmpty(schema))       schema=alltables.getString("TABLE_CAT");
      String schemaTable;
      if (includeSchema)       schemaTable=databaseMeta.getQuotedSchemaTableCombination(schema,table);
 else       schemaTable=table;
      if (log.isRowLevel())       log.logRowlevel(toString(),"got view from meta-data: " + schemaTable);
      names.add(schemaTable);
    }
  }
 catch (  SQLException e) {
    throw new KettleDatabaseException("Error getting views from schema [" + schemaname + "]",e);
  }
 finally {
    try {
      if (alltables != null)       alltables.close();
    }
 catch (    SQLException e) {
      throw new KettleDatabaseException("Error closing resultset after getting views from schema [" + schemaname + "]",e);
    }
  }
  log.logDetailed(toString(),"read :" + names.size() + " views from db meta-data.");
  return names.toArray(new String[names.size()]);
}
