{
  int length=-1;
  int precision=-1;
  int valtype=ValueMetaInterface.TYPE_NONE;
  boolean isClob=false;
  int type=rm.getColumnType(index);
switch (type) {
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.LONGVARCHAR:
    valtype=ValueMetaInterface.TYPE_STRING;
  if (!ignoreLength)   length=rm.getColumnDisplaySize(index);
break;
case java.sql.Types.CLOB:
valtype=ValueMetaInterface.TYPE_STRING;
length=DatabaseMeta.CLOB_LENGTH;
isClob=true;
break;
case java.sql.Types.BIGINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=15;
break;
case java.sql.Types.INTEGER:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=9;
break;
case java.sql.Types.SMALLINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=4;
break;
case java.sql.Types.TINYINT:
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=2;
break;
case java.sql.Types.DECIMAL:
case java.sql.Types.DOUBLE:
case java.sql.Types.FLOAT:
case java.sql.Types.REAL:
case java.sql.Types.NUMERIC:
valtype=ValueMetaInterface.TYPE_NUMBER;
length=rm.getPrecision(index);
precision=rm.getScale(index);
if (length >= 126) length=-1;
if (precision >= 126) precision=-1;
if (type == java.sql.Types.DOUBLE || type == java.sql.Types.FLOAT || type == java.sql.Types.REAL) {
if (precision == 0) {
precision=-1;
}
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_POSTGRES && type == java.sql.Types.DOUBLE && precision == 16 && length == 16) {
precision=-1;
length=-1;
}
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_MYSQL) {
if (precision >= length) {
precision=-1;
length=-1;
}
}
}
 else {
if (precision == 0 && length < 18 && length > 0) {
valtype=ValueMetaInterface.TYPE_INTEGER;
}
}
if (length > 18 || precision > 18) valtype=ValueMetaInterface.TYPE_BIGNUMBER;
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE) {
if (precision == 0 && length == 38) {
valtype=ValueMetaInterface.TYPE_INTEGER;
}
if (precision <= 0 && length <= 0) {
valtype=ValueMetaInterface.TYPE_NUMBER;
length=-1;
precision=-1;
}
}
break;
case java.sql.Types.DATE:
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_TERADATA) {
precision=1;
}
case java.sql.Types.TIME:
case java.sql.Types.TIMESTAMP:
valtype=ValueMetaInterface.TYPE_DATE;
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_MYSQL) {
String property=databaseMeta.getConnectionProperties().getProperty("yearIsDateType");
if (property != null && property.equalsIgnoreCase("false") && rm.getColumnTypeName(index).equalsIgnoreCase("YEAR")) {
valtype=ValueMetaInterface.TYPE_INTEGER;
precision=0;
length=4;
break;
}
}
break;
case java.sql.Types.BOOLEAN:
case java.sql.Types.BIT:
valtype=ValueMetaInterface.TYPE_BOOLEAN;
break;
case java.sql.Types.BINARY:
case java.sql.Types.BLOB:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
valtype=ValueMetaInterface.TYPE_BINARY;
if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_DB2 && (2 * rm.getPrecision(index)) == rm.getColumnDisplaySize(index)) {
length=rm.getPrecision(index);
}
 else if (databaseMeta.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE && (type == java.sql.Types.VARBINARY || type == java.sql.Types.LONGVARBINARY)) {
valtype=ValueMetaInterface.TYPE_STRING;
length=rm.getColumnDisplaySize(index);
}
 else {
length=-1;
}
precision=-1;
break;
default :
valtype=ValueMetaInterface.TYPE_STRING;
precision=rm.getScale(index);
break;
}
String comments=rm.getColumnLabel(index);
int originalColumnType=rm.getColumnType(index);
String originalColumnTypeName=rm.getColumnTypeName(index);
int originalPrecision=rm.getPrecision(index);
int originalScale=rm.getScale(index);
boolean originalAutoIncrement=rm.isAutoIncrement(index);
int originalNullable=rm.isNullable(index);
boolean originalSigned=rm.isSigned(index);
ValueMetaInterface v=new ValueMeta(name,valtype);
v.setLength(length);
v.setPrecision(precision);
v.setComments(comments);
v.setLargeTextField(isClob);
v.setOriginalColumnType(originalColumnType);
v.setOriginalColumnTypeName(originalColumnTypeName);
v.setOriginalPrecision(originalPrecision);
v.setOriginalScale(originalScale);
v.setOriginalAutoIncrement(originalAutoIncrement);
v.setOriginalNullable(originalNullable);
v.setOriginalSigned(originalSigned);
if (lazyConversion && valtype == ValueMetaInterface.TYPE_STRING) {
v.setStorageType(ValueMetaInterface.STORAGE_TYPE_BINARY_STRING);
ValueMetaInterface storageMetaData=v.clone();
storageMetaData.setType(ValueMetaInterface.TYPE_STRING);
storageMetaData.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);
v.setStorageMetadata(storageMetaData);
}
return v;
}
