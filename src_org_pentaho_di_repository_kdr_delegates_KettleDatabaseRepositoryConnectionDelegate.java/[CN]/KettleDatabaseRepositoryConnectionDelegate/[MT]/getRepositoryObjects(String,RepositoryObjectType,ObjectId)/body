{
  try {
    String idField;
    if (RepositoryObjectType.TRANSFORMATION.equals(objectType)) {
      idField=KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_TRANSFORMATION;
    }
 else {
      idField=KettleDatabaseRepository.FIELD_JOB_ID_JOB;
    }
    if (id_directory == null) {
      id_directory=new LongObjectId(0L);
    }
    RepositoryDirectoryInterface repositoryDirectory=new RepositoryDirectory();
    repositoryDirectory.setObjectId(id_directory);
    repository.directoryDelegate.loadRepositoryDirectory(new RepositoryDirectory(),id_directory);
    String sql="SELECT " + quote(KettleDatabaseRepository.FIELD_TRANSFORMATION_NAME) + ", "+ quote(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_USER)+ ", "+ quote(KettleDatabaseRepository.FIELD_TRANSFORMATION_MODIFIED_DATE)+ ", "+ quote(KettleDatabaseRepository.FIELD_TRANSFORMATION_DESCRIPTION)+ ", "+ quote(idField)+ " "+ "FROM "+ tableName+ " "+ "WHERE "+ quote(KettleDatabaseRepository.FIELD_TRANSFORMATION_ID_DIRECTORY)+ " = "+ id_directory+ " ";
    List<RepositoryElementMetaInterface> repositoryObjects=new ArrayList<RepositoryElementMetaInterface>();
    ResultSet rs=database.openQuery(sql);
    if (rs != null) {
      List<Object[]> rows=database.getRows(rs,-1,null);
      if (rs != null) {
        database.closeQuery(rs);
      }
      RowMetaInterface rowMeta=database.getReturnRowMeta();
      for (      Object[] r : rows) {
        ObjectId id=new LongObjectId(rowMeta.getInteger(r,4));
        repositoryObjects.add(new RepositoryObject(id,rowMeta.getString(r,0),repositoryDirectory,rowMeta.getString(r,1),rowMeta.getDate(r,2),objectType,rowMeta.getString(r,3),false));
      }
    }
    return repositoryObjects;
  }
 catch (  Exception e) {
    throw new KettleException("Unable to get list of repository objects",e);
  }
}
