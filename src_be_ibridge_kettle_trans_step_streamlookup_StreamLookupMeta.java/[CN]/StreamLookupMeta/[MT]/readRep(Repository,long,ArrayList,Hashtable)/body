{
  try {
    lookupFromStepname=rep.getStepAttributeString(id_step,"lookup_from_step");
    lookupFromStep=null;
    inputSorted=rep.getStepAttributeBoolean(id_step,"input_sorted");
    memoryPreservationActive=rep.getStepAttributeBoolean(id_step,"preserve_memory");
    usingSortedList=rep.getStepAttributeBoolean(id_step,"sorted_list");
    int nrkeys=rep.countNrStepAttributes(id_step,"lookup_key_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"return_value_name");
    allocate(nrkeys,nrvalues);
    for (int i=0; i < nrkeys; i++) {
      keystream[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name");
      keylookup[i]=rep.getStepAttributeString(id_step,i,"lookup_key_field");
    }
    for (int i=0; i < nrvalues; i++) {
      value[i]=rep.getStepAttributeString(id_step,i,"return_value_name");
      valueName[i]=rep.getStepAttributeString(id_step,i,"return_value_rename");
      valueDefault[i]=rep.getStepAttributeString(id_step,i,"return_value_default");
      valueDefaultType[i]=Value.getType(rep.getStepAttributeString(id_step,i,"return_value_type"));
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("StreamLookupMeta.Exception.UnexpecteErrorReadingStepInfoFromRepository"),e);
  }
}
