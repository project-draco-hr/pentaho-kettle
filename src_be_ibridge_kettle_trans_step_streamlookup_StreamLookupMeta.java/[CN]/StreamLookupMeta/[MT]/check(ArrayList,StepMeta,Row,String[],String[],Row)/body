{
  CheckResult cr;
  if (prev != null && prev.size() > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is connected to previous one, receiving " + prev.size() + " fields",stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (int i=0; i < keystream.length; i++) {
      int idx=prev.searchValueIndex(keystream[i]);
      if (idx < 0) {
        error_message+="\t\t" + keystream[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message="Fields that were not found in input stream:" + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All fields are found in the input stream.",stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Couldn't find fields from previous steps, check the hops...!",stepMeta);
    remarks.add(cr);
  }
  if (info != null && info.size() > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving lookup data to other step, receiving " + info.size() + " fields",stepMeta);
    remarks.add(cr);
    String error_message="";
    boolean error_found=false;
    for (int i=0; i < keylookup.length; i++) {
      int idx=info.searchValueIndex(keylookup[i]);
      if (idx < 0) {
        error_message+="\t\t" + keylookup[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message="Fields that were not found in lookup stream:" + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All fields are found in the lookup stream.",stepMeta);
      remarks.add(cr);
    }
    for (int i=0; i < value.length; i++) {
      int idx=info.searchValueIndex(value[i]);
      if (idx < 0) {
        error_message+="\t\t" + value[i] + Const.CR;
        error_found=true;
      }
    }
    if (error_found) {
      error_message="Fields to retrieve that were not found in lookup stream:" + Const.CR + Const.CR+ error_message;
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All fields to retrieve are found in the input lookup stream.",stepMeta);
      remarks.add(cr);
    }
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Couldn't find fields from lookup steps, check the hops...!",stepMeta);
    remarks.add(cr);
  }
  if (lookupFromStep == null) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Source step is not selected!",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Source step is selected.",stepMeta);
    remarks.add(cr);
    if (info != null) {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Source step [" + lookupFromStep + "] exist!",stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"Source step [" + lookupFromStep + "] doesn't exist!",stepMeta);
      remarks.add(cr);
    }
  }
  if (input.length >= 2) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from " + input.length + " input steps.",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"We need at least 2 input streams:" + Const.CR + "  1 (or more) input stream for the data"+ Const.CR+ " 1 input stream for the lookup data",stepMeta);
    remarks.add(cr);
  }
}
