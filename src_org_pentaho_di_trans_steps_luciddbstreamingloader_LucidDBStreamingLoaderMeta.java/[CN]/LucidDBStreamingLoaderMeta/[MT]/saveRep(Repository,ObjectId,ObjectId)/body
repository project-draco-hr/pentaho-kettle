{
  try {
    rep.saveDatabaseMetaStepAttribute(id_transformation,id_step,"id_connection",databaseMeta);
    rep.saveStepAttribute(id_transformation,id_step,"schema",schemaName);
    rep.saveStepAttribute(id_transformation,id_step,"table",tableName);
    rep.saveStepAttribute(id_transformation,id_step,"host",host);
    rep.saveStepAttribute(id_transformation,id_step,"port",port);
    rep.saveStepAttribute(id_transformation,id_step,"operation",operation);
    rep.saveStepAttribute(id_transformation,id_step,"custom_sql",custom_sql);
    rep.saveStepAttribute(id_transformation,id_step,"sql_statement",sql_statement);
    rep.saveStepAttribute(id_transformation,id_step,"select_stmt",selectStmt);
    for (int i=0; i < fieldTableForKeys.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"key_field_name",fieldTableForKeys[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"key_stream_name",fieldStreamForKeys[i]);
    }
    for (int i=0; i < fieldTableForFields.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"field_field_name",fieldTableForFields[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"field_stream_name",fieldStreamForFields[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"insert_or_update_flag",insOrUptFlag[i]);
    }
    for (int i=0; i < tabIsEnable.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"tab_is_enable",tabIsEnable[i]);
    }
    if (databaseMeta != null)     rep.insertStepDatabase(id_transformation,id_step,databaseMeta.getObjectId());
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"LucidDBStreamingLoaderMeta.Exception.UnableToSaveStepInfoToRepository") + id_step,e);
  }
}
