{
  LogWriter log=LogWriter.getInstance();
  EnvUtil.environmentInit();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("hop test default");
  StepLoader steploader=StepLoader.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=steploader.getStepPluginID(im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
  transMeta.addStep(injectorStep);
  String dummyStepname="dummy step";
  DummyTransMeta dm=new DummyTransMeta();
  String dummyPid=steploader.getStepPluginID(dm);
  StepMeta dummyStep=new StepMeta(dummyPid,dummyStepname,(StepMetaInterface)dm);
  transMeta.addStep(dummyStep);
  TransHopMeta hi=new TransHopMeta(injectorStep,dummyStep);
  transMeta.addTransHop(hi);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=steploader.getStepPluginID(dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,(StepMetaInterface)dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hop1=new TransHopMeta(dummyStep,dummyStep1);
  transMeta.addTransHop(hop1);
  String dummyStepname2="dummy step 2";
  DummyTransMeta dm2=new DummyTransMeta();
  String dummyPid2=steploader.getStepPluginID(dm2);
  StepMeta dummyStep2=new StepMeta(dummyPid2,dummyStepname2,(StepMetaInterface)dm2);
  transMeta.addStep(dummyStep2);
  TransHopMeta hop2=new TransHopMeta(dummyStep,dummyStep2);
  transMeta.addTransHop(hop2);
  dummyStep.setDistributes(true);
  Trans trans=new Trans(log,transMeta);
  trans.prepareExecution(null);
  StepInterface si1=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector rc1=new RowStepCollector();
  si1.addRowListener(rc1);
  StepInterface si2=trans.getStepInterface(dummyStepname2,0);
  RowStepCollector rc2=new RowStepCollector();
  si2.addRowListener(rc2);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List compareList1=new ArrayList();
  List compareList2=new ArrayList();
  int counter=1;
  List inputList=createData();
  Iterator it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=(RowMetaAndData)it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
    if (counter % 2 == 0) {
      compareList2.add(rm);
    }
 else {
      compareList1.add(rm);
    }
    counter++;
  }
  rp.finished();
  trans.waitUntilFinished();
  List resultRows1=rc1.getRowsRead();
  checkRows(resultRows1,compareList1);
  List resultRows2=rc2.getRowsRead();
  checkRows(resultRows2,compareList2);
}
