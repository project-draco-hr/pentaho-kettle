{
  if (first) {
    first=false;
    enclosure=meta.getEnclosure();
    if (enclosure == null) {
      enclosure="";
    }
 else {
      enclosure=gpLoad.environmentSubstitute(enclosure);
    }
    delimiter=meta.getDelimiter();
    if (delimiter == null) {
      throw new KettleException(BaseMessages.getString(PKG,"GPload.Exception.DelimiterMissing"));
    }
 else {
      delimiter=gpLoad.environmentSubstitute(delimiter);
      if (Const.isEmpty(delimiter)) {
        throw new KettleException(BaseMessages.getString(PKG,"GPload.Exception.DelimiterMissing"));
      }
    }
    fieldNumbers=new int[meta.getFieldStream().length];
    for (int i=0; i < fieldNumbers.length; i++) {
      fieldNumbers[i]=mi.indexOfValue(meta.getFieldStream()[i]);
      if (fieldNumbers[i] < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"GPLoadDataOutput.Exception.FieldNotFound",meta.getFieldStream()[i]));
      }
    }
    sdfDate=new SimpleDateFormat("yyyy-MM-dd");
    sdfDateTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
  }
  ValueMetaInterface v=null;
  int number=0;
  for (int i=0; i < fieldNumbers.length; i++) {
    if (i != 0) {
      output.print(delimiter);
    }
    number=fieldNumbers[i];
    v=mi.getValueMeta(number);
    if (row[number] == null) {
      output.print(enclosure);
      output.print(enclosure);
    }
 else {
switch (v.getType()) {
case ValueMetaInterface.TYPE_STRING:
        String s=mi.getString(row,number);
      if (s.indexOf(enclosure) >= 0) {
        s=createEscapedString(s,enclosure);
      }
    output.print(enclosure);
  output.print(s);
output.print(enclosure);
break;
case ValueMetaInterface.TYPE_INTEGER:
Long l=mi.getInteger(row,number);
if (meta.getEncloseNumbers()) {
output.print(enclosure);
output.print(l);
output.print(enclosure);
}
 else {
output.print(l);
}
break;
case ValueMetaInterface.TYPE_NUMBER:
Double d=mi.getNumber(row,number);
if (meta.getEncloseNumbers()) {
output.print(enclosure);
output.print(d);
output.print(enclosure);
}
 else {
output.print(d);
}
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
BigDecimal bd=mi.getBigNumber(row,number);
if (meta.getEncloseNumbers()) {
output.print(enclosure);
output.print(bd);
output.print(enclosure);
}
 else {
output.print(bd);
}
break;
case ValueMetaInterface.TYPE_DATE:
Date dt=mi.getDate(row,number);
output.print(enclosure);
String mask=meta.getDateMask()[i];
if (GPLoadMeta.DATE_MASK_DATETIME.equals(mask)) {
output.print(sdfDateTime.format(dt));
}
 else {
output.print(sdfDate.format(dt));
}
output.print(enclosure);
break;
case ValueMetaInterface.TYPE_BOOLEAN:
Boolean b=mi.getBoolean(row,number);
output.print(enclosure);
if (b.booleanValue()) {
output.print("Y");
}
 else {
output.print("N");
}
output.print(enclosure);
break;
case ValueMetaInterface.TYPE_BINARY:
byte[] byt=mi.getBinary(row,number);
output.print("<startlob>");
output.print(byt);
output.print("<endlob>");
break;
default :
throw new KettleException(BaseMessages.getString(PKG,"GPLoadDataOutput.Exception.TypeNotSupported",v.getType()));
}
}
}
output.print(Const.CR);
}
