{
  try {
    super.loadRep(rep,id_jobentry,databases);
    tablename=rep.getJobEntryAttributeString(id_jobentry,"tablename");
    filename=rep.getJobEntryAttributeString(id_jobentry,"filename");
    separator=rep.getJobEntryAttributeString(id_jobentry,"separator");
    replacedata=rep.getJobEntryAttributeBoolean(id_jobentry,"replacedata");
    ignorelines=rep.getJobEntryAttributeString(id_jobentry,"ignorelines");
    listattribut=rep.getJobEntryAttributeString(id_jobentry,"listattribut");
    localinfile=rep.getJobEntryAttributeBoolean(id_jobentry,"localinfile");
    prorityvalue=Const.toInt(rep.getJobEntryAttributeString(id_jobentry,"prorityvalue"),-1);
    long id_db=rep.getJobEntryAttributeInteger(id_jobentry,"id_database");
    if (id_db > 0) {
      connection=DatabaseMeta.findDatabase(databases,id_db);
    }
 else {
      connection=DatabaseMeta.findDatabase(databases,rep.getJobEntryAttributeString(id_jobentry,"connection"));
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to load job entry of type 'table exists' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
