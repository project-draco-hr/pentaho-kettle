{
  try {
    startsWithHeader=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"header"));
    String nempty=XMLHandler.getTagValue(stepnode,"noempty");
    ignoreEmptyRows=YES.equalsIgnoreCase(nempty) || nempty == null;
    String soempty=XMLHandler.getTagValue(stepnode,"stoponempty");
    stopOnEmpty=YES.equalsIgnoreCase(soempty) || nempty == null;
    sheetRowNumberField=XMLHandler.getTagValue(stepnode,"sheetrownumfield");
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownumfield");
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0);
    encoding=XMLHandler.getTagValue(stepnode,"encoding");
    String addToResult=XMLHandler.getTagValue(stepnode,"add_to_result_filenames");
    if (Const.isEmpty(addToResult)) {
      isaddresult=true;
    }
 else {
      isaddresult="Y".equalsIgnoreCase(addToResult);
    }
    sheetField=XMLHandler.getTagValue(stepnode,"sheetfield");
    fileField=XMLHandler.getTagValue(stepnode,"filefield");
    acceptingFilenames=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"accept_filenames"));
    acceptingField=XMLHandler.getTagValue(stepnode,"accept_field");
    acceptingStepName=XMLHandler.getTagValue(stepnode,"accept_stepname");
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node sheetsnode=XMLHandler.getSubNode(stepnode,"sheets");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrfiles=XMLHandler.countNodes(filenode,"name");
    int nrsheets=XMLHandler.countNodes(sheetsnode,"sheet");
    int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfiles,nrsheets,nrfields);
    for (int i=0; i < nrfiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      Node excludefilemasknode=XMLHandler.getSubNodeByNr(filenode,"exclude_filemask",i);
      Node fileRequirednode=XMLHandler.getSubNodeByNr(filenode,"file_required",i);
      Node includeSubFoldersnode=XMLHandler.getSubNodeByNr(filenode,"include_subfolders",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
      excludeFileMask[i]=XMLHandler.getNodeValue(excludefilemasknode);
      fileRequired[i]=XMLHandler.getNodeValue(fileRequirednode);
      includeSubFolders[i]=XMLHandler.getNodeValue(includeSubFoldersnode);
    }
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      field[i]=new ExcelInputField();
      field[i].setName(XMLHandler.getTagValue(fnode,"name"));
      field[i].setType(ValueMetaFactory.getIdForValueMeta(XMLHandler.getTagValue(fnode,"type")));
      field[i].setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      field[i].setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      String srepeat=XMLHandler.getTagValue(fnode,"repeat");
      field[i].setTrimType(getTrimTypeByCode(XMLHandler.getTagValue(fnode,"trim_type")));
      if (srepeat != null) {
        field[i].setRepeated(YES.equalsIgnoreCase(srepeat));
      }
 else {
        field[i].setRepeated(false);
      }
      field[i].setFormat(XMLHandler.getTagValue(fnode,"format"));
      field[i].setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      field[i].setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      field[i].setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
    }
    for (int i=0; i < nrsheets; i++) {
      Node snode=XMLHandler.getSubNodeByNr(sheetsnode,"sheet",i);
      sheetName[i]=XMLHandler.getTagValue(snode,"name");
      startRow[i]=Const.toInt(XMLHandler.getTagValue(snode,"startrow"),0);
      startColumn[i]=Const.toInt(XMLHandler.getTagValue(snode,"startcol"),0);
    }
    strictTypes=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"strict_types"));
    errorIgnored=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_ignored"));
    errorLineSkipped=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_line_skipped"));
    warningFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"bad_line_files_destination_directory");
    warningFilesExtension=XMLHandler.getTagValue(stepnode,"bad_line_files_extension");
    errorFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"error_line_files_destination_directory");
    errorFilesExtension=XMLHandler.getTagValue(stepnode,"error_line_files_extension");
    lineNumberFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"line_number_files_destination_directory");
    lineNumberFilesExtension=XMLHandler.getTagValue(stepnode,"line_number_files_extension");
    shortFileFieldName=XMLHandler.getTagValue(stepnode,"shortFileFieldName");
    pathFieldName=XMLHandler.getTagValue(stepnode,"pathFieldName");
    hiddenFieldName=XMLHandler.getTagValue(stepnode,"hiddenFieldName");
    lastModificationTimeFieldName=XMLHandler.getTagValue(stepnode,"lastModificationTimeFieldName");
    uriNameFieldName=XMLHandler.getTagValue(stepnode,"uriNameFieldName");
    rootUriNameFieldName=XMLHandler.getTagValue(stepnode,"rootUriNameFieldName");
    extensionFieldName=XMLHandler.getTagValue(stepnode,"extensionFieldName");
    sizeFieldName=XMLHandler.getTagValue(stepnode,"sizeFieldName");
    try {
      spreadSheetType=SpreadSheetType.valueOf(XMLHandler.getTagValue(stepnode,"spreadsheet_type"));
    }
 catch (    Exception e) {
      spreadSheetType=SpreadSheetType.JXL;
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to read step information from XML",e);
  }
}
