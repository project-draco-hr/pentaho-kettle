{
  try {
    startsWithHeader=rep.getStepAttributeBoolean(id_step,"header");
    ignoreEmptyRows=rep.getStepAttributeBoolean(id_step,"noempty");
    stopOnEmpty=rep.getStepAttributeBoolean(id_step,"stoponempty");
    fileField=rep.getStepAttributeString(id_step,"filefield");
    sheetField=rep.getStepAttributeString(id_step,"sheetfield");
    sheetRowNumberField=rep.getStepAttributeString(id_step,"sheetrownumfield");
    rowNumberField=rep.getStepAttributeString(id_step,"rownumfield");
    rowLimit=(int)rep.getStepAttributeInteger(id_step,"limit");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    String addToResult=rep.getStepAttributeString(id_step,"add_to_result_filenames");
    if (Const.isEmpty(addToResult)) {
      isaddresult=true;
    }
 else {
      isaddresult=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    }
    acceptingFilenames=rep.getStepAttributeBoolean(id_step,"accept_filenames");
    acceptingField=rep.getStepAttributeString(id_step,"accept_field");
    acceptingStepName=rep.getStepAttributeString(id_step,"accept_stepname");
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrsheets=rep.countNrStepAttributes(id_step,"sheet_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfiles,nrsheets,nrfields);
    for (int i=0; i < nrfiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i])) {
        fileRequired[i]=NO;
      }
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(includeSubFolders[i])) {
        includeSubFolders[i]=NO;
      }
    }
    for (int i=0; i < nrsheets; i++) {
      sheetName[i]=rep.getStepAttributeString(id_step,i,"sheet_name");
      startRow[i]=(int)rep.getStepAttributeInteger(id_step,i,"sheet_startrow");
      startColumn[i]=(int)rep.getStepAttributeInteger(id_step,i,"sheet_startcol");
    }
    for (int i=0; i < nrfields; i++) {
      field[i]=new ExcelInputField();
      field[i].setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field[i].setType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,"field_type")));
      field[i].setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field[i].setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field[i].setTrimType(getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field[i].setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      field[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field[i].setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field[i].setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field[i].setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
    }
    strictTypes=rep.getStepAttributeBoolean(id_step,0,"strict_types",false);
    errorIgnored=rep.getStepAttributeBoolean(id_step,0,"error_ignored",false);
    errorLineSkipped=rep.getStepAttributeBoolean(id_step,0,"error_line_skipped",false);
    warningFilesDestinationDirectory=rep.getStepAttributeString(id_step,"bad_line_files_dest_dir");
    warningFilesExtension=rep.getStepAttributeString(id_step,"bad_line_files_ext");
    errorFilesDestinationDirectory=rep.getStepAttributeString(id_step,"error_line_files_dest_dir");
    errorFilesExtension=rep.getStepAttributeString(id_step,"error_line_files_ext");
    lineNumberFilesDestinationDirectory=rep.getStepAttributeString(id_step,"line_number_files_dest_dir");
    lineNumberFilesExtension=rep.getStepAttributeString(id_step,"line_number_files_ext");
    shortFileFieldName=rep.getStepAttributeString(id_step,"shortFileFieldName");
    pathFieldName=rep.getStepAttributeString(id_step,"pathFieldName");
    hiddenFieldName=rep.getStepAttributeString(id_step,"hiddenFieldName");
    lastModificationTimeFieldName=rep.getStepAttributeString(id_step,"lastModificationTimeFieldName");
    rootUriNameFieldName=rep.getStepAttributeString(id_step,"rootUriNameFieldName");
    uriNameFieldName=rep.getStepAttributeString(id_step,"uriNameFieldName");
    extensionFieldName=rep.getStepAttributeString(id_step,"extensionFieldName");
    sizeFieldName=rep.getStepAttributeString(id_step,"sizeFieldName");
    try {
      spreadSheetType=SpreadSheetType.valueOf(rep.getStepAttributeString(id_step,"spreadsheet_type"));
    }
 catch (    Exception e) {
      spreadSheetType=SpreadSheetType.JXL;
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
