{
  jobEntry.setJobName(wJobname.getText());
  jobEntry.setFileName(wFilename.getText());
  jobEntry.setName(wName.getText());
  if (repository != null)   jobEntry.setDirectory(repository.getDirectoryTree().findDirectory(wDirectory.getText()));
  int nritems=wFields.nrNonEmpty();
  int nr=0;
  for (int i=0; i < nritems; i++) {
    String arg=wFields.getNonEmpty(i).getText(1);
    if (arg != null && arg.length() != 0)     nr++;
  }
  jobEntry.arguments=new String[nr];
  nr=0;
  for (int i=0; i < nritems; i++) {
    String arg=wFields.getNonEmpty(i).getText(1);
    if (arg != null && arg.length() != 0) {
      jobEntry.arguments[nr]=arg;
      nr++;
    }
  }
  jobEntry.setLogfile=wSetLogfile.getSelection();
  jobEntry.addDate=wAddDate.getSelection();
  jobEntry.addTime=wAddTime.getSelection();
  jobEntry.logfile=wLogfile.getText();
  jobEntry.logext=wLogext.getText();
  jobEntry.loglevel=wLoglevel.getSelectionIndex();
  jobEntry.argFromPrevious=wPrevious.getSelection();
  jobEntry.execPerRow=wEveryRow.getSelection();
  int slaveIndex=wSlaveServer.getSelectionIndex();
  if (slaveIndex >= 0 && slaveIndex < jobMeta.getSlaveServers().size()) {
    jobEntry.setRemoteSlaveServer(jobMeta.getSlaveServers().get(slaveIndex));
  }
  dispose();
}
