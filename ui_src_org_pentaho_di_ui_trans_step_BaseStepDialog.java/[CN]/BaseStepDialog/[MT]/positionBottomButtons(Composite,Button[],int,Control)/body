{
  Rectangle largest=null;
  for (int i=0; i < buttons.length; i++) {
    buttons[i].pack(true);
    Rectangle r=buttons[i].getBounds();
    if (largest == null || r.width > largest.width) {
      largest=r;
    }
    if (buttons[i].getToolTipText() == null) {
      buttons[i].setToolTipText(Const.replace(buttons[i].getText(),"&",""));
    }
  }
  largest.width+=10;
  if ((largest.width % 2) == 1) {
    largest.width++;
  }
switch (buttonAlignment) {
case BUTTON_ALIGNMENT_CENTER:
    centerButtons(buttons,largest.width,margin,lastControl);
  break;
case BUTTON_ALIGNMENT_LEFT:
leftAlignButtons(buttons,largest.width,margin,lastControl);
break;
case BUTTON_ALIGNMENT_RIGHT:
rightAlignButtons(buttons,largest.width,margin,lastControl);
break;
default :
break;
}
if (Const.isOSX()) {
Shell parentShell=composite.getShell();
final List<TableView> tableViews=new ArrayList<TableView>();
getTableViews(parentShell,tableViews);
for (final Button button : buttons) {
button.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
for (TableView view : tableViews) {
view.applyOSXChanges();
}
}
}
);
}
}
}
