{
  meta=(DelayMeta)smi;
  data=(DelayData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    String msgScale;
switch (meta.getScaleTimeCode()) {
case 0:
      msgScale=Messages.getString("DelayDialog.SScaleTime.Label");
    data.Multiple=1000;
  break;
case 1:
msgScale=Messages.getString("DelayDialog.MnScaleTime.Label");
data.Multiple=60000;
break;
case 2:
msgScale=Messages.getString("DelayDialog.HrScaleTime.Label");
data.Multiple=3600000;
break;
default :
msgScale="Unknown Scale";
data.Multiple=1;
}
String timeOut=environmentSubstitute(meta.getTimeOut());
data.timeout=Const.toInt(timeOut,0);
if (log.isDebug()) log.logDebug(toString(),Messages.getString("Delay.Log.TimeOut","" + data.timeout,msgScale));
}
long timeStart=System.currentTimeMillis() / data.Multiple;
boolean continueLoop=true;
while (continueLoop) {
long now=System.currentTimeMillis() / data.Multiple;
if (now >= (timeStart + data.timeout)) {
if (log.isDebug()) log.logDebug(toString(),Messages.getString("Delay.WaitTimeIsElapsed.Label"));
continueLoop=false;
}
 else {
try {
Thread.sleep(1000);
}
 catch (Exception e) {
}
}
}
putRow(getInputRowMeta(),r);
if (checkFeedback(getLinesRead())) {
if (log.isDetailed()) logDetailed(Messages.getString("Delay.Log.LineNumber","" + getLinesRead()));
}
return true;
}
