{
  meta=(CalculatorMeta)smi;
  data=(CalculatorData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    data.clearValuesMetaMapping();
    return false;
  }
  if (first) {
    first=false;
    data.setOutputRowMeta(getInputRowMeta().clone());
    meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this,repository,metaStore);
    data.setCalcRowMeta(meta.getAllFields(getInputRowMeta()));
    data.setFieldIndexes(new FieldIndexes[meta.getCalculation().length]);
    List<Integer> tempIndexes=new ArrayList<Integer>();
    for (int i=0; i < meta.getCalculation().length; i++) {
      CalculatorMetaFunction function=meta.getCalculation()[i];
      data.getFieldIndexes()[i]=new FieldIndexes();
      if (!Utils.isEmpty(function.getFieldName())) {
        data.getFieldIndexes()[i].indexName=data.getCalcRowMeta().indexOfValue(function.getFieldName());
        if (data.getFieldIndexes()[i].indexName < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"Calculator.Error.UnableFindField",function.getFieldName(),"" + (i + 1)));
        }
      }
 else {
        throw new KettleStepException(BaseMessages.getString(PKG,"Calculator.Error.NoNameField","" + (i + 1)));
      }
      if (!Utils.isEmpty(function.getFieldA())) {
        if (function.getCalcType() != CalculatorMetaFunction.CALC_CONSTANT) {
          data.getFieldIndexes()[i].indexA=data.getCalcRowMeta().indexOfValue(function.getFieldA());
          if (data.getFieldIndexes()[i].indexA < 0) {
            throw new KettleStepException("Unable to find the first argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
          }
        }
 else {
          data.getFieldIndexes()[i].indexA=-1;
        }
      }
 else {
        throw new KettleStepException("There is no first argument specified for calculated field #" + (i + 1));
      }
      if (!Utils.isEmpty(function.getFieldB())) {
        data.getFieldIndexes()[i].indexB=data.getCalcRowMeta().indexOfValue(function.getFieldB());
        if (data.getFieldIndexes()[i].indexB < 0) {
          throw new KettleStepException("Unable to find the second argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
        }
      }
      data.getFieldIndexes()[i].indexC=-1;
      if (!Utils.isEmpty(function.getFieldC())) {
        data.getFieldIndexes()[i].indexC=data.getCalcRowMeta().indexOfValue(function.getFieldC());
        if (data.getFieldIndexes()[i].indexC < 0) {
          throw new KettleStepException("Unable to find the third argument field '" + function.getFieldName() + " for calculation #"+ (i + 1));
        }
      }
      if (function.isRemovedFromResult()) {
        tempIndexes.add(getInputRowMeta().size() + i);
      }
    }
    data.setTempIndexes(new int[tempIndexes.size()]);
    for (int i=0; i < data.getTempIndexes().length; i++) {
      data.getTempIndexes()[i]=tempIndexes.get(i);
    }
  }
  if (log.isRowLevel()) {
    logRowlevel(BaseMessages.getString(PKG,"Calculator.Log.ReadRow") + getLinesRead() + " : "+ getInputRowMeta().getString(r));
  }
  try {
    Object[] row=calcFields(getInputRowMeta(),r);
    putRow(data.getOutputRowMeta(),row);
    if (log.isRowLevel()) {
      logRowlevel("Wrote row #" + getLinesWritten() + " : "+ getInputRowMeta().getString(r));
    }
    if (checkFeedback(getLinesRead())) {
      if (log.isBasic()) {
        logBasic(BaseMessages.getString(PKG,"Calculator.Log.Linenr","" + getLinesRead()));
      }
    }
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      putError(getInputRowMeta(),r,1,e.toString(),null,"CALC001");
    }
 else {
      logError(BaseMessages.getString(PKG,"Calculator.ErrorInStepRunning" + " : " + e.getMessage()));
      throw new KettleStepException(BaseMessages.getString(PKG,"Calculator.ErrorInStepRunning"),e);
    }
  }
  return true;
}
