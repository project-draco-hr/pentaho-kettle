{
  Object[] calcData=RowDataUtil.resizeArray(r,data.getCalcRowMeta().size());
  for (int i=0, index=inputRowMeta.size() + i; i < meta.getCalculation().length; i++, index++) {
    CalculatorMetaFunction fn=meta.getCalculation()[i];
    if (!Const.isEmpty(fn.getFieldName())) {
      ValueMetaInterface targetMeta=data.getCalcRowMeta().getValueMeta(index);
      ValueMetaInterface metaA=null;
      Object dataA=null;
      if (data.getFieldIndexes()[i].indexA >= 0) {
        metaA=data.getCalcRowMeta().getValueMeta(data.getFieldIndexes()[i].indexA);
        dataA=calcData[data.getFieldIndexes()[i].indexA];
      }
      ValueMetaInterface metaB=null;
      Object dataB=null;
      if (data.getFieldIndexes()[i].indexB >= 0) {
        metaB=data.getCalcRowMeta().getValueMeta(data.getFieldIndexes()[i].indexB);
        dataB=calcData[data.getFieldIndexes()[i].indexB];
      }
      ValueMetaInterface metaC=null;
      Object dataC=null;
      if (data.getFieldIndexes()[i].indexC >= 0) {
        metaC=data.getCalcRowMeta().getValueMeta(data.getFieldIndexes()[i].indexC);
        dataC=calcData[data.getFieldIndexes()[i].indexC];
      }
      int calcType=fn.getCalcType();
      int resultType;
      if (metaA != null) {
        resultType=metaA.getType();
      }
 else {
        resultType=ValueMetaInterface.TYPE_NONE;
      }
switch (calcType) {
case CalculatorMetaFunction.CALC_NONE:
        break;
case CalculatorMetaFunction.CALC_COPY_OF_FIELD:
      calcData[index]=dataA;
    break;
case CalculatorMetaFunction.CALC_ADD:
  calcData[index]=ValueDataUtil.plus(metaA,dataA,metaB,dataB);
if (metaA.isString() || metaB.isString()) {
  resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_SUBTRACT:
calcData[index]=ValueDataUtil.minus(metaA,dataA,metaB,dataB);
if (metaA.isDate()) {
resultType=ValueMetaInterface.TYPE_INTEGER;
}
break;
case CalculatorMetaFunction.CALC_MULTIPLY:
calcData[index]=ValueDataUtil.multiply(metaA,dataA,metaB,dataB);
if (metaA.isString() || metaB.isString()) {
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_DIVIDE:
calcData[index]=ValueDataUtil.divide(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_SQUARE:
calcData[index]=ValueDataUtil.multiply(metaA,dataA,metaA,dataA);
break;
case CalculatorMetaFunction.CALC_SQUARE_ROOT:
calcData[index]=ValueDataUtil.sqrt(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_PERCENT_1:
calcData[index]=ValueDataUtil.percent1(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_PERCENT_2:
calcData[index]=ValueDataUtil.percent2(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_PERCENT_3:
calcData[index]=ValueDataUtil.percent3(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_COMBINATION_1:
calcData[index]=ValueDataUtil.combination1(metaA,dataA,metaB,dataB,metaC,dataC);
break;
case CalculatorMetaFunction.CALC_COMBINATION_2:
calcData[index]=ValueDataUtil.combination2(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_ROUND_1:
calcData[index]=ValueDataUtil.round(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_ROUND_2:
calcData[index]=ValueDataUtil.round(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_ROUND_STD_1:
calcData[index]=ValueDataUtil.round(metaA,dataA,java.math.BigDecimal.ROUND_HALF_UP);
break;
case CalculatorMetaFunction.CALC_ROUND_STD_2:
calcData[index]=ValueDataUtil.round(metaA,dataA,metaB,dataB,java.math.BigDecimal.ROUND_HALF_UP);
break;
case CalculatorMetaFunction.CALC_CEIL:
calcData[index]=ValueDataUtil.ceil(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_FLOOR:
calcData[index]=ValueDataUtil.floor(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_CONSTANT:
calcData[index]=fn.getFieldA();
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_NVL:
calcData[index]=ValueDataUtil.nvl(metaA,dataA,metaB,dataB);
break;
case CalculatorMetaFunction.CALC_ADD_DAYS:
calcData[index]=ValueDataUtil.addDays(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADD_HOURS:
calcData[index]=ValueDataUtil.addHours(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADD_MINUTES:
calcData[index]=ValueDataUtil.addMinutes(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE:
calcData[index]=ValueDataUtil.yearOfDate(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_MONTH_OF_DATE:
calcData[index]=ValueDataUtil.monthOfDate(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DAY_OF_YEAR:
calcData[index]=ValueDataUtil.dayOfYear(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DAY_OF_MONTH:
calcData[index]=ValueDataUtil.dayOfMonth(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DAY_OF_WEEK:
calcData[index]=ValueDataUtil.dayOfWeek(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR:
calcData[index]=ValueDataUtil.weekOfYear(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR_ISO8601:
calcData[index]=ValueDataUtil.weekOfYearISO8601(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE_ISO8601:
calcData[index]=ValueDataUtil.yearOfDateISO8601(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_BYTE_TO_HEX_ENCODE:
calcData[index]=ValueDataUtil.byteToHexEncode(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_HEX_TO_BYTE_DECODE:
calcData[index]=ValueDataUtil.hexToByteDecode(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_CHAR_TO_HEX_ENCODE:
calcData[index]=ValueDataUtil.charToHexEncode(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_HEX_TO_CHAR_DECODE:
calcData[index]=ValueDataUtil.hexToCharDecode(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_CRC32:
calcData[index]=ValueDataUtil.ChecksumCRC32(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADLER32:
calcData[index]=ValueDataUtil.ChecksumAdler32(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_MD5:
calcData[index]=ValueDataUtil.createChecksum(metaA,dataA,"MD5");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_SHA1:
calcData[index]=ValueDataUtil.createChecksum(metaA,dataA,"SHA-1");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_LEVENSHTEIN_DISTANCE:
calcData[index]=ValueDataUtil.getLevenshtein_Distance(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_METAPHONE:
calcData[index]=ValueDataUtil.get_Metaphone(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DOUBLE_METAPHONE:
calcData[index]=ValueDataUtil.get_Double_Metaphone(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ABS:
calcData[index]=ValueDataUtil.abs(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_REMOVE_TIME_FROM_DATE:
calcData[index]=ValueDataUtil.removeTimeFromDate(metaA,dataA);
break;
case CalculatorMetaFunction.CALC_DATE_DIFF:
calcData[index]=ValueDataUtil.DateDiff(metaA,dataA,metaB,dataB,"d");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADD3:
calcData[index]=ValueDataUtil.plus3(metaA,dataA,metaB,dataB,metaC,dataC);
if (metaA.isString() || metaB.isString() || metaC.isString()) {
resultType=ValueMetaInterface.TYPE_STRING;
}
break;
case CalculatorMetaFunction.CALC_INITCAP:
calcData[index]=ValueDataUtil.initCap(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_UPPER_CASE:
calcData[index]=ValueDataUtil.upperCase(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_LOWER_CASE:
calcData[index]=ValueDataUtil.lowerCase(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_MASK_XML:
calcData[index]=ValueDataUtil.escapeXML(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_USE_CDATA:
calcData[index]=ValueDataUtil.useCDATA(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REMOVE_CR:
calcData[index]=ValueDataUtil.removeCR(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REMOVE_LF:
calcData[index]=ValueDataUtil.removeLF(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REMOVE_CRLF:
calcData[index]=ValueDataUtil.removeCRLF(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REMOVE_TAB:
calcData[index]=ValueDataUtil.removeTAB(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_GET_ONLY_DIGITS:
calcData[index]=ValueDataUtil.getDigits(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REMOVE_DIGITS:
calcData[index]=ValueDataUtil.removeDigits(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_STRING_LEN:
calcData[index]=ValueDataUtil.stringLen(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_LOAD_FILE_CONTENT_BINARY:
calcData[index]=ValueDataUtil.loadFileContentInBinary(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADD_TIME_TO_DATE:
calcData[index]=ValueDataUtil.addTimeToDate(metaA,dataA,metaB,dataB,metaC,dataC);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_QUARTER_OF_DATE:
calcData[index]=ValueDataUtil.quarterOfDate(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_SUBSTITUTE_VARIABLE:
calcData[index]=environmentSubstitute(dataA.toString());
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_UNESCAPE_XML:
calcData[index]=ValueDataUtil.unEscapeXML(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ESCAPE_HTML:
calcData[index]=ValueDataUtil.escapeHTML(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_UNESCAPE_HTML:
calcData[index]=ValueDataUtil.unEscapeHTML(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ESCAPE_SQL:
calcData[index]=ValueDataUtil.escapeSQL(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DATE_WORKING_DIFF:
calcData[index]=ValueDataUtil.DateWorkingDiff(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_ADD_MONTHS:
calcData[index]=ValueDataUtil.addMonths(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_CHECK_XML_FILE_WELL_FORMED:
calcData[index]=ValueDataUtil.isXMLFileWellFormed(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_CHECK_XML_WELL_FORMED:
calcData[index]=ValueDataUtil.isXMLWellFormed(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_GET_FILE_ENCODING:
calcData[index]=ValueDataUtil.getFileEncoding(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DAMERAU_LEVENSHTEIN:
calcData[index]=ValueDataUtil.getDamerauLevenshtein_Distance(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_NEEDLEMAN_WUNSH:
calcData[index]=ValueDataUtil.getNeedlemanWunsch_Distance(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_JARO:
calcData[index]=ValueDataUtil.getJaro_Similitude(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_JARO_WINKLER:
calcData[index]=ValueDataUtil.getJaroWinkler_Similitude(metaA,dataA,metaB,dataB);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_SOUNDEX:
calcData[index]=ValueDataUtil.get_SoundEx(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_REFINED_SOUNDEX:
calcData[index]=ValueDataUtil.get_RefinedSoundEx(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DATE_DIFF_MSEC:
calcData[index]=ValueDataUtil.DateDiff(metaA,dataA,metaB,dataB,"ms");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DATE_DIFF_SEC:
calcData[index]=ValueDataUtil.DateDiff(metaA,dataA,metaB,dataB,"s");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DATE_DIFF_MN:
calcData[index]=ValueDataUtil.DateDiff(metaA,dataA,metaB,dataB,"mn");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_DATE_DIFF_HR:
calcData[index]=ValueDataUtil.DateDiff(metaA,dataA,metaB,dataB,"h");
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_HOUR_OF_DAY:
calcData[index]=ValueDataUtil.hourOfDay(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_MINUTE_OF_HOUR:
calcData[index]=ValueDataUtil.minuteOfHour(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
case CalculatorMetaFunction.CALC_SECOND_OF_MINUTE:
calcData[index]=ValueDataUtil.secondOfMinute(metaA,dataA);
resultType=CalculatorMetaFunction.calcDefaultResultType[calcType];
break;
default :
throw new KettleValueException(BaseMessages.getString(PKG,"Calculator.Log.UnknownCalculationType") + fn.getCalcType());
}
if (targetMeta.getType() == ValueMetaInterface.TYPE_NONE) {
throw new KettleValueException(BaseMessages.getString(PKG,"Calculator.Log.NoType") + (i + 1) + " : "+ fn.getFieldName()+ " = "+ fn.getCalcTypeDesc()+ " / "+ fn.getCalcTypeLongDesc());
}
if (calcData[index] != null) {
if (targetMeta.getType() != resultType) {
ValueMetaInterface resultMeta;
try {
resultMeta=data.getValueMetaFor(resultType,"result");
}
 catch (Exception exception) {
throw new KettleValueException("Error creating value");
}
resultMeta.setConversionMask(fn.getConversionMask());
resultMeta.setGroupingSymbol(fn.getGroupingSymbol());
resultMeta.setDecimalSymbol(fn.getDecimalSymbol());
resultMeta.setCurrencySymbol(fn.getCurrencySymbol());
try {
calcData[index]=targetMeta.convertData(resultMeta,calcData[index]);
}
 catch (Exception ex) {
throw new KettleValueException("resultType: " + resultType + "; targetMeta: "+ targetMeta.getType(),ex);
}
}
}
}
}
return RowDataUtil.removeItems(calcData,data.getTempIndexes());
}
