{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN| SWT.NONE);
  props.setLook(shell);
  shell.setImage(guiresource.getImageNoteSmall());
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(title);
  int margin=Const.MARGIN;
  int middle=30;
  wNoteFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wNoteFolder,PropsUI.WIDGET_STYLE_TAB);
  wNoteContentTab=new CTabItem(wNoteFolder,SWT.NONE);
  wNoteContentTab.setText(BaseMessages.getString(PKG,"NotePadDialog.ContentTab.Note"));
  Composite wNoteContentComp=new Composite(wNoteFolder,SWT.NONE);
  props.setLook(wNoteContentComp);
  FormLayout fileLayout=new FormLayout();
  fileLayout.marginWidth=3;
  fileLayout.marginHeight=3;
  wNoteContentComp.setLayout(fileLayout);
  wlDesc=new Label(wNoteContentComp,SWT.NONE);
  wlDesc.setText(BaseMessages.getString(PKG,"NotePadDialog.ContentTab.Note.Label"));
  props.setLook(wlDesc);
  fdlDesc=new FormData();
  fdlDesc.left=new FormAttachment(0,0);
  fdlDesc.top=new FormAttachment(0,margin);
  wlDesc.setLayoutData(fdlDesc);
  wDesc=new StyledTextComp(variables,wNoteContentComp,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL,"");
  wDesc.setText("");
  fdDesc=new FormData();
  fdDesc.left=new FormAttachment(0,0);
  fdDesc.top=new FormAttachment(wlDesc,margin);
  fdDesc.right=new FormAttachment(100,-10);
  fdDesc.bottom=new FormAttachment(100,-margin);
  wDesc.setLayoutData(fdDesc);
  fdNoteContentComp=new FormData();
  fdNoteContentComp.left=new FormAttachment(0,0);
  fdNoteContentComp.top=new FormAttachment(0,0);
  fdNoteContentComp.right=new FormAttachment(100,0);
  fdNoteContentComp.bottom=new FormAttachment(100,0);
  wNoteContentComp.setLayoutData(fdNoteContentComp);
  wNoteContentComp.layout();
  wNoteContentTab.setControl(wNoteContentComp);
  wNoteFontTab=new CTabItem(wNoteFolder,SWT.NONE);
  wNoteFontTab.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Label"));
  Composite wNoteFontComp=new Composite(wNoteFolder,SWT.NONE);
  props.setLook(wNoteFontComp);
  FormLayout notefontLayout=new FormLayout();
  fileLayout.marginWidth=3;
  fileLayout.marginHeight=3;
  wNoteFontComp.setLayout(notefontLayout);
  wlFontName=new Label(wNoteFontComp,SWT.RIGHT);
  wlFontName.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Name.Label"));
  props.setLook(wlFontName);
  fdlFontName=new FormData();
  fdlFontName.left=new FormAttachment(margin,margin);
  fdlFontName.top=new FormAttachment(0,3 * margin);
  fdlFontName.right=new FormAttachment(middle,-margin);
  wlFontName.setLayoutData(fdlFontName);
  wFontName=new CCombo(wNoteFontComp,SWT.BORDER | SWT.READ_ONLY);
  wFontName.setItems(Const.GetAvailableFontNames());
  props.setLook(wFontName);
  fdFontName=new FormData();
  fdFontName.left=new FormAttachment(middle,0);
  fdFontName.top=new FormAttachment(0,3 * margin);
  fdFontName.right=new FormAttachment(100,-margin);
  wFontName.setLayoutData(fdFontName);
  wFontName.select(0);
  wFontName.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      refreshTextNote();
    }
  }
);
  wlFontSize=new Label(wNoteFontComp,SWT.RIGHT);
  wlFontSize.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Size.Label"));
  props.setLook(wlFontSize);
  fdlFontSize=new FormData();
  fdlFontSize.left=new FormAttachment(margin,margin);
  fdlFontSize.top=new FormAttachment(wFontName,margin);
  fdlFontSize.right=new FormAttachment(middle,-margin);
  wlFontSize.setLayoutData(fdlFontSize);
  wFontSize=new Spinner(wNoteFontComp,SWT.BORDER);
  wFontSize.setMinimum(0);
  wFontSize.setMaximum(70);
  wFontSize.setIncrement(1);
  fdFontSize=new FormData();
  fdFontSize.left=new FormAttachment(middle,0);
  fdFontSize.top=new FormAttachment(wFontName,margin);
  fdFontSize.right=new FormAttachment(100,-margin);
  wFontSize.setLayoutData(fdFontSize);
  wFontSize.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      refreshTextNote();
    }
  }
);
  wlFontBold=new Label(wNoteFontComp,SWT.RIGHT);
  wlFontBold.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Bold.Label"));
  props.setLook(wlFontBold);
  fdlFontBold=new FormData();
  fdlFontBold.left=new FormAttachment(margin,margin);
  fdlFontBold.top=new FormAttachment(wFontSize,margin);
  fdlFontBold.right=new FormAttachment(middle,-margin);
  wlFontBold.setLayoutData(fdlFontBold);
  wFontBold=new Button(wNoteFontComp,SWT.CHECK);
  props.setLook(wFontBold);
  fdFontBold=new FormData();
  fdFontBold.left=new FormAttachment(middle,0);
  fdFontBold.top=new FormAttachment(wFontSize,margin);
  fdFontBold.right=new FormAttachment(100,-margin);
  wFontBold.setLayoutData(fdFontBold);
  wFontBold.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      refreshTextNote();
    }
  }
);
  wlFontItalic=new Label(wNoteFontComp,SWT.RIGHT);
  wlFontItalic.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Italic.Label"));
  props.setLook(wlFontItalic);
  fdlFontItalic=new FormData();
  fdlFontItalic.left=new FormAttachment(margin,margin);
  fdlFontItalic.top=new FormAttachment(wFontBold,margin);
  fdlFontItalic.right=new FormAttachment(middle,-margin);
  wlFontItalic.setLayoutData(fdlFontItalic);
  wFontItalic=new Button(wNoteFontComp,SWT.CHECK);
  props.setLook(wFontItalic);
  fdFontItalic=new FormData();
  fdFontItalic.left=new FormAttachment(middle,0);
  fdFontItalic.top=new FormAttachment(wFontBold,margin);
  fdFontItalic.right=new FormAttachment(100,-margin);
  wFontItalic.setLayoutData(fdFontItalic);
  wFontItalic.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      refreshTextNote();
    }
  }
);
  wlFontColor=new Label(wNoteFontComp,SWT.RIGHT);
  wlFontColor.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Label"));
  props.setLook(wlFontColor);
  fdlFontColor=new FormData();
  fdlFontColor.left=new FormAttachment(margin,margin);
  fdlFontColor.top=new FormAttachment(wFontItalic,2 * margin);
  fdlFontColor.right=new FormAttachment(middle,-margin);
  wlFontColor.setLayoutData(fdlFontColor);
  wbFontColorChange=new Button(wNoteFontComp,SWT.PUSH);
  wbFontColorChange.setImage(guiresource.getImageColor());
  wbFontColorChange.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Change.Tooltip"));
  props.setLook(wbFontColorChange);
  fdFontColorChange=new FormData();
  fdFontColorChange.top=new FormAttachment(wFontItalic,2 * margin);
  fdFontColorChange.right=new FormAttachment(100,-margin);
  wbFontColorChange.setLayoutData(fdFontColorChange);
  wbFontColorChange.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ColorDialog cd=new ColorDialog(shell);
      cd.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Dialog.Label"));
      cd.setRGB(wFontColor.getBackground().getRGB());
      RGB newColor=cd.open();
      if (newColor == null) {
        return;
      }
      fontColor.dispose();
      fontColor=new Color(shell.getDisplay(),newColor);
      wFontColor.setBackground(fontColor);
      refreshTextNote();
    }
  }
);
  wFontColor=new Label(wNoteFontComp,SWT.NONE);
  wFontColor.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Tooltip"));
  props.setLook(wFontColor);
  wFontColor.setEnabled(false);
  fdFontColor=new FormData();
  fdFontColor.left=new FormAttachment(wlFontColor,margin);
  fdFontColor.top=new FormAttachment(wFontItalic,2 * margin);
  fdFontColor.right=new FormAttachment(wbFontColorChange,-margin);
  wFontColor.setLayoutData(fdFontColor);
  wlBackGroundColor=new Label(wNoteFontComp,SWT.RIGHT);
  wlBackGroundColor.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.BackGroundColor.Label"));
  props.setLook(wlBackGroundColor);
  fdlBackGroundColor=new FormData();
  fdlBackGroundColor.left=new FormAttachment(margin,margin);
  fdlBackGroundColor.top=new FormAttachment(wFontColor,2 * margin);
  fdlBackGroundColor.right=new FormAttachment(middle,-margin);
  wlBackGroundColor.setLayoutData(fdlBackGroundColor);
  wbBackGroundColorChange=new Button(wNoteFontComp,SWT.PUSH);
  wbBackGroundColorChange.setImage(guiresource.getImageColor());
  wbBackGroundColorChange.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.BackGroundColor.Change.Tooltip"));
  props.setLook(wbBackGroundColorChange);
  fdBackGroundColorChange=new FormData();
  fdBackGroundColorChange.top=new FormAttachment(wFontColor,2 * margin);
  fdBackGroundColorChange.right=new FormAttachment(100,-margin);
  fdBackGroundColorChange.right=new FormAttachment(100,-margin);
  wbBackGroundColorChange.setLayoutData(fdBackGroundColorChange);
  wbBackGroundColorChange.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ColorDialog cd=new ColorDialog(shell);
      cd.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Dialog.Label"));
      cd.setRGB(wBackGroundColor.getBackground().getRGB());
      RGB newColor=cd.open();
      if (newColor == null) {
        return;
      }
      bgColor.dispose();
      bgColor=new Color(shell.getDisplay(),newColor);
      wBackGroundColor.setBackground(bgColor);
      refreshTextNote();
    }
  }
);
  wBackGroundColor=new Label(wNoteFontComp,SWT.BORDER);
  wBackGroundColor.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.BackGroundColor.Tooltip"));
  props.setLook(wBackGroundColor);
  wBackGroundColor.setEnabled(false);
  fdBackGroundColor=new FormData();
  fdBackGroundColor.left=new FormAttachment(wlBackGroundColor,margin);
  fdBackGroundColor.top=new FormAttachment(wFontColor,2 * margin);
  fdBackGroundColor.right=new FormAttachment(wbBackGroundColorChange,-margin);
  wBackGroundColor.setLayoutData(fdBackGroundColor);
  wlBorderColor=new Label(wNoteFontComp,SWT.RIGHT);
  wlBorderColor.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.BorderColor.Label"));
  props.setLook(wlBorderColor);
  fdlBorderColor=new FormData();
  fdlBorderColor.left=new FormAttachment(margin,margin);
  fdlBorderColor.top=new FormAttachment(wBackGroundColor,2 * margin);
  fdlBorderColor.right=new FormAttachment(middle,-margin);
  wlBorderColor.setLayoutData(fdlBorderColor);
  wbBorderColorChange=new Button(wNoteFontComp,SWT.PUSH);
  wbBorderColorChange.setImage(guiresource.getImageColor());
  wbBorderColorChange.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.BorderColor.Change.Tooltip"));
  props.setLook(wbBorderColorChange);
  fdBorderColorChange=new FormData();
  fdBorderColorChange.top=new FormAttachment(wBackGroundColor,2 * margin);
  fdBorderColorChange.right=new FormAttachment(100,-margin);
  wbBorderColorChange.setLayoutData(fdBorderColorChange);
  wbBorderColorChange.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ColorDialog cd=new ColorDialog(shell);
      cd.setText(BaseMessages.getString(PKG,"NotePadDialog.Font.Color.Dialog.Label"));
      cd.setRGB(wBorderColor.getBackground().getRGB());
      RGB newColor=cd.open();
      if (newColor == null) {
        return;
      }
      borderColor.dispose();
      borderColor=new Color(shell.getDisplay(),newColor);
      wBorderColor.setBackground(borderColor);
    }
  }
);
  wBorderColor=new Label(wNoteFontComp,SWT.BORDER);
  wBorderColor.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.Font.BorderColor.Tooltip"));
  props.setLook(wBorderColor);
  wBorderColor.setEnabled(false);
  fdBorderColor=new FormData();
  fdBorderColor.left=new FormAttachment(wlBorderColor,margin);
  fdBorderColor.top=new FormAttachment(wBackGroundColor,2 * margin);
  fdBorderColor.right=new FormAttachment(wbBorderColorChange,-margin);
  wBorderColor.setLayoutData(fdBorderColor);
  wlDrawShadow=new Label(wNoteFontComp,SWT.RIGHT);
  wlDrawShadow.setText(BaseMessages.getString(PKG,"NotePadDialog.DrawShadow.Label"));
  props.setLook(wlDrawShadow);
  fdlDrawShadow=new FormData();
  fdlDrawShadow.left=new FormAttachment(margin,margin);
  fdlDrawShadow.top=new FormAttachment(wBorderColor,margin);
  fdlDrawShadow.right=new FormAttachment(middle,-margin);
  wlDrawShadow.setLayoutData(fdlDrawShadow);
  wDrawShadow=new Button(wNoteFontComp,SWT.CHECK);
  wDrawShadow.setToolTipText(BaseMessages.getString(PKG,"NotePadDialog.DrawShadow.Tooltip"));
  props.setLook(wDrawShadow);
  fdDrawShadow=new FormData();
  fdDrawShadow.left=new FormAttachment(middle,0);
  fdDrawShadow.top=new FormAttachment(wBorderColor,margin);
  fdDrawShadow.right=new FormAttachment(100,-margin);
  wDrawShadow.setLayoutData(fdDrawShadow);
  fdNoteFontComp=new FormData();
  fdNoteFontComp.left=new FormAttachment(0,0);
  fdNoteFontComp.top=new FormAttachment(0,0);
  fdNoteFontComp.right=new FormAttachment(100,0);
  fdNoteFontComp.bottom=new FormAttachment(100,0);
  wNoteFontComp.setLayoutData(fdNoteFontComp);
  wNoteFontComp.layout();
  wNoteFontTab.setControl(wNoteFontComp);
  fdNoteFolder=new FormData();
  fdNoteFolder.left=new FormAttachment(0,0);
  fdNoteFolder.top=new FormAttachment(0,margin);
  fdNoteFolder.right=new FormAttachment(100,0);
  fdNoteFolder.bottom=new FormAttachment(100,-50);
  wNoteFolder.setLayoutData(fdNoteFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wNoteFolder);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel.addListener(SWT.Selection,lsCancel);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return notePadMeta;
}
