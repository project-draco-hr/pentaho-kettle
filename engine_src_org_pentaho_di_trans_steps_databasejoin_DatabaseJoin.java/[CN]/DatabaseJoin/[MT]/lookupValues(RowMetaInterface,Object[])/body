{
  if (first) {
    first=false;
    data.outputRowMeta=rowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),new RowMetaInterface[]{meta.getTableFields()},null,this,repository,metaStore);
    data.lookupRowMeta=new RowMeta();
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"DatabaseJoin.Log.CheckingRow") + rowMeta.getString(rowData));
    data.keynrs=new int[meta.getParameterField().length];
    for (int i=0; i < meta.getParameterField().length; i++) {
      data.keynrs[i]=rowMeta.indexOfValue(meta.getParameterField()[i]);
      if (data.keynrs[i] < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DatabaseJoin.Exception.FieldNotFound",meta.getParameterField()[i]));
      }
      data.lookupRowMeta.addValueMeta(rowMeta.getValueMeta(data.keynrs[i]).clone());
    }
  }
  Object[] lookupRowData=new Object[data.lookupRowMeta.size()];
  for (int i=0; i < data.keynrs.length; i++) {
    lookupRowData[i]=rowData[data.keynrs[i]];
  }
  ResultSet rs=data.db.openQuery(data.pstmt,data.lookupRowMeta,lookupRowData);
  Object[] add=data.db.getRow(rs);
  RowMetaInterface addMeta=data.db.getReturnRowMeta();
  incrementLinesInput();
  int counter=0;
  while (add != null && (meta.getRowLimit() == 0 || counter < meta.getRowLimit())) {
    counter++;
    Object[] newRow=RowDataUtil.resizeArray(rowData,data.outputRowMeta.size());
    int newIndex=rowMeta.size();
    for (int i=0; i < addMeta.size(); i++) {
      newRow[newIndex++]=add[i];
    }
    putRow(data.outputRowMeta,data.outputRowMeta.cloneRow(newRow));
    if (log.isRowLevel())     logRowlevel(BaseMessages.getString(PKG,"DatabaseJoin.Log.PutoutRow") + data.outputRowMeta.getString(newRow));
    if (meta.getRowLimit() == 0 || counter < meta.getRowLimit()) {
      add=data.db.getRow(rs);
      incrementLinesInput();
    }
  }
  if (counter == 0 && meta.isOuterJoin()) {
    if (data.notfound == null) {
      data.notfound=new Object[data.db.getReturnRowMeta().size()];
    }
    Object[] newRow=RowDataUtil.resizeArray(rowData,data.outputRowMeta.size());
    int newIndex=rowMeta.size();
    for (int i=0; i < data.notfound.length; i++) {
      newRow[newIndex++]=data.notfound[i];
    }
    putRow(data.outputRowMeta,newRow);
  }
  data.db.closeQuery(rs);
}
