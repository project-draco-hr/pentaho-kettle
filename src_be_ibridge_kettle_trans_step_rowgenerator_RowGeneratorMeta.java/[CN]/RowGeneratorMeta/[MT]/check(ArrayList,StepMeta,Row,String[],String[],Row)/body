{
  CheckResult cr;
  if (prev != null && prev.size() > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"This step type can't read from the input stream(s).",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step doesn't read from the input stream(s).",stepMeta);
    remarks.add(cr);
    if (rowLimit == 0.0) {
      cr=new CheckResult(CheckResult.TYPE_RESULT_WARNING,"Step will not return any rows.",stepMeta);
      remarks.add(cr);
    }
 else {
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step will return " + (long)rowLimit + " rows",stepMeta);
      remarks.add(cr);
    }
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"This is not expecting nor reading data from input steps",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"No input received from other steps.",stepMeta);
    remarks.add(cr);
  }
  RowGeneratorData data=new RowGeneratorData();
  RowGeneratorMeta meta=(RowGeneratorMeta)stepMeta.getStepMetaInterface();
  RowGenerator.buildRow(meta,data,remarks);
}
