{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  setShellImage(shell,inputMeta);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      inputMeta.setChanged();
    }
  }
;
  changed=inputMeta.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  Control lastControl=wStepname;
  isReceivingInput=transMeta.findNrPrevSteps(stepMeta) > 0;
  if (isReceivingInput) {
    RowMetaInterface previousFields;
    try {
      previousFields=transMeta.getPrevStepFields(stepMeta);
    }
 catch (    KettleStepException e) {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"ParGzipCsvInputDialog.ErrorDialog.UnableToGetInputFields.Title"),BaseMessages.getString(PKG,"ParGzipCsvInputDialog.ErrorDialog.UnableToGetInputFields.Message"),e);
      previousFields=new RowMeta();
    }
    Label wlFilename=new Label(shell,SWT.RIGHT);
    wlFilename.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.FilenameField.Label"));
    props.setLook(wlFilename);
    FormData fdlFilename=new FormData();
    fdlFilename.top=new FormAttachment(lastControl,margin);
    fdlFilename.left=new FormAttachment(0,0);
    fdlFilename.right=new FormAttachment(middle,-margin);
    wlFilename.setLayoutData(fdlFilename);
    wFilenameField=new CCombo(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
    wFilenameField.setItems(previousFields.getFieldNames());
    props.setLook(wFilenameField);
    wFilenameField.addModifyListener(lsMod);
    FormData fdFilename=new FormData();
    fdFilename.top=new FormAttachment(lastControl,margin);
    fdFilename.left=new FormAttachment(middle,0);
    fdFilename.right=new FormAttachment(100,0);
    wFilenameField.setLayoutData(fdFilename);
    lastControl=wFilenameField;
    Label wlIncludeFilename=new Label(shell,SWT.RIGHT);
    wlIncludeFilename.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.IncludeFilenameField.Label"));
    props.setLook(wlIncludeFilename);
    FormData fdlIncludeFilename=new FormData();
    fdlIncludeFilename.top=new FormAttachment(lastControl,margin);
    fdlIncludeFilename.left=new FormAttachment(0,0);
    fdlIncludeFilename.right=new FormAttachment(middle,-margin);
    wlIncludeFilename.setLayoutData(fdlIncludeFilename);
    wIncludeFilename=new Button(shell,SWT.CHECK);
    props.setLook(wIncludeFilename);
    wFilenameField.addModifyListener(lsMod);
    FormData fdIncludeFilename=new FormData();
    fdIncludeFilename.top=new FormAttachment(lastControl,margin);
    fdIncludeFilename.left=new FormAttachment(middle,0);
    fdIncludeFilename.right=new FormAttachment(100,0);
    wIncludeFilename.setLayoutData(fdIncludeFilename);
    lastControl=wIncludeFilename;
  }
 else {
    wbbFilename=new Button(shell,SWT.PUSH | SWT.CENTER);
    props.setLook(wbbFilename);
    wbbFilename.setText(BaseMessages.getString(PKG,"System.Button.Browse"));
    wbbFilename.setToolTipText(BaseMessages.getString(PKG,"System.Tooltip.BrowseForFileOrDirAndAdd"));
    FormData fdbFilename=new FormData();
    fdbFilename.top=new FormAttachment(lastControl,margin);
    fdbFilename.right=new FormAttachment(100,0);
    wbbFilename.setLayoutData(fdbFilename);
    Label wlFilename=new Label(shell,SWT.RIGHT);
    wlFilename.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Filename.Label"));
    props.setLook(wlFilename);
    FormData fdlFilename=new FormData();
    fdlFilename.top=new FormAttachment(lastControl,margin);
    fdlFilename.left=new FormAttachment(0,0);
    fdlFilename.right=new FormAttachment(middle,-margin);
    wlFilename.setLayoutData(fdlFilename);
    wFilename=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
    props.setLook(wFilename);
    wFilename.addModifyListener(lsMod);
    FormData fdFilename=new FormData();
    fdFilename.top=new FormAttachment(lastControl,margin);
    fdFilename.left=new FormAttachment(middle,0);
    fdFilename.right=new FormAttachment(wbbFilename,-margin);
    wFilename.setLayoutData(fdFilename);
    lastControl=wFilename;
  }
  Label wlDelimiter=new Label(shell,SWT.RIGHT);
  wlDelimiter.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Delimiter.Label"));
  props.setLook(wlDelimiter);
  FormData fdlDelimiter=new FormData();
  fdlDelimiter.top=new FormAttachment(lastControl,margin);
  fdlDelimiter.left=new FormAttachment(0,0);
  fdlDelimiter.right=new FormAttachment(middle,-margin);
  wlDelimiter.setLayoutData(fdlDelimiter);
  wbDelimiter=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDelimiter);
  wbDelimiter.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Delimiter.Button"));
  FormData fdbDelimiter=new FormData();
  fdbDelimiter.top=new FormAttachment(lastControl,margin);
  fdbDelimiter.right=new FormAttachment(100,0);
  wbDelimiter.setLayoutData(fdbDelimiter);
  wDelimiter=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDelimiter);
  wDelimiter.addModifyListener(lsMod);
  FormData fdDelimiter=new FormData();
  fdDelimiter.top=new FormAttachment(lastControl,margin);
  fdDelimiter.left=new FormAttachment(middle,0);
  fdDelimiter.right=new FormAttachment(wbDelimiter,-margin);
  wDelimiter.setLayoutData(fdDelimiter);
  lastControl=wDelimiter;
  Label wlEnclosure=new Label(shell,SWT.RIGHT);
  wlEnclosure.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Enclosure.Label"));
  props.setLook(wlEnclosure);
  FormData fdlEnclosure=new FormData();
  fdlEnclosure.top=new FormAttachment(lastControl,margin);
  fdlEnclosure.left=new FormAttachment(0,0);
  fdlEnclosure.right=new FormAttachment(middle,-margin);
  wlEnclosure.setLayoutData(fdlEnclosure);
  wEnclosure=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wEnclosure);
  wEnclosure.addModifyListener(lsMod);
  FormData fdEnclosure=new FormData();
  fdEnclosure.top=new FormAttachment(lastControl,margin);
  fdEnclosure.left=new FormAttachment(middle,0);
  fdEnclosure.right=new FormAttachment(100,0);
  wEnclosure.setLayoutData(fdEnclosure);
  lastControl=wEnclosure;
  Label wlBufferSize=new Label(shell,SWT.RIGHT);
  wlBufferSize.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.BufferSize.Label"));
  props.setLook(wlBufferSize);
  FormData fdlBufferSize=new FormData();
  fdlBufferSize.top=new FormAttachment(lastControl,margin);
  fdlBufferSize.left=new FormAttachment(0,0);
  fdlBufferSize.right=new FormAttachment(middle,-margin);
  wlBufferSize.setLayoutData(fdlBufferSize);
  wBufferSize=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wBufferSize);
  wBufferSize.addModifyListener(lsMod);
  FormData fdBufferSize=new FormData();
  fdBufferSize.top=new FormAttachment(lastControl,margin);
  fdBufferSize.left=new FormAttachment(middle,0);
  fdBufferSize.right=new FormAttachment(100,0);
  wBufferSize.setLayoutData(fdBufferSize);
  lastControl=wBufferSize;
  Label wlLazyConversion=new Label(shell,SWT.RIGHT);
  wlLazyConversion.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.LazyConversion.Label"));
  props.setLook(wlLazyConversion);
  FormData fdlLazyConversion=new FormData();
  fdlLazyConversion.top=new FormAttachment(lastControl,margin);
  fdlLazyConversion.left=new FormAttachment(0,0);
  fdlLazyConversion.right=new FormAttachment(middle,-margin);
  wlLazyConversion.setLayoutData(fdlLazyConversion);
  wLazyConversion=new Button(shell,SWT.CHECK);
  props.setLook(wLazyConversion);
  FormData fdLazyConversion=new FormData();
  fdLazyConversion.top=new FormAttachment(lastControl,margin);
  fdLazyConversion.left=new FormAttachment(middle,0);
  fdLazyConversion.right=new FormAttachment(100,0);
  wLazyConversion.setLayoutData(fdLazyConversion);
  lastControl=wLazyConversion;
  Label wlHeaderPresent=new Label(shell,SWT.RIGHT);
  wlHeaderPresent.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.HeaderPresent.Label"));
  props.setLook(wlHeaderPresent);
  FormData fdlHeaderPresent=new FormData();
  fdlHeaderPresent.top=new FormAttachment(lastControl,margin);
  fdlHeaderPresent.left=new FormAttachment(0,0);
  fdlHeaderPresent.right=new FormAttachment(middle,-margin);
  wlHeaderPresent.setLayoutData(fdlHeaderPresent);
  wHeaderPresent=new Button(shell,SWT.CHECK);
  props.setLook(wHeaderPresent);
  FormData fdHeaderPresent=new FormData();
  fdHeaderPresent.top=new FormAttachment(lastControl,margin);
  fdHeaderPresent.left=new FormAttachment(middle,0);
  fdHeaderPresent.right=new FormAttachment(100,0);
  wHeaderPresent.setLayoutData(fdHeaderPresent);
  lastControl=wHeaderPresent;
  wlAddResult=new Label(shell,SWT.RIGHT);
  wlAddResult.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.AddResult.Label"));
  props.setLook(wlAddResult);
  fdlAddResult=new FormData();
  fdlAddResult.left=new FormAttachment(0,0);
  fdlAddResult.top=new FormAttachment(wHeaderPresent,margin);
  fdlAddResult.right=new FormAttachment(middle,-margin);
  wlAddResult.setLayoutData(fdlAddResult);
  wAddResult=new Button(shell,SWT.CHECK);
  props.setLook(wAddResult);
  wAddResult.setToolTipText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.AddResult.Tooltip"));
  fdAddResult=new FormData();
  fdAddResult.left=new FormAttachment(middle,0);
  fdAddResult.top=new FormAttachment(wHeaderPresent,margin);
  wAddResult.setLayoutData(fdAddResult);
  lastControl=wAddResult;
  Label wlRowNumField=new Label(shell,SWT.RIGHT);
  wlRowNumField.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.RowNumField.Label"));
  props.setLook(wlRowNumField);
  FormData fdlRowNumField=new FormData();
  fdlRowNumField.top=new FormAttachment(lastControl,margin);
  fdlRowNumField.left=new FormAttachment(0,0);
  fdlRowNumField.right=new FormAttachment(middle,-margin);
  wlRowNumField.setLayoutData(fdlRowNumField);
  wRowNumField=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wRowNumField);
  wRowNumField.addModifyListener(lsMod);
  FormData fdRowNumField=new FormData();
  fdRowNumField.top=new FormAttachment(lastControl,margin);
  fdRowNumField.left=new FormAttachment(middle,0);
  fdRowNumField.right=new FormAttachment(100,0);
  wRowNumField.setLayoutData(fdRowNumField);
  lastControl=wRowNumField;
  Label wlRunningInParallel=new Label(shell,SWT.RIGHT);
  wlRunningInParallel.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.RunningInParallel.Label"));
  props.setLook(wlRunningInParallel);
  FormData fdlRunningInParallel=new FormData();
  fdlRunningInParallel.top=new FormAttachment(lastControl,margin);
  fdlRunningInParallel.left=new FormAttachment(0,0);
  fdlRunningInParallel.right=new FormAttachment(middle,-margin);
  wlRunningInParallel.setLayoutData(fdlRunningInParallel);
  wRunningInParallel=new Button(shell,SWT.CHECK);
  props.setLook(wRunningInParallel);
  FormData fdRunningInParallel=new FormData();
  fdRunningInParallel.top=new FormAttachment(lastControl,margin);
  fdRunningInParallel.left=new FormAttachment(middle,0);
  wRunningInParallel.setLayoutData(fdRunningInParallel);
  lastControl=wRunningInParallel;
  Label wlEncoding=new Label(shell,SWT.RIGHT);
  wlEncoding.setText(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.Encoding.Label"));
  props.setLook(wlEncoding);
  FormData fdlEncoding=new FormData();
  fdlEncoding.top=new FormAttachment(lastControl,margin);
  fdlEncoding.left=new FormAttachment(0,0);
  fdlEncoding.right=new FormAttachment(middle,-margin);
  wlEncoding.setLayoutData(fdlEncoding);
  wEncoding=new ComboVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wEncoding);
  wEncoding.addModifyListener(lsMod);
  FormData fdEncoding=new FormData();
  fdEncoding.top=new FormAttachment(lastControl,margin);
  fdEncoding.left=new FormAttachment(middle,0);
  fdEncoding.right=new FormAttachment(100,0);
  wEncoding.setLayoutData(fdEncoding);
  lastControl=wEncoding;
  wEncoding.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      Cursor busy=new Cursor(shell.getDisplay(),SWT.CURSOR_WAIT);
      shell.setCursor(busy);
      setEncodings();
      shell.setCursor(null);
      busy.dispose();
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(BaseMessages.getString(PKG,"System.Button.Preview"));
  wPreview.setEnabled(!isReceivingInput);
  wGet=new Button(shell,SWT.PUSH);
  wGet.setText(BaseMessages.getString(PKG,"System.Button.GetFields"));
  wGet.setEnabled(!isReceivingInput);
  setButtonPositions(new Button[]{wOK,wCancel,wPreview,wGet},margin,null);
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.NameColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.TypeColumn.Column"),ColumnInfo.COLUMN_TYPE_CCOMBO,ValueMeta.getTypes(),true),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.FormatColumn.Column"),ColumnInfo.COLUMN_TYPE_FORMAT,2),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.LengthColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.PrecisionColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.CurrencyColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.DecimalColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.GroupColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"ParGzipCsvInputDialog.TrimTypeColumn.Column"),ColumnInfo.COLUMN_TYPE_CCOMBO,ValueMeta.trimTypeDesc)};
  colinf[2].setComboValuesSelectionListener(new ComboValuesSelectionListener(){
    public String[] getComboValues(    TableItem tableItem,    int rowNr,    int colNr){
      String[] comboValues=new String[]{};
      int type=ValueMeta.getType(tableItem.getText(colNr - 1));
switch (type) {
case ValueMetaInterface.TYPE_DATE:
        comboValues=Const.getDateFormats();
      break;
case ValueMetaInterface.TYPE_INTEGER:
case ValueMetaInterface.TYPE_BIGNUMBER:
case ValueMetaInterface.TYPE_NUMBER:
    comboValues=Const.getNumberFormats();
  break;
default :
break;
}
return comboValues;
}
}
);
wFields=new TableView(transMeta,shell,SWT.FULL_SELECTION | SWT.MULTI,colinf,1,lsMod,props);
FormData fdFields=new FormData();
fdFields.top=new FormAttachment(lastControl,margin * 2);
fdFields.bottom=new FormAttachment(wOK,-margin * 2);
fdFields.left=new FormAttachment(0,0);
fdFields.right=new FormAttachment(100,0);
wFields.setLayoutData(fdFields);
lsCancel=new Listener(){
public void handleEvent(Event e){
cancel();
}
}
;
lsOK=new Listener(){
public void handleEvent(Event e){
ok();
}
}
;
lsPreview=new Listener(){
public void handleEvent(Event e){
preview();
}
}
;
lsGet=new Listener(){
public void handleEvent(Event e){
getCSV();
}
}
;
wCancel.addListener(SWT.Selection,lsCancel);
wOK.addListener(SWT.Selection,lsOK);
wPreview.addListener(SWT.Selection,lsPreview);
wGet.addListener(SWT.Selection,lsGet);
lsDef=new SelectionAdapter(){
public void widgetDefaultSelected(SelectionEvent e){
ok();
}
}
;
wStepname.addSelectionListener(lsDef);
if (wFilename != null) wFilename.addSelectionListener(lsDef);
if (wFilenameField != null) wFilenameField.addSelectionListener(lsDef);
wDelimiter.addSelectionListener(lsDef);
wEnclosure.addSelectionListener(lsDef);
wBufferSize.addSelectionListener(lsDef);
wRowNumField.addSelectionListener(lsDef);
wbDelimiter.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent se){
Text t=wDelimiter.getTextWidget();
if (t != null) t.insert("\t");
}
}
);
if (wbbFilename != null) {
wbbFilename.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
FileDialog dialog=new FileDialog(shell,SWT.OPEN);
dialog.setFilterExtensions(new String[]{"*.txt;*.csv","*.csv","*.txt","*"});
if (wFilename.getText() != null) {
String fname=transMeta.environmentSubstitute(wFilename.getText());
dialog.setFileName(fname);
}
dialog.setFilterNames(new String[]{BaseMessages.getString(PKG,"System.FileType.CSVFiles") + ", " + BaseMessages.getString(PKG,"System.FileType.TextFiles"),BaseMessages.getString(PKG,"System.FileType.CSVFiles"),BaseMessages.getString(PKG,"System.FileType.TextFiles"),BaseMessages.getString(PKG,"System.FileType.AllFiles")});
if (dialog.open() != null) {
String str=dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName();
wFilename.setText(str);
}
}
}
);
}
shell.addShellListener(new ShellAdapter(){
public void shellClosed(ShellEvent e){
cancel();
}
}
);
setSize();
getData();
inputMeta.setChanged(changed);
shell.open();
while (!shell.isDisposed()) {
if (!display.readAndDispatch()) display.sleep();
}
return stepname;
}
