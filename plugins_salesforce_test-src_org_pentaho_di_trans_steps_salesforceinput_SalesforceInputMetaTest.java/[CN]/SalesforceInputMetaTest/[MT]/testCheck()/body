{
  SalesforceInputMeta meta=new SalesforceInputMeta();
  meta.setDefault();
  List<CheckResultInterface> remarks=new ArrayList<CheckResultInterface>();
  meta.check(remarks,null,null,null,null,null,null,null,null,null);
  boolean hasError=false;
  for (  CheckResultInterface cr : remarks) {
    if (cr.getType() == CheckResult.TYPE_RESULT_ERROR) {
      hasError=true;
    }
  }
  assertFalse(remarks.isEmpty());
  assertTrue(hasError);
  remarks.clear();
  meta.setDefault();
  meta.setUsername("user");
  meta.setInputFields(new SalesforceInputField[]{new SalesforceInputField("test")});
  meta.check(remarks,null,null,null,null,null,null,null,null,null);
  hasError=false;
  for (  CheckResultInterface cr : remarks) {
    if (cr.getType() == CheckResult.TYPE_RESULT_ERROR) {
      hasError=true;
    }
  }
  assertFalse(remarks.isEmpty());
  assertFalse(hasError);
  remarks.clear();
  meta.setDefault();
  meta.setUsername("user");
  meta.setIncludeDeletionDate(true);
  meta.setIncludeModule(true);
  meta.setIncludeRowNumber(true);
  meta.setIncludeSQL(true);
  meta.setIncludeTargetURL(true);
  meta.setIncludeTimestamp(true);
  meta.setInputFields(new SalesforceInputField[]{new SalesforceInputField("test")});
  meta.check(remarks,null,null,null,null,null,null,null,null,null);
  hasError=false;
  int errorCount=0;
  for (  CheckResultInterface cr : remarks) {
    if (cr.getType() == CheckResult.TYPE_RESULT_ERROR) {
      hasError=true;
      errorCount++;
    }
  }
  assertFalse(remarks.isEmpty());
  assertTrue(hasError);
  assertEquals(6,errorCount);
  remarks.clear();
  meta.setDefault();
  meta.setUsername("user");
  meta.setIncludeDeletionDate(true);
  meta.setDeletionDateField("delDate");
  meta.setIncludeModule(true);
  meta.setModuleField("mod");
  meta.setIncludeRowNumber(true);
  meta.setRowNumberField("rownum");
  meta.setIncludeSQL(true);
  meta.setSQLField("theSQL");
  meta.setIncludeTargetURL(true);
  meta.setTargetURLField("theURL");
  meta.setIncludeTimestamp(true);
  meta.setTimestampField("ts_Field");
  meta.setInputFields(new SalesforceInputField[]{new SalesforceInputField("test")});
  meta.check(remarks,null,null,null,null,null,null,null,null,null);
  hasError=false;
  for (  CheckResultInterface cr : remarks) {
    if (cr.getType() == CheckResult.TYPE_RESULT_ERROR) {
      hasError=true;
      errorCount++;
    }
  }
  assertFalse(remarks.isEmpty());
  assertFalse(hasError);
}
