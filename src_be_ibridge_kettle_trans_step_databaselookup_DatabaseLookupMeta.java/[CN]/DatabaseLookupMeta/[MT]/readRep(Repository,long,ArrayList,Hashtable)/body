{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    databaseMeta=DatabaseMeta.findDatabase(databases,id_connection);
    cached=rep.getStepAttributeBoolean(id_step,"cache");
    cacheSize=(int)rep.getStepAttributeInteger(id_step,"cache_size");
    schemaName=rep.getStepAttributeString(id_step,"lookup_schema");
    tablename=rep.getStepAttributeString(id_step,"lookup_table");
    orderByClause=rep.getStepAttributeString(id_step,"lookup_orderby");
    failingOnMultipleResults=rep.getStepAttributeBoolean(id_step,"fail_on_multiple");
    eatingRowOnLookupFailure=rep.getStepAttributeBoolean(id_step,"eat_row_on_failure");
    int nrkeys=rep.countNrStepAttributes(id_step,"lookup_key_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"return_value_name");
    allocate(nrkeys,nrvalues);
    for (int i=0; i < nrkeys; i++) {
      streamKeyField1[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name");
      tableKeyField[i]=rep.getStepAttributeString(id_step,i,"lookup_key_field");
      keyCondition[i]=rep.getStepAttributeString(id_step,i,"lookup_key_condition");
      streamKeyField2[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name2");
    }
    for (int i=0; i < nrvalues; i++) {
      returnValueField[i]=rep.getStepAttributeString(id_step,i,"return_value_name");
      returnValueNewName[i]=rep.getStepAttributeString(id_step,i,"return_value_rename");
      returnValueDefault[i]=rep.getStepAttributeString(id_step,i,"return_value_default");
      returnValueDefaultType[i]=Value.getType(rep.getStepAttributeString(id_step,i,"return_value_type"));
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("DatabaseLookupMeta.ERROR0002.UnexpectedErrorReadingFromTheRepository"),e);
  }
}
