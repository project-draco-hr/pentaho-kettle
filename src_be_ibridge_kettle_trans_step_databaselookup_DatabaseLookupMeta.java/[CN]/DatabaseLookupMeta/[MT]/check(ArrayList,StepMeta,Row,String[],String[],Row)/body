{
  CheckResult cr;
  String error_message="";
  if (databaseMeta != null) {
    Database db=new Database(databaseMeta);
    databases=new Database[]{db};
    try {
      db.connect();
      if (tablename != null && tablename.length() != 0) {
        boolean first=true;
        boolean error_found=false;
        error_message="";
        Row r=db.getTableFields(tablename);
        if (r != null) {
          for (int i=0; i < tableKeyField.length; i++) {
            String lufield=tableKeyField[i];
            Value v=r.searchValue(lufield);
            if (v == null) {
              if (first) {
                first=false;
                error_message+="Missing compare fields in lookup table:" + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + lufield + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
          }
 else {
            cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All lookup fields found in the table.",stepinfo);
          }
          remarks.add(cr);
          for (int i=0; i < returnValueField.length; i++) {
            String lufield=returnValueField[i];
            Value v=r.searchValue(lufield);
            if (v == null) {
              if (first) {
                first=false;
                error_message+="Missing return fields in lookup table:" + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + lufield + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
          }
 else {
            cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All return fields found in the table.",stepinfo);
          }
          remarks.add(cr);
        }
 else {
          error_message="Couldn't read the table info, please check the table-name & permissions.";
          cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
          remarks.add(cr);
        }
      }
      if (prev != null && prev.size() > 0) {
        boolean first=true;
        error_message="";
        boolean error_found=false;
        for (int i=0; i < streamKeyField1.length; i++) {
          Value v=prev.searchValue(streamKeyField1[i]);
          if (v == null) {
            if (first) {
              first=false;
              error_message+="Missing fields, not found in input from previous steps:" + Const.CR;
            }
            error_found=true;
            error_message+="\t\t" + streamKeyField1[i] + Const.CR;
          }
        }
        if (error_found) {
          cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
        }
 else {
          cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All fields found in the input stream.",stepinfo);
        }
        remarks.add(cr);
      }
 else {
        error_message="Couldn't read fields from the previous step." + Const.CR;
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
    }
 catch (    KettleDatabaseException dbe) {
      error_message="An error occurred: " + dbe.getMessage();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
 finally {
      db.disconnect();
    }
  }
 else {
    error_message="Please select or create a connection!";
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from other steps.",stepinfo);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No input received from other steps!",stepinfo);
    remarks.add(cr);
  }
}
