{
  meta=(ChangeFileEncodingMeta)smi;
  data=(ChangeFileEncodingData)sdi;
  Object[] outputRow=getRow();
  if (outputRow == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta().clone();
    if (Const.isEmpty(meta.getDynamicFilenameField())) {
      logError(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.FilenameFieldMissing"));
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.FilenameFieldMissing"));
    }
    if (Const.isEmpty(meta.getTargetFilenameField())) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.TargetFilenameFieldMissing"));
    }
    data.indexOfFileename=data.inputRowMeta.indexOfValue(meta.getDynamicFilenameField());
    if (data.indexOfFileename < 0) {
      logError(BaseMessages.getString(PKG,"ChangeFileEncoding.Exception.CouldnotFindField") + "[" + meta.getDynamicFilenameField()+ "]");
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Exception.CouldnotFindField",meta.getDynamicFilenameField()));
    }
    data.indexOfTargetFileename=data.inputRowMeta.indexOfValue(meta.getTargetFilenameField());
    if (data.indexOfTargetFileename < 0) {
      logError(BaseMessages.getString(PKG,"ChangeFileEncoding.Exception.CouldnotFindField") + "[" + meta.getTargetFilenameField()+ "]");
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Exception.CouldnotFindField",meta.getTargetFilenameField()));
    }
    data.sourceEncoding=environmentSubstitute(meta.getSourceEncoding());
    data.targetEncoding=environmentSubstitute(meta.getTargetEncoding());
    if (Const.isEmpty(data.targetEncoding)) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Exception.TargetEncodingEmpty"));
    }
  }
  try {
    String sourceFilename=data.inputRowMeta.getString(outputRow,data.indexOfFileename);
    if (Const.isEmpty(sourceFilename)) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.SourceFileIsEmpty",meta.getDynamicFilenameField()));
    }
    String targetFilename=data.inputRowMeta.getString(outputRow,data.indexOfTargetFileename);
    if (Const.isEmpty(targetFilename)) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.TargetFileIsEmpty",meta.getTargetFilenameField()));
    }
    data.sourceFile=KettleVFS.getFileObject(sourceFilename);
    if (!data.sourceFile.exists()) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.SourceFileNotExists",sourceFilename));
    }
    if (data.sourceFile.getType() != FileType.FILE) {
      throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.SourceFileNotAFile",sourceFilename));
    }
    if (!data.sourceFile.getParent().exists()) {
      if (meta.isCreateParentFolder()) {
        data.sourceFile.getParent().createFolder();
      }
 else {
        throw new KettleException(BaseMessages.getString(PKG,"ChangeFileEncoding.Error.ParentFolderNotExist",data.sourceFile.getParent().toString()));
      }
    }
    changeEncoding(sourceFilename,targetFilename);
    putRow(data.inputRowMeta,outputRow);
    if (isDetailed())     logDetailed(BaseMessages.getString(PKG,"ChangeFileEncoding.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(outputRow)));
  }
 catch (  Exception e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"ChangeFileEncoding.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),outputRow,1,errorMessage,meta.getDynamicFilenameField(),"ChangeFileEncoding001");
    }
  }
  return true;
}
