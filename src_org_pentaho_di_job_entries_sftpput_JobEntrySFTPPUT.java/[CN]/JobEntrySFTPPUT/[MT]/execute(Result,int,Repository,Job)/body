{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  List<RowMetaAndData> rows=result.getRows();
  result.setResult(false);
  if (log.isDetailed())   log.logDetailed(toString(),Messages.getString("JobSFTPPUT.Log.StartJobEntry"));
  ArrayList<String> myFileList=new ArrayList<String>();
  if (copyprevious) {
    if (rows.size() == 0) {
      if (log.isDetailed())       log.logDetailed(toString(),Messages.getString("JobSFTPPUT.ArgsFromPreviousNothing"));
      result.setResult(true);
      return result;
    }
    try {
      RowMetaAndData resultRow=null;
      for (int iteration=0; iteration < rows.size(); iteration++) {
        resultRow=rows.get(iteration);
        String file_previous=resultRow.getString(0,null);
        if (!Const.isEmpty(file_previous)) {
          File file=new File(file_previous);
          if (!file.exists())           log.logError(toString(),Messages.getString("JobSFTPPUT.Log.FilefromPreviousNotFound",file_previous));
 else {
            myFileList.add(file_previous);
            if (log.isDebug())             log.logDebug(toString(),Messages.getString("JobSFTPPUT.Log.FilenameFromResult",file_previous));
          }
        }
      }
    }
 catch (    Exception e) {
      log.logError(toString(),Messages.getString("JobSFTPPUT.Error.ArgFromPrevious"));
      result.setNrErrors(1);
      return result;
    }
  }
  SFTPClient sftpclient=null;
  String realServerName=environmentSubstitute(serverName);
  String realServerPort=environmentSubstitute(serverPort);
  String realUsername=environmentSubstitute(userName);
  String realPassword=environmentSubstitute(password);
  String realSftpDirString=environmentSubstitute(sftpDirectory);
  String realWildcard=environmentSubstitute(wildcard);
  String realLocalDirectory=environmentSubstitute(localDirectory);
  try {
    sftpclient=new SFTPClient(InetAddress.getByName(realServerName),Const.toInt(realServerPort,22),realUsername);
    if (log.isDetailed())     log.logDetailed(toString(),"Opened SFTP connection to server [" + realServerName + "] on port ["+ realServerPort+ "] with username ["+ realUsername+ "]");
    sftpclient.login(realPassword);
    if (!Const.isEmpty(realSftpDirString)) {
      sftpclient.chdir(realSftpDirString);
      if (log.isDetailed())       log.logDetailed(toString(),"Changed to directory [" + realSftpDirString + "]");
    }
    if (!copyprevious) {
      myFileList=new ArrayList<String>();
      File localFiles=new File(realLocalDirectory);
      File[] children=localFiles.listFiles();
      for (int i=0; i < children.length; i++) {
        if (!children[i].isDirectory()) {
          myFileList.add(children[i].getName());
        }
      }
    }
    if (myFileList == null) {
      log.logError(toString(),Messages.getString("SFTPPUT.Error.NoFileToSend"));
      result.setNrErrors(1);
      return result;
    }
    String[] filelist=new String[myFileList.size()];
    myFileList.toArray(filelist);
    if (log.isDetailed())     log.logDetailed(toString(),"Found " + filelist.length + " files in the local directory");
    Pattern pattern=null;
    if (!copyprevious) {
      if (!Const.isEmpty(realWildcard))       pattern=Pattern.compile(realWildcard);
    }
    for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
      boolean getIt=true;
      if (pattern != null) {
        Matcher matcher=pattern.matcher(filelist[i]);
        getIt=matcher.matches();
      }
      if (getIt) {
        String localFilename=realLocalDirectory + Const.FILE_SEPARATOR + filelist[i];
        String destinationFilename=filelist[i];
        if (copyprevious) {
          localFilename=filelist[i];
          File file=new File(localFilename);
          destinationFilename=file.getName();
        }
        if (log.isDebug())         log.logDebug(toString(),"putting file [" + localFilename + "] to directory ["+ realSftpDirString+ "]");
        sftpclient.put(localFilename,destinationFilename);
        if (log.isDetailed())         log.logDetailed(toString(),"Transfered file [" + localFilename + "]");
        if (remove) {
          new File(localFilename).delete();
          if (log.isDetailed())           log.logDetailed(toString(),"deleted local file [" + localFilename + "]");
        }
      }
    }
    result.setResult(true);
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    log.logError(toString(),"Error putting to remote host : " + e.getMessage());
    log.logError(toString(),Const.getStackTracker(e));
  }
 finally {
    try {
      if (sftpclient != null)       sftpclient.disconnect();
    }
 catch (    Exception e) {
    }
  }
  return result;
}
