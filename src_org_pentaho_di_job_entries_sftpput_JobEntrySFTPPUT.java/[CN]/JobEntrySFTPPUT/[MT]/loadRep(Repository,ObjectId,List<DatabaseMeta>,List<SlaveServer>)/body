{
  try {
    serverName=rep.getJobEntryAttributeString(id_jobentry,"servername");
    int intServerPort=(int)rep.getJobEntryAttributeInteger(id_jobentry,"serverport");
    serverPort=rep.getJobEntryAttributeString(id_jobentry,"serverport");
    if (intServerPort > 0 && Const.isEmpty(serverPort))     serverPort=Integer.toString(intServerPort);
    userName=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    sftpDirectory=rep.getJobEntryAttributeString(id_jobentry,"sftpdirectory");
    localDirectory=rep.getJobEntryAttributeString(id_jobentry,"localdirectory");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    copyprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"copyprevious");
    addFilenameResut=rep.getJobEntryAttributeBoolean(id_jobentry,"addFilenameResut");
    usekeyfilename=rep.getJobEntryAttributeBoolean(id_jobentry,"usekeyfilename");
    keyfilename=rep.getJobEntryAttributeString(id_jobentry,"keyfilename");
    keyfilepass=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"keyfilepass"));
    compression=rep.getJobEntryAttributeString(id_jobentry,"compression");
    proxyType=rep.getJobEntryAttributeString(id_jobentry,"proxyType");
    proxyHost=rep.getJobEntryAttributeString(id_jobentry,"proxyHost");
    proxyPort=rep.getJobEntryAttributeString(id_jobentry,"proxyPort");
    proxyUsername=rep.getJobEntryAttributeString(id_jobentry,"proxyUsername");
    proxyPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"proxyPassword"));
    createRemoteFolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createRemoteFolder");
    boolean remove=rep.getJobEntryAttributeBoolean(id_jobentry,"remove");
    setAfterFTPS(getAfterSFTPPutByCode(Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"aftersftpput"),"")));
    if (remove && getAfterFTPS() == AFTER_FTPSPUT_NOTHING) {
      setAfterFTPS(AFTER_FTPSPUT_DELETE);
    }
    destinationfolder=rep.getJobEntryAttributeString(id_jobentry,"destinationfolder");
    createDestinationFolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createdestinationfolder");
    successWhenNoFile=rep.getJobEntryAttributeBoolean(id_jobentry,"successWhenNoFile");
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'SFTPPUT' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
