{
  meta=(MappingMeta)smi;
  data=(MappingData)sdi;
  Object[] r=getRow();
  if (r == null) {
    if (data.wasStarted) {
      data.mappingInput.setOutputDone();
      data.mappingInput.setFinished();
    }
 else {
      setOutputDone();
    }
    return false;
  }
  if (first) {
    first=false;
    data.trans.execute(getTrans().getTransMeta().getArguments());
    data.mappingInput=data.trans.findMappingInput();
    if (data.mappingInput == null) {
      logError(Messages.getString("Mapping.Log.CouldNotFindMappingInputStep"));
      return false;
    }
    data.mappingOutput=data.trans.findMappingOutput();
    if (data.mappingOutput == null) {
      logError(Messages.getString("Mapping.Log.CouldNotFindMappingInputStep2"));
      return false;
    }
    data.mappingOutput.setConnectorStep(this);
    data.mappingOutput.setOutputField(meta.getOutputField());
    data.mappingOutput.setOutputMapping(meta.getOutputMapping());
    data.wasStarted=true;
    data.renameFieldIndexes=new ArrayList();
    data.renameFieldNames=new ArrayList();
    String[] inputFields=new String[meta.getInputField().length];
    for (int i=0; i < inputFields.length; i++)     inputFields[i]=meta.getInputField()[i];
    Arrays.sort(inputFields);
    for (int i=0; i < inputFields.length - 1; i++) {
      if (inputFields[i].equalsIgnoreCase(inputFields[i + 1])) {
        throw new KettleException(Messages.getString("Mapping.Exception.SameFieldMappedTwice",inputFields[i]));
      }
    }
    for (int i=0; i < meta.getInputField().length; i++) {
      if (meta.getInputField()[i] != null && meta.getInputField()[i].length() > 0) {
        if (meta.getInputMapping()[i] != null && meta.getInputMapping()[i].length() > 0) {
          if (!meta.getInputField()[i].equals(meta.getInputMapping()[i])) {
            int idx=getInputRowMeta().indexOfValue(meta.getInputField()[i]);
            if (idx < 0) {
              logError(Messages.getString("Mapping.Log.TargetFieldNotPresent",meta.getInputField()[i]));
              setErrors(1);
              stopAll();
              data.trans.stopAll();
              return false;
            }
            data.renameFieldIndexes.add(new Integer(idx));
            data.renameFieldNames.add(meta.getInputMapping()[i]);
            if (log.isRowLevel())             logRowlevel(Messages.getString("Mapping.Log.RenameFieldInfo",data.renameFieldIndexes.size() + "",i + "",meta.getInputMapping()[i]));
          }
        }
 else {
          logError(Messages.getString("Mapping.Log.TargetFieldNotSpecified",i + "",meta.getInputField()[i]) + "]!");
          setErrors(1);
          stopAll();
          data.trans.stopAll();
          return false;
        }
      }
 else {
        logError(Messages.getString("Mapping.Log.InputFieldNotSpecified",i + ""));
        setErrors(1);
        stopAll();
        data.trans.stopAll();
        return false;
      }
    }
    data.outputRowMeta=(RowMetaInterface)getInputRowMeta().clone();
    for (int i=0; i < data.renameFieldIndexes.size(); i++) {
      int idx=((Integer)data.renameFieldIndexes.get(i)).intValue();
      String newName=(String)data.renameFieldNames.get(i);
      data.outputRowMeta.getValueMeta(idx).setName(newName);
    }
  }
  data.mappingInput.putRow(data.outputRowMeta,r);
  if (checkFeedback(linesRead))   logBasic(Messages.getString("Mapping.Log.LineNumber") + linesRead);
  return true;
}
