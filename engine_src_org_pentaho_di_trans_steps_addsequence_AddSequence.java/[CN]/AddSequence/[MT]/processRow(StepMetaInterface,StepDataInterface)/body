{
  meta=(AddSequenceMeta)smi;
  data=(AddSequenceData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
  }
  if (log.isRowLevel())   logRowlevel(BaseMessages.getString(PKG,"AddSequence.Log.ReadRow") + getLinesRead() + " : "+ getInputRowMeta().getString(r));
  try {
    putRow(data.outputRowMeta,addSequence(getInputRowMeta(),r));
    if (log.isRowLevel())     logRowlevel(BaseMessages.getString(PKG,"AddSequence.Log.WriteRow") + getLinesWritten() + " : "+ getInputRowMeta().getString(r));
    if (checkFeedback(getLinesRead())) {
      if (log.isBasic())       logBasic(BaseMessages.getString(PKG,"AddSequence.Log.LineNumber") + getLinesRead());
    }
  }
 catch (  KettleException e) {
    logError(BaseMessages.getString(PKG,"AddSequence.Log.ErrorInStep") + e.getMessage());
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  return true;
}
