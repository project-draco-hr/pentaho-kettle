{
  Map<String,CommandLineOption> optionMap=new HashMap<String,CommandLineOption>();
  for (int i=0; i < options.length; i++) {
    optionMap.put(options[i].option,options[i]);
  }
  while (args.size() > 0) {
    String arg=args.get(0).trim();
    if (arg != null && arg.length() > 0 && (arg.charAt(0) == '-' || arg.charAt(0) == '/')) {
      String optionName=arg.substring(1);
      CommandLineOption option=optionMap.get(optionName);
      String value=null;
      if (option == null) {
        int pos=optionName.indexOf('=');
        if (pos != -1) {
          String tmp=optionName.substring(0,pos);
          option=optionMap.get(tmp);
          if (option != null) {
            value=optionName.substring(pos + 1);
          }
        }
        if (option == null) {
          pos=optionName.indexOf(':');
          if (pos != -1) {
            String tmp=optionName.substring(0,pos);
            option=optionMap.get(tmp);
            if (option != null) {
              value=optionName.substring(pos + 1);
            }
          }
        }
      }
      if (option != null) {
        args.remove(0);
        if (!option.yesNo) {
          if (args.size() > 0) {
            if (value == null) {
              value=args.get(0);
              args.remove(0);
            }
            option.argument.append(value);
          }
 else           if (value != null) {
            option.argument.append(value);
          }
 else {
            if (log != null) {
              log.logError("Command Line Options","Option " + optionName + " expects an argument",new Object[]{optionName});
            }
            return false;
          }
        }
 else {
          if (value != null) {
            option.argument.append(value);
          }
 else {
            option.argument.append("Y");
          }
        }
      }
 else {
        if (log != null) {
          log.logError("Command Line Options",optionName + " is not a recognized option",new Object[]{optionName});
        }
        return false;
      }
    }
 else     if ("".equals(arg)) {
      args.remove(0);
    }
 else {
      if (log != null) {
        log.logError("Command Line Options","Expected a recognized option but encountered " + arg,new Object[]{arg});
      }
      return false;
    }
  }
  return true;
}
