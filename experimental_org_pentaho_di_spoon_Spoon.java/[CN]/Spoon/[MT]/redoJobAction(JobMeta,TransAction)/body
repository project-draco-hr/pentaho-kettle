{
switch (transAction.getType()) {
case TransAction.TYPE_ACTION_NEW_JOB_ENTRY:
{
      JobEntryCopy si[]=(JobEntryCopy[])transAction.getCurrent();
      int idx[]=transAction.getCurrentIndex();
      for (int i=0; i < idx.length; i++)       jobMeta.addJobEntry(idx[i],si[i]);
      refreshTree();
      refreshGraph();
    }
  break;
case TransAction.TYPE_ACTION_NEW_NOTE:
{
  NotePadMeta ni[]=(NotePadMeta[])transAction.getCurrent();
  int idx[]=transAction.getCurrentIndex();
  for (int i=0; i < idx.length; i++)   jobMeta.addNote(idx[i],ni[i]);
  refreshTree();
  refreshGraph();
}
break;
case TransAction.TYPE_ACTION_NEW_JOB_HOP:
{
JobHopMeta hi[]=(JobHopMeta[])transAction.getCurrent();
int idx[]=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) jobMeta.addJobHop(idx[i],hi[i]);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_JOB_ENTRY:
{
int idx[]=transAction.getCurrentIndex();
for (int i=idx.length - 1; i >= 0; i--) jobMeta.removeJobEntry(idx[i]);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_NOTE:
{
int idx[]=transAction.getCurrentIndex();
for (int i=idx.length - 1; i >= 0; i--) jobMeta.removeNote(idx[i]);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_DELETE_JOB_HOP:
{
int idx[]=transAction.getCurrentIndex();
for (int i=idx.length - 1; i >= 0; i--) jobMeta.removeJobHop(idx[i]);
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_JOB_ENTRY:
{
for (int i=0; i < transAction.getCurrent().length; i++) {
JobEntryCopy copy=(JobEntryCopy)((JobEntryCopy)(transAction.getCurrent()[i])).clone_deep();
jobMeta.getJobEntry(transAction.getCurrentIndex()[i]).replaceMeta(copy);
}
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_NOTE:
{
NotePadMeta ni[]=(NotePadMeta[])transAction.getCurrent();
int idx[]=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) {
jobMeta.removeNote(idx[i]);
jobMeta.addNote(idx[i],ni[i]);
}
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_CHANGE_JOB_HOP:
{
JobHopMeta hi[]=(JobHopMeta[])transAction.getCurrent();
int idx[]=transAction.getCurrentIndex();
for (int i=0; i < idx.length; i++) {
jobMeta.removeJobHop(idx[i]);
jobMeta.addJobHop(idx[i],hi[i]);
}
refreshTree();
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_POSITION_JOB_ENTRY:
{
int idx[]=transAction.getCurrentIndex();
Point p[]=transAction.getCurrentLocation();
for (int i=0; i < p.length; i++) {
JobEntryCopy entry=jobMeta.getJobEntry(idx[i]);
entry.setLocation(p[i]);
}
refreshGraph();
}
break;
case TransAction.TYPE_ACTION_POSITION_NOTE:
{
int idx[]=transAction.getCurrentIndex();
Point curr[]=transAction.getCurrentLocation();
for (int i=0; i < idx.length; i++) {
NotePadMeta npi=jobMeta.getNote(idx[i]);
npi.setLocation(curr[i]);
}
refreshGraph();
}
break;
default :
break;
}
}
