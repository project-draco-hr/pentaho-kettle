{
  Node node=getTestNode();
  DatabaseMeta dbMeta=mock(DatabaseMeta.class);
  IMetaStore metastore=mock(IMetaStore.class);
  WebServiceMeta webServiceMeta=new WebServiceMeta(node,Collections.singletonList(dbMeta),metastore);
  assertEquals("httpUser",webServiceMeta.getHttpLogin());
  assertEquals("tryandguess",webServiceMeta.getHttpPassword());
  assertEquals("http://webservices.gama-system.com/exchangerates.asmx?WSDL",webServiceMeta.getUrl());
  assertEquals("GetCurrentExchangeRate",webServiceMeta.getOperationName());
  assertEquals("opRequestName",webServiceMeta.getOperationRequestName());
  assertEquals("GetCurrentExchangeRateResult",webServiceMeta.getOutFieldArgumentName());
  assertEquals("aProxy",webServiceMeta.getProxyHost());
  assertEquals("4444",webServiceMeta.getProxyPort());
  assertEquals(1,webServiceMeta.getCallStep());
  assertFalse(webServiceMeta.isPassingInputData());
  assertTrue(webServiceMeta.isCompatible());
  assertFalse(webServiceMeta.isReturningReplyAsString());
  List<WebServiceField> fieldsIn=webServiceMeta.getFieldsIn();
  assertEquals(3,fieldsIn.size());
  assertWebServiceField(fieldsIn.get(0),"Bank","strBank","string",2);
  assertWebServiceField(fieldsIn.get(1),"ToCurrency","strCurrency","string",2);
  assertWebServiceField(fieldsIn.get(2),"Rank","intRank","int",5);
  List<WebServiceField> fieldsOut=webServiceMeta.getFieldsOut();
  assertEquals(1,fieldsOut.size());
  assertWebServiceField(fieldsOut.get(0),"GetCurrentExchangeRateResult","GetCurrentExchangeRateResult","decimal",6);
  WebServiceMeta clone=webServiceMeta.clone();
  assertNotSame(clone,webServiceMeta);
  assertEquals(clone.getXML(),webServiceMeta.getXML());
}
