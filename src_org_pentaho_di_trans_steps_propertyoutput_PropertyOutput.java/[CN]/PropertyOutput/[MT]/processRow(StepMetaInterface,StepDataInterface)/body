{
  meta=(PropertyOutputMeta)smi;
  data=(PropertyOutputData)sdi;
  Object[] r=getRow();
  if (r == null) {
    if (!first) {
      saveProperties(data.pro);
    }
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.outputRowMeta=data.inputRowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.indexOfKeyField=data.inputRowMeta.indexOfValue(meta.getKeyField());
    if (data.indexOfKeyField < 0) {
      logError(BaseMessages.getString(PKG,"PropertyOutput.Log.ErrorFindingField",meta.getKeyField()));
      throw new KettleException(BaseMessages.getString(PKG,"PropertyOutput.Log.ErrorFindingField",meta.getKeyField()));
    }
    data.indexOfValueField=data.inputRowMeta.indexOfValue(meta.getValueField());
    if (data.indexOfValueField < 0) {
      logError(BaseMessages.getString(PKG,"PropertyOutput.Log.ErrorFindingField",meta.getValueField()));
      throw new KettleException(BaseMessages.getString(PKG,"PropertyOutput.Log.ErrorFindingField",meta.getValueField()));
    }
    String filename=buildFilename();
    if (Const.isEmpty(filename)) {
      logError(BaseMessages.getString(PKG,"PropertyOutput.Log.FilenameEmpty"));
      throw new KettleException(BaseMessages.getString(PKG,"PropertyOutput.Log.FilenameEmpty"));
    }
    try {
      data.file=KettleVFS.getFileObject(filename);
    }
 catch (    Exception e) {
      throw new KettleException(e);
    }
    createParentFolder();
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  String propkey=null;
  String propvalue=null;
  if (data.indexOfKeyField > -1)   propkey=data.inputRowMeta.getString(r,data.indexOfKeyField);
  if (data.indexOfValueField > -1)   propvalue=data.inputRowMeta.getString(r,data.indexOfValueField);
  try {
    if (!data.KeySet.contains(propkey)) {
      if (log.isDetailed()) {
        log.logDetailed(toString(),BaseMessages.getString(PKG,"PropertyOutput.Log.Key",propkey));
        log.logDetailed(toString(),BaseMessages.getString(PKG,"PropertyOutput.Log.Value",propvalue));
      }
      data.pro.setProperty(propkey,propvalue);
      putRow(data.outputRowMeta,r);
      incrementLinesOutput();
      if (checkFeedback(getLinesRead())) {
        if (log.isBasic())         logBasic("linenr " + getLinesRead());
      }
      data.KeySet.add(propkey);
    }
  }
 catch (  KettleStepException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"PropertyOutputMeta.Log.ErrorInStep") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(data.outputRowMeta,r,1L,errorMessage,null,"PROPSOUTPUTO001");
    }
  }
  return true;
}
