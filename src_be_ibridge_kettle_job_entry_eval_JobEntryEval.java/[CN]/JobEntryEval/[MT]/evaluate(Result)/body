{
  LogWriter log=LogWriter.getInstance();
  Context cx;
  Scriptable scope;
  String debug="start";
  cx=Context.enter();
  debug="try";
  try {
    scope=cx.initStandardObjects(null);
    debug="Long";
    Long errors=new Long(result.getNrErrors());
    Long lines_input=new Long(result.getNrLinesInput());
    Long lines_output=new Long(result.getNrLinesOutput());
    Long lines_updated=new Long(result.getNrLinesUpdated());
    Long lines_read=new Long(result.getNrLinesRead());
    Long lines_written=new Long(result.getNrLinesWritten());
    Long exit_status=new Long(result.getExitStatus());
    Long files_retrieved=new Long(result.getNrFilesRetrieved());
    Long nr=new Long(result.getEntryNr());
    debug="scope.put";
    scope.put("errors",scope,errors);
    scope.put("lines_input",scope,lines_input);
    scope.put("lines_output",scope,lines_output);
    scope.put("lines_updated",scope,lines_updated);
    scope.put("lines_read",scope,lines_read);
    scope.put("lines_written",scope,lines_written);
    scope.put("files_retrieved",scope,files_retrieved);
    scope.put("exit_status",scope,exit_status);
    scope.put("nr",scope,nr);
    scope.put("is_windows",scope,new Boolean(Const.isWindows()));
    Object array[]=null;
    if (result.getRows() != null) {
      array=result.getRows().toArray();
    }
    scope.put("rows",scope,array);
    try {
      debug="cx.evaluateString()";
      Object res=cx.evaluateString(scope,this.script,"<cmd>",1,null);
      debug="toBoolean";
      boolean retval=Context.toBoolean(res);
      result.setNrErrors(0);
      return retval;
    }
 catch (    Exception e) {
      result.setNrErrors(1);
      log.logError(toString(),"Couldn't compile javascript: " + e.toString());
      return false;
    }
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    log.logError(toString(),"Error evaluating expression in [" + debug + "] : "+ e.toString());
    return false;
  }
 finally {
    Context.exit();
  }
}
