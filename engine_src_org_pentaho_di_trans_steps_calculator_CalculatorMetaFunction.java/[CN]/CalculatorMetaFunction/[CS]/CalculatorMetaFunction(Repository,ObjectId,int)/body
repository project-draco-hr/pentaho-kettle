{
  fieldName=rep.getStepAttributeString(id_step,nr,"field_name");
  calcType=getCalcFunctionType(rep.getStepAttributeString(id_step,nr,"calc_type"));
  fieldA=rep.getStepAttributeString(id_step,nr,"field_a");
  fieldB=rep.getStepAttributeString(id_step,nr,"field_b");
  fieldC=rep.getStepAttributeString(id_step,nr,"field_c");
  valueType=ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,nr,"value_type"));
  valueLength=(int)rep.getStepAttributeInteger(id_step,nr,"value_length");
  valuePrecision=(int)rep.getStepAttributeInteger(id_step,nr,"value_precision");
  removedFromResult=rep.getStepAttributeBoolean(id_step,nr,"remove");
  conversionMask=rep.getStepAttributeString(id_step,nr,"conversion_mask");
  decimalSymbol=rep.getStepAttributeString(id_step,nr,"decimal_symbol");
  groupingSymbol=rep.getStepAttributeString(id_step,nr,"grouping_symbol");
  currencySymbol=rep.getStepAttributeString(id_step,nr,"currency_symbol");
  if (rep instanceof KettleDatabaseRepository) {
    KettleDatabaseRepository repository=(KettleDatabaseRepository)rep;
    if (repository.findStepAttributeID(id_step,nr,"conversion_mask") != null) {
      fixBackwardCompatibility();
    }
  }
}
