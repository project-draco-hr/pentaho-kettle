{
  List<ImportValidationFeedback> feedback=new ArrayList<ImportValidationFeedback>();
  if (!isEnabled()) {
    return feedback;
  }
  if (databaseMeta == null) {
    feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"This rule contains no database to validate against."));
    return feedback;
  }
  DatabaseMeta verify=null;
  if (subject instanceof HasDatabasesInterface) {
    HasDatabasesInterface dbs=(HasDatabasesInterface)subject;
    verify=dbs.findDatabase(databaseMeta.getName());
  }
 else   if (subject instanceof DatabaseMeta) {
    if (databaseMeta.getName().equals(((DatabaseMeta)subject).getName())) {
      verify=(DatabaseMeta)subject;
    }
  }
  if (verify == null) {
    return feedback;
  }
  if (!Const.isEmpty(databaseMeta.getDatabaseName())) {
    if (!databaseMeta.getDatabaseName().equals(verify.getDatabaseName())) {
      feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"The name of the database is not set to the expected value '" + databaseMeta.getDatabaseName() + "'."));
    }
  }
  if (!Const.isEmpty(databaseMeta.getHostname())) {
    if (!databaseMeta.getHostname().equals(verify.getHostname())) {
      feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"The host name of the database is not set to the expected value '" + databaseMeta.getHostname() + "'."));
    }
  }
  if (!Const.isEmpty(databaseMeta.getDatabasePortNumberString())) {
    if (!databaseMeta.getDatabasePortNumberString().equals(verify.getDatabasePortNumberString())) {
      feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"The database port of the database is not set to the expected value '" + databaseMeta.getDatabasePortNumberString() + "'."));
    }
  }
  if (!Const.isEmpty(databaseMeta.getUsername())) {
    if (!databaseMeta.getUsername().equals(verify.getUsername())) {
      feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"The username of the database is not set to the expected value '" + databaseMeta.getUsername() + "'."));
    }
  }
  if (!Const.isEmpty(databaseMeta.getPassword())) {
    if (!databaseMeta.getPassword().equals(verify.getPassword())) {
      feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.ERROR,"The password of the database is not set to the expected value."));
    }
  }
  if (feedback.isEmpty()) {
    feedback.add(new ImportValidationFeedback(this,ImportValidationResultType.APPROVAL,"The database connection was found and verified."));
  }
  return feedback;
}
