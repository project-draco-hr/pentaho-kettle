{
  meta=(SocketWriterMeta)smi;
  data=(SocketWriterData)sdi;
  Row r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  try {
    if (first) {
      int bufferSize=Integer.parseInt(StringUtil.environmentSubstitute(meta.getBufferSize()));
      data.clientSocket=data.serverSocket.accept();
      if (meta.isCompressed()) {
        data.outputStream=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(data.clientSocket.getOutputStream()),bufferSize));
        data.inputStream=new DataInputStream(new BufferedInputStream(new GZIPInputStream(data.clientSocket.getInputStream()),bufferSize));
      }
 else {
        data.outputStream=new DataOutputStream(new BufferedOutputStream(data.clientSocket.getOutputStream(),bufferSize));
        data.inputStream=new DataInputStream(new BufferedInputStream(data.clientSocket.getInputStream(),bufferSize));
      }
      data.flushInterval=Integer.parseInt(StringUtil.environmentSubstitute(meta.getFlushInterval()));
      r.write(data.outputStream);
      first=false;
    }
    r.writeData(data.outputStream);
    linesOutput++;
    if (linesOutput > 0 && (linesOutput % data.flushInterval) == 0)     data.outputStream.flush();
  }
 catch (  Exception e) {
    logError("Error writing to socket : " + e.toString());
    logError("Failing row : " + r);
    logError("Stack trace: " + Const.CR + Const.getStackTracker(e));
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  if (checkFeedback(linesRead))   logBasic(Messages.getString("SocketWriter.Log.LineNumber") + linesRead);
  return true;
}
