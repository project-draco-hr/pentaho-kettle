{
  int nrkeys=wKey.nrNonEmpty();
  int nrfields=wReturn.nrNonEmpty();
  input.allocate(nrkeys,nrfields);
  input.setCached(wCache.getSelection());
  input.setCacheSize(Const.toInt(wCachesize.getText(),0));
  log.logDebug(toString(),Messages.getString("DatabaseLookupDialog.Log.FoundKeys",String.valueOf(nrkeys)));
  for (int i=0; i < nrkeys; i++) {
    TableItem item=wKey.getNonEmpty(i);
    input.getTableKeyField()[i]=item.getText(1);
    input.getKeyCondition()[i]=item.getText(2);
    input.getStreamKeyField1()[i]=item.getText(3);
    input.getStreamKeyField2()[i]=item.getText(4);
  }
  log.logDebug(toString(),Messages.getString("DatabaseLookupDialog.Log.FoundFields",String.valueOf(nrfields)));
  for (int i=0; i < nrfields; i++) {
    TableItem item=wReturn.getNonEmpty(i);
    input.getReturnValueField()[i]=item.getText(1);
    input.getReturnValueNewName()[i]=item.getText(2);
    if (input.getReturnValueNewName()[i] == null || input.getReturnValueNewName()[i].length() == 0)     input.getReturnValueNewName()[i]=input.getReturnValueField()[i];
    input.getReturnValueDefault()[i]=item.getText(3);
    input.getReturnValueDefaultType()[i]=Value.getType(item.getText(4));
    if (input.getReturnValueDefaultType()[i] < 0) {
      input.getReturnValueDefaultType()[i]=Value.VALUE_TYPE_STRING;
    }
  }
  input.setSchemaName(wSchema.getText());
  input.setTablename(wTable.getText());
  input.setDatabaseMeta(transMeta.findDatabase(wConnection.getText()));
  input.setOrderByClause(wOrderBy.getText());
  input.setFailingOnMultipleResults(wFailMultiple.getSelection());
  input.setEatingRowOnLookupFailure(wEatRows.getSelection());
  stepname=wStepname.getText();
  if (transMeta.findDatabase(wConnection.getText()) == null) {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
    mb.setMessage(Messages.getString("DatabaseLookupDialog.InvalidConnection.DialogMessage"));
    mb.setText(Messages.getString("DatabaseLookupDialog.InvalidConnection.DialogTitle"));
    mb.open();
  }
  dispose();
}
