{
  Result result=previousResult;
  if (isStart()) {
    try {
      long sleepTime=getNextExecutionTime();
      parentJob.getLog().logMinimal(parentJob.toString(),"Sleeping: " + (sleepTime / 1000 / 60) + " minutes");
      Thread.sleep(sleepTime);
    }
 catch (    InterruptedException e) {
      throw new KettleJobException(e);
    }
    result=previousResult;
    result.setResult(true);
  }
 else   if (isDummy()) {
    result=previousResult;
  }
  return result;
}
