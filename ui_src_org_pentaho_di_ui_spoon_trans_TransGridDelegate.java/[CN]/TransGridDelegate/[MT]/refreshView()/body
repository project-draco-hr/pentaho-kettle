{
  boolean insert=true;
  int nrSteps=-1;
  int totalSteps=-1;
  if (transGridView == null || transGridView.isDisposed()) {
    return;
  }
  if (refresh_busy) {
    return;
  }
  List<StepMeta> selectedSteps=new ArrayList<StepMeta>();
  if (showSelectedSteps) {
    selectedSteps=transGraph.trans.getTransMeta().getSelectedSteps();
  }
  int topIdx=transGridView.getTable().getTopIndex();
  refresh_busy=true;
  Table table=transGridView.table;
  long time=new Date().getTime();
  long msSinceLastUpdate=time - lastUpdateView;
  if (transGraph.trans != null && !transGraph.trans.isPreparing() && msSinceLastUpdate > UPDATE_TIME_VIEW) {
    lastUpdateView=time;
    nrSteps=transGraph.trans.nrSteps();
    totalSteps=nrSteps;
    if (hideInactiveSteps) {
      nrSteps=transGraph.trans.nrActiveSteps();
    }
    StepExecutionStatus[] stepStatusLookup=transGraph.trans.getTransStepExecutionStatusLookup();
    boolean[] isRunningLookup=transGraph.trans.getTransStepIsRunningLookup();
    int sortColumn=transGridView.getSortField();
    boolean sortDescending=transGridView.isSortingDescending();
    int[] selectedItems=transGridView.getSelectionIndices();
    if (table.getItemCount() != nrSteps) {
      table.removeAll();
    }
 else {
      insert=false;
    }
    if (nrSteps == 0 && table.getItemCount() == 0) {
      new TableItem(table,SWT.NONE);
      refresh_busy=false;
      return;
    }
    int nr=0;
    for (int i=0; i < totalSteps; i++) {
      StepInterface baseStep=transGraph.trans.getRunThread(i);
      boolean showSelected;
      if (showSelectedSteps) {
        if (selectedSteps.size() == 0) {
          showSelected=true;
        }
 else {
          showSelected=false;
          for (          StepMeta stepMeta : selectedSteps) {
            if (baseStep.getStepMeta().equals(stepMeta)) {
              showSelected=true;
              break;
            }
          }
        }
      }
 else {
        showSelected=true;
      }
      if (showSelected && (hideInactiveSteps && (isRunningLookup[i] || stepStatusLookup[i] != StepExecutionStatus.STATUS_FINISHED)) || (!hideInactiveSteps && stepStatusLookup[i] != StepExecutionStatus.STATUS_EMPTY)) {
        TableItem ti=null;
        if (insert) {
          ti=new TableItem(table,SWT.NONE);
        }
 else {
          ti=table.getItem(nr);
        }
        if (ti == null) {
          continue;
        }
        String num="" + (i + 1);
        if (ti.getText(0).length() < 1) {
          ti.setText(0,num);
        }
        if (ti.getText(0).length() > 0) {
          Integer tIndex=Integer.parseInt(ti.getText(0));
          tIndex--;
          baseStep=transGraph.trans.getRunThread(tIndex);
        }
        StepStatus stepStatus=new StepStatus(baseStep);
        String[] fields=stepStatus.getTransLogFields();
        for (int f=1; f < fields.length; f++) {
          if (!fields[f].equalsIgnoreCase(ti.getText(f))) {
            ti.setText(f,fields[f]);
          }
        }
        if (baseStep.getErrors() > 0) {
          ti.setBackground(GUIResource.getInstance().getColorRed());
        }
 else {
          if (nr % 2 == 0) {
            ti.setBackground(GUIResource.getInstance().getColorWhite());
          }
 else {
            ti.setBackground(GUIResource.getInstance().getColorBlueCustomGrid());
          }
        }
        nr++;
      }
    }
    if (table.getItemCount() > 0 && (sortColumn != 0 || !sortDescending)) {
      transGridView.sortTable(sortColumn,sortDescending);
    }
    transGridView.optWidth(true);
    if (selectedItems != null && selectedItems.length > 0) {
      transGridView.setSelection(selectedItems);
    }
    if (transGridView.getTable().getTopIndex() != topIdx) {
      transGridView.getTable().setTopIndex(topIdx);
    }
  }
 else {
    if (table.getItemCount() == 0) {
      new TableItem(table,SWT.NONE);
    }
  }
  refresh_busy=false;
}
