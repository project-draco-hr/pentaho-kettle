{
  meta=(XsdValidatorMeta)smi;
  data=(XsdValidatorData)sdi;
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.getXMLStream() != null) {
      data.xmlindex=getInputRowMeta().indexOfValue(meta.getXMLStream());
      if (data.xmlindex < 0) {
        logError(BaseMessages.getString(PKG,"XsdValidator.Log.ErrorFindingField") + "[" + meta.getXMLStream()+ "]");
        throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.CouldnotFindField",meta.getXMLStream()));
      }
      if (meta.getResultfieldname() == null) {
        logError(BaseMessages.getString(PKG,"XsdValidator.Log.ErrorResultFieldMissing"));
        throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.ErrorResultFieldMissing"));
      }
      if (meta.getXSDSource().equals(meta.SPECIFY_FILENAME)) {
        if (meta.getXSDFilename() == null) {
          logError(BaseMessages.getString(PKG,"XsdValidator.Log.ErrorXSDFileMissing"));
          throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.ErrorXSDFileMissing"));
        }
 else {
          FileObject xsdfile=null;
          try {
            xsdfile=KettleVFS.getFileObject(environmentSubstitute(meta.getXSDFilename()),getTransMeta());
            if (!xsdfile.exists()) {
              logError(BaseMessages.getString(PKG,"XsdValidator.Log.Error.XSDFileNotExists"));
              throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.XSDFileNotExists"));
            }
          }
 catch (          Exception e) {
            logError(BaseMessages.getString(PKG,"XsdValidator.Log.Error.GettingXSDFile"));
            throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.GettingXSDFile"));
          }
 finally {
            try {
              if (xsdfile != null) {
                xsdfile.close();
              }
            }
 catch (            IOException e) {
            }
          }
        }
      }
      if (meta.getXSDSource().equals(meta.SPECIFY_FIELDNAME)) {
        if (meta.getXSDDefinedField() == null) {
          logError(BaseMessages.getString(PKG,"XsdValidator.Log.Error.XSDFieldMissing"));
          throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.XSDFieldMissing"));
        }
 else {
          data.xsdindex=getInputRowMeta().indexOfValue(meta.getXSDDefinedField());
          if (data.xsdindex < 0) {
            logError(BaseMessages.getString(PKG,"XsdValidator.Log.ErrorFindingXSDField",meta.getXSDDefinedField()));
            throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.ErrorFindingXSDField",meta.getXSDDefinedField()));
          }
        }
      }
    }
 else {
      logError(BaseMessages.getString(PKG,"XsdValidator.Log.Error.XmlStreamFieldMissing"));
      throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.XmlStreamFieldMissing"));
    }
  }
  try {
    String XMLFieldvalue=getInputRowMeta().getString(row,data.xmlindex);
    boolean isvalid=false;
    String xsdfilename=null;
    if (meta.getXSDSource().equals(meta.SPECIFY_FILENAME)) {
      xsdfilename=environmentSubstitute(meta.getXSDFilename());
    }
 else     if (meta.getXSDSource().equals(meta.SPECIFY_FIELDNAME)) {
      xsdfilename=getInputRowMeta().getString(row,data.xsdindex);
    }
    FileObject xsdfile=null;
    String validationmsg=null;
    try {
      SchemaFactory factoryXSDValidator=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
      xsdfile=KettleVFS.getFileObject(xsdfilename,getTransMeta());
      Source sourceXML=new StreamSource(new StringReader(XMLFieldvalue));
      if (meta.getXMLSourceFile()) {
        FileObject xmlfileValidator=KettleVFS.getFileObject(XMLFieldvalue);
        if (xmlfileValidator == null || !xmlfileValidator.exists()) {
          logError(BaseMessages.getString(PKG,"XsdValidator.Log.Error.XMLfileMissing",XMLFieldvalue));
          throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.XMLfileMissing",XMLFieldvalue));
        }
        sourceXML=new StreamSource(xmlfileValidator.getContent().getInputStream());
      }
      Schema SchematXSD=null;
      if (xsdfile instanceof AbstractFileObject) {
        SchematXSD=factoryXSDValidator.newSchema(new StreamSource(xsdfile.getContent().getInputStream()));
      }
 else {
        throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.Exception.CannotCreateSchema",xsdfile.getClass().getName()));
      }
      if (meta.getXSDSource().equals(meta.NO_NEED)) {
        SchematXSD=factoryXSDValidator.newSchema();
      }
      Validator XSDValidator=SchematXSD.newValidator();
      XSDValidator.validate(sourceXML);
      isvalid=true;
    }
 catch (    SAXException ex) {
      validationmsg=ex.getMessage();
    }
catch (    IOException ex) {
      validationmsg=ex.getMessage();
    }
 finally {
      try {
        if (xsdfile != null) {
          xsdfile.close();
        }
      }
 catch (      IOException e) {
      }
    }
    Object[] outputRowData=null;
    Object[] outputRowData2=null;
    if (meta.getOutputStringField()) {
      if (isvalid) {
        outputRowData=RowDataUtil.addValueData(row,getInputRowMeta().size(),environmentSubstitute(meta.getIfXmlValid()));
      }
 else {
        outputRowData=RowDataUtil.addValueData(row,getInputRowMeta().size(),environmentSubstitute(meta.getIfXmlInvalid()));
      }
    }
 else {
      outputRowData=RowDataUtil.addValueData(row,getInputRowMeta().size(),isvalid);
    }
    if (meta.useAddValidationMessage()) {
      outputRowData2=RowDataUtil.addValueData(outputRowData,getInputRowMeta().size() + 1,validationmsg);
    }
 else {
      outputRowData2=outputRowData;
    }
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"XsdValidator.Log.ReadRow") + " " + getInputRowMeta().getString(row));
    }
    putRow(data.outputRowMeta,outputRowData2);
  }
 catch (  KettleException e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),row,1,errorMessage,null,"XSD001");
    }
 else {
      logError(BaseMessages.getString(PKG,"XsdValidator.ErrorProcesing" + " : " + e.getMessage()));
      throw new KettleStepException(BaseMessages.getString(PKG,"XsdValidator.ErrorProcesing"),e);
    }
  }
  return true;
}
