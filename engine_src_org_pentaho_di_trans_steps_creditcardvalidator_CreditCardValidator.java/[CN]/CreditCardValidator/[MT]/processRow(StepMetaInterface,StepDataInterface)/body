{
  meta=(CreditCardValidatorMeta)smi;
  data=(CreditCardValidatorData)sdi;
  boolean sendToErrorRow=false;
  String errorMessage=null;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  boolean isValid=false;
  String cardType=null;
  String unValid=null;
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    data.NrPrevFields=data.previousRowMeta.size();
    data.outputRowMeta=data.previousRowMeta;
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (Utils.isEmpty(meta.getDynamicField())) {
      logError(BaseMessages.getString(PKG,"CreditCardValidator.Error.CardFieldMissing"));
      throw new KettleException(BaseMessages.getString(PKG,"CreditCardValidator.Error.CardFieldMissing"));
    }
    if (data.indexOfField < 0) {
      data.indexOfField=getInputRowMeta().indexOfValue(meta.getDynamicField());
      if (data.indexOfField < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"CreditCardValidator.Exception.CouldnotFindField",meta.getDynamicField()));
      }
    }
    data.realResultFieldname=environmentSubstitute(meta.getResultFieldName());
    if (Utils.isEmpty(data.realResultFieldname)) {
      throw new KettleException(BaseMessages.getString(PKG,"CreditCardValidator.Exception.ResultFieldMissing"));
    }
    data.realCardTypeFieldname=environmentSubstitute(meta.getCardType());
    data.realNotValidMsgFieldname=environmentSubstitute(meta.getNotValidMsg());
  }
  Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  for (int i=0; i < data.NrPrevFields; i++) {
    outputRow[i]=r[i];
  }
  try {
    String fieldvalue=getInputRowMeta().getString(r,data.indexOfField);
    if (meta.isOnlyDigits()) {
      fieldvalue=Const.getDigitsOnly(fieldvalue);
    }
    ReturnIndicator rt=new ReturnIndicator();
    rt=CreditCardVerifier.CheckCC(fieldvalue);
    isValid=rt.CardValid;
    if (!Utils.isEmpty(data.realCardTypeFieldname)) {
      cardType=rt.CardType;
    }
    if (!Utils.isEmpty(data.realNotValidMsgFieldname)) {
      unValid=rt.UnValidMsg;
    }
    outputRow[data.NrPrevFields]=isValid;
    int rowIndex=data.NrPrevFields;
    rowIndex++;
    if (!Utils.isEmpty(data.realCardTypeFieldname)) {
      outputRow[rowIndex++]=cardType;
    }
    if (!Utils.isEmpty(data.realNotValidMsgFieldname)) {
      outputRow[rowIndex++]=unValid;
    }
    putRow(data.outputRowMeta,outputRow);
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"CreditCardValidator.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
    }
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"CreditCardValidator.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,meta.getResultFieldName(),"CreditCardValidator001");
    }
  }
  return true;
}
