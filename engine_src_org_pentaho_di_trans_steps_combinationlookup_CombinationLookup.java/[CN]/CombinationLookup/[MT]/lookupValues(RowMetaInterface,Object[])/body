{
  Long val_key=null;
  Long val_hash=null;
  Object[] hashRow=null;
  Object[] lookupRow=new Object[data.lookupRowMeta.size()];
  int lookupIndex=0;
  if (meta.useHash() || meta.getCacheSize() >= 0) {
    hashRow=new Object[data.hashRowMeta.size()];
    for (int i=0; i < meta.getKeyField().length; i++) {
      hashRow[i]=row[data.keynrs[i]];
    }
    if (meta.useHash()) {
      val_hash=new Long(data.hashRowMeta.oldXORHashCode(hashRow));
      lookupRow[lookupIndex]=val_hash;
      lookupIndex++;
    }
  }
  for (int i=0; i < meta.getKeyField().length; i++) {
    int rowIndex=data.keynrs[i];
    lookupRow[lookupIndex]=row[rowIndex];
    lookupIndex++;
    if (meta.getDatabaseMeta().requiresCastToVariousForIsNull() && rowMeta.getValueMeta(rowIndex).getType() == ValueMeta.TYPE_STRING) {
      lookupRow[lookupIndex]=rowMeta.getValueMeta(rowIndex).isNull(row[rowIndex]) ? null : "NotNull";
    }
 else {
      lookupRow[lookupIndex]=row[data.keynrs[i]];
    }
    lookupIndex++;
  }
  val_key=lookupInCache(data.hashRowMeta,hashRow);
  if (val_key == null) {
    data.db.setValues(data.lookupRowMeta,lookupRow,data.prepStatementLookup);
    Object[] add=data.db.getLookup(data.prepStatementLookup);
    incrementLinesInput();
    if (add == null) {
switch (getTechKeyCreation()) {
case CREATION_METHOD_TABLEMAX:
        val_key=data.db.getNextValue(getTransMeta().getCounters(),data.realSchemaName,data.realTableName,meta.getTechnicalKeyField());
      break;
case CREATION_METHOD_AUTOINC:
    val_key=new Long(0);
  break;
case CREATION_METHOD_SEQUENCE:
val_key=data.db.getNextSequenceValue(data.realSchemaName,meta.getSequenceFrom(),meta.getTechnicalKeyField());
if (val_key != null && isRowLevel()) {
logRowlevel(BaseMessages.getString(PKG,"CombinationLookup.Log.FoundNextSequenceValue") + val_key.toString());
}
break;
default :
break;
}
val_key=combiInsert(rowMeta,row,val_key,val_hash);
incrementLinesOutput();
if (isRowLevel()) {
logRowlevel(BaseMessages.getString(PKG,"CombinationLookup.Log.AddedDimensionEntry") + val_key);
}
addToCache(data.hashRowMeta,hashRow,val_key);
}
 else {
val_key=data.db.getReturnRowMeta().getInteger(add,0);
addToCache(data.hashRowMeta,hashRow,val_key);
}
}
Object[] outputRow=new Object[data.outputRowMeta.size()];
int outputIndex=0;
if (meta.replaceFields()) {
for (int i=0; i < rowMeta.size(); i++) {
if (!data.removeField[i]) {
outputRow[outputIndex]=row[i];
outputIndex++;
}
}
}
 else {
for (outputIndex=0; outputIndex < rowMeta.size(); outputIndex++) {
outputRow[outputIndex]=row[outputIndex];
}
}
outputRow[outputIndex]=val_key;
return outputRow;
}
