{
  try {
    startsWithHeader=rep.getStepAttributeBoolean(id_step,"header");
    ignoreEmptyRows=rep.getStepAttributeBoolean(id_step,"noempty");
    stopOnEmpty=rep.getStepAttributeBoolean(id_step,"stoponempty");
    fileField=rep.getStepAttributeString(id_step,"filefield");
    sheetField=rep.getStepAttributeString(id_step,"sheetfield");
    rowNumberField=rep.getStepAttributeString(id_step,"rownumfield");
    rowLimit=(int)rep.getStepAttributeInteger(id_step,"limit");
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrsheets=rep.countNrStepAttributes(id_step,"sheet_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfiles,nrsheets,nrfields);
    for (int i=0; i < nrfiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(fileRequired[i]))       fileRequired[i]=NO;
    }
    for (int i=0; i < nrsheets; i++) {
      sheetName[i]=rep.getStepAttributeString(id_step,i,"sheet_name");
      startRow[i]=(int)rep.getStepAttributeInteger(id_step,i,"sheet_startrow");
      startColumn[i]=(int)rep.getStepAttributeInteger(id_step,i,"sheet_startcol");
    }
    for (int i=0; i < nrfields; i++) {
      fieldName[i]=rep.getStepAttributeString(id_step,i,"field_name");
      fieldType[i]=Value.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      fieldLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      fieldPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
      fieldTrimType[i]=getTrimType(rep.getStepAttributeString(id_step,i,"field_trim_type"));
      fieldRepeat[i]=rep.getStepAttributeBoolean(id_step,i,"field_repeat");
    }
    strictTypes=rep.getStepAttributeBoolean(id_step,0,"strict_types",false);
    errorIgnored=rep.getStepAttributeBoolean(id_step,0,"error_ignored",false);
    errorLineSkipped=rep.getStepAttributeBoolean(id_step,0,"error_line_skipped",false);
    warningFilesDestinationDirectory=rep.getStepAttributeString(id_step,"bad_line_files_dest_dir");
    warningFilesExtension=rep.getStepAttributeString(id_step,"bad_line_files_ext");
    errorFilesDestinationDirectory=rep.getStepAttributeString(id_step,"error_line_files_dest_dir");
    errorFilesExtension=rep.getStepAttributeString(id_step,"error_line_files_ext");
    lineNumberFilesDestinationDirectory=rep.getStepAttributeString(id_step,"line_number_files_dest_dir");
    lineNumberFilesExtension=rep.getStepAttributeString(id_step,"line_number_files_ext");
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
