{
  try {
    startsWithHeader=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"header"));
    String nempty=XMLHandler.getTagValue(stepnode,"noempty");
    ignoreEmptyRows=YES.equalsIgnoreCase(nempty) || nempty == null;
    String soempty=XMLHandler.getTagValue(stepnode,"stoponempty");
    stopOnEmpty=YES.equalsIgnoreCase(soempty) || nempty == null;
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownumfield");
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0);
    sheetField=XMLHandler.getTagValue(stepnode,"sheetfield");
    fileField=XMLHandler.getTagValue(stepnode,"filefield");
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node sheetsnode=XMLHandler.getSubNode(stepnode,"sheets");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrfiles=XMLHandler.countNodes(filenode,"name");
    int nrsheets=XMLHandler.countNodes(sheetsnode,"sheet");
    int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfiles,nrsheets,nrfields);
    for (int i=0; i < nrfiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
    }
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      fieldName[i]=XMLHandler.getTagValue(fnode,"name");
      fieldType[i]=Value.getType(XMLHandler.getTagValue(fnode,"type"));
      fieldLength[i]=Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1);
      fieldPrecision[i]=Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1);
      String srepeat=XMLHandler.getTagValue(fnode,"repeat");
      fieldTrimType[i]=getTrimType(XMLHandler.getTagValue(fnode,"trim_type"));
      if (srepeat != null)       fieldRepeat[i]=YES.equalsIgnoreCase(srepeat);
 else       fieldRepeat[i]=false;
    }
    for (int i=0; i < nrsheets; i++) {
      Node snode=XMLHandler.getSubNodeByNr(sheetsnode,"sheet",i);
      sheetName[i]=XMLHandler.getTagValue(snode,"name");
      startRow[i]=Const.toInt(XMLHandler.getTagValue(snode,"startrow"),0);
      startColumn[i]=Const.toInt(XMLHandler.getTagValue(snode,"startcol"),0);
    }
    strictTypes=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"strict_types"));
    errorIgnored=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_ignored"));
    errorLineSkipped=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_line_skipped"));
    badLineFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"bad_line_files_destination_directory");
    badLineFilesExtension=XMLHandler.getTagValue(stepnode,"bad_line_files_extension");
    errorLineFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"error_line_files_destination_directory");
    errorLineFilesExtension=XMLHandler.getTagValue(stepnode,"error_line_files_extension");
    lineNumberFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"line_number_files_destination_directory");
    lineNumberFilesExtension=XMLHandler.getTagValue(stepnode,"line_number_files_extension");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to read step information from XML",e);
  }
}
