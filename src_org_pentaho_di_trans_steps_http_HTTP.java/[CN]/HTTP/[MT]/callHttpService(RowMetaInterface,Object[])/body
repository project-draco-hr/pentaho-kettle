{
  String url=determineUrl(rowMeta,rowData);
  try {
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"HTTP.Log.Connecting",url));
    HttpClient httpclient=new HttpClient();
    HttpMethod method=new GetMethod(environmentSubstitute(url));
    try {
      int result=httpclient.executeMethod(method);
      if (log.isDebug())       logDebug(BaseMessages.getString(PKG,"HTTP.Log.ResponseStatusCode","" + result));
      String encoding=meta.getEncoding();
      if (Const.isEmpty(encoding)) {
        String contentType=method.getResponseHeader("Content-Type").getValue();
        if (contentType != null && contentType.contains("charset")) {
          encoding=contentType.replaceFirst("^.*;\\s*charset\\s*=\\s*","").trim();
        }
      }
      if (Const.isEmpty(encoding)) {
        encoding="UTF-8";
      }
      if (log.isDebug())       log.logDebug(toString(),BaseMessages.getString(PKG,"HTTP.Log.ResponseHeaderEncoding",encoding));
      InputStreamReader inputStreamReader=new InputStreamReader(method.getResponseBodyAsStream(),encoding);
      StringBuffer bodyBuffer=new StringBuffer();
      int c;
      while ((c=inputStreamReader.read()) != -1) {
        bodyBuffer.append((char)c);
      }
      inputStreamReader.close();
      String body=bodyBuffer.toString();
      if (log.isDebug())       logDebug("Response body: " + body);
      return RowDataUtil.addValueData(rowData,rowMeta.size(),body);
    }
  finally {
      method.releaseConnection();
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTP.Log.UnableGetResult",url),e);
  }
}
