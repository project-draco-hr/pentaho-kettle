{
  String url=determineUrl(rowMeta,rowData);
  try {
    if (log.isDetailed())     logDetailed(BaseMessages.getString(PKG,"HTTP.Log.Connecting",url));
    HttpClient httpclient=new HttpClient();
    HttpMethod method=new GetMethod(url);
    if (!Const.isEmpty(data.realHttpLogin)) {
      httpclient.getParams().setAuthenticationPreemptive(true);
      Credentials defaultcreds=new UsernamePasswordCredentials(data.realHttpLogin,data.realHttpPassword);
      httpclient.getState().setCredentials(AuthScope.ANY,defaultcreds);
    }
    HostConfiguration hostConfiguration=new HostConfiguration();
    if (!Const.isEmpty(data.realProxyHost)) {
      hostConfiguration.setProxy(data.realProxyHost,data.realProxyPort);
    }
    if (data.useHeaderParameters) {
      for (int i=0; i < data.header_parameters_nrs.length; i++) {
        method.addRequestHeader(data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i]));
        if (log.isDebug())         log.logDebug(BaseMessages.getString(PKG,"HTTPDialog.Log.HeaderValue",data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i])));
      }
    }
    InputStreamReader inputStreamReader=null;
    Object[] newRow=null;
    try {
      int statusCode=httpclient.executeMethod(hostConfiguration,method);
      if (log.isDebug())       logDebug(BaseMessages.getString(PKG,"HTTP.Log.ResponseStatusCode","" + statusCode));
      String body=null;
      if (statusCode != -1) {
        if (statusCode != 401) {
          String encoding=meta.getEncoding();
          if (Const.isEmpty(encoding)) {
            String contentType=method.getResponseHeader("Content-Type").getValue();
            if (contentType != null && contentType.contains("charset")) {
              encoding=contentType.replaceFirst("^.*;\\s*charset\\s*=\\s*","").replace("\"","").trim();
            }
          }
          if (log.isDebug())           log.logDebug(toString(),BaseMessages.getString(PKG,"HTTP.Log.ResponseHeaderEncoding",encoding));
          if (!Const.isEmpty(encoding)) {
            inputStreamReader=new InputStreamReader(method.getResponseBodyAsStream(),encoding);
          }
 else {
            inputStreamReader=new InputStreamReader(method.getResponseBodyAsStream());
          }
          StringBuffer bodyBuffer=new StringBuffer();
          int c;
          while ((c=inputStreamReader.read()) != -1) {
            bodyBuffer.append((char)c);
          }
          inputStreamReader.close();
          body=bodyBuffer.toString();
          if (log.isDebug())           logDebug("Response body: " + body);
        }
 else {
          throw new KettleStepException(BaseMessages.getString(PKG,"HTTP.Exception.Authentication",data.realUrl));
        }
      }
      int returnFieldsOffset=rowMeta.size();
      if (!Const.isEmpty(meta.getFieldName())) {
        newRow=RowDataUtil.addValueData(rowData,returnFieldsOffset,body);
        returnFieldsOffset++;
      }
      if (!Const.isEmpty(meta.getResultCodeFieldName())) {
        newRow=RowDataUtil.addValueData(rowData,returnFieldsOffset,new Long(statusCode));
      }
    }
  finally {
      if (inputStreamReader != null)       inputStreamReader.close();
      method.releaseConnection();
    }
    return newRow;
  }
 catch (  UnknownHostException uhe) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTP.Error.UnknownHostException",uhe.getMessage()));
  }
catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTP.Log.UnableGetResult",url),e);
  }
}
