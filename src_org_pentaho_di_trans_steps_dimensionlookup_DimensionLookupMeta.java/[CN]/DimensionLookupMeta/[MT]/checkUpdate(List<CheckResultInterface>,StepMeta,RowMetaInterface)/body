{
  LogWriter log=LogWriter.getInstance();
  CheckResult cr;
  String error_message="";
  if (databaseMeta != null) {
    Database db=new Database(databaseMeta);
    try {
      db.connect();
      if (!Const.isEmpty(tableName)) {
        boolean first=true;
        boolean error_found=false;
        error_message="";
        String schemaTable=databaseMeta.getQuotedSchemaTableCombination(schemaName,tableName);
        RowMetaInterface r=db.getTableFields(schemaTable);
        if (r != null) {
          for (int i=0; i < fieldLookup.length; i++) {
            String lufield=fieldLookup[i];
            log.logDebug(toString(),BaseMessages.getString(PKG,"DimensionLookupMeta.Log.CheckLookupField") + i + " --> "+ lufield+ " in lookup table...");
            ValueMetaInterface v=r.searchValueMeta(lufield);
            if (v == null) {
              if (first) {
                first=false;
                error_message+=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.MissingCompareFieldsInTargetTable") + Const.CR;
              }
              error_found=true;
              error_message+="\t\t" + lufield + Const.CR;
            }
          }
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.AllLookupFieldFound"),stepinfo);
          }
          remarks.add(cr);
          if (keyField != null && keyField.length() > 0) {
            if (r.indexOfValue(keyField) < 0) {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.TechnicalKeyNotFound",keyField) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
            }
 else {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.TechnicalKeyFound",keyField) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
            }
            remarks.add(cr);
          }
 else {
            error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.TechnicalKeyRequired") + Const.CR;
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo));
          }
          if (versionField != null && versionField.length() > 0) {
            if (r.indexOfValue(versionField) < 0) {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.VersionFieldNotFound",versionField) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
            }
 else {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.VersionFieldFound",versionField) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
            }
            remarks.add(cr);
          }
 else {
            error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.VersionKeyRequired") + Const.CR;
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo));
          }
          if (dateFrom != null && dateFrom.length() > 0) {
            if (r.indexOfValue(dateFrom) < 0) {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.StartPointOfDaterangeNotFound",dateFrom) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
            }
 else {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.StartPointOfDaterangeFound",dateFrom) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
            }
            remarks.add(cr);
          }
 else {
            error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.StartKeyRequired") + Const.CR;
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo));
          }
          if (dateTo != null && dateTo.length() > 0) {
            if (r.indexOfValue(dateTo) < 0) {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.EndPointOfDaterangeNotFound",dateTo) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
            }
 else {
              error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.EndPointOfDaterangeFound",dateTo) + Const.CR;
              cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
            }
            remarks.add(cr);
          }
 else {
            error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.EndKeyRequired") + Const.CR;
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo));
          }
        }
 else {
          error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.CouldNotReadTableInfo");
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          remarks.add(cr);
        }
      }
      if (prev != null && prev.size() > 0) {
        boolean first=true;
        error_message="";
        boolean error_found=false;
        for (int i=0; i < fieldStream.length; i++) {
          log.logDebug(toString(),BaseMessages.getString(PKG,"DimensionLookupMeta.Log.CheckField",i + " --> " + fieldStream[i]));
          ValueMetaInterface v=prev.searchValueMeta(fieldStream[i]);
          if (v == null) {
            if (first) {
              first=false;
              error_message+=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.MissongFields") + Const.CR;
            }
            error_found=true;
            error_message+="\t\t" + fieldStream[i] + Const.CR;
          }
        }
        if (error_found) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        }
 else {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.AllFieldsFound"),stepinfo);
        }
        remarks.add(cr);
      }
 else {
        error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.CouldNotReadFieldsFromPreviousStep") + Const.CR;
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
        remarks.add(cr);
      }
      if (databaseMeta.supportsSequences() && CREATION_METHOD_SEQUENCE.equals(getTechKeyCreation()) && sequenceName != null && sequenceName.length() != 0) {
        if (db.checkSequenceExists(sequenceName)) {
          error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.SequenceExists",sequenceName);
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepinfo);
          remarks.add(cr);
        }
 else {
          error_message+=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.SequenceCouldNotFound",sequenceName);
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
          remarks.add(cr);
        }
      }
    }
 catch (    KettleException e) {
      error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.CouldNotConectToDB") + e.getMessage();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
      remarks.add(cr);
    }
  }
 else {
    error_message=BaseMessages.getString(PKG,"DimensionLookupMeta.CheckResult.InvalidConnectionName");
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepinfo);
    remarks.add(cr);
  }
}
