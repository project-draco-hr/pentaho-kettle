{
  logBasic(BaseMessages.getString(PKG,"JobEntryFTPS.Started",serverName));
  Result result=previousResult;
  result.setNrErrors(1);
  result.setResult(false);
  NrErrors=0;
  NrfilesRetrieved=0;
  successConditionBroken=false;
  boolean exitjobentry=false;
  limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
  if (movefiles) {
    if (Const.isEmpty(movetodirectory)) {
      logError(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderEmpty"));
      return result;
    }
  }
  localFolder=environmentSubstitute(targetDirectory);
  if (isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.Start"));
  }
  FTPSConnection connection=null;
  try {
    String realServername=environmentSubstitute(serverName);
    String realUsername=environmentSubstitute(userName);
    String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
    int realPort=Const.toInt(environmentSubstitute(this.port),0);
    connection=new FTPSConnection(getConnectionType(),realServername,realPort,realUsername,realPassword);
    if (!Const.isEmpty(proxyHost)) {
      String realProxy_host=environmentSubstitute(proxyHost);
      String realProxy_username=environmentSubstitute(proxyUsername);
      String realProxy_password=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(proxyPassword));
      connection.setProxyHost(realProxy_host);
      if (!Const.isEmpty(realProxy_username)) {
        connection.setProxyUser(realProxy_username);
      }
      if (!Const.isEmpty(realProxy_password)) {
        connection.setProxyPassword(realProxy_password);
      }
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.OpenedProxyConnectionOn",realProxy_host));
      }
      int proxyport=Const.toInt(environmentSubstitute(proxyPort),21);
      if (proxyport != 0) {
        connection.setProxyPort(proxyport);
      }
    }
 else {
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.OpenedConnectionTo",realServername));
      }
    }
    if (activeConnection) {
      connection.setPassiveMode(false);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.SetActive"));
      }
    }
 else {
      connection.setPassiveMode(true);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.SetPassive"));
      }
    }
    if (isBinaryMode()) {
      connection.setBinaryMode(true);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.SetBinary"));
      }
    }
    connection.setTimeOut(timeout);
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.SetTimeout",String.valueOf(timeout)));
    }
    connection.connect();
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.LoggedIn",realUsername));
      logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.WorkingDirectory",connection.getWorkingDirectory()));
    }
    if (!Const.isEmpty(FTPSDirectory)) {
      String realFTPSDirectory=environmentSubstitute(FTPSDirectory);
      realFTPSDirectory=normalizePath(realFTPSDirectory);
      connection.changeDirectory(realFTPSDirectory);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.ChangedDir",realFTPSDirectory));
      }
    }
    if (movefiles && !Const.isEmpty(movetodirectory)) {
      realMoveToFolder=normalizePath(environmentSubstitute(movetodirectory));
      boolean folderExist=connection.isDirectoryExists(realMoveToFolder);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.CheckMoveToFolder",realMoveToFolder));
      }
      if (!folderExist) {
        if (createmovefolder) {
          connection.createDirectory(realMoveToFolder);
          if (isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderCreated",realMoveToFolder));
          }
        }
 else {
          logError(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderNotExist"));
          exitjobentry=true;
          NrErrors++;
        }
      }
    }
    if (!exitjobentry) {
      Pattern pattern=null;
      if (!Const.isEmpty(wildcard)) {
        String realWildcard=environmentSubstitute(wildcard);
        pattern=Pattern.compile(realWildcard);
      }
      if (!getSuccessCondition().equals(SUCCESS_IF_NO_ERRORS)) {
        limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
      }
      downloadFiles(connection,connection.getWorkingDirectory(),pattern,result);
    }
  }
 catch (  Exception e) {
    if (!successConditionBroken && !exitjobentry) {
      updateErrors();
    }
    logError(BaseMessages.getString(PKG,"JobEntryFTPS.ErrorGetting",e.getMessage()));
  }
 finally {
    if (connection != null) {
      try {
        connection.disconnect();
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"JobEntryFTPS.ErrorQuitting",e.getMessage()));
      }
    }
  }
  result.setNrErrors(NrErrors);
  result.setNrFilesRetrieved(NrfilesRetrieved);
  if (getSuccessStatus()) {
    result.setResult(true);
  }
  if (exitjobentry) {
    result.setResult(false);
  }
  displayResults();
  return result;
}
