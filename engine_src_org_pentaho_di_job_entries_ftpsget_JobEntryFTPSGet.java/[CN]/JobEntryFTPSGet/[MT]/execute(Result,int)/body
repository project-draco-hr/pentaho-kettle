{
  logBasic(BaseMessages.getString(PKG,"JobEntryFTPS.Started",serverName));
  Result result=previousResult;
  result.setNrErrors(1);
  result.setResult(false);
  NrErrors=0;
  NrfilesRetrieved=0;
  successConditionBroken=false;
  boolean exitjobentry=false;
  limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
  if (movefiles) {
    if (Utils.isEmpty(movetodirectory)) {
      logError(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderEmpty"));
      return result;
    }
  }
  localFolder=environmentSubstitute(targetDirectory);
  if (isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.Start"));
  }
  FTPSConnection connection=null;
  try {
    String realServername=environmentSubstitute(serverName);
    String realUsername=environmentSubstitute(userName);
    String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
    int realPort=Const.toInt(environmentSubstitute(this.port),0);
    connection=new FTPSConnection(getConnectionType(),realServername,realPort,realUsername,realPassword);
    this.buildFTPSConnection(connection);
    if (movefiles && !Utils.isEmpty(movetodirectory)) {
      realMoveToFolder=normalizePath(environmentSubstitute(movetodirectory));
      boolean folderExist=connection.isDirectoryExists(realMoveToFolder);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.CheckMoveToFolder",realMoveToFolder));
      }
      if (!folderExist) {
        if (createmovefolder) {
          connection.createDirectory(realMoveToFolder);
          if (isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderCreated",realMoveToFolder));
          }
        }
 else {
          logError(BaseMessages.getString(PKG,"JobEntryFTPS.MoveToFolderNotExist"));
          exitjobentry=true;
          NrErrors++;
        }
      }
    }
    if (!exitjobentry) {
      Pattern pattern=null;
      if (!Utils.isEmpty(wildcard)) {
        String realWildcard=environmentSubstitute(wildcard);
        pattern=Pattern.compile(realWildcard);
      }
      if (!getSuccessCondition().equals(SUCCESS_IF_NO_ERRORS)) {
        limitFiles=Const.toInt(environmentSubstitute(getLimit()),10);
      }
      downloadFiles(connection,connection.getWorkingDirectory(),pattern,result);
    }
  }
 catch (  Exception e) {
    if (!successConditionBroken && !exitjobentry) {
      updateErrors();
    }
    logError(BaseMessages.getString(PKG,"JobEntryFTPS.ErrorGetting",e.getMessage()));
  }
 finally {
    if (connection != null) {
      try {
        connection.disconnect();
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"JobEntryFTPS.ErrorQuitting",e.getMessage()));
      }
    }
  }
  result.setNrErrors(NrErrors);
  result.setNrFilesRetrieved(NrfilesRetrieved);
  if (getSuccessStatus()) {
    result.setResult(true);
  }
  if (exitjobentry) {
    result.setResult(false);
  }
  displayResults();
  return result;
}
