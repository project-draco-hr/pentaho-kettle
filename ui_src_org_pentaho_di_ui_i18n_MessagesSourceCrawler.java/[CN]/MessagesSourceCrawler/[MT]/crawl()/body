{
  for (  final String sourceDirectory : sourceDirectories) {
    FileObject folder=KettleVFS.getFileObject(sourceDirectory);
    FileObject[] javaFiles=folder.findFiles(new FileSelector(){
      @Override public boolean traverseDescendents(      FileSelectInfo info) throws Exception {
        return true;
      }
      @Override public boolean includeFile(      FileSelectInfo info) throws Exception {
        return info.getFile().getName().getExtension().equals("java");
      }
    }
);
    for (    FileObject javaFile : javaFiles) {
      boolean skip=false;
      for (      String filename : filesToAvoid) {
        if (javaFile.getName().getBaseName().equals(filename)) {
          skip=true;
        }
      }
      if (skip) {
        continue;
      }
      lookForOccurrencesInFile(sourceDirectory,javaFile);
    }
  }
  for (  SourceCrawlerXMLFolder xmlFolder : xmlFolders) {
    String[] xmlDirs={xmlFolder.getFolder()};
    String[] xmlMasks={xmlFolder.getWildcard()};
    String[] xmlReq={"N"};
    boolean[] xmlSubdirs={true};
    FileInputList xulFileInputList=FileInputList.createFileList(new Variables(),xmlDirs,xmlMasks,xmlReq,xmlSubdirs);
    for (    FileObject fileObject : xulFileInputList.getFiles()) {
      try {
        Document doc=XMLHandler.loadXMLFile(fileObject);
        for (        SourceCrawlerXMLElement xmlElement : xmlFolder.getElements()) {
          addLabelOccurrences(xmlFolder.getDefaultSourceFolder(),fileObject,doc.getElementsByTagName(xmlElement.getSearchElement()),xmlFolder.getKeyPrefix(),xmlElement.getKeyTag(),xmlElement.getKeyAttribute(),xmlFolder.getDefaultPackage(),xmlFolder.getPackageExceptions());
        }
      }
 catch (      KettleXMLException e) {
        log.logError("Unable to open XUL / XML document: " + fileObject);
      }
    }
  }
}
