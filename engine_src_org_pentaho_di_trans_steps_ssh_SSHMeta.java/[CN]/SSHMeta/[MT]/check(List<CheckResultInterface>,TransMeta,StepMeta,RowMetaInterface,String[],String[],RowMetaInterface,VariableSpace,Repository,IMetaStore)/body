{
  CheckResult cr;
  String error_message="";
  if (Utils.isEmpty(getServerName())) {
    error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.TargetHostMissing");
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
    remarks.add(cr);
  }
 else {
    error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.TargetHostOK");
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,error_message,stepMeta);
    remarks.add(cr);
  }
  if (isusePrivateKey()) {
    String keyfilename=transMeta.environmentSubstitute(getKeyFileName());
    if (Utils.isEmpty(keyfilename)) {
      error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.PrivateKeyFileNameMissing");
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
 else {
      error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.PrivateKeyFileNameOK");
      cr=new CheckResult(CheckResult.TYPE_RESULT_OK,error_message,stepMeta);
      remarks.add(cr);
      boolean keyFileExists=false;
      try {
        keyFileExists=KettleVFS.fileExists(keyfilename);
      }
 catch (      Exception e) {
      }
      if (!keyFileExists) {
        error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.PrivateKeyFileNotExist",keyfilename);
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
 else {
        error_message=BaseMessages.getString(PKG,"SSHMeta.CheckResult.PrivateKeyFileExists",keyfilename);
        cr=new CheckResult(CheckResult.TYPE_RESULT_OK,error_message,stepMeta);
        remarks.add(cr);
      }
    }
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,BaseMessages.getString(PKG,"SSHMeta.CheckResult.ReceivingInfoFromOtherSteps"),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"SSHMeta.CheckResult.NoInpuReceived"),stepMeta);
    remarks.add(cr);
  }
}
