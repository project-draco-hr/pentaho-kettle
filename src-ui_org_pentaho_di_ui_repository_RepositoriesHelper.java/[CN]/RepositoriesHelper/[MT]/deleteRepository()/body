{
  final RepositoryMeta repositoryMeta=input.searchRepository(model.getSelectedRepository().getName());
  if (repositoryMeta != null) {
    confirmBox.setTitle(messages.getString("RepositoryLogin.ConfirmDeleteRepositoryDialog.Title"));
    confirmBox.setMessage(messages.getString("RepositoryLogin.ConfirmDeleteRepositoryDialog.Message"));
    confirmBox.setAcceptLabel(messages.getString("Dialog.Ok"));
    confirmBox.setCancelLabel(messages.getString("Dialog.Cancel"));
    confirmBox.addDialogCallback(new XulDialogCallback<Object>(){
      public void onClose(      XulComponent sender,      Status returnCode,      Object retVal){
        if (returnCode == Status.ACCEPT) {
          int idx=input.indexOfRepository(repositoryMeta);
          input.removeRepository(idx);
          fillRepositories();
          writeData();
        }
      }
      public void onError(      XulComponent sender,      Throwable t){
        messageBox.setTitle(messages.getString("Dialog.Error"));
        messageBox.setAcceptLabel(messages.getString("Dialog.Ok"));
        messageBox.setMessage(BaseMessages.getString(RepositoryExplorer.class,"RepositoryLogin.UnableToDeleteRepository",t.getLocalizedMessage()));
        messageBox.open();
      }
    }
);
    confirmBox.open();
  }
}
