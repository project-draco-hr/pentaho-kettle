{
  try {
    XulConfirmBox confirmBox=(XulConfirmBox)document.createElement("confirmbox");
    final RepositoryMeta repositoryMeta=input.searchRepository(model.getSelectedRepository().getName());
    if (repositoryMeta != null) {
      confirmBox.setTitle(BaseMessages.getString(PKG,"RepositoryLogin.ConfirmDeleteRepositoryDialog.Title"));
      confirmBox.setMessage(BaseMessages.getString(PKG,"RepositoryLogin.ConfirmDeleteRepositoryDialog.Message"));
      confirmBox.setAcceptLabel(BaseMessages.getString(PKG,"Dialog.Ok"));
      confirmBox.setCancelLabel(BaseMessages.getString(PKG,"Dialog.Cancel"));
      confirmBox.addDialogCallback(new XulDialogCallback<Object>(){
        public void onClose(        XulComponent sender,        Status returnCode,        Object retVal){
          if (returnCode == Status.ACCEPT) {
            int idx=input.indexOfRepository(repositoryMeta);
            input.removeRepository(idx);
            fillRepositories();
            writeData();
          }
        }
        public void onError(        XulComponent sender,        Throwable t){
          log.logDetailed(BaseMessages.getString(PKG,"RepositoryLogin.UnableToDeleteRepository",t.getLocalizedMessage()));
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Dialog.Error"),BaseMessages.getString(PKG,"RepositoryLogin.UnableToDeleteRepository",t.getLocalizedMessage()),t);
        }
      }
);
      confirmBox.open();
    }
  }
 catch (  Exception e) {
    log.logDetailed(BaseMessages.getString(PKG,"RepositoryLogin.UnableToDeleteRepository",e.getLocalizedMessage()));
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Dialog.Error"),BaseMessages.getString(PKG,"RepositoryLogin.UnableToDeleteRepository",e.getLocalizedMessage()),e);
  }
}
