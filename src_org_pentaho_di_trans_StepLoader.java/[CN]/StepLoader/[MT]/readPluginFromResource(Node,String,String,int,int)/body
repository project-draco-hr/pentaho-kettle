{
  try {
    String id=XMLHandler.getTagAttribute(plugin,"id");
    String description=XMLHandler.getTagAttribute(plugin,"description");
    String iconfile=XMLHandler.getTagAttribute(plugin,"iconfile");
    String tooltip=XMLHandler.getTagAttribute(plugin,"tooltip");
    String category=XMLHandler.getTagAttribute(plugin,"category");
    String classname=XMLHandler.getTagAttribute(plugin,"classname");
    String errorHelpfile=XMLHandler.getTagAttribute(plugin,"errorhelpfile");
    Node libsnode=XMLHandler.getSubNode(plugin,"libraries");
    int nrlibs=XMLHandler.countNodes(libsnode,"library");
    String jarfiles[]=new String[nrlibs];
    if (path != null) {
      for (int j=0; j < nrlibs; j++) {
        Node libnode=XMLHandler.getSubNodeByNr(libsnode,"library",j);
        String jarfile=XMLHandler.getTagAttribute(libnode,"name");
        jarfiles[j]=path + Const.FILE_SEPARATOR + jarfile;
      }
    }
    Node locCatsNode=XMLHandler.getSubNode(plugin,"localized_category");
    int nrLocCats=XMLHandler.countNodes(locCatsNode,"category");
    Map<String,String> localizedCategories=new Hashtable<String,String>();
    for (int j=0; j < nrLocCats; j++) {
      Node locCatNode=XMLHandler.getSubNodeByNr(locCatsNode,"category",j);
      String locale=XMLHandler.getTagAttribute(locCatNode,"locale");
      String locCat=XMLHandler.getNodeValue(locCatNode);
      if (!Const.isEmpty(locale) && !Const.isEmpty(locCat)) {
        localizedCategories.put(locale.toLowerCase(),locCat);
      }
    }
    Node locDescsNode=XMLHandler.getSubNode(plugin,"localized_description");
    int nrLocDescs=XMLHandler.countNodes(locDescsNode,"description");
    Map<String,String> localizedDescriptions=new Hashtable<String,String>();
    for (int j=0; j < nrLocDescs; j++) {
      Node locDescNode=XMLHandler.getSubNodeByNr(locDescsNode,"description",j);
      String locale=XMLHandler.getTagAttribute(locDescNode,"locale");
      String locDesc=XMLHandler.getNodeValue(locDescNode);
      if (!Const.isEmpty(locale) && !Const.isEmpty(locDesc)) {
        localizedDescriptions.put(locale.toLowerCase(),locDesc);
      }
    }
    Node locTipsNode=XMLHandler.getSubNode(plugin,"localized_tooltip");
    int nrLocTips=XMLHandler.countNodes(locTipsNode,"tooltip");
    Map<String,String> localizedTooltips=new Hashtable<String,String>();
    for (int j=0; j < nrLocTips; j++) {
      Node locTipNode=XMLHandler.getSubNodeByNr(locTipsNode,"tooltip",j);
      String locale=XMLHandler.getTagAttribute(locTipNode,"locale");
      String locTip=XMLHandler.getNodeValue(locTipNode);
      if (!Const.isEmpty(locale) && !Const.isEmpty(locTip)) {
        localizedTooltips.put(locale.toLowerCase(),locTip);
      }
    }
    String iconFilename=(path == null) ? iconfile : path + Const.FILE_SEPARATOR + iconfile;
    String errorHelpFileFull=errorHelpfile;
    if (!Const.isEmpty(errorHelpfile))     errorHelpFileFull=(path == null) ? errorHelpfile : path + Const.FILE_SEPARATOR + errorHelpfile;
    if (pluginType == PLUGIN_TYPE_STEP) {
      StepPlugin sp=new StepPlugin(type,new String[]{id},description,tooltip,dir,jarfiles,iconFilename,classname,category,errorHelpFileFull);
      sp.setLocalizedCategories(localizedCategories);
      sp.setLocalizedDescriptions(localizedDescriptions);
      sp.setLocalizedTooltips(localizedTooltips);
      if (findStepPluginWithID(id) == null) {
        pluginList.add(sp);
      }
 else {
        int idx=pluginList.indexOf(sp);
        pluginList.set(idx,sp);
      }
    }
 else     if (pluginType == PLUGIN_TYPE_PARTIONER) {
      try {
        Class<?> pClass=Class.forName(classname);
        if (pClass != null) {
          Partitioner partitioner=(Partitioner)pClass.newInstance();
          partitioner.setId(id);
          partitioner.setDescription(description);
          partitionerMap.put(id,partitioner);
        }
      }
 catch (      Throwable e) {
        LogWriter.getInstance().logError("StepLoader",Messages.getString("StepLoader.RuntimeError.UnableToReadPluginXML.TRANS0001") + e.toString());
        LogWriter.getInstance().logError("StepLoader",Const.getStackTracker(e));
      }
    }
  }
 catch (  Throwable e) {
    LogWriter.getInstance().logError("StepLoader",Messages.getString("StepLoader.RuntimeError.UnableToReadPluginXML.TRANS0001") + e.toString());
    LogWriter.getInstance().logError("StepLoader",Const.getStackTracker(e));
    return false;
  }
  return true;
}
