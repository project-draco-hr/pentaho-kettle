{
  StringBuilder code=new StringBuilder(5000);
  for (  TypeFieldDefinition field : fields) {
    code.append("  private " + field.getTypeDescription() + " "+ field.getMemberName()+ ";").append(Const.CR);
  }
  code.append(Const.CR);
  code.append("  public String getXML() throws KettleException {").append(Const.CR);
  code.append("    StringBuilder xml = new StringBuilder(100);").append(Const.CR);
  for (  TypeFieldDefinition field : fields) {
    code.append("    xml.append(XMLHandler.addTagValue(\"" + field.getFieldName() + "\", "+ field.getMemberName()+ "));").append(Const.CR);
  }
  code.append("    return xml.toString();").append(Const.CR);
  code.append("  }").append(Const.CR);
  code.append(Const.CR);
  code.append("  public void loadXML(Node stepnode, List<DatabaseMeta> databases, IMetaStore metaStore) throws KettleXMLException {").append(Const.CR);
  for (  TypeFieldDefinition field : fields) {
switch (field.getType()) {
case ValueMeta.TYPE_STRING:
      code.append("    " + field.getMemberName() + " = XMLHandler.getTagValue(stepnode, \""+ field.getFieldName()+ "\");").append(Const.CR);
    break;
case ValueMeta.TYPE_BOOLEAN:
  code.append("    " + field.getMemberName() + " = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \""+ field.getFieldName()+ "\"));").append(Const.CR);
break;
case ValueMeta.TYPE_INTEGER:
code.append("    " + field.getMemberName() + " = Const.toInt(XMLHandler.getTagValue(stepnode, \""+ field.getFieldName()+ "\"), -1);").append(Const.CR);
break;
default :
break;
}
}
code.append("  }").append(Const.CR);
code.append(Const.CR);
code.append("  public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step) throws KettleException {").append(Const.CR);
for (TypeFieldDefinition field : fields) {
code.append("    rep.saveStepAttribute(id_transformation, id_step, \"" + field.getFieldName() + "\", "+ field.getMemberName()+ ");").append(Const.CR);
}
code.append("  }").append(Const.CR);
code.append(Const.CR);
code.append("  public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases) throws KettleException {").append(Const.CR);
for (TypeFieldDefinition field : fields) {
switch (field.getType()) {
case ValueMeta.TYPE_STRING:
code.append("    " + field.getMemberName() + " = rep.getStepAttributeString(id_step, \""+ field.getFieldName()+ "\");").append(Const.CR);
break;
case ValueMeta.TYPE_BOOLEAN:
code.append("    " + field.getMemberName() + " = rep.getStepAttributeBoolean(id_step, \""+ field.getFieldName()+ "\");").append(Const.CR);
break;
case ValueMeta.TYPE_INTEGER:
code.append("    " + field.getMemberName() + " = (int) rep.getStepAttributeInteger(id_step, \""+ field.getFieldName()+ "\");").append(Const.CR);
break;
default :
break;
}
}
code.append("  }").append(Const.CR);
code.append(Const.CR);
for (TypeFieldDefinition field : fields) {
String getPrefix;
String setPrefix;
switch (field.getType()) {
case ValueMeta.TYPE_BOOLEAN:
getPrefix="is";
setPrefix="set";
break;
default :
getPrefix="get";
setPrefix="set";
break;
}
code.append("  public " + field.getTypeDescription() + " "+ getPrefix+ field.getFieldName()+ "() {").append(Const.CR);
code.append("    return " + field.getMemberName() + ";").append(Const.CR);
code.append("  }").append(Const.CR);
code.append(Const.CR);
code.append("  public void " + setPrefix + field.getFieldName()+ "("+ field.getTypeDescription()+ " "+ field.getMemberName()+ ") {").append(Const.CR);
code.append("    this." + field.getMemberName() + " = "+ field.getMemberName()+ ";").append(Const.CR);
code.append("  }").append(Const.CR);
code.append(Const.CR);
}
for (TypeFieldDefinition field : fields) {
code.append("  " + field.getMemberName() + "Item = new TableItem(wInputFields.table, SWT.NONE);").append(Const.CR);
code.append("  " + field.getMemberName() + "Item.setText(1, BaseMessages.getString(PKG, \"PIQAddressDialog."+ field.getFieldName()+ ".Description\"));").append(Const.CR);
code.append("  " + field.getMemberName() + "Item.setText(2, Const.NVL(input.get"+ field.getFieldName()+ "(), \"\"));").append(Const.CR);
}
for (TypeFieldDefinition field : fields) {
code.append("PIQAddressDialog." + field.getFieldName() + ".Description = "+ field.getFieldName()).append(" DESCRIPTION TODO").append(Const.CR);
}
return code.toString();
}
