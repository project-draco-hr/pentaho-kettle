{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"schema",schemaName);
    rep.saveStepAttribute(id_transformation,id_step,"table",tablename);
    rep.saveDatabaseMetaStepAttribute(id_transformation,id_step,"id_connection",databaseMeta);
    rep.saveStepAttribute(id_transformation,id_step,"commit",commitSize);
    rep.saveStepAttribute(id_transformation,id_step,"cache_size",cacheSize);
    rep.saveStepAttribute(id_transformation,id_step,"replace",replaceFields);
    rep.saveStepAttribute(id_transformation,id_step,"crc",useHash);
    rep.saveStepAttribute(id_transformation,id_step,"crcfield",hashField);
    for (int i=0; i < keyField.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"lookup_key_name",keyField[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"lookup_key_field",keyLookup[i]);
    }
    rep.saveStepAttribute(id_transformation,id_step,"return_name",technicalKeyField);
    rep.saveStepAttribute(id_transformation,id_step,"sequence",sequenceFrom);
    rep.saveStepAttribute(id_transformation,id_step,"creation_method",techKeyCreation);
    rep.saveStepAttribute(id_transformation,id_step,"use_autoinc",useAutoinc);
    rep.saveStepAttribute(id_transformation,id_step,"last_update_field",lastUpdateField);
    if (databaseMeta != null) {
      rep.insertStepDatabase(id_transformation,id_step,databaseMeta.getObjectId());
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"CombinationLookupMeta.Exception.UnableToSaveStepInfo") + id_step,e);
  }
}
