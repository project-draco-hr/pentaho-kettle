{
  KettleEnvironment.init();
  KettleLogStore.init(config.getMaxLogLines(),config.getMaxLogTimeoutMinutes());
  this.log=new LogChannel("Carte");
  transformationMap=new TransformationMap();
  transformationMap.setSlaveServerConfig(config);
  jobMap=new JobMap();
  jobMap.setSlaveServerConfig(config);
  detections=new ArrayList<SlaveServerDetection>();
  socketRepository=new SocketRepository(log);
  installPurgeTimer(config,log,transformationMap,jobMap);
  SlaveServer slaveServer=config.getSlaveServer();
  if (slaveServer != null) {
    int port=WebServer.PORT;
    if (!Utils.isEmpty(slaveServer.getPort())) {
      try {
        port=Integer.parseInt(slaveServer.getPort());
      }
 catch (      Exception e) {
        log.logError(BaseMessages.getString(PKG,"Carte.Error.CanNotPartPort",slaveServer.getHostname(),"" + port),e);
      }
    }
    if (config.isReportingToMasters()) {
      String hostname=slaveServer.getHostname();
      final SlaveServer client=new SlaveServer("Dynamic slave [" + hostname + ":"+ port+ "]",hostname,"" + port,slaveServer.getUsername(),slaveServer.getPassword());
      for (      final SlaveServer master : config.getMasters()) {
        try {
          SlaveServerDetection slaveServerDetection=new SlaveServerDetection(client);
          master.sendXML(slaveServerDetection.getXML(),RegisterSlaveServlet.CONTEXT_PATH + "/");
          log.logBasic("Registered this slave server to master slave server [" + master.toString() + "] on address ["+ master.getServerAndPort()+ "]");
        }
 catch (        Exception e) {
          log.logError("Unable to register to master slave server [" + master.toString() + "] on address ["+ master.getServerAndPort()+ "]");
        }
      }
    }
  }
}
