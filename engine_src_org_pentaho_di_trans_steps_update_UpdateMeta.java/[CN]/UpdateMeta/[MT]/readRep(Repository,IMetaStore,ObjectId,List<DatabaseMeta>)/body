{
  this.databases=databases;
  try {
    databaseMeta=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    skipLookup=rep.getStepAttributeBoolean(id_step,"skip_lookup");
    commitSize=rep.getStepAttributeString(id_step,"commit");
    if (commitSize == null) {
      long comSz=-1;
      try {
        comSz=rep.getStepAttributeInteger(id_step,"commit");
      }
 catch (      Exception ex) {
        commitSize="100";
      }
      if (comSz >= 0) {
        commitSize=Long.toString(comSz);
      }
    }
    useBatchUpdate=rep.getStepAttributeBoolean(id_step,"use_batch");
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    errorIgnored=rep.getStepAttributeBoolean(id_step,"error_ignored");
    ignoreFlagField=rep.getStepAttributeString(id_step,"ignore_flag_field");
    int nrkeys=rep.countNrStepAttributes(id_step,"key_name");
    int nrvalues=rep.countNrStepAttributes(id_step,"value_name");
    allocate(nrkeys,nrvalues);
    for (int i=0; i < nrkeys; i++) {
      keyStream[i]=rep.getStepAttributeString(id_step,i,"key_name");
      keyLookup[i]=rep.getStepAttributeString(id_step,i,"key_field");
      keyCondition[i]=rep.getStepAttributeString(id_step,i,"key_condition");
      keyStream2[i]=rep.getStepAttributeString(id_step,i,"key_name2");
    }
    for (int i=0; i < nrvalues; i++) {
      updateLookup[i]=rep.getStepAttributeString(id_step,i,"value_name");
      updateStream[i]=rep.getStepAttributeString(id_step,i,"value_rename");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"UpdateMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
