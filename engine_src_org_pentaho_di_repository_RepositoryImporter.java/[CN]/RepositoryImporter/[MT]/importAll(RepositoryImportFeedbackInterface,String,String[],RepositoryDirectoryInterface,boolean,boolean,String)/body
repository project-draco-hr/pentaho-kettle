{
  this.baseDirectory=baseDirectory;
  this.overwrite=overwrite;
  this.continueOnError=continueOnError;
  this.versionComment=versionComment;
  referencingObjects=new ArrayList<RepositoryObject>();
  feedback.setLabel(BaseMessages.getString(PKG,"RepositoryImporter.ImportXML.Label"));
  try {
    loadSharedObjects();
    RepositoryImportLocation.setRepositoryImportLocation(baseDirectory);
    for (int ii=0; ii < filenames.length; ++ii) {
      final String filename=(!Const.isEmpty(fileDirectory)) ? fileDirectory + Const.FILE_SEPARATOR + filenames[ii] : filenames[ii];
      if (log.isBasic()) {
        log.logBasic("Import objects from XML file [" + filename + "]");
      }
      feedback.addLog(BaseMessages.getString(PKG,"RepositoryImporter.WhichFile.Log",filename));
      feedback.setLabel(BaseMessages.getString(PKG,"RepositoryImporter.WhichDir.Label"));
      try {
        RepositoryExportSaxParser parser=new RepositoryExportSaxParser(filename,feedback);
        parser.parse(this);
      }
 catch (      FileNotFoundException fnfe) {
        addException(fnfe);
        feedback.showError(BaseMessages.getString(PKG,"PurRepositoryImporter.ErrorGeneral.Title"),BaseMessages.getString(PKG,"PurRepositoryImporter.FileNotFound.Message",filename),fnfe);
      }
catch (      SAXParseException spe) {
        addException(spe);
        feedback.showError(BaseMessages.getString(PKG,"PurRepositoryImporter.ErrorGeneral.Title"),BaseMessages.getString(PKG,"PurRepositoryImporter.ParseError.Message",filename),spe);
      }
catch (      Exception e) {
        feedback.showError(BaseMessages.getString(PKG,"RepositoryImporter.ErrorGeneral.Title"),BaseMessages.getString(PKG,"RepositoryImporter.ErrorGeneral.Message"),e);
      }
    }
    for (    RepositoryObject ro : referencingObjects) {
      if (ro.getObjectType() == RepositoryObjectType.TRANSFORMATION) {
        TransMeta transMeta=rep.loadTransformation(ro.getObjectId(),null);
        try {
          transMeta.lookupRepositoryReferences(rep);
        }
 catch (        KettleException e) {
          feedback.addLog(BaseMessages.getString(PKG,"RepositoryImporter.LookupRepoRefsError.Log",transMeta.getName()));
        }
        rep.save(transMeta,"import object reference specification",null);
      }
      if (ro.getObjectType() == RepositoryObjectType.JOB) {
        JobMeta jobMeta=rep.loadJob(ro.getObjectId(),null);
        try {
          jobMeta.lookupRepositoryReferences(rep);
        }
 catch (        KettleException e) {
          feedback.addLog(BaseMessages.getString(PKG,"RepositoryImporter.LookupRepoRefsError.Log",jobMeta.getName()));
        }
        rep.save(jobMeta,"import object reference specification",null);
      }
    }
    feedback.addLog(BaseMessages.getString(PKG,"RepositoryImporter.ImportFinished.Log"));
  }
 catch (  KettleException e) {
    feedback.showError(BaseMessages.getString(PKG,"RepositoryImporter.ErrorGeneral.Title"),BaseMessages.getString(PKG,"RepositoryImporter.ErrorGeneral.Message"),e);
  }
 finally {
    RepositoryImportLocation.setRepositoryImportLocation(null);
  }
}
