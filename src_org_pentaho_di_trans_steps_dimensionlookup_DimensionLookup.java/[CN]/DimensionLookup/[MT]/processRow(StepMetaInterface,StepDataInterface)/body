{
  meta=(DimensionLookupMeta)smi;
  data=(DimensionLookupData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.schemaTable=meta.getDatabaseMeta().getQuotedSchemaTableCombination(data.realSchemaName,data.realTableName);
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.startDateFieldIndex=-1;
    if (data.startDateChoice == DimensionLookupMeta.START_DATE_ALTERNATIVE_COLUMN_VALUE) {
      data.startDateFieldIndex=getInputRowMeta().indexOfValue(meta.getStartDateFieldName());
      if (data.startDateFieldIndex < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DimensionLookup.Exception.StartDateValueColumnNotFound",meta.getStartDateFieldName()));
      }
    }
    data.keynrs=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=getInputRowMeta().indexOfValue(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DimensionLookup.Exception.KeyFieldNotFound",meta.getKeyStream()[i]));
      }
    }
    data.fieldnrs=new int[meta.getFieldStream().length];
    for (int i=0; meta.getFieldStream() != null && i < meta.getFieldStream().length; i++) {
      if (!DimensionLookupMeta.isUpdateTypeWithoutArgument(meta.isUpdate(),meta.getFieldUpdate()[i])) {
        data.fieldnrs[i]=data.outputRowMeta.indexOfValue(meta.getFieldStream()[i]);
        if (data.fieldnrs[i] < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"DimensionLookup.Exception.KeyFieldNotFound",meta.getFieldStream()[i]));
        }
      }
 else {
        data.fieldnrs[i]=-1;
      }
    }
    if (!meta.isUpdate() && meta.isPreloadingCache()) {
      preloadCache();
    }
 else {
      if (data.cacheKeyRowMeta == null) {
        data.cacheKeyRowMeta=new RowMeta();
        for (int i=0; i < data.keynrs.length; i++) {
          ValueMetaInterface key=getInputRowMeta().getValueMeta(data.keynrs[i]);
          data.cacheKeyRowMeta.addValueMeta(key.clone());
        }
        data.cache=new ByteArrayHashMap(meta.getCacheSize() > 0 ? meta.getCacheSize() : 5000,data.cacheKeyRowMeta);
      }
    }
    if (meta.getDateField() != null && meta.getDateField().length() > 0) {
      data.datefieldnr=getInputRowMeta().indexOfValue(meta.getDateField());
    }
 else {
      data.datefieldnr=-1;
    }
    determineTechKeyCreation();
    data.notFoundTk=new Long((long)meta.getDatabaseMeta().getNotFoundTK(isAutoIncrement()));
    if (meta.getDateField() != null && data.datefieldnr >= 0) {
      data.valueDateNow=getInputRowMeta().getDate(r,data.datefieldnr);
    }
 else {
      data.valueDateNow=new Date(System.currentTimeMillis());
    }
    if (getCopy() == 0)     checkDimZero();
    setDimLookup(data.outputRowMeta);
  }
  try {
    Object[] outputRow=lookupValues(getInputRowMeta(),r);
    putRow(data.outputRowMeta,outputRow);
    if (checkFeedback(getLinesRead())) {
      if (log.isBasic())       logBasic(BaseMessages.getString(PKG,"DimensionLookup.Log.LineNumber") + getLinesRead());
    }
  }
 catch (  KettleException e) {
    logError(BaseMessages.getString(PKG,"DimensionLookup.Log.StepCanNotContinueForErrors",e.getMessage()));
    logError(Const.getStackTracker(e));
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  return true;
}
