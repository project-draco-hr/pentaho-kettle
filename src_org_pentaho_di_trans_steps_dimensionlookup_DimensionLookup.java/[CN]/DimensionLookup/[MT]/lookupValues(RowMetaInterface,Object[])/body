{
  Object[] outputRow=new Object[data.outputRowMeta.size()];
  RowMetaInterface lookupRowMeta;
  Object[] lookupRow;
  Object[] returnRow=null;
  Long technicalKey;
  Long valueVersion;
  Date valueDate=null;
  Date valueDateFrom=null;
  Date valueDateTo=null;
  if (data.datefieldnr >= 0) {
    valueDate=rowMeta.getDate(row,data.datefieldnr);
  }
 else {
    valueDate=data.valueDateNow;
  }
  if (!meta.isUpdate() && meta.isPreloadingCache()) {
    RowMetaInterface preloadRowMeta=data.preloadCache.getRowMeta();
    data.returnRowMeta=data.preloadCache.getRowMeta();
    lookupRowMeta=preloadRowMeta;
    lookupRow=new Object[preloadRowMeta.size()];
    for (int i=0; i < data.preloadIndexes.size(); i++) {
      int from=data.preloadIndexes.get(i);
      int to=data.preloadCache.getKeyIndexes()[i];
      ValueMetaInterface fromValueMeta=rowMeta.getValueMeta(from);
      ValueMetaInterface toValueMeta=data.preloadCache.getRowMeta().getValueMeta(to);
      Object fromData=row[from];
      Object toData=toValueMeta.convertData(fromValueMeta,fromData);
      lookupRow[to]=toData;
    }
    lookupRow[data.preloadFromDateIndex]=valueDate;
    int index=data.preloadCache.lookupRow(lookupRow);
    if (index >= 0) {
      returnRow=data.preloadCache.getRow(index);
    }
 else {
      returnRow=null;
    }
  }
 else {
    lookupRow=new Object[data.lookupRowMeta.size()];
    lookupRowMeta=data.lookupRowMeta;
    for (int i=0; i < meta.getKeyStream().length; i++) {
      try {
        lookupRow[i]=row[data.keynrs[i]];
      }
 catch (      Exception e) {
        throw new KettleStepException(BaseMessages.getString(PKG,"DimensionLookup.Exception.ErrorDetectedInGettingKey",i + "",data.keynrs[i] + "/" + rowMeta.size(),rowMeta.getString(row)));
      }
    }
    lookupRow[meta.getKeyStream().length]=valueDate;
    lookupRow[meta.getKeyStream().length + 1]=valueDate;
    if (log.isDebug())     logDebug(BaseMessages.getString(PKG,"DimensionLookup.Log.LookupRow") + data.lookupRowMeta.getString(lookupRow));
    if (meta.getCacheSize() >= 0) {
      returnRow=getFromCache(lookupRow,valueDate);
    }
    if (returnRow == null) {
      data.db.setValues(data.lookupRowMeta,lookupRow,data.prepStatementLookup);
      returnRow=data.db.getLookup(data.prepStatementLookup);
      data.returnRowMeta=data.db.getReturnRowMeta();
      incrementLinesInput();
      if (returnRow != null && meta.getCacheSize() >= 0) {
        addToCache(lookupRow,returnRow);
      }
    }
  }
  if (!meta.isUpdate()) {
    if (returnRow == null) {
      returnRow=new Object[data.returnRowMeta.size()];
      returnRow[0]=data.notFoundTk;
      if (meta.getCacheSize() >= 0) {
        returnRow[returnRow.length - 2]=data.min_date;
        returnRow[returnRow.length - 1]=data.max_date;
      }
    }
 else {
    }
  }
 else {
    if (returnRow == null) {
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.NoDimensionEntryFound") + lookupRowMeta.getString(lookupRow) + ")");
      valueDateFrom=data.min_date;
      valueDateTo=data.max_date;
      valueVersion=new Long(1L);
      technicalKey=null;
switch (getTechKeyCreation()) {
case CREATION_METHOD_TABLEMAX:
        technicalKey=data.db.getNextValue(getTransMeta().getCounters(),data.realSchemaName,data.realTableName,meta.getKeyField());
      break;
case CREATION_METHOD_AUTOINC:
    technicalKey=null;
  break;
case CREATION_METHOD_SEQUENCE:
technicalKey=data.db.getNextSequenceValue(data.realSchemaName,meta.getSequenceName(),meta.getKeyField());
if (technicalKey != null && log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.FoundNextSequence") + technicalKey.toString());
break;
}
technicalKey=dimInsert(data.inputRowMeta,row,technicalKey,true,valueVersion,valueDateFrom,valueDateTo);
incrementLinesOutput();
returnRow=new Object[data.returnRowMeta.size()];
int returnIndex=0;
returnRow[returnIndex]=technicalKey;
returnIndex++;
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.AddedDimensionEntry") + data.returnRowMeta.getString(returnRow));
}
 else {
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.DimensionEntryFound") + data.returnRowMeta.getString(returnRow));
technicalKey=data.returnRowMeta.getInteger(returnRow,0);
valueVersion=data.returnRowMeta.getInteger(returnRow,1);
valueDateFrom=meta.getMinDate();
valueDateTo=meta.getMaxDate();
int cmp;
boolean insert=false;
boolean identical=true;
boolean punch=false;
for (int i=0; i < meta.getFieldStream().length; i++) {
if (data.fieldnrs[i] >= 0) {
ValueMetaInterface v1=data.outputRowMeta.getValueMeta(data.fieldnrs[i]);
Object valueData1=row[data.fieldnrs[i]];
ValueMetaInterface v2=data.returnRowMeta.getValueMeta(i + 2);
Object valueData2=returnRow[i + 2];
try {
cmp=v1.compare(valueData1,v2,valueData2);
}
 catch (ClassCastException e) {
throw e;
}
if (cmp != 0) identical=false;
if (cmp != 0 && meta.getFieldUpdate()[i] == DimensionLookupMeta.TYPE_UPDATE_DIM_INSERT) {
insert=true;
}
if (cmp != 0 && meta.getFieldUpdate()[i] == DimensionLookupMeta.TYPE_UPDATE_DIM_PUNCHTHROUGH) {
punch=true;
}
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.ComparingValues","" + v1,"" + v2,String.valueOf(cmp),String.valueOf(identical),String.valueOf(insert),String.valueOf(punch)));
}
}
if (!insert) {
if (!identical) {
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.UpdateRowWithValues") + data.inputRowMeta.getString(row));
dimUpdate(rowMeta,row,technicalKey);
incrementLinesUpdated();
if (meta.getCacheSize() >= 0) {
Object[] values=getCacheValues(rowMeta,row,technicalKey,valueVersion,valueDateFrom,valueDateTo);
addToCache(lookupRow,values);
}
}
 else {
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.SkipLine"));
incrementLinesSkipped();
}
}
 else {
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.InsertNewVersion") + technicalKey.toString());
Long valueNewVersion=valueVersion + 1;
valueDateFrom=valueDate;
valueDateTo=data.max_date;
if (meta.getDatabaseMeta().supportsAutoinc() && isAutoIncrement()) {
technicalKey=new Long(0L);
}
 else if (meta.getDatabaseMeta().supportsSequences() && meta.getSequenceName() != null && meta.getSequenceName().length() > 0) {
technicalKey=data.db.getNextSequenceValue(data.realSchemaName,meta.getSequenceName(),meta.getKeyField());
if (technicalKey != null && log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.FoundNextSequence2") + technicalKey.toString());
}
 else {
technicalKey=data.db.getNextValue(getTransMeta().getCounters(),data.realSchemaName,data.realTableName,meta.getKeyField());
}
technicalKey=dimInsert(rowMeta,row,technicalKey,false,valueNewVersion,valueDateFrom,valueDateTo);
incrementLinesOutput();
if (meta.getCacheSize() >= 0) {
Object[] values=getCacheValues(rowMeta,row,technicalKey,valueNewVersion,valueDateFrom,valueDateTo);
addToCache(lookupRow,values);
}
}
if (punch) {
dimPunchThrough(rowMeta,row);
incrementLinesUpdated();
}
returnRow=new Object[data.returnRowMeta.size()];
returnRow[0]=technicalKey;
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.TechnicalKey") + technicalKey);
}
}
if (log.isRowLevel()) logRowlevel(BaseMessages.getString(PKG,"DimensionLookup.Log.AddValuesToRow") + data.returnRowMeta.getString(returnRow));
for (int i=0; i < rowMeta.size(); i++) outputRow[i]=row[i];
int outputIndex=rowMeta.size();
int inputIndex=0;
outputRow[outputIndex++]=data.returnRowMeta.getInteger(returnRow,inputIndex++);
inputIndex++;
while (inputIndex < returnRow.length && outputIndex < outputRow.length) {
outputRow[outputIndex]=returnRow[inputIndex];
outputIndex++;
inputIndex++;
}
return outputRow;
}
