{
  try {
    if (Const.isEmpty(transMeta.getName()))     throw new KettleException("The transformation needs a name to uniquely identify it by on the remote server.");
    TransSplitter transSplitter=new TransSplitter(transMeta);
    transSplitter.splitOriginalTransformation();
    TransMeta master=transSplitter.getMaster();
    SlaveServer masterServer=null;
    List masterSteps=master.getTransHopSteps(false);
    if (masterSteps.size() > 0) {
      masterServer=transSplitter.getMasterServer();
      if (show)       addSpoonGraph(master);
      if (post) {
        String masterReply=masterServer.sendXML(new TransConfiguration(master,executionConfiguration).getXML(),AddTransServlet.CONTEXT_PATH + "/?xml=Y");
        WebResult webResult=WebResult.fromXMLString(masterReply);
        if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
          throw new KettleException("An error occurred sending the master transformation: " + webResult.getMessage());
        }
      }
    }
    SlaveServer slaves[]=transSplitter.getSlaveTargets();
    for (int i=0; i < slaves.length; i++) {
      TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
      if (show)       addSpoonGraph(slaveTrans);
      if (post) {
        TransConfiguration transConfiguration=new TransConfiguration(slaveTrans,executionConfiguration);
        Row variables=transConfiguration.getTransExecutionConfiguration().getVariables();
        variables.addValue(new Value(Const.INTERNAL_VARIABLE_SLAVE_TRANS_NUMBER,Integer.toString(i)));
        variables.addValue(new Value(Const.INTERNAL_VARIABLE_CLUSTER_SIZE,Integer.toString(slaves.length)));
        String slaveReply=slaves[i].sendXML(transConfiguration.getXML(),AddTransServlet.CONTEXT_PATH + "/?xml=Y");
        WebResult webResult=WebResult.fromXMLString(slaveReply);
        if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
          throw new KettleException("An error occurred sending a slave transformation: " + webResult.getMessage());
        }
      }
    }
    if (post) {
      if (prepare) {
        if (masterSteps.size() > 0) {
          String masterReply=masterServer.getContentFromServer(PrepareExecutionTransServlet.CONTEXT_PATH + "/?name=" + master.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(masterReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while preparing the execution of the master transformation: " + webResult.getMessage());
          }
        }
        for (int i=0; i < slaves.length; i++) {
          TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
          String slaveReply=slaves[i].getContentFromServer(PrepareExecutionTransServlet.CONTEXT_PATH + "/?name=" + slaveTrans.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(slaveReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while preparing the execution of a slave transformation: " + webResult.getMessage());
          }
        }
      }
      if (start) {
        if (masterSteps.size() > 0) {
          String masterReply=masterServer.getContentFromServer(StartExecutionTransServlet.CONTEXT_PATH + "/?name=" + master.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(masterReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while starting the execution of the master transformation: " + webResult.getMessage());
          }
        }
        for (int i=0; i < slaves.length; i++) {
          TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
          String slaveReply=slaves[i].getContentFromServer(StartExecutionTransServlet.CONTEXT_PATH + "/?name=" + slaveTrans.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(slaveReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while starting the execution of a slave transformation: " + webResult.getMessage());
          }
        }
      }
      addSpoonSlave(masterServer);
      for (int i=0; i < slaves.length; i++) {
        addSpoonSlave(slaves[i]);
      }
    }
  }
 catch (  Exception e) {
    new ErrorDialog(shell,"Split transformation","There was an error during transformation split",e);
  }
}
