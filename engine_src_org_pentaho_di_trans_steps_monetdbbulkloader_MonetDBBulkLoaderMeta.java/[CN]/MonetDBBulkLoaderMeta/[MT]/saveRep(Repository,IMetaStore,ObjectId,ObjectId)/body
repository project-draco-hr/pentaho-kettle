{
  try {
    rep.saveDatabaseMetaStepAttribute(id_transformation,id_step,"id_connection",databaseMeta);
    rep.saveStepAttribute(id_transformation,id_step,"db_connection_name",dbConnectionName);
    rep.saveStepAttribute(id_transformation,id_step,"schema",schemaName);
    rep.saveStepAttribute(id_transformation,id_step,"table",tableName);
    rep.saveStepAttribute(id_transformation,id_step,"buffer_size",bufferSize);
    rep.saveStepAttribute(id_transformation,id_step,"log_file",logFile);
    rep.saveStepAttribute(id_transformation,id_step,"truncate",truncate);
    rep.saveStepAttribute(id_transformation,id_step,"fully_quote_sql",fullyQuoteSQL);
    rep.saveStepAttribute(id_transformation,id_step,"field_separator",fieldSeparator);
    rep.saveStepAttribute(id_transformation,id_step,"field_enclosure",fieldEnclosure);
    rep.saveStepAttribute(id_transformation,id_step,"null_representation",NULLrepresentation);
    rep.saveStepAttribute(id_transformation,id_step,"encoding",encoding);
    for (int i=0; i < fieldTable.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"stream_name",fieldTable[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"field_name",fieldStream[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"field_format_ok",fieldFormatOk[i]);
    }
    if (databaseMeta != null)     rep.insertStepDatabase(id_transformation,id_step,databaseMeta.getObjectId());
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"MonetDBBulkLoaderMeta.Exception.UnableToSaveStepInfoToRepository") + id_step,e);
  }
}
