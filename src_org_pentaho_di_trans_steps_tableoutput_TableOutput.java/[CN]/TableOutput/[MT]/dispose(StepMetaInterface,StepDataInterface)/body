{
  meta=(TableOutputMeta)smi;
  data=(TableOutputData)sdi;
  try {
    for (    String schemaTable : data.preparedStatements.keySet()) {
      Integer batchCounter=data.commitCounterMap.get(schemaTable);
      if (batchCounter == null) {
        batchCounter=0;
      }
      PreparedStatement insertStatement=data.preparedStatements.get(schemaTable);
      data.db.emptyAndCommit(insertStatement,data.batchMode,batchCounter);
    }
    for (int i=0; i < data.batchBuffer.size(); i++) {
      Object[] row=(Object[])data.batchBuffer.get(i);
      putRow(data.outputRowMeta,row);
      incrementLinesOutput();
    }
    data.batchBuffer.clear();
  }
 catch (  KettleDatabaseBatchException be) {
    if (getStepMeta().isDoingErrorHandling()) {
      try {
        processBatchException(be.toString(),be.getUpdateCounts(),be.getExceptionsList());
      }
 catch (      KettleException e) {
        logError("Unexpected error processing batch error",e);
        setErrors(1);
        stopAll();
      }
    }
 else {
      logError("Unexpected batch update error committing the database connection.",be);
      setErrors(1);
      stopAll();
    }
  }
catch (  Exception dbe) {
    logError("Unexpected error committing the database connection.",dbe);
    logError(Const.getStackTracker(dbe));
    setErrors(1);
    stopAll();
  }
 finally {
    setOutputDone();
    if (getErrors() > 0) {
      try {
        data.db.rollback();
      }
 catch (      KettleDatabaseException e) {
        logError("Unexpected error rolling back the database connection.",e);
      }
    }
    data.db.disconnect();
    super.dispose(smi,sdi);
  }
}
