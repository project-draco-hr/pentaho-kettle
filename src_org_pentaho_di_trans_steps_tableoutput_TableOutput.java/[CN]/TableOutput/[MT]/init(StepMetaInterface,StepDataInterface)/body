{
  meta=(TableOutputMeta)smi;
  data=(TableOutputData)sdi;
  if (super.init(smi,sdi)) {
    try {
      data.commitSize=Integer.parseInt(environmentSubstitute(meta.getCommitSize()));
      data.databaseMeta=meta.getDatabaseMeta();
      DatabaseInterface dbInterface=data.databaseMeta.getDatabaseInterface();
      data.useSafePoints=data.databaseMeta.getDatabaseInterface().useSafePoints() && getStepMeta().isDoingErrorHandling();
      data.releaseSavepoint=dbInterface.releaseSavepoint();
      data.batchMode=meta.useBatchUpdate() && data.commitSize > 0 && !meta.isReturningGeneratedKeys() && !getTransMeta().isUsingUniqueConnections() && !data.useSafePoints;
      if (getStepMeta().isDoingErrorHandling() && !dbInterface.supportsErrorHandlingOnBatchUpdates()) {
        log.logMinimal(BaseMessages.getString(PKG,"TableOutput.Warning.ErrorHandlingIsNotFullySupportedWithBatchProcessing"));
      }
      if (meta.getDatabaseMeta() == null) {
        throw new KettleException(BaseMessages.getString(PKG,"TableOutput.Exception.DatabaseNeedsToBeSelected"));
      }
      if (meta.getDatabaseMeta() == null) {
        logError(BaseMessages.getString(PKG,"TableOutput.Init.ConnectionMissing",getStepname()));
        return false;
      }
      data.db=new Database(this,meta.getDatabaseMeta());
      data.db.shareVariablesWith(this);
      if (getTransMeta().isUsingUniqueConnections()) {
synchronized (getTrans()) {
          data.db.connect(getTrans().getTransactionId(),getPartitionID());
        }
      }
 else {
        data.db.connect(getPartitionID());
      }
      if (log.isBasic())       logBasic("Connected to database [" + meta.getDatabaseMeta() + "] (commit="+ data.commitSize+ ")");
      if (data.commitSize == 0) {
        data.commitSize=Integer.MAX_VALUE;
      }
      data.db.setCommit(data.commitSize);
      if (!meta.isPartitioningEnabled() && !meta.isTableNameInField()) {
        data.tableName=environmentSubstitute(meta.getTableName());
        if (meta.truncateTable() && ((getCopy() == 0 && getUniqueStepNrAcrossSlaves() == 0) || !Const.isEmpty(getPartitionID()))) {
          data.db.truncateTable(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTableName()));
        }
      }
      return true;
    }
 catch (    KettleException e) {
      logError("An error occurred intialising this step: " + e.getMessage());
      stopAll();
      setErrors(1);
    }
  }
  return false;
}
