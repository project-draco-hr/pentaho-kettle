{
  try {
    SpoonPerspective activePerspective=SpoonPerspectiveManager.getInstance().getActivePerspective();
    if (!importfile) {
      if (activePerspective instanceof SpoonPerspectiveOpenSaveInterface) {
        ((SpoonPerspectiveOpenSaveInterface)activePerspective).open();
        return;
      }
    }
    String activePerspectiveId=activePerspective.getId();
    boolean etlPerspective=activePerspectiveId.equals(MainSpoonPerspective.ID);
    if (rep == null || importfile || !etlPerspective) {
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      LinkedHashSet<String> extensions=new LinkedHashSet<String>();
      LinkedHashSet<String> extensionNames=new LinkedHashSet<String>();
      StringBuilder allExtensions=new StringBuilder();
      for (      FileListener l : fileListeners) {
        for (        String ext : l.getSupportedExtensions()) {
          extensions.add("*." + ext);
          allExtensions.append("*.").append(ext).append(";");
        }
        Collections.addAll(extensionNames,l.getFileTypeDisplayNames(Locale.getDefault()));
      }
      extensions.add("*");
      extensionNames.add(BaseMessages.getString(PKG,"Spoon.Dialog.OpenFile.AllFiles"));
      String[] exts=new String[extensions.size() + 1];
      exts[0]=allExtensions.toString();
      System.arraycopy(extensions.toArray(new String[extensions.size()]),0,exts,1,extensions.size());
      String[] extNames=new String[extensionNames.size() + 1];
      extNames[0]=BaseMessages.getString(PKG,"Spoon.Dialog.OpenFile.AllTypes");
      System.arraycopy(extensionNames.toArray(new String[extensionNames.size()]),0,extNames,1,extensionNames.size());
      dialog.setFilterExtensions(exts);
      setFilterPath(dialog);
      String filename=dialog.open();
      if (filename != null) {
        if (importfile) {
          if (activePerspective instanceof SpoonPerspectiveOpenSaveInterface) {
            ((SpoonPerspectiveOpenSaveInterface)activePerspective).importFile(filename);
            return;
          }
        }
        lastDirOpened=dialog.getFilterPath();
        openFile(filename,importfile);
      }
    }
 else {
      SelectObjectDialog sod=new SelectObjectDialog(shell,rep);
      if (sod.open() != null) {
        RepositoryObjectType type=sod.getObjectType();
        String name=sod.getObjectName();
        RepositoryDirectoryInterface repDir=sod.getDirectory();
        ObjectId objId=sod.getObjectId();
        if (RepositoryObjectType.TRANSFORMATION.equals(type)) {
          TransLoadProgressDialog tlpd=null;
          if (objId != null && !Const.isEmpty(objId.getId())) {
            tlpd=new TransLoadProgressDialog(shell,rep,objId,null);
          }
 else {
            tlpd=new TransLoadProgressDialog(shell,rep,name,repDir,null);
          }
          TransMeta transMeta=tlpd.open();
          sharedObjectsFileMap.put(transMeta.getSharedObjects().getFilename(),transMeta.getSharedObjects());
          setTransMetaVariables(transMeta);
          if (transMeta != null) {
            if (log.isDetailed()) {
              log.logDetailed(BaseMessages.getString(PKG,"Spoon.Log.LoadToTransformation",name,repDir.getName()));
            }
            props.addLastFile(LastUsedFile.FILE_TYPE_TRANSFORMATION,name,repDir.getPath(),true,rep.getName());
            addMenuLast();
            transMeta.clearChanged();
            addTransGraph(transMeta);
          }
          refreshGraph();
          refreshTree();
        }
 else         if (RepositoryObjectType.JOB.equals(type)) {
          JobLoadProgressDialog jlpd=null;
          if (objId != null && !Const.isEmpty(objId.getId())) {
            jlpd=new JobLoadProgressDialog(shell,rep,objId,null);
          }
 else {
            jlpd=new JobLoadProgressDialog(shell,rep,name,repDir,null);
          }
          JobMeta jobMeta=jlpd.open();
          sharedObjectsFileMap.put(jobMeta.getSharedObjects().getFilename(),jobMeta.getSharedObjects());
          setJobMetaVariables(jobMeta);
          if (jobMeta != null) {
            props.addLastFile(LastUsedFile.FILE_TYPE_JOB,name,repDir.getPath(),true,rep.getName());
            saveSettings();
            addMenuLast();
            addJobGraph(jobMeta);
          }
          refreshGraph();
          refreshTree();
        }
      }
    }
  }
 catch (  KettleRepositoryLostException krle) {
    new ErrorDialog(getShell(),BaseMessages.getString(PKG,"Spoon.Error"),krle.getPrefaceMessage(),krle);
    this.closeRepository();
  }
}
