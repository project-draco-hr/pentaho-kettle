{
  SpoonPerspective activePerspective=SpoonPerspectiveManager.getInstance().getActivePerspective();
  if (!importfile) {
    if (activePerspective instanceof SpoonPerspectiveOpenSaveInterface) {
      ((SpoonPerspectiveOpenSaveInterface)activePerspective).open();
      return;
    }
  }
  String activePerspectiveId=activePerspective.getId();
  boolean etlPerspective=activePerspectiveId.equals(MainSpoonPerspective.ID);
  if (rep == null || importfile || !etlPerspective) {
    FileDialog dialog=new FileDialog(shell,SWT.OPEN);
    LinkedHashSet<String> extensions=new LinkedHashSet<String>();
    LinkedHashSet<String> extensionNames=new LinkedHashSet<String>();
    StringBuffer allExtensions=new StringBuffer();
    for (    FileListener l : fileListeners) {
      for (      String ext : l.getSupportedExtensions()) {
        extensions.add("*." + ext);
        allExtensions.append("*.").append(ext).append(";");
      }
      for (      String name : l.getFileTypeDisplayNames(Locale.getDefault())) {
        extensionNames.add(name);
      }
    }
    extensions.add("*");
    extensionNames.add(BaseMessages.getString(PKG,"Spoon.Dialog.OpenFile.AllFiles"));
    String[] exts=new String[extensions.size() + 1];
    exts[0]=allExtensions.toString();
    System.arraycopy(extensions.toArray(new String[extensions.size()]),0,exts,1,extensions.size());
    String[] extNames=new String[extensionNames.size() + 1];
    extNames[0]=BaseMessages.getString(PKG,"Spoon.Dialog.OpenFile.AllTypes");
    System.arraycopy(extensionNames.toArray(new String[extensionNames.size()]),0,extNames,1,extensionNames.size());
    dialog.setFilterExtensions(exts);
    setFilterPath(dialog);
    String fname=dialog.open();
    if (fname != null) {
      if (importfile) {
        if (activePerspective instanceof SpoonPerspectiveOpenSaveInterface) {
          ((SpoonPerspectiveOpenSaveInterface)activePerspective).importFile(fname);
          return;
        }
      }
      lastDirOpened=dialog.getFilterPath();
      openFile(fname,importfile);
    }
  }
 else {
    SelectObjectDialog sod=new SelectObjectDialog(shell,rep);
    if (sod.open() != null) {
      RepositoryObjectType type=sod.getObjectType();
      String name=sod.getObjectName();
      RepositoryDirectoryInterface repdir=sod.getDirectory();
      if (RepositoryObjectType.TRANSFORMATION.equals(type)) {
        TransLoadProgressDialog tlpd=new TransLoadProgressDialog(shell,rep,name,repdir,null);
        TransMeta transMeta=tlpd.open();
        sharedObjectsFileMap.put(transMeta.getSharedObjects().getFilename(),transMeta.getSharedObjects());
        setTransMetaVariables(transMeta);
        if (transMeta != null) {
          if (log.isDetailed()) {
            log.logDetailed(BaseMessages.getString(PKG,"Spoon.Log.LoadToTransformation",name,repdir.getName()));
          }
          props.addLastFile(LastUsedFile.FILE_TYPE_TRANSFORMATION,name,repdir.getPath(),true,rep.getName());
          addMenuLast();
          transMeta.clearChanged();
          addTransGraph(transMeta);
        }
        refreshGraph();
        refreshTree();
      }
 else       if (RepositoryObjectType.JOB.equals(type)) {
        JobLoadProgressDialog jlpd=new JobLoadProgressDialog(shell,rep,name,repdir,null);
        JobMeta jobMeta=jlpd.open();
        sharedObjectsFileMap.put(jobMeta.getSharedObjects().getFilename(),jobMeta.getSharedObjects());
        setJobMetaVariables(jobMeta);
        if (jobMeta != null) {
          props.addLastFile(LastUsedFile.FILE_TYPE_JOB,name,repdir.getPath(),true,rep.getName());
          saveSettings();
          addMenuLast();
          addJobGraph(jobMeta);
        }
        refreshGraph();
        refreshTree();
      }
    }
  }
}
