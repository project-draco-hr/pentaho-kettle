{
  String[] clusterSchemaNames;
  try {
    clusterSchemaNames=pickupClusterSchemas(transMeta);
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.ErrorDialog.Title"),BaseMessages.getString(PKG,"Spoon.ErrorDialog.ErrorFetchingFromRepo.ClusterSchemas"),e);
    return;
  }
  StepMeta stepMeta=stepMetas.get(0);
  int idx=-1;
  if (stepMeta.getClusterSchema() != null) {
    idx=transMeta.getClusterSchemas().indexOf(stepMeta.getClusterSchema());
  }
  EnterSelectionDialog dialog=new EnterSelectionDialog(shell,clusterSchemaNames,BaseMessages.getString(PKG,"Spoon.Dialog.SelectClusteringSchema.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.SelectClusteringSchema.Message"));
  String schemaName=dialog.open(idx);
  if (schemaName == null) {
    for (    StepMeta step : stepMetas) {
      step.setClusterSchema(null);
    }
  }
 else {
    ClusterSchema clusterSchema=transMeta.findClusterSchema(schemaName);
    for (    StepMeta step : stepMetas) {
      step.setClusterSchema(clusterSchema);
    }
  }
  refreshTree();
  refreshGraph();
}
