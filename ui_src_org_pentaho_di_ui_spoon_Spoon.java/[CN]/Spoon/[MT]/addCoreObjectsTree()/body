{
  coreObjectsTree=new Tree(variableComposite,SWT.V_SCROLL | SWT.SINGLE);
  props.setLook(coreObjectsTree);
  coreObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (props.getAutoCollapseCoreObjectsTree()) {
        TreeItem[] selection=coreObjectsTree.getSelection();
        if (selection.length == 1) {
          TreeItem top=selection[0];
          while (top.getParentItem() != null) {
            top=top.getParentItem();
          }
          if (top == selection[0]) {
            boolean expanded=top.getExpanded();
            for (            TreeItem item : coreObjectsTree.getItems()) {
              item.setExpanded(false);
            }
            top.setExpanded(!expanded);
          }
        }
      }
    }
  }
);
  coreObjectsTree.addTreeListener(new TreeAdapter(){
    public void treeExpanded(    TreeEvent treeEvent){
      if (props.getAutoCollapseCoreObjectsTree()) {
        TreeItem treeItem=(TreeItem)treeEvent.item;
        coreObjectsTree.setSelection(treeItem);
        for (        TreeItem item : coreObjectsTree.getItems()) {
          if (item != treeItem) {
            item.setExpanded(false);
          }
 else {
            treeItem.setExpanded(true);
          }
        }
      }
    }
  }
);
  coreObjectsTree.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent move){
      if (!getProperties().showToolTips()) {
        return;
      }
      toolTip.hide();
      TreeItem item=searchMouseOverTreeItem(coreObjectsTree.getItems(),move.x,move.y);
      if (item != null) {
        String name=item.getText();
        String tip=coreStepToolTipMap.get(name);
        if (tip != null) {
          PluginInterface plugin=PluginRegistry.getInstance().findPluginWithName(StepPluginType.class,name);
          if (plugin != null) {
            Image image=GUIResource.getInstance().getImagesSteps().get(plugin.getIds()[0]).getAsBitmapForSize(display,ConstUI.ICON_SIZE,ConstUI.ICON_SIZE);
            if (image == null) {
              toolTip.hide();
            }
            toolTip.setImage(image);
            toolTip.setText(name + Const.CR + Const.CR+ tip);
            toolTip.show(new org.eclipse.swt.graphics.Point(move.x + 10,move.y + 10));
          }
        }
        tip=coreJobToolTipMap.get(name);
        if (tip != null) {
          PluginInterface plugin=PluginRegistry.getInstance().findPluginWithName(JobEntryPluginType.class,name);
          if (plugin != null) {
            Image image=GUIResource.getInstance().getImagesJobentries().get(plugin.getIds()[0]).getAsBitmapForSize(display,ConstUI.ICON_SIZE,ConstUI.ICON_SIZE);
            toolTip.setImage(image);
            toolTip.setText(name + Const.CR + Const.CR+ tip);
            toolTip.show(new org.eclipse.swt.graphics.Point(move.x + 10,move.y + 10));
          }
        }
      }
    }
  }
);
  addDragSourceToTree(coreObjectsTree);
  addDefaultKeyListeners(coreObjectsTree);
  coreObjectsTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent event){
      boolean shift=(event.stateMask & SWT.SHIFT) != 0;
      doubleClickedInTree(coreObjectsTree,shift);
    }
  }
);
  toolTip=new DefaultToolTip(variableComposite,ToolTip.RECREATE,true);
  toolTip.setBackgroundColor(GUIResource.getInstance().getColor(255,254,225));
  toolTip.setForegroundColor(GUIResource.getInstance().getColor(0,0,0));
  toolTip.setRespectMonitorBounds(true);
  toolTip.setRespectDisplayBounds(true);
  toolTip.setPopupDelay(350);
  toolTip.setHideDelay(5000);
  toolTip.setShift(new org.eclipse.swt.graphics.Point(ConstUI.TOOLTIP_OFFSET,ConstUI.TOOLTIP_OFFSET));
}
