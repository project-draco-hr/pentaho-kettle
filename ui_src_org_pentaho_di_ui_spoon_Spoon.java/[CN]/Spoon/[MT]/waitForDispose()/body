{
  boolean retryAfterError=false;
  do {
    retryAfterError=false;
    try {
      while (getShell() != null && !getShell().isDisposed()) {
        if (!readAndDispatch())         sleep();
      }
    }
 catch (    Throwable e) {
      log.logError(BaseMessages.getString(PKG,"Spoon.Log.UnexpectedErrorOccurred") + Const.CR + e.getMessage());
      log.logError(Const.getStackTracker(e));
      try {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Log.UnexpectedErrorOccurred"),BaseMessages.getString(PKG,"Spoon.Log.UnexpectedErrorOccurred") + Const.CR + e.getMessage(),e);
        MessageBox mb=new MessageBox(shell,SWT.ICON_QUESTION | SWT.NO | SWT.YES);
        mb.setText(BaseMessages.getString(PKG,"Spoon.Log.UnexpectedErrorRetry.Titel"));
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Log.UnexpectedErrorRetry.Message"));
        if (mb.open() == SWT.YES)         retryAfterError=true;
      }
 catch (      Throwable e1) {
      }
    }
  }
 while (retryAfterError);
  if (!display.isDisposed())   display.update();
  dispose();
  if (log.isBasic())   log.logBasic(APP_NAME + " " + BaseMessages.getString(PKG,"Spoon.Log.AppHasEnded"));
  if (fileLoggingEventListener != null) {
    try {
      fileLoggingEventListener.close();
    }
 catch (    Exception e) {
      LogChannel.GENERAL.logError("Error closing logging file",e);
    }
    KettleLogStore.getAppender().removeLoggingEventListener(fileLoggingEventListener);
  }
}
