{
  loginDialog=new RepositoriesDialog(shell,null,new ILoginCallback(){
    public void onSuccess(    Repository repository){
      if (rep != null) {
        rep.disconnect();
        SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_DISCONNECTED);
      }
      setRepository(repository);
      try {
        IMetaStore repositoryMetaStore=repository.getMetaStore();
        if (repositoryMetaStore != null) {
          metaStore.addMetaStore(0,repositoryMetaStore);
          metaStore.setActiveMetaStoreName(repositoryMetaStore.getName());
        }
      }
 catch (      MetaStoreException e) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorAddingRepositoryMetaStore.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Message"),e);
      }
      JobMeta jobMetas[]=getLoadedJobs();
      for (int t=0; t < jobMetas.length; t++) {
        JobMeta jobMeta=jobMetas[t];
        for (int i=0; i < jobMeta.nrDatabases(); i++) {
          jobMeta.getDatabase(i).setObjectId(null);
        }
        jobMeta.setObjectId(null);
        List<DatabaseMeta> oldDatabases=jobMeta.getDatabases();
        jobMeta.setDatabases(new ArrayList<DatabaseMeta>());
        jobMeta.setSlaveServers(new ArrayList<SlaveServer>());
        try {
          SharedObjects sharedObjects=rep.readJobMetaSharedObjects(jobMeta);
          sharedObjectsFileMap.put(sharedObjects.getFilename(),sharedObjects);
        }
 catch (        KettleException e) {
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Message",makeTabName(jobMeta,true)),e);
        }
        for (int i=0; i < oldDatabases.size(); i++) {
          DatabaseMeta oldDatabase=oldDatabases.get(i);
          DatabaseMeta newDatabase=DatabaseMeta.findDatabase(jobMeta.getDatabases(),oldDatabase.getName());
          if (newDatabase != null) {
            oldDatabase.setDatabaseInterface(newDatabase.getDatabaseInterface());
          }
 else {
            jobMeta.addDatabase(oldDatabase);
          }
        }
        try {
          RepositoryDirectoryInterface redi=rep.findDirectory(jobMeta.getRepositoryDirectory().getPath());
          if (redi != null) {
            jobMeta.setRepositoryDirectory(redi);
          }
 else {
            jobMeta.setRepositoryDirectory(rep.loadRepositoryDirectoryTree());
          }
        }
 catch (        KettleException ke) {
          rep=null;
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Message",Const.CR),ke);
        }
      }
      TransMeta transMetas[]=getLoadedTransformations();
      for (int t=0; t < transMetas.length; t++) {
        TransMeta transMeta=transMetas[t];
        for (int i=0; i < transMeta.nrDatabases(); i++) {
          transMeta.getDatabase(i).setObjectId(null);
        }
        transMeta.setObjectId(null);
        List<DatabaseMeta> oldDatabases=transMeta.getDatabases();
        transMeta.setDatabases(new ArrayList<DatabaseMeta>());
        transMeta.setPartitionSchemas(new ArrayList<PartitionSchema>());
        transMeta.setSlaveServers(new ArrayList<SlaveServer>());
        transMeta.setClusterSchemas(new ArrayList<ClusterSchema>());
        try {
          SharedObjects sharedObjects=rep.readTransSharedObjects(transMeta);
          sharedObjectsFileMap.put(sharedObjects.getFilename(),sharedObjects);
        }
 catch (        KettleException e) {
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Message",makeTabName(transMeta,true)),e);
        }
        for (int i=0; i < oldDatabases.size(); i++) {
          DatabaseMeta oldDatabase=oldDatabases.get(i);
          DatabaseMeta newDatabase=DatabaseMeta.findDatabase(transMeta.getDatabases(),oldDatabase.getName());
          if (newDatabase != null) {
            oldDatabase.setDatabaseInterface(newDatabase.getDatabaseInterface());
          }
 else {
            transMeta.addDatabase(oldDatabase);
          }
        }
        try {
          RepositoryDirectoryInterface redi=rep.findDirectory(transMeta.getRepositoryDirectory().getPath());
          if (redi != null) {
            transMeta.setRepositoryDirectory(redi);
          }
 else {
            transMeta.setRepositoryDirectory(rep.loadRepositoryDirectoryTree());
          }
        }
 catch (        KettleException ke) {
          rep=null;
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Message",Const.CR),ke);
        }
      }
      refreshTree();
      setShellText();
      SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_CONNECTED);
    }
    public void onError(    Throwable t){
      closeRepository();
      MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
      mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Message",t.getLocalizedMessage()));
      mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Title"));
      mb.open();
    }
    public void onCancel(){
    }
  }
);
  loginDialog.show();
}
