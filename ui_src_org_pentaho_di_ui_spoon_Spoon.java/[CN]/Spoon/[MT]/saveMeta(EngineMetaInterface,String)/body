{
  meta.setFilename(filename);
  if (Const.isEmpty(meta.getName()) || delegates.jobs.isDefaultJobName(meta.getName()) || delegates.trans.isDefaultTransformationName(meta.getName())) {
    meta.nameFromFilename();
  }
  boolean saved=false;
  try {
    String xml=XMLHandler.getXMLHeader() + meta.getXML();
    DataOutputStream dos=new DataOutputStream(KettleVFS.getOutputStream(filename,false));
    dos.write(xml.getBytes(Const.XML_ENCODING));
    dos.close();
    saved=true;
    props.addLastFile(meta.getFileType(),filename,null,false,null);
    saveSettings();
    addMenuLast();
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"Spoon.Log.FileWritten") + " [" + filename+ "]");
    }
    meta.setFilename(filename);
    meta.clearChanged();
    setShellText();
  }
 catch (  Exception e) {
    if (log.isDebug()) {
      log.logDebug(BaseMessages.getString(PKG,"Spoon.Log.ErrorOpeningFileForWriting") + e.toString());
    }
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingFile.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingFile.Message") + Const.CR + e.toString(),e);
  }
  return saved;
}
