{
  if (shell.isDisposed()) {
    return;
  }
  if (!designSelected) {
    return;
  }
  if (coreObjectsTree == null || coreObjectsTree.isDisposed()) {
    addCoreObjectsTree();
  }
  showTrans=getActiveTransformation() != null;
  showJob=getActiveJob() != null;
  if (showTrans == previousShowTrans && showJob == previousShowJob) {
    return;
  }
  TreeItem[] expandItems=coreObjectsTree.getItems();
  for (  TreeItem item : expandItems) {
    item.dispose();
  }
  if (showTrans) {
    selectionLabel.setText(BaseMessages.getString(PKG,"Spoon.Steps"));
    PluginRegistry registry=PluginRegistry.getInstance();
    final List<PluginInterface> baseSteps=registry.getPlugins(StepPluginType.class);
    final List<String> baseCategories=registry.getCategories(StepPluginType.class);
    for (    String baseCategory : baseCategories) {
      TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
      item.setText(baseCategory);
      item.setImage(GUIResource.getInstance().getImageFolder());
      List<PluginInterface> sortedCat=new ArrayList<PluginInterface>();
      for (      PluginInterface baseStep : baseSteps) {
        if (baseStep.getCategory().equalsIgnoreCase(baseCategory)) {
          sortedCat.add(baseStep);
        }
      }
      Collections.sort(sortedCat,new Comparator<PluginInterface>(){
        public int compare(        PluginInterface p1,        PluginInterface p2){
          return p1.getName().compareTo(p2.getName());
        }
      }
);
      for (      PluginInterface p : sortedCat) {
        final Image stepImage=GUIResource.getInstance().getImagesStepsSmall().get(p.getIds()[0]);
        String pluginName=p.getName();
        String pluginDescription=p.getDescription();
        if (!filterMatch(pluginName) && !filterMatch(pluginDescription)) {
          continue;
        }
        createTreeItem(item,pluginName,stepImage);
        coreStepToolTipMap.put(pluginName,pluginDescription);
      }
    }
    TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
    item.setText(BaseMessages.getString(PKG,"Spoon.History"));
    item.setImage(GUIResource.getInstance().getImageFolder());
    List<ObjectUsageCount> pluginHistory=props.getPluginHistory();
    for (int i=0; i < pluginHistory.size() && i < 10; i++) {
      ObjectUsageCount usage=pluginHistory.get(i);
      PluginInterface stepPlugin=PluginRegistry.getInstance().findPluginWithId(StepPluginType.class,usage.getObjectName());
      if (stepPlugin != null) {
        final Image stepImage=GUIResource.getInstance().getImagesSteps().get(stepPlugin.getIds()[0]).getAsBitmapForSize(display,ConstUI.MEDIUM_ICON_SIZE,ConstUI.MEDIUM_ICON_SIZE);
        String pluginName=Const.NVL(stepPlugin.getName(),"");
        String pluginDescription=Const.NVL(stepPlugin.getDescription(),"");
        if (!filterMatch(pluginName) && !filterMatch(pluginDescription)) {
          continue;
        }
        TreeItem stepItem=createTreeItem(item,pluginName,stepImage);
        stepItem.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            System.out.println("Tree item Listener fired");
          }
        }
);
        coreStepToolTipMap.put(stepPlugin.getDescription(),pluginDescription + " (" + usage.getNrUses()+ ")");
      }
    }
  }
  if (showJob) {
    selectionLabel.setText(BaseMessages.getString(PKG,"Spoon.Entries"));
    PluginRegistry registry=PluginRegistry.getInstance();
    List<PluginInterface> baseJobEntries=registry.getPlugins(JobEntryPluginType.class);
    List<String> baseCategories=registry.getCategories(JobEntryPluginType.class);
    TreeItem generalItem=null;
    for (    String baseCategory : baseCategories) {
      TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
      item.setText(baseCategory);
      item.setImage(GUIResource.getInstance().getImageFolder());
      if (baseCategory.equalsIgnoreCase(JobEntryPluginType.GENERAL_CATEGORY)) {
        generalItem=item;
      }
      for (int j=0; j < baseJobEntries.size(); j++) {
        if (!baseJobEntries.get(j).getIds()[0].equals("SPECIAL")) {
          if (baseJobEntries.get(j).getCategory().equalsIgnoreCase(baseCategory)) {
            final Image jobEntryImage=GUIResource.getInstance().getImagesJobentriesSmall().get(baseJobEntries.get(j).getIds()[0]);
            String pluginName=Const.NVL(baseJobEntries.get(j).getName(),"");
            String pluginDescription=Const.NVL(baseJobEntries.get(j).getDescription(),"");
            if (!filterMatch(pluginName) && !filterMatch(pluginDescription)) {
              continue;
            }
            TreeItem stepItem=createTreeItem(item,pluginName,jobEntryImage);
            stepItem.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event arg0){
                System.out.println("Tree item Listener fired");
              }
            }
);
            coreJobToolTipMap.put(pluginName,pluginDescription);
          }
        }
      }
    }
    JobEntryCopy startEntry=JobMeta.createStartEntry();
    JobEntryCopy dummyEntry=JobMeta.createDummyEntry();
    String[] specialText=new String[]{startEntry.getName(),dummyEntry.getName()};
    String[] specialTooltip=new String[]{startEntry.getDescription(),dummyEntry.getDescription()};
    Image[] specialImage=new Image[]{GUIResource.getInstance().getImageStartMedium(),GUIResource.getInstance().getImageDummyMedium()};
    for (int i=0; i < specialText.length; i++) {
      TreeItem specialItem=new TreeItem(generalItem,SWT.NONE,i);
      specialItem.setImage(specialImage[i]);
      specialItem.setText(specialText[i]);
      specialItem.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event arg0){
          System.out.println("Tree item Listener fired");
        }
      }
);
      coreJobToolTipMap.put(specialText[i],specialTooltip[i]);
    }
  }
  variableComposite.layout(true,true);
  previousShowTrans=showTrans;
  previousShowJob=showJob;
}
