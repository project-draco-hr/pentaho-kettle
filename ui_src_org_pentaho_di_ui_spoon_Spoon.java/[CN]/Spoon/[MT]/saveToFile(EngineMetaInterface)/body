{
  if (meta == null)   return false;
  boolean saved=false;
  if (meta instanceof TransMeta) {
    ((TransMeta)meta).setRepository(rep);
    ((TransMeta)meta).setMetaStore(metaStore);
  }
  if (meta instanceof JobMeta) {
    ((JobMeta)meta).setRepository(rep);
    ((JobMeta)meta).setMetaStore(metaStore);
  }
  if (log.isDetailed())   log.logDetailed(BaseMessages.getString(PKG,"Spoon.Log.SaveToFileOrRepository"));
  SpoonPerspective activePerspective=SpoonPerspectiveManager.getInstance().getActivePerspective();
  if (activePerspective instanceof SpoonPerspectiveOpenSaveInterface) {
    return ((SpoonPerspectiveOpenSaveInterface)activePerspective).save(meta);
  }
  String activePerspectiveId=activePerspective.getId();
  boolean etlPerspective=activePerspectiveId.equals(MainSpoonPerspective.ID);
  if (rep != null && etlPerspective) {
    saved=saveToRepository(meta);
  }
 else {
    if (meta.getFilename() != null) {
      saved=save(meta,meta.getFilename(),false);
    }
 else {
      if (meta.canSave()) {
        saved=saveFileAs(meta);
      }
    }
  }
  meta.saveSharedObjects();
  try {
    if (props.useDBCache() && meta instanceof TransMeta)     ((TransMeta)meta).getDbCache().saveCache();
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingDatabaseCache.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorSavingDatabaseCache.Message"),e);
  }
  delegates.tabs.renameTabs();
  refreshTree();
  enableMenus();
  return saved;
}
