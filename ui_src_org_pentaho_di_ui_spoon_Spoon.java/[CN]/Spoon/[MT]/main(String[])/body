{
  ExecutorService executor=Executors.newCachedThreadPool();
  Future<KettleException> pluginRegistryFuture=executor.submit(new Callable<KettleException>(){
    @Override public KettleException call() throws Exception {
      registerUIPluginObjectTypes();
      try {
        KettleEnvironment.init();
      }
 catch (      KettleException e) {
        return e;
      }
      KettleClientEnvironment.getInstance().setClient(KettleClientEnvironment.ClientType.SPOON);
      System.out.println("Plugin init done.");
      return null;
    }
  }
);
  try {
    OsHelper.setAppName();
    Display display=null;
    if (System.getProperties().containsKey("SLEAK")) {
      DeviceData data=new DeviceData();
      data.tracking=true;
      display=new Display(data);
      Sleak sleak=new Sleak();
      Shell sleakShell=new Shell(display);
      sleakShell.setText("S-Leak");
      org.eclipse.swt.graphics.Point size=sleakShell.getSize();
      sleakShell.setSize(size.x / 2,size.y / 2);
      sleak.create(sleakShell);
      sleakShell.open();
    }
 else {
      display=new Display();
    }
    OsHelper.initOsHandlers(display);
    UIManager.setLookAndFeel(new MetalLookAndFeel());
    splash=new Splash(display);
    List<String> args=new ArrayList<String>(Arrays.asList(a));
    CommandLineOption[] commandLineOptions=getCommandLineArgs(args);
    initLogging(commandLineOptions);
    PropsUI.init(display,Props.TYPE_PROPERTIES_SPOON);
    KettleLogStore.init(PropsUI.getInstance().getMaxNrLinesInLog(),PropsUI.getInstance().getMaxLogLineTimeoutMinutes());
    KettleException registryException=pluginRegistryFuture.get();
    if (registryException != null) {
      throw registryException;
    }
    staticSpoon=new Spoon();
    staticSpoon.commandLineOptions=commandLineOptions;
    String pId=null;
    StringBuffer perspectiveIdBuff=Spoon.getCommandLineOption(commandLineOptions,"perspective").getArgument();
    pId=perspectiveIdBuff.toString();
    if (!Const.isEmpty(pId)) {
      Spoon.staticSpoon.startupPerspective=pId;
    }
    SpoonFactory.setSpoonInstance(staticSpoon);
    staticSpoon.setDestroy(true);
    GUIFactory.setThreadDialogs(new ThreadGuiResources());
    staticSpoon.setArguments(args.toArray(new String[args.size()]));
    staticSpoon.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    if (staticSpoon != null) {
      log.logError("Fatal error : " + Const.NVL(t.toString(),Const.NVL(t.getMessage(),"Unknown error")));
      log.logError(Const.getStackTracker(t));
    }
  }
  System.exit(0);
}
