{
  mainComposite=new Composite(sashform,SWT.BORDER);
  mainComposite.setLayout(new FormLayout());
  props.setLook(mainComposite,Props.WIDGET_STYLE_TOOLBAR);
  CTabFolder tabFolder=new CTabFolder(mainComposite,SWT.HORIZONTAL);
  props.setLook(tabFolder,Props.WIDGET_STYLE_TAB);
  FormData fdTab=new FormData();
  fdTab.left=new FormAttachment(0,0);
  fdTab.top=new FormAttachment(mainComposite,0);
  fdTab.right=new FormAttachment(100,0);
  fdTab.height=0;
  tabFolder.setLayoutData(fdTab);
  view=new CTabItem(tabFolder,SWT.NONE);
  view.setControl(new Composite(tabFolder,SWT.NONE));
  view.setText(STRING_SPOON_MAIN_TREE);
  view.setImage(GUIResource.getInstance().getImageExploreSolutionSmall());
  design=new CTabItem(tabFolder,SWT.NONE);
  design.setText(STRING_SPOON_CORE_OBJECTS_TREE);
  design.setControl(new Composite(tabFolder,SWT.NONE));
  design.setImage(GUIResource.getInstance().getImageEditSmall());
  Label sep3=new Label(mainComposite,SWT.SEPARATOR | SWT.HORIZONTAL);
  sep3.setBackground(GUIResource.getInstance().getColorWhite());
  FormData fdSep3=new FormData();
  fdSep3.left=new FormAttachment(0,0);
  fdSep3.right=new FormAttachment(100,0);
  fdSep3.top=new FormAttachment(tabFolder,0);
  sep3.setLayoutData(fdSep3);
  selectionLabel=new Label(mainComposite,SWT.HORIZONTAL);
  FormData fdsLabel=new FormData();
  fdsLabel.left=new FormAttachment(3,0);
  if (Const.isLinux()) {
    fdsLabel.top=new FormAttachment(sep3,10);
  }
 else {
    fdsLabel.top=new FormAttachment(sep3,8);
  }
  selectionLabel.setLayoutData(fdsLabel);
  ToolBar treeTb=new ToolBar(mainComposite,SWT.HORIZONTAL | SWT.FLAT);
  props.setLook(treeTb,Props.WIDGET_STYLE_TOOLBAR);
  ToolItem expandAll=new ToolItem(treeTb,SWT.PUSH);
  expandAll.setImage(GUIResource.getInstance().getImageExpandAll());
  ToolItem collapseAll=new ToolItem(treeTb,SWT.PUSH);
  collapseAll.setImage(GUIResource.getInstance().getImageCollapseAll());
  FormData fdTreeToolbar=new FormData();
  if (Const.isLinux()) {
    fdTreeToolbar.top=new FormAttachment(sep3,3);
  }
 else {
    fdTreeToolbar.top=new FormAttachment(sep3,5);
  }
  fdTreeToolbar.right=new FormAttachment(95,5);
  treeTb.setLayoutData(fdTreeToolbar);
  selectionFilter=new Text(mainComposite,SWT.SINGLE | SWT.BORDER | SWT.LEFT| SWT.SEARCH| SWT.ICON_SEARCH| SWT.ICON_CANCEL);
  selectionFilter.setToolTipText(BaseMessages.getString(PKG,"Spoon.SelectionFilter.Tooltip"));
  FormData fdSelectionFilter=new FormData();
  int offset=-(GUIResource.getInstance().getImageExpandAll().getBounds().height + 5);
  if (Const.isLinux()) {
    if (!Const.isKDE()) {
      offset=-(GUIResource.getInstance().getImageExpandAll().getBounds().height + 12);
    }
  }
  fdSelectionFilter.top=new FormAttachment(treeTb,offset);
  fdSelectionFilter.right=new FormAttachment(95,-55);
  fdSelectionFilter.left=new FormAttachment(selectionLabel,10);
  selectionFilter.setLayoutData(fdSelectionFilter);
  selectionFilter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      if (coreObjectsTree != null && !coreObjectsTree.isDisposed()) {
        previousShowTrans=false;
        previousShowJob=false;
        refreshCoreObjects();
        if (!Utils.isEmpty(selectionFilter.getText())) {
          tidyBranches(coreObjectsTree.getItems(),true);
        }
 else {
          tidyBranches(coreObjectsTree.getItems(),false);
        }
      }
      if (selectionTree != null && !selectionTree.isDisposed()) {
        refreshTree();
        if (!Utils.isEmpty(selectionFilter.getText())) {
          tidyBranches(selectionTree.getItems(),true);
        }
 else {
          tidyBranches(selectionTree.getItems(),false);
        }
        selectionFilter.setFocus();
      }
    }
  }
);
  expandAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (designSelected) {
        tidyBranches(coreObjectsTree.getItems(),true);
      }
      if (viewSelected) {
        tidyBranches(selectionTree.getItems(),true);
      }
    }
  }
);
  collapseAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (designSelected) {
        tidyBranches(coreObjectsTree.getItems(),false);
      }
      if (viewSelected) {
        tidyBranches(selectionTree.getItems(),false);
      }
    }
  }
);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (arg0.item == view) {
        setViewMode();
      }
 else {
        setDesignMode();
      }
    }
  }
);
  Label sep4=new Label(mainComposite,SWT.SEPARATOR | SWT.HORIZONTAL);
  sep4.setBackground(GUIResource.getInstance().getColorWhite());
  FormData fdSep4=new FormData();
  fdSep4.left=new FormAttachment(0,0);
  fdSep4.right=new FormAttachment(100,0);
  fdSep4.top=new FormAttachment(treeTb,5);
  sep4.setLayoutData(fdSep4);
  variableComposite=new Composite(mainComposite,SWT.NONE);
  variableComposite.setLayout(new FillLayout());
  FormData fdVariableComposite=new FormData();
  fdVariableComposite.left=new FormAttachment(0,0);
  fdVariableComposite.right=new FormAttachment(100,0);
  fdVariableComposite.top=new FormAttachment(sep4,0);
  fdVariableComposite.bottom=new FormAttachment(100,0);
  variableComposite.setLayoutData(fdVariableComposite);
  disposeVariableComposite(true,false,false,false);
  coreStepToolTipMap=new Hashtable<String,String>();
  coreJobToolTipMap=new Hashtable<String,String>();
  addDefaultKeyListeners(tabFolder);
  addDefaultKeyListeners(mainComposite);
}
