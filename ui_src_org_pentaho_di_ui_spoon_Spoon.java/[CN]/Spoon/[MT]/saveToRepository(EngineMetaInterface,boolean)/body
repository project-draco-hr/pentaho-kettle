{
  if (meta.getFileType().equals(LastUsedFile.FILE_TYPE_TRANSFORMATION)) {
    if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.MODIFY_TRANSFORMATION)) {
      return false;
    }
  }
  if (meta.getFileType().equals(LastUsedFile.FILE_TYPE_JOB)) {
    if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.MODIFY_JOB)) {
      return false;
    }
  }
  if (log.isDetailed()) {
    log.logDetailed(BaseMessages.getString(PKG,"Spoon.Log.SaveToRepository"));
  }
  if (rep != null) {
    boolean answer=true;
    boolean ask=ask_name;
    if (meta.getRepositoryDirectory() == null || meta.getRepositoryDirectory().isRoot()) {
      meta.setRepositoryDirectory(rep.getDefaultSaveDirectory(meta));
    }
    while (answer && (ask || Const.isEmpty(meta.getName()))) {
      if (!ask) {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.PromptTransformationName.Message"));
        mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.PromptTransformationName.Title"));
        mb.open();
      }
      ask=false;
      if (meta instanceof TransMeta) {
        answer=TransGraph.editProperties((TransMeta)meta,this,rep,false);
      }
      if (meta instanceof JobMeta) {
        answer=JobGraph.editProperties((JobMeta)meta,this,rep,false);
      }
    }
    if (answer && !Const.isEmpty(meta.getName())) {
      int response=SWT.YES;
      ObjectId existingId=null;
      if (meta instanceof TransMeta) {
        existingId=rep.getTransformationID(meta.getName(),meta.getRepositoryDirectory());
      }
      if (meta instanceof JobMeta) {
        existingId=rep.getJobId(meta.getName(),meta.getRepositoryDirectory());
      }
      if ((meta.getObjectId() == null && existingId != null) || existingId != null && !meta.getObjectId().equals(existingId)) {
        if (!rep.getRepositoryMeta().getRepositoryCapabilities().supportsRevisions() || meta.getObjectId() == null) {
          MessageBox mb=new MessageBox(shell,SWT.YES | SWT.NO | SWT.ICON_QUESTION);
          mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.PromptOverwriteTransformation.Message",meta.getName(),Const.CR));
          mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.PromptOverwriteTransformation.Title"));
          response=mb.open();
        }
      }
      boolean saved=false;
      if (response == SWT.YES) {
        if (meta.getObjectId() == null) {
          meta.setObjectId(existingId);
        }
        try {
          shell.setCursor(cursor_hourglass);
          if (meta.getCreatedDate() == null) {
            meta.setCreatedDate(new Date());
            if (capabilities.supportsUsers()) {
              meta.setCreatedUser(rep.getUserInfo().getLogin());
            }
          }
          meta.setModifiedDate(new Date());
          if (capabilities.supportsUsers()) {
            meta.setModifiedUser(rep.getUserInfo().getLogin());
          }
          boolean versioningEnabled=true;
          boolean versionCommentsEnabled=true;
          String fullPath=meta.getRepositoryDirectory() + "/" + meta.getName()+ meta.getRepositoryElementType().getExtension();
          RepositorySecurityProvider repositorySecurityProvider=rep != null && rep.getSecurityProvider() != null ? rep.getSecurityProvider() : null;
          if (repositorySecurityProvider != null) {
            versioningEnabled=repositorySecurityProvider.isVersioningEnabled(fullPath);
            versionCommentsEnabled=repositorySecurityProvider.allowsVersionComments(fullPath);
          }
          String versionComment=null;
          boolean versionOk;
          if (!versioningEnabled || !versionCommentsEnabled) {
            versionOk=true;
            versionComment="";
          }
 else {
            versionOk=false;
          }
          while (!versionOk) {
            versionComment=RepositorySecurityUI.getVersionComment(shell,rep,meta.getName(),fullPath,false);
            if (rep != null && rep.getSecurityProvider() != null && rep.getSecurityProvider().allowsVersionComments(fullPath) && versionComment == null) {
              return false;
            }
            if (Const.isEmpty(versionComment) && rep.getSecurityProvider().isVersioningEnabled(fullPath) && rep.getSecurityProvider().isVersionCommentMandatory()) {
              if (!RepositorySecurityUI.showVersionCommentMandatoryDialog(shell)) {
                return false;
              }
            }
 else {
              versionOk=true;
            }
          }
          if (versionOk) {
            SaveProgressDialog spd=new SaveProgressDialog(shell,rep,meta,versionComment);
            if (spd.open()) {
              saved=true;
              if (!props.getSaveConfirmation()) {
                MessageDialogWithToggle md=new MessageDialogWithToggle(shell,BaseMessages.getString(PKG,"Spoon.Message.Warning.SaveOK"),null,BaseMessages.getString(PKG,"Spoon.Message.Warning.TransformationWasStored"),MessageDialog.QUESTION,new String[]{BaseMessages.getString(PKG,"Spoon.Message.Warning.OK")},0,BaseMessages.getString(PKG,"Spoon.Message.Warning.NotShowThisMessage"),props.getSaveConfirmation());
                MessageDialogWithToggle.setDefaultImage(GUIResource.getInstance().getImageSpoon());
                md.open();
                props.setSaveConfirmation(md.getToggleState());
              }
              props.addLastFile(meta.getFileType(),meta.getName(),meta.getRepositoryDirectory().getPath(),true,getRepositoryName());
              saveSettings();
              addMenuLast();
              setShellText();
            }
          }
        }
  finally {
          shell.setCursor(null);
        }
      }
      return saved;
    }
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
    mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.NoRepositoryConnection.Message"));
    mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.NoRepositoryConnection.Title"));
    mb.open();
  }
  return false;
}
