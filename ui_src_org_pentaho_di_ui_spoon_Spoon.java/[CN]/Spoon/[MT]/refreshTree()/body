{
  if (shell.isDisposed() || !viewSelected) {
    return;
  }
  if (selectionTree == null || selectionTree.isDisposed()) {
    createSelectionTree();
  }
  GUIResource guiResource=GUIResource.getInstance();
  TransMeta activeTransMeta=getActiveTransformation();
  JobMeta activeJobMeta=getActiveJob();
  boolean showAll=activeTransMeta == null && activeJobMeta == null;
  selectionTree.removeAll();
  if (!props.isOnlyActiveFileShownInTree() || showAll || activeTransMeta != null) {
    TreeItem tiTrans=new TreeItem(selectionTree,SWT.NONE);
    tiTrans.setText(STRING_TRANSFORMATIONS);
    tiTrans.setImage(GUIResource.getInstance().getImageFolder());
    if (props.isOnlyActiveFileShownInTree()) {
      TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiTrans,true);
    }
    for (    TabMapEntry entry : delegates.tabs.getTabs()) {
      Object managedObject=entry.getObject().getManagedObject();
      if (managedObject instanceof TransMeta) {
        TransMeta transMeta=(TransMeta)managedObject;
        if (!props.isOnlyActiveFileShownInTree() || showAll || (activeTransMeta != null && activeTransMeta.equals(transMeta))) {
          String name=delegates.tabs.makeTabName(transMeta,entry.isShowingLocation());
          if (Utils.isEmpty(name)) {
            name=STRING_TRANS_NO_NAME;
          }
          TreeItem tiTransName=createTreeItem(tiTrans,name,guiResource.getImageTransTree());
          if (props.isOnlyActiveFileShownInTree()) {
            TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiTransName,true);
          }
          refreshDbConnectionsSubtree(tiTransName,transMeta,guiResource);
          refreshStepsSubtree(tiTransName,transMeta,guiResource);
          refreshHopsSubtree(tiTransName,transMeta,guiResource);
          refreshPartitionsSubtree(tiTransName,transMeta,guiResource);
          refreshSlavesSubtree(tiTransName,transMeta,guiResource);
          refreshClustersSubtree(tiTransName,transMeta,guiResource);
          refreshSelectionTreeExtension(tiTransName,transMeta,guiResource);
        }
      }
    }
  }
  if (!props.isOnlyActiveFileShownInTree() || showAll || activeJobMeta != null) {
    TreeItem tiJobs=new TreeItem(selectionTree,SWT.NONE);
    tiJobs.setText(STRING_JOBS);
    tiJobs.setImage(GUIResource.getInstance().getImageFolder());
    if (props.isOnlyActiveFileShownInTree()) {
      tiJobs.setExpanded(true);
      TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiJobs,true);
    }
    for (    TabMapEntry entry : delegates.tabs.getTabs()) {
      Object managedObject=entry.getObject().getManagedObject();
      if (managedObject instanceof JobMeta) {
        JobMeta jobMeta=(JobMeta)managedObject;
        if (!props.isOnlyActiveFileShownInTree() || showAll || (activeJobMeta != null && activeJobMeta.equals(jobMeta))) {
          String name=delegates.tabs.makeTabName(jobMeta,entry.isShowingLocation());
          if (Utils.isEmpty(name)) {
            name=STRING_JOB_NO_NAME;
          }
          if (!filterMatch(name)) {
            continue;
          }
          TreeItem tiJobName=createTreeItem(tiJobs,name,guiResource.getImageJobTree());
          if (props.isOnlyActiveFileShownInTree()) {
            TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiJobName,true);
          }
          refreshDbConnectionsSubtree(tiJobName,jobMeta,guiResource);
          refreshJobEntriesSubtree(tiJobName,jobMeta,guiResource);
          refreshSelectionTreeExtension(tiJobName,jobMeta,guiResource);
          refreshSlavesSubtree(tiJobName,jobMeta,guiResource);
        }
      }
    }
  }
  TreeMemory.setExpandedFromMemory(selectionTree,STRING_SPOON_MAIN_TREE);
  selectionTree.setFocus();
  selectionTree.layout();
  variableComposite.layout(true,true);
  setShellText();
}
