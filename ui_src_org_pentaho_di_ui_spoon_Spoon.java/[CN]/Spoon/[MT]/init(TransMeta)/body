{
  FormLayout layout=new FormLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  shell.setLayout(layout);
  addFileListener(new TransFileListener());
  addFileListener(new JobFileListener());
  if (ti != null) {
    delegates.trans.addTransformation(ti);
  }
  loadSettings();
  transExecutionConfiguration=new TransExecutionConfiguration();
  transExecutionConfiguration.setGatheringMetrics(true);
  transPreviewExecutionConfiguration=new TransExecutionConfiguration();
  transPreviewExecutionConfiguration.setGatheringMetrics(true);
  transDebugExecutionConfiguration=new TransExecutionConfiguration();
  transDebugExecutionConfiguration.setGatheringMetrics(true);
  jobExecutionConfiguration=new JobExecutionConfiguration();
  variables=new RowMetaAndData(new RowMeta());
  Image[] images={GUIResource.getInstance().getImageSpoonHigh(),GUIResource.getInstance().getImageSpoon()};
  shell.setImages(images);
  cursor_hourglass=new Cursor(display,SWT.CURSOR_WAIT);
  cursor_hand=new Cursor(display,SWT.CURSOR_HAND);
  Composite sashComposite=null;
  MainSpoonPerspective mainPerspective=null;
  try {
    KettleXulLoader xulLoader=new KettleXulLoader();
    xulLoader.setIconsSize(16,16);
    xulLoader.setOuterContext(shell);
    xulLoader.setSettingsManager(XulSpoonSettingsManager.getInstance());
    ApplicationWindowLocal.setApplicationWindow(this);
    mainSpoonContainer=xulLoader.loadXul(XUL_FILE_MAIN,new XulSpoonResourceBundle());
    BindingFactory bf=new DefaultBindingFactory();
    bf.setDocument(mainSpoonContainer.getDocumentRoot());
    mainSpoonContainer.addEventHandler(this);
    mainSpoonContainer.getDocumentRoot().getElementById("spoon-menubar");
    mainToolbar=(XulToolbar)mainSpoonContainer.getDocumentRoot().getElementById("main-toolbar");
    props.setLook((Control)mainToolbar.getManagedObject(),Props.WIDGET_STYLE_TOOLBAR);
    mainSpoonContainer.getDocumentRoot().getElementById("trans-job-canvas");
    deck=(SwtDeck)mainSpoonContainer.getDocumentRoot().getElementById("canvas-deck");
    final Composite tempSashComposite=new Composite(shell,SWT.None);
    sashComposite=tempSashComposite;
    mainPerspective=new MainSpoonPerspective(tempSashComposite,tabfolder);
    if (startupPerspective == null) {
      startupPerspective=mainPerspective.getId();
    }
    SpoonPerspectiveManager.getInstance().setStartupPerspective(startupPerspective);
    SpoonPerspectiveManager.getInstance().addPerspective(mainPerspective);
    SpoonPluginManager.getInstance().applyPluginsForContainer("spoon",mainSpoonContainer);
    SpoonPerspectiveManager.getInstance().setDeck(deck);
    SpoonPerspectiveManager.getInstance().setXulDoc(mainSpoonContainer);
    SpoonPerspectiveManager.getInstance().initialize();
  }
 catch (  Exception e) {
    LogChannel.GENERAL.logError("Error initializing transformation",e);
  }
  WindowProperty windowProperty=props.getScreen(APP_TITLE);
  if (windowProperty != null) {
    windowProperty.setShell(shell);
  }
 else {
    shell.pack();
    shell.setMaximized(true);
  }
  layout=new FormLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  GridData data=new GridData();
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  data.verticalAlignment=SWT.FILL;
  data.horizontalAlignment=SWT.FILL;
  sashComposite.setLayoutData(data);
  sashComposite.setLayout(layout);
  sashform=new SashForm(sashComposite,SWT.HORIZONTAL);
  FormData fdSash=new FormData();
  fdSash.left=new FormAttachment(0,0);
  fdSash.top=new FormAttachment(0,0);
  fdSash.bottom=new FormAttachment(100,0);
  fdSash.right=new FormAttachment(100,0);
  sashform.setLayoutData(fdSash);
  createPopupMenus();
  addTree();
  addTabs();
  mainPerspective.setTabset(this.tabfolder);
  ((Composite)deck.getManagedObject()).layout(true,true);
  SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.STARTUP);
  if (props.showWelcomePageOnStartup()) {
    showWelcomePage();
  }
  int operations=DND.DROP_COPY | DND.DROP_DEFAULT;
  DropTarget target=new DropTarget(shell,operations);
  final FileTransfer fileTransfer=FileTransfer.getInstance();
  Transfer[] types=new Transfer[]{fileTransfer};
  target.setTransfer(types);
  target.addDropListener(new DropTargetListener(){
    @Override public void dragEnter(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_SELECT | DND.FEEDBACK_SCROLL;
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
    }
    @Override public void dragLeave(    DropTargetEvent event){
    }
    @Override public void dropAccept(    DropTargetEvent event){
    }
    @Override public void drop(    DropTargetEvent event){
      if (fileTransfer.isSupportedType(event.currentDataType)) {
        String[] files=(String[])event.data;
        for (        String file : files) {
          openFile(file,false);
        }
      }
    }
  }
);
  PluginRegistry.getInstance().addPluginListener(StepPluginType.class,new PluginTypeListener(){
    @Override public void pluginAdded(    Object serviceObject){
      previousShowTrans=false;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          refreshCoreObjects();
        }
      }
);
    }
    @Override public void pluginRemoved(    Object serviceObject){
      previousShowTrans=false;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          refreshCoreObjects();
        }
      }
);
    }
    @Override public void pluginChanged(    Object serviceObject){
    }
  }
);
}
