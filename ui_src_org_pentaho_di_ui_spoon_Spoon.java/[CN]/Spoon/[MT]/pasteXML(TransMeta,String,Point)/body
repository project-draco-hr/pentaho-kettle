{
  if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.MODIFY_TRANSFORMATION,RepositoryOperation.EXECUTE_TRANSFORMATION)) {
    return;
  }
  try {
    Document doc=XMLHandler.loadXMLString(clipcontent);
    Node transNode=XMLHandler.getSubNode(doc,Spoon.XML_TAG_TRANSFORMATION_STEPS);
    transMeta.unselectAll();
    Node stepsNode=XMLHandler.getSubNode(transNode,"steps");
    int nr=XMLHandler.countNodes(stepsNode,"step");
    if (getLog().isDebug()) {
      getLog().logDebug(BaseMessages.getString(PKG,"Spoon.Log.FoundSteps","" + nr) + loc);
    }
    StepMeta[] steps=new StepMeta[nr];
    ArrayList<String> stepOldNames=new ArrayList<String>(nr);
    Point min=new Point(99999999,99999999);
    for (int i=0; i < nr; i++) {
      Node stepNode=XMLHandler.getSubNodeByNr(stepsNode,"step",i);
      steps[i]=new StepMeta(stepNode,transMeta.getDatabases(),metaStore);
      if (loc != null) {
        Point p=steps[i].getLocation();
        if (min.x > p.x) {
          min.x=p.x;
        }
        if (min.y > p.y) {
          min.y=p.y;
        }
      }
    }
    Node hopsNode=XMLHandler.getSubNode(transNode,"order");
    nr=XMLHandler.countNodes(hopsNode,"hop");
    if (getLog().isDebug()) {
      getLog().logDebug(BaseMessages.getString(PKG,"Spoon.Log.FoundHops","" + nr));
    }
    TransHopMeta[] hops=new TransHopMeta[nr];
    ArrayList<StepMeta> alSteps=new ArrayList<StepMeta>();
    Collections.addAll(alSteps,steps);
    for (int i=0; i < nr; i++) {
      Node hopNode=XMLHandler.getSubNodeByNr(hopsNode,"hop",i);
      hops[i]=new TransHopMeta(hopNode,alSteps);
    }
    Point offset=new Point(loc.x - min.x,loc.y - min.y);
    int[] position=new int[steps.length];
    for (int i=0; i < steps.length; i++) {
      Point p=steps[i].getLocation();
      String name=steps[i].getName();
      steps[i].setLocation(p.x + offset.x,p.y + offset.y);
      steps[i].setDraw(true);
      stepOldNames.add(name);
      steps[i].setName(transMeta.getAlternativeStepname(name));
      transMeta.addStep(steps[i]);
      position[i]=transMeta.indexOfStep(steps[i]);
      steps[i].setSelected(true);
    }
    for (    TransHopMeta hop : hops) {
      transMeta.addTransHop(hop);
    }
    Node notesNode=XMLHandler.getSubNode(transNode,"notepads");
    nr=XMLHandler.countNodes(notesNode,"notepad");
    if (getLog().isDebug()) {
      getLog().logDebug(BaseMessages.getString(PKG,"Spoon.Log.FoundNotepads","" + nr));
    }
    NotePadMeta[] notes=new NotePadMeta[nr];
    for (int i=0; i < notes.length; i++) {
      Node noteNode=XMLHandler.getSubNodeByNr(notesNode,"notepad",i);
      notes[i]=new NotePadMeta(noteNode);
      Point p=notes[i].getLocation();
      notes[i].setLocation(p.x + offset.x,p.y + offset.y);
      transMeta.addNote(notes[i]);
      notes[i].setSelected(true);
    }
    for (    StepMeta step : steps) {
      StepMetaInterface smi=step.getStepMetaInterface();
      smi.searchInfoAndTargetSteps(transMeta.getSteps());
    }
    Node errorHandlingNode=XMLHandler.getSubNode(transNode,TransMeta.XML_TAG_STEP_ERROR_HANDLING);
    int nrErrorHandlers=XMLHandler.countNodes(errorHandlingNode,StepErrorMeta.XML_TAG);
    for (int i=0; i < nrErrorHandlers; i++) {
      Node stepErrorMetaNode=XMLHandler.getSubNodeByNr(errorHandlingNode,StepErrorMeta.XML_TAG,i);
      StepErrorMeta stepErrorMeta=new StepErrorMeta(transMeta.getParentVariableSpace(),stepErrorMetaNode,transMeta.getSteps());
      int srcStepPos=stepOldNames.indexOf(stepErrorMeta.getSourceStep().getName());
      int tgtStepPos=stepOldNames.indexOf(stepErrorMeta.getTargetStep().getName());
      StepMeta sourceStep=transMeta.findStep(steps[srcStepPos].getName());
      if (sourceStep != null) {
        sourceStep.setStepErrorMeta(stepErrorMeta);
      }
      StepMeta targetStep=transMeta.findStep(steps[tgtStepPos].getName());
      stepErrorMeta.setSourceStep(sourceStep);
      stepErrorMeta.setTargetStep(targetStep);
    }
    addUndoNew(transMeta,steps,position,false);
    int[] hopPos=new int[hops.length];
    for (int i=0; i < hops.length; i++) {
      hopPos[i]=transMeta.indexOfTransHop(hops[i]);
    }
    addUndoNew(transMeta,hops,hopPos,true);
    int[] notePos=new int[notes.length];
    for (int i=0; i < notes.length; i++) {
      notePos[i]=transMeta.indexOfNote(notes[i]);
    }
    addUndoNew(transMeta,notes,notePos,true);
    if (transMeta.haveStepsChanged()) {
      refreshTree();
      refreshGraph();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.UnablePasteSteps.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.UnablePasteSteps.Message"),e);
  }
}
