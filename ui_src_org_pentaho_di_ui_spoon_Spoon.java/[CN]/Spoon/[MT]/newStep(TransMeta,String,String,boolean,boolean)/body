{
  StepMeta inf=null;
  if (rename && transMeta.findStep(name) != null) {
    int i=2;
    String newname=name + " " + i;
    while (transMeta.findStep(newname) != null) {
      i++;
      newname=name + " " + i;
    }
    name=newname;
  }
  PluginRegistry registry=PluginRegistry.getInstance();
  PluginInterface stepPlugin=null;
  try {
    stepPlugin=registry.findPluginWithName(StepPluginType.class,description);
    if (stepPlugin != null) {
      StepMetaInterface info=(StepMetaInterface)registry.loadClass(stepPlugin);
      info.setDefault();
      if (openit) {
        StepDialogInterface dialog=this.getStepEntryDialog(info,transMeta,name);
        if (dialog != null) {
          name=dialog.open();
        }
      }
      inf=new StepMeta(stepPlugin.getIds()[0],name,info);
      if (name != null) {
        String newname=name;
        StepMeta stepMeta=transMeta.findStep(newname);
        int nr=2;
        while (stepMeta != null) {
          newname=name + " " + nr;
          stepMeta=transMeta.findStep(newname);
          nr++;
        }
        if (nr > 2) {
          inf.setName(newname);
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_INFORMATION);
          mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.ChangeStepname.Message",newname));
          mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.ChangeStepname.Title"));
          mb.open();
        }
        inf.setLocation(20,20);
        transMeta.addStep(inf);
        if (openit) {
          addUndoNew(transMeta,new StepMeta[]{inf},new int[]{transMeta.indexOfStep(inf)});
        }
        props.increasePluginHistory(stepPlugin.getIds()[0]);
        refreshTree();
      }
 else {
        return null;
      }
      setShellText();
    }
  }
 catch (  KettleException e) {
    String filename=stepPlugin.getErrorHelpFile();
    if (stepPlugin != null && !Const.isEmpty(filename)) {
      FileInputStream fis=null;
      try {
        StringBuffer content=new StringBuffer();
        fis=new FileInputStream(new File(filename));
        int ch=fis.read();
        while (ch >= 0) {
          content.append((char)ch);
          ch=fis.read();
        }
        ShowBrowserDialog sbd=new ShowBrowserDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorHelpText.Title"),content.toString());
        sbd.open();
      }
 catch (      Exception ex) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorShowingHelpText.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorShowingHelpText.Message"),ex);
      }
 finally {
        if (fis != null) {
          try {
            fis.close();
          }
 catch (          Exception ex) {
            log.logError("Error closing plugin help file",ex);
          }
        }
      }
    }
 else {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.UnableCreateNewStep.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.UnableCreateNewStep.Message"),e);
    }
    return null;
  }
catch (  Throwable e) {
    if (!shell.isDisposed())     new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorCreatingStep.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.UnableCreateNewStep.Message"),e);
    return null;
  }
  return inf;
}
