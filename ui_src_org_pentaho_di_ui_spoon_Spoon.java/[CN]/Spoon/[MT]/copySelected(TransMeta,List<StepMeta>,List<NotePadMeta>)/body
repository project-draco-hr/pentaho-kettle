{
  if (steps == null || steps.size() == 0) {
    return;
  }
  StringBuilder xml=new StringBuilder(5000).append(XMLHandler.getXMLHeader());
  try {
    xml.append(XMLHandler.openTag(Spoon.XML_TAG_TRANSFORMATION_STEPS)).append(Const.CR);
    xml.append(XMLHandler.openTag(Spoon.XML_TAG_STEPS)).append(Const.CR);
    for (    StepMeta step : steps) {
      xml.append(step.getXML());
    }
    xml.append(XMLHandler.closeTag(Spoon.XML_TAG_STEPS)).append(Const.CR);
    xml.append(XMLHandler.openTag(TransMeta.XML_TAG_ORDER)).append(Const.CR);
    for (    StepMeta step1 : steps) {
      for (      StepMeta step2 : steps) {
        if (step1 != step2) {
          TransHopMeta hop=transMeta.findTransHop(step1,step2,true);
          if (hop != null) {
            xml.append(hop.getXML()).append(Const.CR);
          }
        }
      }
    }
    xml.append(XMLHandler.closeTag(TransMeta.XML_TAG_ORDER)).append(Const.CR);
    xml.append(XMLHandler.openTag(TransMeta.XML_TAG_NOTEPADS)).append(Const.CR);
    if (notes != null) {
      for (      NotePadMeta note : notes) {
        xml.append(note.getXML());
      }
    }
    xml.append(XMLHandler.closeTag(TransMeta.XML_TAG_NOTEPADS)).append(Const.CR);
    xml.append(XMLHandler.openTag(TransMeta.XML_TAG_STEP_ERROR_HANDLING)).append(Const.CR);
    for (    StepMeta step : steps) {
      if (step.getStepErrorMeta() != null) {
        xml.append(step.getStepErrorMeta().getXML()).append(Const.CR);
      }
    }
    xml.append(XMLHandler.closeTag(TransMeta.XML_TAG_STEP_ERROR_HANDLING)).append(Const.CR);
    xml.append(XMLHandler.closeTag(Spoon.XML_TAG_TRANSFORMATION_STEPS)).append(Const.CR);
    toClipboard(xml.toString());
  }
 catch (  Exception ex) {
    new ErrorDialog(getShell(),"Error","Error encoding to XML",ex);
  }
}
