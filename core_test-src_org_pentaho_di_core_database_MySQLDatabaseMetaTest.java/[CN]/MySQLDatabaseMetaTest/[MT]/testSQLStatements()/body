{
  assertEquals(" LIMIT 15",nativeMeta.getLimitClause(15));
  assertEquals("SELECT * FROM FOO LIMIT 0",nativeMeta.getSQLQueryFields("FOO"));
  assertEquals("SELECT * FROM FOO LIMIT 0",nativeMeta.getSQLTableExists("FOO"));
  assertEquals("SELECT FOO FROM BAR LIMIT 0",nativeMeta.getSQLQueryColumnFields("FOO","BAR"));
  assertEquals("ALTER TABLE FOO ADD BAR DATETIME",nativeMeta.getAddColumnStatement("FOO",new ValueMetaDate("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DATETIME",nativeMeta.getAddColumnStatement("FOO",new ValueMetaTimestamp("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR CHAR(1)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBoolean("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",10,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",10,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR",10,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR INT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",0,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR INT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",5,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DOUBLE",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",10,3),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DOUBLE",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",10,3),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DECIMAL(21, 4)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",21,4),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR MEDIUMTEXT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",nativeMeta.getMaxVARCHARLength() + 2,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR VARCHAR(15)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DOUBLE",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",10,-7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DECIMAL(22, 7)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",22,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DOUBLE",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",-10,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DOUBLE",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",5,7),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR  UNKNOWN",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInternetAddress("BAR"),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT AUTO_INCREMENT NOT NULL PRIMARY KEY",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR"),"BAR",true,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT AUTO_INCREMENT NOT NULL PRIMARY KEY",nativeMeta.getAddColumnStatement("FOO",new ValueMetaNumber("BAR",26,8),"BAR",true,"",false));
  String lineSep=System.getProperty("line.separator");
  assertEquals("ALTER TABLE FOO DROP BAR" + lineSep,nativeMeta.getDropColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",true));
  assertEquals("ALTER TABLE FOO MODIFY BAR VARCHAR(15)",nativeMeta.getModifyColumnStatement("FOO",new ValueMetaString("BAR",15,0),"",false,"",true));
  assertEquals("ALTER TABLE FOO MODIFY BAR TINYTEXT",nativeMeta.getModifyColumnStatement("FOO",new ValueMetaString("BAR"),"",false,"",true));
  odbcMeta.setSupportsBooleanDataType(true);
  assertEquals("ALTER TABLE FOO ADD BAR BOOLEAN",odbcMeta.getAddColumnStatement("FOO",new ValueMetaBoolean("BAR"),"",false,"",false));
  odbcMeta.setSupportsBooleanDataType(false);
  assertEquals("ALTER TABLE FOO ADD BAR INT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR",4,0),"",true,"",false));
  odbcMeta.setSupportsBooleanDataType(true);
  assertEquals("ALTER TABLE FOO ADD BAR BOOLEAN",odbcMeta.getAddColumnStatement("FOO",new ValueMetaBoolean("BAR"),"",false,"",false));
  odbcMeta.setSupportsBooleanDataType(false);
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT NOT NULL PRIMARY KEY",nativeMeta.getAddColumnStatement("FOO",new ValueMetaInteger("BAR"),"BAR",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR BIGINT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",10,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR DECIMAL(22)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBigNumber("BAR",22,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR CHAR(1)",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",1,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR LONGTEXT",nativeMeta.getAddColumnStatement("FOO",new ValueMetaString("BAR",16777250,0),"",false,"",false));
  assertEquals("ALTER TABLE FOO ADD BAR LONGBLOB",nativeMeta.getAddColumnStatement("FOO",new ValueMetaBinary("BAR",16777250,0),"",false,"",false));
  assertEquals("LOCK TABLES FOO WRITE, BAR WRITE;" + lineSep,nativeMeta.getSQLLockTables(new String[]{"FOO","BAR"}));
  assertEquals("UNLOCK TABLES",nativeMeta.getSQLUnlockTables(new String[]{}));
  assertEquals("insert into FOO(FOOKEY, FOOVERSION) values (1, 1)",nativeMeta.getSQLInsertAutoIncUnknownDimensionRow("FOO","FOOKEY","FOOVERSION"));
}
