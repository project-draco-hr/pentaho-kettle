{
  assertArrayEquals(new int[]{DatabaseMeta.TYPE_ACCESS_NATIVE,DatabaseMeta.TYPE_ACCESS_ODBC,DatabaseMeta.TYPE_ACCESS_JNDI},nativeMeta.getAccessTypeList());
  assertEquals(3306,nativeMeta.getDefaultDatabasePort());
  assertEquals(-1,odbcMeta.getDefaultDatabasePort());
  assertTrue(nativeMeta.supportsAutoInc());
  assertEquals(1,nativeMeta.getNotFoundTK(true));
  assertEquals(0,nativeMeta.getNotFoundTK(false));
  assertEquals("org.gjt.mm.mysql.Driver",nativeMeta.getDriverClass());
  assertEquals("sun.jdbc.odbc.JdbcOdbcDriver",odbcMeta.getDriverClass());
  assertEquals("jdbc:odbc:FOO",odbcMeta.getURL("IGNORED","IGNORED","FOO"));
  assertEquals("jdbc:mysql://FOO:BAR/WIBBLE",nativeMeta.getURL("FOO","BAR","WIBBLE"));
  assertEquals("jdbc:mysql://FOO/WIBBLE",nativeMeta.getURL("FOO","","WIBBLE"));
  assertEquals("&",nativeMeta.getExtraOptionSeparator());
  assertEquals("?",nativeMeta.getExtraOptionIndicator());
  assertFalse(nativeMeta.supportsTransactions());
  assertFalse(nativeMeta.supportsBitmapIndex());
  assertTrue(nativeMeta.supportsViews());
  assertFalse(nativeMeta.supportsSynonyms());
  assertArrayEquals(new String[]{"ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BIGINT","BINARY","BLOB","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHAR","CHARACTER","CHECK","COLLATE","COLUMN","CONDITION","CONNECTION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEC","DECIMAL","DECLARE","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DOUBLE","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FLOAT","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GOTO","GRANT","GROUP","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","INT","INTEGER","INTERVAL","INTO","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MATCH","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NULL","NUMERIC","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","POSITION","PRECISION","PRIMARY","PROCEDURE","PURGE","READ","READS","REAL","REFERENCES","REGEXP","RENAME","REPEAT","REPLACE","REQUIRE","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SMALLINT","SONAME","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STRAIGHT_JOIN","TABLE","TERMINATED","THEN","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARYING","WHEN","WHERE","WHILE","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"},nativeMeta.getReservedWords());
  assertEquals("`",nativeMeta.getStartQuote());
  assertEquals("`",nativeMeta.getEndQuote());
  assertTrue(nativeMeta.needsToLockAllTables());
  assertEquals("http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html",nativeMeta.getExtraOptionsHelpText());
  assertArrayEquals(new String[]{"mysql-connector-java-3.1.14-bin.jar"},nativeMeta.getUsedLibraries());
  assertTrue(nativeMeta.isSystemTable("sysTest"));
  assertTrue(nativeMeta.isSystemTable("dtproperties"));
  assertFalse(nativeMeta.isSystemTable("SysTest"));
  assertFalse(nativeMeta.isSystemTable("dTproperties"));
  assertFalse(nativeMeta.isSystemTable("Testsys"));
  assertTrue(nativeMeta.isMySQLVariant());
  assertFalse(nativeMeta.releaseSavepoint());
  assertTrue(nativeMeta.supportsErrorHandlingOnBatchUpdates());
  assertFalse(nativeMeta.isRequiringTransactionsOnQueries());
  assertTrue(nativeMeta.supportsRepository());
}
