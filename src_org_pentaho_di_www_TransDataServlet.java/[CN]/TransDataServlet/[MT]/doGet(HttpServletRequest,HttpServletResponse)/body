{
  if (isJettyMode() && !request.getContextPath().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"GetStatusServlet.StatusRequested"));
  response.setStatus(HttpServletResponse.SC_OK);
  response.setContentType("binary/jdbc");
  response.setBufferSize(10000);
  final OutputStream outputStream=response.getOutputStream();
  final DataOutputStream dos=new DataOutputStream(outputStream);
  String sqlQuery=request.getHeader("SQL");
  final int maxRows=Const.toInt(request.getHeader("MaxRows"),-1);
  final String debugTransFile=request.getHeader(ThinConnection.ARG_DEBUGTRANS);
  Map<String,String> parameters=getParametersFromRequestHeader(request);
  try {
    List<TransDataService> services=new ArrayList<TransDataService>(transformationMap.getSlaveServerConfig().getServices());
    Repository repository=transformationMap.getSlaveServerConfig().getRepository();
    if (repository != null) {
      List<DataServiceMeta> dataServices=repository.listDataServices();
      for (      DataServiceMeta dataService : dataServices) {
        if (!Const.isEmpty(dataService.getName()) && !Const.isEmpty(dataService.getStepname())) {
          services.add(new TransDataService(dataService.getName(),null,dataService.getObjectId(),dataService.getStepname(),null,dataService.getCacheMethod()));
        }
      }
    }
    final SqlTransExecutor executor=new SqlTransExecutor(sqlQuery,services,parameters,repository,0);
    dos.writeUTF(executor.getServiceName());
    dos.writeUTF(SqlTransExecutor.calculateTransname(executor.getSql(),true));
    String serviceContainerObjectId=UUID.randomUUID().toString();
    dos.writeUTF(serviceContainerObjectId);
    dos.writeUTF(SqlTransExecutor.calculateTransname(executor.getSql(),false));
    String genContainerObjectId=UUID.randomUUID().toString();
    dos.writeUTF(genContainerObjectId);
    final AtomicBoolean firstRow=new AtomicBoolean(true);
    final AtomicInteger rowCounter=new AtomicInteger(0);
    final AtomicBoolean wroteRowMeta=new AtomicBoolean(false);
    executor.executeQuery(new RowAdapter(){
      @Override public void rowWrittenEvent(      RowMetaInterface rowMeta,      Object[] row) throws KettleStepException {
        try {
          if (firstRow.get()) {
            firstRow.set(false);
            rowMeta.writeMeta(dos);
            wroteRowMeta.set(true);
          }
          rowMeta.writeData(dos,row);
          if (maxRows > 0 && rowCounter.incrementAndGet() > maxRows) {
            executor.getServiceTrans().stopAll();
          }
          dataSize.set(dos.size());
        }
 catch (        Exception e) {
          if (!executor.getServiceTrans().isStopped()) {
            throw new KettleStepException(e);
          }
        }
      }
    }
);
    TransMeta serviceTransMeta=executor.getGenTransMeta();
    Trans serviceTrans=executor.getServiceTrans();
    if (serviceTrans != null) {
      TransConfiguration serviceTransConfiguration=new TransConfiguration(serviceTransMeta,new TransExecutionConfiguration());
      transformationMap.addTransformation(serviceTransMeta.getName(),serviceContainerObjectId,serviceTrans,serviceTransConfiguration);
    }
    TransMeta genTransMeta=executor.getGenTransMeta();
    Trans genTrans=executor.getGenTrans();
    TransConfiguration genTransConfiguration=new TransConfiguration(genTransMeta,new TransExecutionConfiguration());
    transformationMap.addTransformation(genTransMeta.getName(),genContainerObjectId,genTrans,genTransConfiguration);
    if (!Const.isEmpty(debugTransFile)) {
      try {
        FileOutputStream fos=new FileOutputStream(debugTransFile);
        fos.write(XMLHandler.getXMLHeader(Const.XML_ENCODING).getBytes(Const.XML_ENCODING));
        fos.write(genTransMeta.getXML().getBytes(Const.XML_ENCODING));
        fos.close();
      }
 catch (      Exception fnfe) {
        throw new KettleException(fnfe);
      }
    }
    executor.waitUntilFinished();
    if (!wroteRowMeta.get()) {
      RowMetaInterface stepFields=executor.getGenTransMeta().getStepFields(executor.getResultStepName());
      stepFields.writeMeta(dos);
    }
  }
 catch (  Exception e) {
    log.logError("Error executing SQL query: " + sqlQuery,e);
    response.sendError(500,Const.getStackTracker(e));
  }
 finally {
    System.out.println("bytes written: " + dataSize);
  }
}
