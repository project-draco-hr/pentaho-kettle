{
  List<String> concatFields=new ArrayList<String>();
  List<String> concatTypes=new ArrayList<String>();
  List<String> concatLengths=new ArrayList<String>();
  List<String> concatFormats=new ArrayList<String>();
  List<String> concatPrecisions=new ArrayList<String>();
  List<String> concatCurrencies=new ArrayList<String>();
  List<String> concatDecimals=new ArrayList<String>();
  List<String> concatGroups=new ArrayList<String>();
  List<String> concatTrims=new ArrayList<String>();
  List<String> concatNulls=new ArrayList<String>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null) {
      continue;
    }
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case CONCAT_FIELDS:
      for (      StepInjectionMetaEntry lookField : lookFields.getDetails()) {
        Entry fieldEntry=Entry.findEntry(lookField.getKey());
        if (fieldEntry == Entry.CONCAT_FIELD) {
          String concatFieldname=null;
          String concatType=null;
          String concatLength=null;
          String concatFormat=null;
          String concatPrecision=null;
          String concatCurrency=null;
          String concatDecimal=null;
          String concatGroup=null;
          String concatTrim=null;
          String concatNull=null;
          List<StepInjectionMetaEntry> entries=lookField.getDetails();
          for (          StepInjectionMetaEntry entry : entries) {
            Entry metaEntry=Entry.findEntry(entry.getKey());
            if (metaEntry != null) {
              String value=(String)entry.getValue();
switch (metaEntry) {
case CONCAT_FIELDNAME:
                concatFieldname=value;
              break;
case CONCAT_TYPE:
            concatType=value;
          break;
case CONCAT_LENGTH:
        concatLength=value;
      break;
case CONCAT_FORMAT:
    concatFormat=value;
  break;
case CONCAT_PRECISION:
concatPrecision=value;
break;
case CONCAT_CURRENCY:
concatCurrency=value;
break;
case CONCAT_DECIMAL:
concatDecimal=value;
break;
case CONCAT_GROUP:
concatGroup=value;
break;
case CONCAT_TRIM:
concatTrim=value;
break;
case CONCAT_NULL:
concatNull=value;
break;
default :
break;
}
}
}
concatFields.add(concatFieldname);
concatTypes.add(concatType);
concatLengths.add(concatLength);
concatFormats.add(concatFormat);
concatPrecisions.add(concatPrecision);
concatCurrencies.add(concatCurrency);
concatDecimals.add(concatDecimal);
concatGroups.add(concatGroup);
concatTrims.add(concatTrim);
concatNulls.add(concatNull);
}
}
break;
case TARGET_FIELDNAME:
meta.setTargetFieldName(lookValue);
break;
case TARGET_LENGTH:
meta.setTargetFieldLength(Const.toInt(lookValue,0));
break;
case SEPARATOR:
meta.setSeparator(lookValue);
break;
case ENCLOSURE:
meta.setEnclosure(lookValue);
break;
case REMOVE_FIELDS:
meta.setRemoveSelectedFields("Y".equalsIgnoreCase(lookValue));
break;
case FORCE_ENCLOSURE:
meta.setEnclosureForced("Y".equalsIgnoreCase(lookValue));
break;
case DISABLE_ENCLOSURE_FIX:
meta.setEnclosureFixDisabled("Y".equalsIgnoreCase(lookValue));
break;
case HEADER:
meta.setHeaderEnabled("Y".equalsIgnoreCase(lookValue));
break;
case FOOTER:
meta.setFooterEnabled("Y".equalsIgnoreCase(lookValue));
break;
case ENCODING:
meta.setEncoding(lookValue);
break;
case RIGHT_PAD_FIELDS:
meta.setPadded("Y".equalsIgnoreCase(lookValue));
break;
case FAST_DATA_DUMP:
meta.setFastDump("Y".equalsIgnoreCase(lookValue));
break;
case SPLIT_EVERY:
meta.setSplitEvery(Const.toInt(lookValue,0));
break;
case ADD_ENDING_LINE:
meta.setEndedLine(lookValue);
break;
default :
break;
}
}
if (concatFields.size() > 0) {
TextFileField[] tff=new TextFileField[concatFields.size()];
Iterator<String> iConcatFields=concatFields.iterator();
Iterator<String> iConcatTypes=concatTypes.iterator();
Iterator<String> iConcatLengths=concatLengths.iterator();
Iterator<String> iConcatFormats=concatFormats.iterator();
Iterator<String> iConcatPrecisions=concatPrecisions.iterator();
Iterator<String> iConcatCurrencies=concatCurrencies.iterator();
Iterator<String> iConcatDecimals=concatDecimals.iterator();
Iterator<String> iConcatGroups=concatGroups.iterator();
Iterator<String> iConcatTrims=concatTrims.iterator();
Iterator<String> iConcatNulls=concatNulls.iterator();
int i=0;
while (iConcatFields.hasNext()) {
TextFileField field=new TextFileField();
field.setName(iConcatFields.next());
field.setType(ValueMetaFactory.getIdForValueMeta(iConcatTypes.next()));
field.setFormat(iConcatFormats.next());
field.setLength(Const.toInt(iConcatLengths.next(),-1));
field.setPrecision(Const.toInt(iConcatPrecisions.next(),-1));
field.setCurrencySymbol(iConcatCurrencies.next());
field.setDecimalSymbol(iConcatDecimals.next());
field.setGroupingSymbol(iConcatGroups.next());
field.setNullString(iConcatNulls.next());
field.setTrimType(ValueMetaBase.getTrimTypeByDesc(iConcatTrims.next()));
tff[i]=field;
i++;
}
meta.setOutputFields(tff);
}
}
