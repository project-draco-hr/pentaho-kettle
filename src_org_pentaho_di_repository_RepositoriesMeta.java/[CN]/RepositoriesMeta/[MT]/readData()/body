{
  clear();
  File file=new File(Const.getKettleLocalRepositoriesFile());
  if (!file.exists() || !file.isFile()) {
    log.logDetailed(BaseMessages.getString(PKG,"RepositoryMeta.Log.NoRepositoryFileInLocalDirectory",file.getAbsolutePath()));
    file=new File(Const.getKettleUserRepositoriesFile());
    if (!file.exists() || !file.isFile()) {
      return true;
    }
  }
  log.logBasic(BaseMessages.getString(PKG,"RepositoryMeta.Log.ReadingXMLFile",file.getAbsoluteFile()));
  DocumentBuilderFactory dbf;
  DocumentBuilder db;
  Document doc;
  try {
    dbf=DocumentBuilderFactory.newInstance();
    db=dbf.newDocumentBuilder();
    try {
      doc=db.parse(file);
    }
 catch (    FileNotFoundException ef) {
      InputStream is=getClass().getResourceAsStream("/org/pentaho/di/repository/repositories.xml");
      if (is != null) {
        doc=db.parse(is);
      }
 else {
        throw new KettleException(BaseMessages.getString(PKG,"RepositoryMeta.Error.OpeningFile",file.getAbsoluteFile()),ef);
      }
    }
    Node repsnode=XMLHandler.getSubNode(doc,"repositories");
    int nrconn=XMLHandler.countNodes(repsnode,"connection");
    log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.ConnectionNumber",nrconn));
    for (int i=0; i < nrconn; i++) {
      log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.LookingConnection",i));
      Node dbnode=XMLHandler.getSubNodeByNr(repsnode,"connection",i);
      DatabaseMeta dbcon=null;
      try {
        dbcon=new DatabaseMeta(dbnode);
        addDatabase(dbcon);
        log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.ReadConnection",dbcon.getName()));
      }
 catch (      Exception kpe) {
        log.logError(BaseMessages.getString(PKG,"RepositoryMeta.Error.CreatingDatabaseMeta",dbcon.getName()));
      }
    }
    int nrreps=XMLHandler.countNodes(repsnode,RepositoryMeta.XML_TAG);
    log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.RepositoryNumber",nrreps));
    StringBuffer unableToReadIds=new StringBuffer();
    KettleException kettleException=null;
    for (int i=0; i < nrreps; i++) {
      Node repnode=XMLHandler.getSubNodeByNr(repsnode,RepositoryMeta.XML_TAG,i);
      log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.LookingRepository",i));
      String id=XMLHandler.getTagValue(repnode,"id");
      if (Const.isEmpty(id)) {
        id=KettleDatabaseRepositoryMeta.REPOSITORY_TYPE_ID;
      }
      try {
        RepositoryMeta repositoryMeta=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,id,RepositoryMeta.class);
        if (repositoryMeta != null) {
          repositoryMeta.loadXML(repnode,databases);
          if (repositoryMeta.getDescription() == null || repositoryMeta.getDescription().equals("")) {
            repositoryMeta.setDescription(repositoryMeta.getName());
          }
          addRepository(repositoryMeta);
          log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Log.ReadRepository",repositoryMeta.getName()));
        }
 else {
          unableToReadIds.append(id);
          unableToReadIds.append(",");
          log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Error.ReadRepositoryId",id));
        }
      }
 catch (      KettleException ex) {
        Throwable cause=ex;
        kettleException=ex;
        while (cause.getCause() != null) {
          cause=cause.getCause();
        }
        if (cause instanceof KettleRepositoryNotSupportedException) {
          log.logDebug(BaseMessages.getString(PKG,"RepositoryMeta.Error.UnrecognizedRepositoryType",id));
        }
      }
    }
    if (unableToReadIds != null && unableToReadIds.length() > 0) {
      errorMessage=BaseMessages.getString(PKG,"RepositoryMeta.Error.ReadRepositoryIdNotAvailable",unableToReadIds.substring(0,unableToReadIds.lastIndexOf(",") - 1));
    }
    if (kettleException != null) {
      throw kettleException;
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"RepositoryMeta.Error.ReadingInfo"),e);
  }
  return true;
}
