{
  try {
    inputFiles.acceptingFilenames=rep.getStepAttributeBoolean(id_step,"accept_filenames");
    inputFiles.passingThruFields=rep.getStepAttributeBoolean(id_step,"passing_through_fields");
    inputFiles.acceptingField=rep.getStepAttributeString(id_step,"accept_field");
    inputFiles.acceptingStepName=rep.getStepAttributeString(id_step,"accept_stepname");
    content.separator=rep.getStepAttributeString(id_step,"separator");
    content.enclosure=rep.getStepAttributeString(id_step,"enclosure");
    content.breakInEnclosureAllowed=rep.getStepAttributeBoolean(id_step,"enclosure_breaks");
    content.escapeCharacter=rep.getStepAttributeString(id_step,"escapechar");
    content.header=rep.getStepAttributeBoolean(id_step,"header");
    content.nrHeaderLines=(int)rep.getStepAttributeInteger(id_step,"nr_headerlines");
    content.footer=rep.getStepAttributeBoolean(id_step,"footer");
    content.nrFooterLines=(int)rep.getStepAttributeInteger(id_step,"nr_footerlines");
    content.lineWrapped=rep.getStepAttributeBoolean(id_step,"line_wrapped");
    content.nrWraps=(int)rep.getStepAttributeInteger(id_step,"nr_wraps");
    content.layoutPaged=rep.getStepAttributeBoolean(id_step,"layout_paged");
    content.nrLinesPerPage=(int)rep.getStepAttributeInteger(id_step,"nr_lines_per_page");
    content.nrLinesDocHeader=(int)rep.getStepAttributeInteger(id_step,"nr_lines_doc_header");
    content.noEmptyLines=rep.getStepAttributeBoolean(id_step,"noempty");
    content.includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    content.filenameField=rep.getStepAttributeString(id_step,"include_field");
    content.includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    content.rowNumberByFile=rep.getStepAttributeBoolean(id_step,"rownumByFile");
    content.rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    content.fileFormat=rep.getStepAttributeString(id_step,"format");
    content.encoding=rep.getStepAttributeString(id_step,"encoding");
    String addToResult=rep.getStepAttributeString(id_step,"add_to_result_filenames");
    if (Utils.isEmpty(addToResult)) {
      inputFiles.isaddresult=true;
    }
 else {
      inputFiles.isaddresult=rep.getStepAttributeBoolean(id_step,"add_to_result_filenames");
    }
    content.rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    int nrfilters=rep.countNrStepAttributes(id_step,"filter_string");
    allocate(nrfiles,nrfields,nrfilters);
    for (int i=0; i < nrfiles; i++) {
      inputFiles.fileName[i]=loadSourceRep(rep,id_step,i);
      inputFiles.fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      inputFiles.excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      inputFiles.fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      if (!YES.equalsIgnoreCase(inputFiles.fileRequired[i])) {
        inputFiles.fileRequired[i]=NO;
      }
      inputFiles.includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
      if (!YES.equalsIgnoreCase(inputFiles.includeSubFolders[i])) {
        inputFiles.includeSubFolders[i]=NO;
      }
    }
    content.fileType=rep.getStepAttributeString(id_step,"file_type");
    content.fileCompression=rep.getStepAttributeString(id_step,"compression");
    if (content.fileCompression == null) {
      content.fileCompression="None";
      if (rep.getStepAttributeBoolean(id_step,"file_zipped")) {
        content.fileCompression="Zip";
      }
    }
    for (int i=0; i < nrfilters; i++) {
      filter[i]=new TextFileFilter();
      filter[i].setFilterPosition((int)rep.getStepAttributeInteger(id_step,i,"filter_position"));
      filter[i].setFilterString(rep.getStepAttributeString(id_step,i,"filter_string"));
      filter[i].setFilterLastLine(rep.getStepAttributeBoolean(id_step,i,"filter_is_last_line"));
      filter[i].setFilterPositive(rep.getStepAttributeBoolean(id_step,i,"filter_is_positive"));
    }
    for (int i=0; i < nrfields; i++) {
      BaseFileInputField field=new BaseFileInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setNullString(rep.getStepAttributeString(id_step,i,"field_nullif"));
      field.setIfNullValue(rep.getStepAttributeString(id_step,i,"field_ifnull"));
      field.setPosition((int)rep.getStepAttributeInteger(id_step,i,"field_position"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(ValueMetaString.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFiles.inputFields[i]=field;
    }
    errorHandling.errorIgnored=rep.getStepAttributeBoolean(id_step,"error_ignored");
    errorHandling.skipBadFiles=rep.getStepAttributeBoolean(id_step,"skip_bad_files");
    errorHandling.fileErrorField=rep.getStepAttributeString(id_step,"file_error_field");
    errorHandling.fileErrorMessageField=rep.getStepAttributeString(id_step,"file_error_message_field");
    errorLineSkipped=rep.getStepAttributeBoolean(id_step,"error_line_skipped");
    errorCountField=rep.getStepAttributeString(id_step,"error_count_field");
    errorFieldsField=rep.getStepAttributeString(id_step,"error_fields_field");
    errorTextField=rep.getStepAttributeString(id_step,"error_text_field");
    errorHandling.warningFilesDestinationDirectory=rep.getStepAttributeString(id_step,"bad_line_files_dest_dir");
    errorHandling.warningFilesExtension=rep.getStepAttributeString(id_step,"bad_line_files_ext");
    errorHandling.errorFilesDestinationDirectory=rep.getStepAttributeString(id_step,"error_line_files_dest_dir");
    errorHandling.errorFilesExtension=rep.getStepAttributeString(id_step,"error_line_files_ext");
    errorHandling.lineNumberFilesDestinationDirectory=rep.getStepAttributeString(id_step,"line_number_files_dest_dir");
    errorHandling.lineNumberFilesExtension=rep.getStepAttributeString(id_step,"line_number_files_ext");
    content.dateFormatLenient=rep.getStepAttributeBoolean(id_step,0,"date_format_lenient",true);
    String dateLocale=rep.getStepAttributeString(id_step,0,"date_format_locale");
    if (dateLocale != null) {
      content.dateFormatLocale=EnvUtil.createLocale(dateLocale);
    }
 else {
      content.dateFormatLocale=Locale.getDefault();
    }
    additionalOutputFields.shortFilenameField=rep.getStepAttributeString(id_step,"shortFileFieldName");
    additionalOutputFields.pathField=rep.getStepAttributeString(id_step,"pathFieldName");
    additionalOutputFields.hiddenField=rep.getStepAttributeString(id_step,"hiddenFieldName");
    additionalOutputFields.lastModificationField=rep.getStepAttributeString(id_step,"lastModificationTimeFieldName");
    additionalOutputFields.uriField=rep.getStepAttributeString(id_step,"uriNameFieldName");
    additionalOutputFields.rootUriField=rep.getStepAttributeString(id_step,"rootUriNameFieldName");
    additionalOutputFields.extensionField=rep.getStepAttributeString(id_step,"extensionFieldName");
    additionalOutputFields.sizeField=rep.getStepAttributeString(id_step,"sizeFieldName");
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
