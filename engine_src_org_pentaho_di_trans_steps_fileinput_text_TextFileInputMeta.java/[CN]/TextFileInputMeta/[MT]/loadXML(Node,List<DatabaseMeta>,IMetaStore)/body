{
  try {
    inputFiles.acceptingFilenames=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"accept_filenames"));
    inputFiles.passingThruFields=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"passing_through_fields"));
    inputFiles.acceptingField=XMLHandler.getTagValue(stepnode,"accept_field");
    inputFiles.acceptingStepName=XMLHandler.getTagValue(stepnode,"accept_stepname");
    content.separator=XMLHandler.getTagValue(stepnode,"separator");
    content.enclosure=XMLHandler.getTagValue(stepnode,"enclosure");
    content.breakInEnclosureAllowed=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"enclosure_breaks"));
    content.escapeCharacter=XMLHandler.getTagValue(stepnode,"escapechar");
    content.header=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"header"));
    content.nrHeaderLines=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_headerlines"),1);
    content.footer=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"footer"));
    content.nrFooterLines=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_footerlines"),1);
    content.lineWrapped=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"line_wrapped"));
    content.nrWraps=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_wraps"),1);
    content.layoutPaged=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"layout_paged"));
    content.nrLinesPerPage=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_lines_per_page"),1);
    content.nrLinesDocHeader=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_lines_doc_header"),1);
    String addToResult=XMLHandler.getTagValue(stepnode,"add_to_result_filenames");
    if (Const.isEmpty(addToResult)) {
      inputFiles.isaddresult=true;
    }
 else {
      inputFiles.isaddresult="Y".equalsIgnoreCase(addToResult);
    }
    String nempty=XMLHandler.getTagValue(stepnode,"noempty");
    content.noEmptyLines=YES.equalsIgnoreCase(nempty) || nempty == null;
    content.includeFilename=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include"));
    content.filenameField=XMLHandler.getTagValue(stepnode,"include_field");
    content.includeRowNumber=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    content.rowNumberByFile=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownumByFile"));
    content.rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    content.fileFormat=XMLHandler.getTagValue(stepnode,"format");
    content.encoding=XMLHandler.getTagValue(stepnode,"encoding");
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    Node filtersNode=XMLHandler.getSubNode(stepnode,"filters");
    int nrfiles=XMLHandler.countNodes(filenode,"name");
    int nrfields=XMLHandler.countNodes(fields,"field");
    int nrfilters=XMLHandler.countNodes(filtersNode,"filter");
    allocate(nrfiles,nrfields,nrfilters);
    for (int i=0; i < nrfiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      Node excludefilemasknode=XMLHandler.getSubNodeByNr(filenode,"exclude_filemask",i);
      Node fileRequirednode=XMLHandler.getSubNodeByNr(filenode,"file_required",i);
      Node includeSubFoldersnode=XMLHandler.getSubNodeByNr(filenode,"include_subfolders",i);
      inputFiles.fileName[i]=loadSource(filenode,filenamenode,i);
      inputFiles.fileMask[i]=XMLHandler.getNodeValue(filemasknode);
      inputFiles.excludeFileMask[i]=XMLHandler.getNodeValue(excludefilemasknode);
      inputFiles.fileRequired[i]=XMLHandler.getNodeValue(fileRequirednode);
      inputFiles.includeSubFolders[i]=XMLHandler.getNodeValue(includeSubFoldersnode);
    }
    content.fileType=XMLHandler.getTagValue(stepnode,"file","type");
    content.fileCompression=XMLHandler.getTagValue(stepnode,"file","compression");
    if (content.fileCompression == null) {
      content.fileCompression="None";
      if (YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","zipped"))) {
        content.fileCompression="Zip";
      }
    }
    if (XMLHandler.getTagValue(stepnode,"filter") != null) {
      filter=new TextFileFilter[1];
      filter[0]=new TextFileFilter();
      filter[0].setFilterPosition(Const.toInt(XMLHandler.getTagValue(stepnode,"filter_position"),-1));
      filter[0].setFilterString(XMLHandler.getTagValue(stepnode,"filter_string"));
      filter[0].setFilterLastLine(YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"filter_is_last_line")));
      filter[0].setFilterPositive(YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"filter_is_positive")));
    }
 else {
      for (int i=0; i < nrfilters; i++) {
        Node fnode=XMLHandler.getSubNodeByNr(filtersNode,"filter",i);
        filter[i]=new TextFileFilter();
        filter[i].setFilterPosition(Const.toInt(XMLHandler.getTagValue(fnode,"filter_position"),-1));
        String filterString=XMLHandler.getTagValue(fnode,"filter_string");
        if (filterString != null && filterString.startsWith(STRING_BASE64_PREFIX)) {
          filter[i].setFilterString(new String(Base64.decodeBase64(filterString.substring(STRING_BASE64_PREFIX.length()).getBytes())));
        }
 else {
          filter[i].setFilterString(filterString);
        }
        filter[i].setFilterLastLine(YES.equalsIgnoreCase(XMLHandler.getTagValue(fnode,"filter_is_last_line")));
        filter[i].setFilterPositive(YES.equalsIgnoreCase(XMLHandler.getTagValue(fnode,"filter_is_positive")));
      }
    }
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      BaseFileInputField field=new BaseFileInputField();
      field.setName(XMLHandler.getTagValue(fnode,"name"));
      field.setType(ValueMeta.getType(XMLHandler.getTagValue(fnode,"type")));
      field.setFormat(XMLHandler.getTagValue(fnode,"format"));
      field.setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      field.setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      field.setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
      field.setNullString(XMLHandler.getTagValue(fnode,"nullif"));
      field.setIfNullValue(XMLHandler.getTagValue(fnode,"ifnull"));
      field.setPosition(Const.toInt(XMLHandler.getTagValue(fnode,"position"),-1));
      field.setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      field.setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      field.setTrimType(ValueMeta.getTrimTypeByCode(XMLHandler.getTagValue(fnode,"trim_type")));
      field.setRepeated(YES.equalsIgnoreCase(XMLHandler.getTagValue(fnode,"repeat")));
      inputFiles.inputFields[i]=field;
    }
    content.rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0L);
    errorHandling.errorIgnored=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_ignored"));
    errorHandling.skipBadFiles=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"skip_bad_files"));
    errorHandling.fileErrorField=XMLHandler.getTagValue(stepnode,"file_error_field");
    errorHandling.fileErrorMessageField=XMLHandler.getTagValue(stepnode,"file_error_message_field");
    errorLineSkipped=YES.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_line_skipped"));
    errorCountField=XMLHandler.getTagValue(stepnode,"error_count_field");
    errorFieldsField=XMLHandler.getTagValue(stepnode,"error_fields_field");
    errorTextField=XMLHandler.getTagValue(stepnode,"error_text_field");
    errorHandling.warningFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"bad_line_files_destination_directory");
    errorHandling.warningFilesExtension=XMLHandler.getTagValue(stepnode,"bad_line_files_extension");
    errorHandling.errorFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"error_line_files_destination_directory");
    errorHandling.errorFilesExtension=XMLHandler.getTagValue(stepnode,"error_line_files_extension");
    errorHandling.lineNumberFilesDestinationDirectory=XMLHandler.getTagValue(stepnode,"line_number_files_destination_directory");
    errorHandling.lineNumberFilesExtension=XMLHandler.getTagValue(stepnode,"line_number_files_extension");
    content.dateFormatLenient=!NO.equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"date_format_lenient"));
    String dateLocale=XMLHandler.getTagValue(stepnode,"date_format_locale");
    if (dateLocale != null) {
      content.dateFormatLocale=EnvUtil.createLocale(dateLocale);
    }
 else {
      content.dateFormatLocale=Locale.getDefault();
    }
    additionalOutputFields.shortFilenameField=XMLHandler.getTagValue(stepnode,"shortFileFieldName");
    additionalOutputFields.pathField=XMLHandler.getTagValue(stepnode,"pathFieldName");
    additionalOutputFields.hiddenField=XMLHandler.getTagValue(stepnode,"hiddenFieldName");
    additionalOutputFields.lastModificationField=XMLHandler.getTagValue(stepnode,"lastModificationTimeFieldName");
    additionalOutputFields.uriField=XMLHandler.getTagValue(stepnode,"uriNameFieldName");
    additionalOutputFields.rootUriField=XMLHandler.getTagValue(stepnode,"rootUriNameFieldName");
    additionalOutputFields.extensionField=XMLHandler.getTagValue(stepnode,"extensionFieldName");
    additionalOutputFields.sizeField=XMLHandler.getTagValue(stepnode,"sizeFieldName");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
