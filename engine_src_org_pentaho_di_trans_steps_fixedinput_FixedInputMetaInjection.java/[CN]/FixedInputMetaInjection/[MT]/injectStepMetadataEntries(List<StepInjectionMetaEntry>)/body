{
  List<FixedFileInputField> fixedInputFields=new ArrayList<FixedFileInputField>();
  for (  StepInjectionMetaEntry lookFields : all) {
    String lookValue=(String)lookFields.getValue();
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
switch (fieldsEntry) {
case FIELDS:
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry != null) {
            if (fieldEntry == Entry.FIELD) {
              FixedFileInputField inputField=new FixedFileInputField();
              List<StepInjectionMetaEntry> entries=lookField.getDetails();
              for (              StepInjectionMetaEntry entry : entries) {
                Entry metaEntry=Entry.findEntry(entry.getKey());
                if (metaEntry != null) {
                  String value=(String)entry.getValue();
switch (metaEntry) {
case NAME:
                    inputField.setName(value);
                  break;
case TYPE:
                inputField.setType(ValueMeta.getType(value));
              break;
case WIDTH:
            inputField.setWidth(Const.toInt(value,-1));
          break;
case LENGTH:
        inputField.setLength(Const.toInt(value,-1));
      break;
case PRECISION:
    inputField.setPrecision(Const.toInt(value,-1));
  break;
case CURRENCY:
inputField.setCurrency(value);
break;
case GROUP:
inputField.setGrouping(value);
break;
case DECIMAL:
inputField.setDecimal(value);
break;
case FORMAT:
inputField.setFormat(value);
break;
case TRIM_TYPE:
inputField.setTrimType(ValueMeta.getTrimTypeByCode(value));
break;
default :
break;
}
}
}
fixedInputFields.add(inputField);
}
}
}
break;
case FILENAME:
meta.setFilename(lookValue);
break;
case HEADER_PRESENT:
meta.setHeaderPresent("Y".equalsIgnoreCase(lookValue));
break;
case LINE_WIDTH:
meta.setLineWidth(lookValue);
break;
case BUFFER_SIZE:
meta.setBufferSize(lookValue);
break;
case LAZY_CONVERSION_ACTIVE:
meta.setLazyConversionActive("Y".equalsIgnoreCase(lookValue));
break;
case LINE_FEED_PRESENT:
meta.setLineFeedPresent("Y".equalsIgnoreCase(lookValue));
break;
case RUNNING_IN_PARALLEL:
meta.setRunningInParallel("Y".equalsIgnoreCase(lookValue));
break;
case FILE_TYPE_CODE:
meta.setFileType(FixedInputMeta.getFileType(lookValue));
break;
case ADD_TO_RESULT:
meta.setAddResultFile("Y".equalsIgnoreCase(lookValue));
break;
default :
break;
}
}
}
meta.setFieldDefinition(fixedInputFields.toArray(new FixedFileInputField[fixedInputFields.size()]));
}
