{
  try {
    databaseMeta=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    bufferSize=rep.getStepAttributeString(id_step,"buffer_size");
    dbConnectionName=rep.getStepAttributeString(id_step,"db_connection_name");
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tableName=rep.getStepAttributeString(id_step,"table");
    mClientPath=rep.getStepAttributeString(id_step,"mclient_path");
    logFile=rep.getStepAttributeString(id_step,"log_file");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    truncate=Boolean.parseBoolean(rep.getStepAttributeString(id_step,"truncate"));
    autoSchema=Boolean.parseBoolean(rep.getStepAttributeString(id_step,"auto_schema"));
    autoStringWidths=Boolean.parseBoolean(rep.getStepAttributeString(id_step,"auto_string_widths"));
    int nrvalues=rep.countNrStepAttributes(id_step,"stream_name");
    allocate(nrvalues);
    for (int i=0; i < nrvalues; i++) {
      fieldTable[i]=rep.getStepAttributeString(id_step,i,"stream_name");
      fieldStream[i]=rep.getStepAttributeString(id_step,i,"field_name");
      if (fieldStream[i] == null)       fieldStream[i]=fieldTable[i];
      fieldFormatOk[i]=rep.getStepAttributeBoolean(id_step,i,"field_format_ok");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"MonetDBBulkLoaderMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository"),e);
  }
}
