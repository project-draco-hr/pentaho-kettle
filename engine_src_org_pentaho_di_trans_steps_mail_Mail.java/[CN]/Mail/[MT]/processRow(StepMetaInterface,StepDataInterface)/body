{
  meta=(MailMeta)smi;
  data=(MailData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    if (Utils.isEmpty(meta.getDestination())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.DestinationFieldEmpty"));
    }
    if (Utils.isEmpty(meta.getReplyAddress())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.ReplyFieldEmpty"));
    }
    if (Utils.isEmpty(meta.getServer())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.ServerFieldEmpty"));
    }
    if (meta.isDynamicFilename() && Utils.isEmpty(meta.getDynamicFieldname())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.DynamicFilenameFielddEmpty"));
    }
    if (meta.isZipFilenameDynamic() && Utils.isEmpty(meta.getDynamicZipFilenameField())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.DynamicZipFilenameFieldEmpty"));
    }
    if (meta.isZipFiles() && Utils.isEmpty(meta.getZipFilename())) {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.ZipFilenameEmpty"));
    }
    if (meta.isUsingAuthentication()) {
      if (Utils.isEmpty(meta.getAuthenticationUser())) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.AuthenticationUserFieldEmpty"));
      }
      if (Utils.isEmpty(meta.getAuthenticationPassword())) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Log.AuthenticationPasswordFieldEmpty"));
      }
    }
    if (data.indexOfDestination < 0) {
      String realDestinationFieldname=meta.getDestination();
      data.indexOfDestination=data.previousRowMeta.indexOfValue(realDestinationFieldname);
      if (data.indexOfDestination < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindDestinationField",realDestinationFieldname));
      }
    }
    if (!Utils.isEmpty(meta.getDestinationCc())) {
      if (data.indexOfDestinationCc < 0) {
        String realDestinationCcFieldname=meta.getDestinationCc();
        data.indexOfDestinationCc=data.previousRowMeta.indexOfValue(realDestinationCcFieldname);
        if (data.indexOfDestinationCc < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindDestinationCcField",realDestinationCcFieldname));
        }
      }
    }
    if (!Utils.isEmpty(meta.getDestinationBCc())) {
      if (data.indexOfDestinationBCc < 0) {
        String realDestinationBCcFieldname=meta.getDestinationBCc();
        data.indexOfDestinationBCc=data.previousRowMeta.indexOfValue(realDestinationBCcFieldname);
        if (data.indexOfDestinationBCc < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindDestinationBCcField",realDestinationBCcFieldname));
        }
      }
    }
    if (!Utils.isEmpty(meta.getReplyName())) {
      if (data.indexOfSenderName < 0) {
        String realSenderName=meta.getReplyName();
        data.indexOfSenderName=data.previousRowMeta.indexOfValue(realSenderName);
        if (data.indexOfSenderName < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindReplyNameField",realSenderName));
        }
      }
    }
    if (data.indexOfSenderAddress < 0) {
      String realSenderAddress=meta.getReplyAddress();
      data.indexOfSenderAddress=data.previousRowMeta.indexOfValue(realSenderAddress);
      if (data.indexOfSenderAddress < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindReplyAddressField",realSenderAddress));
      }
    }
    if (!Utils.isEmpty(meta.getReplyToAddresses())) {
      if (data.indexOfReplyToAddresses < 0) {
        String realReplyToAddresses=meta.getReplyToAddresses();
        data.indexOfReplyToAddresses=data.previousRowMeta.indexOfValue(realReplyToAddresses);
        if (data.indexOfReplyToAddresses < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindReplyToAddressesField",realReplyToAddresses));
        }
      }
    }
    if (!Utils.isEmpty(meta.getContactPerson())) {
      if (data.indexOfContactPerson < 0) {
        String realContactPerson=meta.getContactPerson();
        data.indexOfContactPerson=data.previousRowMeta.indexOfValue(realContactPerson);
        if (data.indexOfContactPerson < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindContactPersonField",realContactPerson));
        }
      }
    }
    if (!Utils.isEmpty(meta.getContactPhone())) {
      if (data.indexOfContactPhone < 0) {
        String realContactPhone=meta.getContactPhone();
        data.indexOfContactPhone=data.previousRowMeta.indexOfValue(realContactPhone);
        if (data.indexOfContactPhone < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindContactPhoneField",realContactPhone));
        }
      }
    }
    if (data.indexOfServer < 0) {
      String realServer=meta.getServer();
      data.indexOfServer=data.previousRowMeta.indexOfValue(realServer);
      if (data.indexOfServer < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindServerField",realServer));
      }
    }
    if (!Utils.isEmpty(meta.getPort())) {
      if (data.indexOfPort < 0) {
        String realPort=meta.getPort();
        data.indexOfPort=data.previousRowMeta.indexOfValue(realPort);
        if (data.indexOfPort < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindPortField",realPort));
        }
      }
    }
    if (meta.isUsingAuthentication()) {
      if (data.indexOfAuthenticationUser < 0) {
        String realAuthenticationUser=meta.getAuthenticationUser();
        data.indexOfAuthenticationUser=data.previousRowMeta.indexOfValue(realAuthenticationUser);
        if (data.indexOfAuthenticationUser < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindAuthenticationUserField",realAuthenticationUser));
        }
      }
      if (data.indexOfAuthenticationPass < 0) {
        String realAuthenticationPassword=Utils.resolvePassword(variables,meta.getAuthenticationPassword());
        data.indexOfAuthenticationPass=data.previousRowMeta.indexOfValue(realAuthenticationPassword);
        if (data.indexOfAuthenticationPass < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindAuthenticationPassField",realAuthenticationPassword));
        }
      }
    }
    if (!Utils.isEmpty(meta.getSubject())) {
      if (data.indexOfSubject < 0) {
        String realSubject=meta.getSubject();
        data.indexOfSubject=data.previousRowMeta.indexOfValue(realSubject);
        if (data.indexOfSubject < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindSubjectField",realSubject));
        }
      }
    }
    if (!Utils.isEmpty(meta.getComment())) {
      if (data.indexOfComment < 0) {
        String realComment=meta.getComment();
        data.indexOfComment=data.previousRowMeta.indexOfValue(realComment);
        if (data.indexOfComment < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindCommentField",realComment));
        }
      }
    }
    if (meta.isAttachContentFromField()) {
      String attachedContentField=meta.getAttachContentField();
      if (Utils.isEmpty(attachedContentField)) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.AttachedContentFieldEmpty"));
      }
      data.indexOfAttachedContent=data.previousRowMeta.indexOfValue(attachedContentField);
      if (data.indexOfAttachedContent < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindAttachedContentField",attachedContentField));
      }
      String attachedContentFileNameField=meta.getAttachContentFileNameField();
      if (Utils.isEmpty(attachedContentFileNameField)) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.AttachedContentFileNameFieldEmpty"));
      }
      data.IndexOfAttachedFilename=data.previousRowMeta.indexOfValue(attachedContentFileNameField);
      if (data.IndexOfAttachedFilename < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotFindAttachedContentFileNameField",attachedContentFileNameField));
      }
    }
 else {
      if (meta.isZipFilenameDynamic()) {
        if (data.indexOfDynamicZipFilename < 0) {
          String realZipFilename=meta.getDynamicZipFilenameField();
          data.indexOfDynamicZipFilename=data.previousRowMeta.indexOfValue(realZipFilename);
          if (data.indexOfDynamicZipFilename < 0) {
            throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotSourceAttachedZipFilenameField",realZipFilename));
          }
        }
      }
      data.zipFileLimit=Const.toLong(environmentSubstitute(meta.getZipLimitSize()),0);
      if (data.zipFileLimit > 0) {
        data.zipFileLimit=data.zipFileLimit * 1048576;
      }
      if (!meta.isZipFilenameDynamic()) {
        data.ZipFilename=environmentSubstitute(meta.getZipFilename());
      }
      if (meta.isDynamicFilename()) {
        if (data.indexOfSourceFilename < 0) {
          String realSourceattachedFilename=meta.getDynamicFieldname();
          data.indexOfSourceFilename=data.previousRowMeta.indexOfValue(realSourceattachedFilename);
          if (data.indexOfSourceFilename < 0) {
            throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotSourceAttachedFilenameField",realSourceattachedFilename));
          }
        }
        if (!Utils.isEmpty(meta.getSourceWildcard())) {
          if (data.indexOfSourceWildcard < 0) {
            String realSourceattachedWildcard=meta.getDynamicWildcard();
            data.indexOfSourceWildcard=data.previousRowMeta.indexOfValue(realSourceattachedWildcard);
            if (data.indexOfSourceWildcard < 0) {
              throw new KettleException(BaseMessages.getString(PKG,"Mail.Exception.CouldnotSourceAttachedWildcard",realSourceattachedWildcard));
            }
          }
        }
      }
 else {
        data.realSourceFileFoldername=environmentSubstitute(meta.getSourceFileFoldername());
        data.realSourceWildcard=environmentSubstitute(meta.getSourceWildcard());
      }
    }
    if (meta.getEmbeddedImages() != null && meta.getEmbeddedImages().length > 0) {
      FileObject image=null;
      data.embeddedMimePart=new HashSet<MimeBodyPart>();
      try {
        for (int i=0; i < meta.getEmbeddedImages().length; i++) {
          String imageFile=environmentSubstitute(meta.getEmbeddedImages()[i]);
          String contentID=environmentSubstitute(meta.getContentIds()[i]);
          image=KettleVFS.getFileObject(imageFile);
          if (image.exists() && image.getType() == FileType.FILE) {
            MimeBodyPart imagePart=new MimeBodyPart();
            URLDataSource fds=new URLDataSource(image.getURL());
            imagePart.setDataHandler(new DataHandler(fds));
            imagePart.setHeader("Content-ID","<" + contentID + ">");
            data.embeddedMimePart.add(imagePart);
            logBasic(BaseMessages.getString(PKG,"Mail.Log.ImageAdded",imageFile));
          }
 else {
            logError(BaseMessages.getString(PKG,"Mail.Log.WrongImage",imageFile));
          }
        }
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"Mail.Error.AddingImage",e.getMessage()));
      }
 finally {
        if (image != null) {
          try {
            image.close();
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    String maildestination=data.previousRowMeta.getString(r,data.indexOfDestination);
    if (Utils.isEmpty(maildestination)) {
      throw new KettleException("Mail.Error.MailDestinationEmpty");
    }
    String maildestinationCc=null;
    if (data.indexOfDestinationCc > -1) {
      maildestinationCc=data.previousRowMeta.getString(r,data.indexOfDestinationCc);
    }
    String maildestinationBCc=null;
    if (data.indexOfDestinationBCc > -1) {
      maildestinationBCc=data.previousRowMeta.getString(r,data.indexOfDestinationBCc);
    }
    String mailsendername=null;
    if (data.indexOfSenderName > -1) {
      mailsendername=data.previousRowMeta.getString(r,data.indexOfSenderName);
    }
    String mailsenderaddress=data.previousRowMeta.getString(r,data.indexOfSenderAddress);
    String mailreplyToAddresses=null;
    if (data.indexOfReplyToAddresses > -1) {
      mailreplyToAddresses=data.previousRowMeta.getString(r,data.indexOfReplyToAddresses);
    }
    String contactperson=null;
    if (data.indexOfContactPerson > -1) {
      contactperson=data.previousRowMeta.getString(r,data.indexOfContactPerson);
    }
    String contactphone=null;
    if (data.indexOfContactPhone > -1) {
      contactphone=data.previousRowMeta.getString(r,data.indexOfContactPhone);
    }
    String servername=data.previousRowMeta.getString(r,data.indexOfServer);
    if (Utils.isEmpty(servername)) {
      throw new KettleException("Mail.Error.MailServerEmpty");
    }
    int port=-1;
    if (data.indexOfPort > -1) {
      port=Const.toInt("" + data.previousRowMeta.getInteger(r,data.indexOfPort),-1);
    }
    String authuser=null;
    if (data.indexOfAuthenticationUser > -1) {
      authuser=data.previousRowMeta.getString(r,data.indexOfAuthenticationUser);
    }
    String authpass=null;
    if (data.indexOfAuthenticationPass > -1) {
      authpass=data.previousRowMeta.getString(r,data.indexOfAuthenticationPass);
    }
    String subject=null;
    if (data.indexOfSubject > -1) {
      subject=data.previousRowMeta.getString(r,data.indexOfSubject);
    }
    String comment=null;
    if (data.indexOfComment > -1) {
      comment=data.previousRowMeta.getString(r,data.indexOfComment);
    }
    sendMail(r,servername,port,mailsenderaddress,mailsendername,maildestination,maildestinationCc,maildestinationBCc,contactperson,contactphone,authuser,authpass,subject,comment,mailreplyToAddresses);
    putRow(getInputRowMeta(),r);
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"Mail.Log.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
    }
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleException(BaseMessages.getString(PKG,"Mail.Error.General"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"MAIL001");
    }
  }
  return true;
}
