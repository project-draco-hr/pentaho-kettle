{
  String protocol="smtp";
  if (meta.isUsingSecureAuthentication()) {
    if (meta.getSecureConnectionType().equals("TLS")) {
      data.props.put("mail.smtp.starttls.enable","true");
    }
 else {
      protocol="smtps";
      data.props.put("mail.smtps.quitwait","false");
    }
  }
  data.props.put("mail." + protocol + ".host",server);
  if (port != -1) {
    data.props.put("mail." + protocol + ".port","" + port);
  }
  if (isDebug()) {
    data.props.put("mail.debug","true");
  }
  if (meta.isUsingAuthentication()) {
    data.props.put("mail." + protocol + ".auth","true");
  }
  Session session=Session.getInstance(data.props);
  session.setDebug(isDebug());
  Message msg=new MimeMessage(session);
  if (meta.isUsePriority()) {
    String priority_int="1";
    if (meta.getPriority().equals("low")) {
      priority_int="3";
    }
    if (meta.getPriority().equals("normal")) {
      priority_int="2";
    }
    msg.setHeader("X-Priority",priority_int);
    msg.setHeader("Importance",meta.getImportance());
    msg.setHeader("Sensitivity",meta.getSensitivity());
  }
  String email_address=senderAddress;
  if (!Const.isEmpty(email_address)) {
    if (!Const.isEmpty(senderName)) {
      email_address=senderName + '<' + email_address+ '>';
    }
    msg.setFrom(new InternetAddress(email_address));
  }
 else {
    throw new MessagingException(BaseMessages.getString(PKG,"Mail.Error.ReplyEmailNotFilled"));
  }
  if (!Const.isEmpty(replyToAddresses)) {
    String[] reply_Address_List=replyToAddresses.split(" ");
    InternetAddress[] address=new InternetAddress[reply_Address_List.length];
    for (int i=0; i < reply_Address_List.length; i++) {
      address[i]=new InternetAddress(reply_Address_List[i]);
    }
    msg.setReplyTo(address);
  }
  String[] destinations=destination.split(" ");
  InternetAddress[] address=new InternetAddress[destinations.length];
  for (int i=0; i < destinations.length; i++) {
    address[i]=new InternetAddress(destinations[i]);
  }
  msg.setRecipients(Message.RecipientType.TO,address);
  String realdestinationCc=destinationCc;
  if (!Const.isEmpty(realdestinationCc)) {
    String[] destinationsCc=realdestinationCc.split(" ");
    InternetAddress[] addressCc=new InternetAddress[destinationsCc.length];
    for (int i=0; i < destinationsCc.length; i++) {
      addressCc[i]=new InternetAddress(destinationsCc[i]);
    }
    msg.setRecipients(Message.RecipientType.CC,addressCc);
  }
  String realdestinationBCc=destinationBCc;
  if (!Const.isEmpty(realdestinationBCc)) {
    String[] destinationsBCc=realdestinationBCc.split(" ");
    InternetAddress[] addressBCc=new InternetAddress[destinationsBCc.length];
    for (int i=0; i < destinationsBCc.length; i++) {
      addressBCc[i]=new InternetAddress(destinationsBCc[i]);
    }
    msg.setRecipients(Message.RecipientType.BCC,addressBCc);
  }
  if (mailsubject != null) {
    msg.setSubject(mailsubject);
  }
  msg.setSentDate(new Date());
  StringBuffer messageText=new StringBuffer();
  if (comment != null) {
    messageText.append(comment).append(Const.CR).append(Const.CR);
  }
  if (meta.getIncludeDate()) {
    messageText.append(BaseMessages.getString(PKG,"Mail.Log.Comment.MsgDate") + ": ").append(XMLHandler.date2string(new Date())).append(Const.CR).append(Const.CR);
  }
  if (!meta.isOnlySendComment() && (!Const.isEmpty(contactPerson) || !Const.isEmpty(contactPhone))) {
    messageText.append(BaseMessages.getString(PKG,"Mail.Log.Comment.ContactInfo") + " :").append(Const.CR);
    messageText.append("---------------------").append(Const.CR);
    messageText.append(BaseMessages.getString(PKG,"Mail.Log.Comment.PersonToContact") + " : ").append(contactPerson).append(Const.CR);
    messageText.append(BaseMessages.getString(PKG,"Mail.Log.Comment.Tel") + "  : ").append(contactPhone).append(Const.CR);
    messageText.append(Const.CR);
  }
  data.parts=new MimeMultipart();
  MimeBodyPart part1=new MimeBodyPart();
  if (meta.isUseHTML()) {
    if (!Const.isEmpty(meta.getEncoding())) {
      part1.setContent(messageText.toString(),"text/html; " + "charset=" + meta.getEncoding());
    }
 else {
      part1.setContent(messageText.toString(),"text/html; " + "charset=ISO-8859-1");
    }
  }
 else {
    part1.setText(messageText.toString());
  }
  data.parts.addBodyPart(part1);
  if (meta.isAttachContentFromField()) {
    addAttachedContent(data.previousRowMeta.getString(r,data.IndexOfAttachedFilename),data.previousRowMeta.getString(r,data.indexOfAttachedContent));
  }
 else {
    if (meta.isDynamicFilename()) {
      setAttachedFilesList(r,log);
    }
 else {
      setAttachedFilesList(null,log);
    }
  }
  addImagePart();
  if (data.nrEmbeddedImages > 0 && data.nrattachedFiles == 0) {
    data.parts.setSubType("related");
  }
  msg.setContent(data.parts);
  Transport transport=null;
  try {
    transport=session.getTransport(protocol);
    if (meta.isUsingAuthentication()) {
      if (port != -1) {
        transport.connect(Const.NVL(server,""),port,Const.NVL(authenticationUser,""),Const.NVL(authenticationPassword,""));
      }
 else {
        transport.connect(Const.NVL(server,""),Const.NVL(authenticationUser,""),Const.NVL(authenticationPassword,""));
      }
    }
 else {
      transport.connect();
    }
    transport.sendMessage(msg,msg.getAllRecipients());
  }
  finally {
    if (transport != null) {
      transport.close();
    }
  }
}
