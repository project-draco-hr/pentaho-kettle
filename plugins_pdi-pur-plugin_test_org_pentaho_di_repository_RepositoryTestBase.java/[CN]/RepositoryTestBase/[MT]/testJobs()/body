{
  ILockService service=(ILockService)repository.getService(ILockService.class);
  RepositoryDirectoryInterface rootDir=initRepo();
  JobMeta jobMeta=createJobMeta(EXP_JOB_NAME);
  RepositoryDirectoryInterface jobsDir=rootDir.findDirectory(DIR_JOBS);
  repository.save(jobMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(jobMeta);
  assertNotNull(jobMeta.getObjectId());
  ObjectRevision version=jobMeta.getObjectRevision();
  assertNotNull(version);
  assertTrue(hasVersionWithComment(jobMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(EXP_JOB_NAME,jobsDir,RepositoryObjectType.JOB));
  JobMeta fetchedJob=repository.loadJob(EXP_JOB_NAME,jobsDir,null,null);
  assertEquals(EXP_JOB_NAME,fetchedJob.getName());
  assertEquals(EXP_JOB_DESC,fetchedJob.getDescription());
  assertEquals(EXP_JOB_EXTENDED_DESC,fetchedJob.getExtendedDescription());
  assertEquals(jobsDir.getPath(),fetchedJob.getRepositoryDirectory().getPath());
  assertEquals(EXP_JOB_VERSION,fetchedJob.getJobversion());
  assertEquals(EXP_JOB_STATUS,fetchedJob.getJobstatus());
  assertEquals(EXP_JOB_CREATED_USER,fetchedJob.getCreatedUser());
  assertEquals(EXP_JOB_CREATED_DATE,fetchedJob.getCreatedDate());
  assertEquals(EXP_JOB_MOD_USER,fetchedJob.getModifiedUser());
  assertEquals(EXP_JOB_MOD_DATE,fetchedJob.getModifiedDate());
  assertEquals(1,fetchedJob.listParameters().length);
  assertEquals(EXP_JOB_PARAM_1_DEF,fetchedJob.getParameterDefault(EXP_JOB_PARAM_1_NAME));
  assertEquals(EXP_JOB_PARAM_1_DESC,fetchedJob.getParameterDescription(EXP_JOB_PARAM_1_NAME));
  assertEquals(EXP_JOB_BATCH_ID_PASSED,fetchedJob.isBatchIdPassed());
  assertEquals(EXP_JOB_SHARED_OBJECTS_FILE,fetchedJob.getSharedObjectsFile());
  assertEquals(2,fetchedJob.getJobCopies().size());
  assertEquals("JobEntryAttributeTester",fetchedJob.getJobEntry(0).getEntry().getPluginId());
  assertEquals(EXP_JOB_ENTRY_1_COPY_X_LOC,fetchedJob.getJobEntry(0).getLocation().x);
  assertEquals(EXP_JOB_ENTRY_1_COPY_Y_LOC,fetchedJob.getJobEntry(0).getLocation().y);
  assertEquals("JobEntryAttributeTester",fetchedJob.getJobEntry(1).getEntry().getPluginId());
  assertEquals(EXP_JOB_ENTRY_2_COPY_X_LOC,fetchedJob.getJobEntry(1).getLocation().x);
  assertEquals(EXP_JOB_ENTRY_2_COPY_Y_LOC,fetchedJob.getJobEntry(1).getLocation().y);
  assertEquals(1,fetchedJob.getJobhops().size());
  assertEquals(EXP_JOB_ENTRY_1_NAME,fetchedJob.getJobHop(0).getFromEntry().getEntry().getName());
  assertEquals("JobEntryAttributeTester",fetchedJob.getJobHop(0).getFromEntry().getEntry().getPluginId());
  assertEquals(EXP_JOB_ENTRY_2_NAME,fetchedJob.getJobHop(0).getToEntry().getEntry().getName());
  assertEquals("JobEntryAttributeTester",fetchedJob.getJobHop(0).getToEntry().getEntry().getPluginId());
  assertEquals(1,fetchedJob.getNotes().size());
  assertTrue(fetchedJob.getNote(0).getNote().startsWith(EXP_NOTEPAD_NOTE));
  assertEquals(EXP_NOTEPAD_X,fetchedJob.getNote(0).getLocation().x);
  assertEquals(EXP_NOTEPAD_Y,fetchedJob.getNote(0).getLocation().y);
  assertEquals(EXP_NOTEPAD_WIDTH,fetchedJob.getNote(0).getWidth());
  assertEquals(EXP_NOTEPAD_HEIGHT,fetchedJob.getNote(0).getHeight());
  JobMeta jobMetaById=repository.loadJob(jobMeta.getObjectId(),null);
  assertEquals(fetchedJob,jobMetaById);
  assertNull(service.getJobLock(jobMeta.getObjectId()));
  service.lockJob(jobMeta.getObjectId(),EXP_JOB_LOCK_MSG);
  assertEquals(EXP_JOB_LOCK_MSG,service.getJobLock(jobMeta.getObjectId()).getMessage());
  assertEquals(getDate(new Date()),getDate(service.getJobLock(jobMeta.getObjectId()).getLockDate()));
  assertEquals(EXP_LOGIN_PLUS_TENANT,service.getJobLock(jobMeta.getObjectId()).getLogin());
  assertEquals(jobMeta.getObjectId(),service.getJobLock(jobMeta.getObjectId()).getObjectId());
  service.unlockJob(jobMeta.getObjectId());
  assertNull(service.getJobLock(jobMeta.getObjectId()));
  jobMeta.setDescription(EXP_JOB_DESC_V2);
  repository.save(jobMeta,VERSION_COMMENT_V2,null);
  assertEquals(VERSION_COMMENT_V2,jobMeta.getObjectRevision().getComment());
  fetchedJob=repository.loadJob(EXP_JOB_NAME,jobsDir,null,null);
  assertEquals(EXP_JOB_DESC_V2,fetchedJob.getDescription());
  fetchedJob=repository.loadJob(EXP_JOB_NAME,jobsDir,null,VERSION_LABEL_V1);
  assertEquals(EXP_JOB_DESC,fetchedJob.getDescription());
  jobMetaById=repository.loadJob(jobMeta.getObjectId(),VERSION_LABEL_V1);
  assertEquals(fetchedJob,jobMetaById);
  assertEquals(jobMeta.getObjectId(),repository.getJobId(EXP_JOB_NAME,jobsDir));
  assertEquals(1,repository.getJobObjects(jobsDir.getObjectId(),false).size());
  assertEquals(1,repository.getJobObjects(jobsDir.getObjectId(),true).size());
  assertEquals(jobMeta.getName(),repository.getJobObjects(jobsDir.getObjectId(),false).get(0).getName());
  assertEquals(1,repository.getJobNames(jobsDir.getObjectId(),false).length);
  assertEquals(1,repository.getJobNames(jobsDir.getObjectId(),true).length);
  assertEquals(jobMeta.getName(),repository.getJobNames(jobsDir.getObjectId(),false)[0]);
  repository.deleteJob(jobMeta.getObjectId());
  assertFalse(repository.exists(EXP_JOB_NAME,jobsDir,RepositoryObjectType.JOB));
  assertEquals(0,repository.getJobObjects(jobsDir.getObjectId(),false).size());
  assertEquals(1,repository.getJobObjects(jobsDir.getObjectId(),true).size());
  assertEquals(jobMeta.getName(),repository.getJobObjects(jobsDir.getObjectId(),true).get(0).getName());
  assertEquals(0,repository.getJobNames(jobsDir.getObjectId(),false).length);
  assertEquals(1,repository.getJobNames(jobsDir.getObjectId(),true).length);
  assertEquals(jobMeta.getName(),repository.getJobNames(jobsDir.getObjectId(),true)[0]);
}
