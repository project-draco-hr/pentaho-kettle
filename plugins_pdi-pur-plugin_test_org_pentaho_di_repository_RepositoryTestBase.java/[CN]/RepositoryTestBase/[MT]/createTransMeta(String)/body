{
  RepositoryDirectoryInterface rootDir=loadStartDirectory();
  TransMeta transMeta=new TransMeta();
  transMeta.setName(EXP_TRANS_NAME.concat(dbName));
  transMeta.setDescription(EXP_TRANS_DESC);
  transMeta.setExtendedDescription(EXP_TRANS_EXTENDED_DESC);
  transMeta.setRepositoryDirectory(rootDir.findDirectory(DIR_TRANSFORMATIONS));
  transMeta.setTransversion(EXP_TRANS_VERSION);
  transMeta.setTransstatus(EXP_TRANS_STATUS);
  transMeta.setCreatedUser(EXP_TRANS_CREATED_USER);
  transMeta.setCreatedDate(EXP_TRANS_CREATED_DATE);
  transMeta.setModifiedUser(EXP_TRANS_MOD_USER);
  transMeta.setModifiedDate(EXP_TRANS_MOD_DATE);
  transMeta.addParameterDefinition(EXP_TRANS_PARAM_1_NAME,EXP_TRANS_PARAM_1_DEF,EXP_TRANS_PARAM_1_DESC);
  TransLogTable transLogTable=TransLogTable.getDefault(transMeta,transMeta,new ArrayList<StepMeta>(0));
  transLogTable.setConnectionName(EXP_TRANS_LOG_TABLE_CONN_NAME);
  transLogTable.setLogInterval(EXP_TRANS_LOG_TABLE_INTERVAL);
  transLogTable.setSchemaName(EXP_TRANS_LOG_TABLE_SCHEMA_NAME);
  transLogTable.setLogSizeLimit(EXP_TRANS_LOG_TABLE_SIZE_LIMIT);
  transLogTable.setTableName(EXP_TRANS_LOG_TABLE_TABLE_NAME);
  transLogTable.setTimeoutInDays(EXP_TRANS_LOG_TABLE_TIMEOUT_IN_DAYS);
  transMeta.setTransLogTable(transLogTable);
  PerformanceLogTable perfLogTable=PerformanceLogTable.getDefault(transMeta,transMeta);
  perfLogTable.setConnectionName(EXP_TRANS_LOG_TABLE_CONN_NAME);
  perfLogTable.setLogInterval(EXP_TRANS_LOG_TABLE_INTERVAL);
  perfLogTable.setSchemaName(EXP_TRANS_LOG_TABLE_SCHEMA_NAME);
  perfLogTable.setTableName(EXP_TRANS_LOG_TABLE_TABLE_NAME);
  perfLogTable.setTimeoutInDays(EXP_TRANS_LOG_TABLE_TIMEOUT_IN_DAYS);
  transMeta.setPerformanceLogTable(perfLogTable);
  ChannelLogTable channelLogTable=ChannelLogTable.getDefault(transMeta,transMeta);
  channelLogTable.setConnectionName(EXP_TRANS_LOG_TABLE_CONN_NAME);
  channelLogTable.setSchemaName(EXP_TRANS_LOG_TABLE_SCHEMA_NAME);
  channelLogTable.setTableName(EXP_TRANS_LOG_TABLE_TABLE_NAME);
  channelLogTable.setTimeoutInDays(EXP_TRANS_LOG_TABLE_TIMEOUT_IN_DAYS);
  transMeta.setChannelLogTable(channelLogTable);
  StepLogTable stepLogTable=StepLogTable.getDefault(transMeta,transMeta);
  stepLogTable.setConnectionName(EXP_TRANS_LOG_TABLE_CONN_NAME);
  stepLogTable.setSchemaName(EXP_TRANS_LOG_TABLE_SCHEMA_NAME);
  stepLogTable.setTableName(EXP_TRANS_LOG_TABLE_TABLE_NAME);
  stepLogTable.setTimeoutInDays(EXP_TRANS_LOG_TABLE_TIMEOUT_IN_DAYS);
  transMeta.setStepLogTable(stepLogTable);
  DatabaseMeta dbMeta=createDatabaseMeta(dbName);
  repository.save(dbMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(dbMeta);
  transMeta.setMaxDateConnection(dbMeta);
  transMeta.setMaxDateTable(EXP_TRANS_MAX_DATE_TABLE);
  transMeta.setMaxDateField(EXP_TRANS_MAX_DATE_FIELD);
  transMeta.setMaxDateOffset(EXP_TRANS_MAX_DATE_OFFSET);
  transMeta.setMaxDateDifference(EXP_TRANS_MAX_DATE_DIFF);
  transMeta.setSizeRowset(EXP_TRANS_SIZE_ROWSET);
  transMeta.setSleepTimeEmpty(EXP_TRANS_SLEEP_TIME_EMPTY);
  transMeta.setSleepTimeFull(EXP_TRANS_SLEEP_TIME_FULL);
  transMeta.setUsingUniqueConnections(EXP_TRANS_USING_UNIQUE_CONN);
  transMeta.setFeedbackShown(EXP_TRANS_FEEDBACK_SHOWN);
  transMeta.setFeedbackSize(EXP_TRANS_FEEDBACK_SIZE);
  transMeta.setUsingThreadPriorityManagment(EXP_TRANS_USING_THREAD_PRIORITY_MGMT);
  transMeta.setSharedObjectsFile(EXP_TRANS_SHARED_OBJECTS_FILE);
  transMeta.setCapturingStepPerformanceSnapShots(EXP_TRANS_CAPTURE_STEP_PERF_SNAPSHOTS);
  transMeta.setStepPerformanceCapturingDelay(EXP_TRANS_STEP_PERF_CAP_DELAY);
  transMeta.addDependency(new TransDependency(dbMeta,EXP_TRANS_DEP_TABLE_NAME,EXP_TRANS_DEP_FIELD_NAME));
  DatabaseMeta stepDbMeta=createDatabaseMeta(EXP_DBMETA_NAME_STEP.concat(dbName));
  repository.save(stepDbMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(stepDbMeta);
  Condition cond=new Condition();
  StepMeta step1=createStepMeta1(transMeta,stepDbMeta,cond);
  transMeta.addStep(step1);
  StepMeta step2=createStepMeta2(stepDbMeta,cond);
  transMeta.addStep(step2);
  transMeta.addTransHop(createTransHopMeta(step1,step2));
  SlaveServer slaveServer=createSlaveServer(dbName);
  PartitionSchema partSchema=createPartitionSchema(dbName);
  repository.save(slaveServer,VERSION_COMMENT_V1,null);
  deleteStack.push(slaveServer);
  repository.save(partSchema,VERSION_COMMENT_V1,null);
  deleteStack.push(partSchema);
  SlaveStepCopyPartitionDistribution slaveStepCopyPartitionDistribution=new SlaveStepCopyPartitionDistribution();
  slaveStepCopyPartitionDistribution.addPartition(EXP_SLAVE_NAME,EXP_PART_SCHEMA_NAME,0);
  slaveStepCopyPartitionDistribution.setOriginalPartitionSchemas(Arrays.asList(new PartitionSchema[]{partSchema}));
  transMeta.setSlaveStepCopyPartitionDistribution(slaveStepCopyPartitionDistribution);
  transMeta.setSlaveTransformation(EXP_TRANS_SLAVE_TRANSFORMATION);
  return transMeta;
}
