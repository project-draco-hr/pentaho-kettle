{
  DatabaseMeta dbMeta=createDatabaseMeta(EXP_DBMETA_NAME);
  repository.save(dbMeta,VERSION_COMMENT_V1,null);
  assertNotNull(dbMeta.getObjectId());
  ObjectRevision v1=dbMeta.getObjectRevision();
  assertNotNull(v1);
  assertTrue(hasVersionWithComment(dbMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(EXP_DBMETA_NAME,null,RepositoryObjectType.DATABASE));
  DatabaseMeta fetchedDatabase=repository.loadDatabaseMeta(dbMeta.getObjectId(),null);
  assertEquals(EXP_DBMETA_NAME,fetchedDatabase.getName());
  assertEquals(EXP_DBMETA_HOSTNAME,fetchedDatabase.getHostname());
  assertEquals(EXP_DBMETA_TYPE,fetchedDatabase.getPluginId());
  assertEquals(EXP_DBMETA_ACCESS,fetchedDatabase.getAccessType());
  assertEquals(EXP_DBMETA_DBNAME,fetchedDatabase.getDatabaseName());
  assertEquals(EXP_DBMETA_PORT,fetchedDatabase.getDatabasePortNumberString());
  assertEquals(EXP_DBMETA_USERNAME,fetchedDatabase.getUsername());
  assertEquals(EXP_DBMETA_PASSWORD,fetchedDatabase.getPassword());
  assertEquals(EXP_DBMETA_SERVERNAME,fetchedDatabase.getServername());
  assertEquals(EXP_DBMETA_DATA_TABLESPACE,fetchedDatabase.getDataTablespace());
  assertEquals(EXP_DBMETA_INDEX_TABLESPACE,fetchedDatabase.getIndexTablespace());
  assertEquals(2 + 1,fetchedDatabase.getAttributes().size());
  assertEquals(EXP_DBMETA_ATTR1_VALUE,fetchedDatabase.getAttributes().getProperty(EXP_DBMETA_ATTR1_KEY));
  assertEquals(EXP_DBMETA_ATTR2_VALUE,fetchedDatabase.getAttributes().getProperty(EXP_DBMETA_ATTR2_KEY));
  dbMeta.setHostname(EXP_DBMETA_HOSTNAME_V2);
  repository.save(dbMeta,VERSION_COMMENT_V2,null);
  assertTrue(hasVersionWithComment(dbMeta,VERSION_COMMENT_V2));
  fetchedDatabase=repository.loadDatabaseMeta(dbMeta.getObjectId(),null);
  assertEquals(EXP_DBMETA_HOSTNAME_V2,fetchedDatabase.getHostname());
  fetchedDatabase=repository.loadDatabaseMeta(dbMeta.getObjectId(),v1.getName());
  assertEquals(EXP_DBMETA_HOSTNAME,fetchedDatabase.getHostname());
  assertEquals(dbMeta.getObjectId(),repository.getDatabaseID(EXP_DBMETA_NAME));
  assertEquals(1,repository.getDatabaseIDs(false).length);
  assertEquals(1,repository.getDatabaseIDs(true).length);
  assertEquals(dbMeta.getObjectId(),repository.getDatabaseIDs(false)[0]);
  assertEquals(1,repository.getDatabaseNames(false).length);
  assertEquals(1,repository.getDatabaseNames(true).length);
  assertEquals(EXP_DBMETA_NAME,repository.getDatabaseNames(false)[0]);
  assertEquals(1,repository.readDatabases().size());
  repository.deleteDatabaseMeta(EXP_DBMETA_NAME);
  assertFalse(repository.exists(EXP_DBMETA_NAME,null,RepositoryObjectType.DATABASE));
  assertEquals(0,repository.getDatabaseIDs(false).length);
  assertEquals(0,repository.getDatabaseIDs(true).length);
  assertEquals(0,repository.getDatabaseNames(false).length);
  assertEquals(0,repository.getDatabaseNames(true).length);
  assertEquals(0,repository.readDatabases().size());
}
