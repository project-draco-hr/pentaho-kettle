{
  RepositoryDirectoryInterface rootDir=initRepo();
  JobMeta jobMeta=createJobMeta(EXP_JOB_NAME);
  RepositoryDirectoryInterface jobsDir=rootDir.findDirectory(DIR_JOBS);
  repository.save(jobMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(jobMeta);
  assertNotNull(jobMeta.getObjectId());
  ObjectRevision version=jobMeta.getObjectRevision();
  assertNotNull(version);
  assertTrue(hasVersionWithComment(jobMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(EXP_JOB_NAME,jobsDir,RepositoryObjectType.JOB));
  ObjectAcl acl=((IAclService)repository).getAcl(jobMeta.getObjectId(),false);
  assertNotNull(acl);
  acl.setEntriesInheriting(false);
  ObjectAce ace=new RepositoryObjectAce(new RepositoryObjectRecipient("suzy",Type.USER),EnumSet.of(RepositoryFilePermission.READ));
  List<ObjectAce> aceList=new ArrayList<ObjectAce>();
  aceList.add(ace);
  acl.setAces(aceList);
  ((IAclService)repository).setAcl(jobMeta.getObjectId(),acl);
  ObjectAcl acl1=((IAclService)repository).getAcl(jobMeta.getObjectId(),false);
  assertEquals(Boolean.FALSE,acl1.isEntriesInheriting());
  assertEquals(1,acl1.getAces().size());
  ObjectAce ace1=acl1.getAces().get(0);
  assertEquals(ace1.getRecipient().getName(),"suzy");
  assertTrue(ace1.getPermissions().contains(RepositoryFilePermission.READ));
}
