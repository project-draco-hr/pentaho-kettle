{
  ILockService service=(ILockService)repository.getService(ILockService.class);
  RepositoryDirectoryInterface rootDir=initRepo();
  String uniqueTransName=EXP_TRANS_NAME.concat(EXP_DBMETA_NAME);
  TransMeta transMeta=createTransMeta(EXP_DBMETA_NAME);
  DatabaseMeta dbMeta=createDatabaseMeta(EXP_DBMETA_NAME);
  repository.save(dbMeta,VERSION_COMMENT_V1,null);
  TableInputMeta tableInputMeta=new TableInputMeta();
  tableInputMeta.setDatabaseMeta(dbMeta);
  transMeta.addStep(new StepMeta(EXP_TRANS_STEP_1_NAME,tableInputMeta));
  RepositoryDirectoryInterface transDir=rootDir.findDirectory(DIR_TRANSFORMATIONS);
  repository.save(transMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(transMeta);
  assertNotNull(transMeta.getObjectId());
  ObjectRevision version=transMeta.getObjectRevision();
  assertNotNull(version);
  assertTrue(hasVersionWithComment(transMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(uniqueTransName,transDir,RepositoryObjectType.TRANSFORMATION));
  TransMeta fetchedTrans=repository.loadTransformation(uniqueTransName,transDir,null,false,null);
  assertEquals(uniqueTransName,fetchedTrans.getName());
  assertEquals(EXP_TRANS_DESC,fetchedTrans.getDescription());
  assertEquals(EXP_TRANS_EXTENDED_DESC,fetchedTrans.getExtendedDescription());
  assertEquals(transDir.getPath(),fetchedTrans.getRepositoryDirectory().getPath());
  assertEquals(EXP_TRANS_VERSION,fetchedTrans.getTransversion());
  assertEquals(EXP_TRANS_STATUS,fetchedTrans.getTransstatus());
  assertEquals(EXP_TRANS_CREATED_USER,fetchedTrans.getCreatedUser());
  assertEquals(EXP_TRANS_CREATED_DATE,fetchedTrans.getCreatedDate());
  assertEquals(EXP_TRANS_MOD_USER,fetchedTrans.getModifiedUser());
  assertEquals(EXP_TRANS_MOD_DATE,fetchedTrans.getModifiedDate());
  assertEquals(1,fetchedTrans.listParameters().length);
  assertEquals(EXP_TRANS_PARAM_1_DEF,fetchedTrans.getParameterDefault(EXP_TRANS_PARAM_1_NAME));
  assertEquals(EXP_TRANS_PARAM_1_DESC,fetchedTrans.getParameterDescription(EXP_TRANS_PARAM_1_NAME));
  String[] transformations=repository.getTransformationsUsingDatabase(dbMeta.getObjectId());
  assertNotNull(transformations);
  assertEquals(1,transformations.length);
  assertTrue(transformations[0].contains(fetchedTrans.getName()));
  assertEquals(EXP_DBMETA_NAME,fetchedTrans.getMaxDateConnection().getName());
  assertEquals(EXP_TRANS_MAX_DATE_TABLE,fetchedTrans.getMaxDateTable());
  assertEquals(EXP_TRANS_MAX_DATE_FIELD,fetchedTrans.getMaxDateField());
  assertEquals(EXP_TRANS_MAX_DATE_OFFSET,fetchedTrans.getMaxDateOffset(),0);
  assertEquals(EXP_TRANS_MAX_DATE_DIFF,fetchedTrans.getMaxDateDifference(),0);
  assertEquals(EXP_TRANS_SIZE_ROWSET,fetchedTrans.getSizeRowset());
  assertEquals(EXP_TRANS_USING_UNIQUE_CONN,fetchedTrans.isUsingUniqueConnections());
  assertEquals(EXP_TRANS_FEEDBACK_SHOWN,fetchedTrans.isFeedbackShown());
  assertEquals(EXP_TRANS_FEEDBACK_SIZE,fetchedTrans.getFeedbackSize());
  assertEquals(EXP_TRANS_USING_THREAD_PRIORITY_MGMT,fetchedTrans.isUsingThreadPriorityManagment());
  assertEquals(EXP_TRANS_SHARED_OBJECTS_FILE,fetchedTrans.getSharedObjectsFile());
  assertEquals(EXP_TRANS_CAPTURE_STEP_PERF_SNAPSHOTS,fetchedTrans.isCapturingStepPerformanceSnapShots());
  assertEquals(EXP_TRANS_STEP_PERF_CAP_DELAY,fetchedTrans.getStepPerformanceCapturingDelay());
  assertEquals(3,fetchedTrans.getSteps().size());
  assertEquals(EXP_TRANS_STEP_1_NAME,fetchedTrans.getStep(0).getName());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_ENABLED,fetchedTrans.getStep(0).getStepErrorMeta().isEnabled());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_NR_ERRORS_VALUE_NAME,fetchedTrans.getStep(0).getStepErrorMeta().getNrErrorsValuename());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_DESC_VALUE_NAME,fetchedTrans.getStep(0).getStepErrorMeta().getErrorDescriptionsValuename());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_FIELDS_VALUE_NAME,fetchedTrans.getStep(0).getStepErrorMeta().getErrorFieldsValuename());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_CODES_VALUE_NAME,fetchedTrans.getStep(0).getStepErrorMeta().getErrorCodesValuename());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_MAX_ERRORS,fetchedTrans.getStep(0).getStepErrorMeta().getMaxErrors());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_MAX_PERCENT_ERRORS,fetchedTrans.getStep(0).getStepErrorMeta().getMaxPercentErrors());
  assertEquals(EXP_TRANS_STEP_ERROR_META_1_MIN_PERCENT_ROWS,fetchedTrans.getStep(0).getStepErrorMeta().getMinPercentRows());
  assertEquals(EXP_TRANS_STEP_2_NAME,fetchedTrans.getStep(1).getName());
  assertEquals(EXP_TRANS_STEP_1_NAME,fetchedTrans.getTransHop(0).getFromStep().getName());
  assertEquals(EXP_TRANS_STEP_2_NAME,fetchedTrans.getTransHop(0).getToStep().getName());
  assertEquals(1,transMeta.getSlaveStepCopyPartitionDistribution().getOriginalPartitionSchemas().size());
  assertTrue(transMeta.getSlaveStepCopyPartitionDistribution().getOriginalPartitionSchemas().get(0).getName().startsWith(EXP_PART_SCHEMA_NAME));
  assertTrue(-1 != transMeta.getSlaveStepCopyPartitionDistribution().getPartition(EXP_SLAVE_NAME,EXP_PART_SCHEMA_NAME,0));
  assertEquals(EXP_TRANS_SLAVE_TRANSFORMATION,transMeta.isSlaveTransformation());
  TransMeta transMetaById=repository.loadTransformation(transMeta.getObjectId(),null);
  assertEquals(fetchedTrans,transMetaById);
  assertNull(service.getTransformationLock(transMeta.getObjectId()));
  service.lockTransformation(transMeta.getObjectId(),EXP_TRANS_LOCK_MSG);
  assertEquals(EXP_TRANS_LOCK_MSG,service.getTransformationLock(transMeta.getObjectId()).getMessage());
  assertEquals(getDate(new Date()),getDate(service.getTransformationLock(transMeta.getObjectId()).getLockDate()));
  assertEquals(EXP_LOGIN_PLUS_TENANT,service.getTransformationLock(transMeta.getObjectId()).getLogin());
  assertEquals(transMeta.getObjectId(),service.getTransformationLock(transMeta.getObjectId()).getObjectId());
  service.unlockTransformation(transMeta.getObjectId());
  assertNull(service.getTransformationLock(transMeta.getObjectId()));
  transMeta.setDescription(EXP_TRANS_DESC_V2);
  repository.save(transMeta,VERSION_COMMENT_V2,null);
  assertTrue(hasVersionWithComment(transMeta,VERSION_COMMENT_V2));
  fetchedTrans=repository.loadTransformation(uniqueTransName,transDir,null,false,null);
  assertEquals(EXP_TRANS_DESC_V2,fetchedTrans.getDescription());
  fetchedTrans=repository.loadTransformation(uniqueTransName,transDir,null,false,VERSION_LABEL_V1);
  assertEquals(EXP_TRANS_DESC,fetchedTrans.getDescription());
  transMetaById=repository.loadTransformation(transMeta.getObjectId(),VERSION_LABEL_V1);
  assertEquals(fetchedTrans,transMetaById);
  assertEquals(transMeta.getObjectId(),repository.getTransformationID(uniqueTransName,transDir));
  assertEquals(1,repository.getTransformationObjects(transDir.getObjectId(),false).size());
  assertEquals(1,repository.getTransformationObjects(transDir.getObjectId(),true).size());
  assertEquals(transMeta.getName(),repository.getTransformationObjects(transDir.getObjectId(),false).get(0).getName());
  assertEquals(1,repository.getTransformationNames(transDir.getObjectId(),false).length);
  assertEquals(1,repository.getTransformationNames(transDir.getObjectId(),true).length);
  assertEquals(transMeta.getName(),repository.getTransformationNames(transDir.getObjectId(),false)[0]);
  repository.deleteTransformation(transMeta.getObjectId());
  assertFalse(repository.exists(uniqueTransName,transDir,RepositoryObjectType.TRANSFORMATION));
  assertEquals(0,repository.getTransformationObjects(transDir.getObjectId(),false).size());
  assertEquals(1,repository.getTransformationObjects(transDir.getObjectId(),true).size());
  assertEquals(transMeta.getName(),repository.getTransformationObjects(transDir.getObjectId(),true).get(0).getName());
  assertEquals(0,repository.getTransformationNames(transDir.getObjectId(),false).length);
  assertEquals(1,repository.getTransformationNames(transDir.getObjectId(),true).length);
  assertEquals(transMeta.getName(),repository.getTransformationNames(transDir.getObjectId(),true)[0]);
}
