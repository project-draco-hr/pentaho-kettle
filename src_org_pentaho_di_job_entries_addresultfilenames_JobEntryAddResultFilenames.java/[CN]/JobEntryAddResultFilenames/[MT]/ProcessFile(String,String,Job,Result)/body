{
  LogWriter log=LogWriter.getInstance();
  boolean rcode=false;
  FileObject filefolder=null;
  String realFilefoldername=environmentSubstitute(filename);
  String realwilcard=environmentSubstitute(wildcard);
  try {
    filefolder=KettleVFS.getFileObject(realFilefoldername);
    System.gc();
    if (filefolder.exists()) {
      if (filefolder.getType() == FileType.FILE) {
        log.logDetailed(toString(),Messages.getString("JobEntryAddResultFilenames.AddingFileToResult",filefolder.toString()));
        ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(filefolder.toString()),parentJob.getName(),toString());
        result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
      }
 else {
        FileObject list[]=filefolder.findFiles(new TextFileSelector(filefolder.toString(),realwilcard));
        for (int i=0; i < list.length; i++) {
          log.logDetailed(toString(),Messages.getString("JobEntryAddResultFilenames.AddingFileToResult",list[i].toString()));
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(list[i].toString()),parentJob.getName(),toString());
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
        }
      }
    }
 else {
      log.logBasic(toString(),Messages.getString("JobEntryAddResultFilenames.FileCanNotbeFound",realFilefoldername));
      rcode=true;
    }
  }
 catch (  IOException e) {
    log.logError(toString(),Messages.getString("JobEntryAddResultFilenames.CouldNotProcess",realFilefoldername,e.getMessage()));
  }
 finally {
    if (filefolder != null) {
      try {
        filefolder.close();
      }
 catch (      IOException ex) {
      }
      ;
    }
  }
  return rcode;
}
