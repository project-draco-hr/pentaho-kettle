{
  try {
    this.databases=databases;
    database=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    schemaname=rep.getStepAttributeString(id_step,"schemaname");
    tablenamefieldname=rep.getStepAttributeString(id_step,"tablenamefieldname");
    objecttypefieldname=rep.getStepAttributeString(id_step,"objecttypefieldname");
    sqlcreationfieldname=rep.getStepAttributeString(id_step,"sqlcreationfieldname");
    issystemobjectfieldname=rep.getStepAttributeString(id_step,"issystemobjectfieldname");
    includeCatalog=rep.getStepAttributeBoolean(id_step,"includeCatalog");
    includeSchema=rep.getStepAttributeBoolean(id_step,"includeSchema");
    includeTable=rep.getStepAttributeBoolean(id_step,"includeTable");
    includeView=rep.getStepAttributeBoolean(id_step,"includeView");
    includeProcedure=rep.getStepAttributeBoolean(id_step,"includeProcedure");
    includeSynonym=rep.getStepAttributeBoolean(id_step,"includeSynonym");
    addSchemaInOutput=rep.getStepAttributeBoolean(id_step,"addSchemaInOutput");
    dynamicSchema=rep.getStepAttributeBoolean(id_step,"dynamicSchema");
    schenameNameField=rep.getStepAttributeString(id_step,"schenameNameField");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"GetTableNamesMeta.Exception.UnexpectedErrorReadingStepInfo"),e);
  }
}
