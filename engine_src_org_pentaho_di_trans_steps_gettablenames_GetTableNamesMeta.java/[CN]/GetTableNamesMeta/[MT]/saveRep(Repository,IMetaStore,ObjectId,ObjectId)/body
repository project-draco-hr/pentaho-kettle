{
  try {
    rep.saveDatabaseMetaStepAttribute(id_transformation,id_step,"id_connection",database);
    rep.saveStepAttribute(id_transformation,id_step,"schemaname",schemaname);
    rep.saveStepAttribute(id_transformation,id_step,"tablenamefieldname",tablenamefieldname);
    rep.saveStepAttribute(id_transformation,id_step,"objecttypefieldname",objecttypefieldname);
    rep.saveStepAttribute(id_transformation,id_step,"sqlcreationfieldname",sqlcreationfieldname);
    rep.saveStepAttribute(id_transformation,id_step,"issystemobjectfieldname",issystemobjectfieldname);
    if (database != null) {
      rep.insertStepDatabase(id_transformation,id_step,database.getObjectId());
    }
    rep.saveStepAttribute(id_transformation,id_step,"includeCatalog",includeCatalog);
    rep.saveStepAttribute(id_transformation,id_step,"includeSchema",includeSchema);
    rep.saveStepAttribute(id_transformation,id_step,"includeTable",includeTable);
    rep.saveStepAttribute(id_transformation,id_step,"includeView",includeView);
    rep.saveStepAttribute(id_transformation,id_step,"includeProcedure",includeProcedure);
    rep.saveStepAttribute(id_transformation,id_step,"includeSynonym",includeSynonym);
    rep.saveStepAttribute(id_transformation,id_step,"addSchemaInOutput",addSchemaInOutput);
    rep.saveStepAttribute(id_transformation,id_step,"dynamicSchema",dynamicSchema);
    rep.saveStepAttribute(id_transformation,id_step,"schenameNameField",schenameNameField);
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"GetTableNamesMeta.Exception.UnableToSaveStepInfo") + id_step,e);
  }
}
