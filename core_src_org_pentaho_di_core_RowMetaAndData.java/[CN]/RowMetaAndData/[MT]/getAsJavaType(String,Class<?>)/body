{
  int idx=rowMeta.indexOfValue(valueName);
  if (idx < 0) {
    throw new KettleValueException("Unknown column '" + valueName + "'");
  }
  ValueMetaInterface metaType=rowMeta.getValueMeta(idx);
switch (metaType.getType()) {
case ValueMetaInterface.TYPE_STRING:
    String vs=rowMeta.getString(data,idx);
  if (vs == null) {
    return null;
  }
if (String.class.isAssignableFrom(destinationType)) {
  return vs;
}
 else if (int.class.isAssignableFrom(destinationType) || Integer.class.isAssignableFrom(destinationType)) {
  return Integer.parseInt(vs);
}
 else if (long.class.isAssignableFrom(destinationType) || Long.class.isAssignableFrom(destinationType)) {
  return Long.parseLong(vs);
}
 else if (boolean.class.isAssignableFrom(destinationType) || Boolean.class.isAssignableFrom(destinationType)) {
  return "Y".equalsIgnoreCase(vs) || "Yes".equalsIgnoreCase(vs) || "true".equalsIgnoreCase(vs);
}
 else if (destinationType.isEnum()) {
  for (  Object eo : destinationType.getEnumConstants()) {
    Enum<?> e=(Enum<?>)eo;
    if (e.name().equals(vs)) {
      return e;
    }
  }
  throw new KettleValueException("Unknown value " + vs + " for enum "+ destinationType);
}
break;
case ValueMetaInterface.TYPE_BOOLEAN:
Boolean vb=rowMeta.getBoolean(data,idx);
if (vb == null) {
return null;
}
if (boolean.class.isAssignableFrom(destinationType) || Boolean.class.isAssignableFrom(destinationType)) {
return vb;
}
 else if (int.class.isAssignableFrom(destinationType) || Integer.class.isAssignableFrom(destinationType)) {
return vb ? 1 : 0;
}
 else if (long.class.isAssignableFrom(destinationType) || Long.class.isAssignableFrom(destinationType)) {
return vb ? 1L : 0L;
}
 else if (String.class.isAssignableFrom(destinationType)) {
return vb ? "Y" : "N";
}
break;
case ValueMetaInterface.TYPE_INTEGER:
Long vi=rowMeta.getInteger(data,idx);
if (vi == null) {
return null;
}
if (long.class.isAssignableFrom(destinationType) || Long.class.isAssignableFrom(destinationType)) {
return vi;
}
 else if (int.class.isAssignableFrom(destinationType) || Integer.class.isAssignableFrom(destinationType)) {
return vi.intValue();
}
 else if (String.class.isAssignableFrom(destinationType)) {
return vi.toString();
}
 else if (boolean.class.isAssignableFrom(destinationType) || Boolean.class.isAssignableFrom(destinationType)) {
return vi.longValue() != 0;
}
break;
case ValueMetaInterface.TYPE_NUMBER:
Double vn=rowMeta.getNumber(data,idx);
if (vn == null) {
return null;
}
if (double.class.isAssignableFrom(destinationType) || Double.class.isAssignableFrom(destinationType)) {
return vn.doubleValue();
}
 else if (long.class.isAssignableFrom(destinationType) || Long.class.isAssignableFrom(destinationType)) {
return vn;
}
 else if (int.class.isAssignableFrom(destinationType) || Integer.class.isAssignableFrom(destinationType)) {
return vn.intValue();
}
 else if (String.class.isAssignableFrom(destinationType)) {
return vn.toString();
}
 else if (boolean.class.isAssignableFrom(destinationType) || Boolean.class.isAssignableFrom(destinationType)) {
return vn.longValue() != 0;
}
break;
}
throw new KettleValueException("Unknown conversion from " + metaType.getTypeDesc() + " into "+ destinationType);
}
