{
  clear();
  findUsedOriginalSteps();
  checkClusterConfiguration();
  generateSlavePartitionSchemas();
  try {
    SlaveServer masterServer=getMasterServer();
    master=getOriginalCopy(false,null,null);
    for (int r=0; r < referenceSteps.length; r++) {
      StepMeta referenceStep=referenceSteps[r];
      ClusterSchema referenceClusterSchema=referenceStep.getClusterSchema();
      int nrPreviousSteps=originalTransformation.findNrPrevSteps(referenceStep);
      for (int p=0; p < nrPreviousSteps; p++) {
        StepMeta previousStep=originalTransformation.findPrevStep(referenceStep,p);
        ClusterSchema previousClusterSchema=previousStep.getClusterSchema();
        if (referenceClusterSchema == null) {
          if (previousClusterSchema == null) {
            StepMeta target=master.findStep(referenceStep.getName());
            if (target == null) {
              target=(StepMeta)referenceStep.clone();
              master.addStep(target);
            }
            StepMeta source=master.findStep(previousStep.getName());
            if (source == null) {
              source=(StepMeta)previousStep.clone();
              master.addStep(source);
            }
            TransHopMeta masterHop=new TransHopMeta(source,target);
            master.addTransHop(masterHop);
          }
 else {
            StepMeta target=master.findStep(referenceStep.getName());
            if (target == null) {
              target=(StepMeta)referenceStep.clone();
              target.setLocation(target.getLocation().x,target.getLocation().y);
              master.addStep(target);
            }
            int nrSlaves=previousClusterSchema.getSlaveServers().size();
            for (int slaveNr=0; slaveNr < nrSlaves; slaveNr++) {
              SlaveServer slaveServer=(SlaveServer)previousClusterSchema.getSlaveServers().get(slaveNr);
              if (!slaveServer.isMaster()) {
                int port=getPort(previousClusterSchema,slaveServer,referenceStep.getName());
                RemoteStep remoteSlaveStep=new RemoteStep(slaveServer.getHostname(),Integer.toString(port),previousStep.getName(),0,target.getName(),0,slaveServer.getName());
                target.getRemoteInputSteps().add(remoteSlaveStep);
                TransMeta slave=getSlaveTransformation(previousClusterSchema,slaveServer);
                StepMeta previous=slave.findStep(previousStep.getName());
                if (previous == null) {
                  previous=addSlaveCopy(slave,previousStep);
                }
                RemoteStep remoteMasterStep=new RemoteStep(masterServer.getHostname(),Integer.toString(port),previous.getName(),0,target.getName(),0,masterServer.getName());
                previous.getRemoteOutputSteps().add(remoteMasterStep);
              }
            }
          }
        }
 else {
          if (previousClusterSchema == null) {
            int nrSlaves=referenceClusterSchema.getSlaveServers().size();
            for (int s=0; s < nrSlaves; s++) {
              SlaveServer slaveServer=(SlaveServer)referenceClusterSchema.getSlaveServers().get(s);
              if (!slaveServer.isMaster()) {
                StepMeta previous=master.findStep(previousStep.getName());
                if (previous == null) {
                  previous=(StepMeta)previousStep.clone();
                  previous.setLocation(previousStep.getLocation().x,previousStep.getLocation().y);
                  master.addStep(previous);
                }
                int port=getPort(referenceClusterSchema,slaveServer,referenceStep.getName());
                RemoteStep remoteMasterStep=new RemoteStep(masterServer.getHostname(),Integer.toString(port),previous.getName(),0,referenceStep.getName(),0,masterServer.getName());
                previous.getRemoteOutputSteps().add(remoteMasterStep);
                TransMeta slave=getSlaveTransformation(referenceClusterSchema,slaveServer);
                StepMeta slaveStep=slave.findStep(referenceStep.getName());
                if (slaveStep == null) {
                  slaveStep=addSlaveCopy(slave,referenceStep);
                }
                RemoteStep remoteSlaveStep=new RemoteStep(slaveServer.getHostname(),Integer.toString(port),referenceStep.getName(),0,slaveStep.getName(),0,slaveServer.getName());
                slaveStep.getRemoteInputSteps().add(remoteSlaveStep);
              }
            }
          }
 else {
            int nrSlaves=referenceClusterSchema.getSlaveServers().size();
            for (int slaveNr=0; slaveNr < nrSlaves; slaveNr++) {
              SlaveServer slaveServer=referenceClusterSchema.getSlaveServers().get(slaveNr);
              if (!slaveServer.isMaster()) {
                TransMeta slave=getSlaveTransformation(referenceClusterSchema,slaveServer);
                StepMeta target=slave.findStep(referenceStep.getName());
                if (target == null) {
                  target=addSlaveCopy(slave,referenceStep);
                }
                StepMeta source=slave.findStep(previousStep.getName());
                if (source == null) {
                  source=addSlaveCopy(slave,previousStep);
                }
                TransHopMeta slaveHop=new TransHopMeta(source,target);
                slave.addTransHop(slaveHop);
                StepPartitioningMeta sourceStepPartitioningMeta=previousStep.getStepPartitioningMeta();
                StepPartitioningMeta targetStepPartitioningMeta=referenceStep.getStepPartitioningMeta();
                if (previousStep.getStepPartitioningMeta().isPartitioned() && referenceStep.isPartitioned() && sourceStepPartitioningMeta.equals(targetStepPartitioningMeta)) {
                  PartitionSchema sourcePartitionSchema=sourceStepPartitioningMeta.getPartitionSchema();
                  Map<PartitionSchema,List<String>> partitionSchemaMap=slaveServerPartitionsMap.get(slaveServer);
                  List<String> ids=partitionSchemaMap.get(sourcePartitionSchema.getName() + " (slave)");
                  if (ids != null) {
                    System.out.println("Found ids!");
                  }
                  List<String> slavePartitionIDs=new ArrayList<String>();
                  for (int partitionNr=0; partitionNr < sourcePartitionSchema.getPartitionIDs().size(); partitionNr++) {
                    if ((partitionNr % nrSlaves) == slaveNr) {
                      slavePartitionIDs.add(sourcePartitionSchema.getPartitionIDs().get(partitionNr));
                    }
                  }
                  StepPartitioningMeta slaveStepPartitioningMeta=(StepPartitioningMeta)sourceStepPartitioningMeta.clone();
                  slaveStepPartitioningMeta.getPartitionSchema().setPartitionIDs(slavePartitionIDs);
                  source.setStepPartitioningMeta(slaveStepPartitioningMeta);
                  target.setStepPartitioningMeta(slaveStepPartitioningMeta);
                  source.setTargetStepPartitioningMeta(slaveStepPartitioningMeta);
                }
 else                 if ((!previousStep.isPartitioned() && referenceStep.isPartitioned()) || (previousStep.isPartitioned() && referenceStep.isPartitioned() && !sourceStepPartitioningMeta.equals(target.getStepPartitioningMeta()))) {
                  PartitionSchema targetPartitionSchema=targetStepPartitioningMeta.getPartitionSchema();
                  PartitionSchema sourcePartitionSchema=sourceStepPartitioningMeta.getPartitionSchema();
                  for (int partSlaveNr=0; partSlaveNr < referenceClusterSchema.getSlaveServers().size(); partSlaveNr++) {
                    SlaveServer partSlaveServer=referenceClusterSchema.getSlaveServers().get(partSlaveNr);
                    if (!partSlaveServer.isMaster() && !slaveServer.equals(partSlaveServer)) {
                      Map<PartitionSchema,List<String>> partitionsMap=slaveServerPartitionsMap.get(partSlaveServer);
                      int nrOfTargetPartitions=1;
                      if (target.isPartitioned() && targetPartitionSchema != null) {
                        List<String> targetPartitionsList=partitionsMap.get(targetPartitionSchema);
                        nrOfTargetPartitions=targetPartitionsList.size();
                      }
                      int nrOfSourcePartitions=1;
                      if (source.isPartitioned() && sourcePartitionSchema != null) {
                        List<String> sourcePartitionsList=partitionsMap.get(sourcePartitionSchema);
                        nrOfSourcePartitions=sourcePartitionsList.size();
                      }
                      for (int sourceCopyNr=0; sourceCopyNr < nrOfSourcePartitions; sourceCopyNr++) {
                        for (int targetCopyNr=0; targetCopyNr < nrOfTargetPartitions; targetCopyNr++) {
                          if (sourceCopyNr != targetCopyNr) {
                            int outPort=getPort(referenceClusterSchema,slaveServer,partSlaveServer + "-" + source.getName()+ "."+ sourceCopyNr+ " --> "+ target.getName()+ "."+ targetCopyNr);
                            RemoteStep remoteOutputStep=new RemoteStep(partSlaveServer.getHostname(),Integer.toString(outPort),source.getName(),sourceCopyNr,target.getName(),targetCopyNr,partSlaveServer.getName());
                            source.getRemoteOutputSteps().add(remoteOutputStep);
                            int inPort=getPort(referenceClusterSchema,partSlaveServer,slaveServer + "-" + source.getName()+ "."+ sourceCopyNr+ " --> "+ target.getName()+ "."+ targetCopyNr);
                            RemoteStep remoteInputStep=new RemoteStep(partSlaveServer.getHostname(),Integer.toString(inPort),source.getName(),sourceCopyNr,target.getName(),targetCopyNr,slaveServer.getName());
                            target.getRemoteInputSteps().add(remoteInputStep);
                          }
                        }
                      }
                      if (targetStepPartitioningMeta.isPartitioned()) {
                        PartitionSchema partitionSchema=(PartitionSchema)targetStepPartitioningMeta.getPartitionSchema().clone();
                        if (partitionSchema.isDynamicallyDefined()) {
                          partitionSchema.expandPartitionsDynamically(referenceClusterSchema.findNrSlaves(),originalTransformation);
                        }
                        if (slave.findPartitionSchema(targetPartitionSchema.getName()) == null) {
                          slave.getPartitionSchemas().add(targetPartitionSchema);
                          source.setTargetStepPartitioningMeta(targetStepPartitioningMeta.clone());
                        }
                      }
                      if (sourceStepPartitioningMeta.isPartitioned()) {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (nrPreviousSteps == 0) {
        if (referenceClusterSchema == null) {
          if (master.findStep(referenceStep.getName()) == null) {
            master.addStep((StepMeta)referenceStep.clone());
          }
        }
 else {
          int nrSlaves=referenceClusterSchema.getSlaveServers().size();
          for (int s=0; s < nrSlaves; s++) {
            SlaveServer slaveServer=(SlaveServer)referenceClusterSchema.getSlaveServers().get(s);
            if (!slaveServer.isMaster()) {
              TransMeta slave=getSlaveTransformation(referenceClusterSchema,slaveServer);
              addSlaveCopy(slave,referenceStep);
            }
          }
        }
      }
    }
    for (int i=0; i < referenceSteps.length; i++) {
      StepMeta originalStep=referenceSteps[i];
      ClusterSchema originalClusterSchema=originalStep.getClusterSchema();
      StepMeta infoSteps[]=originalTransformation.getInfoStep(originalStep);
      for (int p=0; infoSteps != null && p < infoSteps.length; p++) {
        StepMeta infoStep=infoSteps[p];
        ClusterSchema infoClusterSchema=infoStep.getClusterSchema();
        if (originalClusterSchema == null) {
          if (infoClusterSchema == null) {
            StepMeta target=master.findStep(originalStep.getName());
            StepMeta source=master.findStep(infoStep.getName());
            TransHopMeta masterHop=new TransHopMeta(source,target);
            master.addTransHop(masterHop);
          }
 else {
          }
        }
 else {
          if (infoClusterSchema == null) {
            int nrSlaves=originalClusterSchema.getSlaveServers().size();
            for (int s=0; s < nrSlaves; s++) {
              SlaveServer slaveServer=(SlaveServer)originalClusterSchema.getSlaveServers().get(s);
              if (!slaveServer.isMaster()) {
                SocketWriterMeta socketWriterMeta=new SocketWriterMeta();
                socketWriterMeta.setPort("" + getPort(originalClusterSchema,slaveServer,originalStep.getName()));
                socketWriterMeta.setBufferSize(originalClusterSchema.getSocketsBufferSize());
                socketWriterMeta.setFlushInterval(originalClusterSchema.getSocketsFlushInterval());
                socketWriterMeta.setCompressed(originalClusterSchema.isSocketsCompressed());
                StepMeta writerStep=new StepMeta(getWriterName(originalStep.getName(),originalClusterSchema,slaveServer),socketWriterMeta);
                writerStep.setLocation(originalStep.getLocation().x,originalStep.getLocation().y + (s * FANOUT * 2) - (nrSlaves * FANOUT / 2));
                writerStep.setDraw(originalStep.isDrawn());
                master.addStep(writerStep);
                StepMeta previous=master.findStep(infoStep.getName());
                if (previous == null) {
                  previous=(StepMeta)infoStep.clone();
                  master.addStep(previous);
                }
                TransHopMeta masterHop=new TransHopMeta(previous,writerStep);
                master.addTransHop(masterHop);
                TransMeta slave=getSlaveTransformation(originalClusterSchema,slaveServer);
                SocketReaderMeta socketReaderMeta=new SocketReaderMeta();
                socketReaderMeta.setHostname(masterServer.getHostname());
                socketReaderMeta.setPort("" + getPort(originalClusterSchema,slaveServer,originalStep.getName()));
                socketReaderMeta.setBufferSize(originalClusterSchema.getSocketsBufferSize());
                socketReaderMeta.setCompressed(originalClusterSchema.isSocketsCompressed());
                StepMeta readerStep=new StepMeta(getReaderName(originalStep.getName(),originalClusterSchema,slaveServer),socketReaderMeta);
                readerStep.setLocation(originalStep.getLocation().x - (SPLIT / 2),originalStep.getLocation().y);
                readerStep.setDraw(originalStep.isDrawn());
                slave.addStep(readerStep);
                StepMeta slaveStep=slave.findStep(originalStep.getName());
                if (slaveStep == null) {
                  slaveStep=addSlaveCopy(slave,originalStep);
                }
                TransHopMeta slaveHop=new TransHopMeta(readerStep,slaveStep);
                slave.addTransHop(slaveHop);
                String infoStepNames[]=slaveStep.getStepMetaInterface().getInfoSteps();
                if (infoStepNames != null) {
                  StepMeta is[]=new StepMeta[infoStepNames.length];
                  for (int n=0; n < infoStepNames.length; n++) {
                    is[n]=slave.findStep(infoStepNames[n]);
                    if (infoStepNames[n].equals(infoStep.getName())) {
                      infoSteps[n]=readerStep;
                    }
                  }
                  slaveStep.getStepMetaInterface().setInfoSteps(infoSteps);
                }
              }
            }
          }
 else {
            int nrSlaves=originalClusterSchema.getSlaveServers().size();
            for (int s=0; s < nrSlaves; s++) {
              SlaveServer slaveServer=(SlaveServer)originalClusterSchema.getSlaveServers().get(s);
              if (!slaveServer.isMaster()) {
                TransMeta slave=getSlaveTransformation(originalClusterSchema,slaveServer);
                StepMeta slaveStep=slave.findStep(originalStep.getName());
                String infoStepNames[]=slaveStep.getStepMetaInterface().getInfoSteps();
                if (infoStepNames != null) {
                  StepMeta is[]=new StepMeta[infoStepNames.length];
                  for (int n=0; n < infoStepNames.length; n++) {
                    is[n]=slave.findStep(infoStepNames[n]);
                    if (slave.findTransHop(is[n],slaveStep) == null) {
                      TransHopMeta infoHop=new TransHopMeta(is[n],slaveStep);
                      slave.addTransHop(infoHop);
                    }
                  }
                  slaveStep.getStepMetaInterface().setInfoSteps(infoSteps);
                }
              }
            }
          }
        }
      }
    }
    for (    TransMeta transMeta : slaveTransMap.values()) {
      transMeta.clearChanged();
    }
    master.clearChanged();
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected problem while generating master transformation",e);
  }
}
