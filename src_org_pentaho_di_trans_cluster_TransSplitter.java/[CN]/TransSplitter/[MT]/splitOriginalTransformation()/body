{
  clear();
  findUsedOriginalSteps();
  checkClusterConfiguration();
  generateSlavePartitionSchemas();
  try {
    SlaveServer masterSlaveServer=getMasterServer();
    masterTransMeta=getOriginalCopy(false,null,null);
    ClusterSchema clusterSchema=originalTransformation.findFirstUsedClusterSchema();
    List<SlaveServer> slaveServers=clusterSchema.getSlaveServers();
    int nrSlavesNodes=clusterSchema.findNrSlaves();
    for (int r=0; r < referenceSteps.length; r++) {
      StepMeta referenceStep=referenceSteps[r];
      int nrPreviousSteps=originalTransformation.findNrPrevSteps(referenceStep);
      for (int p=0; p < nrPreviousSteps; p++) {
        StepMeta previousStep=originalTransformation.findPrevStep(referenceStep,p);
        if (!referenceStep.isClustered()) {
          if (!previousStep.isClustered()) {
            StepMeta target=masterTransMeta.findStep(referenceStep.getName());
            if (target == null) {
              target=(StepMeta)referenceStep.clone();
              masterTransMeta.addStep(target);
            }
            StepMeta source=masterTransMeta.findStep(previousStep.getName());
            if (source == null) {
              source=(StepMeta)previousStep.clone();
              masterTransMeta.addStep(source);
            }
            TransHopMeta masterHop=new TransHopMeta(source,target);
            masterTransMeta.addTransHop(masterHop);
          }
 else {
            StepMeta masterStep=masterTransMeta.findStep(referenceStep.getName());
            if (masterStep == null) {
              masterStep=(StepMeta)referenceStep.clone();
              masterStep.setLocation(masterStep.getLocation().x,masterStep.getLocation().y);
              masterTransMeta.addStep(masterStep);
            }
            Queue<Integer> masterStepCopyNumbers=new LinkedList<Integer>();
            for (int i=0; i < masterStep.getCopies(); i++) {
              masterStepCopyNumbers.add(i);
            }
            for (int slaveNr=0; slaveNr < slaveServers.size(); slaveNr++) {
              SlaveServer sourceSlaveServer=slaveServers.get(slaveNr);
              if (!sourceSlaveServer.isMaster()) {
                TransMeta slave=getSlaveTransformation(clusterSchema,sourceSlaveServer);
                StepMeta slaveStep=slave.findStep(previousStep.getName());
                if (slaveStep == null) {
                  slaveStep=addSlaveCopy(slave,previousStep,sourceSlaveServer);
                }
                StepPartitioningMeta previousStepPartitioningMeta=previousStep.getStepPartitioningMeta();
                PartitionSchema previousPartitionSchema=previousStepPartitioningMeta.getPartitionSchema();
                int nrOfSourceCopies=determineNrOfStepCopies(sourceSlaveServer,previousStep);
                for (int sourceCopyNr=0; sourceCopyNr < nrOfSourceCopies; sourceCopyNr++) {
                  Integer masterStepCopyNr=masterStepCopyNumbers.poll();
                  if (masterStepCopyNr == null) {
                    masterStepCopyNr=0;
                  }
                  int port=getPort(clusterSchema,sourceSlaveServer,slaveStep.getName(),sourceCopyNr,masterSlaveServer,masterStep.getName(),masterStepCopyNr);
                  RemoteStep remoteMasterStep=new RemoteStep(sourceSlaveServer.getHostname(),masterSlaveServer.getHostname(),Integer.toString(port),slaveStep.getName(),sourceCopyNr,masterStep.getName(),masterStepCopyNr,sourceSlaveServer.getName(),masterSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                  masterStep.getRemoteInputSteps().add(remoteMasterStep);
                  RemoteStep remoteSlaveStep=new RemoteStep(sourceSlaveServer.getHostname(),masterSlaveServer.getHostname(),Integer.toString(port),slaveStep.getName(),sourceCopyNr,masterStep.getName(),masterStepCopyNr,sourceSlaveServer.getName(),masterSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                  slaveStep.getRemoteOutputSteps().add(remoteSlaveStep);
                  if (slaveStep.isPartitioned()) {
                    slaveStepCopyPartitionDistribution.addPartition(sourceSlaveServer.getName(),previousPartitionSchema.getName(),sourceCopyNr);
                  }
                }
                if (previousStepPartitioningMeta.isPartitioned()) {
                  StepPartitioningMeta stepPartitioningMeta=previousStepPartitioningMeta.clone();
                  PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                  partitionSchema.setName(createTargetPartitionSchemaName(partitionSchema.getName()));
                  if (partitionSchema.isDynamicallyDefined()) {
                    partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                  }
                  masterStep.setTargetStepPartitioningMeta(stepPartitioningMeta);
                  masterTransMeta.addOrReplacePartitionSchema(partitionSchema);
                  stepPartitioningMeta=previousStepPartitioningMeta.clone();
                  partitionSchema=stepPartitioningMeta.getPartitionSchema();
                  partitionSchema.setName(createSlavePartitionSchemaName(partitionSchema.getName()));
                  if (partitionSchema.isDynamicallyDefined()) {
                    partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                  }
                  partitionSchema.retainPartitionsForSlaveServer(clusterSchema.findNrSlaves(),getSlaveServerNumber(clusterSchema,sourceSlaveServer));
                  slave.addOrReplacePartitionSchema(partitionSchema);
                }
              }
            }
          }
        }
 else {
          if (!previousStep.isClustered()) {
            StepMeta sourceStep=masterTransMeta.findStep(previousStep.getName());
            if (sourceStep == null) {
              sourceStep=(StepMeta)previousStep.clone();
              sourceStep.setLocation(previousStep.getLocation().x,previousStep.getLocation().y);
              masterTransMeta.addStep(sourceStep);
            }
            Queue<Integer> masterStepCopyNumbers=new LinkedList<Integer>();
            for (int i=0; i < sourceStep.getCopies(); i++) {
              masterStepCopyNumbers.add(i);
            }
            for (int s=0; s < slaveServers.size(); s++) {
              SlaveServer targetSlaveServer=slaveServers.get(s);
              if (!targetSlaveServer.isMaster()) {
                TransMeta slaveTransMeta=getSlaveTransformation(clusterSchema,targetSlaveServer);
                StepMeta targetStep=slaveTransMeta.findStep(referenceStep.getName());
                if (targetStep == null) {
                  targetStep=addSlaveCopy(slaveTransMeta,referenceStep,targetSlaveServer);
                }
                StepPartitioningMeta targetStepPartitioningMeta=referenceStep.getStepPartitioningMeta();
                PartitionSchema targetPartitionSchema=targetStepPartitioningMeta.getPartitionSchema();
                int nrOfTargetCopies=determineNrOfStepCopies(targetSlaveServer,referenceStep);
                for (int targetCopyNr=0; targetCopyNr < nrOfTargetCopies; targetCopyNr++) {
                  Integer masterStepCopyNr=masterStepCopyNumbers.poll();
                  if (masterStepCopyNr == null) {
                    masterStepCopyNr=0;
                  }
                  int port=getPort(clusterSchema,masterSlaveServer,sourceStep.getName(),masterStepCopyNr,targetSlaveServer,referenceStep.getName(),targetCopyNr);
                  RemoteStep remoteMasterStep=new RemoteStep(masterSlaveServer.getHostname(),targetSlaveServer.getHostname(),Integer.toString(port),sourceStep.getName(),masterStepCopyNr,referenceStep.getName(),targetCopyNr,masterSlaveServer.getName(),targetSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                  sourceStep.getRemoteOutputSteps().add(remoteMasterStep);
                  RemoteStep remoteSlaveStep=new RemoteStep(masterSlaveServer.getHostname(),targetSlaveServer.getHostname(),Integer.toString(port),sourceStep.getName(),masterStepCopyNr,referenceStep.getName(),targetCopyNr,masterSlaveServer.getName(),targetSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                  targetStep.getRemoteInputSteps().add(remoteSlaveStep);
                  if (targetStep.isPartitioned()) {
                    slaveStepCopyPartitionDistribution.addPartition(targetSlaveServer.getName(),targetPartitionSchema.getName(),targetCopyNr);
                  }
                }
                if (targetStepPartitioningMeta.isPartitioned()) {
                  StepPartitioningMeta stepPartitioningMeta=targetStepPartitioningMeta.clone();
                  PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                  partitionSchema.setName(createTargetPartitionSchemaName(partitionSchema.getName()));
                  if (partitionSchema.isDynamicallyDefined()) {
                    partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                  }
                  sourceStep.setTargetStepPartitioningMeta(stepPartitioningMeta);
                  masterTransMeta.addOrReplacePartitionSchema(partitionSchema);
                  stepPartitioningMeta=targetStepPartitioningMeta.clone();
                  partitionSchema=stepPartitioningMeta.getPartitionSchema();
                  partitionSchema.setName(createSlavePartitionSchemaName(partitionSchema.getName()));
                  if (partitionSchema.isDynamicallyDefined()) {
                    partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                  }
                  partitionSchema.retainPartitionsForSlaveServer(clusterSchema.findNrSlaves(),getSlaveServerNumber(clusterSchema,targetSlaveServer));
                  slaveTransMeta.addOrReplacePartitionSchema(partitionSchema);
                }
              }
            }
          }
 else {
            for (int slaveNr=0; slaveNr < slaveServers.size(); slaveNr++) {
              SlaveServer targetSlaveServer=slaveServers.get(slaveNr);
              if (!targetSlaveServer.isMaster()) {
                TransMeta slaveTransMeta=getSlaveTransformation(clusterSchema,targetSlaveServer);
                StepMeta targetStep=slaveTransMeta.findStep(referenceStep.getName());
                if (targetStep == null) {
                  targetStep=addSlaveCopy(slaveTransMeta,referenceStep,targetSlaveServer);
                }
                StepMeta sourceStep=slaveTransMeta.findStep(previousStep.getName());
                if (sourceStep == null) {
                  sourceStep=addSlaveCopy(slaveTransMeta,previousStep,targetSlaveServer);
                }
                TransHopMeta slaveHop=new TransHopMeta(sourceStep,targetStep);
                slaveTransMeta.addTransHop(slaveHop);
                StepPartitioningMeta sourceStepPartitioningMeta=previousStep.getStepPartitioningMeta();
                StepPartitioningMeta targetStepPartitioningMeta=referenceStep.getStepPartitioningMeta();
                if (previousStep.isPartitioned() && referenceStep.isPartitioned() && sourceStepPartitioningMeta.equals(targetStepPartitioningMeta)) {
                  StepPartitioningMeta stepPartitioningMeta=sourceStepPartitioningMeta.clone();
                  PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                  partitionSchema.setName(createSlavePartitionSchemaName(partitionSchema.getName()));
                  if (partitionSchema.isDynamicallyDefined()) {
                    partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                  }
                  partitionSchema.retainPartitionsForSlaveServer(clusterSchema.findNrSlaves(),getSlaveServerNumber(clusterSchema,targetSlaveServer));
                  sourceStep.setStepPartitioningMeta(stepPartitioningMeta);
                  targetStep.setStepPartitioningMeta(stepPartitioningMeta);
                  slaveTransMeta.addOrReplacePartitionSchema(partitionSchema);
                }
 else                 if ((!previousStep.isPartitioned() && referenceStep.isPartitioned()) || (previousStep.isPartitioned() && referenceStep.isPartitioned() && !sourceStepPartitioningMeta.equals(targetStep.getStepPartitioningMeta()))) {
                  PartitionSchema targetPartitionSchema=targetStepPartitioningMeta.getPartitionSchema();
                  PartitionSchema sourcePartitionSchema=sourceStepPartitioningMeta.getPartitionSchema();
                  for (int partSlaveNr=0; partSlaveNr < slaveServers.size(); partSlaveNr++) {
                    SlaveServer sourceSlaveServer=slaveServers.get(partSlaveNr);
                    if (!sourceSlaveServer.isMaster()) {
                      Map<PartitionSchema,List<String>> partitionsMap=slaveServerPartitionsMap.get(sourceSlaveServer);
                      int nrOfTargetPartitions=1;
                      if (targetStep.isPartitioned() && targetPartitionSchema != null) {
                        List<String> targetPartitionsList=partitionsMap.get(targetPartitionSchema);
                        nrOfTargetPartitions=targetPartitionsList.size();
                      }
 else                       if (targetStep.getCopies() > 1) {
                        nrOfTargetPartitions=targetStep.getCopies();
                      }
                      int nrOfSourcePartitions=1;
                      if (sourceStep.isPartitioned() && sourcePartitionSchema != null) {
                        List<String> sourcePartitionsList=partitionsMap.get(sourcePartitionSchema);
                        nrOfSourcePartitions=sourcePartitionsList.size();
                      }
 else                       if (sourceStep.getCopies() > 1) {
                        nrOfSourcePartitions=sourceStep.getCopies();
                      }
                      for (int sourceCopyNr=0; sourceCopyNr < nrOfSourcePartitions; sourceCopyNr++) {
                        for (int targetCopyNr=0; targetCopyNr < nrOfTargetPartitions; targetCopyNr++) {
                          if (!targetSlaveServer.equals(sourceSlaveServer)) {
                            int outPort=getPort(clusterSchema,targetSlaveServer,sourceStep.getName(),sourceCopyNr,sourceSlaveServer,targetStep.getName(),targetCopyNr);
                            RemoteStep remoteOutputStep=new RemoteStep(targetSlaveServer.getHostname(),sourceSlaveServer.getHostname(),Integer.toString(outPort),sourceStep.getName(),sourceCopyNr,targetStep.getName(),targetCopyNr,targetSlaveServer.getName(),sourceSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                            sourceStep.getRemoteOutputSteps().add(remoteOutputStep);
                            int inPort=getPort(clusterSchema,sourceSlaveServer,sourceStep.getName(),sourceCopyNr,targetSlaveServer,targetStep.getName(),targetCopyNr);
                            RemoteStep remoteInputStep=new RemoteStep(sourceSlaveServer.getHostname(),targetSlaveServer.getHostname(),Integer.toString(inPort),sourceStep.getName(),sourceCopyNr,targetStep.getName(),targetCopyNr,sourceSlaveServer.getName(),targetSlaveServer.getName(),socketsBufferSize,compressingSocketStreams);
                            targetStep.getRemoteInputSteps().add(remoteInputStep);
                          }
                          slaveStepCopyPartitionDistribution.addPartition(sourceSlaveServer.getName(),targetPartitionSchema.getName(),targetCopyNr);
                        }
                      }
                      if (sourceStepPartitioningMeta.isPartitioned()) {
                        StepPartitioningMeta stepPartitioningMeta=sourceStepPartitioningMeta.clone();
                        PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                        partitionSchema.setName(createSlavePartitionSchemaName(partitionSchema.getName()));
                        if (partitionSchema.isDynamicallyDefined()) {
                          partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                        }
                        partitionSchema.retainPartitionsForSlaveServer(clusterSchema.findNrSlaves(),getSlaveServerNumber(clusterSchema,targetSlaveServer));
                        sourceStep.setStepPartitioningMeta(stepPartitioningMeta);
                        slaveTransMeta.addOrReplacePartitionSchema(partitionSchema);
                      }
                      if (targetStepPartitioningMeta.isPartitioned()) {
                        StepPartitioningMeta stepPartitioningMeta=targetStepPartitioningMeta.clone();
                        PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                        partitionSchema.setName(createSlavePartitionSchemaName(partitionSchema.getName()));
                        if (partitionSchema.isDynamicallyDefined()) {
                          partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                        }
                        partitionSchema.retainPartitionsForSlaveServer(clusterSchema.findNrSlaves(),getSlaveServerNumber(clusterSchema,targetSlaveServer));
                        targetStep.setStepPartitioningMeta(stepPartitioningMeta);
                        slaveTransMeta.addOrReplacePartitionSchema(partitionSchema);
                      }
                      if (!sourceStepPartitioningMeta.isPartitioned() || !sourceStepPartitioningMeta.equals(targetStepPartitioningMeta)) {
                        StepPartitioningMeta stepPartitioningMeta=targetStepPartitioningMeta.clone();
                        PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
                        partitionSchema.setName(createTargetPartitionSchemaName(partitionSchema.getName()));
                        if (partitionSchema.isDynamicallyDefined()) {
                          partitionSchema.expandPartitionsDynamically(clusterSchema.findNrSlaves(),originalTransformation);
                        }
                        sourceStep.setTargetStepPartitioningMeta(stepPartitioningMeta);
                        slaveTransMeta.addOrReplacePartitionSchema(partitionSchema);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (nrPreviousSteps == 0) {
        if (!referenceStep.isClustered()) {
          if (masterTransMeta.findStep(referenceStep.getName()) == null) {
            masterTransMeta.addStep((StepMeta)referenceStep.clone());
          }
        }
 else {
          for (int s=0; s < slaveServers.size(); s++) {
            SlaveServer slaveServer=slaveServers.get(s);
            if (!slaveServer.isMaster()) {
              TransMeta slave=getSlaveTransformation(clusterSchema,slaveServer);
              if (slave.findStep(referenceStep.getName()) == null) {
                addSlaveCopy(slave,referenceStep,slaveServer);
              }
            }
          }
        }
      }
    }
    for (int i=0; i < referenceSteps.length; i++) {
      StepMeta originalStep=referenceSteps[i];
      StepMeta infoSteps[]=originalTransformation.getInfoStep(originalStep);
      for (int p=0; infoSteps != null && p < infoSteps.length; p++) {
        StepMeta infoStep=infoSteps[p];
        if (!originalStep.isClustered()) {
          if (!infoStep.isClustered()) {
            StepMeta target=masterTransMeta.findStep(originalStep.getName());
            StepMeta source=masterTransMeta.findStep(infoStep.getName());
            TransHopMeta masterHop=new TransHopMeta(source,target);
            masterTransMeta.addTransHop(masterHop);
          }
 else {
            int nrSlaves=clusterSchema.getSlaveServers().size();
            for (int s=0; s < nrSlaves; s++) {
              SlaveServer sourceSlaveServer=(SlaveServer)clusterSchema.getSlaveServers().get(s);
              if (!sourceSlaveServer.isMaster()) {
                TransMeta slave=getSlaveTransformation(clusterSchema,sourceSlaveServer);
                SocketWriterMeta socketWriterMeta=new SocketWriterMeta();
                int port=getPort(clusterSchema,sourceSlaveServer,infoStep.getName(),0,masterSlaveServer,originalStep.getName(),0);
                socketWriterMeta.setPort("" + port);
                socketWriterMeta.setBufferSize(clusterSchema.getSocketsBufferSize());
                socketWriterMeta.setFlushInterval(clusterSchema.getSocketsFlushInterval());
                socketWriterMeta.setCompressed(clusterSchema.isSocketsCompressed());
                StepMeta writerStep=new StepMeta(getWriterName(clusterSchema,sourceSlaveServer,infoStep.getName(),0,masterSlaveServer,originalStep.getName(),0),socketWriterMeta);
                writerStep.setLocation(infoStep.getLocation().x + 50,infoStep.getLocation().y + 50);
                writerStep.setDraw(true);
                slave.addStep(writerStep);
                TransHopMeta slaveHop=new TransHopMeta(infoStep,writerStep);
                if (slave.findTransHop(slaveHop) == null)                 slave.addTransHop(slaveHop);
                SocketReaderMeta socketReaderMeta=new SocketReaderMeta();
                socketReaderMeta.setPort("" + port);
                socketReaderMeta.setBufferSize(clusterSchema.getSocketsBufferSize());
                socketReaderMeta.setCompressed(clusterSchema.isSocketsCompressed());
                StepMeta readerStep=new StepMeta(getReaderName(clusterSchema,sourceSlaveServer,infoStep.getName(),0,masterSlaveServer,originalStep.getName(),0),socketReaderMeta);
                readerStep.setLocation(infoStep.getLocation().x,infoStep.getLocation().y + (s * FANOUT * 2) - (nrSlaves * FANOUT / 2));
                readerStep.setDraw(true);
                masterTransMeta.addStep(readerStep);
                String dummyName=infoStep.getName();
                StepMeta dummyStep=masterTransMeta.findStep(dummyName);
                if (dummyStep == null) {
                  DummyTransMeta dummy=new DummyTransMeta();
                  dummyStep=new StepMeta(dummyName,dummy);
                  dummyStep.setLocation(infoStep.getLocation().x + (SPLIT / 2),infoStep.getLocation().y);
                  dummyStep.setDraw(true);
                  dummyStep.setDescription("This step merges the data from the various data streams coming from the slave transformations.\nIt does that right before it hits the step that reads from a specific (info) step.");
                  masterTransMeta.addStep(dummyStep);
                  StepMeta masterTargetStep=masterTransMeta.findStep(originalStep.getName());
                  TransHopMeta targetHop=new TransHopMeta(dummyStep,masterTargetStep);
                  masterTransMeta.addTransHop(targetHop);
                  String infoStepNames[]=masterTargetStep.getStepMetaInterface().getStepIOMeta().getInfoStepnames();
                  if (infoStepNames != null) {
                    StepMeta is[]=new StepMeta[infoStepNames.length];
                    for (int n=0; n < infoStepNames.length; n++) {
                      is[n]=slave.findStep(infoStepNames[n]);
                      if (infoStepNames[n].equals(infoStep.getName())) {
                        infoSteps[n]=readerStep;
                      }
                    }
                    masterTargetStep.getStepMetaInterface().getStepIOMeta().setInfoSteps(infoSteps);
                  }
                }
                TransHopMeta mergeHop=new TransHopMeta(readerStep,dummyStep);
                if (masterTransMeta.findTransHop(mergeHop) == null) {
                  masterTransMeta.addTransHop(mergeHop);
                }
              }
            }
          }
        }
 else {
          if (!infoStep.isClustered()) {
            for (int s=0; s < slaveServers.size(); s++) {
              SlaveServer targetSlaveServer=slaveServers.get(s);
              if (!targetSlaveServer.isMaster()) {
                SocketWriterMeta socketWriterMeta=new SocketWriterMeta();
                socketWriterMeta.setPort("" + getPort(clusterSchema,masterSlaveServer,infoStep.getName(),0,targetSlaveServer,originalStep.getName(),0));
                socketWriterMeta.setBufferSize(clusterSchema.getSocketsBufferSize());
                socketWriterMeta.setFlushInterval(clusterSchema.getSocketsFlushInterval());
                socketWriterMeta.setCompressed(clusterSchema.isSocketsCompressed());
                StepMeta writerStep=new StepMeta(getWriterName(clusterSchema,masterSlaveServer,infoStep.getName(),0,targetSlaveServer,originalStep.getName(),0),socketWriterMeta);
                writerStep.setLocation(originalStep.getLocation().x,originalStep.getLocation().y + (s * FANOUT * 2) - (nrSlavesNodes * FANOUT / 2));
                writerStep.setDraw(originalStep.isDrawn());
                masterTransMeta.addStep(writerStep);
                StepMeta previous=masterTransMeta.findStep(infoStep.getName());
                if (previous == null) {
                  previous=(StepMeta)infoStep.clone();
                  masterTransMeta.addStep(previous);
                }
                TransHopMeta masterHop=new TransHopMeta(previous,writerStep);
                masterTransMeta.addTransHop(masterHop);
                TransMeta slave=getSlaveTransformation(clusterSchema,targetSlaveServer);
                SocketReaderMeta socketReaderMeta=new SocketReaderMeta();
                socketReaderMeta.setHostname(masterSlaveServer.getHostname());
                socketReaderMeta.setPort("" + getPort(clusterSchema,masterSlaveServer,infoStep.getName(),0,targetSlaveServer,originalStep.getName(),0));
                socketReaderMeta.setBufferSize(clusterSchema.getSocketsBufferSize());
                socketReaderMeta.setCompressed(clusterSchema.isSocketsCompressed());
                StepMeta readerStep=new StepMeta(getReaderName(clusterSchema,masterSlaveServer,infoStep.getName(),0,targetSlaveServer,originalStep.getName(),0),socketReaderMeta);
                readerStep.setLocation(originalStep.getLocation().x - (SPLIT / 2),originalStep.getLocation().y);
                readerStep.setDraw(originalStep.isDrawn());
                slave.addStep(readerStep);
                StepMeta slaveStep=slave.findStep(originalStep.getName());
                if (slaveStep == null) {
                  slaveStep=addSlaveCopy(slave,originalStep,targetSlaveServer);
                }
                TransHopMeta slaveHop=new TransHopMeta(readerStep,slaveStep);
                slave.addTransHop(slaveHop);
                String infoStepNames[]=slaveStep.getStepMetaInterface().getStepIOMeta().getInfoStepnames();
                if (infoStepNames != null) {
                  StepMeta is[]=new StepMeta[infoStepNames.length];
                  for (int n=0; n < infoStepNames.length; n++) {
                    is[n]=slave.findStep(infoStepNames[n]);
                    if (infoStepNames[n].equals(infoStep.getName())) {
                      infoSteps[n]=readerStep;
                    }
                  }
                  slaveStep.getStepMetaInterface().getStepIOMeta().setInfoSteps(infoSteps);
                }
              }
            }
          }
 else {
            for (int s=0; s < slaveServers.size(); s++) {
              SlaveServer slaveServer=slaveServers.get(s);
              if (!slaveServer.isMaster()) {
                TransMeta slave=getSlaveTransformation(clusterSchema,slaveServer);
                StepMeta slaveStep=slave.findStep(originalStep.getName());
                String infoStepNames[]=slaveStep.getStepMetaInterface().getStepIOMeta().getInfoStepnames();
                if (infoStepNames != null) {
                  StepMeta is[]=new StepMeta[infoStepNames.length];
                  for (int n=0; n < infoStepNames.length; n++) {
                    is[n]=slave.findStep(infoStepNames[n]);
                    if (slave.findTransHop(is[n],slaveStep) == null) {
                      TransHopMeta infoHop=new TransHopMeta(is[n],slaveStep);
                      slave.addTransHop(infoHop);
                    }
                  }
                  slaveStep.getStepMetaInterface().getStepIOMeta().setInfoSteps(infoSteps);
                }
              }
            }
          }
        }
      }
    }
    slaveStepCopyPartitionDistribution.setOriginalPartitionSchemas(originalTransformation.getPartitionSchemas());
    for (    TransMeta transMeta : slaveTransMap.values()) {
      transMeta.setSlaveStepCopyPartitionDistribution(slaveStepCopyPartitionDistribution);
      transMeta.clearChanged();
    }
    masterTransMeta.setSlaveStepCopyPartitionDistribution(slaveStepCopyPartitionDistribution);
    masterTransMeta.clearChanged();
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected problem while generating master transformation",e);
  }
}
