{
  Map<StepMeta,String> stepPartitionFlag=slaveStepPartitionFlag.get(slave);
  if (stepPartitionFlag == null) {
    stepPartitionFlag=new Hashtable<StepMeta,String>();
    slaveStepPartitionFlag.put(slave,stepPartitionFlag);
  }
  if (stepPartitionFlag.get(stepMeta) != null)   return;
  StepPartitioningMeta partitioningMeta=stepMeta.getStepPartitioningMeta();
  if (partitioningMeta != null && partitioningMeta.getMethod() != StepPartitioningMeta.PARTITIONING_METHOD_NONE && partitioningMeta.getPartitionSchema() != null) {
    Map<PartitionSchema,List<String>> schemaPartitionsMap=slaveServerPartitionsMap.get(slaveServer);
    if (schemaPartitionsMap != null) {
      PartitionSchema partitionSchema=partitioningMeta.getPartitionSchema();
      List<String> partitionsList=schemaPartitionsMap.get(partitionSchema);
      if (partitionsList != null) {
        String partIds[]=partitionsList.toArray(new String[partitionsList.size()]);
        String targetSchemaName=partitionSchema.getName() + " (slave)";
        PartitionSchema targetSchema=slave.findPartitionSchema(targetSchemaName);
        if (targetSchema == null) {
          targetSchema=new PartitionSchema(targetSchemaName,partIds);
          slave.getPartitionSchemas().add(targetSchema);
        }
      }
    }
  }
  stepPartitionFlag.put(stepMeta,"Y");
}
