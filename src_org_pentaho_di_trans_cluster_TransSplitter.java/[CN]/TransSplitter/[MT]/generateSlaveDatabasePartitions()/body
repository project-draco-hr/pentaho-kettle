{
  slaveServerPartitionsMap=new Hashtable<SlaveServer,Map<PartitionSchema,List<String>>>();
  for (int i=0; i < originalSteps.length; i++) {
    StepMeta stepMeta=originalSteps[i];
    StepPartitioningMeta stepPartitioningMeta=stepMeta.getStepPartitioningMeta();
    if (stepPartitioningMeta == null)     continue;
    if (stepPartitioningMeta.getMethod() == StepPartitioningMeta.PARTITIONING_METHOD_NONE)     continue;
    ClusterSchema clusterSchema=stepMeta.getClusterSchema();
    if (clusterSchema == null)     continue;
    PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
    int nrPartitions=partitionSchema.getPartitionIDs().length;
    int nrSlaves=clusterSchema.findNrSlaves();
    if (nrSlaves == 0)     continue;
    if (nrPartitions < nrSlaves) {
      throw new KettleException("It doesn't make sense to have a database partitioned, clustered step with less partitions (" + nrPartitions + ") than that there are slave servers ("+ nrSlaves+ ")");
    }
    int s=0;
    for (int p=0; p < nrPartitions; p++) {
      String partitionId=partitionSchema.getPartitionIDs()[p];
      SlaveServer slaveServer=clusterSchema.getSlaveServers().get(s);
      if (slaveServer.isMaster()) {
        s++;
        if (s >= clusterSchema.getSlaveServers().size())         s=0;
        slaveServer=(SlaveServer)clusterSchema.getSlaveServers().get(s);
      }
      Map<PartitionSchema,List<String>> schemaPartitionsMap=slaveServerPartitionsMap.get(slaveServer);
      if (schemaPartitionsMap == null) {
        schemaPartitionsMap=new HashMap<PartitionSchema,List<String>>();
        slaveServerPartitionsMap.put(slaveServer,schemaPartitionsMap);
      }
      List<String> partitions=schemaPartitionsMap.get(partitionSchema);
      if (partitions == null) {
        partitions=new ArrayList<String>();
        schemaPartitionsMap.put(partitionSchema,partitions);
      }
      if (partitions.indexOf(partitionId) < 0) {
        partitions.add(partitionId);
      }
      s++;
      if (s >= clusterSchema.getSlaveServers().size())       s=0;
    }
  }
}
