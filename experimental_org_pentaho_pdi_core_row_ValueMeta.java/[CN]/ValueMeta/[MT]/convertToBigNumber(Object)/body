{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (BigDecimal)object;
case STORAGE_TYPE_INDEXED:
    return (BigDecimal)index[((Integer)object).intValue()];
default :
  throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBigNumber((String)object);
case STORAGE_TYPE_INDEXED:
return convertStringToBigNumber((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new BigDecimal(((Long)object).doubleValue());
case STORAGE_TYPE_INDEXED:
return new BigDecimal(((Long)index[((Integer)object).intValue()]).doubleValue());
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return new BigDecimal(((Double)object).doubleValue());
case STORAGE_TYPE_INDEXED:
return new BigDecimal(((Double)index[((Integer)object).intValue()]).doubleValue());
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertDateToBigNumber((Date)object);
case STORAGE_TYPE_INDEXED:
return convertDateToBigNumber((Date)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBooleanToBigNumber((Boolean)object);
case STORAGE_TYPE_INDEXED:
return convertBooleanToBigNumber((Boolean)index[((Integer)object).intValue()]);
default :
throw new KettleValueException("Unknown storage type " + storageType + " specified.");
}
case TYPE_BINARY:
throw new KettleValueException("I don't know how to convert binary values to integers.");
case TYPE_SERIALIZABLE:
throw new KettleValueException("I don't know how to convert serializable values to integers.");
default :
throw new KettleValueException("Unknown type " + type + " specified.");
}
}
