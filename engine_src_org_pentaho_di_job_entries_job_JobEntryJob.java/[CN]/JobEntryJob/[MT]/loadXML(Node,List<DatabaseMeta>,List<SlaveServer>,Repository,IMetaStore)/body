{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    String method=XMLHandler.getTagValue(entrynode,"specification_method");
    specificationMethod=ObjectLocationSpecificationMethod.getSpecificationMethodByCode(method);
    String jobId=XMLHandler.getTagValue(entrynode,"job_object_id");
    jobObjectId=Const.isEmpty(jobId) ? null : new StringObjectId(jobId);
    filename=XMLHandler.getTagValue(entrynode,"filename");
    jobname=XMLHandler.getTagValue(entrynode,"jobname");
    if (rep != null && rep.isConnected() && !Const.isEmpty(jobname)) {
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_NAME;
    }
    checkObjectLocationSpecificationMethod();
    argFromPrevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    paramsFromPrevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"params_from_previous"));
    execPerRow="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"exec_per_row"));
    setLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_logfile"));
    addDate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_date"));
    addTime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_time"));
    logfile=XMLHandler.getTagValue(entrynode,"logfile");
    logext=XMLHandler.getTagValue(entrynode,"logext");
    logFileLevel=LogLevel.getLogLevelForCode(XMLHandler.getTagValue(entrynode,"loglevel"));
    setAppendLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_append_logfile"));
    remoteSlaveServerName=XMLHandler.getTagValue(entrynode,"slave_server_name");
    passingExport="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"pass_export"));
    directory=XMLHandler.getTagValue(entrynode,"directory");
    createParentFolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"create_parent_folder"));
    forcingSeparateLogging="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"force_separate_logging"));
    String wait=XMLHandler.getTagValue(entrynode,"wait_until_finished");
    if (Const.isEmpty(wait)) {
      waitingToFinish=true;
    }
 else {
      waitingToFinish="Y".equalsIgnoreCase(wait);
    }
    followingAbortRemotely="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"follow_abort_remote"));
    expandingRemoteJob="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"expand_remote_job"));
    int argnr=0;
    while (XMLHandler.getTagValue(entrynode,"argument" + argnr) != null) {
      argnr++;
    }
    arguments=new String[argnr];
    for (int a=0; a < argnr; a++) {
      arguments[a]=XMLHandler.getTagValue(entrynode,"argument" + a);
    }
    Node parametersNode=XMLHandler.getSubNode(entrynode,"parameters");
    String passAll=XMLHandler.getTagValue(parametersNode,"pass_all_parameters");
    passingAllParameters=Const.isEmpty(passAll) || "Y".equalsIgnoreCase(passAll);
    int nrParameters=XMLHandler.countNodes(parametersNode,"parameter");
    parameters=new String[nrParameters];
    parameterFieldNames=new String[nrParameters];
    parameterValues=new String[nrParameters];
    for (int i=0; i < nrParameters; i++) {
      Node knode=XMLHandler.getSubNodeByNr(parametersNode,"parameter",i);
      parameters[i]=XMLHandler.getTagValue(knode,"name");
      parameterFieldNames[i]=XMLHandler.getTagValue(knode,"stream_name");
      parameterValues[i]=XMLHandler.getTagValue(knode,"value");
    }
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException("Unable to load 'job' job entry from XML node",xe);
  }
}
