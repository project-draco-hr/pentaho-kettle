{
  JobMeta jobMeta=null;
  try {
    CurrentDirectoryResolver r=new CurrentDirectoryResolver();
    VariableSpace tmpSpace=r.resolveCurrentDirectory(specificationMethod,space,rep,parentJob,getFilename());
switch (specificationMethod) {
case FILENAME:
      String realFilename=tmpSpace.environmentSubstitute(getFilename());
    if (rep != null) {
      while (realFilename.contains("//")) {
        realFilename=realFilename.replace("//","/");
      }
      try {
        String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
        String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1);
        RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
        jobMeta=rep.loadJob(tmpFilename,dir,null,null);
      }
 catch (      KettleException ke) {
        if (realFilename.endsWith(Const.STRING_JOB_DEFAULT_EXT)) {
          try {
            String tmpFilename=realFilename.substring(realFilename.lastIndexOf("/") + 1,realFilename.indexOf("." + Const.STRING_JOB_DEFAULT_EXT));
            String dirStr=realFilename.substring(0,realFilename.lastIndexOf("/"));
            RepositoryDirectoryInterface dir=rep.findDirectory(dirStr);
            jobMeta=rep.loadJob(tmpFilename,dir,null,null);
          }
 catch (          KettleException ke2) {
          }
        }
      }
    }
  if (jobMeta == null) {
    jobMeta=new JobMeta(tmpSpace,realFilename,rep,metaStore,null);
  }
break;
case REPOSITORY_BY_NAME:
String realDirectory=tmpSpace.environmentSubstitute(getDirectory());
String realJobName=tmpSpace.environmentSubstitute(getJobName());
if (rep != null) {
while (realDirectory.contains("//")) {
realDirectory=realDirectory.replace("//","/");
}
RepositoryDirectoryInterface repositoryDirectory=rep.loadRepositoryDirectoryTree().findDirectory(realDirectory);
if (repositoryDirectory == null) {
throw new KettleException("Unable to find repository directory [" + Const.NVL(realDirectory,"") + "]");
}
jobMeta=rep.loadJob(realJobName,repositoryDirectory,null,null);
}
 else {
try {
jobMeta=new JobMeta(tmpSpace,realDirectory + "/" + realJobName,rep,metaStore,null);
}
 catch (KettleException ke) {
try {
jobMeta=new JobMeta(tmpSpace,realDirectory + "/" + realJobName+ "."+ Const.STRING_JOB_DEFAULT_EXT,rep,metaStore,null);
}
 catch (KettleException ke2) {
ke2.printStackTrace();
throw new KettleException("Could not execute job specified in a repository since we're not connected to one");
}
}
}
break;
case REPOSITORY_BY_REFERENCE:
if (rep != null) {
jobMeta=rep.loadJob(jobObjectId,null);
break;
}
 else {
throw new KettleException("Could not execute job specified in a repository since we're not connected to one");
}
default :
throw new KettleException("The specified object location specification method '" + specificationMethod + "' is not yet supported in this job entry.");
}
if (jobMeta != null) {
jobMeta.setRepository(rep);
jobMeta.setMetaStore(metaStore);
}
return jobMeta;
}
 catch (Exception e) {
throw new KettleException("Unexpected error during job metadata load",e);
}
}
