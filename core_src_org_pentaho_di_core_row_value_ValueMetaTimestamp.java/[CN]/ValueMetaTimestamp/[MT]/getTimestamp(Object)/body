{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_TIMESTAMP:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (Timestamp)object;
case STORAGE_TYPE_BINARY_STRING:
    return (Timestamp)convertBinaryStringToNativeType((byte[])object);
case STORAGE_TYPE_INDEXED:
  return (Timestamp)index[((Integer)object).intValue()];
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToTimestamp((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToTimestamp((String)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToTimestamp((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertNumberToTimestamp((Double)object);
case STORAGE_TYPE_BINARY_STRING:
return convertNumberToTimestamp((Double)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertNumberToTimestamp((Double)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertIntegerToTimestamp((Long)object);
case STORAGE_TYPE_BINARY_STRING:
return convertIntegerToTimestamp((Long)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertIntegerToTimestamp((Long)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBigNumberToTimestamp((BigDecimal)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBigNumberToTimestamp((BigDecimal)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertBigNumberToTimestamp((BigDecimal)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BOOLEAN:
throw new KettleValueException(toString() + " : I don't know how to convert a boolean to a timestamp.");
case TYPE_BINARY:
throw new KettleValueException(toString() + " : I don't know how to convert a binary value to timestamp.");
case TYPE_SERIALIZABLE:
throw new KettleValueException(toString() + " : I don't know how to convert a serializable value to timestamp.");
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
