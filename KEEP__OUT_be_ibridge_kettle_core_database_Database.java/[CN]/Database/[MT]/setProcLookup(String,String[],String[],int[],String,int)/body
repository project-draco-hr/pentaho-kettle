{
  String sql;
  int pos=0;
  sql="{ ";
  if (returnvalue != null && returnvalue.length() != 0) {
    sql+="? = ";
  }
  sql+="call " + proc + " ";
  if (arg.length > 0)   sql+="(";
  for (int i=0; i < arg.length; i++) {
    if (i != 0)     sql+=", ";
    sql+=" ?";
  }
  if (arg.length > 0)   sql+=")";
  sql+="}";
  try {
    log.logDetailed(toString(),"DBA setting callableStatement to [" + sql + "]");
    cstmt=connection.prepareCall(sql);
    pos=1;
    if (!Const.isEmpty(returnvalue)) {
switch (returntype) {
case Value.VALUE_TYPE_NUMBER:
        cstmt.registerOutParameter(pos,java.sql.Types.DOUBLE);
      break;
case Value.VALUE_TYPE_BIGNUMBER:
    cstmt.registerOutParameter(pos,java.sql.Types.DECIMAL);
  break;
case Value.VALUE_TYPE_INTEGER:
cstmt.registerOutParameter(pos,java.sql.Types.BIGINT);
break;
case Value.VALUE_TYPE_STRING:
cstmt.registerOutParameter(pos,java.sql.Types.VARCHAR);
break;
case Value.VALUE_TYPE_DATE:
cstmt.registerOutParameter(pos,java.sql.Types.TIMESTAMP);
break;
case Value.VALUE_TYPE_BOOLEAN:
cstmt.registerOutParameter(pos,java.sql.Types.BOOLEAN);
break;
default :
break;
}
pos++;
}
for (int i=0; i < arg.length; i++) {
if (argdir[i].equalsIgnoreCase("OUT") || argdir[i].equalsIgnoreCase("INOUT")) {
switch (argtype[i]) {
case Value.VALUE_TYPE_NUMBER:
cstmt.registerOutParameter(i + pos,java.sql.Types.DOUBLE);
break;
case Value.VALUE_TYPE_BIGNUMBER:
cstmt.registerOutParameter(i + pos,java.sql.Types.DECIMAL);
break;
case Value.VALUE_TYPE_INTEGER:
cstmt.registerOutParameter(i + pos,java.sql.Types.BIGINT);
break;
case Value.VALUE_TYPE_STRING:
cstmt.registerOutParameter(i + pos,java.sql.Types.VARCHAR);
break;
case Value.VALUE_TYPE_DATE:
cstmt.registerOutParameter(i + pos,java.sql.Types.TIMESTAMP);
break;
case Value.VALUE_TYPE_BOOLEAN:
cstmt.registerOutParameter(i + pos,java.sql.Types.BOOLEAN);
break;
default :
break;
}
}
}
}
 catch (SQLException ex) {
throw new KettleDatabaseException("Unable to prepare database procedure call",ex);
}
}
