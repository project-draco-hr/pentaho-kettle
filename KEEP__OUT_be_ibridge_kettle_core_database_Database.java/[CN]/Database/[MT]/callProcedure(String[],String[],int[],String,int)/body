{
  Row ret;
  try {
    cstmt.execute();
    ret=new Row();
    int pos=1;
    if (resultname != null && resultname.length() != 0) {
      Value v=new Value(resultname,Value.VALUE_TYPE_NONE);
switch (resulttype) {
case Value.VALUE_TYPE_BOOLEAN:
        v.setValue(cstmt.getBoolean(pos));
      break;
case Value.VALUE_TYPE_NUMBER:
    v.setValue(cstmt.getDouble(pos));
  break;
case Value.VALUE_TYPE_BIGNUMBER:
v.setValue(cstmt.getBigDecimal(pos));
break;
case Value.VALUE_TYPE_INTEGER:
v.setValue(cstmt.getLong(pos));
break;
case Value.VALUE_TYPE_STRING:
v.setValue(cstmt.getString(pos));
break;
case Value.VALUE_TYPE_DATE:
v.setValue(cstmt.getTimestamp(pos));
break;
}
ret.addValue(v);
pos++;
}
for (int i=0; i < arg.length; i++) {
if (argdir[i].equalsIgnoreCase("OUT") || argdir[i].equalsIgnoreCase("INOUT")) {
Value v=new Value(arg[i],Value.VALUE_TYPE_NONE);
switch (argtype[i]) {
case Value.VALUE_TYPE_BOOLEAN:
v.setValue(cstmt.getBoolean(pos + i));
break;
case Value.VALUE_TYPE_NUMBER:
v.setValue(cstmt.getDouble(pos + i));
break;
case Value.VALUE_TYPE_BIGNUMBER:
v.setValue(cstmt.getBigDecimal(pos + i));
break;
case Value.VALUE_TYPE_INTEGER:
v.setValue(cstmt.getLong(pos + i));
break;
case Value.VALUE_TYPE_STRING:
v.setValue(cstmt.getString(pos + i));
break;
case Value.VALUE_TYPE_DATE:
v.setValue(cstmt.getTimestamp(pos + i));
break;
}
ret.addValue(v);
}
}
return ret;
}
 catch (SQLException ex) {
throw new KettleDatabaseException("Unable to call procedure",ex);
}
}
