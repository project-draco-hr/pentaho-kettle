{
  try {
    encoding=rep.getStepAttributeString(id_step,"encoding");
    valueName=rep.getStepAttributeString(id_step,"valueName");
    rootNode=rep.getStepAttributeString(id_step,"xml_repeat_element");
    omitXMLheader=rep.getStepAttributeBoolean(id_step,"omitXMLheader");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new XMLField();
      outputFields[i].setFieldName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setElementName(rep.getStepAttributeString(id_step,i,"field_element"));
      outputFields[i].setType(rep.getStepAttributeString(id_step,i,"field_type"));
      outputFields[i].setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      outputFields[i].setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      outputFields[i].setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      outputFields[i].setGroupingSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      outputFields[i].setNullString(rep.getStepAttributeString(id_step,i,"field_nullif"));
      outputFields[i].setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      outputFields[i].setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      outputFields[i].setAttribute(rep.getStepAttributeBoolean(id_step,i,"field_attribute"));
      outputFields[i].setAttributeParentName(rep.getStepAttributeString(id_step,i,"field_attributeName"));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
