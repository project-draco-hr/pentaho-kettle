{
  meta=(MergeRowsMeta)smi;
  data=(MergeRowsData)sdi;
  if (first) {
    first=false;
    data.one=getRowFrom(meta.getReferenceStepName());
    data.two=getRowFrom(meta.getCompareStepName());
    data.keyNrs=new int[meta.getKeyFields().length];
    data.keyAsc=new boolean[meta.getKeyFields().length];
    for (int i=0; i < data.keyNrs.length; i++) {
      data.keyNrs[i]=data.one.searchValueIndex(meta.getKeyFields()[i]);
      if (data.keyNrs[i] < 0) {
        String message="Unable to find field [" + meta.getKeyFields()[i] + "] in reference stream.";
        logError(message);
        throw new KettleStepException(message);
      }
      data.keyAsc[i]=true;
    }
    data.valueNrs=new int[meta.getValueFields().length];
    data.valueAsc=new boolean[meta.getValueFields().length];
    for (int i=0; i < data.valueNrs.length; i++) {
      data.valueNrs[i]=data.one.searchValueIndex(meta.getValueFields()[i]);
      if (data.valueNrs[i] < 0) {
        String message="Unable to find field [" + meta.getValueFields()[i] + "] in reference stream.";
        logError(message);
        throw new KettleStepException(message);
      }
      data.valueAsc[i]=true;
    }
  }
  logRowlevel("ONE: " + data.one + " / TWO: "+ data.two);
  if (data.one == null && data.two == null) {
    setOutputDone();
    return false;
  }
  if (data.one == null && data.two != null) {
    data.two.addValue(VALUE_NEW);
    putRow(data.two);
    data.two=getRowFrom(meta.getCompareStepName());
  }
 else   if (data.one != null && data.two == null) {
    data.one.addValue(VALUE_DELETED);
    putRow(data.one);
    data.one=getRowFrom(meta.getReferenceStepName());
  }
 else {
    int compare=data.one.compare(data.two,data.keyNrs,data.keyAsc);
    if (compare == 0) {
      int compareValues=data.one.compare(data.two,data.valueNrs,data.valueAsc);
      if (compareValues == 0) {
        data.one.addValue(VALUE_IDENTICAL);
        putRow(data.one);
      }
 else {
        data.two.addValue(VALUE_CHANGED);
        putRow(data.two);
      }
      data.one=getRowFrom(meta.getReferenceStepName());
      data.two=getRowFrom(meta.getCompareStepName());
    }
 else {
      if (compare < 0) {
        data.one.addValue(VALUE_DELETED);
        putRow(data.one);
        data.one=getRowFrom(meta.getReferenceStepName());
      }
 else {
        data.two.addValue(VALUE_NEW);
        putRow(data.two);
        data.two=getRowFrom(meta.getCompareStepName());
      }
    }
  }
  if ((linesRead > 0) && (linesRead % Const.ROWS_UPDATE) == 0)   logBasic("linenr " + linesRead);
  return true;
}
