{
  try {
    setIndex(rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_INDEX)));
    setType(rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TYPE)));
    setBatchSize(rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_BATCH_SIZE)));
    setTimeOut(rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TIMEOUT)));
    String timeoutStr=rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_TIMEOUT_UNIT));
    try {
      timeoutUnit=TimeUnit.valueOf(timeoutStr);
    }
 catch (    Exception e) {
      timeoutUnit=DEFAULT_TIMEOUT_UNIT;
    }
    setJsonInsert(rep.getStepAttributeBoolean(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_IS_JSON)));
    setJsonField((rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_JSON_FIELD))));
    setIdInField((rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_ID_IN_FIELD))));
    setOverWriteIfSameId(rep.getStepAttributeBoolean(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_OVERWRITE_IF_EXISTS)));
    setIdOutField((rep.getStepAttributeString(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_ID_OUT_FIELD))));
    setUseOutput(rep.getStepAttributeBoolean(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_USE_OUTPUT)));
    setStopOnError(rep.getStepAttributeBoolean(id_step,joinRepAttr(Dom.TAG_GENERAL,Dom.TAG_STOP_ON_ERROR)));
    clearFields();
    int fieldsNr=rep.countNrStepAttributes(id_step,joinRepAttr(Dom.TAG_FIELD,Dom.TAG_NAME));
    for (int i=0; i < fieldsNr; i++) {
      String name=rep.getStepAttributeString(id_step,i,joinRepAttr(Dom.TAG_FIELD,Dom.TAG_NAME));
      String target=rep.getStepAttributeString(id_step,i,joinRepAttr(Dom.TAG_FIELD,Dom.TAG_TARGET));
      addField(name,target);
    }
    clearServers();
    int serversNr=rep.countNrStepAttributes(id_step,joinRepAttr(Dom.TAG_SERVER,Dom.TAG_SERVER_ADDRESS));
    for (int i=0; i < serversNr; i++) {
      String addr=rep.getStepAttributeString(id_step,i,joinRepAttr(Dom.TAG_SERVER,Dom.TAG_SERVER_ADDRESS));
      int port=(int)rep.getStepAttributeInteger(id_step,i,joinRepAttr(Dom.TAG_SERVER,Dom.TAG_SERVER_PORT));
      addServer(addr,port);
    }
    clearSettings();
    int settingsNr=rep.countNrStepAttributes(id_step,joinRepAttr(Dom.TAG_SETTING,Dom.TAG_SETTING_NAME));
    for (int i=0; i < settingsNr; i++) {
      String name=rep.getStepAttributeString(id_step,i,joinRepAttr(Dom.TAG_SETTING,Dom.TAG_SETTING_NAME));
      String value=rep.getStepAttributeString(id_step,i,joinRepAttr(Dom.TAG_SETTING,Dom.TAG_SETTING_VALUE));
      addSetting(name,value);
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"ElasticSearchBulkMeta.Exception.ErrorReadingRepository"),e);
  }
}
