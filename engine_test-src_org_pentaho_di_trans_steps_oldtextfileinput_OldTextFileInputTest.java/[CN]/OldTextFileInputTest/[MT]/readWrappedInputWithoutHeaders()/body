{
  final String virtualFile="ram://pdi-2607.txt";
  KettleVFS.getFileObject(virtualFile).createFile();
  final String content=new StringBuilder().append("r1c1").append('\n').append(";r1c2\n").append("r2c1").append('\n').append(";r2c2").toString();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bos.write(content.getBytes());
  OutputStream os=KettleVFS.getFileObject(virtualFile).getContent().getOutputStream();
  IOUtils.copy(new ByteArrayInputStream(bos.toByteArray()),os);
  os.close();
  OldTextFileInputMeta meta=new OldTextFileInputMeta();
  meta.setLineWrapped(true);
  meta.setNrWraps(1);
  meta.setInputFields(new TextFileInputField[]{new TextFileInputField("col1",-1,-1),new TextFileInputField("col2",-1,-1)});
  meta.setFileCompression("None");
  meta.setFileType("CSV");
  meta.setHeader(false);
  meta.setNrHeaderLines(-1);
  meta.setFooter(false);
  meta.setNrFooterLines(-1);
  OldTextFileInputData data=new OldTextFileInputData();
  data.setFiles(new FileInputList());
  data.getFiles().addFile(KettleVFS.getFileObject(virtualFile));
  data.outputRowMeta=new RowMeta();
  data.outputRowMeta.addValueMeta(new ValueMetaString("col1"));
  data.outputRowMeta.addValueMeta(new ValueMetaString("col2"));
  data.dataErrorLineHandler=Mockito.mock(FileErrorHandler.class);
  data.fileFormatType=OldTextFileInputMeta.FILE_FORMAT_UNIX;
  data.separator=";";
  data.filterProcessor=new OldTextFileFilterProcessor(new OldTextFileFilter[0]);
  data.filePlayList=new FilePlayListAll();
  RowSet output=new BlockingRowSet(5);
  OldTextFileInput input=StepMockUtil.getStep(OldTextFileInput.class,OldTextFileInputMeta.class,"test");
  input.setOutputRowSets(Collections.singletonList(output));
  while (input.processRow(meta,data)) {
  }
  Object[] row1=output.getRowImmediate();
  assertRow(row1,"r1c1","r1c2");
  Object[] row2=output.getRowImmediate();
  assertRow(row2,"r2c1","r2c2");
  KettleVFS.getFileObject(virtualFile).delete();
}
