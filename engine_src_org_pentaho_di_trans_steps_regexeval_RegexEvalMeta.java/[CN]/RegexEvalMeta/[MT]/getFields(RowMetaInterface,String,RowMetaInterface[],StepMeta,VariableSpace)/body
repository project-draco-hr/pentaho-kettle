{
  try {
    if (!Const.isEmpty(resultfieldname)) {
      if (replacefields) {
        int replaceIndex=inputRowMeta.indexOfValue(resultfieldname);
        if (replaceIndex < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"RegexEvalMeta.Exception.ResultFieldToReplaceNotFound",resultfieldname));
        }
        ValueMetaInterface valueMeta=inputRowMeta.getValueMeta(replaceIndex);
        ValueMetaInterface replaceMeta=ValueMetaFactory.cloneValueMeta(valueMeta,ValueMetaInterface.TYPE_BOOLEAN);
        replaceMeta.setOrigin(name);
        inputRowMeta.setValueMeta(replaceIndex,replaceMeta);
      }
 else {
        ValueMetaInterface v=new ValueMeta(space.environmentSubstitute(resultfieldname),ValueMeta.TYPE_BOOLEAN);
        v.setOrigin(name);
        inputRowMeta.addValueMeta(v);
      }
    }
    if (allowcapturegroups == true) {
      for (int i=0; i < fieldName.length; i++) {
        if (Const.isEmpty(fieldName[i])) {
          continue;
        }
        if (replacefields) {
          int replaceIndex=inputRowMeta.indexOfValue(fieldName[i]);
          if (replaceIndex < 0) {
            throw new KettleStepException(BaseMessages.getString(PKG,"RegexEvalMeta.Exception.ResultFieldToReplaceNotFound",fieldName[i]));
          }
          ValueMetaInterface valueMeta=inputRowMeta.getValueMeta(replaceIndex);
          ValueMetaInterface replaceMeta=constructValueMeta(valueMeta,fieldName[i],i,name);
          inputRowMeta.setValueMeta(replaceIndex,replaceMeta);
        }
 else {
          ValueMetaInterface valueMeta=constructValueMeta(null,fieldName[i],i,name);
          inputRowMeta.addValueMeta(valueMeta);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new KettleStepException(e);
  }
}
