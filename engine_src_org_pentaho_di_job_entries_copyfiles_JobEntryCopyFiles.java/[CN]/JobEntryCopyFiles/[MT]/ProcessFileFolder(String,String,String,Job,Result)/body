{
  boolean entrystatus=false;
  FileObject sourcefilefolder=null;
  FileObject destinationfilefolder=null;
  list_files_remove.clear();
  list_add_result.clear();
  String realSourceFilefoldername=environmentSubstitute(sourcefilefoldername);
  String realDestinationFilefoldername=environmentSubstitute(destinationfilefoldername);
  String realWildcard=environmentSubstitute(wildcard);
  try {
    sourcefilefolder=KettleVFS.getFileObject(realSourceFilefoldername,this);
    destinationfilefolder=KettleVFS.getFileObject(realDestinationFilefoldername,this);
    if (sourcefilefolder.exists()) {
      if (CreateDestinationFolder(destinationfilefolder)) {
        if (sourcefilefolder.getType().equals(FileType.FOLDER) && destinationIsFile) {
          logError(BaseMessages.getString(PKG,"JobCopyFiles.Log.CanNotCopyFolderToFile",realSourceFilefoldername,realDestinationFilefoldername));
          NbrFail++;
        }
 else {
          if (destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE)) {
            destinationfilefolder.copyFrom(sourcefilefolder.getParent(),new TextOneFileSelector(sourcefilefolder.getParent().toString(),sourcefilefolder.getName().getBaseName(),destinationfilefolder.toString()));
            if (isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobCopyFiles.Log.FileCopied",sourcefilefolder.getName().toString(),destinationfilefolder.getName().toString()));
            }
          }
 else           if (sourcefilefolder.getType().equals(FileType.FILE) && destinationIsFile) {
            destinationfilefolder.copyFrom(sourcefilefolder,new TextOneToOneFileSelector(destinationfilefolder));
          }
 else {
            if (isDetailed()) {
              logDetailed("  ");
              logDetailed(BaseMessages.getString(PKG,"JobCopyFiles.Log.FetchFolder",sourcefilefolder.toString()));
            }
            TextFileSelector textFileSelector=new TextFileSelector(sourcefilefolder,destinationfilefolder,realWildcard,parentJob);
            try {
              destinationfilefolder.copyFrom(sourcefilefolder,textFileSelector);
            }
  finally {
              textFileSelector.shutdown();
            }
          }
          if (remove_source_files && !list_files_remove.isEmpty()) {
            String sourceFilefoldername=sourcefilefolder.toString();
            int trimPathLength=sourceFilefoldername.length() + 1;
            FileObject removeFile;
            for (Iterator<String> iter=list_files_remove.iterator(); iter.hasNext() && !parentJob.isStopped(); ) {
              String fileremoventry=iter.next();
              removeFile=null;
              if (fileremoventry.startsWith(sourceFilefoldername)) {
                if (trimPathLength < fileremoventry.length()) {
                  removeFile=sourcefilefolder.getChild(fileremoventry.substring(trimPathLength));
                }
              }
              if (removeFile == null) {
                removeFile=KettleVFS.getFileObject(fileremoventry,this);
              }
              if (removeFile.getType() == FileType.FILE) {
                boolean deletefile=removeFile.delete();
                logBasic(" ------ ");
                if (!deletefile) {
                  logError("      " + BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.CanRemoveFileFolder",fileremoventry));
                }
 else {
                  if (isDetailed()) {
                    logDetailed("      " + BaseMessages.getString(PKG,"JobCopyFiles.Log.FileFolderRemoved",fileremoventry));
                  }
                }
              }
            }
          }
          if (add_result_filesname && !list_add_result.isEmpty()) {
            String destinationFilefoldername=destinationfilefolder.toString();
            int trimPathLength=destinationFilefoldername.length() + 1;
            FileObject addFile;
            for (Iterator<String> iter=list_add_result.iterator(); iter.hasNext(); ) {
              String fileaddentry=iter.next();
              addFile=null;
              if (fileaddentry.startsWith(destinationFilefoldername)) {
                if (trimPathLength < fileaddentry.length()) {
                  addFile=destinationfilefolder.getChild(fileaddentry.substring(trimPathLength));
                }
              }
              if (addFile == null) {
                addFile=KettleVFS.getFileObject(fileaddentry,this);
              }
              if (addFile.getType() == FileType.FILE) {
                ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,addFile,parentJob.getJobname(),toString());
                result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
                if (isDetailed()) {
                  logDetailed(" ------ ");
                  logDetailed("      " + BaseMessages.getString(PKG,"JobCopyFiles.Log.FileAddedToResultFilesName",fileaddentry));
                }
              }
            }
          }
        }
        entrystatus=true;
      }
 else {
        logError(BaseMessages.getString(PKG,"JobCopyFiles.Error.DestinationFolderNotFound",realDestinationFilefoldername));
      }
    }
 else {
      logError(BaseMessages.getString(PKG,"JobCopyFiles.Error.SourceFileNotExists",realSourceFilefoldername));
    }
  }
 catch (  FileSystemException fse) {
    logError(BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.CopyProcessFileSystemException",fse.getMessage()));
    Throwable throwable=fse.getCause();
    while (throwable != null) {
      logError(BaseMessages.getString(PKG,"JobCopyFiles.Log.CausedBy",throwable.getMessage()));
      throwable=throwable.getCause();
    }
  }
catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.CopyProcess",realSourceFilefoldername,realDestinationFilefoldername,e.getMessage()),e);
  }
 finally {
    if (sourcefilefolder != null) {
      try {
        sourcefilefolder.close();
        sourcefilefolder=null;
      }
 catch (      IOException ex) {
      }
    }
    if (destinationfilefolder != null) {
      try {
        destinationfilefolder.close();
        destinationfilefolder=null;
      }
 catch (      IOException ex) {
      }
    }
  }
  return entrystatus;
}
