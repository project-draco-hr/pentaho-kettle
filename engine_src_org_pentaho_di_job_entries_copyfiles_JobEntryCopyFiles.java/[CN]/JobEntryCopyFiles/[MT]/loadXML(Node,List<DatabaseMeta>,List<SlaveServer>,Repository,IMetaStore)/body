{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    copy_empty_folders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"copy_empty_folders"));
    arg_from_previous="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    overwrite_files="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"overwrite_files"));
    include_subfolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"include_subfolders"));
    remove_source_files="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"remove_source_files"));
    add_result_filesname="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_result_filesname"));
    destination_is_a_file="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"destination_is_a_file"));
    create_destination_folder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"create_destination_folder"));
    Node fields=XMLHandler.getSubNode(entrynode,"fields");
    int nrFields=XMLHandler.countNodes(fields,"field");
    source_filefolder=new String[nrFields];
    destination_filefolder=new String[nrFields];
    wildcard=new String[nrFields];
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      source_filefolder[i]=loadSource(fnode);
      destination_filefolder[i]=loadDestination(fnode);
      wildcard[i]=XMLHandler.getTagValue(fnode,"wildcard");
    }
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.UnableLoadXML"),xe);
  }
}
