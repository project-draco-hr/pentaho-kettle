{
  try {
    copy_empty_folders=rep.getJobEntryAttributeBoolean(id_jobentry,"copy_empty_folders");
    arg_from_previous=rep.getJobEntryAttributeBoolean(id_jobentry,"arg_from_previous");
    overwrite_files=rep.getJobEntryAttributeBoolean(id_jobentry,"overwrite_files");
    include_subfolders=rep.getJobEntryAttributeBoolean(id_jobentry,"include_subfolders");
    remove_source_files=rep.getJobEntryAttributeBoolean(id_jobentry,"remove_source_files");
    add_result_filesname=rep.getJobEntryAttributeBoolean(id_jobentry,"add_result_filesname");
    destination_is_a_file=rep.getJobEntryAttributeBoolean(id_jobentry,"destination_is_a_file");
    create_destination_folder=rep.getJobEntryAttributeBoolean(id_jobentry,"create_destination_folder");
    int argnr=rep.countNrJobEntryAttributes(id_jobentry,"source_filefolder");
    source_filefolder=new String[argnr];
    destination_filefolder=new String[argnr];
    wildcard=new String[argnr];
    for (int a=0; a < argnr; a++) {
      source_filefolder[a]=loadSourceRep(rep,id_jobentry,a);
      destination_filefolder[a]=loadDestinationRep(rep,id_jobentry,a);
      wildcard[a]=rep.getJobEntryAttributeString(id_jobentry,a,"wildcard");
    }
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobCopyFiles.Error.Exception.UnableLoadRep") + id_jobentry,dbe);
  }
}
