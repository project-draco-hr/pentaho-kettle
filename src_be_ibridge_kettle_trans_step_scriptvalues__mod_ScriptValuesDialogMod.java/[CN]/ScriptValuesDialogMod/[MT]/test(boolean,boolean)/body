{
  boolean retval=true;
  StyledTextComp wScript=getStyledTextComp();
  String scr=wScript.getText();
  String errorMessage="";
  Context jscx;
  Scriptable jsscope;
  refreshScripts();
  jscx=Context.enter();
  jscx.setOptimizationLevel(-1);
  jsscope=jscx.initStandardObjects(null);
  for (int i=0; i < folder.getItemCount(); i++) {
    StyledTextComp sItem=getStyledTextComp(folder.getItem(i));
    Scriptable jsR=Context.toObject(sItem.getText(),jsscope);
    jsscope.put(folder.getItem(i).getText(),jsscope,jsR);
  }
  jsscope.put("_TransformationName_",jsscope,new String(this.stepname));
  try {
    Row row=transMeta.getPrevStepFields(stepname);
    if (row != null) {
      try {
        if (input.getAddClasses() != null) {
          for (int i=0; i < input.getAddClasses().length; i++) {
            Object jsOut=Context.javaToJS(input.getAddClasses()[i].getAddObject(),jsscope);
            ScriptableObject.putProperty(jsscope,input.getAddClasses()[i].getJSName(),jsOut);
          }
        }
      }
 catch (      Exception e) {
        errorMessage="Coundln't not add JavaClasses to Context! Error:" + Const.CR + e.toString();
        retval=false;
      }
      try {
        Context.javaToJS(ScriptValuesAddedFunctions.class,jsscope);
        ((ScriptableObject)jsscope).defineFunctionProperties(jsFunctionList,ScriptValuesAddedFunctions.class,ScriptableObject.DONTENUM);
      }
 catch (      Exception ex) {
        errorMessage="Coundln't not add Default Functions! Error:" + Const.CR + ex.toString();
        retval=false;
      }
      ;
      try {
        jsscope.put("SKIP_TRANSFORMATION",jsscope,new Integer(SKIP_TRANSFORMATION));
        jsscope.put("ABORT_TRANSFORMATION",jsscope,new Integer(ABORT_TRANSFORMATION));
        jsscope.put("ERROR_TRANSFORMATION",jsscope,new Integer(ERROR_TRANSFORMATION));
        jsscope.put("CONTINUE_TRANSFORMATION",jsscope,new Integer(CONTINUE_TRANSFORMATION));
      }
 catch (      Exception ex) {
        errorMessage="Coundln't not add Transformation Constants! Error:" + Const.CR + ex.toString();
        retval=false;
      }
      ;
      try {
        ScriptableObject.defineClass(jsscope,tranVar.class);
        for (int i=0; i < row.size(); i++) {
          Value val=row.getValue(i);
          if (val.isDate())           val.setValue(new Date());
          if (val.isString())           val.setNull();
          Object[] arg={new String(val.getName())};
          tranVar objTV=(tranVar)jscx.newObject(jsscope,"tranVar",arg);
          objTV.setValue(val);
          jsscope.put(val.getName(),jsscope,objTV);
        }
      }
 catch (      Exception ev) {
        errorMessage="Coundln't not add Input fields to Script! Error:" + Const.CR + ev.toString();
        retval=false;
      }
      try {
        if (strActiveStartScript != null && !folder.getSelection().getText().equals(strActiveStartScript) && strActiveStartScript.length() > 0) {
          String strStartScript=getStyledTextComp(folder.getItem(getCTabPosition(strActiveStartScript))).getText();
          jscx.evaluateString(jsscope,strStartScript,"trans_Start",1,null);
        }
      }
 catch (      Exception e) {
        errorMessage="Coundln't not processing Start Script! Error:" + Const.CR + e.toString();
        retval=false;
      }
      ;
      try {
        Script evalScript=jscx.compileString(scr,"script",1,null);
        evalScript.exec(jscx,jsscope);
        if (getvars) {
          ScriptOrFnNode tree=parseVariables(jscx,jsscope,scr,"script",1,null);
          for (int i=0; i < tree.getParamAndVarCount(); i++) {
            String varname=tree.getParamOrVarName(i);
            if (!varname.equalsIgnoreCase("row") && !varname.equalsIgnoreCase("trans_Status") && row.searchValueIndex(varname) < 0) {
              int type=Value.VALUE_TYPE_STRING;
              int length=-1, precision=-1;
              Object result=jsscope.get(varname,jsscope);
              if (result != null) {
                String classname=result.getClass().getName();
                if (classname.equalsIgnoreCase("java.lang.Byte")) {
                  type=Value.VALUE_TYPE_INTEGER;
                  length=3;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Integer")) {
                  type=Value.VALUE_TYPE_INTEGER;
                  length=9;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Long")) {
                  type=Value.VALUE_TYPE_INTEGER;
                  length=18;
                  precision=0;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Double")) {
                  type=Value.VALUE_TYPE_NUMBER;
                  length=16;
                  precision=2;
                }
 else                 if (classname.equalsIgnoreCase("org.mozilla.javascript.NativeDate") || classname.equalsIgnoreCase("java.util.Date")) {
                  type=Value.VALUE_TYPE_DATE;
                }
 else                 if (classname.equalsIgnoreCase("java.lang.Boolean")) {
                  type=Value.VALUE_TYPE_BOOLEAN;
                }
              }
              TableItem ti=new TableItem(wFields.table,SWT.NONE);
              ti.setText(1,varname);
              ti.setText(2,varname);
              ti.setText(3,Value.getTypeDesc(type));
              ti.setText(4,"" + length);
              ti.setText(5,"" + precision);
            }
          }
          wFields.removeEmptyRows();
          wFields.setRowNums();
          wFields.optWidth(true);
        }
      }
 catch (      JavaScriptException jse) {
        errorMessage="Coundln't execute this script! Error:" + Const.CR + jse.toString();
        retval=false;
      }
catch (      Exception e) {
        errorMessage="General error executing script:" + Const.CR + e.toString();
        retval=false;
      }
    }
 else {
      errorMessage="Coundln't get fields from previous steps, please connect all needed hops!";
      retval=false;
    }
    if (popup) {
      if (retval) {
        if (!getvars) {
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_INFORMATION);
          mb.setMessage("This script compiled without problems." + Const.CR);
          mb.setText("OK");
          mb.open();
        }
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(errorMessage);
        mb.setText("ERROR");
        mb.open();
      }
    }
  }
 catch (  KettleException ke) {
    retval=false;
    new ErrorDialog(shell,"Test failed","Unable to get fields from previous steps because of an error",ke);
  }
 finally {
    if (jscx != null)     Context.exit();
  }
  return retval;
}
