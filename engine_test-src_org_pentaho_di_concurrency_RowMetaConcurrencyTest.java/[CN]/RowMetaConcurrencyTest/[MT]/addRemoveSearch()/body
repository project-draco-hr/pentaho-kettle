{
  final int addersAmount=5;
  final int removeAmount=10;
  final int searchersAmount=10;
  final RowMeta rowMeta=new RowMeta();
  List<String> toRemove=new ArrayList<String>(removeAmount);
  for (int i=0; i < removeAmount; i++) {
    String name="toBeRemoved_" + i;
    toRemove.add(name);
    rowMeta.addValueMeta(new ValueMetaString(name));
  }
  final AtomicBoolean condition=new AtomicBoolean(true);
  List<Searcher> searchers=new ArrayList<Searcher>(searchersAmount);
  for (int i=0; i < searchersAmount; i++) {
    String name="kept_" + i;
    rowMeta.addValueMeta(new ValueMetaString(name));
    searchers.add(new Searcher(condition,rowMeta,name));
  }
  List<Remover> removers=Collections.singletonList(new Remover(condition,rowMeta,toRemove));
  List<Adder> adders=new ArrayList<Adder>(addersAmount);
  for (int i=0; i < addersAmount; i++) {
    adders.add(new Adder(condition,rowMeta,cycles,"adder" + i));
  }
  List<Callable<?>> monitored=new ArrayList<Callable<?>>();
  monitored.addAll(adders);
  monitored.addAll(removers);
  ConcurrencyTestRunner<?,?> runner=new ConcurrencyTestRunner<Object,Object>(monitored,searchers,condition);
  runner.runConcurrentTest();
  runner.checkNoExceptionRaised();
  Map<? extends Callable<?>,? extends ExecutionResult<?>> results=runner.getMonitoredResults();
  for (  Remover remover : removers) {
    ExecutionResult<List<String>> result=(ExecutionResult<List<String>>)results.get(remover);
    assertTrue(result.getResult().isEmpty());
    for (    String name : remover.getToRemove()) {
      assertEquals(name,-1,rowMeta.indexOfValue(name));
    }
  }
  Set<ValueMetaInterface> metas=new HashSet<ValueMetaInterface>(rowMeta.getValueMetaList());
  for (  Adder adder : adders) {
    ExecutionResult<List<ValueMetaInterface>> result=(ExecutionResult<List<ValueMetaInterface>>)results.get(adder);
    for (    ValueMetaInterface meta : result.getResult()) {
      assertTrue(meta.getName(),metas.remove(meta));
    }
  }
  assertEquals(searchersAmount,metas.size());
}
