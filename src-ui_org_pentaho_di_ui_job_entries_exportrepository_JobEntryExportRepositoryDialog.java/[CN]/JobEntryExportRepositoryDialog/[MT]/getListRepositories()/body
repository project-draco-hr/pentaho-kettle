{
  RepositoriesMeta reps_info=null;
  try {
    reps_info=new RepositoriesMeta();
    reps_info.readData();
    int nrRepositories=reps_info.nrRepositories();
    if (nrRepositories == 0) {
      displayMsg(BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"JobExportRepository.Error.NoRep.DialogMessage"),true);
    }
 else {
      String available[]=new String[nrRepositories];
      for (int i=0; i < nrRepositories; i++) {
        RepositoryMeta ri=reps_info.getRepository(i);
        available[i]=ri.getName();
      }
      String[] source=new String[1];
      source[0]=wRepositoryname.getText();
      int idxSource[]=Const.indexsOfStrings(source,available);
      EnterSelectionDialog dialog=new EnterSelectionDialog(shell,available,BaseMessages.getString(PKG,"JobExportRepository.SelectRepository.Title"),BaseMessages.getString(PKG,"JobExportRepository.SelectRepository.Message"));
      dialog.setMulti(false);
      dialog.setSelectedNrs(idxSource);
      if (dialog.open() != null) {
        int idx[]=dialog.getSelectionIndeces();
        wRepositoryname.setText(available[idx[0]]);
      }
    }
  }
 catch (  Exception e) {
    displayMsg(BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"JobExportRepository.ErrorGettingRepositories.DialogMessage") + Const.CR + ":"+ e.getMessage(),true);
  }
 finally {
    reps_info.clear();
  }
}
