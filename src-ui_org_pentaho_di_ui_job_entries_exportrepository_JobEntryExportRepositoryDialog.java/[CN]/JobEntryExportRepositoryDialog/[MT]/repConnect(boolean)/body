{
  boolean retval=false;
  RepositoriesMeta reps_info=null;
  RepositoryMeta rep_info=null;
  UserInfo user_info=null;
  Repository repos=null;
  try {
    reps_info=new RepositoriesMeta();
    try {
      reps_info.readData();
    }
 catch (    Exception e) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepsDefined"),BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepsDefinedMsg"),true);
    }
    rep_info=reps_info.findRepository(jobMeta.environmentSubstitute(wRepositoryname.getText()));
    if (rep_info == null) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRep"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRepMsg",wRepositoryname.getText()),true);
      return false;
    }
    repos=RepositoryLoader.createRepository(rep_info,user_info);
    try {
      repos.connect("Export job entry");
    }
 catch (    Exception e) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnect"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnectMsg",wRepositoryname.getText()),true);
      return false;
    }
    user_info=repos.loadUserInfo(jobMeta.environmentSubstitute(wUserName.getText()),jobMeta.environmentSubstitute(wPassword.getText()));
    if (user_info.getObjectId() != null) {
      repos.disconnect();
      repos=null;
      if (displaySuccess)       displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Connected.Title.Ok"),BaseMessages.getString(PKG,"JobExportRepository.Connected.OK",wRepositoryname.getText()),false);
    }
 else {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Connected.Title.Bad"),BaseMessages.getString(PKG,"JobExportRepository.CanNotVerifyUser",wUserName.getText(),wRepositoryname.getText()),true);
      return false;
    }
    retval=true;
  }
 catch (  Exception e) {
    displayMsg(BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"JobExportRepository.ErrorConnecting",wRepositoryname.getText()),true);
  }
 finally {
    if (repos != null) {
      repos.disconnect();
      repos=null;
    }
    if (rep_info != null)     rep_info=null;
    if (user_info != null)     user_info=null;
    reps_info.clear();
  }
  return retval;
}
