{
  RepositoriesMeta repositoriesMeta=null;
  RepositoryMeta repositoryMeta=null;
  Repository repos=null;
  try {
    repositoriesMeta=new RepositoriesMeta();
    repositoriesMeta.readData();
    repositoryMeta=repositoriesMeta.findRepository(jobMeta.environmentSubstitute(wRepositoryname.getText()));
    if (repositoryMeta == null) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRep"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotFindRepMsg",wRepositoryname.getText()),true);
    }
    repos=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,repositoryMeta,Repository.class);
    repos.init(repositoryMeta);
    try {
      repos.connect(jobMeta.environmentSubstitute(wUserName.getText()),jobMeta.environmentSubstitute(wPassword.getText()));
    }
 catch (    Exception e) {
      displayMsg(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnect"),BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnectMsg",wRepositoryname.getText()),true);
    }
    SelectDirectoryDialog sdd=new SelectDirectoryDialog(shell,SWT.NONE,repos);
    RepositoryDirectory rd=sdd.open();
    if (rd != null) {
      wFoldername.setText(rd.getPath());
    }
  }
 catch (  Exception e) {
    displayMsg(BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"JobExportRepository.ErrorGettingFolderds.DialogMessage") + Const.CR + ":"+ e.getMessage(),true);
  }
 finally {
    if (repos != null) {
      repos.disconnect();
      repos=null;
    }
    if (repositoryMeta != null)     repositoryMeta=null;
    repositoriesMeta.clear();
  }
}
