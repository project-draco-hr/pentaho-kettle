{
  List<String> attributes=Arrays.asList("fieldname","isContains","caseValueFormat","caseValueDecimal","caseValueGroup","defaultTargetStepname","caseTargets");
  Map<String,String> getterMap=new HashMap<String,String>();
  getterMap.put("isContains","isContains");
  Map<String,String> setterMap=new HashMap<String,String>();
  setterMap.put("isContains","setContains");
  Map<String,FieldLoadSaveValidator<?>> attrValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  Map<String,FieldLoadSaveValidator<?>> typeValidatorMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  this.loadSaveTester=new LoadSaveTester<>(SwitchCaseMeta.class,attributes,getterMap,setterMap,attrValidatorMap,typeValidatorMap);
  FieldLoadSaveValidatorFactory validatorFactory=loadSaveTester.getFieldLoadSaveValidatorFactory();
  FieldLoadSaveValidator<SwitchCaseTarget> targetValidator=new FieldLoadSaveValidator<SwitchCaseTarget>(){
    private final StepMetaInterface targetStepInterface=new DummyTransMeta();
    @Override public SwitchCaseTarget getTestObject(){
      return new SwitchCaseTarget(){
{
          caseValue=UUID.randomUUID().toString();
          caseTargetStepname=UUID.randomUUID().toString();
          caseTargetStep=new StepMeta(caseTargetStepname,targetStepInterface);
        }
      }
;
    }
    @Override public boolean validateTestObject(    SwitchCaseTarget testObject,    Object actual){
      return testObject.caseValue.equals(((SwitchCaseTarget)actual).caseValue) && testObject.caseTargetStepname.equals(((SwitchCaseTarget)actual).caseTargetStepname);
    }
  }
;
  validatorFactory.registerValidator(validatorFactory.getName(SwitchCaseTarget.class),targetValidator);
  validatorFactory.registerValidator(validatorFactory.getName(List.class,SwitchCaseTarget.class),new ListLoadSaveValidator<SwitchCaseTarget>(targetValidator));
}
