{
  List<String> databaseFields=new ArrayList<String>();
  List<String> streamFields=new ArrayList<String>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null) {
      continue;
    }
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case DATABASE_FIELDS:
      for (      StepInjectionMetaEntry lookField : lookFields.getDetails()) {
        Entry fieldEntry=Entry.findEntry(lookField.getKey());
        if (fieldEntry == Entry.DATABASE_FIELD) {
          String databaseFieldname=null;
          String streamFieldname=null;
          List<StepInjectionMetaEntry> entries=lookField.getDetails();
          for (          StepInjectionMetaEntry entry : entries) {
            Entry metaEntry=Entry.findEntry(entry.getKey());
            if (metaEntry != null) {
              String value=(String)entry.getValue();
switch (metaEntry) {
case DATABASE_FIELDNAME:
                databaseFieldname=value;
              break;
case STREAM_FIELDNAME:
            streamFieldname=value;
          break;
default :
        break;
    }
  }
}
databaseFields.add(databaseFieldname);
streamFields.add(streamFieldname);
}
}
break;
case TARGET_SCHEMA:
meta.setSchemaName(lookValue);
break;
case TARGET_TABLE:
meta.setTableName(lookValue);
break;
case COMMIT_SIZE:
meta.setCommitSize(lookValue);
break;
case TRUNCATE_TABLE:
meta.setTruncateTable("Y".equalsIgnoreCase(lookValue));
break;
case SPECIFY_DATABASE_FIELDS:
meta.setSpecifyFields("Y".equalsIgnoreCase(lookValue));
break;
case IGNORE_INSERT_ERRORS:
meta.setIgnoreErrors("Y".equalsIgnoreCase(lookValue));
break;
case USE_BATCH_UPDATE:
meta.setUseBatchUpdate("Y".equalsIgnoreCase(lookValue));
break;
case PARTITION_OVER_TABLES:
meta.setPartitioningEnabled("Y".equalsIgnoreCase(lookValue));
break;
case PARTITIONING_FIELD:
meta.setPartitioningField(lookValue);
break;
case PARTITION_DATA_PER:
meta.setPartitioningDaily("DAY".equalsIgnoreCase(lookValue));
meta.setPartitioningMonthly("month".equalsIgnoreCase(lookValue));
break;
case TABLE_NAME_DEFINED_IN_FIELD:
meta.setTableNameInField("Y".equalsIgnoreCase(lookValue));
break;
case TABLE_NAME_FIELD:
meta.setTableNameField(lookValue);
break;
case STORE_TABLE_NAME:
meta.setTableNameInTable("Y".equalsIgnoreCase(lookValue));
break;
case RETURN_AUTO_GENERATED_KEY:
meta.setReturningGeneratedKeys("Y".equalsIgnoreCase(lookValue));
break;
case AUTO_GENERATED_KEY_FIELD:
meta.setGeneratedKeyField(lookValue);
break;
default :
break;
}
}
if (databaseFields.size() > 0) {
meta.setFieldDatabase(databaseFields.toArray(new String[databaseFields.size()]));
meta.setFieldStream(streamFields.toArray(new String[streamFields.size()]));
}
}
