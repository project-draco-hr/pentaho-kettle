{
  MappingInput mappingInput=mock(MappingInput.class);
  when(mappingInput.getStepname()).thenReturn(MAPPING_INPUT_STEP_NAME);
  stepMockHelper.processRowsStepDataInterface.mappingInput=mappingInput;
  RowProducer rowProducer=mock(RowProducer.class);
  when(rowProducer.putRow(any(RowMetaInterface.class),any(Object[].class),anyBoolean())).thenReturn(true);
  StepInterface stepInterface=mock(StepInterface.class);
  Trans mappingTrans=mock(Trans.class);
  when(mappingTrans.addRowProducer(anyString(),anyInt())).thenReturn(rowProducer);
  when(mappingTrans.findStepInterface(anyString(),anyInt())).thenReturn(stepInterface);
  when(mappingTrans.isFinishedOrStopped()).thenReturn(Boolean.FALSE).thenReturn(Boolean.TRUE);
  stepMockHelper.processRowsStepDataInterface.mappingTrans=mappingTrans;
  MappingOutput mappingOutput=mock(MappingOutput.class);
  when(mappingOutput.getStepname()).thenReturn(MAPPING_OUTPUT_STEP_NAME);
  stepMockHelper.processRowsStepDataInterface.mappingOutput=mappingOutput;
  smp=new SimpleMapping(stepMockHelper.stepMeta,stepMockHelper.stepDataInterface,0,stepMockHelper.transMeta,stepMockHelper.trans);
  smp.init(stepMockHelper.initStepMetaInterface,simpleMpData);
  smp.getInputRowSets().add(stepMockHelper.getMockInputRowSet(new Object[]{}));
  smp.getInputRowSets().add(stepMockHelper.getMockInputRowSet(new Object[]{}));
  assertTrue(smp.processRow(stepMockHelper.processRowsStepMetaInterface,stepMockHelper.processRowsStepDataInterface));
  assertFalse(smp.processRow(stepMockHelper.processRowsStepMetaInterface,stepMockHelper.processRowsStepDataInterface));
}
