{
  stepMockHelper=new StepMockHelper<SimpleMappingMeta,SimpleMappingData>("SIMPLE_MAPPING_TEST",SimpleMappingMeta.class,SimpleMappingData.class);
  when(stepMockHelper.logChannelInterfaceFactory.create(any(),any(LoggingObjectInterface.class))).thenReturn(stepMockHelper.logChannelInterface);
  when(stepMockHelper.trans.isRunning()).thenReturn(true);
  MappingInput mpInputMock=mock(MappingInput.class);
  when(mpInputMock.getStepname()).thenReturn(MAPPING_INPUT_STEP_NAME);
  MappingOutput mpOutputMock=mock(MappingOutput.class);
  when(mpOutputMock.getStepname()).thenReturn(MAPPING_OUTPUT_STEP_NAME);
  RowDataInputMapper rdInputMpMock=mock(RowDataInputMapper.class);
  RowMetaInterface rwMetaInMock=mock(RowMeta.class);
  doNothing().when(rdInputMpMock).putRow(rwMetaInMock,new Object[]{});
  RowProducer rProducerMock=mock(RowProducer.class);
  MappingIODefinition mpIODefMock=mock(MappingIODefinition.class);
  simpleMpData.mappingInput=mpInputMock;
  simpleMpData.mappingOutput=mpOutputMock;
  simpleMpData.rowDataInputMapper=rdInputMpMock;
  simpleMpData.mappingTrans=stepMockHelper.trans;
  when(stepMockHelper.trans.findStepInterface(MAPPING_OUTPUT_STEP_NAME,0)).thenReturn(mpOutputMock);
  when(stepMockHelper.trans.addRowProducer(MAPPING_INPUT_STEP_NAME,0)).thenReturn(rProducerMock);
  when(stepMockHelper.processRowsStepMetaInterface.getInputMapping()).thenReturn(mpIODefMock);
}
