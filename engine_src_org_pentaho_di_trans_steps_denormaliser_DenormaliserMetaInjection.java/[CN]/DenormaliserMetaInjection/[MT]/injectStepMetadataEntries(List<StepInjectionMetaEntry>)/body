{
  List<DenormaliserTargetField> denormaliserTargetFields=new ArrayList<DenormaliserTargetField>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
      if (fieldsEntry == Entry.FIELDS) {
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry != null) {
            if (fieldEntry == Entry.FIELD) {
              DenormaliserTargetField inputField=new DenormaliserTargetField();
              List<StepInjectionMetaEntry> entries=lookField.getDetails();
              for (              StepInjectionMetaEntry entry : entries) {
                Entry metaEntry=Entry.findEntry(entry.getKey());
                if (metaEntry != null) {
                  String value=(String)entry.getValue();
switch (metaEntry) {
case NAME:
                    inputField.setFieldName(value);
                  break;
case KEY_VALUE:
                inputField.setKeyValue(value);
              break;
case TARGET_NAME:
            inputField.setTargetName(value);
          break;
case TARGET_TYPE:
        inputField.setTargetType(ValueMeta.getType(value));
      break;
case TARGET_LENGTH:
    inputField.setTargetLength(Const.toInt(value,-1));
  break;
case TARGET_PRECISION:
inputField.setTargetPrecision(Const.toInt(value,-1));
break;
case TARGET_CURRENCY:
inputField.setTargetCurrencySymbol(value);
break;
case TARGET_GROUP:
inputField.setTargetGroupingSymbol(value);
break;
case TARGET_DECIMAL:
inputField.setTargetDecimalSymbol(value);
break;
case TARGET_FORMAT:
inputField.setTargetFormat(value);
break;
case TARGET_AGGREGATION:
inputField.setTargetAggregationType(DenormaliserTargetField.getAggregationType(value));
break;
default :
break;
}
}
}
denormaliserTargetFields.add(inputField);
}
}
}
}
}
}
meta.setDenormaliserTargetField(denormaliserTargetFields.toArray(new DenormaliserTargetField[denormaliserTargetFields.size()]));
}
