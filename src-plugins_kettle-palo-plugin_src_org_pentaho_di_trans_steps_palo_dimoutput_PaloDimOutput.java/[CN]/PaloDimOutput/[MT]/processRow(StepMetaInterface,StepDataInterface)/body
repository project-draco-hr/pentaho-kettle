{
  meta=(PaloDimOutputMeta)smi;
  data=(PaloDimOutputData)sdi;
  Object[] r=getRow();
  if (first) {
    first=false;
    this.logBasic("First Row Analysis:");
    if (meta.getLevels().size() == 0)     throw new KettleException("Number of levels must be greater that 0 to process the rows");
    this.logBasic("Number of defined levels: " + meta.getLevels().size());
    data.indexes=new int[meta.getLevels().size() * 2];
    for (int i=0; i < meta.getLevels().size(); i++) {
      String dataFieldName=meta.getLevels().get(i).getFieldName();
      int numRow=getInputRowMeta().indexOfValue(dataFieldName);
      if (numRow < 0)       throw new KettleException("DimOutput: failed to find input row meta for ".concat(meta.getLevels().get(i).getLevelName()));
      data.indexes[i * 2]=numRow;
      this.logDebug(meta.getLevels().get(i).getLevelName() + " has index: " + numRow);
      String consolidationFieldName=meta.getLevels().get(i).getConsolidationFieldName();
      if (consolidationFieldName == null) {
        numRow=-1;
        this.logDebug("Consolidation factor was left to the default");
      }
 else {
        numRow=getInputRowMeta().indexOfValue(consolidationFieldName);
        if (numRow < 0)         throw new KettleException("DimOutput: failed to find input row meta for ".concat(meta.getLevels().get(i).getConsolidationFieldName()));
        this.logDebug(meta.getLevels().get(i).getConsolidationFieldName() + " has index: " + numRow);
      }
      data.indexes[(i * 2) + 1]=numRow;
    }
    data.helper.manageDimension(meta.getDimension(),meta.getCreateNewDimension(),meta.getClearDimension(),meta.getClearConsolidations(),meta.getRecreateDimension());
    try {
      data.helper.loadDimensionCache(meta.getDimension(),meta.getEnableElementCache(),meta.getPreloadElementCache());
    }
 catch (    Exception e) {
      throw new KettleException("Failed to load cache",e);
    }
  }
  if (r != null) {
    rowCount++;
    try {
      ConsolidationElement parent=null;
      for (int i=0; i < data.indexes.length; i++) {
        if (i % 2 == 0) {
          if (r[data.indexes[i]] == null)           continue;
          data.elementNamesBatch.add(r[data.indexes[i]].toString());
        }
 else {
          double consolidation_factor=1;
          if (data.indexes[i] >= 0)           consolidation_factor=Double.parseDouble((r[data.indexes[i]] == null ? 0 : r[data.indexes[i]]).toString());
          ConsolidationElement child=null;
          if (r[data.indexes[i - 1]] != null) {
            String elementName=r[data.indexes[i - 1]].toString();
            if (!this.consolidations.hasConsolidationElement(elementName)) {
              child=new ConsolidationElement(elementName);
              this.consolidations.add(child);
            }
 else             child=this.consolidations.getConsolidationElement(elementName);
            if (parent != null)             parent.addChild(child,consolidation_factor);
          }
          parent=child;
        }
      }
      if (data.elementNamesBatch.size() % 100 == 0)       commitBatch();
    }
 catch (    Exception e) {
      throw new KettleException("Failed to add row to the row buffer",e);
    }
  }
  if (r == null) {
    try {
      if (data.elementNamesBatch.size() > 0)       commitBatch();
      data.helper.clearDimensionCache();
      data.helper.loadDimensionCache(meta.getDimension(),meta.getEnableElementCache(),meta.getPreloadElementCache());
      this.logBasic("All rows have been added. Looking for consolidations");
      this.logBasic("Updating consolidations for Dimension" + meta.getDimension());
      data.helper.addDimensionConsolidations(meta.getDimension(),this.consolidations);
      this.logBasic("Consolidations updated.");
      setOutputDone();
      return false;
    }
 catch (    Exception e) {
      throw new KettleException("Failed to add dimension rows",e);
    }
  }
  return true;
}
