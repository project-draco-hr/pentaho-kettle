{
  try {
    filename=rep.getStepAttributeString(id_step,getRepCode("FILENAME"));
    filenameField=rep.getStepAttributeString(id_step,getRepCode("FILENAME_FIELD"));
    rowNumField=rep.getStepAttributeString(id_step,getRepCode("ROW_NUM_FIELD"));
    includingFilename=rep.getStepAttributeBoolean(id_step,getRepCode("INCLUDE_FILENAME"));
    delimiter=rep.getStepAttributeString(id_step,getRepCode("DELIMITER"));
    enclosure=rep.getStepAttributeString(id_step,getRepCode("ENCLOSURE"));
    headerPresent=rep.getStepAttributeBoolean(id_step,getRepCode("HEADER_PRESENT"));
    bufferSize=rep.getStepAttributeString(id_step,getRepCode("BUFFERSIZE"));
    lazyConversionActive=rep.getStepAttributeBoolean(id_step,getRepCode("LAZY_CONVERSION"));
    isaddresult=rep.getStepAttributeBoolean(id_step,getRepCode("ADD_FILENAME_RESULT"));
    runningInParallel=rep.getStepAttributeBoolean(id_step,getRepCode("PARALLEL"));
    newlinePossibleInFields=rep.getStepAttributeBoolean(id_step,0,getRepCode("NEWLINE_POSSIBLE"),!runningInParallel);
    encoding=rep.getStepAttributeString(id_step,getRepCode("ENCODING"));
    int nrfields=rep.countNrStepAttributes(id_step,getRepCode("FIELD_NAME"));
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      inputFields[i]=new TextFileInputField();
      inputFields[i].setName(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_NAME")));
      inputFields[i].setType(ValueMetaFactory.getIdForValueMeta(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_TYPE"))));
      inputFields[i].setFormat(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_FORMAT")));
      inputFields[i].setCurrencySymbol(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_CURRENCY")));
      inputFields[i].setDecimalSymbol(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_DECIMAL")));
      inputFields[i].setGroupSymbol(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_GROUP")));
      inputFields[i].setLength((int)rep.getStepAttributeInteger(id_step,i,getRepCode("FIELD_LENGTH")));
      inputFields[i].setPrecision((int)rep.getStepAttributeInteger(id_step,i,getRepCode("FIELD_PRECISION")));
      inputFields[i].setTrimType(ValueMetaString.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,getRepCode("FIELD_TRIM_TYPE"))));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
