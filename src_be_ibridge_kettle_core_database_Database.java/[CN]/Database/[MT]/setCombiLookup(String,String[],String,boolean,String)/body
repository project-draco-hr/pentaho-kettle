{
  StringBuffer sql=new StringBuffer(100);
  int i;
  boolean comma;
  sql.append("SELECT ").append(databaseMeta.quoteField(retval)).append(Const.CR);
  sql.append("FROM ").append(databaseMeta.quoteField(table)).append(Const.CR);
  sql.append("WHERE ");
  comma=false;
  if (crc) {
    sql.append(databaseMeta.quoteField(crcfield)).append(" = ? ").append(Const.CR);
    comma=true;
  }
 else {
    sql.append("( ( ");
  }
  for (i=0; i < keys.length; i++) {
    if (comma) {
      sql.append(" AND ( ( ");
    }
 else {
      comma=true;
    }
    sql.append(databaseMeta.quoteField(keys[i])).append(" = ? ) OR ( ").append(databaseMeta.quoteField(keys[i])).append(" IS NULL AND ? IS NULL ) )").append(Const.CR);
  }
  try {
    String sqlStatement=sql.toString();
    log.logDebug(toString(),"preparing combi-lookup statement:" + Const.CR + sqlStatement);
    prepStatementLookup=connection.prepareStatement(databaseMeta.stripCR(sqlStatement));
    prepStatementLookup.setMaxRows(1);
  }
 catch (  SQLException ex) {
    throw new KettleDatabaseException("Unable to prepare combi-lookup statement",ex);
  }
}
