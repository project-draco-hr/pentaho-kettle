{
  if (!job && use_id && log_string != null && !status.equalsIgnoreCase("start")) {
    String sql="UPDATE " + logtable + " SET STATUS=?, LINES_READ=?, LINES_WRITTEN=?, LINES_INPUT=?,"+ " LINES_OUTPUT=?, LINES_UPDATED=?, ERRORS=?, STARTDATE=?, ENDDATE=?, LOGDATE=?, DEPDATE=?, REPLAYDATE=?, LOG_FIELD=? "+ "WHERE ID_BATCH=?";
    Row r=new Row();
    r.addValue(new Value("STATUS",status));
    r.addValue(new Value("LINES_READ",(long)read));
    r.addValue(new Value("LINES_WRITTEN",(long)written));
    r.addValue(new Value("LINES_INPUT",(long)input));
    r.addValue(new Value("LINES_OUTPUT",(long)output));
    r.addValue(new Value("LINES_UPDATED",(long)updated));
    r.addValue(new Value("ERRORS",(long)errors));
    r.addValue(new Value("STARTDATE",startdate));
    r.addValue(new Value("ENDDATE",enddate));
    r.addValue(new Value("LOGDATE",logdate));
    r.addValue(new Value("DEPDATE",depdate));
    r.addValue(new Value("REPLAYDATE",replayDate));
    Value logfield=new Value("LOG_FIELD",log_string);
    logfield.setLength(DatabaseMeta.CLOB_LENGTH);
    r.addValue(logfield);
    r.addValue(new Value("ID_BATCH",id));
    execStatement(sql,r);
  }
 else {
    int parms;
    String sql="INSERT INTO " + logtable + " ( ";
    if (job) {
      if (use_id) {
        sql+="ID_JOB, JOBNAME";
        parms=14;
      }
 else {
        sql+="JOBNAME";
        parms=13;
      }
    }
 else {
      if (use_id) {
        sql+="ID_BATCH, TRANSNAME";
        parms=14;
      }
 else {
        sql+="TRANSNAME";
        parms=13;
      }
    }
    sql+=", STATUS, LINES_READ, LINES_WRITTEN, LINES_UPDATED, LINES_INPUT, LINES_OUTPUT, ERRORS, STARTDATE, ENDDATE, LOGDATE, DEPDATE, REPLAYDATE";
    if (log_string != null && log_string.length() > 0)     sql+=", LOG_FIELD";
    sql+=") VALUES(";
    for (int i=0; i < parms; i++)     if (i == 0)     sql+="?";
 else     sql+=", ?";
    if (log_string != null && log_string.length() > 0)     sql+=", ?";
    sql+=")";
    try {
      pstmt=connection.prepareStatement(databaseMeta.stripCR(sql));
      Row r=new Row();
      if (job) {
        if (use_id) {
          r.addValue(new Value("ID_BATCH",id));
        }
        r.addValue(new Value("TRANSNAME",name));
      }
 else {
        if (use_id) {
          r.addValue(new Value("ID_JOB",id));
        }
        r.addValue(new Value("JOBNAME",name));
      }
      r.addValue(new Value("STATUS",status));
      r.addValue(new Value("LINES_READ",(long)read));
      r.addValue(new Value("LINES_WRITTEN",(long)written));
      r.addValue(new Value("LINES_UPDATED",(long)updated));
      r.addValue(new Value("LINES_INPUT",(long)input));
      r.addValue(new Value("LINES_OUTPUT",(long)output));
      r.addValue(new Value("ERRORS",(long)errors));
      r.addValue(new Value("STARTDATE",startdate));
      r.addValue(new Value("ENDDATE",enddate));
      r.addValue(new Value("LOGDATE",logdate));
      r.addValue(new Value("DEPDATE",depdate));
      r.addValue(new Value("REPLAYDATE",replayDate));
      if (log_string != null && log_string.length() > 0) {
        Value large=new Value("LOG_FIELD",log_string);
        large.setLength(DatabaseMeta.CLOB_LENGTH);
        r.addValue(large);
      }
      setValues(r);
      pstmt.executeUpdate();
      pstmt.close();
      pstmt=null;
    }
 catch (    SQLException ex) {
      throw new KettleDatabaseException("Unable to write log record to log table " + logtable,ex);
    }
  }
}
