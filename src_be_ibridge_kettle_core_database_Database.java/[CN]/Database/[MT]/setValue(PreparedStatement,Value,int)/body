{
  String debug="";
  try {
switch (v.getType()) {
case Value.VALUE_TYPE_BIGNUMBER:
      debug="BigNumber";
    if (!v.isNull()) {
      ps.setBigDecimal(pos,v.getBigNumber());
    }
 else {
      ps.setNull(pos,java.sql.Types.DECIMAL);
    }
  break;
case Value.VALUE_TYPE_NUMBER:
debug="Number";
if (!v.isNull()) {
double num=v.getNumber();
if (databaseMeta.supportsFloatRoundingOnUpdate() && v.getPrecision() >= 0) {
  num=Const.round(num,v.getPrecision());
}
ps.setDouble(pos,num);
}
 else {
ps.setNull(pos,java.sql.Types.DOUBLE);
}
break;
case Value.VALUE_TYPE_INTEGER:
debug="Integer";
if (!v.isNull()) {
if (databaseMeta.supportsSetLong()) {
ps.setLong(pos,Math.round(v.getNumber()));
}
 else {
if (databaseMeta.supportsFloatRoundingOnUpdate() && v.getPrecision() >= 0) {
ps.setDouble(pos,v.getNumber());
}
 else {
ps.setDouble(pos,Const.round(v.getNumber(),v.getPrecision()));
}
}
}
 else {
ps.setNull(pos,java.sql.Types.BIGINT);
}
break;
case Value.VALUE_TYPE_STRING:
debug="String";
if (v.getLength() < DatabaseMeta.CLOB_LENGTH) {
if (!v.isNull() && v.getString() != null) {
ps.setString(pos,v.getString());
}
 else {
ps.setNull(pos,java.sql.Types.VARCHAR);
}
}
 else {
if (!v.isNull()) {
int maxlen=databaseMeta.getMaxTextFieldLength();
int len=v.getStringLength();
int begin=len - maxlen;
if (begin < 0) begin=0;
String logging=v.getString().substring(begin);
if (databaseMeta.supportsSetCharacterStream()) {
StringReader sr=new StringReader(logging);
ps.setCharacterStream(pos,sr,logging.length());
}
 else {
ps.setString(pos,logging);
}
}
 else {
ps.setNull(pos,java.sql.Types.VARCHAR);
}
}
break;
case Value.VALUE_TYPE_DATE:
debug="Date";
if (!v.isNull() && v.getDate() != null) {
long dat=v.getDate().getTime();
if (v.getPrecision() == 1 || !databaseMeta.supportsTimeStampToDateConversion()) {
java.sql.Date ddate=new java.sql.Date(dat);
ps.setDate(pos,ddate);
}
 else {
java.sql.Timestamp sdate=new java.sql.Timestamp(dat);
ps.setTimestamp(pos,sdate);
}
}
 else {
if (v.getPrecision() == 1 || !databaseMeta.supportsTimeStampToDateConversion()) {
ps.setNull(pos,java.sql.Types.DATE);
}
 else {
ps.setNull(pos,java.sql.Types.TIMESTAMP);
}
}
break;
case Value.VALUE_TYPE_BOOLEAN:
debug="Boolean";
if (databaseMeta.supportsBooleanDataType()) {
if (!v.isNull()) {
ps.setBoolean(pos,v.getBoolean());
}
 else {
ps.setNull(pos,java.sql.Types.BOOLEAN);
}
}
 else {
if (!v.isNull()) {
ps.setString(pos,v.getBoolean() ? "Y" : "N");
}
 else {
ps.setNull(pos,java.sql.Types.CHAR);
}
}
break;
default :
debug="default";
ps.setNull(pos,java.sql.Types.VARCHAR);
break;
}
}
 catch (SQLException ex) {
throw new KettleDatabaseException("Error setting value #" + pos + " ["+ v.toString()+ "] on prepared statement ("+ debug+ ")"+ Const.CR+ ex.toString(),ex);
}
catch (Exception e) {
throw new KettleDatabaseException("Error setting value #" + pos + " ["+ (v == null ? "NULL" : v.toString())+ "] on prepared statement ("+ debug+ ")"+ Const.CR+ e.toString(),e);
}
}
