{
  LoadFileInputMeta spy=spy(new LoadFileInputMeta());
  FileInputList fileInputList=mock(FileInputList.class);
  List<FileObject> files=when(mock(List.class).size()).thenReturn(1).getMock();
  doReturn(files).when(fileInputList).getFiles();
  doReturn(fileInputList).when(spy).getFiles(any(VariableSpace.class));
  @SuppressWarnings("unchecked") List<CheckResultInterface> validationResults=mock(List.class);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      if (((CheckResultInterface)invocation.getArguments()[0]).getType() != CheckResultInterface.TYPE_RESULT_OK) {
        TestCase.fail("We've got validation error");
      }
      return null;
    }
  }
).when(validationResults).add(any(CheckResultInterface.class));
  spy.check(validationResults,mock(TransMeta.class),mock(StepMeta.class),mock(RowMetaInterface.class),new String[]{},new String[]{"File content","File size"},mock(RowMetaInterface.class),mock(VariableSpace.class),mock(Repository.class),mock(IMetaStore.class));
}
