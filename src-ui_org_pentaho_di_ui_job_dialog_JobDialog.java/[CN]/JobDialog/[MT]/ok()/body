{
  jobMeta.setName(wJobname.getText());
  jobMeta.setDescription(wJobdescription.getText());
  jobMeta.setExtendedDescription(wExtendeddescription.getText());
  jobMeta.setJobversion(wJobversion.getText());
  if (wJobstatus.getSelectionIndex() != 2) {
    jobMeta.setJobstatus(wJobstatus.getSelectionIndex() + 1);
  }
 else {
    jobMeta.setJobstatus(-1);
  }
  jobMeta.setLogConnection(jobMeta.findDatabase(wLogconnection.getText()));
  jobMeta.setLogTable(wLogtable.getText());
  jobMeta.eraseParameters();
  int nrNonEmptyFields=wParamFields.nrNonEmpty();
  for (int i=0; i < nrNonEmptyFields; i++) {
    TableItem item=wParamFields.getNonEmpty(i);
    try {
      jobMeta.addParameterDefinition(item.getText(1),item.getText(2),item.getText(3));
    }
 catch (    DuplicateParamException e) {
    }
  }
  jobMeta.setUseBatchId(wBatch.getSelection());
  jobMeta.setBatchIdPassed(wBatchTrans.getSelection());
  jobMeta.setLogfieldUsed(wLogfield.getSelection());
  jobMeta.setLogSizeLimit(wLogSizeLimit.getText());
  jobMeta.setSharedObjectsFile(wSharedObjectsFile.getText());
  if (newDirectory != null) {
    if (directoryChangeAllowed) {
      RepositoryDirectory dirFrom=jobMeta.getRepositoryDirectory();
      try {
        ObjectId newId=rep.renameJob(jobMeta.getObjectId(),newDirectory,jobMeta.getName());
        jobMeta.setObjectId(newId);
        jobMeta.setRepositoryDirectory(newDirectory);
        wDirectory.setText(jobMeta.getRepositoryDirectory().getPath());
      }
 catch (      KettleException dbe) {
        jobMeta.setRepositoryDirectory(dirFrom);
        MessageBox mb=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
        mb.setText(BaseMessages.getString(PKG,"JobDialog.Dialog.ErrorChangingDirectory.Title"));
        mb.setMessage(BaseMessages.getString(PKG,"JobDialog.Dialog.ErrorChangingDirectory.Message"));
        mb.open();
      }
    }
 else {
      jobMeta.setRepositoryDirectory(newDirectory);
    }
  }
  jobMeta.setChanged(changed || jobMeta.hasChanged());
  dispose();
}
