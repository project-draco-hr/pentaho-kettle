{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("uniquerowstest");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.getInstance(),im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
  transMeta.addStep(injectorStep);
  String uniqueRowsStepname="unique rows step";
  UniqueRowsMeta urm=new UniqueRowsMeta();
  urm.setCompareFields(new String[]{"KEY"});
  urm.setCaseInsensitive(new boolean[]{false});
  String uniqueRowsStepPid=registry.getPluginId(StepPluginType.getInstance(),urm);
  StepMeta uniqueRowsStep=new StepMeta(uniqueRowsStepPid,uniqueRowsStepname,(StepMetaInterface)urm);
  transMeta.addStep(uniqueRowsStep);
  transMeta.addTransHop(new TransHopMeta(injectorStep,uniqueRowsStep));
  String dummyStepname="dummy step";
  DummyTransMeta dm=new DummyTransMeta();
  String dummyPid=registry.getPluginId(StepPluginType.getInstance(),dm);
  StepMeta dummyStep=new StepMeta(dummyPid,dummyStepname,(StepMetaInterface)dm);
  transMeta.addStep(dummyStep);
  transMeta.addTransHop(new TransHopMeta(uniqueRowsStep,dummyStep));
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname,0);
  RowStepCollector dummyRc=new RowStepCollector();
  si.addRowListener(dummyRc);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createData();
  for (  RowMetaAndData rm : inputList) {
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows=dummyRc.getRowsWritten();
  checkRows(createResultDataCaseSensitiveNoPreviousSort(),resultRows);
}
