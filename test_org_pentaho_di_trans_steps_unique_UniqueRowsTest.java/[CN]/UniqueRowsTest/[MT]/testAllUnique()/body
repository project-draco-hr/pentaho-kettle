{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("uniquerowstest");
  PluginRegistry registry=PluginRegistry.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=registry.getPluginId(StepPluginType.class,im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,(StepMetaInterface)im);
  transMeta.addStep(injectorStep);
  String uniqueRowsStepname="unique rows step";
  UniqueRowsMeta urm=new UniqueRowsMeta();
  urm.setCompareFields(new String[]{"KEY"});
  urm.setCaseInsensitive(new boolean[]{true});
  urm.setRejectDuplicateRow(true);
  String uniqueRowsStepPid=registry.getPluginId(StepPluginType.class,urm);
  StepMeta uniqueRowsStep=new StepMeta(uniqueRowsStepPid,uniqueRowsStepname,(StepMetaInterface)urm);
  uniqueRowsStep.setDistributes(false);
  transMeta.addStep(uniqueRowsStep);
  transMeta.addTransHop(new TransHopMeta(injectorStep,uniqueRowsStep));
  String dummyStepname1="dummy step";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=registry.getPluginId(StepPluginType.class,dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,(StepMetaInterface)dm1);
  transMeta.addStep(dummyStep1);
  transMeta.addTransHop(new TransHopMeta(uniqueRowsStep,dummyStep1));
  String dummyStepname2="dummy step2";
  DummyTransMeta dm2=new DummyTransMeta();
  String dummyPid2=registry.getPluginId(StepPluginType.class,dm2);
  StepMeta dummyStep2=new StepMeta(dummyPid2,dummyStepname2,(StepMetaInterface)dm2);
  transMeta.addStep(dummyStep2);
  StepErrorMeta stepErrorMeta=new StepErrorMeta(new Variables(),uniqueRowsStep);
  stepErrorMeta.setTargetStep(dummyStep2);
  stepErrorMeta.setEnabled(true);
  stepErrorMeta.setNrErrorsValuename("numErrors");
  stepErrorMeta.setErrorDescriptionsValuename("duplicates");
  stepErrorMeta.setErrorFieldsValuename("KEY");
  stepErrorMeta.setErrorCodesValuename("errorCodes");
  stepErrorMeta.setMaxErrors("9999");
  stepErrorMeta.setMaxPercentErrors("");
  stepErrorMeta.setMinPercentRows("");
  uniqueRowsStep.setStepErrorMeta(stepErrorMeta);
  transMeta.addTransHop(new TransHopMeta(uniqueRowsStep,dummyStep2));
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector dummyRc1=new RowStepCollector();
  si.addRowListener(dummyRc1);
  StepInterface si2=trans.getStepInterface(dummyStepname2,0);
  RowStepCollector dummyRc2=new RowStepCollector();
  si2.addRowListener(dummyRc2);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createDataAllUnique();
  for (  RowMetaAndData rm : inputList) {
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows=dummyRc1.getRowsWritten();
  checkRows(createResultDataAllUnique(),resultRows);
  List<RowMetaAndData> errorRows=dummyRc2.getRowsWritten();
  assertEquals(errorRows.size(),0);
}
