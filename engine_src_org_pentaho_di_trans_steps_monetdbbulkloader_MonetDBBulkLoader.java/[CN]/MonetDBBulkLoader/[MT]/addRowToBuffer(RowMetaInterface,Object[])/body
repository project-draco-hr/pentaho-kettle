{
  StringBuilder line=new StringBuilder();
  try {
    for (int i=0; i < data.keynrs.length; i++) {
      if (i > 0) {
        line.append(data.separator);
      }
      int index=data.keynrs[i];
      ValueMetaInterface valueMeta=rowMeta.getValueMeta(index);
      Object valueData=r[index];
      String nullRep=new String(data.nullrepresentation);
      if (valueData != null) {
switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_STRING:
          String str=valueMeta.getString(valueData);
        if (str == null || str.equals(nullRep)) {
          line.append(str);
          break;
        }
      line.append(data.quote);
    str=str.replace("\\","\\\\");
  str=str.replace("\"","\\\"");
if (meta.isAutoStringWidths()) {
  int len=valueMeta.getLength();
  if (len < 1) {
    len=MonetDBDatabaseMeta.DEFAULT_VARCHAR_LENGTH;
  }
  if (str.length() > len) {
    str=str.substring(0,len);
  }
  line.append(str);
}
 else {
  line.append(str);
}
line.append(data.quote);
break;
case ValueMetaInterface.TYPE_INTEGER:
if (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {
line.append(valueMeta.getString(valueData));
}
 else {
Long value=valueMeta.getInteger(valueData);
if (value == null) {
line.append(data.nullrepresentation);
}
 else {
line.append(Long.toString(value));
}
}
break;
case ValueMetaInterface.TYPE_TIMESTAMP:
case ValueMetaInterface.TYPE_DATE:
if (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {
line.append(valueMeta.getString(valueData));
}
 else {
ValueMetaInterface colMeta=null;
if (physicalTableRowMeta != null) {
colMeta=physicalTableRowMeta.getValueMeta(index);
}
Date value=valueMeta.getDate(valueData);
if (value == null) {
line.append(data.nullrepresentation);
}
 else {
if (colMeta != null && colMeta.getOriginalColumnTypeName().equalsIgnoreCase("date")) {
line.append(data.monetDateMeta.getString(value));
}
 else if (colMeta != null && colMeta.getOriginalColumnTypeName().equalsIgnoreCase("time")) {
line.append(data.monetTimeMeta.getString(value));
}
 else {
line.append(data.monetTimestampMeta.getString(value));
}
}
}
break;
case ValueMetaInterface.TYPE_BOOLEAN:
Boolean value=valueMeta.getBoolean(valueData);
if (value == null) {
line.append(data.nullrepresentation);
}
 else {
if (value.booleanValue()) {
line.append(true);
}
 else {
line.append(false);
}
}
break;
case ValueMetaInterface.TYPE_NUMBER:
if (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {
line.append(valueMeta.getString(valueData));
}
 else {
Double dbl=valueMeta.getNumber(valueData);
if (dbl == null) {
line.append(data.nullrepresentation);
}
 else {
line.append(Double.toString(dbl));
}
}
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
if (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {
line.append(valueMeta.getString(valueData));
}
 else {
String string=valueMeta.getString(valueData);
if (string == null) {
line.append(data.nullrepresentation);
}
 else {
line.append(string);
}
}
break;
default :
break;
}
}
 else {
line.append(data.nullrepresentation);
}
}
line.append(data.newline);
data.rowBuffer[data.bufferIndex]=line.toString();
data.bufferIndex++;
}
 catch (Exception e) {
throw new KettleException("Error serializing rows of data to the MonetDB API (MAPI).",e);
}
}
