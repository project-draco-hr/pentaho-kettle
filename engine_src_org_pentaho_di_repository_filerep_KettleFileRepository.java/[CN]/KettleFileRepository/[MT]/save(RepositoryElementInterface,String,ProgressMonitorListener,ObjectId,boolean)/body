{
  try {
    if (!(repositoryElement instanceof XMLInterface) && !(repositoryElement instanceof SharedObjectInterface)) {
      throw new KettleException("Class [" + repositoryElement.getClass().getName() + "] needs to implement the XML Interface in order to save it to disk");
    }
    if (!Const.isEmpty(versionComment)) {
      insertLogEntry("Save repository element : " + repositoryElement.toString() + " : "+ versionComment);
    }
    ObjectId objectId=new StringObjectId(calcObjectId(repositoryElement));
    FileObject fileObject=getFileObject(repositoryElement);
    String xml=((XMLInterface)repositoryElement).getXML();
    OutputStream os=KettleVFS.getOutputStream(fileObject,false);
    os.write(xml.getBytes(Const.XML_ENCODING));
    os.close();
    if (repositoryElement instanceof ChangedFlagInterface) {
      ((ChangedFlagInterface)repositoryElement).clearChanged();
    }
    if (repositoryElement.getObjectId() != null && !repositoryElement.getObjectId().equals(objectId)) {
      delObject(repositoryElement.getObjectId());
    }
    if (repositoryElement instanceof TransMeta) {
      FileObject dasFile=KettleVFS.getFileObject(calcFilename(repositoryElement.getRepositoryDirectory(),repositoryElement.getName(),EXT_DATA_SERVICE));
      if (dasFile.exists()) {
        dasFile.delete();
      }
      TransMeta transMeta=(TransMeta)repositoryElement;
      if (transMeta.getDataService().isDefined()) {
        xml=transMeta.getDataService().getXML();
        os=KettleVFS.getOutputStream(dasFile,false);
        os.write(XMLHandler.getXMLHeader().getBytes(Const.XML_ENCODING));
        os.write(xml.getBytes(Const.XML_ENCODING));
        os.close();
      }
    }
    repositoryElement.setObjectId(objectId);
  }
 catch (  Exception e) {
    throw new KettleException("Unable to save repository element [" + repositoryElement + "] to XML file : "+ calcFilename(repositoryElement),e);
  }
}
