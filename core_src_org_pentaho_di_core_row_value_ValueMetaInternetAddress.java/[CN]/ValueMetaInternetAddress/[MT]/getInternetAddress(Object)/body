{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_INET:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (InetAddress)object;
case STORAGE_TYPE_BINARY_STRING:
    return (InetAddress)convertBinaryStringToNativeType((byte[])object);
case STORAGE_TYPE_INDEXED:
  return (InetAddress)index[((Integer)object).intValue()];
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToInternetAddress((String)object);
case STORAGE_TYPE_BINARY_STRING:
return convertStringToInternetAddress((String)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertStringToInternetAddress((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertNumberToInternetAddress((Double)object);
case STORAGE_TYPE_BINARY_STRING:
return convertNumberToInternetAddress((Double)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertNumberToInternetAddress((Double)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertIntegerToInternetAddress((Long)object);
case STORAGE_TYPE_BINARY_STRING:
return convertIntegerToInternetAddress((Long)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertIntegerToInternetAddress((Long)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertBigNumberToInternetAddress((BigDecimal)object);
case STORAGE_TYPE_BINARY_STRING:
return convertBigNumberToInternetAddress((BigDecimal)convertBinaryStringToNativeType((byte[])object));
case STORAGE_TYPE_INDEXED:
return convertBigNumberToInternetAddress((BigDecimal)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_BOOLEAN:
throw new KettleValueException(toString() + " : I don't know how to convert a boolean to a Internet address.");
case TYPE_BINARY:
throw new KettleValueException(toString() + " : I don't know how to convert a binary value to Internet address.");
case TYPE_SERIALIZABLE:
throw new KettleValueException(toString() + " : I don't know how to convert a serializable value to Internet address.");
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
