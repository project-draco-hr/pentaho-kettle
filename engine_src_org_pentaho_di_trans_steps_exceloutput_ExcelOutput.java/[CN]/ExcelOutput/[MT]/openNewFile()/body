{
  boolean retval=false;
  try {
    data.realFilename=buildFilename();
    data.file=KettleVFS.getFileObject(data.realFilename,getTransMeta());
    if (meta.isCreateParentFolder()) {
      if (!createParentFolder(data.file)) {
        return retval;
      }
    }
    data.realFilename=KettleVFS.getFilename(data.file);
    addFilenameToResult();
    if (log.isDebug()) {
      logDebug(BaseMessages.getString(PKG,"ExcelOutput.Log.OpeningFile",data.realFilename));
    }
    if (!meta.isTemplateEnabled()) {
      File fle=new File(KettleVFS.getFilename(data.file));
      if (meta.isAppend() && fle.exists()) {
        Workbook workbook=Workbook.getWorkbook(fle);
        data.workbook=Workbook.createWorkbook(fle,workbook);
        if (data.workbook.getSheet(data.realSheetname) != null) {
          String[] listSheets=data.workbook.getSheetNames();
          for (int i=0; i < listSheets.length; i++) {
            if (listSheets[i].equals(data.realSheetname)) {
              data.workbook.removeSheet(i);
            }
          }
        }
        data.sheet=data.workbook.createSheet(data.realSheetname,data.workbook.getNumberOfSheets());
      }
 else {
        data.outputStream=KettleVFS.getOutputStream(data.file,false);
        data.workbook=Workbook.createWorkbook(data.outputStream,data.ws);
        String sheetname="Sheet1";
        data.sheet=data.workbook.getSheet(sheetname);
        if (data.sheet == null) {
          data.sheet=data.workbook.createSheet(sheetname,0);
        }
      }
    }
 else {
      FileObject fo=KettleVFS.getFileObject(environmentSubstitute(meta.getTemplateFileName()),getTransMeta());
      Workbook tmpWorkbook=Workbook.getWorkbook(KettleVFS.getInputStream(fo),data.ws);
      data.outputStream=KettleVFS.getOutputStream(data.file,false);
      data.workbook=Workbook.createWorkbook(data.outputStream,tmpWorkbook);
      fo.close();
      data.sheet=data.workbook.getSheet(0);
      data.templateColumns=data.sheet.getColumns();
    }
    if (!Utils.isEmpty(data.realSheetname)) {
      data.sheet.setName(data.realSheetname);
    }
    if (meta.isSheetProtected()) {
      data.sheet.getSettings().setProtected(true);
      String realPassword=Utils.resolvePassword(variables,meta.getPassword());
      data.sheet.getSettings().setPassword(realPassword);
    }
    data.positionX=0;
    if (meta.isTemplateEnabled() && meta.isTemplateAppend()) {
      data.positionY=data.sheet.getRows();
    }
 else {
      data.positionY=0;
    }
    if (data.headerImage != null) {
      data.sheet.addImage(data.headerImage);
      data.positionY+=Math.round(data.headerImageHeight);
    }
    if (data.Headerrowheight > 0 && data.Headerrowheight != ExcelOutputMeta.DEFAULT_ROW_HEIGHT) {
      data.sheet.setRowView(data.positionY,data.Headerrowheight);
    }
    try {
      setFonts();
    }
 catch (    Exception we) {
      logError("Error preparing fonts, colors for header and rows: " + we.toString());
      return retval;
    }
    data.headerWrote=false;
    data.splitnr++;
    data.oneFileOpened=true;
    if (log.isDebug()) {
      logDebug(BaseMessages.getString(PKG,"ExcelOutput.Log.FileOpened",data.file.toString()));
    }
    retval=true;
  }
 catch (  Exception e) {
    logError("Error opening new file",e);
    setErrors(1);
  }
  return retval;
}
