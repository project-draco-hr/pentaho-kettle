{
  TransMeta transMeta=new TransMeta("aFile","aName");
  TransMeta transMeta2=new TransMeta("aFile","aName");
  assertEquals(0,transMeta.compare(transMeta,transMeta2));
  transMeta2.setVariable("myVariable","myValue");
  assertEquals(0,transMeta.compare(transMeta,transMeta2));
  transMeta2.setFilename(null);
  assertEquals(1,transMeta.compare(transMeta,transMeta2));
  assertEquals(-1,transMeta.compare(transMeta2,transMeta));
  transMeta2.setFilename("aFile");
  transMeta2.setName(null);
  assertEquals(1,transMeta.compare(transMeta,transMeta2));
  assertEquals(-1,transMeta.compare(transMeta2,transMeta));
  transMeta2.setFilename("aFile2");
  transMeta2.setName("aName");
  assertEquals(-1,transMeta.compare(transMeta,transMeta2));
  assertEquals(1,transMeta.compare(transMeta2,transMeta));
  transMeta2.setFilename("aFile");
  transMeta2.setName("aName2");
  assertEquals(-1,transMeta.compare(transMeta,transMeta2));
  assertEquals(1,transMeta.compare(transMeta2,transMeta));
  transMeta.setFilename(null);
  transMeta2.setFilename(null);
  transMeta2.setName("aName");
  assertEquals(0,transMeta.compare(transMeta,transMeta2));
  RepositoryDirectoryInterface path1=mock(RepositoryDirectoryInterface.class);
  transMeta.setRepositoryDirectory(path1);
  when(path1.getPath()).thenReturn("aPath2");
  RepositoryDirectoryInterface path2=mock(RepositoryDirectoryInterface.class);
  when(path2.getPath()).thenReturn("aPath");
  transMeta2.setRepositoryDirectory(path2);
  assertEquals(1,transMeta.compare(transMeta,transMeta2));
  assertEquals(-1,transMeta.compare(transMeta2,transMeta));
  when(path1.getPath()).thenReturn("aPath");
  assertEquals(0,transMeta.compare(transMeta,transMeta2));
  ObjectRevision revision2=mock(ObjectRevision.class);
  transMeta2.setObjectRevision(revision2);
  assertEquals(-1,transMeta.compare(transMeta,transMeta2));
  assertEquals(1,transMeta.compare(transMeta2,transMeta));
  ObjectRevision revision1=mock(ObjectRevision.class);
  transMeta.setObjectRevision(revision1);
  when(revision1.getName()).thenReturn("aRevision");
  when(revision2.getName()).thenReturn("aRevision");
  assertEquals(0,transMeta.compare(transMeta,transMeta2));
  when(revision2.getName()).thenReturn("aRevision2");
  assertEquals(-1,transMeta.compare(transMeta,transMeta2));
  assertEquals(1,transMeta.compare(transMeta2,transMeta));
}
