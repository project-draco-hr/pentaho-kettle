{
  PurRepository repo=(PurRepository)repository;
  DatabaseMeta dbMeta=createDatabaseMeta(EXP_DBMETA_NAME);
  repository.save(dbMeta,VERSION_COMMENT_V1,null);
  ClusterSchema clusterSchema=createClusterSchema(EXP_CLUSTER_SCHEMA_NAME);
  repository.save(clusterSchema,VERSION_COMMENT_V1,null);
  Map<RepositoryObjectType,List<? extends SharedObjectInterface>> sharedObjectsByType=new HashMap<RepositoryObjectType,List<? extends SharedObjectInterface>>();
  repo.readSharedObjects(sharedObjectsByType,RepositoryObjectType.CLUSTER_SCHEMA,RepositoryObjectType.DATABASE);
  assertNotNull(sharedObjectsByType);
  assertEquals(2,sharedObjectsByType.size());
  @SuppressWarnings("unchecked") List<DatabaseMeta> databaseMetas=(List<DatabaseMeta>)sharedObjectsByType.get(RepositoryObjectType.DATABASE);
  assertNotNull(databaseMetas);
  assertEquals(1,databaseMetas.size());
  DatabaseMeta dbMetaResult=databaseMetas.get(0);
  assertNotNull(dbMetaResult);
  assertEquals(dbMeta,dbMetaResult);
  @SuppressWarnings("unchecked") List<ClusterSchema> clusterSchemas=(List<ClusterSchema>)sharedObjectsByType.get(RepositoryObjectType.CLUSTER_SCHEMA);
  assertNotNull(clusterSchemas);
  assertEquals(1,clusterSchemas.size());
  ClusterSchema clusterSchemaResult=clusterSchemas.get(0);
  assertNotNull(clusterSchemaResult);
  assertEquals(clusterSchema,clusterSchemaResult);
  repository.deleteDatabaseMeta(EXP_DBMETA_NAME);
  repository.deleteClusterSchema(clusterSchema.getObjectId());
}
