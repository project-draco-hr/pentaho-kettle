{
  if (first) {
    data.fieldnr=r.searchValueIndex(meta.getSplitField());
    if (data.fieldnr < 0) {
      logError("Couldn't find field to split [" + meta.getSplitField() + "] in input stream!");
      setErrors(1);
      stopAll();
      return false;
    }
  }
  Value v=r.getValue(data.fieldnr);
  r.removeValue(data.fieldnr);
  boolean insert=data.fieldnr < r.size();
  if (!v.isString()) {
    logError("Can only split string fields.  [" + meta.getSplitField() + "] is not a string!");
    setErrors(1);
    stopAll();
    return false;
  }
  boolean use_ids=meta.getFieldID().length > 0 && meta.getFieldID()[0] != null && meta.getFieldID()[0].length() > 0;
  Value value=null;
  if (use_ids) {
    if (log.isDebug())     logDebug("Using IDs!!");
    String pol[]=new String[meta.getField().length];
    int prev=0;
    int i=0;
    while (v.getString() != null && prev < v.getString().length() && i < pol.length) {
      pol[i]=polNext(v.getString(),meta.getDelimiter(),prev);
      if (log.isDebug())       logDebug("pol=" + pol[i] + ", prev="+ prev);
      prev+=pol[i].length() + meta.getDelimiter().length();
      i++;
    }
    for (i=0; i < meta.getField().length; i++) {
      String split=null;
      for (int p=0; p < pol.length && split == null; p++) {
        if (pol[p] != null && pol[p].indexOf(meta.getFieldID()[i]) >= 0)         split=pol[p];
      }
      if (split != null && meta.removeID()[i]) {
        StringBuffer sb=new StringBuffer(split);
        int idx=sb.indexOf(meta.getFieldID()[i]);
        sb.delete(idx,idx + meta.getFieldID()[i].length());
        split=sb.toString();
      }
      if (split == null)       split="";
      if (log.isDebug())       logDebug("Split=" + split);
      try {
        value=TextFileInput.convertValue(split,meta.getField()[i],meta.getFieldType()[i],meta.getFieldFormat()[i],meta.getFieldLength()[i],meta.getFieldPrecision()[i],meta.getFieldGroup()[i],meta.getFieldDecimal()[i],meta.getFieldCurrency()[i],meta.getFieldDefault()[i],TextFileInputMeta.TYPE_TRIM_BOTH,data.df,data.dfs,data.daf,data.dafs);
      }
 catch (      Exception e) {
        logError("Error converting value [" + split + "], when splitting field ["+ meta.getSplitField()+ "]!");
        setErrors(1);
        stopAll();
        return false;
      }
      if (insert)       r.addValue(data.fieldnr + i,value);
 else       r.addValue(value);
    }
  }
 else {
    if (log.isDebug())     logDebug("Using position of value!!");
    int prev=0;
    for (int i=0; i < meta.getField().length; i++) {
      String pol=polNext(v.getString(),meta.getDelimiter(),prev);
      if (log.isDebug())       logDebug("pol=" + pol + ", prev="+ prev);
      prev+=(pol == null ? 0 : pol.length()) + meta.getDelimiter().length();
      try {
        value=TextFileInput.convertValue(pol,meta.getField()[i],meta.getFieldType()[i],meta.getFieldFormat()[i],meta.getFieldLength()[i],meta.getFieldPrecision()[i],meta.getFieldGroup()[i],meta.getFieldDecimal()[i],meta.getFieldCurrency()[i],meta.getFieldDefault()[i],TextFileInputMeta.TYPE_TRIM_BOTH,data.df,data.dfs,data.daf,data.dafs);
      }
 catch (      Exception e) {
        logError("Error converting value [" + pol + "], when splitting field ["+ meta.getSplitField()+ "]!");
        setErrors(1);
        stopAll();
        return false;
      }
      if (insert)       r.addValue(data.fieldnr + i,value);
 else       r.addValue(value);
    }
  }
  return true;
}
