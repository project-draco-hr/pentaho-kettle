{
  DatabaseMeta dm=meta.getDatabaseMeta();
  String inputName="'" + environmentSubstitute(meta.getDataFile()) + "'";
  String loadAction=meta.getLoadAction();
  StringBuffer contents=new StringBuffer(500);
  contents.append("OPTIONS(").append(Const.CR);
  contents.append("  ERRORS=\'").append(meta.getMaxErrors()).append("\'").append(Const.CR);
  if (meta.getCommitSizeAsInt(this) != 0 && !(meta.isDirectPath() && getStepMeta().getCopies() > 1)) {
    contents.append("  , ROWS=\'").append(meta.getCommitSize()).append("\'").append(Const.CR);
  }
  if (meta.getBindSizeAsInt(this) != 0) {
    contents.append("  , BINDSIZE=\'").append(meta.getBindSize()).append("\'").append(Const.CR);
  }
  if (meta.getReadSizeAsInt(this) != 0) {
    contents.append("  , READSIZE=\'").append(meta.getReadSize()).append("\'").append(Const.CR);
  }
  contents.append(")").append(Const.CR);
  contents.append("LOAD DATA").append(Const.CR);
  if (!Const.isEmpty(meta.getCharacterSetName())) {
    contents.append("CHARACTERSET ").append(meta.getCharacterSetName()).append(Const.CR);
  }
  if (!OraBulkLoaderMeta.METHOD_AUTO_CONCURRENT.equals(meta.getLoadMethod()) || !Const.isEmpty(meta.getAltRecordTerm())) {
    String infile=inputName;
    if (OraBulkLoaderMeta.METHOD_AUTO_CONCURRENT.equals(meta.getLoadMethod())) {
      infile="''";
    }
    contents.append("INFILE ").append(infile);
    if (!Const.isEmpty(meta.getAltRecordTerm())) {
      contents.append(" \"STR x'").append(encodeRecordTerminator(meta.getAltRecordTerm(),meta.getEncoding())).append("'\"");
    }
    contents.append(Const.CR);
  }
  contents.append("INTO TABLE ").append(dm.getQuotedSchemaTableCombination(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTableName()))).append(Const.CR).append(loadAction).append(Const.CR).append("FIELDS TERMINATED BY ',' ENCLOSED BY '\"'").append(Const.CR).append("(");
  String streamFields[]=meta.getFieldStream();
  String tableFields[]=meta.getFieldTable();
  String dateMask[]=meta.getDateMask();
  if (streamFields == null || streamFields.length == 0) {
    throw new KettleException("No fields defined to load to database");
  }
  for (int i=0; i < streamFields.length; i++) {
    if (i != 0)     contents.append(", ").append(Const.CR);
    contents.append(dm.quoteField(tableFields[i]));
    int pos=rm.indexOfValue(streamFields[i]);
    if (pos < 0) {
      throw new KettleException("Could not find field " + streamFields[i] + " in stream");
    }
    ValueMetaInterface v=rm.getValueMeta(pos);
switch (v.getType()) {
case ValueMetaInterface.TYPE_STRING:
      if (v.getLength() > 255) {
        contents.append(" CHAR(").append(v.getLength()).append(")");
      }
 else {
        contents.append(" CHAR");
      }
    break;
case ValueMetaInterface.TYPE_INTEGER:
case ValueMetaInterface.TYPE_NUMBER:
case ValueMetaInterface.TYPE_BIGNUMBER:
  break;
case ValueMetaInterface.TYPE_DATE:
if (OraBulkLoaderMeta.DATE_MASK_DATE.equals(dateMask[i])) {
  contents.append(" DATE 'yyyy-mm-dd'");
}
 else if (OraBulkLoaderMeta.DATE_MASK_DATETIME.equals(dateMask[i])) {
  contents.append(" TIMESTAMP 'yyyy-mm-dd hh24:mi:ss.ff'");
}
 else {
  contents.append(" DATE 'yyyy-mm-dd'");
}
break;
case ValueMetaInterface.TYPE_BINARY:
contents.append(" ENCLOSED BY '<startlob>' AND '<endlob>'");
break;
}
}
contents.append(")");
return contents.toString();
}
