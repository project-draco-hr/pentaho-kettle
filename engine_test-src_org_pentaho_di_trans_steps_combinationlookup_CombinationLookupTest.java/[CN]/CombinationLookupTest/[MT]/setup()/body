{
  databaseMeta=mock(DatabaseMeta.class);
  doReturn("").when(databaseMeta).quoteField(anyString());
  combinationLookupMeta=mock(CombinationLookupMeta.class);
  doReturn(databaseMeta).when(combinationLookupMeta).getDatabaseMeta();
  doReturn("sasas").when(combinationLookupMeta).getTechnicalKeyField();
  doReturn(new String[]{}).when(combinationLookupMeta).getKeyLookup();
  stepMeta=mock(StepMeta.class);
  doReturn("step").when(stepMeta).getName();
  doReturn(mock(StepPartitioningMeta.class)).when(stepMeta).getTargetStepPartitioningMeta();
  doReturn(combinationLookupMeta).when(stepMeta).getStepMetaInterface();
  Database db=mock(Database.class);
  doReturn(mock(Connection.class)).when(db).getConnection();
  combinationLookupData=mock(CombinationLookupData.class);
  combinationLookupData.db=db;
  combinationLookupData.keynrs=new int[]{};
  TransMeta transMeta=mock(TransMeta.class);
  doReturn(stepMeta).when(transMeta).findStep(anyString());
  combinationLookup=new CombinationLookup(stepMeta,combinationLookupData,1,transMeta,mock(Trans.class));
  combinationLookupSpy=spy(combinationLookup);
  doReturn(stepMeta).when(combinationLookupSpy).getStepMeta();
  doReturn(false).when(combinationLookupSpy).isRowLevel();
  doReturn(true).when(combinationLookupSpy).isAutoIncrement();
  doNothing().when(combinationLookupSpy).logDetailed(anyString());
}
