{
  int rowSize=r.size();
  if (meta.getCalculation() != null)   for (int i=0; i < meta.getCalculation().length; i++) {
    CalculatorMetaFunction fn=meta.getCalculation()[i];
    if (fn.getFieldName() != null && fn.getFieldName().length() > 0) {
      Value value=null;
      Value fieldA=null;
      Value fieldB=null;
      Value fieldC=null;
      if (fn.getCalcType() != CalculatorMetaFunction.CALC_CONSTANT) {
        if (!Const.isEmpty(fn.getFieldA())) {
          Integer idxA=(Integer)data.indexCache.get(fn.getFieldA());
          if (idxA == null)           idxA=new Integer(r.searchValueIndex(fn.getFieldA()));
          if (idxA.intValue() < 0)           throw new KettleValueException("Field [" + fn.getFieldA() + "] can't be found in the input row!");
          data.indexCache.put(fn.getFieldA(),idxA);
          fieldA=r.getValue(idxA.intValue());
        }
        if (!Const.isEmpty(fn.getFieldB())) {
          Integer idxB=(Integer)data.indexCache.get(fn.getFieldB());
          if (idxB == null)           idxB=new Integer(r.searchValueIndex(fn.getFieldB()));
          if (idxB.intValue() < 0)           throw new KettleValueException("Field [" + fn.getFieldB() + "] can't be found in the input row!");
          data.indexCache.put(fn.getFieldB(),idxB);
          fieldB=r.getValue(idxB.intValue());
        }
        if (!Const.isEmpty(fn.getFieldC())) {
          Integer idxC=(Integer)data.indexCache.get(fn.getFieldC());
          if (idxC == null)           idxC=new Integer(r.searchValueIndex(fn.getFieldC()));
          if (idxC.intValue() < 0)           throw new KettleValueException("Field [" + fn.getFieldC() + "] can't be found in the input row!");
          data.indexCache.put(fn.getFieldC(),idxC);
          fieldC=r.getValue(idxC.intValue());
        }
      }
switch (fn.getCalcType()) {
case CalculatorMetaFunction.CALC_NONE:
        break;
case CalculatorMetaFunction.CALC_ADD:
{
        value=new Value(fn.getFieldName(),fieldA);
        value.plus(fieldB);
      }
    break;
case CalculatorMetaFunction.CALC_SUBTRACT:
{
    value=new Value(fn.getFieldName(),fieldA);
    value.minus(fieldB);
  }
break;
case CalculatorMetaFunction.CALC_MULTIPLY:
{
value=new Value(fn.getFieldName(),fieldA);
value.multiply(fieldB);
}
break;
case CalculatorMetaFunction.CALC_DIVIDE:
{
value=new Value(fn.getFieldName(),fieldA);
value.divide(fieldB);
}
break;
case CalculatorMetaFunction.CALC_SQUARE:
{
value=new Value(fn.getFieldName(),fieldA);
value.multiply(fieldA);
}
break;
case CalculatorMetaFunction.CALC_SQUARE_ROOT:
{
value=new Value(fn.getFieldName(),fieldA);
value.sqrt();
}
break;
case CalculatorMetaFunction.CALC_PERCENT_1:
{
value=new Value(fn.getFieldName(),fieldA);
value.multiply(100);
value.divide(fieldB);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_2:
{
value=new Value(fn.getFieldName(),fieldA);
Value value2=new Value(fn.getFieldName(),fieldA);
value2.multiply(fieldB);
value2.divide(100);
value.minus(value2);
}
break;
case CalculatorMetaFunction.CALC_PERCENT_3:
{
value=new Value(fn.getFieldName(),fieldA);
Value value2=new Value(fn.getFieldName(),fieldA);
value2.multiply(fieldB);
value2.divide(100);
value.plus(value2);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_1:
{
value=new Value(fn.getFieldName(),fieldA);
Value value2=new Value(fn.getFieldName(),fieldB);
value2.multiply(fieldC);
value.plus(value2);
}
break;
case CalculatorMetaFunction.CALC_COMBINATION_2:
{
value=new Value(fn.getFieldName(),fieldA);
value.multiply(fieldA);
Value value2=new Value(fn.getFieldName(),fieldB);
value2.multiply(fieldB);
value.plus(value2);
value.sqrt();
}
break;
case CalculatorMetaFunction.CALC_ROUND_1:
{
value=new Value(fn.getFieldName(),fieldA);
value.round();
}
break;
case CalculatorMetaFunction.CALC_ROUND_2:
{
value=new Value(fn.getFieldName(),fieldA);
value.round((int)fieldB.getInteger());
}
break;
case CalculatorMetaFunction.CALC_CONSTANT:
{
value=new Value(fn.getFieldName(),fn.getFieldA());
value.convertString(fn.getValueType());
}
break;
case CalculatorMetaFunction.CALC_NVL:
{
value=new Value(fn.getFieldName(),fieldA);
value.nvl(fieldB);
}
break;
case CalculatorMetaFunction.CALC_ADD_DAYS:
{
value=new Value(fn.getFieldName(),fieldA);
value.add_days(fieldB.getInteger());
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.YEAR));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_MONTH_OF_DATE:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.MONTH) + 1);
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_YEAR:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.DAY_OF_YEAR));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_MONTH:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.DAY_OF_MONTH));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_DAY_OF_WEEK:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.DAY_OF_WEEK));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR:
{
value=new Value(fn.getFieldName(),fieldA);
Calendar calendar=Calendar.getInstance();
Date date=fieldA.getDate();
if (date != null) {
calendar.setTime(date);
value.setValue(calendar.get(Calendar.WEEK_OF_YEAR));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_WEEK_OF_YEAR_ISO8601:
{
value=new Value(fn.getFieldName(),fieldA);
Date date=fieldA.getDate();
if (date != null) {
Calendar calendar=Calendar.getInstance(Locale.ENGLISH);
calendar.setMinimalDaysInFirstWeek(4);
calendar.setFirstDayOfWeek(Calendar.MONDAY);
calendar.setTime(date);
value.setValue(calendar.get(Calendar.WEEK_OF_YEAR));
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_YEAR_OF_DATE_ISO8601:
{
value=new Value(fn.getFieldName(),fieldA);
Date date=fieldA.getDate();
if (date != null) {
Calendar calendar=Calendar.getInstance(Locale.ENGLISH);
calendar.setMinimalDaysInFirstWeek(4);
calendar.setFirstDayOfWeek(Calendar.MONDAY);
calendar.setTime(date);
int week=calendar.get(Calendar.WEEK_OF_YEAR);
int month=calendar.get(Calendar.MONTH);
int year=calendar.get(Calendar.YEAR);
if (week >= 52 && month == 0) year--;
if (week <= 2 && month == 11) year++;
value.setValue(year);
}
 else {
throw new KettleValueException("Unable to get date from field [" + fieldA + "]");
}
}
break;
case CalculatorMetaFunction.CALC_BYTE_TO_HEX_ENCODE:
{
value=new Value(fn.getFieldName(),fieldA);
value.byteToHexEncode();
}
break;
case CalculatorMetaFunction.CALC_HEX_TO_BYTE_DECODE:
{
value=new Value(fn.getFieldName(),fieldA);
value.hexToByteDecode();
}
break;
case CalculatorMetaFunction.CALC_CHAR_TO_HEX_ENCODE:
{
value=new Value(fn.getFieldName(),fieldA);
value.charToHexEncode();
}
break;
case CalculatorMetaFunction.CALC_HEX_TO_CHAR_DECODE:
{
value=new Value(fn.getFieldName(),fieldA);
value.hexToCharDecode();
}
break;
default :
throw new KettleValueException("Unknown calculation type #" + fn.getCalcType());
}
if (value != null) {
if (fn.getValueType() != Value.VALUE_TYPE_NONE) {
value.setType(fn.getValueType());
value.setLength(fn.getValueLength(),fn.getValuePrecision());
}
r.addValue(value);
}
}
}
int inpFieldsRemoved=0;
for (int i=meta.getCalculation().length - 1; i >= 0; i--) {
CalculatorMetaFunction fn=meta.getCalculation()[i];
if (fn.isRemovedFromResult()) {
Integer idx=(Integer)data.indexCache.get(fn.getFieldName());
if (idx != null) {
int y=idx.intValue();
if (y < rowSize) {
r.removeValue(idx.intValue());
inpFieldsRemoved++;
}
 else {
r.removeValue(idx.intValue() - inpFieldsRemoved);
}
}
 else {
r.removeValue(rowSize + i);
}
}
}
}
