{
  Shell parent=getParent();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  shell.setImage(GUIResource.getInstance().getImageCluster());
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      clusterSchema.setChanged();
    }
  }
;
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.Shell.Title"));
  shell.setLayout(formLayout);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  Button[] buttons=new Button[]{wOK,wCancel};
  BaseStepDialog.positionBottomButtons(shell,buttons,margin,null);
  Label wlName=new Label(shell,SWT.RIGHT);
  props.setLook(wlName);
  wlName.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.Schema.Label"));
  FormData fdlName=new FormData();
  fdlName.top=new FormAttachment(0,0);
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,0);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  FormData fdName=new FormData();
  fdName.top=new FormAttachment(0,0);
  fdName.left=new FormAttachment(middle,margin);
  fdName.right=new FormAttachment(95,0);
  wName.setLayoutData(fdName);
  Label wlPort=new Label(shell,SWT.RIGHT);
  props.setLook(wlPort);
  wlPort.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.Port.Label"));
  FormData fdlPort=new FormData();
  fdlPort.top=new FormAttachment(wName,margin);
  fdlPort.left=new FormAttachment(0,0);
  fdlPort.right=new FormAttachment(middle,0);
  wlPort.setLayoutData(fdlPort);
  wPort=new TextVar(clusterSchema,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wPort);
  wPort.addModifyListener(lsMod);
  FormData fdPort=new FormData();
  fdPort.top=new FormAttachment(wName,margin);
  fdPort.left=new FormAttachment(middle,margin);
  fdPort.right=new FormAttachment(95,0);
  wPort.setLayoutData(fdPort);
  Label wlBufferSize=new Label(shell,SWT.RIGHT);
  props.setLook(wlBufferSize);
  wlBufferSize.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.SocketBufferSize.Label"));
  FormData fdlBufferSize=new FormData();
  fdlBufferSize.top=new FormAttachment(wPort,margin);
  fdlBufferSize.left=new FormAttachment(0,0);
  fdlBufferSize.right=new FormAttachment(middle,0);
  wlBufferSize.setLayoutData(fdlBufferSize);
  wBufferSize=new TextVar(clusterSchema,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wBufferSize);
  wBufferSize.addModifyListener(lsMod);
  FormData fdBufferSize=new FormData();
  fdBufferSize.top=new FormAttachment(wPort,margin);
  fdBufferSize.left=new FormAttachment(middle,margin);
  fdBufferSize.right=new FormAttachment(95,0);
  wBufferSize.setLayoutData(fdBufferSize);
  Label wlFlushInterval=new Label(shell,SWT.RIGHT);
  props.setLook(wlFlushInterval);
  wlFlushInterval.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.SocketFlushRows.Label"));
  FormData fdlFlushInterval=new FormData();
  fdlFlushInterval.top=new FormAttachment(wBufferSize,margin);
  fdlFlushInterval.left=new FormAttachment(0,0);
  fdlFlushInterval.right=new FormAttachment(middle,0);
  wlFlushInterval.setLayoutData(fdlFlushInterval);
  wFlushInterval=new TextVar(clusterSchema,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFlushInterval);
  wFlushInterval.addModifyListener(lsMod);
  FormData fdFlushInterval=new FormData();
  fdFlushInterval.top=new FormAttachment(wBufferSize,margin);
  fdFlushInterval.left=new FormAttachment(middle,margin);
  fdFlushInterval.right=new FormAttachment(95,0);
  wFlushInterval.setLayoutData(fdFlushInterval);
  Label wlCompressed=new Label(shell,SWT.RIGHT);
  props.setLook(wlCompressed);
  wlCompressed.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.SocketDataCompressed.Label"));
  FormData fdlCompressed=new FormData();
  fdlCompressed.top=new FormAttachment(wFlushInterval,margin);
  fdlCompressed.left=new FormAttachment(0,0);
  fdlCompressed.right=new FormAttachment(middle,0);
  wlCompressed.setLayoutData(fdlCompressed);
  wCompressed=new Button(shell,SWT.CHECK);
  props.setLook(wCompressed);
  FormData fdCompressed=new FormData();
  fdCompressed.top=new FormAttachment(wFlushInterval,margin);
  fdCompressed.left=new FormAttachment(middle,margin);
  fdCompressed.right=new FormAttachment(95,0);
  wCompressed.setLayoutData(fdCompressed);
  Label wlDynamic=new Label(shell,SWT.RIGHT);
  wlDynamic.setToolTipText(BaseMessages.getString(PKG,"ClusterSchemaDialog.DynamicCluster.Tooltip"));
  props.setLook(wlDynamic);
  wlDynamic.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.DynamicCluster.Label"));
  FormData fdlDynamic=new FormData();
  fdlDynamic.top=new FormAttachment(wCompressed,margin);
  fdlDynamic.left=new FormAttachment(0,0);
  fdlDynamic.right=new FormAttachment(middle,0);
  wlDynamic.setLayoutData(fdlDynamic);
  wDynamic=new Button(shell,SWT.CHECK);
  wDynamic.setToolTipText(BaseMessages.getString(PKG,"ClusterSchemaDialog.DynamicCluster.Tooltip"));
  props.setLook(wDynamic);
  FormData fdDynamic=new FormData();
  fdDynamic.top=new FormAttachment(wCompressed,margin);
  fdDynamic.left=new FormAttachment(middle,margin);
  fdDynamic.right=new FormAttachment(95,0);
  wDynamic.setLayoutData(fdDynamic);
  Label wlServers=new Label(shell,SWT.RIGHT);
  wlServers.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.SlaveServers.Label"));
  props.setLook(wlServers);
  FormData fdlServers=new FormData();
  fdlServers.left=new FormAttachment(0,0);
  fdlServers.right=new FormAttachment(middle,0);
  fdlServers.top=new FormAttachment(wDynamic,margin);
  wlServers.setLayoutData(fdlServers);
  wSelect=new Button(shell,SWT.PUSH);
  wSelect.setText(BaseMessages.getString(PKG,"ClusterSchemaDialog.SelectSlaveServers.Label"));
  props.setLook(wSelect);
  FormData fdSelect=new FormData();
  fdSelect.right=new FormAttachment(100,0);
  fdSelect.top=new FormAttachment(wlServers,5 * margin);
  wSelect.setLayoutData(fdSelect);
  wSelect.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectSlaveServers();
    }
  }
);
  ColumnInfo[] partitionColumns=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"ClusterSchemaDialog.ColumnInfoName.Label"),ColumnInfo.COLUMN_TYPE_TEXT,true,false),new ColumnInfo(BaseMessages.getString(PKG,"ClusterSchemaDialog.ColumnInfoServiceURL.Label"),ColumnInfo.COLUMN_TYPE_TEXT,true,true),new ColumnInfo(BaseMessages.getString(PKG,"ClusterSchemaDialog.ColumnInfoMaster.Label"),ColumnInfo.COLUMN_TYPE_TEXT,true,true)};
  wServers=new TableView(clusterSchema,shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.SINGLE,partitionColumns,1,lsMod,props);
  wServers.setReadonly(false);
  props.setLook(wServers);
  FormData fdServers=new FormData();
  fdServers.left=new FormAttachment(middle,margin);
  fdServers.right=new FormAttachment(wSelect,-2 * margin);
  fdServers.top=new FormAttachment(wDynamic,margin);
  fdServers.bottom=new FormAttachment(wOK,-margin * 2);
  wServers.setLayoutData(fdServers);
  wServers.table.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSlaveServer();
    }
  }
);
  wOK.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
);
  wCancel.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
);
  SelectionAdapter selAdapter=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(selAdapter);
  wPort.addSelectionListener(selAdapter);
  wBufferSize.addSelectionListener(selAdapter);
  wFlushInterval.addSelectionListener(selAdapter);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  BaseStepDialog.setSize(shell);
  shell.open();
  Display display=parent.getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return ok;
}
