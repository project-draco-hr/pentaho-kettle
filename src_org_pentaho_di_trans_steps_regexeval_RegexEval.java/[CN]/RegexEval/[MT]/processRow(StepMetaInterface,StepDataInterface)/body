{
  meta=(RegexEvalMeta)smi;
  data=(RegexEvalData)sdi;
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.nrExtraFields=meta.isAllowCaptureGroupsFlagSet() ? meta.getFieldName().length : 0;
    if (meta.getMatcher() != null) {
      if (data.indexOfFieldToEvaluate < 0) {
        data.indexOfFieldToEvaluate=data.previousRowMeta.indexOfValue(meta.getMatcher());
        data.indexOfMatchResultField=data.outputRowMeta.indexOfValue(meta.getResultFieldName());
        if (data.nrExtraFields > 0) {
          data.indexOfFirstCaptureGroupField=data.outputRowMeta.indexOfValue(meta.getFieldName()[0]);
        }
        if (data.indexOfFieldToEvaluate < 0) {
          logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorFindingField") + "[" + meta.getMatcher()+ "]");
          throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.CouldnotFindField",meta.getMatcher()));
        }
        if (environmentSubstitute(meta.getResultFieldName()) == null) {
          logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorResultFieldMissing"));
          throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorResultFieldMissing"));
        }
      }
    }
 else {
      logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorMatcherMissing"));
      throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorMatcherMissing"));
    }
    data.conversionRowMeta=data.outputRowMeta.clone();
    for (    ValueMetaInterface valueMeta : data.conversionRowMeta.getValueMetaList()) {
      valueMeta.setType(ValueMetaInterface.TYPE_STRING);
    }
  }
  Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  for (int i=0; i < data.previousRowMeta.size(); i++) {
    outputRow[i]=row[i];
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    String fieldValue=getInputRowMeta().getString(row,data.indexOfFieldToEvaluate);
    if (fieldValue == null) {
      outputRow[data.indexOfMatchResultField]=false;
      for (int i=0; i < data.nrExtraFields; i++) {
        ValueMetaInterface valueMeta=data.outputRowMeta.getValueMeta(data.indexOfFirstCaptureGroupField + i);
        ValueMetaInterface conversionValueMeta=data.conversionRowMeta.getValueMeta(data.indexOfFirstCaptureGroupField + i);
        Object convertedValue=valueMeta.convertDataFromString(null,conversionValueMeta,meta.getFieldNullIf()[i],meta.getFieldIfNull()[i],meta.getFieldTrimType()[i]);
        outputRow[data.indexOfFirstCaptureGroupField + i]=convertedValue;
      }
    }
 else {
      Matcher m=data.pattern.matcher(fieldValue);
      boolean isMatch=m.matches();
      outputRow[data.indexOfMatchResultField]=isMatch;
      String[] values=new String[data.nrExtraFields];
      for (int i=0; i < data.nrExtraFields; i++) {
        if (isMatch) {
          if (data.nrExtraFields != m.groupCount()) {
            logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorCaptureGroupFieldsMismatch",String.valueOf(m.groupCount()),String.valueOf(data.nrExtraFields)));
            throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorCaptureGroupFieldsMismatch",String.valueOf(m.groupCount()),String.valueOf(data.nrExtraFields)));
          }
          values[i]=m.group(i + 1);
        }
        ValueMetaInterface valueMeta=data.outputRowMeta.getValueMeta(data.indexOfFirstCaptureGroupField + i);
        ValueMetaInterface conversionValueMeta=data.conversionRowMeta.getValueMeta(data.indexOfFirstCaptureGroupField + i);
        Object convertedValue=valueMeta.convertDataFromString(values[i],conversionValueMeta,meta.getFieldNullIf()[i],meta.getFieldIfNull()[i],meta.getFieldTrimType()[i]);
        outputRow[data.indexOfFirstCaptureGroupField + i]=convertedValue;
      }
    }
    if (log.isRowLevel())     logRowlevel(BaseMessages.getString(PKG,"RegexEval.Log.ReadRow") + " " + getInputRowMeta().getString(row));
    putRow(data.outputRowMeta,outputRow);
  }
 catch (  KettleException e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Log.ErrorInStep"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),outputRow,1,errorMessage,null,"REGEX001");
    }
  }
  return true;
}
