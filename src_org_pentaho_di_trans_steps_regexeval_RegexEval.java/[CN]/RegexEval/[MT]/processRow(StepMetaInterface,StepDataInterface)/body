{
  meta=(RegexEvalMeta)smi;
  data=(RegexEvalData)sdi;
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    if (meta.getMatcher() != null) {
      if (data.indexOfFieldToEvaluate < 0) {
        data.indexOfFieldToEvaluate=getInputRowMeta().indexOfValue(meta.getMatcher());
        if (data.indexOfFieldToEvaluate < 0) {
          logError(Messages.getString("RegexEval.Log.ErrorFindingField") + "[" + meta.getMatcher()+ "]");
          throw new KettleStepException(Messages.getString("RegexEval.Exception.CouldnotFindField",meta.getMatcher()));
        }
        if (environmentSubstitute(meta.getResultfieldname()) == null) {
          logError(Messages.getString("RegexEval.Log.ErrorResultFieldMissing"));
          throw new KettleStepException(Messages.getString("RegexEval.Exception.ErrorResultFieldMissing"));
        }
      }
    }
 else {
      log.logError("Error",Messages.getString("RegexEval.Log.ErrorMatcherMissing"));
      throw new KettleStepException(Messages.getString("RegexEval.Exception.ErrorMatcherMissing"));
    }
  }
  String Fieldvalue=getInputRowMeta().getString(row,data.indexOfFieldToEvaluate);
  Matcher m=data.pattern.matcher(Fieldvalue);
  boolean b=m.matches();
  Object[] outputRowData2=RowDataUtil.addValueData(row,getInputRowMeta().size(),b);
  if (log.isRowLevel())   logRowlevel(Messages.getString("RegexEval.Log.ReadRow") + " " + getInputRowMeta().getString(row));
  putRow(data.outputRowMeta,outputRowData2);
  return true;
}
