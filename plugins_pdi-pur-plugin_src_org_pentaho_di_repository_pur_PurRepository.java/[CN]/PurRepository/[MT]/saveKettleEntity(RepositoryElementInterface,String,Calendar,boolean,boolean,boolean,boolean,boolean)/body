{
  ISharedObjectsTransformer objectTransformer=null;
switch (element.getRepositoryElementType()) {
case TRANSFORMATION:
    objectTransformer=transDelegate;
  break;
case JOB:
objectTransformer=jobDelegate;
break;
default :
throw new KettleException("Unknown RepositoryObjectType. Should be TRANSFORMATION or JOB ");
}
if (saveSharedObjects) {
objectTransformer.saveSharedObjects(element,versionComment);
}
boolean isUpdate=element.getObjectId() != null;
RepositoryFile file=null;
if (isUpdate) {
ObjectId id=element.getObjectId();
file=getPur().getFileById(id.getId());
if (checkLock && file.isLocked() && !unifiedRepositoryLockService.canUnlockFileById(id)) {
throw new KettleException("File is currently locked by another user for editing");
}
if (checkDeleted && isInTrash(file)) {
throw new KettleException("File is in the Trash. Use Save As.");
}
file=new RepositoryFile.Builder(file).title(RepositoryFile.DEFAULT_LOCALE,element.getName()).createdDate(versionDate != null ? versionDate.getTime() : new Date()).description(RepositoryFile.DEFAULT_LOCALE,Const.NVL(element.getDescription(),"")).build();
file=getPur().updateFile(file,new NodeRepositoryFileData(objectTransformer.elementToDataNode(element)),versionComment);
if (checkRename && isRenamed(element,file)) {
renameKettleEntity(element,null,element.getName());
}
}
 else {
file=new RepositoryFile.Builder(checkAndSanitize(element.getName() + element.getRepositoryElementType().getExtension())).versioned(true).title(RepositoryFile.DEFAULT_LOCALE,element.getName()).createdDate(versionDate != null ? versionDate.getTime() : new Date()).description(RepositoryFile.DEFAULT_LOCALE,Const.NVL(element.getDescription(),"")).build();
file=pur.createFile(element.getRepositoryDirectory().getObjectId().getId(),file,new NodeRepositoryFileData(objectTransformer.elementToDataNode(element)),versionComment);
}
ObjectId objectId=new StringObjectId(file.getId().toString());
element.setObjectId(objectId);
if (loadRevision) {
element.setObjectRevision(getObjectRevision(objectId,null));
}
if (element instanceof ChangedFlagInterface) {
((ChangedFlagInterface)element).clearChanged();
}
}
