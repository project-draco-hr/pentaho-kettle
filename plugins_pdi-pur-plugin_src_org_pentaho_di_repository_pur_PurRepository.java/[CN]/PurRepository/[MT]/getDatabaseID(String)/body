{
  try {
    ObjectId objectId=getObjectId(name,null,RepositoryObjectType.DATABASE,false);
    if (objectId == null) {
      List<RepositoryFile> allDatabases=getAllFilesOfType(null,RepositoryObjectType.DATABASE,false);
      String[] existingNames=new String[allDatabases.size()];
      for (int i=0; i < allDatabases.size(); i++) {
        RepositoryFile file=allDatabases.get(i);
        existingNames[i]=file.getTitle();
      }
      int index=DatabaseMeta.indexOfName(existingNames,name);
      if (index != -1) {
        return new StringObjectId(allDatabases.get(index).getId().toString());
      }
    }
    return objectId;
  }
 catch (  Exception e) {
    throw new KettleException("Unable to get ID for database [" + name + "]",e);
  }
}
