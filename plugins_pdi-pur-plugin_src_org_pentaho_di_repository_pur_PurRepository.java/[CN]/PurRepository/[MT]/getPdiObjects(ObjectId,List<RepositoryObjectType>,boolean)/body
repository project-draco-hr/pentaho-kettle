{
  try {
    RepositoryDirectoryInterface repDir=getRootDir().findDirectory(dirId);
    List<RepositoryElementMetaInterface> list=new ArrayList<RepositoryElementMetaInterface>();
    List<RepositoryFile> nonDeletedChildren=getAllFilesOfType(dirId,objectTypes);
    for (    RepositoryFile file : nonDeletedChildren) {
      RepositoryLock lock=unifiedRepositoryLockService.getLock(file);
      RepositoryObjectType objectType=getObjectType(file.getName());
      list.add(new EERepositoryObject(file,repDir,null,objectType,null,lock,false));
    }
    if (includeDeleted) {
      String dirPath=null;
      if (dirId != null) {
        dirPath=pur.getFileById(dirId.getId()).getPath();
      }
      List<RepositoryFile> deletedChildren=getAllDeletedFilesOfType(dirPath,objectTypes);
      for (      RepositoryFile file : deletedChildren) {
        RepositoryLock lock=unifiedRepositoryLockService.getLock(file);
        RepositoryObjectType objectType=getObjectType(file.getName());
        list.add(new EERepositoryObject(file,repDir,null,objectType,null,lock,true));
      }
    }
    return list;
  }
 catch (  Exception e) {
    throw new KettleException("Unable to get list of objects from directory [" + dirId + "]",e);
  }
}
