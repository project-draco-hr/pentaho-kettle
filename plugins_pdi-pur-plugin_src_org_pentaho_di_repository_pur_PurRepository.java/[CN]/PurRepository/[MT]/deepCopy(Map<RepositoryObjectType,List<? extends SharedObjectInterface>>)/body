{
  Map<RepositoryObjectType,List<? extends SharedObjectInterface>> copy=new EnumMap<RepositoryObjectType,List<? extends SharedObjectInterface>>(RepositoryObjectType.class);
  for (  Entry<RepositoryObjectType,List<? extends SharedObjectInterface>> entry : orig.entrySet()) {
    RepositoryObjectType type=entry.getKey();
    List<? extends SharedObjectInterface> value=entry.getValue();
    List<SharedObjectInterface> newValue=new ArrayList<SharedObjectInterface>(value.size());
    for (    SharedObjectInterface obj : value) {
      SharedObjectInterface newValueItem;
      if (obj instanceof DatabaseMeta) {
        DatabaseMeta databaseMeta=(DatabaseMeta)((DatabaseMeta)obj).clone();
        databaseMeta.setObjectId(((DatabaseMeta)obj).getObjectId());
        databaseMeta.clearChanged();
        newValueItem=databaseMeta;
      }
 else       if (obj instanceof SlaveServer) {
        SlaveServer slaveServer=(SlaveServer)((SlaveServer)obj).clone();
        slaveServer.setObjectId(((SlaveServer)obj).getObjectId());
        slaveServer.clearChanged();
        newValueItem=slaveServer;
      }
 else       if (obj instanceof PartitionSchema) {
        PartitionSchema partitionSchema=(PartitionSchema)((PartitionSchema)obj).clone();
        partitionSchema.setObjectId(((PartitionSchema)obj).getObjectId());
        partitionSchema.clearChanged();
        newValueItem=partitionSchema;
      }
 else       if (obj instanceof ClusterSchema) {
        ClusterSchema clusterSchema=((ClusterSchema)obj).clone();
        clusterSchema.setObjectId(((ClusterSchema)obj).getObjectId());
        clusterSchema.clearChanged();
        newValueItem=clusterSchema;
      }
 else {
        throw new KettleException("unknown shared object class");
      }
      newValue.add(newValueItem);
    }
    copy.put(type,newValue);
  }
  return copy;
}
