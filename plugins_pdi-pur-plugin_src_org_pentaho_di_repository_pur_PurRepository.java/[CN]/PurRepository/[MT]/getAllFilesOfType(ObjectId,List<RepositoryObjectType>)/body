{
  Set<Serializable> parentFolderIds=new HashSet<>();
  List<String> filters=new ArrayList<>();
  for (  RepositoryObjectType objectType : objectTypes) {
switch (objectType) {
case DATABASE:
{
        parentFolderIds.add(getDatabaseMetaParentFolderId());
        filters.add("*" + RepositoryObjectType.DATABASE.getExtension());
        break;
      }
case TRANSFORMATION:
{
      parentFolderIds.add(dirId.getId());
      filters.add("*" + RepositoryObjectType.TRANSFORMATION.getExtension());
      break;
    }
case PARTITION_SCHEMA:
{
    parentFolderIds.add(getPartitionSchemaParentFolderId());
    filters.add("*" + RepositoryObjectType.PARTITION_SCHEMA.getExtension());
    break;
  }
case SLAVE_SERVER:
{
  parentFolderIds.add(getSlaveServerParentFolderId());
  filters.add("*" + RepositoryObjectType.SLAVE_SERVER.getExtension());
  break;
}
case CLUSTER_SCHEMA:
{
parentFolderIds.add(getClusterSchemaParentFolderId());
filters.add("*" + RepositoryObjectType.CLUSTER_SCHEMA.getExtension());
break;
}
case JOB:
{
parentFolderIds.add(dirId.getId());
filters.add("*" + RepositoryObjectType.JOB.getExtension());
break;
}
case TRANS_DATA_SERVICE:
{
parentFolderIds.add(dirId.getId());
filters.add("*" + RepositoryObjectType.TRANS_DATA_SERVICE.getExtension());
break;
}
default :
{
throw new UnsupportedOperationException("not implemented");
}
}
}
StringBuilder mergedFilterBuf=new StringBuilder();
int i=0;
for (String filter : filters) {
if (i++ > 0) {
mergedFilterBuf.append(" | ");
}
mergedFilterBuf.append(filter);
}
List<RepositoryFile> allFiles=new ArrayList<>();
for (Serializable parentFolderId : parentFolderIds) {
allFiles.addAll(pur.getChildren(parentFolderId,mergedFilterBuf.toString()));
}
Collections.sort(allFiles);
return allFiles;
}
