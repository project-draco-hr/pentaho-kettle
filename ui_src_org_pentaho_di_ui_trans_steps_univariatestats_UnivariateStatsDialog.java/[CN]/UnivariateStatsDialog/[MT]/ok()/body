{
  if (Utils.isEmpty(m_wStepname.getText())) {
    return;
  }
  stepname=m_wStepname.getText();
  int nrNonEmptyFields=m_wFields.nrNonEmpty();
  m_currentMeta.allocate(nrNonEmptyFields);
  for (int i=0; i < nrNonEmptyFields; i++) {
    TableItem item=m_wFields.getNonEmpty(i);
    String inputFieldName=item.getText(1);
    boolean n=item.getText(2).equalsIgnoreCase("True");
    boolean mean=item.getText(3).equalsIgnoreCase("True");
    boolean stdDev=item.getText(4).equalsIgnoreCase("True");
    boolean min=item.getText(5).equalsIgnoreCase("True");
    boolean max=item.getText(6).equalsIgnoreCase("True");
    boolean median=item.getText(7).equalsIgnoreCase("True");
    String percentileS=item.getText(8);
    double percentile=-1;
    if (percentileS.length() > 0) {
      try {
        percentile=Double.parseDouble(percentileS);
        if (percentile < 0) {
          percentile=-1;
        }
 else         if (percentile > 1 && percentile <= 100) {
          percentile/=100;
        }
      }
 catch (      Exception ex) {
      }
    }
    boolean interpolate=item.getText(9).equalsIgnoreCase("True");
    m_currentMeta.getInputFieldMetaFunctions()[i]=new UnivariateStatsMetaFunction(inputFieldName,n,mean,stdDev,min,max,median,percentile,interpolate);
  }
  if (!m_originalMeta.equals(m_currentMeta)) {
    m_currentMeta.setChanged();
    changed=m_currentMeta.hasChanged();
  }
  dispose();
}
