{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    databaseMeta=Const.findDatabase(databases,id_connection);
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tablename=rep.getStepAttributeString(id_step,"table");
    commitSize=(int)rep.getStepAttributeInteger(id_step,"commit");
    truncateTable=rep.getStepAttributeBoolean(id_step,"truncate");
    ignoreErrors=rep.getStepAttributeBoolean(id_step,"ignore_errors");
    useBatchUpdate=rep.getStepAttributeBoolean(id_step,"use_batch");
    partitioningEnabled=rep.getStepAttributeBoolean(id_step,"partitioning_enabled");
    partitioningField=rep.getStepAttributeString(id_step,"partitioning_field");
    partitioningDaily=rep.getStepAttributeBoolean(id_step,"partitioning_daily");
    partitioningMonthly=rep.getStepAttributeBoolean(id_step,"partitioning_monthly");
    tableNameInField=rep.getStepAttributeBoolean(id_step,"tablename_in_field");
    tableNameField=rep.getStepAttributeString(id_step,"tablename_field");
    tableNameInTable=rep.getStepAttributeBoolean(id_step,"tablename_in_table");
    returningGeneratedKeys=rep.getStepAttributeBoolean(id_step,"return_keys");
    generatedKeyField=rep.getStepAttributeString(id_step,"return_field");
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
