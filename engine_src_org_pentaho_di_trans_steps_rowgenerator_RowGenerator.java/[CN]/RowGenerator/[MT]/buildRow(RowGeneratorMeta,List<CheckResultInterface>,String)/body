{
  RowMetaInterface rowMeta=new RowMeta();
  Object[] rowData=RowDataUtil.allocateRowData(meta.getFieldName().length + 2);
  int index=0;
  if (meta.isNeverEnding()) {
    if (!Const.isEmpty(meta.getRowTimeField())) {
      rowMeta.addValueMeta(new ValueMetaDate(meta.getRowTimeField()));
      rowData[index++]=null;
    }
    if (!Const.isEmpty(meta.getLastTimeField())) {
      rowMeta.addValueMeta(new ValueMetaDate(meta.getLastTimeField()));
      rowData[index++]=null;
    }
  }
  for (int i=0; i < meta.getFieldName().length; i++) {
    int valtype=ValueMeta.getType(meta.getFieldType()[i]);
    if (meta.getFieldName()[i] != null) {
      ValueMetaInterface valueMeta=ValueMetaFactory.createValueMeta(meta.getFieldName()[i],valtype);
      valueMeta.setLength(meta.getFieldLength()[i]);
      valueMeta.setPrecision(meta.getFieldPrecision()[i]);
      valueMeta.setConversionMask(meta.getFieldFormat()[i]);
      valueMeta.setCurrencySymbol(meta.getCurrency()[i]);
      valueMeta.setGroupingSymbol(meta.getGroup()[i]);
      valueMeta.setDecimalSymbol(meta.getDecimal()[i]);
      valueMeta.setOrigin(origin);
      ValueMetaInterface stringMeta=ValueMetaFactory.cloneValueMeta(valueMeta,ValueMetaInterface.TYPE_STRING);
      if (meta.isSetEmptyString() != null && meta.isSetEmptyString()[i]) {
        rowData[index]=StringUtil.EMPTY_STRING;
      }
 else {
        String stringValue=meta.getValue()[i];
        if (Const.isEmpty(stringValue)) {
          rowData[index]=null;
          if (valueMeta.getType() == ValueMetaInterface.TYPE_NONE) {
            String message=BaseMessages.getString(PKG,"RowGenerator.CheckResult.SpecifyTypeError",valueMeta.getName(),stringValue);
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
          }
        }
 else {
          try {
            rowData[index]=valueMeta.convertData(stringMeta,stringValue);
          }
 catch (          KettleValueException e) {
switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
              String message=BaseMessages.getString(PKG,"RowGenerator.BuildRow.Error.Parsing.Number",valueMeta.getName(),stringValue,e.toString());
            remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
          break;
case ValueMetaInterface.TYPE_DATE:
        message=BaseMessages.getString(PKG,"RowGenerator.BuildRow.Error.Parsing.Date",valueMeta.getName(),stringValue,e.toString());
      remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
    break;
case ValueMetaInterface.TYPE_INTEGER:
  message=BaseMessages.getString(PKG,"RowGenerator.BuildRow.Error.Parsing.Integer",valueMeta.getName(),stringValue,e.toString());
remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
message=BaseMessages.getString(PKG,"RowGenerator.BuildRow.Error.Parsing.BigNumber",valueMeta.getName(),stringValue,e.toString());
remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
break;
case ValueMetaInterface.TYPE_TIMESTAMP:
message=BaseMessages.getString(PKG,"RowGenerator.BuildRow.Error.Parsing.Timestamp",valueMeta.getName(),stringValue,e.toString());
remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
break;
default :
message=BaseMessages.getString(PKG,"RowGenerator.CheckResult.SpecifyTypeError",valueMeta.getName(),stringValue);
remarks.add(new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message,null));
break;
}
}
}
}
rowMeta.addValueMeta(valueMeta);
index++;
}
}
return new RowMetaAndData(rowMeta,rowData);
}
