{
  String null_value=nullIf;
  if (null_value == null) {
switch (convertMeta.getType()) {
case Value.VALUE_TYPE_BOOLEAN:
      null_value=Const.NULL_BOOLEAN;
    break;
case Value.VALUE_TYPE_STRING:
  null_value=Const.NULL_STRING;
break;
case Value.VALUE_TYPE_BIGNUMBER:
null_value=Const.NULL_BIGNUMBER;
break;
case Value.VALUE_TYPE_NUMBER:
null_value=Const.NULL_NUMBER;
break;
case Value.VALUE_TYPE_INTEGER:
null_value=Const.NULL_INTEGER;
break;
case Value.VALUE_TYPE_DATE:
null_value=Const.NULL_DATE;
break;
case Value.VALUE_TYPE_BINARY:
null_value=Const.NULL_BINARY;
break;
default :
null_value=Const.NULL_NONE;
break;
}
}
if (!Const.isEmpty(ifNull)) {
if (Const.isEmpty(pol) || pol.equalsIgnoreCase(Const.rightPad(new StringBuffer(null_value),pol.length()))) {
pol=ifNull;
}
}
if (Const.isEmpty(pol)) {
return null;
}
 else {
if (!Const.isEmpty(null_value)) {
if (null_value.length() <= pol.length()) {
if (pol.equalsIgnoreCase(Const.rightPad(new StringBuffer(null_value),pol.length()))) {
return null;
}
}
}
 else {
if (Const.onlySpaces(pol)) {
return null;
}
}
}
switch (trim_type) {
case ValueMetaInterface.TRIM_TYPE_LEFT:
{
StringBuffer strpol=new StringBuffer(pol);
while (strpol.length() > 0 && strpol.charAt(0) == ' ') strpol.deleteCharAt(0);
pol=strpol.toString();
}
break;
case ValueMetaInterface.TRIM_TYPE_RIGHT:
{
StringBuffer strpol=new StringBuffer(pol);
while (strpol.length() > 0 && strpol.charAt(strpol.length() - 1) == ' ') strpol.deleteCharAt(strpol.length() - 1);
pol=strpol.toString();
}
break;
case ValueMetaInterface.TRIM_TYPE_BOTH:
StringBuffer strpol=new StringBuffer(pol);
{
while (strpol.length() > 0 && strpol.charAt(0) == ' ') strpol.deleteCharAt(0);
while (strpol.length() > 0 && strpol.charAt(strpol.length() - 1) == ' ') strpol.deleteCharAt(strpol.length() - 1);
pol=strpol.toString();
}
break;
default :
break;
}
return convertData(convertMeta,pol);
}
