{
  StringBuffer xml=new StringBuffer();
  xml.append(XMLHandler.openTag(XML_META_TAG));
  xml.append(XMLHandler.addTagValue("type",getTypeDesc()));
  xml.append(XMLHandler.addTagValue("storagetype",getStorageTypeCode(getStorageType())));
switch (storageType) {
case STORAGE_TYPE_INDEXED:
{
      xml.append(XMLHandler.openTag("index"));
      if (index != null) {
        for (int i=0; i < index.length; i++) {
          try {
switch (type) {
case TYPE_STRING:
              xml.append(XMLHandler.addTagValue("value",(String)index[i]));
            break;
case TYPE_NUMBER:
          xml.append(XMLHandler.addTagValue("value",(Double)index[i]));
        break;
case TYPE_INTEGER:
      xml.append(XMLHandler.addTagValue("value",(Long)index[i]));
    break;
case TYPE_DATE:
  xml.append(XMLHandler.addTagValue("value",(Date)index[i]));
break;
case TYPE_BIGNUMBER:
xml.append(XMLHandler.addTagValue("value",(BigDecimal)index[i]));
break;
case TYPE_BOOLEAN:
xml.append(XMLHandler.addTagValue("value",(Boolean)index[i]));
break;
case TYPE_BINARY:
xml.append(XMLHandler.addTagValue("value",(byte[])index[i]));
break;
default :
throw new IOException(toString() + " : Unable to serialize indexe storage type to XML for data type " + getType());
}
}
 catch (ClassCastException e) {
throw new RuntimeException(toString() + " : There was a data type error: the data type of " + index[i].getClass().getName()+ " object ["+ index[i]+ "] does not correspond to value meta ["+ toStringMeta()+ "]");
}
}
}
xml.append(XMLHandler.closeTag("index"));
}
break;
case STORAGE_TYPE_BINARY_STRING:
{
if (storageMetadata != null) {
xml.append(XMLHandler.openTag("storage-meta"));
xml.append(storageMetadata.getMetaXML());
xml.append(XMLHandler.closeTag("storage-meta"));
}
}
break;
default :
break;
}
xml.append(XMLHandler.addTagValue("name",name));
xml.append(XMLHandler.addTagValue("length",length));
xml.append(XMLHandler.addTagValue("precision",precision));
xml.append(XMLHandler.addTagValue("origin",origin));
xml.append(XMLHandler.addTagValue("comments",comments));
xml.append(XMLHandler.addTagValue("conversion_Mask",conversionMask));
xml.append(XMLHandler.addTagValue("decimal_symbol",decimalSymbol));
xml.append(XMLHandler.addTagValue("grouping_symbol",groupingSymbol));
xml.append(XMLHandler.addTagValue("currency_symbol",currencySymbol));
xml.append(XMLHandler.addTagValue("trim_type",getTrimTypeCode(trimType)));
xml.append(XMLHandler.addTagValue("case_insensitive",caseInsensitive));
xml.append(XMLHandler.addTagValue("sort_descending",sortedDescending));
xml.append(XMLHandler.addTagValue("output_padding",outputPaddingEnabled));
xml.append(XMLHandler.addTagValue("date_format_lenient",dateFormatLenient));
xml.append(XMLHandler.addTagValue("date_format_locale",dateFormatLocale.toString()));
xml.append(XMLHandler.closeTag(XML_META_TAG));
return xml.toString();
}
