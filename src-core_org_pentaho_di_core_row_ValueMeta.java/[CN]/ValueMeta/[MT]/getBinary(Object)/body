{
  if (object == null) {
    return null;
  }
switch (type) {
case TYPE_BINARY:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
      return (byte[])object;
case STORAGE_TYPE_BINARY_STRING:
    return (byte[])object;
case STORAGE_TYPE_INDEXED:
  return (byte[])index[((Integer)object).intValue()];
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_DATE:
throw new KettleValueException(toString() + " : I don't know how to convert a date to binary.");
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
return convertStringToBinaryString((String)object);
case STORAGE_TYPE_BINARY_STRING:
return (byte[])object;
case STORAGE_TYPE_INDEXED:
return convertStringToBinaryString((String)index[((Integer)object).intValue()]);
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
case TYPE_NUMBER:
throw new KettleValueException(toString() + " : I don't know how to convert a number to binary.");
case TYPE_INTEGER:
throw new KettleValueException(toString() + " : I don't know how to convert an integer to binary.");
case TYPE_BIGNUMBER:
throw new KettleValueException(toString() + " : I don't know how to convert a bignumber to binary.");
case TYPE_BOOLEAN:
throw new KettleValueException(toString() + " : I don't know how to convert a boolean to binary.");
case TYPE_SERIALIZABLE:
throw new KettleValueException(toString() + " : I don't know how to convert a serializable to binary.");
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
}
