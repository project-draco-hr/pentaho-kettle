{
  try {
    String string;
switch (type) {
case TYPE_STRING:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
        string=object == null ? null : object.toString();
      break;
case STORAGE_TYPE_BINARY_STRING:
    string=(String)convertBinaryStringToNativeType((byte[])object);
  break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : (String)index[((Integer)object).intValue()];
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
if (string != null) string=trim(string);
break;
case TYPE_DATE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertDateToString((Date)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertDateToString((Date)convertBinaryStringToNativeType((byte[])object));
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertDateToString((Date)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_NUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertNumberToString((Double)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertNumberToString((Double)convertBinaryStringToNativeType((byte[])object));
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertNumberToString((Double)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_INTEGER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertIntegerToString((Long)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertIntegerToString((Long)convertBinaryStringToNativeType((byte[])object));
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertIntegerToString((Long)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_BIGNUMBER:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBigNumberToString((BigDecimal)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBigNumberToString((BigDecimal)convertBinaryStringToNativeType((byte[])object));
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertBigNumberToString((BigDecimal)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_BOOLEAN:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBooleanToString((Boolean)object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBooleanToString((Boolean)convertBinaryStringToNativeType((byte[])object));
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertBooleanToString((Boolean)index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_BINARY:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : convertBinaryStringToString((byte[])index[((Integer)object).intValue()]);
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
case TYPE_SERIALIZABLE:
switch (storageType) {
case STORAGE_TYPE_NORMAL:
string=object.toString();
break;
case STORAGE_TYPE_BINARY_STRING:
string=convertBinaryStringToString((byte[])object);
break;
case STORAGE_TYPE_INDEXED:
string=object == null ? null : index[((Integer)object).intValue()].toString();
break;
default :
throw new KettleValueException(toString() + " : Unknown storage type " + storageType+ " specified.");
}
break;
default :
throw new KettleValueException(toString() + " : Unknown type " + type+ " specified.");
}
if (isOutputPaddingEnabled() && getLength() > 0) {
string=ValueDataUtil.rightPad(string,getLength());
}
return string;
}
 catch (ClassCastException e) {
throw new KettleValueException(toString() + " : There was a data type error: the data type of " + object.getClass().getName()+ " object ["+ object+ "] does not correspond to value meta ["+ toStringMeta()+ "]");
}
}
