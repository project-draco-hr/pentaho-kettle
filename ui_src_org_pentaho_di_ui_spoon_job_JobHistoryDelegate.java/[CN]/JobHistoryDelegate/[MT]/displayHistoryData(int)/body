{
  JobHistoryLogTab model=models[index];
  ColumnInfo[] colinf=model.logDisplayTableView.getColumns();
  if (model.logDisplayTableView == null || model.logDisplayTableView.isDisposed()) {
    return;
  }
  int selectionIndex=model.logDisplayTableView.getSelectionIndex();
  model.logDisplayTableView.table.clearAll();
  List<Object[]> rows=model.rows;
  if (rows != null && rows.size() > 0) {
    for (    Object[] rowData : rows) {
      TableItem item=new TableItem(model.logDisplayTableView.table,SWT.NONE);
      for (int c=0; c < colinf.length; c++) {
        ColumnInfo column=colinf[c];
        ValueMetaInterface valueMeta=column.getValueMeta();
        String string=null;
        try {
          string=valueMeta.getString(rowData[c]);
        }
 catch (        KettleValueException e) {
          log.logError("history data conversion issue",e);
        }
        item.setText(c + 1,Const.NVL(string,""));
      }
      Long errors=null;
      LogStatus status=null;
      LogTableField errorsField=model.logTable.getErrorsField();
      if (errorsField != null) {
        int index1=model.logTableFields.indexOf(errorsField);
        try {
          errors=colinf[index1].getValueMeta().getInteger(rowData[index1]);
        }
 catch (        KettleValueException e) {
          log.logError("history data conversion issue",e);
        }
      }
      LogTableField statusField=model.logTable.getStatusField();
      if (statusField != null) {
        int index1=model.logTableFields.indexOf(statusField);
        String statusString=null;
        try {
          statusString=colinf[index1].getValueMeta().getString(rowData[index1]);
        }
 catch (        KettleValueException e) {
          log.logError("history data conversion issue",e);
        }
        if (statusString != null) {
          status=LogStatus.findStatus(statusString);
        }
      }
      if (errors != null && errors > 0L) {
        item.setBackground(GUIResource.getInstance().getColorRed());
      }
 else       if (status != null && LogStatus.STOP.equals(status)) {
        item.setBackground(GUIResource.getInstance().getColorYellow());
      }
    }
    model.logDisplayTableView.removeEmptyRows();
    model.logDisplayTableView.setRowNums();
    model.logDisplayTableView.optWidth(true);
  }
 else {
    model.logDisplayTableView.clearAll(false);
  }
  if (selectionIndex >= 0 && selectionIndex < model.logDisplayTableView.getItemCount()) {
    model.logDisplayTableView.table.select(selectionIndex);
    showLogEntry();
  }
}
