{
  final int BATCH_SIZE=Props.getInstance().getLinesInHistoryFetchSize();
  boolean moreRows=false;
  JobHistoryLogTab model=models[index];
  LogTableInterface logTable=model.logTable;
  if (jobMeta != null && !Utils.isEmpty(jobMeta.getName()) && logTable.isDefined()) {
    Database database=null;
    try {
      DatabaseMeta logConnection=logTable.getDatabaseMeta();
      database=new Database(loggingObject,logConnection);
      database.shareVariablesWith(jobMeta);
      database.connect();
      int queryLimit=0;
switch (mode) {
case ALL:
        model.batchCount=0;
      queryLimit=Props.getInstance().getMaxNrLinesInHistory();
    break;
case NEXT_BATCH:
  model.batchCount++;
queryLimit=BATCH_SIZE * model.batchCount;
break;
case INITIAL:
model.batchCount=1;
queryLimit=BATCH_SIZE;
break;
default :
break;
}
database.setQueryLimit(queryLimit);
String schemaTable=logTable.getQuotedSchemaTableCombination();
StringBuilder sql=new StringBuilder("SELECT ");
boolean first=true;
for (LogTableField field : logTable.getFields()) {
if (field.isEnabled() && field.isVisible()) {
if (!first) {
sql.append(", ");
}
first=false;
sql.append(logConnection.quoteField(field.getFieldName()));
}
}
sql.append(" FROM ").append(schemaTable);
RowMetaAndData params=new RowMetaAndData();
LogTableField nameField=logTable.getNameField();
LogTableField keyField=logTable.getKeyField();
if (nameField != null) {
sql.append(" WHERE ").append(logConnection.quoteField(nameField.getFieldName())).append(" LIKE ?");
params.addValue(new ValueMetaString("transname_literal"),jobMeta.getName());
}
if (keyField != null && keyField.isEnabled()) {
sql.append(" ORDER BY ").append(logConnection.quoteField(keyField.getFieldName())).append(" DESC");
}
ResultSet resultSet=database.openQuery(sql.toString(),params.getRowMeta(),params.getData());
List<Object[]> rows=new ArrayList<Object[]>();
Object[] rowData=database.getRow(resultSet);
int rowsFetched=1;
while (rowData != null) {
rows.add(rowData);
rowData=database.getRow(resultSet);
rowsFetched++;
}
if (rowsFetched >= queryLimit) {
moreRows=true;
}
database.closeQuery(resultSet);
models[index].rows=rows;
}
 catch (Exception e) {
LogChannel.GENERAL.logError("Unable to get rows of data from logging table " + models[index].logTable,e);
models[index].rows=new ArrayList<Object[]>();
}
 finally {
if (database != null) {
database.disconnect();
}
}
}
 else {
models[index].rows=new ArrayList<Object[]>();
}
return moreRows;
}
