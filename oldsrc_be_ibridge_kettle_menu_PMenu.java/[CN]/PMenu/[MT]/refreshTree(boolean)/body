{
  if (!schema.hasChanged() && !complete)   return;
  int idx;
  TreeItem ti[];
  if (schema.haveConnectionsChanged() || complete) {
    ti=tiConn.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiConn.getItems();
    }
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      DatabaseMeta inf=schema.findConnection(str);
      if (inf != null)       idx=schema.indexOfConnection(inf);
 else       idx=-1;
      if (idx < 0 || idx > i)       ti[i].dispose();
    }
    ti=tiConn.getItems();
    int j=0;
    for (int i=0; i < schema.nrConnections(); i++) {
      DatabaseMeta inf=schema.getConnection(i);
      String con_name=inf.getName();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!con_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiConn,j);
        newitem.setText(inf.getName());
        newitem.setForeground(GUIResource.getInstance().getColorBlack());
        newitem.setImage(GUIResource.getInstance().getImageConnection());
        j++;
        ti=tiConn.getItems();
      }
 else {
        j++;
      }
    }
  }
  if (schema.haveTablesChanged() || complete) {
    ti=tiStep.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiStep.getItems();
    }
    log.logDebug(toString(),"check steps");
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      log.logDebug(toString(),"  check step tree item #" + i + " : ["+ str+ "]");
      TableMeta inf=schema.findTable(str);
      if (inf != null)       idx=schema.indexOfTable(inf);
 else       idx=-1;
      if (idx < 0 || idx > i) {
        log.logDebug(toString(),"     remove tree item [" + str + "]");
        ti[i].dispose();
      }
    }
    ti=tiStep.getItems();
    int j=0;
    for (int i=0; i < schema.nrTables(); i++) {
      TableMeta inf=schema.getTable(i);
      String step_name=inf.getName();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!step_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiStep,j);
        newitem.setText(inf.getName());
        newitem.setImage(GUIResource.getInstance().getImageBol());
        j++;
        ti=tiStep.getItems();
      }
 else {
        j++;
      }
    }
    for (int i=0; i < ti.length; i++) {
      Color col=ti[i].getForeground();
      Color newcol;
      if (schema.isTableUsedInRelationships(ti[i].getText())) {
        newcol=GUIResource.getInstance().getColorBlack();
      }
 else {
        newcol=GUIResource.getInstance().getColorGray();
      }
      if (!newcol.equals(col))       ti[i].setForeground(newcol);
    }
    tiStep.setExpanded(true);
  }
  if (schema.haveRelationsipsChanged() || complete) {
    ti=tiTrns.getItems();
    if (complete) {
      for (int i=0; i < ti.length; i++)       ti[i].dispose();
      ti=tiTrns.getItems();
    }
    for (int i=0; i < ti.length; i++) {
      String str=ti[i].getText();
      RelationshipMeta inf=schema.findRelationship(str);
      if (inf != null)       idx=schema.indexOfRelationship(inf);
 else       idx=-1;
      if (idx < 0 || idx > i)       ti[i].dispose();
    }
    ti=tiTrns.getItems();
    int j=0;
    for (int i=0; i < schema.nrRelationships(); i++) {
      RelationshipMeta inf=schema.getRelationship(i);
      String trans_name=inf.toString();
      String ti_name="";
      if (j < ti.length)       ti_name=ti[j].getText();
      if (!trans_name.equalsIgnoreCase(ti_name)) {
        TreeItem newitem=new TreeItem(tiTrns,j);
        newitem.setText(inf.toString());
        newitem.setForeground(GUIResource.getInstance().getColorBlack());
        newitem.setImage(GUIResource.getInstance().getImageHop());
        j++;
        ti=tiTrns.getItems();
      }
 else {
        j++;
      }
    }
  }
  tCSH.setFocus();
  setShellText();
}
