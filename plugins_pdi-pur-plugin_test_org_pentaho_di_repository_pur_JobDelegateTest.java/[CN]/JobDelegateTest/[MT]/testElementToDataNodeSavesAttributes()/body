{
  JobMeta mockJobMeta=mock(JobMeta.class);
  IUnifiedRepository mockUnifiedRepository=mock(IUnifiedRepository.class);
  JobDelegate jobDelegate=new JobDelegate(mockPurRepository,mockUnifiedRepository);
  JobLogTable mockJobLogTable=mock(JobLogTable.class);
  JobEntryCopy mockJobEntryCopy=mock(JobEntryCopy.class);
  Map<String,Map<String,String>> attributes=new HashMap<String,Map<String,String>>();
  Map<String,String> group=new HashMap<String,String>();
  final String mockGroup="MOCK_GROUP";
  final String mockProperty="MOCK_PROPERTY";
  final String mockValue="MOCK_VALUE";
  group.put(mockProperty,mockValue);
  attributes.put(mockGroup,group);
  JobEntryBaseAndInterface mockJobEntry=mock(JobEntryBaseAndInterface.class);
  when(mockJobEntry.getAttributesMap()).thenReturn(attributes);
  when(mockJobMeta.listParameters()).thenReturn(new String[]{});
  when(mockJobMeta.getJobLogTable()).thenReturn(mockJobLogTable);
  when(mockJobMeta.nrJobEntries()).thenReturn(1);
  when(mockJobMeta.getJobEntry(0)).thenReturn(mockJobEntryCopy);
  when(mockJobEntryCopy.getName()).thenReturn("MOCK_NAME");
  when(mockJobEntryCopy.getLocation()).thenReturn(new Point(0,0));
  when(mockJobEntryCopy.getEntry()).thenReturn(mockJobEntry);
  DataNode dataNode=jobDelegate.elementToDataNode(mockJobMeta);
  DataNode groups=dataNode.getNode("entries").getNodes().iterator().next().getNode(AttributesMapUtil.NODE_ATTRIBUTE_GROUPS);
  DataNode mockGroupNode=groups.getNode(mockGroup);
  assertEquals(mockValue,mockGroupNode.getProperty(mockProperty).getString());
}
