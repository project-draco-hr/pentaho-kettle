{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    move_empty_folders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"move_empty_folders"));
    arg_from_previous="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    include_subfolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"include_subfolders"));
    add_result_filesname="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_result_filesname"));
    destination_is_a_file="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"destination_is_a_file"));
    create_destination_folder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"create_destination_folder"));
    IgnoreRestOfFiles="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"IgnoreRestOfFiles"));
    add_date="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_date"));
    add_time="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_time"));
    SpecifyFormat="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"SpecifyFormat"));
    AddDateBeforeExtension="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"AddDateBeforeExtension"));
    DoNotKeepFolderStructure="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"DoNotKeepFolderStructure"));
    date_time_format=XMLHandler.getTagValue(entrynode,"date_time_format");
    nr_errors_less_than=XMLHandler.getTagValue(entrynode,"nr_errors_less_than");
    success_condition=XMLHandler.getTagValue(entrynode,"success_condition");
    iffileexists=XMLHandler.getTagValue(entrynode,"iffileexists");
    destinationFolder=XMLHandler.getTagValue(entrynode,"destinationFolder");
    ifmovedfileexists=XMLHandler.getTagValue(entrynode,"ifmovedfileexists");
    moved_date_time_format=XMLHandler.getTagValue(entrynode,"moved_date_time_format");
    AddMovedDateBeforeExtension="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"AddMovedDateBeforeExtension"));
    add_moved_date="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_moved_date"));
    add_moved_time="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_moved_time"));
    SpecifyMoveFormat="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"SpecifyMoveFormat"));
    Node fields=XMLHandler.getSubNode(entrynode,"fields");
    int nrFields=XMLHandler.countNodes(fields,"field");
    source_filefolder=new String[nrFields];
    destination_filefolder=new String[nrFields];
    wildcard=new String[nrFields];
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      source_filefolder[i]=XMLHandler.getTagValue(fnode,"source_filefolder");
      destination_filefolder[i]=XMLHandler.getTagValue(fnode,"destination_filefolder");
      wildcard[i]=XMLHandler.getTagValue(fnode,"wildcard");
    }
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(Messages.getString("JobMoveFiles.Error.Exception.UnableLoadXML"),xe);
  }
}
