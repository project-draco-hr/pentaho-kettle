{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  List<RowMetaAndData> rows=result.getRows();
  RowMetaAndData resultRow=null;
  result.setEntryNr(1);
  result.setResult(false);
  NrErrors=0;
  NrSuccess=0;
  successConditionBroken=false;
  successConditionBrokenExit=false;
  limitFiles=Const.toInt(environmentSubstitute(getNrErrorsLessThan()),10);
  if (simulate) {
    if (log.isDetailed())     log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.SimulationOn"));
  }
  if (include_subfolders) {
    if (log.isDetailed())     log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.IncludeSubFoldersOn"));
  }
  String MoveToFolder=environmentSubstitute(destinationFolder);
  String vsourcefilefolder[]=source_filefolder;
  String vdestinationfilefolder[]=destination_filefolder;
  String vwildcard[]=wildcard;
  if (iffileexists.equals("move_file")) {
    if (Const.isEmpty(MoveToFolder)) {
      log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.Error.MoveToFolderMissing"));
      return result;
    }
    FileObject folder=null;
    try {
      folder=KettleVFS.getFileObject(MoveToFolder);
      if (!folder.exists()) {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.Error.FolderMissing",MoveToFolder));
        if (create_move_to_folder) {
          folder.createFolder();
        }
 else {
          log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.Error.FolderMissing",MoveToFolder));
          return result;
        }
      }
      if (!folder.getType().equals(FileType.FOLDER)) {
        log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.Error.NotFolder",MoveToFolder));
        return result;
      }
    }
 catch (    Exception e) {
      log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.Error.GettingMoveToFolder",MoveToFolder,e.getMessage()));
      return result;
    }
 finally {
      if (folder != null) {
        try {
          folder.close();
        }
 catch (        IOException ex) {
        }
        ;
      }
    }
  }
  if (arg_from_previous) {
    if (log.isDetailed())     log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.ArgFromPrevious.Found",(rows != null ? rows.size() : 0) + ""));
  }
  if (arg_from_previous && rows != null) {
    for (int iteration=0; iteration < rows.size() && !parentJob.isStopped(); iteration++) {
      if (successConditionBroken) {
        if (!successConditionBrokenExit) {
          log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Error.SuccessConditionbroken","" + NrErrors));
          successConditionBrokenExit=true;
        }
        result.setNrErrors(NrErrors);
        displayResults(log);
        return result;
      }
      resultRow=rows.get(iteration);
      String vsourcefilefolder_previous=resultRow.getString(0,null);
      String vdestinationfilefolder_previous=resultRow.getString(1,null);
      String vwildcard_previous=resultRow.getString(2,null);
      if (!Const.isEmpty(vsourcefilefolder_previous) && !Const.isEmpty(vdestinationfilefolder_previous)) {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.ProcessingRow",vsourcefilefolder_previous,vdestinationfilefolder_previous,vwildcard_previous));
        if (!ProcessFileFolder(vsourcefilefolder_previous,vdestinationfilefolder_previous,vwildcard_previous,parentJob,result,MoveToFolder,log)) {
          updateErrors();
        }
      }
 else {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.IgnoringRow",vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration]));
      }
    }
  }
 else   if (vsourcefilefolder != null && vdestinationfilefolder != null) {
    for (int i=0; i < vsourcefilefolder.length && !parentJob.isStopped(); i++) {
      if (successConditionBroken) {
        if (!successConditionBrokenExit) {
          log.logError(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Error.SuccessConditionbroken","" + NrErrors));
          successConditionBrokenExit=true;
        }
        result.setEntryNr(NrErrors);
        displayResults(log);
        return result;
      }
      if (!Const.isEmpty(vsourcefilefolder[i]) && !Const.isEmpty(vdestinationfilefolder[i])) {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.ProcessingRow",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));
        if (!ProcessFileFolder(vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i],parentJob,result,MoveToFolder,log)) {
          updateErrors();
        }
      }
 else {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"JobMoveFiles.Log.IgnoringRow",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));
      }
    }
  }
  result.setNrErrors(NrErrors);
  result.setNrLinesWritten(NrSuccess);
  if (getSuccessStatus())   result.setResult(true);
  displayResults(log);
  return result;
}
