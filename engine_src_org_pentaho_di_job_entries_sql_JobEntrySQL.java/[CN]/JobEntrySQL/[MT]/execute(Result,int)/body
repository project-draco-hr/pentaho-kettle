{
  Result result=previousResult;
  if (connection != null) {
    Database db=new Database(this,connection);
    FileObject SQLfile=null;
    db.shareVariablesWith(this);
    try {
      String mySQL=null;
      db.connect(parentJob.getTransactionId(),null);
      if (sqlfromfile) {
        if (sqlfilename == null) {
          throw new KettleDatabaseException(BaseMessages.getString(PKG,"JobSQL.NoSQLFileSpecified"));
        }
        try {
          String realfilename=environmentSubstitute(sqlfilename);
          SQLfile=KettleVFS.getFileObject(realfilename,this);
          if (!SQLfile.exists()) {
            logError(BaseMessages.getString(PKG,"JobSQL.SQLFileNotExist",realfilename));
            throw new KettleDatabaseException(BaseMessages.getString(PKG,"JobSQL.SQLFileNotExist",realfilename));
          }
          if (isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobSQL.SQLFileExists",realfilename));
          }
          InputStream IS=KettleVFS.getInputStream(SQLfile);
          try {
            InputStreamReader BIS=new InputStreamReader(new BufferedInputStream(IS,500));
            StringBuilder lineSB=new StringBuilder(256);
            lineSB.setLength(0);
            BufferedReader buff=new BufferedReader(BIS);
            String sLine=null;
            mySQL=Const.CR;
            while ((sLine=buff.readLine()) != null) {
              if (Const.isEmpty(sLine)) {
                mySQL=mySQL + Const.CR;
              }
 else {
                mySQL=mySQL + Const.CR + sLine;
              }
            }
          }
  finally {
            IS.close();
          }
        }
 catch (        Exception e) {
          throw new KettleDatabaseException(BaseMessages.getString(PKG,"JobSQL.ErrorRunningSQLfromFile"),e);
        }
      }
 else {
        mySQL=sql;
      }
      if (!Const.isEmpty(mySQL)) {
        if (useVariableSubstitution) {
          mySQL=environmentSubstitute(mySQL);
        }
        if (isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"JobSQL.Log.SQlStatement",mySQL));
        }
        if (sendOneStatement) {
          db.execStatement(mySQL);
        }
 else {
          db.execStatements(mySQL);
        }
      }
    }
 catch (    KettleDatabaseException je) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobSQL.ErrorRunJobEntry",je.getMessage()));
    }
 finally {
      db.disconnect();
      if (SQLfile != null) {
        try {
          SQLfile.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
 else {
    result.setNrErrors(1);
    logError(BaseMessages.getString(PKG,"JobSQL.NoDatabaseConnection"));
  }
  if (result.getNrErrors() == 0) {
    result.setResult(true);
  }
 else {
    result.setResult(false);
  }
  return result;
}
