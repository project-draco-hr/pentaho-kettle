{
  DatabaseMeta ci=connection;
  if (ci == null) {
    return;
  }
  StringBuffer message=new StringBuffer();
  Database db=new Database(loggingObject,ci);
  boolean first=true;
  PartitionDatabaseMeta[] partitioningInformation=ci.getPartitioningInformation();
  for (int partitionNr=0; first || (partitioningInformation != null && partitionNr < partitioningInformation.length); partitionNr++) {
    first=false;
    String partitionId=null;
    if (partitioningInformation != null && partitioningInformation.length > 0) {
      partitionId=partitioningInformation[partitionNr].getPartitionId();
    }
    try {
      db.connect(partitionId);
      String sqlScript=Const.isEmpty(wScript.getSelectionText()) ? wScript.getText() : wScript.getSelectionText();
      statements=ci.getDatabaseInterface().getSqlScriptStatements(sqlScript + Const.CR);
      int nrstats=0;
      for (      SqlScriptStatement sql : statements) {
        if (sql.isQuery()) {
          log.logDetailed("launch SELECT statement: " + Const.CR + sql);
          nrstats++;
          try {
            List<Object[]> rows=db.getRows(sql.getStatement(),1000);
            RowMetaInterface rowMeta=db.getReturnRowMeta();
            if (rows.size() > 0) {
              PreviewRowsDialog prd=new PreviewRowsDialog(shell,ci,SWT.NONE,BaseMessages.getString(PKG,"SQLEditor.ResultRows.Title",Integer.toString(nrstats)),rowMeta,rows);
              prd.open();
            }
 else {
              MessageBox mb=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
              mb.setMessage(BaseMessages.getString(PKG,"SQLEditor.NoRows.Message",sql));
              mb.setText(BaseMessages.getString(PKG,"SQLEditor.NoRows.Title"));
              mb.open();
            }
          }
 catch (          KettleDatabaseException dbe) {
            new ErrorDialog(shell,BaseMessages.getString(PKG,"SQLEditor.ErrorExecSQL.Title"),BaseMessages.getString(PKG,"SQLEditor.ErrorExecSQL.Message",sql),dbe);
          }
        }
 else {
          log.logDetailed("launch DDL statement: " + Const.CR + sql);
          nrstats++;
          int startLogLine=KettleLogStore.getLastBufferLineNr();
          try {
            log.logDetailed("Executing SQL: " + Const.CR + sql);
            db.execStatement(sql.getStatement());
            message.append(BaseMessages.getString(PKG,"SQLEditor.Log.SQLExecuted",sql));
            message.append(Const.CR);
            if (dbcache != null) {
              dbcache.clear(ci.getName());
            }
            sql.setOk(true);
          }
 catch (          Exception dbe) {
            sql.setOk(false);
            String error=BaseMessages.getString(PKG,"SQLEditor.Log.SQLExecError",sql,dbe.toString());
            message.append(error).append(Const.CR);
            ErrorDialog dialog=new ErrorDialog(shell,BaseMessages.getString(PKG,"SQLEditor.ErrorExecSQL.Title"),error,dbe,true);
            if (dialog.isCancelled()) {
              break;
            }
          }
 finally {
            int endLogLine=KettleLogStore.getLastBufferLineNr();
            sql.setLoggingText(KettleLogStore.getAppender().getLogBufferFromTo(db.getLogChannelId(),true,startLogLine,endLogLine).toString());
            sql.setComplete(true);
            refreshExecutionResults();
          }
        }
      }
      message.append(BaseMessages.getString(PKG,"SQLEditor.Log.StatsExecuted",Integer.toString(nrstats)));
      if (partitionId != null) {
        message.append(BaseMessages.getString(PKG,"SQLEditor.Log.OnPartition",partitionId));
      }
      message.append(Const.CR);
    }
 catch (    KettleDatabaseException dbe) {
      MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
      String error=BaseMessages.getString(PKG,"SQLEditor.Error.CouldNotConnect.Message",(connection == null ? "" : connection.getName()),dbe.getMessage());
      message.append(error).append(Const.CR);
      mb.setMessage(error);
      mb.setText(BaseMessages.getString(PKG,"SQLEditor.Error.CouldNotConnect.Title"));
      mb.open();
    }
 finally {
      db.disconnect();
      refreshExecutionResults();
    }
  }
  EnterTextDialog dialog=new EnterTextDialog(shell,BaseMessages.getString(PKG,"SQLEditor.Result.Title"),BaseMessages.getString(PKG,"SQLEditor.Result.Message"),message.toString(),true);
  dialog.open();
}
