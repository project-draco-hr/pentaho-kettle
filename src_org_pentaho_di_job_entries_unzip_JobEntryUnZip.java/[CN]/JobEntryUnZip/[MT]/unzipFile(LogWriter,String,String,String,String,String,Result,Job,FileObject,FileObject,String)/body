{
  boolean retval=false;
  ZipFile zipfile=null;
  try {
    if (log.isDetailed())     log.logDetailed(toString(),Messages.getString("JobUnZip.Log.ProcessingFile",sourceFilename));
    File folder=new File(realTargetdirectory);
    String foldername=folder.getAbsolutePath();
    if (rootzip) {
      int lenstring=shortSourceFilename.length();
      int lastindexOfDot=shortSourceFilename.lastIndexOf('.');
      if (lastindexOfDot == -1)       lastindexOfDot=lenstring;
      foldername=foldername + Const.FILE_SEPARATOR + shortSourceFilename.substring(0,lastindexOfDot);
      File rootfolder=new File(foldername);
      if (!rootfolder.exists()) {
        if (rootfolder.mkdir()) {
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobUnZip.Log.RootFolderCreated",foldername));
        }
 else {
          throw new Exception(Messages.getString("JobUnZip.Error.CanNotCreateRootFolder",foldername));
        }
      }
    }
    zipfile=new ZipFile(new File(sourceFilename));
    Enumeration<? extends ZipEntry> zipEnum=zipfile.entries();
    Pattern pattern=null;
    if (!Const.isEmpty(realWildcard)) {
      pattern=Pattern.compile(realWildcard);
    }
    Pattern patternexclude=null;
    if (!Const.isEmpty(realWildcardExclude)) {
      patternexclude=Pattern.compile(realWildcardExclude);
    }
    while (zipEnum.hasMoreElements()) {
      if (successConditionBroken) {
        if (!successConditionBrokenExit) {
          log.logError(toString(),Messages.getString("JobUnZip.Error.SuccessConditionbroken","" + NrErrors));
          successConditionBrokenExit=true;
        }
        return false;
      }
      ZipEntry item=(ZipEntry)zipEnum.nextElement();
      try {
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("JobUnZip.Log.ProcessingZipEntry",item.getName(),sourceFilename));
        if (item.isDirectory()) {
          File newdir=new File(foldername + Const.FILE_SEPARATOR + item.getName());
          if (log.isDetailed())           log.logDetailed(toString(),Messages.getString("JobUnZip.CreatingDirectory.Label",newdir.getAbsolutePath()));
          if (!newdir.exists())           newdir.mkdir();
        }
 else {
          boolean getIt=true;
          boolean getItexclude=false;
          if (pattern != null) {
            Matcher matcher=pattern.matcher(item.getName());
            getIt=matcher.matches();
          }
          if (patternexclude != null) {
            Matcher matcherexclude=patternexclude.matcher(item.getName());
            getItexclude=matcherexclude.matches();
          }
          String newfile=foldername + Const.FILE_SEPARATOR + getTargetFilename(item.getName());
          boolean take=takeThisFile(log,item,newfile);
          if (getIt && !getItexclude && take) {
            if (log.isDetailed())             log.logDetailed(toString(),Messages.getString("JobUnZip.ExtractingEntry.Label",item.getName(),newfile));
            if (iffileexist == IF_FILE_EXISTS_UNIQ) {
              int lenstring=newfile.length();
              int lastindexOfDot=newfile.lastIndexOf('.');
              if (lastindexOfDot == -1)               lastindexOfDot=lenstring;
              newfile=newfile.substring(0,lastindexOfDot) + StringUtil.getFormattedDateTimeNow(true) + newfile.substring(lastindexOfDot,lenstring);
              if (log.isDebug())               log.logDebug(toString(),Messages.getString("JobUnZip.Log.CreatingUniqFile",newfile));
            }
            InputStream is=zipfile.getInputStream(item);
            FileOutputStream fos=new FileOutputStream(newfile);
            if (is != null) {
              byte[] buff=new byte[2048];
              int len;
              while ((len=is.read(buff)) > 0) {
                fos.write(buff,0,len);
              }
              if (is != null)               is.close();
              if (fos != null)               fos.close();
              addFilenameToResultFilenames(result,parentJob,newfile);
            }
          }
        }
      }
 catch (      Exception e) {
        updateErrors();
        log.logError(toString(),Messages.getString("JobUnZip.Error.CanNotProcessZipEntry",item.getName(),sourceFilename));
      }
    }
    zipfile.close();
    if (afterunzip == 1) {
      boolean deleted=fileObject.delete();
      if (!deleted) {
        updateErrors();
        log.logError(toString(),Messages.getString("JobUnZip.Cant_Delete_File.Label",sourceFilename));
      }
      if (log.isDebug())       log.logDebug(toString(),Messages.getString("JobUnZip.File_Deleted.Label",sourceFilename));
    }
 else     if (afterunzip == 2) {
      try {
        fileObject.moveTo(movetodir);
        if (log.isDebug())         log.logDebug(toString(),Messages.getString("JobUnZip.Log.FileMovedTo",fileObject.toString(),movetodir.toString()));
      }
 catch (      Exception e) {
        updateErrors();
        log.logError(toString(),Messages.getString("JobUnZip.Cant_Move_File.Label",sourceFilename,realMovetodirectory,e.getMessage()));
      }
      if (log.isDebug())       log.logDebug(toString(),Messages.getString("JobUnZip.File_Moved.Label",sourceFilename,realMovetodirectory));
    }
    retval=true;
  }
 catch (  Exception e) {
    updateErrors();
    log.logError(Messages.getString("JobUnZip.Error.Label"),Messages.getString("JobUnZip.ErrorUnzip.Label",sourceFilename,e.getMessage()));
  }
 finally {
    if (zipfile != null) {
      try {
        zipfile.close();
      }
 catch (      IOException ex) {
      }
      ;
    }
  }
  return retval;
}
