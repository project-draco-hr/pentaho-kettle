{
  try {
    super.loadRep(rep,id_jobentry,databases,slaveServers);
    zipFilename=rep.getJobEntryAttributeString(id_jobentry,"zipfilename");
    afterunzip=(int)rep.getJobEntryAttributeInteger(id_jobentry,"afterunzip");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    wildcardexclude=rep.getJobEntryAttributeString(id_jobentry,"wildcardexclude");
    targetdirectory=rep.getJobEntryAttributeString(id_jobentry,"targetdirectory");
    movetodirectory=rep.getJobEntryAttributeString(id_jobentry,"movetodirectory");
    addfiletoresult=rep.getJobEntryAttributeBoolean(id_jobentry,"addfiletoresult");
    isfromprevious=rep.getJobEntryAttributeBoolean(id_jobentry,"isfromprevious");
    adddate=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    addtime=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    SpecifyFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyFormat");
    date_time_format=rep.getJobEntryAttributeString(id_jobentry,"date_time_format");
    rootzip=rep.getJobEntryAttributeBoolean(id_jobentry,"rootzip");
    createfolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createfolder");
    nr_limit=rep.getJobEntryAttributeString(id_jobentry,"nr_limit");
    wildcardSource=rep.getJobEntryAttributeString(id_jobentry,"wildcardSource");
    success_condition=rep.getJobEntryAttributeString(id_jobentry,"success_condition");
    if (Const.isEmpty(success_condition))     success_condition=SUCCESS_IF_NO_ERRORS;
    iffileexist=getIfFileExistsInt(rep.getStepAttributeString(id_jobentry,"iffileexists"));
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'unzip' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
