{
  try {
    this.databaseMeta=rep.loadDatabaseMetaFromStepAttribute(idStep,"connection",databases);
    this.cube=rep.getStepAttributeString(idStep,"cube");
    this.measureType=rep.getStepAttributeString(idStep,"measuretype");
    this.updateMode=rep.getStepAttributeString(idStep,"updateMode");
    this.splashMode=rep.getStepAttributeString(idStep,"splashMode");
    this.clearCube=rep.getStepAttributeBoolean(idStep,"clearcube");
    try {
      this.enableDimensionCache=rep.getStepAttributeBoolean(idStep,"enableDimensionCache");
      this.preloadDimensionCache=rep.getStepAttributeBoolean(idStep,"preloadDimensionCache");
      this.commitSize=(int)rep.getStepAttributeInteger(idStep,"commitSize");
      if (this.commitSize <= 0)       this.setCommitSize(1000);
    }
 catch (    Exception e) {
      enableDimensionCache=false;
      preloadDimensionCache=false;
      commitSize=1000;
    }
    int nrFields=rep.countNrStepAttributes(idStep,"dimensionname");
    for (int i=0; i < nrFields; i++) {
      String dimensionName=rep.getStepAttributeString(idStep,i,"dimensionname");
      String fieldName=rep.getStepAttributeString(idStep,i,"fieldname");
      String fieldType=rep.getStepAttributeString(idStep,i,"fieldtype");
      this.fields.add(new DimensionField(dimensionName,fieldName,fieldType));
    }
    String measureName=rep.getStepAttributeString(idStep,"measurename");
    String measureFieldName=rep.getStepAttributeString(idStep,"measurefieldname");
    String measureFieldType=rep.getStepAttributeString(idStep,"measurefieldtype");
    this.measureField=new DimensionField(measureName,measureFieldName,measureFieldType);
    setDefault();
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
