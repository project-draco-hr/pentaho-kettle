{
  List<String> partitionedDatabaseNames=new ArrayList<String>();
  for (int i=0; i < databases.size(); i++) {
    DatabaseMeta databaseMeta=databases.get(i);
    if (databaseMeta.isPartitioned()) {
      partitionedDatabaseNames.add(databaseMeta.getName());
    }
  }
  String dbNames[]=partitionedDatabaseNames.toArray(new String[partitionedDatabaseNames.size()]);
  if (dbNames.length > 0) {
    EnterSelectionDialog dialog=new EnterSelectionDialog(shell,dbNames,BaseMessages.getString(PKG,"PartitionSchema.SelectDatabase"),BaseMessages.getString(PKG,"PartitionSchema.SelectPartitionnedDatabase"));
    String dbName=dialog.open();
    if (dbName != null) {
      DatabaseMeta databaseMeta=DatabaseMeta.findDatabase(databases,dbName);
      PartitionDatabaseMeta[] partitioningInformation=databaseMeta.getPartitioningInformation();
      if (partitioningInformation != null) {
        wPartitions.clearAll(false);
        for (int i=0; i < partitioningInformation.length; i++) {
          PartitionDatabaseMeta meta=partitioningInformation[i];
          wPartitions.add(new String[]{meta.getPartitionId()});
        }
        wPartitions.removeEmptyRows();
        wPartitions.setRowNums();
        wPartitions.optWidth(true);
      }
    }
  }
}
