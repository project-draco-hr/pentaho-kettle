{
  if (refEntries.size() != cmpEntries.size()) {
    throw new KettleException("The number of reference entries (" + refEntries.size() + ") is not the same as the number of compare entries("+ cmpEntries.size()+ ")");
  }
  for (int i=0; i < refEntries.size(); i++) {
    StepInjectionMetaEntry refEntry=refEntries.get(i);
    StepInjectionMetaEntry cmpEntry=cmpEntries.get(i);
    if (cmpEntry.getValueType() == ValueMetaInteger.TYPE_NONE) {
      compareEntryValues(refEntry.getDetails(),cmpEntry.getDetails());
    }
 else {
      Object ref=refEntry.getValue();
      Object cmp=cmpEntry.getValue();
      if (ref != null && cmp == null) {
        throw new KettleException("Reference key '" + refEntry.getKey() + "': value is not null while the compare value is null");
      }
      if (ref == null && cmp != null) {
        throw new KettleException("Reference key '" + refEntry.getKey() + "': value is null while the compare value is not null");
      }
      if (ref != null && cmp != null) {
        if (!ref.equals(cmp)) {
          throw new KettleException("Reference key '" + refEntry.getKey() + "': reference value '"+ ref+ "' is not equal to '"+ cmp+ "'");
        }
      }
    }
  }
}
