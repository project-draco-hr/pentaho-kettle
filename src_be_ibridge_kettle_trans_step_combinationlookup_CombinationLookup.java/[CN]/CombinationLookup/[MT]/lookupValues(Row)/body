{
  Value val_hash=null;
  Value val_key=null;
  if (first) {
    first=false;
    data.keynrs=new int[meta.getKeyField().length];
    for (int i=0; i < meta.getKeyField().length; i++) {
      data.keynrs[i]=row.searchValueIndex(meta.getKeyField()[i]);
      if (data.keynrs[i] < 0) {
        throw new KettleStepException(Messages.getString("CombinationLookup.Exception.FieldNotFound",meta.getKeyField()[i]));
      }
    }
    if (meta.replaceFields()) {
      int x, y;
      int size=meta.getKeyField().length;
      int nr1, nr2;
      for (x=0; x < size; x++) {
        for (y=0; y < size - 1; y++) {
          nr1=data.keynrs[y];
          nr2=data.keynrs[y + 1];
          if (nr2 > nr1) {
            int nr_dummy=data.keynrs[y];
            String key_dummy=meta.getKeyField()[y];
            String keylookup_dummy=meta.getKeyLookup()[y];
            data.keynrs[y]=data.keynrs[y + 1];
            meta.getKeyField()[y]=meta.getKeyField()[y + 1];
            meta.getKeyLookup()[y]=meta.getKeyLookup()[y + 1];
            data.keynrs[y + 1]=nr_dummy;
            meta.getKeyField()[y + 1]=key_dummy;
            meta.getKeyLookup()[y + 1]=keylookup_dummy;
          }
        }
      }
    }
    data.db.setCombiLookup(meta.getTablename(),meta.getKeyLookup(),meta.getTechnicalKeyField(),meta.useHash(),meta.getHashField());
  }
  Row lu=new Row();
  for (int i=0; i < meta.getKeyField().length; i++) {
    lu.addValue(row.getValue(data.keynrs[i]));
  }
  if (meta.useHash()) {
    val_hash=new Value(meta.getHashField(),(long)lu.hashCode());
    lu.clear();
    lu.addValue(val_hash);
  }
 else {
    lu.clear();
  }
  for (int i=0; i < meta.getKeyField().length; i++) {
    Value parval=row.getValue(data.keynrs[i]);
    lu.addValue(parval);
    lu.addValue(parval);
  }
  val_key=lookupInCache(lu);
  if (val_key == null) {
    data.db.setValuesLookup(lu);
    Row add=data.db.getLookup();
    linesInput++;
    if (add == null) {
      boolean autoinc=false;
      if (meta.getDatabase().supportsAutoinc() && meta.isUseAutoinc()) {
        autoinc=true;
        val_key=new Value(meta.getTechnicalKeyField(),0.0);
      }
 else       if (meta.getDatabase().supportsSequences() && meta.getSequenceFrom() != null && meta.getSequenceFrom().length() > 0) {
        val_key=data.db.getNextSequenceValue(meta.getSequenceFrom(),meta.getTechnicalKeyField());
        if (val_key != null && log.isRowLevel())         logRowlevel(Messages.getString("CombinationLookup.Log.FoundNextSequenceValue") + val_key.toString());
      }
 else {
        val_key=new Value(meta.getTechnicalKeyField(),0.0);
        data.db.getNextValue(getTransMeta().getCounters(),meta.getTablename(),val_key);
      }
      data.db.combiInsert(row,meta.getTablename(),meta.getSequenceFrom() == null ? null : meta.getTechnicalKeyField(),autoinc,val_key,meta.getKeyLookup(),data.keynrs,meta.useHash(),meta.getHashField(),val_hash);
      linesOutput++;
      log.logRowlevel(toString(),Messages.getString("CombinationLookup.Log.AddedDimensionEntry") + val_key);
      storeInCache(lu,val_key);
    }
 else {
      val_key=add.getValue(0);
      storeInCache(lu,val_key);
    }
  }
  if (meta.replaceFields()) {
    for (int i=0; i < data.keynrs.length; i++) {
      row.removeValue(data.keynrs[i]);
    }
  }
  row.addValue(val_key);
}
