{
synchronized (locs) {
    String sjar="." + JAR;
    for (    PluginLocation plugin : locs) {
      File base=new File(System.getProperty("user.dir"));
      try {
        FileSystemManager mgr=VFS.getManager();
        FileObject fobj=mgr.resolveFile(base,plugin.getLocation());
        if (fobj.isReadable()) {
          String name=fobj.getName().getURI();
          int jindex=name.indexOf(sjar);
          int nlen=name.length();
          boolean isJar=jindex == nlen - 4 || jindex == nlen - 6;
          try {
            if (isJar)             build(fobj,true);
 else {
              for (              FileObject childFolder : fobj.getChildren()) {
                boolean isAlsoJar=childFolder.getName().getURI().endsWith(sjar);
                if (!isAlsoJar && childFolder.getType() != FileType.FOLDER) {
                  continue;
                }
                if (childFolder.getName().getBaseName().equalsIgnoreCase(".svn")) {
                  continue;
                }
 else                 if (childFolder.getName().getBaseName().equalsIgnoreCase(".cvs")) {
                  continue;
                }
                try {
                  build(childFolder,isAlsoJar);
                }
 catch (                KettleConfigException e) {
                  log.logError(Plugin.PLUGIN_LOADER,e.getMessage());
                  continue;
                }
              }
            }
          }
 catch (          FileSystemException e) {
            log.logError(Plugin.PLUGIN_LOADER,e.getMessage());
            continue;
          }
catch (          KettleConfigException e) {
            log.logError(Plugin.PLUGIN_LOADER,e.getMessage());
            continue;
          }
        }
 else {
          log.logDetailed(Plugin.PLUGIN_LOADER,fobj + " does not exist.");
        }
      }
 catch (      Exception e) {
        throw new KettleConfigException(e);
      }
    }
  }
}
