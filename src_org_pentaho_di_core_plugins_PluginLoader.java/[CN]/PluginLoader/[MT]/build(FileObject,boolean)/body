{
  try {
    FileObject xml=null;
    if (isJar) {
      FileObject exploded=explodeJar(parent);
      ResolverUtil<Plugin> resPlugins=new ResolverUtil<Plugin>();
      File fparent=new File(exploded.getURL().getFile());
      File[] files=fparent.listFiles(new JarNameFilter());
      URL[] classpath=new URL[files.length];
      for (int i=0; i < files.length; i++)       classpath[i]=files[i].toURI().toURL();
      ClassLoader cl=new PDIClassLoader(classpath,Thread.currentThread().getContextClassLoader());
      resPlugins.setClassLoader(cl);
      for (      FileObject couldBeJar : exploded.getChildren()) {
        if (couldBeJar.getName().getExtension().equals(JAR))         resPlugins.loadImplementationsInJar(Const.EMPTY_STRING,couldBeJar.getURL(),tests.values().toArray(new ResolverUtil.Test[2]));
      }
      for (      Class<? extends Plugin> match : resPlugins.getClasses()) {
        for (        Class<? extends Annotation> cannot : tests.keySet()) {
          Annotation annot=match.getAnnotation(cannot);
          if (annot != null)           fromAnnotation(annot,exploded,match);
        }
      }
      xml=exploded.getChild(Plugin.PLUGIN_XML_FILE);
      if (xml == null || !xml.exists())       return;
      parent=exploded;
    }
 else     xml=parent.getChild(Plugin.PLUGIN_XML_FILE);
    if (xml != null && xml.isReadable())     fromXML(xml,parent);
  }
 catch (  Exception e) {
    throw new KettleConfigException(e);
  }
}
