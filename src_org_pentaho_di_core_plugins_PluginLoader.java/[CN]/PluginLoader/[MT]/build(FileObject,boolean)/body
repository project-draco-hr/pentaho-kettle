{
  try {
    FileObject xml=null;
    if (isJar) {
      FileObject exploded=explodeJar(parent);
      xml=exploded.getChild("plugin.xml");
      parent=exploded;
    }
 else     xml=parent.getChild("plugin.xml");
    if (xml != null && xml.isReadable()) {
      System.out.println("The plugin xml is for " + parent + " is "+ xml+ " I can read: "+ xml.isReadable());
      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      DocumentBuilder db=dbf.newDocumentBuilder();
      Document doc=db.parse(xml.getContent().getInputStream());
      Node plugin=XMLHandler.getSubNode(doc,"plugin");
      String id=XMLHandler.getTagAttribute(plugin,"id");
      String description=XMLHandler.getTagAttribute(plugin,"description");
      String iconfile=XMLHandler.getTagAttribute(plugin,"iconfile");
      String tooltip=XMLHandler.getTagAttribute(plugin,"tooltip");
      String classname=XMLHandler.getTagAttribute(plugin,"classname");
      Node libsnode=XMLHandler.getSubNode(plugin,"libraries");
      int nrlibs=XMLHandler.countNodes(libsnode,"library");
      String jarfiles[]=new String[nrlibs];
      for (int j=0; j < nrlibs; j++) {
        Node libnode=XMLHandler.getSubNodeByNr(libsnode,"library",j);
        String jarfile=XMLHandler.getTagAttribute(libnode,"name");
        jarfiles[j]=parent.getChild(jarfile).getURL().getFile();
      }
      String iconFilename=parent.getChild(iconfile).getURL().getFile();
      JobPlugin sp=new JobPlugin(JobPlugin.TYPE_PLUGIN,id,description,tooltip,parent.getName().getURI(),jarfiles,iconFilename,classname);
      return sp;
    }
  }
 catch (  Exception e) {
    throw new KettleConfigException(e);
  }
  throw new KettleConfigException("Unable to read plugin.xml from " + parent);
}
