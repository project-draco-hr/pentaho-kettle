{
  meta=(GroupByMeta)smi;
  data=(GroupByData)sdi;
  Object[] r=getRow();
  if (r == null) {
    if (meta.passAllRows()) {
      if (data.previous != null) {
        calcAggregate(data.previous);
        addToBuffer(data.previous);
      }
      data.groupResult=getAggregateResult();
      Object[] row=getRowFromBuffer();
      int size=data.inputRowMeta.size();
      long lineNr=0;
      while (row != null) {
        row=RowDataUtil.addRowData(row,size,data.groupResult);
        size+=data.groupResult.length;
        lineNr++;
        if (meta.isAddingLineNrInGroup() && !Const.isEmpty(meta.getLineNrInGroupField())) {
          Object lineNrValue=new Long(lineNr);
          ValueMetaInterface lineNrValueMeta=new ValueMeta(meta.getLineNrInGroupField(),ValueMetaInterface.TYPE_INTEGER);
          lineNrValueMeta.setLength(9);
          row=RowDataUtil.addValueData(row,size,lineNrValue);
          size++;
        }
        putRow(data.outputRowMeta,row);
        row=getRowFromBuffer();
      }
      closeInput();
    }
 else {
      if (data.previous != null) {
        calcAggregate(data.previous);
        Object[] result=buildResult(data.previous);
        putRow(data.groupAggMeta,result);
      }
    }
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.outputRowMeta=data.inputRowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.counts=new long[meta.getSubjectField().length];
    data.subjectnrs=new int[meta.getSubjectField().length];
    for (int i=0; i < meta.getSubjectField().length; i++) {
      data.subjectnrs[i]=getInputRowMeta().indexOfValue(meta.getSubjectField()[i]);
      if (data.subjectnrs[i] < 0) {
        logError(Messages.getString("GroupBy.Log.AggregateSubjectFieldCouldNotFound",meta.getSubjectField()[i]));
        setErrors(1);
        stopAll();
        return false;
      }
    }
    data.groupnrs=new int[meta.getGroupField().length];
    for (int i=0; i < meta.getGroupField().length; i++) {
      data.groupnrs[i]=getInputRowMeta().indexOfValue(meta.getGroupField()[i]);
      if (data.groupnrs[i] < 0) {
        logError(Messages.getString("GroupBy.Log.GroupFieldCouldNotFound",meta.getGroupField()[i]));
        setErrors(1);
        stopAll();
        return false;
      }
    }
    initGroupMeta(getInputRowMeta());
    data.previous=getInputRowMeta().cloneRow(r);
    newAggregate(r);
    data.groupAggMeta=new RowMeta();
    data.groupAggMeta.addRowMeta(data.groupMeta);
    data.groupAggMeta.addRowMeta(data.aggMeta);
  }
 else {
    calcAggregate(data.previous);
    if (meta.passAllRows()) {
      addToBuffer(data.previous);
    }
  }
  if (!sameGroup(data.previous,r)) {
    if (meta.passAllRows()) {
      closeOutput();
      data.groupResult=getAggregateResult();
      Object[] row=getRowFromBuffer();
      int size=data.inputRowMeta.size();
      long lineNr=0;
      while (row != null) {
        row=RowDataUtil.addRowData(row,size,data.groupResult);
        size+=data.groupResult.length;
        lineNr++;
        if (meta.isAddingLineNrInGroup() && !Const.isEmpty(meta.getLineNrInGroupField())) {
          Object lineNrValue=new Long(lineNr);
          ValueMetaInterface lineNrValueMeta=new ValueMeta(meta.getLineNrInGroupField(),ValueMetaInterface.TYPE_INTEGER);
          lineNrValueMeta.setLength(9);
          row=RowDataUtil.addValueData(row,size,lineNrValue);
          size++;
        }
        putRow(data.outputRowMeta,row);
        row=getRowFromBuffer();
      }
      closeInput();
    }
 else {
      Object[] result=buildResult(data.previous);
      putRow(data.groupAggMeta,result);
    }
    newAggregate(r);
  }
  data.previous=data.inputRowMeta.cloneRow(r);
  if ((linesRead > 0) && (linesRead % Const.ROWS_UPDATE) == 0)   logBasic(Messages.getString("GroupBy.LineNumber") + linesRead);
  return true;
}
