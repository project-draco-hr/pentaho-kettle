{
  meta=(GroupByMeta)smi;
  data=(GroupByData)sdi;
  Object[] r=getRow();
  if (first) {
    data.inputRowMeta=getInputRowMeta();
    if (data.inputRowMeta == null) {
      data.inputRowMeta=getTransMeta().getPrevStepFields(getStepMeta());
    }
    data.outputRowMeta=data.inputRowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.counts=new long[meta.getSubjectField().length];
    data.subjectnrs=new int[meta.getSubjectField().length];
    data.cumulativeSumSourceIndexes=new ArrayList<Integer>();
    data.cumulativeSumTargetIndexes=new ArrayList<Integer>();
    data.cumulativeAvgSourceIndexes=new ArrayList<Integer>();
    data.cumulativeAvgTargetIndexes=new ArrayList<Integer>();
    for (int i=0; i < meta.getSubjectField().length; i++) {
      data.subjectnrs[i]=data.inputRowMeta.indexOfValue(meta.getSubjectField()[i]);
      if (data.subjectnrs[i] < 0) {
        logError(BaseMessages.getString(PKG,"GroupBy.Log.AggregateSubjectFieldCouldNotFound",meta.getSubjectField()[i]));
        setErrors(1);
        stopAll();
        return false;
      }
      if (meta.getAggregateType()[i] == GroupByMeta.TYPE_GROUP_CUMULATIVE_SUM) {
        data.cumulativeSumSourceIndexes.add(data.subjectnrs[i]);
        data.cumulativeSumTargetIndexes.add(data.inputRowMeta.size() + i);
      }
      if (meta.getAggregateType()[i] == GroupByMeta.TYPE_GROUP_CUMULATIVE_AVERAGE) {
        data.cumulativeAvgSourceIndexes.add(data.subjectnrs[i]);
        data.cumulativeAvgTargetIndexes.add(data.inputRowMeta.size() + i);
      }
    }
    data.previousSums=new Object[data.cumulativeSumTargetIndexes.size()];
    data.previousAvgSum=new Object[data.cumulativeAvgTargetIndexes.size()];
    data.previousAvgCount=new long[data.cumulativeAvgTargetIndexes.size()];
    data.groupnrs=new int[meta.getGroupField().length];
    for (int i=0; i < meta.getGroupField().length; i++) {
      data.groupnrs[i]=data.inputRowMeta.indexOfValue(meta.getGroupField()[i]);
      if (data.groupnrs[i] < 0) {
        logError(BaseMessages.getString(PKG,"GroupBy.Log.GroupFieldCouldNotFound",meta.getGroupField()[i]));
        setErrors(1);
        stopAll();
        return false;
      }
    }
    data.valueMetaInteger=new ValueMeta("count",ValueMetaInterface.TYPE_INTEGER);
    data.valueMetaNumber=new ValueMeta("sum",ValueMetaInterface.TYPE_NUMBER);
    initGroupMeta(data.inputRowMeta);
  }
  if (first || data.newBatch) {
    newAggregate(r);
  }
  if (first) {
    data.groupAggMeta=new RowMeta();
    data.groupAggMeta.addRowMeta(data.groupMeta);
    data.groupAggMeta.addRowMeta(data.aggMeta);
  }
  if (r == null) {
    handleLastOfGroup();
    setOutputDone();
    return false;
  }
  if (first || data.newBatch) {
    first=false;
    data.newBatch=false;
    data.previous=data.inputRowMeta.cloneRow(r);
  }
 else {
    calcAggregate(data.previous);
    if (meta.passAllRows()) {
      addToBuffer(data.previous);
    }
  }
  if (!sameGroup(data.previous,r)) {
    if (meta.passAllRows()) {
      closeOutput();
      data.groupResult=getAggregateResult();
      Object[] row=getRowFromBuffer();
      long lineNr=0;
      while (row != null) {
        int size=data.inputRowMeta.size();
        row=RowDataUtil.addRowData(row,size,data.groupResult);
        size+=data.groupResult.length;
        lineNr++;
        if (meta.isAddingLineNrInGroup() && !Const.isEmpty(meta.getLineNrInGroupField())) {
          Object lineNrValue=new Long(lineNr);
          row=RowDataUtil.addValueData(row,size,lineNrValue);
          size++;
        }
        addCumulativeSums(row);
        addCumulativeAverages(row);
        putRow(data.outputRowMeta,row);
        row=getRowFromBuffer();
      }
      closeInput();
    }
 else {
      Object[] result=buildResult(data.previous);
      if (result != null) {
        putRow(data.groupAggMeta,result);
      }
    }
    newAggregate(r);
  }
  data.previous=data.inputRowMeta.cloneRow(r);
  if (checkFeedback(getLinesRead())) {
    if (log.isBasic())     logBasic(BaseMessages.getString(PKG,"GroupBy.LineNumber") + getLinesRead());
  }
  return true;
}
