{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  Button helpButton=JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobCopyFiles.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.LEFT);
  wlName.setText(BaseMessages.getString(PKG,"JobCopyFiles.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(0,0);
  fdName.top=new FormAttachment(wlName,margin);
  fdName.right=new FormAttachment(40,0);
  wName.setLayoutData(fdName);
  Label wlIcon=new Label(shell,SWT.RIGHT);
  wlIcon.setImage(GUIResource.getInstance().getImage("ui/images/CPY.svg",ConstUI.ICON_SIZE,ConstUI.ICON_SIZE));
  props.setLook(wlIcon);
  FormData fdlIcon=new FormData();
  fdlIcon.top=new FormAttachment(0,margin * 3);
  fdlIcon.right=new FormAttachment(100,-margin);
  wlIcon.setLayoutData(fdlIcon);
  Label lTopSeparator=new Label(shell,SWT.HORIZONTAL | SWT.SEPARATOR);
  FormData fdTopSeparator=new FormData();
  fdTopSeparator.top=new FormAttachment(wName,margin * 3);
  fdTopSeparator.left=new FormAttachment(0,0);
  fdTopSeparator.right=new FormAttachment(100,0);
  lTopSeparator.setLayoutData(fdTopSeparator);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(lTopSeparator,margin * 3);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-60);
  wTabFolder.setLayoutData(fdTabFolder);
  wFilesTab=new CTabItem(wTabFolder,SWT.NONE);
  wFilesTab.setText("Files");
  wFilesComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wFilesComp);
  FormLayout filesLayout=new FormLayout();
  filesLayout.marginWidth=3;
  filesLayout.marginHeight=3;
  wFilesComp.setLayout(filesLayout);
  fdFilesComp=new FormData();
  fdFilesComp.left=new FormAttachment(0,0);
  fdFilesComp.top=new FormAttachment(0,0);
  fdFilesComp.right=new FormAttachment(100,0);
  fdFilesComp.bottom=new FormAttachment(100,0);
  wFilesComp.setLayoutData(fdFilesComp);
  wFilesComp.layout();
  wFilesTab.setControl(wFilesComp);
  wSettingsTab=new CTabItem(wTabFolder,SWT.NONE);
  wSettingsTab.setText(BaseMessages.getString(PKG,"JobCopyFiles.Settings.Label"));
  wSettingsComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wSettingsComp);
  FormLayout settingsLayout=new FormLayout();
  settingsLayout.marginWidth=3;
  settingsLayout.marginHeight=3;
  wSettingsComp.setLayout(settingsLayout);
  wlIncludeSubfolders=new Label(wSettingsComp,SWT.RIGHT);
  wlIncludeSubfolders.setText(BaseMessages.getString(PKG,"JobCopyFiles.IncludeSubfolders.Label"));
  props.setLook(wlIncludeSubfolders);
  fdlIncludeSubfolders=new FormData();
  fdlIncludeSubfolders.left=new FormAttachment(0,0);
  fdlIncludeSubfolders.top=new FormAttachment(wName,margin);
  fdlIncludeSubfolders.right=new FormAttachment(middle,-margin);
  wlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);
  wIncludeSubfolders=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wIncludeSubfolders);
  wIncludeSubfolders.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.IncludeSubfolders.Tooltip"));
  fdIncludeSubfolders=new FormData();
  fdIncludeSubfolders.left=new FormAttachment(middle,0);
  fdIncludeSubfolders.top=new FormAttachment(wName,margin);
  fdIncludeSubfolders.right=new FormAttachment(100,0);
  wIncludeSubfolders.setLayoutData(fdIncludeSubfolders);
  wIncludeSubfolders.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      CheckIncludeSubFolders();
    }
  }
);
  wlDestinationIsAFile=new Label(wSettingsComp,SWT.RIGHT);
  wlDestinationIsAFile.setText(BaseMessages.getString(PKG,"JobCopyFiles.DestinationIsAFile.Label"));
  props.setLook(wlDestinationIsAFile);
  fdlDestinationIsAFile=new FormData();
  fdlDestinationIsAFile.left=new FormAttachment(0,0);
  fdlDestinationIsAFile.top=new FormAttachment(wIncludeSubfolders,margin);
  fdlDestinationIsAFile.right=new FormAttachment(middle,-margin);
  wlDestinationIsAFile.setLayoutData(fdlDestinationIsAFile);
  wDestinationIsAFile=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wDestinationIsAFile);
  wDestinationIsAFile.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.DestinationIsAFile.Tooltip"));
  fdDestinationIsAFile=new FormData();
  fdDestinationIsAFile.left=new FormAttachment(middle,0);
  fdDestinationIsAFile.top=new FormAttachment(wIncludeSubfolders,margin);
  fdDestinationIsAFile.right=new FormAttachment(100,0);
  wDestinationIsAFile.setLayoutData(fdDestinationIsAFile);
  wDestinationIsAFile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlCopyEmptyFolders=new Label(wSettingsComp,SWT.RIGHT);
  wlCopyEmptyFolders.setText(BaseMessages.getString(PKG,"JobCopyFiles.CopyEmptyFolders.Label"));
  props.setLook(wlCopyEmptyFolders);
  fdlCopyEmptyFolders=new FormData();
  fdlCopyEmptyFolders.left=new FormAttachment(0,0);
  fdlCopyEmptyFolders.top=new FormAttachment(wDestinationIsAFile,margin);
  fdlCopyEmptyFolders.right=new FormAttachment(middle,-margin);
  wlCopyEmptyFolders.setLayoutData(fdlCopyEmptyFolders);
  wCopyEmptyFolders=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wCopyEmptyFolders);
  wCopyEmptyFolders.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.CopyEmptyFolders.Tooltip"));
  fdCopyEmptyFolders=new FormData();
  fdCopyEmptyFolders.left=new FormAttachment(middle,0);
  fdCopyEmptyFolders.top=new FormAttachment(wDestinationIsAFile,margin);
  fdCopyEmptyFolders.right=new FormAttachment(100,0);
  wCopyEmptyFolders.setLayoutData(fdCopyEmptyFolders);
  wCopyEmptyFolders.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlCreateDestinationFolder=new Label(wSettingsComp,SWT.RIGHT);
  wlCreateDestinationFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.CreateDestinationFolder.Label"));
  props.setLook(wlCreateDestinationFolder);
  fdlCreateDestinationFolder=new FormData();
  fdlCreateDestinationFolder.left=new FormAttachment(0,0);
  fdlCreateDestinationFolder.top=new FormAttachment(wCopyEmptyFolders,margin);
  fdlCreateDestinationFolder.right=new FormAttachment(middle,-margin);
  wlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);
  wCreateDestinationFolder=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wCreateDestinationFolder);
  wCreateDestinationFolder.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.CreateDestinationFolder.Tooltip"));
  fdCreateDestinationFolder=new FormData();
  fdCreateDestinationFolder.left=new FormAttachment(middle,0);
  fdCreateDestinationFolder.top=new FormAttachment(wCopyEmptyFolders,margin);
  fdCreateDestinationFolder.right=new FormAttachment(100,0);
  wCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);
  wCreateDestinationFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlOverwriteFiles=new Label(wSettingsComp,SWT.RIGHT);
  wlOverwriteFiles.setText(BaseMessages.getString(PKG,"JobCopyFiles.OverwriteFiles.Label"));
  props.setLook(wlOverwriteFiles);
  fdlOverwriteFiles=new FormData();
  fdlOverwriteFiles.left=new FormAttachment(0,0);
  fdlOverwriteFiles.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdlOverwriteFiles.right=new FormAttachment(middle,-margin);
  wlOverwriteFiles.setLayoutData(fdlOverwriteFiles);
  wOverwriteFiles=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wOverwriteFiles);
  wOverwriteFiles.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.OverwriteFiles.Tooltip"));
  fdOverwriteFiles=new FormData();
  fdOverwriteFiles.left=new FormAttachment(middle,0);
  fdOverwriteFiles.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdOverwriteFiles.right=new FormAttachment(100,0);
  wOverwriteFiles.setLayoutData(fdOverwriteFiles);
  wOverwriteFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlRemoveSourceFiles=new Label(wSettingsComp,SWT.RIGHT);
  wlRemoveSourceFiles.setText(BaseMessages.getString(PKG,"JobCopyFiles.RemoveSourceFiles.Label"));
  props.setLook(wlRemoveSourceFiles);
  fdlRemoveSourceFiles=new FormData();
  fdlRemoveSourceFiles.left=new FormAttachment(0,0);
  fdlRemoveSourceFiles.top=new FormAttachment(wOverwriteFiles,margin);
  fdlRemoveSourceFiles.right=new FormAttachment(middle,-margin);
  wlRemoveSourceFiles.setLayoutData(fdlRemoveSourceFiles);
  wRemoveSourceFiles=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wRemoveSourceFiles);
  wRemoveSourceFiles.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.RemoveSourceFiles.Tooltip"));
  fdRemoveSourceFiles=new FormData();
  fdRemoveSourceFiles.left=new FormAttachment(middle,0);
  fdRemoveSourceFiles.top=new FormAttachment(wOverwriteFiles,margin);
  fdRemoveSourceFiles.right=new FormAttachment(100,0);
  wRemoveSourceFiles.setLayoutData(fdRemoveSourceFiles);
  wRemoveSourceFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlPrevious=new Label(wSettingsComp,SWT.RIGHT);
  wlPrevious.setText(BaseMessages.getString(PKG,"JobCopyFiles.Previous.Label"));
  props.setLook(wlPrevious);
  fdlPrevious=new FormData();
  fdlPrevious.left=new FormAttachment(0,0);
  fdlPrevious.top=new FormAttachment(wRemoveSourceFiles,margin);
  fdlPrevious.right=new FormAttachment(middle,-margin);
  wlPrevious.setLayoutData(fdlPrevious);
  wPrevious=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wPrevious);
  wPrevious.setSelection(jobEntry.arg_from_previous);
  wPrevious.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.Previous.Tooltip"));
  fdPrevious=new FormData();
  fdPrevious.left=new FormAttachment(middle,0);
  fdPrevious.top=new FormAttachment(wRemoveSourceFiles,margin);
  fdPrevious.right=new FormAttachment(100,0);
  wPrevious.setLayoutData(fdPrevious);
  wPrevious.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      RefreshArgFromPrevious();
    }
  }
);
  wlAddFileToResult=new Label(wSettingsComp,SWT.RIGHT);
  wlAddFileToResult.setText(BaseMessages.getString(PKG,"JobCopyFiles.AddFileToResult.Label"));
  props.setLook(wlAddFileToResult);
  fdlAddFileToResult=new FormData();
  fdlAddFileToResult.left=new FormAttachment(0,0);
  fdlAddFileToResult.top=new FormAttachment(wPrevious,margin);
  fdlAddFileToResult.right=new FormAttachment(middle,-margin);
  wlAddFileToResult.setLayoutData(fdlAddFileToResult);
  wAddFileToResult=new Button(wSettingsComp,SWT.CHECK);
  props.setLook(wAddFileToResult);
  wAddFileToResult.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.AddFileToResult.Tooltip"));
  fdAddFileToResult=new FormData();
  fdAddFileToResult.left=new FormAttachment(middle,0);
  fdAddFileToResult.top=new FormAttachment(wPrevious,margin);
  fdAddFileToResult.right=new FormAttachment(100,0);
  wAddFileToResult.setLayoutData(fdAddFileToResult);
  wAddFileToResult.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  fdSettingsComp=new FormData();
  fdSettingsComp.left=new FormAttachment(0,0);
  fdSettingsComp.top=new FormAttachment(0,0);
  fdSettingsComp.right=new FormAttachment(100,0);
  fdSettingsComp.bottom=new FormAttachment(100,0);
  wSettingsComp.setLayoutData(fdSettingsComp);
  wSettingsComp.layout();
  wSettingsTab.setControl(wSettingsComp);
  props.setLook(wSettingsComp);
  wlSourceFileFolder=new Label(wFilesComp,SWT.RIGHT);
  wlSourceFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.SourceFileFolder.Label"));
  props.setLook(wlSourceFileFolder);
  FormData fdlSourceFileFolder=new FormData();
  fdlSourceFileFolder.left=new FormAttachment(0,0);
  fdlSourceFileFolder.top=new FormAttachment(wFilesComp,2 * margin);
  fdlSourceFileFolder.right=new FormAttachment(middle,-margin);
  wlSourceFileFolder.setLayoutData(fdlSourceFileFolder);
  wbSourceDirectory=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbSourceDirectory);
  wbSourceDirectory.setText(BaseMessages.getString(PKG,"JobCopyFiles.BrowseFolders.Label"));
  FormData fdbSourceDirectory=new FormData();
  fdbSourceDirectory.right=new FormAttachment(100,0);
  fdbSourceDirectory.top=new FormAttachment(wFilesComp,margin);
  wbSourceDirectory.setLayoutData(fdbSourceDirectory);
  wbSourceDirectory.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wSourceFileFolder.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wSourceFileFolder.setText(dir);
      }
    }
  }
);
  wbSourceFileFolder=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbSourceFileFolder);
  wbSourceFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.BrowseFiles.Label"));
  FormData fdbSourceFileFolder=new FormData();
  fdbSourceFileFolder.right=new FormAttachment(wbSourceDirectory,-margin);
  fdbSourceFileFolder.top=new FormAttachment(wSettingsComp,margin);
  wbSourceFileFolder.setLayoutData(fdbSourceFileFolder);
  wbaSourceFileFolder=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbaSourceFileFolder);
  wbaSourceFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.FilenameAdd.Button"));
  fdbaSourceFileFolder=new FormData();
  fdbaSourceFileFolder.right=new FormAttachment(wbSourceFileFolder,-margin);
  fdbaSourceFileFolder.top=new FormAttachment(wFilesComp,margin);
  wbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);
  wSourceFileFolder=new TextVar(jobMeta,wFilesComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.SourceFileFolder.Tooltip"));
  props.setLook(wSourceFileFolder);
  wSourceFileFolder.addModifyListener(lsMod);
  FormData fdSourceFileFolder=new FormData();
  fdSourceFileFolder.left=new FormAttachment(middle,0);
  fdSourceFileFolder.top=new FormAttachment(wFilesComp,2 * margin);
  fdSourceFileFolder.right=new FormAttachment(wbSourceFileFolder,-55);
  wSourceFileFolder.setLayoutData(fdSourceFileFolder);
  wSourceFileFolder.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
    }
  }
);
  wbSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wSourceFileFolder.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wSourceFileFolder.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wlDestinationFileFolder=new Label(wFilesComp,SWT.RIGHT);
  wlDestinationFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.DestinationFileFolder.Label"));
  props.setLook(wlDestinationFileFolder);
  fdlDestinationFileFolder=new FormData();
  fdlDestinationFileFolder.left=new FormAttachment(0,0);
  fdlDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  fdlDestinationFileFolder.right=new FormAttachment(middle,-margin);
  wlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);
  wbDestinationDirectory=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDestinationDirectory);
  wbDestinationDirectory.setText(BaseMessages.getString(PKG,"JobCopyFiles.BrowseFolders.Label"));
  FormData fdbDestinationDirectory=new FormData();
  fdbDestinationDirectory.right=new FormAttachment(100,0);
  fdbDestinationDirectory.top=new FormAttachment(wSourceFileFolder,margin);
  wbDestinationDirectory.setLayoutData(fdbDestinationDirectory);
  wbDestinationDirectory.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wDestinationFileFolder.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wDestinationFileFolder.setText(dir);
      }
    }
  }
);
  wbDestinationFileFolder=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDestinationFileFolder);
  wbDestinationFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.BrowseFiles.Label"));
  FormData fdbDestinationFileFolder=new FormData();
  fdbDestinationFileFolder.right=new FormAttachment(wbDestinationDirectory,-margin);
  fdbDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  wbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);
  wDestinationFileFolder=new TextVar(jobMeta,wFilesComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wDestinationFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.DestinationFileFolder.Tooltip"));
  props.setLook(wDestinationFileFolder);
  wDestinationFileFolder.addModifyListener(lsMod);
  fdDestinationFileFolder=new FormData();
  fdDestinationFileFolder.left=new FormAttachment(middle,0);
  fdDestinationFileFolder.top=new FormAttachment(wSourceFileFolder,margin);
  fdDestinationFileFolder.right=new FormAttachment(wbSourceFileFolder,-55);
  wDestinationFileFolder.setLayoutData(fdDestinationFileFolder);
  wbDestinationFileFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wDestinationFileFolder.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wDestinationFileFolder.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wbdSourceFileFolder=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbdSourceFileFolder);
  wbdSourceFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.FilenameDelete.Button"));
  wbdSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.FilenameDelete.Tooltip"));
  fdbdSourceFileFolder=new FormData();
  fdbdSourceFileFolder.right=new FormAttachment(100,0);
  fdbdSourceFileFolder.top=new FormAttachment(wDestinationFileFolder,40);
  wbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);
  wbeSourceFileFolder=new Button(wFilesComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbeSourceFileFolder);
  wbeSourceFileFolder.setText(BaseMessages.getString(PKG,"JobCopyFiles.FilenameEdit.Button"));
  wbeSourceFileFolder.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.FilenameEdit.Tooltip"));
  fdbeSourceFileFolder=new FormData();
  fdbeSourceFileFolder.right=new FormAttachment(100,0);
  fdbeSourceFileFolder.left=new FormAttachment(wbdSourceFileFolder,0,SWT.LEFT);
  fdbeSourceFileFolder.top=new FormAttachment(wbdSourceFileFolder,margin);
  wbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);
  wlWildcard=new Label(wFilesComp,SWT.RIGHT);
  wlWildcard.setText(BaseMessages.getString(PKG,"JobCopyFiles.Wildcard.Label"));
  props.setLook(wlWildcard);
  fdlWildcard=new FormData();
  fdlWildcard.left=new FormAttachment(0,0);
  fdlWildcard.top=new FormAttachment(wDestinationFileFolder,margin);
  fdlWildcard.right=new FormAttachment(middle,-margin);
  wlWildcard.setLayoutData(fdlWildcard);
  wWildcard=new TextVar(jobMeta,wFilesComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wWildcard.setToolTipText(BaseMessages.getString(PKG,"JobCopyFiles.Wildcard.Tooltip"));
  props.setLook(wWildcard);
  wWildcard.addModifyListener(lsMod);
  fdWildcard=new FormData();
  fdWildcard.left=new FormAttachment(middle,0);
  fdWildcard.top=new FormAttachment(wDestinationFileFolder,margin);
  fdWildcard.right=new FormAttachment(wbSourceFileFolder,-55);
  wWildcard.setLayoutData(fdWildcard);
  wlFields=new Label(wFilesComp,SWT.NONE);
  wlFields.setText(BaseMessages.getString(PKG,"JobCopyFiles.Fields.Label"));
  props.setLook(wlFields);
  fdlFields=new FormData();
  fdlFields.left=new FormAttachment(0,0);
  fdlFields.right=new FormAttachment(middle,-margin);
  fdlFields.top=new FormAttachment(wWildcard,margin);
  wlFields.setLayoutData(fdlFields);
  int rows=jobEntry.source_filefolder == null ? 1 : (jobEntry.source_filefolder.length == 0 ? 0 : jobEntry.source_filefolder.length);
  final int FieldsRows=rows;
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"JobCopyFiles.Fields.SourceFileFolder.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"JobCopyFiles.Fields.DestinationFileFolder.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"JobCopyFiles.Fields.Wildcard.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false)};
  colinf[0].setUsingVariables(true);
  colinf[0].setToolTip(BaseMessages.getString(PKG,"JobCopyFiles.Fields.SourceFileFolder.Tooltip"));
  colinf[1].setUsingVariables(true);
  colinf[1].setToolTip(BaseMessages.getString(PKG,"JobCopyFiles.Fields.DestinationFileFolder.Tooltip"));
  colinf[2].setUsingVariables(true);
  colinf[2].setToolTip(BaseMessages.getString(PKG,"JobCopyFiles.Fields.Wildcard.Tooltip"));
  wFields=new TableView(jobMeta,wFilesComp,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(wlFields,margin);
  fdFields.right=new FormAttachment(100,-75);
  fdFields.bottom=new FormAttachment(100,-margin);
  wFields.setLayoutData(fdFields);
  RefreshArgFromPrevious();
  SelectionAdapter selA=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      wFields.add(new String[]{wSourceFileFolder.getText(),wDestinationFileFolder.getText(),wWildcard.getText()});
      wSourceFileFolder.setText("");
      wDestinationFileFolder.setText("");
      wWildcard.setText("");
      wFields.removeEmptyRows();
      wFields.setRowNums();
      wFields.optWidth(true);
    }
  }
;
  wbaSourceFileFolder.addSelectionListener(selA);
  wSourceFileFolder.addSelectionListener(selA);
  wbdSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int[] idx=wFields.getSelectionIndices();
      wFields.remove(idx);
      wFields.removeEmptyRows();
      wFields.setRowNums();
    }
  }
);
  wbeSourceFileFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx=wFields.getSelectionIndex();
      if (idx >= 0) {
        String[] string=wFields.getItem(idx);
        wSourceFileFolder.setText(string[0]);
        wDestinationFileFolder.setText(string[1]);
        wWildcard.setText(string[2]);
        wFields.remove(idx);
      }
      wFields.removeEmptyRows();
      wFields.setRowNums();
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  Label lBottomSeparator=new Label(shell,SWT.HORIZONTAL | SWT.SEPARATOR);
  FormData fdBottomSeparator=new FormData();
  fdBottomSeparator.top=new FormAttachment(wTabFolder,margin * 3);
  fdBottomSeparator.left=new FormAttachment(0,0);
  fdBottomSeparator.right=new FormAttachment(100,0);
  lBottomSeparator.setLayoutData(fdBottomSeparator);
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,lBottomSeparator);
  FormData fdOK=(FormData)wOK.getLayoutData();
  FormData fdHelpButton=new FormData();
  fdHelpButton.top=fdOK.top;
  fdHelpButton.left=new FormAttachment(0,margin);
  helpButton.setLayoutData(fdHelpButton);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wSourceFileFolder.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  CheckIncludeSubFolders();
  wTabFolder.setSelection(0);
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return jobEntry;
}
