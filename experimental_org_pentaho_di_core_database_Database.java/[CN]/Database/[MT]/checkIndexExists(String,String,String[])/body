{
  String tablename=databaseMeta.getQuotedSchemaTableCombination(schemaName,tableName);
  if (!checkTableExists(tablename))   return false;
  log.logDebug(toString(),"CheckIndexExists() tablename = " + tablename + " type = "+ databaseMeta.getDatabaseTypeDesc());
  boolean exists[]=new boolean[idx_fields.length];
  for (int i=0; i < exists.length; i++)   exists[i]=false;
  try {
switch (databaseMeta.getDatabaseType()) {
case DatabaseMeta.TYPE_DATABASE_MSSQL:
{
        StringBuffer sql=new StringBuffer(128);
        sql.append("select i.name table_name, c.name column_name ");
        sql.append("from     sysindexes i, sysindexkeys k, syscolumns c ");
        sql.append("where    i.name = '" + tablename + "' ");
        sql.append("AND      i.id = k.id ");
        sql.append("AND      i.id = c.id ");
        sql.append("AND      k.colid = c.colid ");
        ResultSet res=null;
        try {
          res=openQuery(sql.toString());
          if (res != null) {
            Object[] row=getRow(res);
            while (row != null) {
              String column=rowMeta.getString(row,"column_name","");
              int idx=Const.indexOfString(column,idx_fields);
              if (idx >= 0)               exists[idx]=true;
              row=getRow(res);
            }
          }
 else {
            return false;
          }
        }
  finally {
          if (res != null)           closeQuery(res);
        }
      }
    break;
case DatabaseMeta.TYPE_DATABASE_ORACLE:
{
    String sql="SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = '" + tableName + "'";
    ResultSet res=null;
    try {
      res=openQuery(sql);
      if (res != null) {
        Object[] row=getRow(res);
        while (row != null) {
          String column=rowMeta.getString(row,"COLUMN_NAME","");
          int idx=Const.indexOfString(column,idx_fields);
          if (idx >= 0) {
            exists[idx]=true;
          }
          row=getRow(res);
        }
      }
 else {
        return false;
      }
    }
  finally {
      if (res != null)       closeQuery(res);
    }
  }
break;
case DatabaseMeta.TYPE_DATABASE_ACCESS:
{
ResultSet indexList=null;
try {
  indexList=getDatabaseMetaData().getIndexInfo(null,null,tablename,false,true);
  while (indexList.next()) {
    String column=indexList.getString("COLUMN_NAME");
    int idx=Const.indexOfString(column,idx_fields);
    if (idx >= 0) {
      exists[idx]=true;
    }
  }
}
  finally {
  if (indexList != null)   indexList.close();
}
}
break;
default :
{
ResultSet indexList=null;
try {
indexList=getDatabaseMetaData().getIndexInfo(null,null,tablename,false,true);
while (indexList.next()) {
String column=indexList.getString("COLUMN_NAME");
int idx=Const.indexOfString(column,idx_fields);
if (idx >= 0) {
  exists[idx]=true;
}
}
}
  finally {
if (indexList != null) indexList.close();
}
}
break;
}
boolean all=true;
for (int i=0; i < exists.length && all; i++) if (!exists[i]) all=false;
return all;
}
 catch (Exception e) {
log.logError(toString(),Const.getStackTracker(e));
throw new KettleDatabaseException("Unable to determine if indexes exists on table [" + tablename + "]",e);
}
}
