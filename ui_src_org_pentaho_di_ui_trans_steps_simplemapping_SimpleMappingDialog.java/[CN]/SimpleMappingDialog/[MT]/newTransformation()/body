{
  RowMetaInterface inFields=new RowMeta();
  try {
    inFields=transMeta.getPrevStepFields(stepname);
  }
 catch (  Exception e) {
    new ErrorDialog(shell,"Error","Unable to get input fields from previous step",e);
  }
  TransMeta newTransMeta=new TransMeta();
  newTransMeta.getDatabases().addAll(transMeta.getDatabases());
  newTransMeta.setUsingUniqueConnections(transMeta.isUsingUniqueConnections());
  String INPUTSTEP_NAME="Mapping Input";
  MappingInputMeta inputMeta=new MappingInputMeta();
  inputMeta.allocate(inFields.size());
  for (int i=0; i < inFields.size(); i++) {
    ValueMetaInterface valueMeta=inFields.getValueMeta(i);
    inputMeta.getFieldName()[i]=valueMeta.getName();
    inputMeta.getFieldType()[i]=valueMeta.getType();
    inputMeta.getFieldLength()[i]=valueMeta.getLength();
    inputMeta.getFieldPrecision()[i]=valueMeta.getPrecision();
  }
  StepMeta inputStep=new StepMeta(INPUTSTEP_NAME,inputMeta);
  inputStep.setLocation(50,50);
  inputStep.setDraw(true);
  newTransMeta.addStep(inputStep);
  String OUTPUTSTEP_NAME="Mapping Output";
  MappingOutputMeta outputMeta=new MappingOutputMeta();
  outputMeta.allocate(0);
  StepMeta outputStep=new StepMeta(OUTPUTSTEP_NAME,outputMeta);
  outputStep.setLocation(500,50);
  outputStep.setDraw(true);
  newTransMeta.addStep(outputStep);
  newTransMeta.addTransHop(new TransHopMeta(inputStep,outputStep));
  TransDialog transDialog=new TransDialog(shell,SWT.NONE,newTransMeta,repository);
  if (transDialog.open() != null) {
    Spoon spoon=Spoon.getInstance();
    spoon.addTransGraph(newTransMeta);
    boolean saved=false;
    try {
      if (repository != null) {
        if (!Const.isEmpty(newTransMeta.getName())) {
          wStepname.setText(newTransMeta.getName());
        }
        saved=spoon.saveToRepository(newTransMeta,false);
        if (repository.getRepositoryMeta().getRepositoryCapabilities().supportsReferences()) {
          setSpecificationMethod(ObjectLocationSpecificationMethod.REPOSITORY_BY_REFERENCE);
        }
 else {
          setSpecificationMethod(ObjectLocationSpecificationMethod.REPOSITORY_BY_NAME);
        }
      }
 else {
        saved=spoon.saveToFile(newTransMeta);
        setSpecificationMethod(ObjectLocationSpecificationMethod.FILENAME);
      }
    }
 catch (    Exception e) {
      new ErrorDialog(shell,"Error","Error saving new transformation",e);
    }
    if (saved) {
      setRadioButtons();
switch (getSpecificationMethod()) {
case FILENAME:
        wFilename.setText(Const.NVL(newTransMeta.getFilename(),""));
      break;
case REPOSITORY_BY_NAME:
    wTransname.setText(Const.NVL(newTransMeta.getName(),""));
  wDirectory.setText(newTransMeta.getRepositoryDirectory().getPath());
break;
case REPOSITORY_BY_REFERENCE:
getByReferenceData(newTransMeta.getObjectId());
break;
default :
break;
}
}
}
}
