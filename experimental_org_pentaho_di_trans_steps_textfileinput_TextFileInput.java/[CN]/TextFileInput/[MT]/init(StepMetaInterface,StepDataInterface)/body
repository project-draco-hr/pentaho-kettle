{
  meta=(TextFileInputMeta)smi;
  data=(TextFileInputData)sdi;
  if (super.init(smi,sdi)) {
    initErrorHandling();
    initReplayFactory();
    data.setDateFormatLenient(meta.isDateFormatLenient());
    if (!meta.getDateFormatLocale().equals(Locale.getDefault())) {
      if (log.isDetailed())       logDetailed("Applying date format locale: " + meta.getDateFormatLocale());
      data.daf=new SimpleDateFormat("yyy/MM/dd HH:mm:ss.SSS",meta.getDateFormatLocale());
    }
    data.files=meta.getTextFileList();
    data.filterProcessor=new TextFileFilterProcessor(meta.getFilter());
    if ((transmeta.getPreviousResult() == null || transmeta.getPreviousResult().getResultFiles() == null || transmeta.getPreviousResult().getResultFiles().size() == 0) && data.files.nrOfMissingFiles() > 0 && !meta.isAcceptingFilenames() && !meta.isErrorIgnored()) {
      logError(Messages.getString("TextFileInput.Log.Error.NoFilesSpecified"));
      return false;
    }
    String nr=KettleVariables.getInstance().getVariable(Const.INTERNAL_VARIABLE_SLAVE_TRANS_NUMBER);
    if (!Const.isEmpty(nr)) {
      logBasic("Running on slave server #" + nr + " : assuming that each slave reads a dedicated part of the same file(s).");
    }
    return true;
  }
  return false;
}
