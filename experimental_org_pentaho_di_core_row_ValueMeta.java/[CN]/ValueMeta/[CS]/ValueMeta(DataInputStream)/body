{
  this();
  try {
    type=inputStream.readInt();
    storageType=inputStream.readInt();
    if (storageType == STORAGE_TYPE_INDEXED) {
      int indexSize=inputStream.readInt();
      if (indexSize < 0) {
        index=null;
      }
 else {
        index=new Object[indexSize];
        for (int i=0; i < indexSize; i++) {
switch (type) {
case TYPE_STRING:
            index[i]=readString(inputStream);
          break;
case TYPE_NUMBER:
        index[i]=readNumber(inputStream);
      break;
case TYPE_INTEGER:
    index[i]=readInteger(inputStream);
  break;
case TYPE_DATE:
index[i]=readDate(inputStream);
break;
case TYPE_BIGNUMBER:
index[i]=readBigNumber(inputStream);
break;
case TYPE_BOOLEAN:
index[i]=readBoolean(inputStream);
break;
case TYPE_BINARY:
index[i]=readBinary(inputStream);
break;
default :
throw new KettleFileException("Unable to de-serialize indexed storage type for data type " + getType());
}
}
}
}
name=readString(inputStream);
length=inputStream.readInt();
precision=inputStream.readInt();
origin=readString(inputStream);
comments=readString(inputStream);
conversionMask=readString(inputStream);
decimalSymbol=readString(inputStream);
groupingSymbol=readString(inputStream);
currencySymbol=readString(inputStream);
caseInsensitive=inputStream.readBoolean();
sortedDescending=inputStream.readBoolean();
}
 catch (IOException e) {
throw new KettleFileException("Unable to read value metadata from input stream",e);
}
}
