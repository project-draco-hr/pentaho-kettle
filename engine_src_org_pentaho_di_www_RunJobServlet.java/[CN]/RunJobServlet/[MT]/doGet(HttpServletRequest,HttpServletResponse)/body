{
  if (isJettyMode() && !request.getContextPath().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"RunJobServlet.Log.RunJobRequested"));
  String[] knownOptions=new String[]{"job","level"};
  String transOption=request.getParameter("job");
  String levelOption=request.getParameter("level");
  response.setStatus(HttpServletResponse.SC_OK);
  PrintWriter out=response.getWriter();
  try {
    final Repository repository=transformationMap.getSlaveServerConfig().getRepository();
    final JobMeta jobMeta=loadJob(repository,transOption);
    String[] parameters=jobMeta.listParameters();
    Enumeration<?> parameterNames=request.getParameterNames();
    while (parameterNames.hasMoreElements()) {
      String parameter=(String)parameterNames.nextElement();
      String[] values=request.getParameterValues(parameter);
      if (Const.indexOfString(parameter,knownOptions) < 0) {
        if (Const.indexOfString(parameter,parameters) < 0) {
          jobMeta.setVariable(parameter,values[0]);
        }
 else {
          jobMeta.setParameterValue(parameter,values[0]);
        }
      }
    }
    JobExecutionConfiguration jobExecutionConfiguration=new JobExecutionConfiguration();
    LogLevel logLevel=LogLevel.getLogLevelForCode(levelOption);
    jobExecutionConfiguration.setLogLevel(logLevel);
    JobConfiguration jobConfiguration=new JobConfiguration(jobMeta,jobExecutionConfiguration);
    String carteObjectId=UUID.randomUUID().toString();
    SimpleLoggingObject servletLoggingObject=new SimpleLoggingObject(CONTEXT_PATH,LoggingObjectType.CARTE,null);
    servletLoggingObject.setContainerObjectId(carteObjectId);
    servletLoggingObject.setLogLevel(logLevel);
    final Job job=new Job(repository,jobMeta,servletLoggingObject);
    job.initializeVariablesFrom(null);
    job.getJobMeta().setInternalKettleVariables(job);
    job.injectVariables(jobConfiguration.getJobExecutionConfiguration().getVariables());
    job.copyParametersFrom(jobMeta);
    job.clearParameters();
    jobMeta.activateParameters();
    job.setSocketRepository(getSocketRepository());
    getJobMap().addJob(job.getJobname(),carteObjectId,job,jobConfiguration);
    String message="Job '" + job.getJobname() + "' was added to the list with id "+ carteObjectId;
    logBasic(message);
    try {
      job.start();
      WebResult webResult=new WebResult(WebResult.STRING_OK,"Job started",carteObjectId);
      out.println(webResult.getXML());
      out.flush();
    }
 catch (    Exception executionException) {
      String logging=KettleLogStore.getAppender().getBuffer(job.getLogChannelId(),false).toString();
      throw new KettleException("Error executing Job: " + logging,executionException);
    }
  }
 catch (  Exception ex) {
    out.println(new WebResult(WebResult.STRING_ERROR,BaseMessages.getString(PKG,"RunJobServlet.Error.UnexpectedError",Const.CR + Const.getStackTracker(ex))));
  }
}
