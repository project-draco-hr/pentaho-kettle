{
  try {
    if (data.gzis != null) {
      data.gzis.close();
    }
    if (data.fis != null) {
      data.fis.close();
    }
    if (data.filenr >= data.filenames.length) {
      return false;
    }
    FileObject fileObject=KettleVFS.getFileObject(data.filenames[data.filenr]);
    data.fis=KettleVFS.getInputStream(fileObject);
    if (meta.isLazyConversionActive()) {
      data.binaryFilename=data.filenames[data.filenr].getBytes();
    }
    data.gzis=new GZIPInputStream(data.fis,10000);
    data.fileReadPosition=0L;
    data.eofReached=false;
    if (data.parallel) {
      data.blockSize=2 * data.bufferSize;
      long bytesToSkip=data.stepNumber * data.blockSize;
      if (bytesToSkip > 0) {
        logBasic("Skipping " + bytesToSkip + " bytes to go to position "+ bytesToSkip+ " for step copy "+ data.stepNumber);
        long bytesSkipped=0L;
        while (bytesSkipped < bytesToSkip) {
          long n=data.gzis.skip(bytesToSkip - bytesSkipped);
          if (n <= 0) {
            data.eofReached=true;
            return false;
          }
          bytesSkipped+=n;
        }
        data.fileReadPosition+=bytesSkipped;
        data.totalBytesRead=0L;
        readOneRow(false);
      }
 else {
        data.totalBytesRead=0L;
        if (meta.isHeaderPresent()) {
          readOneRow(false);
        }
      }
    }
 else {
      data.blockSize=Long.MAX_VALUE;
      if (meta.isHeaderPresent()) {
        readOneRow(false);
      }
    }
    if (meta.isAddResultFile()) {
      ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,fileObject,getTransMeta().getName(),toString());
      resultFile.setComment("File was read by a Csv input step");
      addResultFile(resultFile);
    }
    data.filenr++;
    data.rowNumber=1L;
    return true;
  }
 catch (  Exception e) {
    throw new KettleException(e);
  }
}
