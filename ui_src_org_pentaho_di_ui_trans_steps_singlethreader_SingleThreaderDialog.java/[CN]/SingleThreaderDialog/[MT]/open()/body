{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  setShellImage(shell,singleThreaderMeta);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      singleThreaderMeta.setChanged();
    }
  }
;
  changed=singleThreaderMeta.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Shell.Title"));
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  gTransGroup=new Group(shell,SWT.SHADOW_ETCHED_IN);
  gTransGroup.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.TransGroup.Label"));
  ;
  gTransGroup.setBackground(shell.getBackground());
  FormLayout transGroupLayout=new FormLayout();
  transGroupLayout.marginLeft=margin * 2;
  transGroupLayout.marginTop=margin * 2;
  transGroupLayout.marginRight=margin * 2;
  transGroupLayout.marginBottom=margin * 2;
  gTransGroup.setLayout(transGroupLayout);
  radioFilename=new Button(gTransGroup,SWT.RADIO);
  props.setLook(radioFilename);
  radioFilename.setSelection(false);
  radioFilename.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioFile.Label"));
  radioFilename.setToolTipText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioFile.Tooltip",Const.CR));
  FormData fdFileRadio=new FormData();
  fdFileRadio.left=new FormAttachment(0,0);
  fdFileRadio.right=new FormAttachment(100,0);
  fdFileRadio.top=new FormAttachment(0,0);
  radioFilename.setLayoutData(fdFileRadio);
  radioFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.FILENAME;
      setRadioButtons();
    }
  }
);
  wbbFilename=new Button(gTransGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wbbFilename);
  wbbFilename.setText(BaseMessages.getString(PKG,"System.Button.Browse"));
  wbbFilename.setToolTipText(BaseMessages.getString(PKG,"System.Tooltip.BrowseForFileOrDirAndAdd"));
  FormData fdbFilename=new FormData();
  fdbFilename.right=new FormAttachment(100,0);
  fdbFilename.top=new FormAttachment(radioFilename,margin);
  wbbFilename.setLayoutData(fdbFilename);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectFileTrans();
    }
  }
);
  wFilename=new TextVar(transMeta,gTransGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename);
  wFilename.addModifyListener(lsMod);
  FormData fdFilename=new FormData();
  fdFilename.left=new FormAttachment(0,25);
  fdFilename.right=new FormAttachment(wbbFilename,-margin);
  fdFilename.top=new FormAttachment(wbbFilename,0,SWT.CENTER);
  wFilename.setLayoutData(fdFilename);
  wFilename.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.FILENAME;
      setRadioButtons();
    }
  }
);
  radioByName=new Button(gTransGroup,SWT.RADIO);
  props.setLook(radioByName);
  radioByName.setSelection(false);
  radioByName.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioRep.Label"));
  radioByName.setToolTipText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioRep.Tooltip",Const.CR));
  FormData fdRepRadio=new FormData();
  fdRepRadio.left=new FormAttachment(0,0);
  fdRepRadio.right=new FormAttachment(100,0);
  fdRepRadio.top=new FormAttachment(wbbFilename,2 * margin);
  radioByName.setLayoutData(fdRepRadio);
  radioByName.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_NAME;
      setRadioButtons();
    }
  }
);
  wbTrans=new Button(gTransGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTrans);
  wbTrans.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Select.Button"));
  wbTrans.setToolTipText(BaseMessages.getString(PKG,"System.Tooltip.BrowseForFileOrDirAndAdd"));
  FormData fdbTrans=new FormData();
  fdbTrans.right=new FormAttachment(100,0);
  fdbTrans.top=new FormAttachment(radioByName,2 * margin);
  wbTrans.setLayoutData(fdbTrans);
  wbTrans.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectRepositoryTrans();
    }
  }
);
  wDirectory=new TextVar(transMeta,gTransGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wDirectory);
  wDirectory.addModifyListener(lsMod);
  FormData fdTransDir=new FormData();
  fdTransDir.left=new FormAttachment(middle + (100 - middle) / 2,0);
  fdTransDir.right=new FormAttachment(wbTrans,-margin);
  fdTransDir.top=new FormAttachment(wbTrans,0,SWT.CENTER);
  wDirectory.setLayoutData(fdTransDir);
  wDirectory.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_NAME;
      setRadioButtons();
    }
  }
);
  wTransname=new TextVar(transMeta,gTransGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTransname);
  wTransname.addModifyListener(lsMod);
  FormData fdTransName=new FormData();
  fdTransName.left=new FormAttachment(0,25);
  fdTransName.right=new FormAttachment(wDirectory,-margin);
  fdTransName.top=new FormAttachment(wbTrans,0,SWT.CENTER);
  wTransname.setLayoutData(fdTransName);
  wTransname.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_NAME;
      setRadioButtons();
    }
  }
);
  radioByReference=new Button(gTransGroup,SWT.RADIO);
  props.setLook(radioByReference);
  radioByReference.setSelection(false);
  radioByReference.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioRepByReference.Label"));
  radioByReference.setToolTipText(BaseMessages.getString(PKG,"SingleThreaderDialog.RadioRepByReference.Tooltip",Const.CR));
  FormData fdRadioByReference=new FormData();
  fdRadioByReference.left=new FormAttachment(0,0);
  fdRadioByReference.right=new FormAttachment(100,0);
  fdRadioByReference.top=new FormAttachment(wTransname,2 * margin);
  radioByReference.setLayoutData(fdRadioByReference);
  radioByReference.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_REFERENCE;
      setRadioButtons();
    }
  }
);
  wbByReference=new Button(gTransGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wbByReference);
  wbByReference.setImage(GUIResource.getInstance().getImageTransGraph());
  wbByReference.setToolTipText(BaseMessages.getString(PKG,"SingleThreaderDialog.SelectTrans.Tooltip"));
  FormData fdbByReference=new FormData();
  fdbByReference.top=new FormAttachment(radioByReference,margin);
  fdbByReference.right=new FormAttachment(100,0);
  wbByReference.setLayoutData(fdbByReference);
  wbByReference.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectTransformationByReference();
    }
  }
);
  wByReference=new TextVar(transMeta,gTransGroup,SWT.SINGLE | SWT.LEFT | SWT.BORDER| SWT.READ_ONLY);
  props.setLook(wByReference);
  wByReference.addModifyListener(lsMod);
  FormData fdByReference=new FormData();
  fdByReference.top=new FormAttachment(radioByReference,margin);
  fdByReference.left=new FormAttachment(0,25);
  fdByReference.right=new FormAttachment(wbByReference,-margin);
  wByReference.setLayoutData(fdByReference);
  wByReference.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      specificationMethod=ObjectLocationSpecificationMethod.REPOSITORY_BY_REFERENCE;
      setRadioButtons();
    }
  }
);
  wNewTrans=new Button(gTransGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wNewTrans);
  wNewTrans.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.New.Button"));
  FormData fdNewTrans=new FormData();
  fdNewTrans.left=new FormAttachment(0,0);
  fdNewTrans.top=new FormAttachment(wByReference,3 * margin);
  wNewTrans.setLayoutData(fdNewTrans);
  wNewTrans.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      newTransformation();
    }
  }
);
  wEditTrans=new Button(gTransGroup,SWT.PUSH | SWT.CENTER);
  props.setLook(wEditTrans);
  wEditTrans.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Edit.Button"));
  wEditTrans.setToolTipText(BaseMessages.getString(PKG,"System.Tooltip.BrowseForFileOrDirAndAdd"));
  FormData fdEditTrans=new FormData();
  fdEditTrans.left=new FormAttachment(wNewTrans,2 * margin);
  fdEditTrans.top=new FormAttachment(wByReference,3 * margin);
  wEditTrans.setLayoutData(fdEditTrans);
  wEditTrans.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editTrans();
    }
  }
);
  FormData fdTransGroup=new FormData();
  fdTransGroup.left=new FormAttachment(0,0);
  fdTransGroup.top=new FormAttachment(wStepname,2 * margin);
  fdTransGroup.right=new FormAttachment(100,0);
  gTransGroup.setLayoutData(fdTransGroup);
  wGetInjectStep=new Button(shell,SWT.PUSH);
  wGetInjectStep.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Button.Get"));
  FormData fdGetInjectStep=new FormData();
  fdGetInjectStep.top=new FormAttachment(gTransGroup,margin);
  fdGetInjectStep.right=new FormAttachment(100,0);
  wGetInjectStep.setLayoutData(fdGetInjectStep);
  wGetInjectStep.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      try {
        loadTransformation();
        String stepname=mappingTransMeta == null ? "" : Const.NVL(getInjectorStep(mappingTransMeta),"");
        wInjectStep.setText(stepname);
      }
 catch (      Exception e) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"SingleThreaderDialog.ErrorLoadingTransformation.DialogTitle"),BaseMessages.getString(PKG,"SingleThreaderDialog.ErrorLoadingTransformation.DialogMessage"),e);
      }
    }
  }
);
  wInjectStep=new LabelTextVar(transMeta,shell,BaseMessages.getString(PKG,"SingleThreaderDialog.InjectStep.Label"),BaseMessages.getString(PKG,"SingleThreaderDialog.InjectStep.Tooltip"));
  wInjectStep.addModifyListener(lsMod);
  FormData fdInjectStep=new FormData();
  fdInjectStep.left=new FormAttachment(0,0);
  fdInjectStep.top=new FormAttachment(gTransGroup,2 * margin);
  fdInjectStep.right=new FormAttachment(wGetInjectStep,-margin);
  wInjectStep.setLayoutData(fdInjectStep);
  wGetRetrieveStep=new Button(shell,SWT.PUSH);
  wGetRetrieveStep.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.Button.Get"));
  FormData fdGetRetrieveStep=new FormData();
  fdGetRetrieveStep.top=new FormAttachment(wInjectStep,2 * margin);
  fdGetRetrieveStep.right=new FormAttachment(100,0);
  wGetRetrieveStep.setLayoutData(fdGetRetrieveStep);
  wGetRetrieveStep.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      try {
        loadTransformation();
        if (mappingTransMeta != null) {
          String[] stepNames=mappingTransMeta.getStepNames();
          EnterSelectionDialog d=new EnterSelectionDialog(shell,stepNames,BaseMessages.getString(PKG,"SingleThreaderDialog.SelectStep.Title"),BaseMessages.getString(PKG,"SingleThreaderDialog.SelectStep.Message"));
          String step=d.open();
          if (step != null) {
            wRetrieveStep.setText(step);
          }
        }
      }
 catch (      Exception e) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"SingleThreaderDialog.ErrorLoadingTransformation.DialogTitle"),BaseMessages.getString(PKG,"SingleThreaderDialog.ErrorLoadingTransformation.DialogMessage"),e);
      }
    }
  }
);
  wRetrieveStep=new LabelTextVar(transMeta,shell,BaseMessages.getString(PKG,"SingleThreaderDialog.RetrieveStep.Label"),BaseMessages.getString(PKG,"SingleThreaderDialog.RetrieveStep.Tooltip"));
  wRetrieveStep.addModifyListener(lsMod);
  FormData fdRetrieveStep=new FormData();
  fdRetrieveStep.left=new FormAttachment(0,0);
  fdRetrieveStep.top=new FormAttachment(wInjectStep,margin);
  fdRetrieveStep.right=new FormAttachment(wGetRetrieveStep,-margin);
  wRetrieveStep.setLayoutData(fdRetrieveStep);
  wBatchSize=new LabelTextVar(transMeta,shell,BaseMessages.getString(PKG,"SingleThreaderDialog.BatchSize.Label"),BaseMessages.getString(PKG,"SingleThreaderDialog.BatchSize.Tooltip"));
  FormData fdBatchSize=new FormData();
  fdBatchSize.left=new FormAttachment(0,0);
  fdBatchSize.top=new FormAttachment(wRetrieveStep,margin);
  fdBatchSize.right=new FormAttachment(wGetRetrieveStep,-margin);
  wBatchSize.setLayoutData(fdBatchSize);
  wBatchTime=new LabelTextVar(transMeta,shell,BaseMessages.getString(PKG,"SingleThreaderDialog.BatchTime.Label"),BaseMessages.getString(PKG,"SingleThreaderDialog.BatchTime.Tooltip"));
  wBatchTime.addModifyListener(lsMod);
  FormData fdBatchTime=new FormData();
  fdBatchTime.left=new FormAttachment(0,0);
  fdBatchTime.top=new FormAttachment(wBatchSize,margin);
  fdBatchTime.right=new FormAttachment(wGetRetrieveStep,-margin);
  wBatchTime.setLayoutData(fdBatchTime);
  gParametersGroup=new Group(shell,SWT.SHADOW_ETCHED_IN);
  gParametersGroup.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.ParamGroup.Label"));
  ;
  gParametersGroup.setBackground(shell.getBackground());
  FormLayout paramGroupLayout=new FormLayout();
  paramGroupLayout.marginLeft=margin * 2;
  paramGroupLayout.marginTop=margin * 2;
  paramGroupLayout.marginRight=margin * 2;
  paramGroupLayout.marginBottom=margin * 2;
  gParametersGroup.setLayout(paramGroupLayout);
  Label wlPassParams=new Label(gParametersGroup,SWT.RIGHT);
  wlPassParams.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.PassAllParameters.Label"));
  props.setLook(wlPassParams);
  FormData fdlPassParams=new FormData();
  fdlPassParams.left=new FormAttachment(0,0);
  fdlPassParams.top=new FormAttachment(0,0);
  fdlPassParams.right=new FormAttachment(middle,-margin);
  wlPassParams.setLayoutData(fdlPassParams);
  wPassParams=new Button(gParametersGroup,SWT.CHECK);
  props.setLook(wPassParams);
  FormData fdPassParams=new FormData();
  fdPassParams.left=new FormAttachment(middle,0);
  fdPassParams.top=new FormAttachment(0,0);
  fdPassParams.right=new FormAttachment(100,0);
  wPassParams.setLayoutData(fdPassParams);
  wPassParams.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      changed=true;
    }
  }
);
  wbGetParams=new Button(gParametersGroup,SWT.PUSH);
  wbGetParams.setText(BaseMessages.getString(PKG,"SingleThreaderDialog.GetParameters.Button.Label"));
  FormData fdGetParams=new FormData();
  fdGetParams.top=new FormAttachment(wPassParams,margin);
  fdGetParams.right=new FormAttachment(100,0);
  wbGetParams.setLayoutData(fdGetParams);
  wbGetParams.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      getParameters(null);
    }
  }
);
  final int parameterRows=singleThreaderMeta.getParameters() != null ? singleThreaderMeta.getParameters().length : 0;
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo(BaseMessages.getString(PKG,"SingleThreaderDialog.Parameters.Parameter.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo(BaseMessages.getString(PKG,"SingleThreaderDialog.Parameters.Value.Label"),ColumnInfo.COLUMN_TYPE_TEXT,false)};
  colinf[1].setUsingVariables(true);
  wParameters=new TableView(transMeta,gParametersGroup,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,parameterRows,lsMod,props);
  FormData fdParameters=new FormData();
  fdParameters.left=new FormAttachment(0,0);
  fdParameters.top=new FormAttachment(wPassParams,margin);
  fdParameters.right=new FormAttachment(wbGetParams,-margin);
  fdParameters.bottom=new FormAttachment(100,0);
  wParameters.setLayoutData(fdParameters);
  FormData fdParametersComp=new FormData();
  fdParametersComp.left=new FormAttachment(0,0);
  fdParametersComp.top=new FormAttachment(wBatchTime,0);
  fdParametersComp.right=new FormAttachment(100,0);
  fdParametersComp.bottom=new FormAttachment(100,-50);
  gParametersGroup.setLayoutData(fdParametersComp);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,gParametersGroup);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wFilename.addSelectionListener(lsDef);
  wTransname.addSelectionListener(lsDef);
  wBatchSize.addSelectionListener(lsDef);
  wBatchTime.addSelectionListener(lsDef);
  wInjectStep.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  setSize();
  getData();
  singleThreaderMeta.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
