{
  final Long ROWS=10L;
  final int ITERATIONS=100;
  TransMeta transMeta=new TransMeta("testfiles/NormalExecutionTest - WaitUntilFinished.ktr");
  transMeta.setSizeRowset(5);
  for (int t=0; t < ITERATIONS; t++) {
    Trans trans=new Trans(transMeta);
    trans.setLogLevel(LogLevel.NOTHING);
    trans.prepareExecution(null);
    StepInterface injector=trans.findRunThread("Injector");
    StepInterface output=trans.findRunThread("Output");
    RowMeta injectorRowMeta=new RowMeta();
    ((BaseStepMeta)injector.getStepMeta().getStepMetaInterface()).getFields(injectorRowMeta,null,null,null,null,null,null);
    RowProducer producer=trans.addRowProducer(injector.getStepname(),0);
    CountingRowListener countingListener=new CountingRowListener();
    output.addRowListener(countingListener);
    Object[] row=new Object[1];
    trans.startThreads();
    for (Integer i=0; i < ROWS; i++) {
      row[0]=i;
      producer.putRow(injectorRowMeta,row);
    }
    producer.finished();
    trans.waitUntilFinished();
    countingListener.setListening(false);
    assertTrue(trans.isFinished());
    assertEquals("Incorrect number of read rows received",ROWS,countingListener.getRead());
    assertEquals("Incorrect number of written rows received",ROWS,countingListener.getWritten());
    assertEquals("Incorrect number of error rows received",new Long(0),countingListener.getError());
  }
}
