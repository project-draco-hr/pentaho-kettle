{
  String TakeFirstNbrLines="";
  String LineTerminatedby="";
  String FieldTerminatedby="";
  boolean useFieldSeparator=false;
  String UseCodepage="";
  String ErrorfileName="";
  Result result=previousResult;
  result.setResult(false);
  String vfsFilename=environmentSubstitute(filename);
  FileObject fileObject=null;
  if (!Const.isEmpty(vfsFilename)) {
    try {
      fileObject=KettleVFS.getFileObject(vfsFilename,this);
      if (!(fileObject instanceof LocalFile)) {
        throw new KettleException(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.OnlyLocalFileSupported",vfsFilename));
      }
      String realFilename=KettleVFS.getFilename(fileObject);
      File file=new File(realFilename);
      if (file.exists() && file.canRead()) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"JobMssqlBulkLoad.FileExists.Label",realFilename));
        if (connection != null) {
          Database db=new Database(this,connection);
          if (!(db.getDatabaseMeta().getDatabaseInterface() instanceof MSSQLServerDatabaseMeta)) {
            logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.DbNotMSSQL",connection.getDatabaseName()));
            return result;
          }
          db.shareVariablesWith(this);
          try {
            db.connect(parentJob.getTransactionId(),null);
            String realSchemaname=environmentSubstitute(schemaname);
            String realTablename=environmentSubstitute(tablename);
            if (db.checkTableExists(realTablename)) {
              if (log.isDetailed())               logDetailed(BaseMessages.getString(PKG,"JobMssqlBulkLoad.TableExists.Label",realTablename));
              if (schemaname != null)               realTablename=realSchemaname + "." + realTablename;
              String Fieldterminator=getRealFieldTerminator();
              if (Const.isEmpty(Fieldterminator) && (datafiletype.equals("char") || datafiletype.equals("widechar"))) {
                logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.FieldTerminatorMissing"));
                return result;
              }
 else {
                if (datafiletype.equals("char") || datafiletype.equals("widechar")) {
                  useFieldSeparator=true;
                  FieldTerminatedby="FIELDTERMINATOR='" + Fieldterminator + "'";
                }
              }
              if (codepage.equals("Specific")) {
                String realCodePage=environmentSubstitute(codepage);
                if (specificcodepage.length() < 0) {
                  logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.SpecificCodePageMissing"));
                  return result;
                }
 else                 UseCodepage="CODEPAGE = '" + realCodePage + "'";
              }
 else {
                UseCodepage="CODEPAGE = '" + codepage + "'";
              }
              String realErrorFile=environmentSubstitute(errorfilename);
              if (realErrorFile != null) {
                File errorfile=new File(realErrorFile);
                if (errorfile.exists() && !adddatetime) {
                  logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.ErrorFileExists"));
                  return result;
                }
                if (adddatetime) {
                  SimpleDateFormat daf=new SimpleDateFormat();
                  Date now=new Date();
                  daf.applyPattern("yyyMMdd_HHmmss");
                  String d=daf.format(now);
                  ErrorfileName="ERRORFILE ='" + realErrorFile + "_"+ d+ "'";
                }
 else                 ErrorfileName="ERRORFILE ='" + realErrorFile + "'";
              }
              String Rowterminator=getRealLineterminated();
              if (!Const.isEmpty(Rowterminator))               LineTerminatedby="ROWTERMINATOR='" + Rowterminator + "'";
              if (startfile > 0)               TakeFirstNbrLines="FIRSTROW=" + startfile;
              if (endfile > 0)               TakeFirstNbrLines="LASTROW=" + endfile;
              String SQLBULKLOAD="";
              if (truncate)               SQLBULKLOAD="TRUNCATE TABLE " + realTablename + ";";
              SQLBULKLOAD=SQLBULKLOAD + "BULK INSERT " + realTablename+ " FROM "+ "'"+ realFilename.replace('\\','/')+ "'";
              SQLBULKLOAD=SQLBULKLOAD + " WITH (";
              if (useFieldSeparator)               SQLBULKLOAD=SQLBULKLOAD + FieldTerminatedby;
 else               SQLBULKLOAD=SQLBULKLOAD + "DATAFILETYPE ='" + datafiletype+ "'";
              if (LineTerminatedby.length() > 0)               SQLBULKLOAD=SQLBULKLOAD + "," + LineTerminatedby;
              if (TakeFirstNbrLines.length() > 0)               SQLBULKLOAD=SQLBULKLOAD + "," + TakeFirstNbrLines;
              if (UseCodepage.length() > 0)               SQLBULKLOAD=SQLBULKLOAD + "," + UseCodepage;
              String realFormatFile=environmentSubstitute(formatfilename);
              if (realFormatFile != null)               SQLBULKLOAD=SQLBULKLOAD + ", FORMATFILE='" + realFormatFile+ "'";
              if (firetriggers)               SQLBULKLOAD=SQLBULKLOAD + ",FIRE_TRIGGERS";
              if (keepnulls)               SQLBULKLOAD=SQLBULKLOAD + ",KEEPNULLS";
              if (keepidentity)               SQLBULKLOAD=SQLBULKLOAD + ",KEEPIDENTITY";
              if (checkconstraints)               SQLBULKLOAD=SQLBULKLOAD + ",CHECK_CONSTRAINTS";
              if (tablock)               SQLBULKLOAD=SQLBULKLOAD + ",TABLOCK";
              if (orderby != null)               SQLBULKLOAD=SQLBULKLOAD + ",ORDER ( " + orderby+ " "+ orderdirection+ ")";
              if (ErrorfileName.length() > 0)               SQLBULKLOAD=SQLBULKLOAD + ", " + ErrorfileName;
              if (maxerrors > 0)               SQLBULKLOAD=SQLBULKLOAD + ", MAXERRORS=" + maxerrors;
              if (batchsize > 0)               SQLBULKLOAD=SQLBULKLOAD + ", BATCHSIZE=" + batchsize;
              if (rowsperbatch > 0)               SQLBULKLOAD=SQLBULKLOAD + ", ROWS_PER_BATCH=" + rowsperbatch;
              SQLBULKLOAD=SQLBULKLOAD + ")";
              try {
                db.execStatement(SQLBULKLOAD);
                db.disconnect();
                if (isAddFileToResult()) {
                  ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realFilename,this),parentJob.getJobname(),toString());
                  result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
                }
                result.setResult(true);
              }
 catch (              KettleDatabaseException je) {
                result.setNrErrors(1);
                logError("An error occurred executing this job entry : " + je.getMessage(),je);
              }
catch (              KettleFileException e) {
                logError("An error occurred executing this job entry : " + e.getMessage(),e);
                result.setNrErrors(1);
              }
 finally {
                if (db != null) {
                  db.disconnect();
                  db=null;
                }
              }
            }
 else {
              db.disconnect();
              result.setNrErrors(1);
              if (log.isDetailed())               logDetailed(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.TableNotExists",realTablename));
            }
          }
 catch (          KettleDatabaseException dbe) {
            db.disconnect();
            result.setNrErrors(1);
            logError("An error occurred executing this entry: " + dbe.getMessage());
          }
        }
 else {
          result.setNrErrors(1);
          logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Nodatabase.Label"));
        }
      }
 else {
        result.setNrErrors(1);
        logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Error.FileNotExists",realFilename));
      }
    }
 catch (    Exception e) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.UnexpectedError.Label"),e);
    }
 finally {
      try {
        if (fileObject != null)         fileObject.close();
      }
 catch (      Exception e) {
      }
    }
  }
 else {
    result.setNrErrors(1);
    logError(BaseMessages.getString(PKG,"JobMssqlBulkLoad.Nofilename.Label"));
  }
  return result;
}
