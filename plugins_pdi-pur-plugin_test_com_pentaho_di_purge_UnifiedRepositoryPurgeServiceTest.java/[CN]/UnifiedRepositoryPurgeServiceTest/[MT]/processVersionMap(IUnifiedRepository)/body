{
  final HashMap<String,List<VersionSummary>> versionListMap=new HashMap<String,List<VersionSummary>>();
  List<VersionSummary> mockVersionList=new ArrayList<VersionSummary>();
  Date d=null;
  String fileId=null;
  for (  String[] values : versionData) {
    d=getDate(values[2]);
    if (!values[1].equals(fileId)) {
      if (fileId != null) {
        versionListMap.put(fileId,mockVersionList);
      }
      mockVersionList=new ArrayList<VersionSummary>();
    }
    fileId=values[1];
    VersionSummary versionSummary=new VersionSummary(values[0],fileId,false,d,values[3],values[4],Arrays.asList(new String[]{values[5]}));
    mockVersionList.add(versionSummary);
  }
  versionListMap.put(fileId,mockVersionList);
  final ArgumentCaptor<String> fileIdArgument=ArgumentCaptor.forClass(String.class);
  when(mockRepo.getVersionSummaries(fileIdArgument.capture())).thenAnswer(new Answer<List<VersionSummary>>(){
    public List<VersionSummary> answer(    InvocationOnMock invocation) throws Throwable {
      return versionListMap.get(fileIdArgument.getValue());
    }
  }
);
  return versionListMap;
}
