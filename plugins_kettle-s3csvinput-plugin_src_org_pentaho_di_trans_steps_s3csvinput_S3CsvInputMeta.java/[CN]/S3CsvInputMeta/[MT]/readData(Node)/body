{
  try {
    awsAccessKey=Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(stepnode,"aws_access_key"));
    awsSecretKey=Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(stepnode,"aws_secret_key"));
    bucket=XMLHandler.getTagValue(stepnode,"bucket");
    filename=XMLHandler.getTagValue(stepnode,"filename");
    filenameField=XMLHandler.getTagValue(stepnode,"filename_field");
    rowNumField=XMLHandler.getTagValue(stepnode,"rownum_field");
    includingFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include_filename"));
    delimiter=XMLHandler.getTagValue(stepnode,"separator");
    enclosure=XMLHandler.getTagValue(stepnode,"enclosure");
    maxLineSize=XMLHandler.getTagValue(stepnode,"max_line_size");
    headerPresent="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"header"));
    lazyConversionActive="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"lazy_conversion"));
    runningInParallel="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"parallel"));
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      inputFields[i]=new TextFileInputField();
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      inputFields[i].setName(XMLHandler.getTagValue(fnode,"name"));
      inputFields[i].setType(ValueMetaFactory.getIdForValueMeta(XMLHandler.getTagValue(fnode,"type")));
      inputFields[i].setFormat(XMLHandler.getTagValue(fnode,"format"));
      inputFields[i].setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      inputFields[i].setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      inputFields[i].setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
      inputFields[i].setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      inputFields[i].setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      inputFields[i].setTrimType(ValueMetaString.getTrimTypeByCode(XMLHandler.getTagValue(fnode,"trim_type")));
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
