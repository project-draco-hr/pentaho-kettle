{
  SQLStatement retval=new SQLStatement(stepMeta.getName(),database,null);
  int i;
  if (database != null) {
    if (prev != null && prev.size() > 0) {
      if (!Const.isEmpty(tablename)) {
        String schemaTable=database.getQuotedSchemaTableCombination(schemaName,tablename);
        Database db=new Database(database);
        try {
          boolean doHash=false;
          String cr_table=null;
          db.connect();
          Row fields=new Row();
          Value vkeyfield=new Value(technicalKeyField,Value.VALUE_TYPE_INTEGER);
          vkeyfield.setLength(10,0);
          Value vhashfield=null;
          if (useHash && !Const.isEmpty(hashField)) {
            vhashfield=new Value(hashField,Value.VALUE_TYPE_INTEGER);
            vhashfield.setLength(15,0);
            doHash=true;
          }
          if (!db.checkTableExists(schemaTable)) {
            fields.addValue(vkeyfield);
            if (keyField != null && keyLookup != null) {
              int cnt=keyField.length;
              for (i=0; i < cnt; i++) {
                String error_field="";
                Value v=prev.searchValue(keyField[i]);
                if (v != null) {
                  String name=keyLookup[i];
                  Value newValue=new Value(v);
                  newValue.setName(name);
                  if (name.equals(vkeyfield.getName()) || (doHash == true && name.equals(vhashfield.getName()))) {
                    error_field+=name;
                  }
                  if (error_field.length() > 0) {
                    retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NameCollision",error_field));
                  }
 else {
                    fields.addValue(newValue);
                  }
                }
              }
            }
            if (doHash == true) {
              fields.addValue(vhashfield);
            }
          }
 else {
            Row tabFields=db.getTableFields(schemaTable);
            database.quoteReservedWords(tabFields);
            if (tabFields.searchValue(vkeyfield.getName()) == null) {
              fields.addValue(vkeyfield);
            }
            int cnt=tabFields.size();
            for (i=0; i < cnt; i++) {
              Value v=tabFields.getValue(i);
              fields.addValue(v);
            }
            String keyLookup[]=getKeyLookup();
            String keyField[]=getKeyField();
            if (keyField != null && keyLookup != null) {
              cnt=keyField.length;
              for (i=0; i < cnt; i++) {
                Value v=prev.searchValue(keyField[i]);
                if (v != null) {
                  Value newValue=(Value)v.clone();
                  newValue.setName(keyLookup[i]);
                  if (tabFields.searchValue(newValue.getName()) == null) {
                    fields.addValue(newValue);
                  }
                }
              }
            }
            if (doHash == true && tabFields.searchValue(vhashfield.getName()) == null) {
              fields.addValue(vhashfield);
            }
          }
          cr_table=db.getDDL(schemaTable,fields,(CREATION_METHOD_SEQUENCE.equals(getTechKeyCreation()) && sequenceFrom != null && sequenceFrom.length() != 0) ? null : technicalKeyField,CREATION_METHOD_AUTOINC.equals(getTechKeyCreation()),null,true);
          String cr_index="";
          String cr_uniq_index="";
          String idx_fields[]=null;
          if (useHash) {
            if (hashField != null && hashField.length() > 0) {
              idx_fields=new String[]{hashField};
            }
 else {
              retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NotHashFieldSpecified"));
            }
          }
 else {
            if (!Const.isEmpty(keyLookup)) {
              int nrfields=keyLookup.length;
              if (nrfields > 32 && database.getDatabaseType() == DatabaseMeta.TYPE_DATABASE_ORACLE) {
                nrfields=32;
              }
              idx_fields=new String[nrfields];
              for (i=0; i < nrfields; i++)               idx_fields[i]=keyLookup[i];
            }
 else {
              retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NotFieldsSpecified"));
            }
          }
          if (!Const.isEmpty(technicalKeyField)) {
            String techKeyArr[]=new String[]{technicalKeyField};
            if (!db.checkIndexExists(schemaName,tablename,techKeyArr)) {
              String indexname="idx_" + tablename + "_pk";
              cr_uniq_index=db.getCreateIndexStatement(schemaName,tablename,indexname,techKeyArr,true,true,false,true);
              cr_uniq_index+=Const.CR;
            }
          }
          if (!Const.isEmpty(idx_fields) && !db.checkIndexExists(schemaName,tablename,idx_fields)) {
            String indexname="idx_" + tablename + "_lookup";
            cr_index=db.getCreateIndexStatement(schemaName,tablename,indexname,idx_fields,false,false,false,true);
            cr_index+=Const.CR;
          }
          String cr_seq="";
          if (database.supportsSequences() && !Const.isEmpty(sequenceFrom)) {
            if (!db.checkSequenceExists(schemaName,sequenceFrom)) {
              cr_seq+=db.getCreateSequenceStatement(schemaName,sequenceFrom,1L,1L,-1L,true);
              cr_seq+=Const.CR;
            }
          }
          retval.setSQL(cr_table + cr_uniq_index + cr_index+ cr_seq);
        }
 catch (        KettleException e) {
          retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.ErrorOccurred") + Const.CR + e.getMessage());
        }
      }
 else {
        retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NotTableDefined"));
      }
    }
 else {
      retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NotReceivingField"));
    }
  }
 else {
    retval.setError(Messages.getString("CombinationLookupMeta.ReturnValue.NotConnectionDefined"));
  }
  return retval;
}
