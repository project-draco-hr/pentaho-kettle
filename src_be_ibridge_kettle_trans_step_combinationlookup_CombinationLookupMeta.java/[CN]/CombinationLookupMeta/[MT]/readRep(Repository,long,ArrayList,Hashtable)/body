{
  try {
    long id_connection=rep.getStepAttributeInteger(id_step,"id_connection");
    database=DatabaseMeta.findDatabase(databases,id_connection);
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tablename=rep.getStepAttributeString(id_step,"table");
    commitSize=(int)rep.getStepAttributeInteger(id_step,"commit");
    cacheSize=(int)rep.getStepAttributeInteger(id_step,"cache_size");
    replaceFields=rep.getStepAttributeBoolean(id_step,"replace");
    useHash=rep.getStepAttributeBoolean(id_step,"crc");
    hashField=rep.getStepAttributeString(id_step,"crcfield");
    int nrkeys=rep.countNrStepAttributes(id_step,"lookup_key_name");
    allocate(nrkeys);
    for (int i=0; i < nrkeys; i++) {
      keyField[i]=rep.getStepAttributeString(id_step,i,"lookup_key_name");
      keyLookup[i]=rep.getStepAttributeString(id_step,i,"lookup_key_field");
    }
    technicalKeyField=rep.getStepAttributeString(id_step,"return_name");
    useAutoinc=rep.getStepAttributeBoolean(id_step,"use_autoinc");
    sequenceFrom=rep.getStepAttributeString(id_step,"sequence");
    techKeyCreation=rep.getStepAttributeString(id_step,"creation_method");
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("CombinationLookupMeta.Exception.UnexpectedErrorWhileReadingStepInfo"),e);
  }
}
