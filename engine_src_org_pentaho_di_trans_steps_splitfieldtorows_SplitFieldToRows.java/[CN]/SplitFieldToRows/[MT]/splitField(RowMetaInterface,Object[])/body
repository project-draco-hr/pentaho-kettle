{
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    String realSplitFieldName=environmentSubstitute(meta.getSplitField());
    data.fieldnr=rowMeta.indexOfValue(realSplitFieldName);
    int numErrors=0;
    if (Const.isEmpty(meta.getNewFieldname())) {
      logError(BaseMessages.getString(PKG,"SplitFieldToRows.Log.NewFieldNameIsNull"));
      numErrors++;
    }
    if (data.fieldnr < 0) {
      logError(BaseMessages.getString(PKG,"SplitFieldToRows.Log.CouldNotFindFieldToSplit",realSplitFieldName));
      numErrors++;
    }
    if (!rowMeta.getValueMeta(data.fieldnr).isString()) {
      logError(BaseMessages.getString(PKG,"SplitFieldToRows.Log.SplitFieldNotValid",realSplitFieldName));
      numErrors++;
    }
    if (meta.includeRowNumber()) {
      String realRowNumberField=environmentSubstitute(meta.getRowNumberField());
      if (Const.isEmpty(realRowNumberField)) {
        logError(BaseMessages.getString(PKG,"SplitFieldToRows.Exception.RownrFieldMissing"));
        numErrors++;
      }
    }
    if (numErrors > 0) {
      setErrors(numErrors);
      stopAll();
      return false;
    }
    data.splitMeta=rowMeta.getValueMeta(data.fieldnr);
  }
  String originalString=data.splitMeta.getString(rowData[data.fieldnr]);
  if (originalString == null) {
    originalString="";
  }
  if (meta.includeRowNumber() && meta.resetRowNumber()) {
    data.rownr=1L;
  }
  String[] splitStrings=data.delimiterPattern.split(originalString);
  for (  String string : splitStrings) {
    Object[] outputRow=RowDataUtil.createResizedCopy(rowData,data.outputRowMeta.size());
    outputRow[rowMeta.size()]=string;
    if (meta.includeRowNumber()) {
      outputRow[rowMeta.size() + 1]=data.rownr;
    }
    putRow(data.outputRowMeta,outputRow);
    data.rownr++;
  }
  return true;
}
