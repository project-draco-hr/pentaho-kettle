{
  cartePluginRegistry=new ConcurrentHashMap<String,CartePluginInterface>();
  detections=Collections.synchronizedList(new ArrayList<SlaveServerDetection>());
  PluginRegistry pluginRegistry=PluginRegistry.getInstance();
  List<PluginInterface> plugins=pluginRegistry.getPlugins(CartePluginType.class);
  for (  PluginInterface plugin : plugins) {
    try {
      registerServlet(loadServlet(plugin));
    }
 catch (    KettlePluginException e) {
      log.logError("Unable to instantiate plugin for use with CarteServlet " + plugin.getName());
    }
  }
  @SuppressWarnings("unchecked") Enumeration<String> initParameterNames=config.getInitParameterNames();
  while (initParameterNames.hasMoreElements()) {
    final String paramName=initParameterNames.nextElement();
    final String className=config.getInitParameter(paramName);
    final Class<?> clazz;
    try {
      clazz=Class.forName(className);
      registerServlet((CartePluginInterface)clazz.newInstance());
    }
 catch (    ClassNotFoundException e) {
      log.logError("Unable to find configured " + paramName + " of "+ className,e);
    }
catch (    InstantiationException e) {
      log.logError("Unable to instantiate configured " + paramName + " of "+ className,e);
    }
catch (    IllegalAccessException e) {
      log.logError("Unable to access configured " + paramName + " of "+ className,e);
    }
catch (    ClassCastException e) {
      log.logError("Unable to cast configured " + paramName + " of "+ className+ " to "+ CartePluginInterface.class,e);
    }
  }
  pluginRegistry.addPluginListener(CartePluginType.class,new PluginTypeListener(){
    @Override public void pluginAdded(    Object serviceObject){
      try {
        registerServlet(loadServlet((PluginInterface)serviceObject));
      }
 catch (      KettlePluginException e) {
        log.logError(MessageFormat.format("Unable to load plugin: {0}",serviceObject),e);
      }
    }
    @Override public void pluginRemoved(    Object serviceObject){
      try {
        String key=getServletKey(loadServlet((PluginInterface)serviceObject));
        cartePluginRegistry.remove(key);
      }
 catch (      KettlePluginException e) {
        log.logError(MessageFormat.format("Unable to load plugin: {0}",serviceObject),e);
      }
    }
    @Override public void pluginChanged(    Object serviceObject){
      pluginAdded(serviceObject);
    }
  }
);
}
