{
  this.log=new LogChannel(STRING_CARTE_SERVLET);
  SlaveServerConfig config=new SlaveServerConfig();
  final TransformationMap transformationMap=CarteSingleton.getInstance().getTransformationMap();
  transformationMap.setSlaveServerConfig(config);
  final JobMap jobMap=CarteSingleton.getInstance().getJobMap();
  jobMap.setSlaveServerConfig(config);
  List<SlaveServerDetection> detections=Collections.synchronizedList(new ArrayList<SlaveServerDetection>());
  SocketRepository socketRepository=CarteSingleton.getInstance().getSocketRepository();
  PluginRegistry pluginRegistry=PluginRegistry.getInstance();
  List<PluginInterface> plugins=pluginRegistry.getPlugins(CartePluginType.class);
  Map<String,CartePluginInterface> pluginMap=new HashMap<String,CartePluginInterface>();
  for (  PluginInterface plugin : plugins) {
    CartePluginInterface servlet;
    try {
      servlet=(CartePluginInterface)pluginRegistry.loadClass(plugin);
      servlet.setup(transformationMap,jobMap,socketRepository,detections);
      servlet.setJettyMode(false);
      String key=servlet.getContextPath();
      if (key.startsWith("/kettle")) {
        key=key.substring("/kettle".length());
      }
      pluginMap.put(key,servlet);
    }
 catch (    KettlePluginException e) {
      log.logError("Unable to instantiate plugin for use with CarteServlet " + plugin.getName());
    }
  }
  cartePluginRegistry=new CartePluginRegistry(pluginMap);
}
