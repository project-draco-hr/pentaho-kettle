{
  try {
    int _type=TEXT_DATA;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      int cnt1=0;
      loop1:       do {
        int alt1=6;
        int LA1_0=input.LA(1);
        if (((LA1_0 >= '\u0000' && LA1_0 <= '&') || (LA1_0 >= '(' && LA1_0 <= '*') || (LA1_0 >= ',' && LA1_0 <= '9')|| (LA1_0 >= ';' && LA1_0 <= '>')|| (LA1_0 >= '@' && LA1_0 <= '\uFFFF'))) {
          alt1=1;
        }
 else         if ((LA1_0 == '?')) {
switch (input.LA(2)) {
case '+':
{
              alt1=2;
            }
          break;
case '?':
{
          alt1=3;
        }
      break;
case ':':
{
      alt1=4;
    }
  break;
case '\'':
{
  alt1=5;
}
break;
}
}
switch (alt1) {
case 1:
{
if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '*') || (input.LA(1) >= ',' && input.LA(1) <= '9')|| (input.LA(1) >= ';' && input.LA(1) <= '>')|| (input.LA(1) >= '@' && input.LA(1) <= '\uFFFF')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 2:
{
{
mRELEASE_CHARACTER();
mELEMENT_SEPARATOR();
}
}
break;
case 3:
{
{
mRELEASE_CHARACTER();
mRELEASE_CHARACTER();
}
}
break;
case 4:
{
{
mRELEASE_CHARACTER();
mCOMPLEX_ELEMENT_ITEM_SEPARATOR();
}
}
break;
case 5:
{
{
mRELEASE_CHARACTER();
mSEGMENT_TERMINATOR();
}
}
break;
default :
if (cnt1 >= 1) break loop1;
EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
