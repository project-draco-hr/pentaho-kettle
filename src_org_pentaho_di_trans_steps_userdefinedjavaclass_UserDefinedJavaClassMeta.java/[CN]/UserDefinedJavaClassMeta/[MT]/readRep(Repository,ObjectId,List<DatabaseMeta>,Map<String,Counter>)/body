{
  try {
    int nrScripts=rep.countNrStepAttributes(id_step,ElementNames.class_name.name());
    for (int i=0; i < nrScripts; i++) {
      definitions.add(new UserDefinedJavaClassDef(UserDefinedJavaClassDef.ClassType.valueOf(rep.getStepAttributeString(id_step,i,ElementNames.class_type.name())),rep.getStepAttributeString(id_step,i,ElementNames.class_name.name()),rep.getStepAttributeString(id_step,i,ElementNames.class_source.name())));
    }
    int nrfields=rep.countNrStepAttributes(id_step,ElementNames.field_name.name());
    for (int i=0; i < nrfields; i++) {
      fields.add(new FieldInfo(rep.getStepAttributeString(id_step,i,ElementNames.field_name.name()),ValueMeta.getType(rep.getStepAttributeString(id_step,i,ElementNames.field_type.name())),(int)rep.getStepAttributeInteger(id_step,i,ElementNames.field_length.name()),(int)rep.getStepAttributeInteger(id_step,i,ElementNames.field_precision.name())));
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("UserDefinedJavaClassMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
