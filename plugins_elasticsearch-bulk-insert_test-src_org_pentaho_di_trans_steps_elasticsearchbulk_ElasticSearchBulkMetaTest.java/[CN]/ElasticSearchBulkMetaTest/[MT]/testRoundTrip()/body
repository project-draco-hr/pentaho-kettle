{
  List<String> attributes=Arrays.asList("index","type","batchSize","timeout","timeoutUnit","isJson","jsonField","idOutputField","idField","overwriteIfExists","useOutput","stopOnError","fields","servers","settings");
  Map<String,String> getterMap=new HashMap<String,String>();
  getterMap.put("index","getIndex");
  getterMap.put("type","getType");
  getterMap.put("batchSize","getBatchSize");
  getterMap.put("timeout","getTimeOut");
  getterMap.put("timeoutUnit","getTimeoutUnit");
  getterMap.put("isJson","isJsonInsert");
  getterMap.put("jsonField","getJsonField");
  getterMap.put("idOutputField","getIdOutField");
  getterMap.put("idField","getIdInField");
  getterMap.put("overwriteIfExists","isOverWriteIfSameId");
  getterMap.put("useOutput","isUseOutput");
  getterMap.put("stopOnError","isStopOnError");
  getterMap.put("fields","getFieldsMap");
  getterMap.put("servers","getServers");
  getterMap.put("settings","getSettingsMap");
  Map<String,String> setterMap=new HashMap<String,String>();
  setterMap.put("index","setIndex");
  setterMap.put("type","setType");
  setterMap.put("batchSize","setBatchSize");
  setterMap.put("timeout","setTimeOut");
  setterMap.put("timeoutUnit","setTimeoutUnit");
  setterMap.put("isJson","setJsonInsert");
  setterMap.put("jsonField","setJsonField");
  setterMap.put("idOutputField","setIdOutField");
  setterMap.put("idField","setIdInField");
  setterMap.put("overwriteIfExists","setOverWriteIfSameId");
  setterMap.put("useOutput","setUseOutput");
  setterMap.put("stopOnError","setStopOnError");
  setterMap.put("fields","setFieldsMap");
  setterMap.put("servers","setServers");
  setterMap.put("settings","setSettingsMap");
  Map<String,FieldLoadSaveValidator<?>> fieldLoadSaveValidatorAttributeMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  Map<String,FieldLoadSaveValidator<?>> fieldLoadSaveValidatorTypeMap=new HashMap<String,FieldLoadSaveValidator<?>>();
  fieldLoadSaveValidatorAttributeMap.put("fields",new MapLoadSaveValidator<String,String>(new StringLoadSaveValidator(),new StringLoadSaveValidator()));
  fieldLoadSaveValidatorAttributeMap.put("settings",new MapLoadSaveValidator<String,String>(new StringLoadSaveValidator(),new StringLoadSaveValidator()));
  fieldLoadSaveValidatorAttributeMap.put("servers",new ListLoadSaveValidator<ElasticSearchBulkMeta.Server>(new FieldLoadSaveValidator<ElasticSearchBulkMeta.Server>(){
    Random rand=new Random();
    @Override public ElasticSearchBulkMeta.Server getTestObject(){
      ElasticSearchBulkMeta.Server r=new ElasticSearchBulkMeta.Server();
      r.address=rand.nextLong() + "";
      r.port=rand.nextInt();
      return r;
    }
    @Override public boolean validateTestObject(    ElasticSearchBulkMeta.Server testObject,    Object actual){
      ElasticSearchBulkMeta.Server ac=(ElasticSearchBulkMeta.Server)actual;
      return ac.address.equals(testObject.address) && ac.port == testObject.port;
    }
  }
));
  fieldLoadSaveValidatorTypeMap.put(TimeUnit.class.getCanonicalName(),new TimeUnitFieldLoadSaveValidator());
  LoadSaveTester loadSaveTester=new LoadSaveTester(ElasticSearchBulkMeta.class,attributes,getterMap,setterMap,fieldLoadSaveValidatorAttributeMap,fieldLoadSaveValidatorTypeMap);
  loadSaveTester.testRepoRoundTrip();
  loadSaveTester.testXmlRoundTrip();
}
