{
  int i;
  log.logDebug(toString(),Messages.getString("OraBulkLoaderDialog.Log.GettingKeyInfo"));
  wMaxErrors.setText("" + input.getMaxErrors());
  wCommit.setText("" + input.getCommitSize());
  wBindSize.setText("" + input.getBindSize());
  wReadSize.setText("" + input.getReadSize());
  if (input.getFieldTable() != null)   for (i=0; i < input.getFieldTable().length; i++) {
    TableItem item=wReturn.table.getItem(i);
    if (input.getFieldTable()[i] != null)     item.setText(1,input.getFieldTable()[i]);
    if (input.getFieldStream()[i] != null)     item.setText(2,input.getFieldStream()[i]);
    String dateMask=input.getDateMask()[i];
    if (dateMask != null) {
      if (OraBulkLoaderMeta.DATE_MASK_DATE.equals(dateMask)) {
        item.setText(3,Messages.getString("OraBulkLoaderDialog.DateMask.Label"));
      }
 else       if (OraBulkLoaderMeta.DATE_MASK_DATETIME.equals(dateMask)) {
        item.setText(3,Messages.getString("OraBulkLoaderDialog.DateTimeMask.Label"));
      }
 else {
        item.setText(3,"");
      }
    }
 else {
      item.setText(3,"");
    }
  }
  if (input.getDatabaseMeta() != null)   wConnection.setText(input.getDatabaseMeta().getName());
 else {
    if (transMeta.nrDatabases() == 1) {
      wConnection.setText(transMeta.getDatabase(0).getName());
    }
  }
  if (input.getSchemaName() != null)   wSchema.setText(input.getSchemaName());
  if (input.getTableName() != null)   wTable.setText(input.getTableName());
  if (input.getSqlldr() != null)   wSqlldr.setText(input.getSqlldr());
  if (input.getControlFile() != null)   wControlFile.setText(input.getControlFile());
  if (input.getDataFile() != null)   wDataFile.setText(input.getDataFile());
  if (input.getLogFile() != null)   wLogFile.setText(input.getLogFile());
  if (input.getBadFile() != null)   wBadFile.setText(input.getBadFile());
  if (input.getDiscardFile() != null)   wDiscardFile.setText(input.getDiscardFile());
  if (input.getEncoding() != null)   wEncoding.setText(input.getEncoding());
  wDirectPath.setSelection(input.isDirectPath());
  wEraseFiles.setSelection(input.isEraseFiles());
  String method=input.getLoadMethod();
  if (OraBulkLoaderMeta.METHOD_AUTO_END.equals(method)) {
    wLoadMethod.select(0);
  }
 else   if (OraBulkLoaderMeta.METHOD_MANUAL.equals(method)) {
    wLoadMethod.select(1);
  }
 else {
    log.logDebug(toString(),"Internal error: load_method set to default 'auto at end'");
    wLoadMethod.select(0);
  }
  String action=input.getLoadAction();
  if (OraBulkLoaderMeta.ACTION_APPEND.equals(action)) {
    wLoadAction.select(0);
  }
 else   if (OraBulkLoaderMeta.ACTION_INSERT.equals(action)) {
    wLoadAction.select(1);
  }
 else   if (OraBulkLoaderMeta.ACTION_REPLACE.equals(action)) {
    wLoadAction.select(2);
  }
 else   if (OraBulkLoaderMeta.ACTION_TRUNCATE.equals(action)) {
    wLoadAction.select(3);
  }
 else {
    log.logDebug(toString(),"Internal error: load_action set to default 'append'");
    wLoadAction.select(0);
  }
  wStepname.selectAll();
  wReturn.setRowNums();
  wReturn.optWidth(true);
}
