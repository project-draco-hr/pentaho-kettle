{
  final String exportFileName=new File("test.export").getAbsolutePath();
  RepositoryDirectoryInterface rootDir=initRepo();
  String uniqueTransName=EXP_TRANS_NAME.concat(EXP_DBMETA_NAME);
  TransMeta transMeta=createTransMeta(EXP_DBMETA_NAME);
  DatabaseMeta dbMeta=createDatabaseMeta(EXP_DBMETA_NAME);
  repository.save(dbMeta,VERSION_COMMENT_V1,null);
  TableInputMeta tableInputMeta=new TableInputMeta();
  tableInputMeta.setDatabaseMeta(dbMeta);
  transMeta.addStep(new StepMeta(EXP_TRANS_STEP_1_NAME,tableInputMeta));
  RepositoryDirectoryInterface transDir=rootDir.findDirectory(DIR_TRANSFORMATIONS);
  repository.save(transMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(transMeta);
  assertNotNull(transMeta.getObjectId());
  ObjectRevision version=transMeta.getObjectRevision();
  assertNotNull(version);
  assertTrue(hasVersionWithComment(transMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(uniqueTransName,transDir,RepositoryObjectType.TRANSFORMATION));
  JobMeta jobMeta=createJobMeta(EXP_JOB_NAME);
  RepositoryDirectoryInterface jobsDir=rootDir.findDirectory(DIR_JOBS);
  repository.save(jobMeta,VERSION_COMMENT_V1,null);
  deleteStack.push(jobMeta);
  assertNotNull(jobMeta.getObjectId());
  version=jobMeta.getObjectRevision();
  assertNotNull(version);
  assertTrue(hasVersionWithComment(jobMeta,VERSION_COMMENT_V1));
  assertTrue(repository.exists(EXP_JOB_NAME,jobsDir,RepositoryObjectType.JOB));
  try {
    repository.getExporter().exportAllObjects(new MockProgressMonitorListener(),exportFileName,null,"all");
    FileObject exportFile=KettleVFS.getFileObject(exportFileName);
    assertNotNull(exportFile);
    MockRepositoryExportParser parser=new MockRepositoryExportParser();
    SAXParserFactory.newInstance().newSAXParser().parse(KettleVFS.getInputStream(exportFile),parser);
    if (parser.getFatalError() != null) {
      throw parser.getFatalError();
    }
    assertNotNull("No nodes found in export",parser.getNodeNames());
    assertTrue("No nodes found in export",!parser.getNodeNames().isEmpty());
    assertEquals("Incorrect number of nodes",5,parser.getNodeNames().size());
    assertEquals("Incorrect number of transformations",1,parser.getNodesWithName("transformation").size());
    assertEquals("Incorrect number of jobs",1,parser.getNodesWithName("job").size());
  }
  finally {
    KettleVFS.getFileObject(exportFileName).delete();
  }
}
