{
  try {
    databaseMeta=rep.loadDatabaseMetaFromStepAttribute(id_step,"id_connection",databases);
    schemaName=rep.getStepAttributeString(id_step,"schema");
    tablename=rep.getStepAttributeString(id_step,"table");
    long commitSizeInt=rep.getStepAttributeInteger(id_step,"commit");
    commitSize=rep.getStepAttributeString(id_step,"commit");
    if (Const.isEmpty(commitSize)) {
      commitSize=Long.toString(commitSizeInt);
    }
    truncateTable=rep.getStepAttributeBoolean(id_step,"truncate");
    ignoreErrors=rep.getStepAttributeBoolean(id_step,"ignore_errors");
    useBatchUpdate=rep.getStepAttributeBoolean(id_step,"use_batch");
    specifyFields=rep.getStepAttributeBoolean(id_step,"specify_fields");
    partitioningEnabled=rep.getStepAttributeBoolean(id_step,"partitioning_enabled");
    partitioningField=rep.getStepAttributeString(id_step,"partitioning_field");
    partitioningDaily=rep.getStepAttributeBoolean(id_step,"partitioning_daily");
    partitioningMonthly=rep.getStepAttributeBoolean(id_step,"partitioning_monthly");
    tableNameInField=rep.getStepAttributeBoolean(id_step,"tablename_in_field");
    tableNameField=rep.getStepAttributeString(id_step,"tablename_field");
    tableNameInTable=rep.getStepAttributeBoolean(id_step,"tablename_in_table");
    returningGeneratedKeys=rep.getStepAttributeBoolean(id_step,"return_keys");
    generatedKeyField=rep.getStepAttributeString(id_step,"return_field");
    int nrCols=rep.countNrStepAttributes(id_step,"column_name");
    int nrStreams=rep.countNrStepAttributes(id_step,"stream_name");
    int nrRows=(nrCols < nrStreams ? nrStreams : nrCols);
    allocate(nrRows);
    for (int idx=0; idx < nrRows; idx++) {
      fieldDatabase[idx]=Const.NVL(rep.getStepAttributeString(id_step,idx,"column_name"),"");
      fieldStream[idx]=Const.NVL(rep.getStepAttributeString(id_step,idx,"stream_name"),"");
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
