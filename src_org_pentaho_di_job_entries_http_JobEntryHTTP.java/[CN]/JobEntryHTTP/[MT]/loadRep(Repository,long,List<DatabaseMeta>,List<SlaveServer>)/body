{
  try {
    super.loadRep(rep,id_jobentry,databases,slaveServers);
    url=rep.getJobEntryAttributeString(id_jobentry,"url");
    targetFilename=rep.getJobEntryAttributeString(id_jobentry,"targetfilename");
    fileAppended=rep.getJobEntryAttributeBoolean(id_jobentry,"file_appended");
    dateTimeAdded="Y".equalsIgnoreCase(rep.getJobEntryAttributeString(id_jobentry,"date_time_added"));
    targetFilenameExtention=rep.getJobEntryAttributeString(id_jobentry,"targetfilename_extention");
    uploadFilename=rep.getJobEntryAttributeString(id_jobentry,"uploadfilename");
    urlFieldname=rep.getJobEntryAttributeString(id_jobentry,"url_fieldname");
    runForEveryRow=rep.getJobEntryAttributeBoolean(id_jobentry,"run_every_row");
    username=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    proxyHostname=rep.getJobEntryAttributeString(id_jobentry,"proxy_host");
    int intPort=(int)rep.getJobEntryAttributeInteger(id_jobentry,"proxy_port");
    proxyPort=rep.getJobEntryAttributeString(id_jobentry,"proxy_port");
    if (intPort > 0 && Const.isEmpty(proxyPort))     proxyPort=Integer.toString(intPort);
    nonProxyHosts=rep.getJobEntryAttributeString(id_jobentry,"non_proxy_hosts");
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'HTTP' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
