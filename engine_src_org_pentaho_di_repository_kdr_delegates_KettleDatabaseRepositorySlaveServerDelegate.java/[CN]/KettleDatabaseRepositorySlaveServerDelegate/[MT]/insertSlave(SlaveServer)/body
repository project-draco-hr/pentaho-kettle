{
  if (getSlaveID(slaveServer.getName()) != null) {
    throw new KettleObjectExistsException("Failed to create object in repository. Object [" + slaveServer.getName() + "] already exists.");
  }
  ObjectId id=repository.connectionDelegate.getNextSlaveServerID();
  RowMetaAndData table=new RowMetaAndData();
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_ID_SLAVE,ValueMetaInterface.TYPE_INTEGER),id);
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_NAME,ValueMetaInterface.TYPE_STRING),slaveServer.getName());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_HOST_NAME,ValueMetaInterface.TYPE_STRING),slaveServer.getHostname());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_PORT,ValueMetaInterface.TYPE_STRING),slaveServer.getPort());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_WEB_APP_NAME,ValueMetaInterface.TYPE_STRING),slaveServer.getWebAppName());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_USERNAME,ValueMetaInterface.TYPE_STRING),slaveServer.getUsername());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_PASSWORD,ValueMetaInterface.TYPE_STRING),Encr.encryptPasswordIfNotUsingVariables(slaveServer.getPassword()));
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_PROXY_HOST_NAME,ValueMetaInterface.TYPE_STRING),slaveServer.getProxyHostname());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_PROXY_PORT,ValueMetaInterface.TYPE_STRING),slaveServer.getProxyPort());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_NON_PROXY_HOSTS,ValueMetaInterface.TYPE_STRING),slaveServer.getNonProxyHosts());
  table.addValue(new ValueMeta(KettleDatabaseRepository.FIELD_SLAVE_MASTER,ValueMetaInterface.TYPE_BOOLEAN),Boolean.valueOf(slaveServer.isMaster()));
  repository.connectionDelegate.getDatabase().prepareInsert(table.getRowMeta(),KettleDatabaseRepository.TABLE_R_SLAVE);
  repository.connectionDelegate.getDatabase().setValuesInsert(table);
  repository.connectionDelegate.getDatabase().insertRow();
  repository.connectionDelegate.getDatabase().closeInsert();
  return id;
}
