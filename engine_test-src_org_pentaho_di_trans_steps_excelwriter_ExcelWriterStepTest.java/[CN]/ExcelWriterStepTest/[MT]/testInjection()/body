{
  ExcelWriterStepMeta meta=new ExcelWriterStepMeta();
  try {
    List<StepInjectionMetaEntry> entries=stepMeta.getStepMetaInjectionInterface().getStepInjectionMetadataEntries();
    for (    StepInjectionMetaEntry entry : entries) {
switch (entry.getValueType()) {
case ValueMetaInterface.TYPE_STRING:
        entry.setValue("new_".concat(entry.getKey()));
      break;
case ValueMetaInterface.TYPE_BOOLEAN:
    entry.setValue(Boolean.TRUE);
  break;
default :
break;
}
if (!entry.getDetails().isEmpty()) {
List<StepInjectionMetaEntry> childEntries=entry.getDetails().get(0).getDetails();
for (StepInjectionMetaEntry childEntry : childEntries) {
switch (childEntry.getValueType()) {
case ValueMetaInterface.TYPE_STRING:
  childEntry.setValue("new_".concat(childEntry.getKey()));
break;
case ValueMetaInterface.TYPE_BOOLEAN:
childEntry.setValue(Boolean.TRUE);
break;
default :
break;
}
}
}
}
stepMeta.getStepMetaInjectionInterface().injectStepMetadataEntries(entries);
assertEquals("Cell comment not properly injected... ","new_CELLCOMMENT",stepMeta.getOutputFields()[0].getCommentField());
assertEquals("Format not properly injected... ","new_FORMAT",stepMeta.getOutputFields()[0].getFormat());
assertEquals("Hyperlink not properly injected... ","new_HYPERLINKFIELD",stepMeta.getOutputFields()[0].getHyperlinkField());
assertEquals("Name not properly injected... ","new_NAME",stepMeta.getOutputFields()[0].getName());
assertEquals("Style cell not properly injected... ","new_STYLECELL",stepMeta.getOutputFields()[0].getStyleCell());
assertEquals("Title not properly injected... ","new_FIELDTITLE",stepMeta.getOutputFields()[0].getTitle());
assertEquals("Title style cell not properly injected... ","new_TITLESTYLE",stepMeta.getOutputFields()[0].getTitleStyleCell());
assertEquals("Type not properly injected... ","-",stepMeta.getOutputFields()[0].getTypeDesc());
assertEquals("Comment author not properly injected... ","new_COMMENTAUTHOR",stepMeta.getOutputFields()[0].getCommentAuthorField());
}
 catch (KettleException e) {
fail(e.getMessage());
}
}
