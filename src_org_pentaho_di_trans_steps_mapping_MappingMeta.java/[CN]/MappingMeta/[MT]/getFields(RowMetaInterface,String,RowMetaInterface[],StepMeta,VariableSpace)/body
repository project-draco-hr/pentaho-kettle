{
  TransMeta mappingTransMeta=null;
  try {
    mappingTransMeta=loadMappingMeta(this,repository,space);
  }
 catch (  KettleException e) {
    throw new KettleStepException(BaseMessages.getString(PKG,"MappingMeta.Exception.UnableToLoadMappingTransformation"),e);
  }
  if (mappingParameters != null) {
    if (mappingParameters.isInheritingAllVariables()) {
      mappingTransMeta.copyVariablesFrom(space);
    }
    List<String> subParams=Arrays.asList(mappingTransMeta.listParameters());
    for (int i=0; i < mappingParameters.getVariable().length; i++) {
      String name=mappingParameters.getVariable()[i];
      String value=space.environmentSubstitute(mappingParameters.getInputField()[i]);
      if (!Const.isEmpty(name) && !Const.isEmpty(value)) {
        if (subParams.contains(name)) {
          try {
            mappingTransMeta.setParameterValue(name,value);
          }
 catch (          UnknownParamException e) {
          }
        }
        mappingTransMeta.setVariable(name,value);
      }
    }
  }
  List<MappingValueRename> inputRenameList=new ArrayList<MappingValueRename>();
  for (  MappingIODefinition definition : inputMappings) {
    RowMetaInterface inputRowMeta;
    if (definition.isMainDataPath() || Const.isEmpty(definition.getInputStepname())) {
      inputRowMeta=row.clone();
      for (      MappingValueRename valueRename : definition.getValueRenames()) {
        ValueMetaInterface valueMeta=inputRowMeta.searchValueMeta(valueRename.getSourceValueName());
        if (valueMeta == null) {
          throw new KettleStepException(BaseMessages.getString(PKG,"MappingMeta.Exception.UnableToFindField",valueRename.getSourceValueName()));
        }
        valueMeta.setName(valueRename.getTargetValueName());
      }
    }
 else {
      String[] infoSteps=getInfoSteps();
      int infoStepIndex=Const.indexOfString(definition.getInputStepname(),infoSteps);
      if (infoStepIndex < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"MappingMeta.Exception.UnableToFindMetadataInfo",definition.getInputStepname()));
      }
      if (info[infoStepIndex] != null) {
        inputRowMeta=info[infoStepIndex].clone();
      }
 else {
        inputRowMeta=null;
      }
    }
    StepMeta mappingInputStep=mappingTransMeta.findMappingInputStep(definition.getOutputStepname());
    MappingInputMeta mappingInputMeta=(MappingInputMeta)mappingInputStep.getStepMetaInterface();
    mappingInputMeta.setInputRowMeta(inputRowMeta);
    mappingInputMeta.setValueRenames(definition.getValueRenames());
    if (definition.isRenamingOnOutput())     Mapping.addInputRenames(inputRenameList,definition.getValueRenames());
  }
  MappingIODefinition mappingOutputDefinition=null;
  if (nextStep == null) {
    for (    MappingIODefinition definition : outputMappings) {
      if (definition.isMainDataPath() || Const.isEmpty(definition.getOutputStepname())) {
        mappingOutputDefinition=definition;
      }
    }
  }
 else {
    for (    MappingIODefinition definition : outputMappings) {
      if (nextStep.getName().equals(definition.getOutputStepname()) || definition.isMainDataPath() || Const.isEmpty(definition.getOutputStepname())) {
        mappingOutputDefinition=definition;
      }
    }
  }
  if (mappingOutputDefinition == null) {
    throw new KettleStepException(BaseMessages.getString(PKG,"MappingMeta.Exception.UnableToFindMappingDefinition"));
  }
  StepMeta mappingOutputStep=mappingTransMeta.findMappingOutputStep(mappingOutputDefinition.getInputStepname());
  MappingOutputMeta mappingOutputMeta=(MappingOutputMeta)mappingOutputStep.getStepMetaInterface();
  mappingOutputMeta.setOutputValueRenames(mappingOutputDefinition.getValueRenames());
  mappingOutputMeta.setInputValueRenames(inputRenameList);
  RowMetaInterface mappingOutputRowMeta=mappingTransMeta.getStepFields(mappingOutputStep);
  row.clear();
  row.addRowMeta(mappingOutputRowMeta);
}
