{
  Repository repository=Repository.getCurrentRepository();
  TransMeta mappingTransMeta=null;
  try {
    mappingTransMeta=loadMappingMeta(fileName,transName,directoryPath,repository,space);
  }
 catch (  KettleException e) {
    throw new KettleStepException(Messages.getString("MappingMeta.Exception.UnableToLoadMappingTransformation"),e);
  }
  List<MappingValueRename> inputRenameList=new ArrayList<MappingValueRename>();
  for (  MappingIODefinition definition : inputMappings) {
    RowMetaInterface inputRowMeta;
    if (definition.isMainDataPath() || Const.isEmpty(definition.getInputStepname())) {
      inputRowMeta=(RowMetaInterface)row.clone();
      for (      MappingValueRename valueRename : definition.getValueRenames()) {
        ValueMetaInterface valueMeta=inputRowMeta.searchValueMeta(valueRename.getSourceValueName());
        if (valueMeta == null) {
          throw new KettleStepException(Messages.getString("MappingMeta.Exception.UnableToFindField",valueRename.getSourceValueName()));
        }
        valueMeta.setName(valueRename.getTargetValueName());
      }
    }
 else {
      String[] infoSteps=getInfoSteps();
      int infoStepIndex=Const.indexOfString(definition.getInputStepname(),infoSteps);
      if (infoStepIndex < 0) {
        throw new KettleStepException(Messages.getString("MappingMeta.Exception.UnableToFindMetadataInfo",definition.getInputStepname()));
      }
      inputRowMeta=(RowMetaInterface)info[infoStepIndex].clone();
    }
    StepMeta mappingInputStep=mappingTransMeta.findMappingInputStep(definition.getOutputStepname());
    MappingInputMeta mappingInputMeta=(MappingInputMeta)mappingInputStep.getStepMetaInterface();
    mappingInputMeta.setInputRowMeta(inputRowMeta);
    mappingInputMeta.setValueRenames(definition.getValueRenames());
    if (definition.isRenamingOnOutput())     Mapping.addInputRenames(inputRenameList,definition.getValueRenames());
  }
  MappingIODefinition mappingOutputDefinition=null;
  if (nextStep == null) {
    for (    MappingIODefinition definition : outputMappings) {
      if (definition.isMainDataPath() || Const.isEmpty(definition.getOutputStepname())) {
        mappingOutputDefinition=definition;
      }
    }
  }
 else {
    for (    MappingIODefinition definition : outputMappings) {
      if (nextStep.getName().equals(definition.getOutputStepname()) || definition.isMainDataPath() || Const.isEmpty(definition.getOutputStepname())) {
        mappingOutputDefinition=definition;
      }
    }
  }
  if (mappingOutputDefinition == null) {
    throw new KettleStepException(Messages.getString("MappingMeta.Exception.UnableToFindMappingDefinition"));
  }
  StepMeta mappingOutputStep=mappingTransMeta.findMappingOutputStep(mappingOutputDefinition.getInputStepname());
  MappingOutputMeta mappingOutputMeta=(MappingOutputMeta)mappingOutputStep.getStepMetaInterface();
  mappingOutputMeta.setOutputValueRenames(mappingOutputDefinition.getValueRenames());
  mappingOutputMeta.setInputValueRenames(inputRenameList);
  RowMetaInterface mappingOutputRowMeta=mappingTransMeta.getStepFields(mappingOutputStep);
  row.clear();
  row.addRowMeta(mappingOutputRowMeta);
}
