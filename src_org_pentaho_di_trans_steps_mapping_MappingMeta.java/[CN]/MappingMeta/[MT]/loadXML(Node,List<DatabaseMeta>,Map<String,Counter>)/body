{
  try {
    String method=XMLHandler.getTagValue(stepnode,"specification_method");
    specificationMethod=ObjectLocationSpecificationMethod.getSpecificationMethodByCode(method);
    String transId=XMLHandler.getTagValue(stepnode,"trans_object_id");
    transObjectId=Const.isEmpty(transId) ? null : new StringObjectId(transId);
    transName=XMLHandler.getTagValue(stepnode,"trans_name");
    fileName=XMLHandler.getTagValue(stepnode,"filename");
    directoryPath=XMLHandler.getTagValue(stepnode,"directory_path");
    checkObjectLocationSpecificationMethod();
    Node mappingsNode=XMLHandler.getSubNode(stepnode,"mappings");
    inputMappings.clear();
    outputMappings.clear();
    String multiInput=XMLHandler.getTagValue(stepnode,"allow_multiple_input");
    allowingMultipleInputs=Const.isEmpty(multiInput) ? inputMappings.size() > 1 : "Y".equalsIgnoreCase(multiInput);
    String multiOutput=XMLHandler.getTagValue(stepnode,"allow_multiple_output");
    allowingMultipleOutputs=Const.isEmpty(multiOutput) ? outputMappings.size() > 1 : "Y".equalsIgnoreCase(multiOutput);
    if (mappingsNode != null) {
      Node inputNode=XMLHandler.getSubNode(mappingsNode,"input");
      int nrInputMappings=XMLHandler.countNodes(inputNode,MappingIODefinition.XML_TAG);
      for (int i=0; i < nrInputMappings; i++) {
        Node mappingNode=XMLHandler.getSubNodeByNr(inputNode,MappingIODefinition.XML_TAG,i);
        MappingIODefinition inputMappingDefinition=new MappingIODefinition(mappingNode);
        inputMappings.add(inputMappingDefinition);
      }
      Node outputNode=XMLHandler.getSubNode(mappingsNode,"output");
      int nrOutputMappings=XMLHandler.countNodes(outputNode,MappingIODefinition.XML_TAG);
      for (int i=0; i < nrOutputMappings; i++) {
        Node mappingNode=XMLHandler.getSubNodeByNr(outputNode,MappingIODefinition.XML_TAG,i);
        MappingIODefinition outputMappingDefinition=new MappingIODefinition(mappingNode);
        outputMappings.add(outputMappingDefinition);
      }
      Node mappingParametersNode=XMLHandler.getSubNode(mappingsNode,MappingParameters.XML_TAG);
      mappingParameters=new MappingParameters(mappingParametersNode);
    }
 else {
      Node inputNode=XMLHandler.getSubNode(stepnode,"input");
      Node outputNode=XMLHandler.getSubNode(stepnode,"output");
      int nrInput=XMLHandler.countNodes(inputNode,"connector");
      int nrOutput=XMLHandler.countNodes(outputNode,"connector");
      MappingIODefinition inputMappingDefinition=new MappingIODefinition();
      inputMappingDefinition.setMainDataPath(true);
      for (int i=0; i < nrInput; i++) {
        Node inputConnector=XMLHandler.getSubNodeByNr(inputNode,"connector",i);
        String inputField=XMLHandler.getTagValue(inputConnector,"field");
        String inputMapping=XMLHandler.getTagValue(inputConnector,"mapping");
        inputMappingDefinition.getValueRenames().add(new MappingValueRename(inputField,inputMapping));
      }
      MappingIODefinition outputMappingDefinition=new MappingIODefinition();
      outputMappingDefinition.setMainDataPath(true);
      for (int i=0; i < nrOutput; i++) {
        Node outputConnector=XMLHandler.getSubNodeByNr(outputNode,"connector",i);
        String outputField=XMLHandler.getTagValue(outputConnector,"field");
        String outputMapping=XMLHandler.getTagValue(outputConnector,"mapping");
        outputMappingDefinition.getValueRenames().add(new MappingValueRename(outputMapping,outputField));
      }
      inputMappings.add(inputMappingDefinition);
      outputMappings.add(outputMappingDefinition);
      mappingParameters=new MappingParameters();
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"MappingMeta.Exception.ErrorLoadingTransformationStepFromXML"),e);
  }
}
