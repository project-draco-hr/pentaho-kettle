{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"servername",servername);
    rep.saveStepAttribute(id_transformation,id_step,"username",username);
    rep.saveStepAttribute(id_transformation,id_step,"password",Encr.encryptPasswordIfNotUsingVariables(password));
    rep.saveStepAttribute(id_transformation,id_step,"usessl",usessl);
    rep.saveStepAttribute(id_transformation,id_step,"sslport",sslport);
    rep.saveStepAttribute(id_transformation,id_step,"retrievemails",retrievemails);
    rep.saveStepAttribute(id_transformation,id_step,"firstmails",firstmails);
    rep.saveStepAttribute(id_transformation,id_step,"delete",delete);
    rep.saveStepAttribute(id_transformation,id_step,"protocol",protocol);
    rep.saveStepAttribute(id_transformation,id_step,"valueimaplist",MailConnectionMeta.getValueImapListCode(valueimaplist));
    rep.saveStepAttribute(id_transformation,id_step,"imapfirstmails",imapfirstmails);
    rep.saveStepAttribute(id_transformation,id_step,"imapfolder",imapfolder);
    rep.saveStepAttribute(id_transformation,id_step,"sendersearch",senderSearch);
    rep.saveStepAttribute(id_transformation,id_step,"nottermsendersearch",notTermSenderSearch);
    rep.saveStepAttribute(id_transformation,id_step,"recipientsearch",recipientSearch);
    rep.saveStepAttribute(id_transformation,id_step,"notTermRecipientSearch",notTermRecipientSearch);
    rep.saveStepAttribute(id_transformation,id_step,"subjectsearch",subjectSearch);
    rep.saveStepAttribute(id_transformation,id_step,"nottermsubjectsearch",notTermSubjectSearch);
    rep.saveStepAttribute(id_transformation,id_step,"conditionreceiveddate",MailConnectionMeta.getConditionDateCode(conditionReceivedDate));
    rep.saveStepAttribute(id_transformation,id_step,"nottermreceiveddatesearch",notTermReceivedDateSearch);
    rep.saveStepAttribute(id_transformation,id_step,"receiveddate1",receivedDate1);
    rep.saveStepAttribute(id_transformation,id_step,"receiveddate2",receivedDate2);
    rep.saveStepAttribute(id_transformation,id_step,"includesubfolders",includesubfolders);
    rep.saveStepAttribute(id_transformation,id_step,"useproxy",useproxy);
    rep.saveStepAttribute(id_transformation,id_step,"proxyusername",proxyusername);
    rep.saveStepAttribute(id_transformation,id_step,"usedynamicfolder",usedynamicfolder);
    rep.saveStepAttribute(id_transformation,id_step,"folderfield",folderfield);
    rep.saveStepAttribute(id_transformation,id_step,"rowlimit",rowlimit);
    rep.saveStepAttribute(id_transformation,id_step,Tags.USE_BATCH,useBatch);
    rep.saveStepAttribute(id_transformation,id_step,Tags.BATCH_SIZE,batchSize);
    rep.saveStepAttribute(id_transformation,id_step,Tags.START_MSG,start);
    rep.saveStepAttribute(id_transformation,id_step,Tags.END_MSG,end);
    rep.saveStepAttribute(id_transformation,id_step,Tags.STOP_ON_ERROR,stopOnError);
    for (int i=0; i < inputFields.length; i++) {
      MailInputField field=inputFields[i];
      rep.saveStepAttribute(id_transformation,id_step,i,"field_name",field.getName());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_column",field.getColumnCode());
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save step of type 'get pop' to the repository for id_step=" + id_step,dbe);
  }
}
