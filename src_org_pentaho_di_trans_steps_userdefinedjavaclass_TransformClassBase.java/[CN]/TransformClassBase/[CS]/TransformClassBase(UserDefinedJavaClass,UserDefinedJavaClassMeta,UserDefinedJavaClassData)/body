{
  this.parent=parent;
  this.meta=meta;
  this.data=data;
  try {
    data.inputRowMeta=getTransMeta().getPrevStepFields(getStepMeta()).clone();
    data.outputRowMeta=getTransMeta().getThisStepFields(getStepMeta(),null,data.inputRowMeta.clone());
    data.parameterMap=new HashMap<String,String>();
    for (    UsageParameter par : meta.getUsageParameters()) {
      if (par.tag != null && par.value != null) {
        data.parameterMap.put(par.tag,par.value);
      }
    }
    data.infoMap=new HashMap<String,String>();
    for (    StepDefinition stepDefinition : meta.getInfoStepDefinitions()) {
      if (stepDefinition.tag != null && stepDefinition.stepMeta != null && stepDefinition.stepMeta.getName() != null) {
        data.infoMap.put(stepDefinition.tag,stepDefinition.stepMeta.getName());
      }
    }
    data.targetMap=new HashMap<String,String>();
    for (    StepDefinition stepDefinition : meta.getTargetStepDefinitions()) {
      if (stepDefinition.tag != null && stepDefinition.stepMeta != null && stepDefinition.stepMeta.getName() != null) {
        data.targetMap.put(stepDefinition.tag,stepDefinition.stepMeta.getName());
      }
    }
  }
 catch (  KettleStepException e) {
    e.printStackTrace();
    throw e;
  }
}
