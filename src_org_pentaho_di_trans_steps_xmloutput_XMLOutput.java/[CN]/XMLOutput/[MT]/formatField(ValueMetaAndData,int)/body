{
  String retval="";
  XMLField field=null;
  if (idx >= 0) {
    field=meta.getOutputFields()[idx];
  }
  if (v.getValueMeta().isNumeric()) {
    if (idx >= 0 && field != null && !Const.isEmpty(field.getFormat())) {
      if (v.getValueData() == null) {
        if (!Const.isEmpty(field.getNullString())) {
          retval=field.getNullString();
        }
 else {
          retval=Const.NULL_NUMBER;
        }
      }
 else {
        if (!Const.isEmpty(field.getFormat())) {
          data.df.applyPattern(field.getFormat());
        }
 else {
          data.df.applyPattern(data.defaultDecimalFormat.toPattern());
        }
        if (!Const.isEmpty(field.getDecimalSymbol())) {
          data.dfs.setDecimalSeparator(field.getDecimalSymbol().charAt(0));
        }
 else {
          data.dfs.setDecimalSeparator(data.defaultDecimalFormatSymbols.getDecimalSeparator());
        }
        if (!Const.isEmpty(field.getGroupingSymbol())) {
          data.dfs.setGroupingSeparator(field.getGroupingSymbol().charAt(0));
        }
 else {
          data.dfs.setGroupingSeparator(data.defaultDecimalFormatSymbols.getGroupingSeparator());
        }
        if (!Const.isEmpty(field.getCurrencySymbol())) {
          data.dfs.setCurrencySymbol(field.getCurrencySymbol());
        }
 else {
          data.dfs.setCurrencySymbol(data.defaultDecimalFormatSymbols.getCurrencySymbol());
        }
        data.df.setDecimalFormatSymbols(data.dfs);
        if (v.getValueMeta().isBigNumber()) {
          retval=data.df.format(v.getValueData());
        }
 else         if (v.getValueMeta().isNumber()) {
          retval=data.df.format(v.getValueData());
        }
 else {
          retval=data.df.format(v.getValueData());
        }
      }
    }
 else {
      if (v.getValueData() == null) {
        if (idx >= 0 && field != null && !Const.isEmpty(field.getNullString())) {
          retval=field.getNullString();
        }
 else {
          retval=Const.NULL_NUMBER;
        }
      }
 else {
        retval=v.toString();
      }
    }
  }
 else   if (v.getValueMeta().isDate()) {
    if (idx >= 0 && field != null && !Const.isEmpty(field.getFormat()) && v.getValueData() != null) {
      if (!Const.isEmpty(field.getFormat())) {
        data.daf.applyPattern(field.getFormat());
      }
 else {
        data.daf.applyPattern(data.defaultDateFormat.toPattern());
      }
      data.daf.setDateFormatSymbols(data.dafs);
      retval=data.daf.format(v.getValueData());
    }
 else {
      if (v.getValueData() == null) {
        if (idx >= 0 && field != null && !Const.isEmpty(field.getNullString())) {
          retval=field.getNullString();
        }
 else {
          retval=Const.NULL_DATE;
        }
      }
 else {
        retval=v.toString();
      }
    }
  }
 else   if (v.getValueMeta().isString()) {
    if (v.getValueData() == null) {
      if (idx >= 0 && field != null && !Const.isEmpty(field.getNullString())) {
        retval=field.getNullString();
      }
 else {
        retval=Const.NULL_STRING;
      }
    }
 else {
      retval=v.toString();
    }
  }
 else   if (v.getValueMeta().isBinary()) {
    if (v.getValueData() == null) {
      if (!Const.isEmpty(field.getNullString())) {
        retval=field.getNullString();
      }
 else {
        retval=Const.NULL_BINARY;
      }
    }
 else {
      try {
        retval=new String(v.getValueMeta().getBinary(v.getValueData()),"UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        retval=Const.NULL_BINARY;
      }
    }
  }
 else {
    if (v.getValueData() == null) {
      if (idx >= 0 && field != null && !Const.isEmpty(field.getNullString())) {
        retval=field.getNullString();
      }
 else {
        retval=Const.NULL_BOOLEAN;
      }
    }
 else {
      retval=v.toString();
    }
  }
  return retval;
}
