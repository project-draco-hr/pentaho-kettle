{
  boolean error_found=false;
  String error_message="";
  CheckResult cr;
  ScriptEngine jscx;
  Bindings jsscope;
  CompiledScript jsscript;
  jscx=createNewScriptEngine(stepMeta.getName());
  jsscope=jscx.getBindings(ScriptContext.ENGINE_SCOPE);
  String strActiveStartScriptName="";
  String strActiveEndScriptName="";
  String strActiveScript="";
  String strActiveStartScript="";
  String strActiveEndScript="";
  if (jsScripts.length > 0) {
    for (int i=0; i < jsScripts.length; i++) {
      if (jsScripts[i].isTransformScript()) {
        strActiveScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isStartScript()) {
        strActiveStartScriptName=jsScripts[i].getScriptName();
        strActiveStartScript=jsScripts[i].getScript();
      }
 else       if (jsScripts[i].isEndScript()) {
        strActiveEndScriptName=jsScripts[i].getScriptName();
        strActiveEndScript=jsScripts[i].getScript();
      }
    }
  }
  if (prev != null && strActiveScript.length() > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptMeta.CheckResult.ConnectedStepOK",String.valueOf(prev.size())),stepMeta);
    remarks.add(cr);
    for (int i=0; i < getNumberOfJSScripts(); i++) {
      jsscope.put(jsScripts[i].getScriptName(),jsScripts[i].getScript());
    }
    try {
      if (getAddClasses() != null) {
        for (int i=0; i < getAddClasses().length; i++) {
          jsscope.put(getAddClasses()[i].getJSName(),getAddClasses()[i].getAddObject());
        }
      }
    }
 catch (    Exception e) {
      error_message=("Couldn't add JavaClasses to Context! Error:");
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
    try {
      jsscope.put("SKIP_TRANSFORMATION",Integer.valueOf(Script.SKIP_TRANSFORMATION));
      jsscope.put("ABORT_TRANSFORMATION",Integer.valueOf(Script.ABORT_TRANSFORMATION));
      jsscope.put("ERROR_TRANSFORMATION",Integer.valueOf(Script.ERROR_TRANSFORMATION));
      jsscope.put("CONTINUE_TRANSFORMATION",Integer.valueOf(Script.CONTINUE_TRANSFORMATION));
    }
 catch (    Exception ex) {
      error_message="Couldn't add Transformation Constants! Error:" + Const.CR + ex.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
    try {
      ScriptDummy dummyStep=new ScriptDummy(prev,transMeta.getStepFields(stepMeta));
      jsscope.put("_step_",dummyStep);
      Object[] row=new Object[prev.size()];
      jsscope.put("rowMeta",prev);
      for (int i=0; i < prev.size(); i++) {
        ValueMetaInterface valueMeta=prev.getValueMeta(i);
        Object valueData=null;
        if (valueMeta.isDate()) {
          valueData=new Date();
        }
        if (valueMeta.isString()) {
          valueData="test value test value test value test value test value " + "test value test value test value test value test value";
        }
        if (valueMeta.isInteger()) {
          valueData=Long.valueOf(0L);
        }
        if (valueMeta.isNumber()) {
          valueData=new Double(0.0);
        }
        if (valueMeta.isBigNumber()) {
          valueData=BigDecimal.ZERO;
        }
        if (valueMeta.isBoolean()) {
          valueData=Boolean.TRUE;
        }
        if (valueMeta.isBinary()) {
          valueData=new byte[]{0,1,2,3,4,5,6,7,8,9};
        }
        row[i]=valueData;
        jsscope.put(valueMeta.getName(),valueData);
      }
      jsscope.put("Value",Value.class);
      jsscope.put("row",row);
    }
 catch (    Exception ev) {
      error_message="Couldn't add Input fields to Script! Error:" + Const.CR + ev.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
    try {
      if (strActiveStartScript != null && strActiveStartScript.length() > 0) {
        jscx.eval(strActiveStartScript,jsscope);
        error_message="Found Start Script. " + strActiveStartScriptName + " Processing OK";
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepMeta);
        remarks.add(cr);
      }
    }
 catch (    Exception e) {
      error_message="Couldn't process Start Script! Error:" + Const.CR + e.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
    try {
      jsscript=((Compilable)jscx).compile(strActiveScript);
      try {
        jsscript.eval(jsscope);
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptMeta.CheckResult.ScriptCompiledOK2"),stepMeta);
        remarks.add(cr);
        if (fieldname.length > 0) {
          StringBuilder message=new StringBuilder(BaseMessages.getString(PKG,"ScriptMeta.CheckResult.FailedToGetValues",String.valueOf(fieldname.length)) + Const.CR + Const.CR);
          if (error_found) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,message.toString(),stepMeta);
          }
 else {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,message.toString(),stepMeta);
          }
          remarks.add(cr);
        }
      }
 catch (      ScriptException jse) {
        error_message=BaseMessages.getString(PKG,"ScriptMeta.CheckResult.CouldNotExecuteScript") + Const.CR + jse.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
catch (      Exception e) {
        error_message=BaseMessages.getString(PKG,"ScriptMeta.CheckResult.CouldNotExecuteScript2") + Const.CR + e.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
      try {
        if (strActiveEndScript != null && strActiveEndScript.length() > 0) {
          jscx.eval(strActiveEndScript,jsscope);
          error_message="Found End Script. " + strActiveEndScriptName + " Processing OK";
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,error_message,stepMeta);
          remarks.add(cr);
        }
      }
 catch (      Exception e) {
        error_message="Couldn't process End Script! Error:" + Const.CR + e.toString();
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
    }
 catch (    Exception e) {
      error_message=BaseMessages.getString(PKG,"ScriptMeta.CheckResult.CouldNotCompileScript") + Const.CR + e.toString();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
  }
 else {
    error_message=BaseMessages.getString(PKG,"ScriptMeta.CheckResult.CouldNotGetFieldsFromPreviousStep");
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,error_message,stepMeta);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,BaseMessages.getString(PKG,"ScriptMeta.CheckResult.ConnectedStepOK2"),stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,BaseMessages.getString(PKG,"ScriptMeta.CheckResult.NoInputReceived"),stepMeta);
    remarks.add(cr);
  }
}
