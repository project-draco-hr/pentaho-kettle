{
  try {
    String script=rep.getStepAttributeString(id_step,"script");
    if (!Const.isEmpty(script)) {
      jsScripts=new ScriptValuesScript[1];
      jsScripts[0]=new ScriptValuesScript(ScriptValuesScript.TRANSFORM_SCRIPT,"ScriptValue",script);
    }
 else {
      int nrScripts=rep.countNrStepAttributes(id_step,JSSCRIPT_TAG_NAME);
      jsScripts=new ScriptValuesScript[nrScripts];
      for (int i=0; i < nrScripts; i++) {
        jsScripts[i]=new ScriptValuesScript((int)rep.getStepAttributeInteger(id_step,i,JSSCRIPT_TAG_TYPE),rep.getStepAttributeString(id_step,i,JSSCRIPT_TAG_NAME),rep.getStepAttributeString(id_step,i,JSSCRIPT_TAG_SCRIPT));
      }
    }
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldname[i]=rep.getStepAttributeString(id_step,i,"field_name");
      rename[i]=rep.getStepAttributeString(id_step,i,"field_rename");
      type[i]=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      length[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      precision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
      replace[i]=rep.getStepAttributeBoolean(id_step,i,"field_replace");
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"ScriptMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
