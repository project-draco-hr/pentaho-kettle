{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta("test/org/pentaho/di/trans/steps/metainject/read_csv_file.ktr");
  String[][] fields=new String[][]{new String[]{"id","Integer",null,"3","0",null,",",".","left"},new String[]{"name","String",null,"10",null,null,null,null,"none"},new String[]{"firstname","String",null,"13",null,null,null,null,"none"},new String[]{"zip","String",null,"5",null,null,null,null,"left"},new String[]{"city","String",null,"8",null,null,null,null,"none"},new String[]{"birthdate","Date","yyyy/MM/dd","10",null,null,null,null,"none"},new String[]{"street","String",null,"11",null,null,null,null,"none"},new String[]{"housenr","Integer",null,"3","0",null,",",".","left"},new String[]{"stateCode","String",null,"9",null,null,null,null,"none"},new String[]{"state","String",null,"30",null,null,null,null,"none"}};
  String[] fieldKeys=new String[]{CsvInputAttr.FIELD_NAME.getKey(),CsvInputAttr.FIELD_TYPE.getKey(),CsvInputAttr.FIELD_FORMAT.getKey(),CsvInputAttr.FIELD_LENGTH.getKey(),CsvInputAttr.FIELD_PRECISION.getKey(),CsvInputAttr.FIELD_CURRENCY.getKey(),CsvInputAttr.FIELD_DECIMAL.getKey(),CsvInputAttr.FIELD_GROUP.getKey(),CsvInputAttr.FIELD_TRIM_TYPE.getKey()};
  String filename="test/org/pentaho/di/trans/steps/metainject/customers-100.txt";
  String stepname="CSV file input";
  StepMeta stepMeta=transMeta.findStep(stepname);
  CsvInputMeta csvInputMeta=(CsvInputMeta)stepMeta.getStepMetaInterface();
  StepMetaInjectionInterface injectionInterface=csvInputMeta.getStepMetaInjectionInterface();
  List<StepInjectionMetaEntry> entries=injectionInterface.getStepInjectionMetadataEntries();
  List<StepInjectionMetaEntry> injection=new ArrayList<StepInjectionMetaEntry>();
  StepInjectionMetaEntry filenameEntry=findMetaEntry(entries,CsvInputAttr.FILENAME.getXmlCode());
  assertNotNull(filenameEntry);
  filenameEntry.setValue(filename);
  injection.add(filenameEntry);
  StepInjectionMetaEntry fieldsEntry=findMetaEntry(entries,CsvInputAttr.FIELDS.getXmlCode());
  assertNotNull(fieldsEntry);
  StepInjectionMetaEntry fieldEntry=fieldsEntry.getDetails().get(0);
  StepInjectionMetaEntry fieldsCopy=fieldsEntry.clone();
  fieldsCopy.setDetails(new ArrayList<StepInjectionMetaEntry>());
  injection.add(fieldsCopy);
  for (  String[] field : fields) {
    StepInjectionMetaEntry fieldCopy=fieldEntry.clone();
    fieldCopy.setDetails(new ArrayList<StepInjectionMetaEntry>());
    for (int i=0; i < fieldKeys.length; i++) {
      StepInjectionMetaEntry entry=new StepInjectionMetaEntry(fieldKeys[i],field[i],ValueMetaInterface.TYPE_STRING,"description");
      fieldCopy.getDetails().add(entry);
    }
    fieldsCopy.getDetails().add(fieldCopy);
  }
  csvInputMeta.injectStepMetadataEntries(injection);
  assertEquals(filename,csvInputMeta.getFilename());
  assertEquals(10,csvInputMeta.getInputFields().length);
  Trans trans=new Trans(transMeta);
  trans.execute(null);
  trans.waitUntilFinished();
  Result result=trans.getResult();
  assertEquals(101,result.getNrLinesInput());
  assertEquals(100,result.getNrLinesWritten());
  RowMetaInterface rowMeta=transMeta.getStepFields(stepname);
  for (int i=0; i < rowMeta.getValueMetaList().size(); i++) {
    ValueMetaInterface valueMeta=rowMeta.getValueMetaList().get(i);
    assertEquals(fields[i][0],valueMeta.getName());
    assertEquals(fields[i][1],valueMeta.getTypeDesc());
    assertEquals(fields[i][2],valueMeta.getConversionMask());
    assertEquals(fields[i][3],valueMeta.getLength() == -1 ? null : Integer.toString(valueMeta.getLength()));
    assertEquals(fields[i][4],valueMeta.getPrecision() == -1 ? null : Integer.toString(valueMeta.getPrecision()));
    assertEquals(fields[i][5],valueMeta.getCurrencySymbol());
    assertEquals(fields[i][6],valueMeta.getDecimalSymbol());
    assertEquals(fields[i][7],valueMeta.getGroupingSymbol());
    assertEquals(fields[i][8],ValueMeta.getTrimTypeCode(valueMeta.getTrimType()));
  }
}
