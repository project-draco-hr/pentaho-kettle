{
  super(parent,SWT.NO_BACKGROUND | SWT.NO_FOCUS | SWT.NO_MERGE_PAINTS| SWT.NO_RADIO_GROUP);
  this.parent=parent;
  this.columns=columnInfo;
  this.rows=nrRows;
  this.props=pr;
  this.readonly=readOnly;
  this.clipboard=null;
  this.variables=space;
  sortfield=0;
  sortingDescending=false;
  sortable=true;
  selectionStart=-1;
  previous_shift=false;
  usedColors=new Hashtable<String,Color>();
  condition=null;
  lsMod=lsm;
  clearUndo();
  numberColumn=new ColumnInfo("#",ColumnInfo.COLUMN_TYPE_TEXT,true,true);
  ValueMetaInterface numberColumnValueMeta=new ValueMeta("#",ValueMetaInterface.TYPE_INTEGER);
  numberColumnValueMeta.setConversionMask("####0");
  numberColumn.setValueMeta(numberColumnValueMeta);
  lsUndo=new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      field_changed=true;
    }
  }
;
  Display disp=parent.getDisplay();
  dummy_image=new Image(disp,1,1);
  dummy_gc=new GC(dummy_image);
  gridFont=new Font(disp,props.getGridFont());
  dummy_gc.setFont(gridFont);
  FormLayout controlLayout=new FormLayout();
  controlLayout.marginLeft=0;
  controlLayout.marginRight=0;
  controlLayout.marginTop=0;
  controlLayout.marginBottom=0;
  setLayout(controlLayout);
  table=new Table(this,style | SWT.MULTI);
  props.setLook(table,Props.WIDGET_STYLE_TABLE);
  table.setLinesVisible(true);
  FormData fdTable=new FormData();
  fdTable.left=new FormAttachment(0,0);
  fdTable.right=new FormAttachment(100,0);
  fdTable.top=new FormAttachment(0,0);
  fdTable.bottom=new FormAttachment(100,0);
  table.setLayoutData(fdTable);
  tablecolumn=new TableColumn[columns.length + 1];
  tablecolumn[0]=new TableColumn(table,SWT.RIGHT);
  tablecolumn[0].setResizable(true);
  tablecolumn[0].setText("#");
  tablecolumn[0].setWidth(25);
  tablecolumn[0].setAlignment(SWT.RIGHT);
  for (int i=0; i < columns.length; i++) {
    int allignment=columns[i].getAllignement();
    tablecolumn[i + 1]=new TableColumn(table,allignment);
    tablecolumn[i + 1].setResizable(true);
    if (columns[i].getName() != null)     tablecolumn[i + 1].setText(columns[i].getName());
    if (columns[i].getToolTip() != null)     tablecolumn[i + 1].setToolTipText((columns[i].getToolTip()));
    ValueMetaInterface valueMeta=columns[i].getValueMeta();
    if (valueMeta != null && valueMeta.isNumeric()) {
      tablecolumn[i + 1].setAlignment(SWT.RIGHT);
    }
    tablecolumn[i + 1].pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (rows > 0) {
    table.setItemCount(rows);
  }
 else {
    table.setItemCount(1);
  }
  defaultBackgroundColor=table.getItem(0).getBackground();
  setRowNums();
  table.setSortColumn(table.getColumn(sortfield));
  table.setSortDirection(sortingDescending ? SWT.DOWN : SWT.UP);
  editor=new TableEditor(table);
  editor.grabHorizontal=true;
  editor.grabVertical=true;
  if (mRow != null && !mRow.isDisposed()) {
    mRow.dispose();
  }
  mRow=new Menu(table);
  MenuItem miRowInsBef=new MenuItem(mRow,SWT.NONE);
  miRowInsBef.setText(BaseMessages.getString(PKG,"TableView.menu.InsertBeforeRow"));
  MenuItem miRowInsAft=new MenuItem(mRow,SWT.NONE);
  miRowInsAft.setText(BaseMessages.getString(PKG,"TableView.menu.InsertAfterRow"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miRowUp=new MenuItem(mRow,SWT.NONE);
  miRowUp.setText(BaseMessages.getString(PKG,"TableView.menu.MoveUp"));
  MenuItem miRowDown=new MenuItem(mRow,SWT.NONE);
  miRowDown.setText(BaseMessages.getString(PKG,"TableView.menu.MoveDown"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miCol1=new MenuItem(mRow,SWT.NONE);
  miCol1.setText(BaseMessages.getString(PKG,"TableView.menu.OptimalSizeWithHeader"));
  MenuItem miCol2=new MenuItem(mRow,SWT.NONE);
  miCol2.setText(BaseMessages.getString(PKG,"TableView.menu.OptimalSizeWithoutHeader"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miClear=new MenuItem(mRow,SWT.NONE);
  miClear.setText(BaseMessages.getString(PKG,"TableView.menu.ClearAll"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miSelAll=new MenuItem(mRow,SWT.NONE);
  miSelAll.setText(BaseMessages.getString(PKG,"TableView.menu.SelectAll"));
  MenuItem miUnselAll=new MenuItem(mRow,SWT.NONE);
  miUnselAll.setText(BaseMessages.getString(PKG,"TableView.menu.ClearSelection"));
  MenuItem miFilter=new MenuItem(mRow,SWT.NONE);
  miFilter.setText(BaseMessages.getString(PKG,"TableView.menu.FilteredSelection"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miClipAll=new MenuItem(mRow,SWT.NONE);
  miClipAll.setText(BaseMessages.getString(PKG,"TableView.menu.CopyToClipboard"));
  MenuItem miPasteAll=new MenuItem(mRow,SWT.NONE);
  miPasteAll.setText(BaseMessages.getString(PKG,"TableView.menu.PasteFromClipboard"));
  MenuItem miCutAll=new MenuItem(mRow,SWT.NONE);
  miCutAll.setText(BaseMessages.getString(PKG,"TableView.menu.CutSelected"));
  MenuItem miDelAll=new MenuItem(mRow,SWT.NONE);
  miDelAll.setText(BaseMessages.getString(PKG,"TableView.menu.DeleteSelected"));
  MenuItem miKeep=new MenuItem(mRow,SWT.NONE);
  miKeep.setText(BaseMessages.getString(PKG,"TableView.menu.KeepSelected"));
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miCopyToAll=new MenuItem(mRow,SWT.NONE);
  miCopyToAll.setText(BaseMessages.getString(PKG,"TableView.menu.CopyFieldToAllRows"));
  new MenuItem(mRow,SWT.SEPARATOR);
  miEditUndo=new MenuItem(mRow,SWT.NONE);
  miEditRedo=new MenuItem(mRow,SWT.NONE);
  setUndoMenu();
  if (readonly) {
    miRowInsBef.setEnabled(false);
    miRowInsAft.setEnabled(false);
    miRowUp.setEnabled(false);
    miRowDown.setEnabled(false);
    miClear.setEnabled(false);
    miCopyToAll.setEnabled(false);
    miPasteAll.setEnabled(false);
    miDelAll.setEnabled(false);
    miCutAll.setEnabled(false);
    miKeep.setEnabled(false);
  }
  lsRowInsBef=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      insertRowBefore();
    }
  }
;
  lsRowInsAft=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      insertRowAfter();
    }
  }
;
  lsCol1=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      optWidth(true);
    }
  }
;
  lsCol2=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      optWidth(false);
    }
  }
;
  lsRowUp=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveRows(-1);
    }
  }
;
  lsRowDown=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveRows(+1);
    }
  }
;
  lsClear=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clearAll(true);
    }
  }
;
  lsClipAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clipSelected();
    }
  }
;
  lsCopyToAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      copyToAll();
    }
  }
;
  lsSelAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectAll();
    }
  }
;
  lsUnselAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      unselectAll();
    }
  }
;
  lsPasteAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      pasteSelected();
    }
  }
;
  lsCutAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      cutSelected();
    }
  }
;
  lsDelAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      delSelected();
    }
  }
;
  lsKeep=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      keepSelected();
    }
  }
;
  lsFilter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFilter();
    }
  }
;
  lsEditUndo=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      undoAction();
    }
  }
;
  lsEditRedo=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redoAction();
    }
  }
;
  miRowInsBef.addSelectionListener(lsRowInsBef);
  miRowInsAft.addSelectionListener(lsRowInsAft);
  miCol1.addSelectionListener(lsCol1);
  miCol2.addSelectionListener(lsCol2);
  miRowUp.addSelectionListener(lsRowUp);
  miRowDown.addSelectionListener(lsRowDown);
  miClear.addSelectionListener(lsClear);
  miClipAll.addSelectionListener(lsClipAll);
  miCopyToAll.addSelectionListener(lsCopyToAll);
  miSelAll.addSelectionListener(lsSelAll);
  miUnselAll.addSelectionListener(lsUnselAll);
  miPasteAll.addSelectionListener(lsPasteAll);
  miCutAll.addSelectionListener(lsCutAll);
  miDelAll.addSelectionListener(lsDelAll);
  miKeep.addSelectionListener(lsKeep);
  miFilter.addSelectionListener(lsFilter);
  miEditUndo.addSelectionListener(lsEditUndo);
  miEditRedo.addSelectionListener(lsEditRedo);
  table.setMenu(mRow);
  lsFocusText=new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      if (table.isDisposed())       return;
      TableItem row=activeTableItem;
      if (row == null)       return;
      int colnr=activeTableColumn;
      int rownr=table.indexOf(row);
      textWidgetCaretPosition=getTextWidgetCaretPosition(colnr);
      if (!row.isDisposed())       row.setText(colnr,getTextWidgetValue(colnr));
      text.dispose();
      String after_edit[]=getItemText(row);
      checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
    }
  }
;
  lsFocusCombo=new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      TableItem row=activeTableItem;
      if (row == null)       return;
      int colnr=activeTableColumn;
      int rownr=table.indexOf(row);
      if (colnr > 0) {
        try {
          row.setText(colnr,combo.getText());
        }
 catch (        Exception exc) {
        }
        String after_edit[]=getItemText(row);
        if (after_edit != null) {
          checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
        }
      }
      combo.dispose();
    }
  }
;
  lsModCombo=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      TableItem row=activeTableItem;
      if (row == null)       return;
      int colnr=activeTableColumn;
      int rownr=table.indexOf(row);
      row.setText(colnr,combo.getText());
      String after_edit[]=getItemText(row);
      checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
    }
  }
;
  lsKeyText=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      boolean right=false;
      boolean left=false;
      if (e.character == SWT.CR || e.keyCode == SWT.ARROW_DOWN || e.keyCode == SWT.ARROW_UP || e.keyCode == SWT.TAB || left || right) {
        if (activeTableItem == null)         return;
        applyTextChange(activeTableItem,activeTableRow,activeTableColumn);
        int maxcols=table.getColumnCount();
        int maxrows=table.getItemCount();
        boolean editNextCell=false;
        if (e.keyCode == SWT.ARROW_DOWN && activeTableRow < maxrows - 1) {
          activeTableRow++;
          editNextCell=true;
        }
        if (e.keyCode == SWT.ARROW_UP && activeTableRow > 0) {
          activeTableRow--;
          editNextCell=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) || right) {
          activeTableColumn++;
          editNextCell=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) || left) {
          activeTableColumn--;
          editNextCell=true;
        }
        if (activeTableColumn < 1) {
          activeTableColumn=maxcols - 1;
          if (activeTableRow > 0)           activeTableRow--;
        }
        if (activeTableColumn >= maxcols) {
          activeTableColumn=1;
          activeTableRow++;
        }
        if (activeTableRow >= maxrows) {
          TableItem item=new TableItem(table,SWT.NONE,activeTableRow);
          item.setText(1,"");
          setRowNums();
        }
        activeTableItem=table.getItem(activeTableRow);
        if (editNextCell) {
          edit(activeTableRow,activeTableColumn);
        }
 else {
          if (e.keyCode == SWT.ARROW_DOWN && activeTableRow == maxrows - 1) {
            insertRowAfter();
          }
        }
      }
 else       if (e.keyCode == SWT.ESC) {
        text.dispose();
      }
    }
  }
;
  lsKeyCombo=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      boolean right=false;
      boolean left=false;
      if (e.character == SWT.CR || e.keyCode == SWT.TAB || left || right) {
        if (activeTableItem == null)         return;
        applyComboChange(activeTableItem,activeTableRow,activeTableColumn);
        String after_edit[]=getItemText(activeTableItem);
        checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{activeTableRow});
        int maxcols=table.getColumnCount();
        int maxrows=table.getItemCount();
        boolean sel=false;
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) || right) {
          activeTableColumn++;
          sel=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) || right) {
          activeTableColumn--;
          sel=true;
        }
        if (activeTableColumn < 1) {
          activeTableColumn=maxcols - 1;
          if (activeTableRow > 0)           activeTableRow--;
        }
        if (activeTableColumn >= maxcols) {
          activeTableColumn=1;
          activeTableRow++;
        }
        if (activeTableRow >= maxrows) {
          TableItem item=new TableItem(table,SWT.NONE,activeTableRow);
          item.setText(1,"");
          setRowNums();
        }
        if (sel) {
          edit(activeTableRow,activeTableColumn);
        }
      }
 else       if (e.keyCode == SWT.ESC) {
        combo.dispose();
      }
    }
  }
;
  KeyListener lsKeyTable=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (activeTableItem == null)       return;
      int maxcols=table.getColumnCount();
      int maxrows=table.getItemCount();
      boolean shift=(e.stateMask & SWT.SHIFT) != 0;
      if (!previous_shift && shift || selectionStart < 0) {
        selectionStart=activeTableRow;
      }
      previous_shift=shift;
      if (!readonly && e.keyCode == SWT.ARROW_DOWN && ((e.stateMask & SWT.CTRL) != 0)) {
        moveRows(+1);
        e.doit=false;
        return;
      }
      if (!readonly && e.keyCode == SWT.ARROW_UP && ((e.stateMask & SWT.CTRL) != 0)) {
        moveRows(-1);
        e.doit=false;
        return;
      }
      if (e.keyCode == SWT.ARROW_DOWN && shift) {
        activeTableRow++;
        if (activeTableRow >= maxrows)         activeTableRow=maxrows - 1;
        selectRows(selectionStart,activeTableRow);
        table.showItem(activeTableItem);
        return;
      }
      if (e.keyCode == SWT.ARROW_UP && shift) {
        activeTableRow--;
        if (activeTableRow < 0)         activeTableRow=0;
        selectRows(activeTableRow,selectionStart);
        table.showItem(activeTableItem);
        return;
      }
      if (e.keyCode == SWT.HOME && shift) {
        activeTableRow=0;
        selectRows(selectionStart,activeTableRow);
        table.showItem(activeTableItem);
        return;
      }
      if (e.keyCode == SWT.END && shift) {
        activeTableRow=maxrows;
        selectRows(selectionStart,activeTableRow);
        table.showItem(activeTableItem);
        return;
      }
      if ((e.keyCode == SWT.ARROW_DOWN && !shift) || (e.keyCode == SWT.ARROW_UP && !shift) || (e.keyCode == SWT.HOME && !shift)|| (e.keyCode == SWT.END && !shift)) {
switch (e.keyCode) {
case SWT.ARROW_DOWN:
          activeTableRow++;
        if (activeTableRow >= maxrows) {
          if (!readonly) {
            insertRowAfter();
          }
 else {
            activeTableRow=maxrows - 1;
          }
        }
      break;
case SWT.ARROW_UP:
    activeTableRow--;
  if (activeTableRow < 0)   activeTableRow=0;
break;
case SWT.HOME:
activeTableRow=0;
break;
case SWT.END:
activeTableRow=maxrows - 1;
break;
default :
break;
}
setPosition(activeTableRow,activeTableColumn);
table.deselectAll();
table.select(activeTableRow);
return;
}
if (e.character == 1) {
selectAll();
return;
}
if (e.keyCode == SWT.ESC) {
unselectAll();
selectRows(activeTableRow,activeTableRow);
return;
}
if (e.character == 3) {
clipSelected();
return;
}
if (!readonly && e.character == 11) {
keepSelected();
return;
}
if (!readonly && e.character == 24) {
cutSelected();
return;
}
if (!readonly && e.character == 22) {
pasteSelected();
return;
}
if (e.keyCode == SWT.F3) {
optWidth(true);
return;
}
if (!readonly && e.keyCode == SWT.DEL) {
delSelected();
return;
}
if (e.keyCode == SWT.F4) {
optWidth(false);
return;
}
if (e.character == 25) {
redoAction();
return;
}
if (e.character == 26) {
undoAction();
return;
}
if (e.keyCode == SWT.CR || e.keyCode == SWT.ARROW_RIGHT || e.keyCode == SWT.TAB) {
activeTableColumn=1;
edit(activeTableRow,activeTableColumn);
return;
}
if (activeTableColumn > 0) {
boolean text_char=(e.character >= 'a' && e.character <= 'z') || (e.character >= 'A' && e.character <= 'Z') || (e.character >= '0' && e.character <= '9')|| (e.character == ' ')|| (e.character == '_')|| (e.character == ',')|| (e.character == '.')|| (e.character == '+')|| (e.character == '-')|| (e.character == '*')|| (e.character == '/')|| (e.character == ';');
if (e.character == SWT.CR || e.keyCode == SWT.F2 || text_char) {
boolean select_text=true;
char extra_char=0;
if (text_char) {
extra_char=e.character;
select_text=false;
}
edit(activeTableRow,activeTableColumn,select_text,extra_char);
}
if (e.character == SWT.TAB) {
if (e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) {
activeTableColumn++;
}
if (e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) {
activeTableColumn--;
}
if (activeTableColumn < 1) {
activeTableColumn=maxcols - 1;
if (activeTableRow > 0) activeTableRow--;
}
if (activeTableColumn >= maxcols) {
activeTableColumn=1;
activeTableRow++;
}
if (activeTableRow >= maxrows) {
TableItem item=new TableItem(table,SWT.NONE,activeTableRow);
item.setText(1,"");
setRowNums();
}
edit(activeTableRow,activeTableColumn);
}
}
setFocus();
table.setFocus();
}
}
;
table.addKeyListener(lsKeyTable);
MouseAdapter lsMouseT=new MouseAdapter(){
public void mouseDown(MouseEvent event){
if (event.button == 1) {
boolean shift=(event.stateMask & SWT.SHIFT) != 0;
boolean control=(event.stateMask & SWT.CONTROL) != 0;
if (!shift && !control) {
Rectangle clientArea=table.getClientArea();
Point pt=new Point(event.x,event.y);
int index=table.getTopIndex();
while (index < table.getItemCount()) {
boolean visible=false;
final TableItem item=table.getItem(index);
for (int i=0; i < table.getColumnCount(); i++) {
Rectangle rect=item.getBounds(i);
if (rect.contains(pt)) {
activeTableItem=item;
activeTableColumn=i;
activeTableRow=index;
editSelected();
return;
}
 else {
if (i == table.getColumnCount() - 1 && pt.x > rect.x + rect.width && pt.y >= rect.y && pt.y <= rect.y + rect.height) {
return;
}
}
if (!visible && rect.intersects(clientArea)) {
visible=true;
}
}
if (!visible) return;
index++;
}
setPosition(table.getItemCount() - 1,1);
insertRowAfter();
}
}
}
}
;
table.addMouseListener(lsMouseT);
final int nrcols=tablecolumn.length;
for (int i=0; i < nrcols; i++) {
final int colnr=i;
Listener lsSort=new Listener(){
public void handleEvent(Event e){
clearUndo();
sortTable(colnr);
}
}
;
tablecolumn[i].addListener(SWT.Selection,lsSort);
}
lsTraverse=new TraverseListener(){
public void keyTraversed(TraverseEvent e){
e.doit=false;
}
}
;
table.addTraverseListener(lsTraverse);
addDisposeListener(new DisposeListener(){
public void widgetDisposed(DisposeEvent e){
if (clipboard != null) {
clipboard.dispose();
clipboard=null;
}
dummy_gc.dispose();
dummy_image.dispose();
gridFont.dispose();
}
}
);
Transfer[] ttypes=new Transfer[]{TextTransfer.getInstance()};
DragSource ddSource=new DragSource(table,DND.DROP_MOVE | DND.DROP_COPY);
ddSource.setTransfer(ttypes);
ddSource.addDragListener(new DragSourceListener(){
public void dragStart(DragSourceEvent event){
}
public void dragSetData(DragSourceEvent event){
event.data="TableView" + Const.CR + getSelectedText();
}
public void dragFinished(DragSourceEvent event){
}
}
);
table.layout();
table.pack();
optWidth(true);
layout();
pack();
}
