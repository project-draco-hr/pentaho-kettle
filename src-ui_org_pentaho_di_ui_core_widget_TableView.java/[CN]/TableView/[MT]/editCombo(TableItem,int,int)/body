{
  before_edit=getItemText(row);
  field_changed=false;
  ColumnInfo colinfo=columns[colnr - 1];
  if (columns[colnr - 1].isReadOnly() && columns[colnr - 1].getSelectionAdapter() != null) {
    return;
  }
  combo=new CCombo(table,colinfo.isReadOnly() ? SWT.READ_ONLY : SWT.NONE);
  props.setLook(combo,Props.WIDGET_STYLE_TABLE);
  combo.addTraverseListener(lsTraverse);
  combo.addModifyListener(lsModCombo);
  combo.addFocusListener(lsFocusCombo);
  String opt[]=colinfo.getComboValues();
  if (colinfo.getComboValuesSelectionListener() != null) {
    opt=colinfo.getComboValuesSelectionListener().getComboValues(row,rownr,colnr);
  }
  for (int i=0; i < opt.length; i++)   combo.add(opt[i]);
  combo.setText(row.getText(colnr));
  if (lsMod != null)   combo.addModifyListener(lsMod);
  combo.addModifyListener(lsUndo);
  String tooltip=colinfo.getToolTip();
  if (tooltip != null)   combo.setToolTipText(tooltip);
 else   combo.setToolTipText("");
  combo.setVisible(true);
  combo.addKeyListener(lsKeyCombo);
  if (columns[colnr - 1].getSelectionAdapter() != null) {
    combo.addSelectionListener(columns[colnr - 1].getSelectionAdapter());
  }
  editor.horizontalAlignment=SWT.LEFT;
  editor.layout();
  editor.setEditor(combo,row,colnr);
  combo.setFocus();
  combo.layout();
}
