{
  for (int c=0; c < table.getColumnCount(); c++) {
    TableColumn tc=table.getColumn(c);
    int max=0;
    if (header) {
      max=TableView.dummy_gc.textExtent(tc.getText(),SWT.DRAW_TAB | SWT.DRAW_DELIMITER).x;
      if (c == sortfield && sortable) {
        max+=15;
      }
    }
    for (int r=0; r < table.getItemCount() && (r < nrLines || nrLines <= 0); r++) {
      TableItem ti=table.getItem(r);
      if (ti != null) {
        String str="";
        if (c > 0) {
switch (columns[c - 1].getType()) {
case ColumnInfo.COLUMN_TYPE_TEXT:
            str=ti.getText(c);
          break;
case ColumnInfo.COLUMN_TYPE_CCOMBO:
case ColumnInfo.COLUMN_TYPE_FORMAT:
        str=ti.getText(c);
      int minLength=str.length();
    String[] options=columns[c - 1].getComboValues();
  if (options != null) {
    for (int x=0; x < options.length; x++) {
      if (options[x].length() > minLength) {
        str=options[x];
        minLength=options[x].length();
      }
    }
  }
break;
case ColumnInfo.COLUMN_TYPE_BUTTON:
str=columns[c - 1].getButtonText();
break;
default :
break;
}
}
 else {
str=ti.getText(c);
}
if (str == null) str="";
int len=TableView.dummy_gc.textExtent(str,SWT.DRAW_TAB | SWT.DRAW_DELIMITER).x;
if (len > max) max=len;
}
}
try {
int extra=25;
if (Const.isOSX() || Const.isLinux()) max*=1.25;
tc.setWidth(max + extra);
}
 catch (Exception e) {
}
}
unEdit();
}
