{
  if (parentCondition == null) {
    parentCondition=new Condition();
  }
 else {
    Condition c=new Condition();
    c.setOperator(parentOperator);
    parentCondition.addCondition(c);
    parentCondition=c;
  }
  String orOperatorString=" OR ";
  int orConditionOperator=Condition.OPERATOR_OR;
  int lastIndex=splitByOperator(clause,parentCondition,orOperatorString,orConditionOperator);
  if (lastIndex == 0) {
    String andOperatorString=" AND ";
    int andConditionOperator=Condition.OPERATOR_AND;
    lastIndex=splitByOperator(clause,parentCondition,andOperatorString,andConditionOperator);
    if (lastIndex == 0) {
      String cleaned=Const.trim(clause);
      boolean negation=false;
      Matcher paramMatcher=PARAMETER_REGEX_PATTERN.matcher(cleaned);
      if (paramMatcher.matches()) {
        String parameterName=paramMatcher.group(1);
        String parameterValue=paramMatcher.group(2);
        validateParam(clause,parameterName,parameterValue);
        parentCondition.addCondition(createParameterCondition(orConditionOperator,parameterName,parameterValue));
      }
 else {
        if (Pattern.matches("^NOT\\s*\\(.*\\)$",cleaned.toUpperCase())) {
          negation=true;
          cleaned=Const.trim(cleaned.substring(3));
        }
        if (cleaned.startsWith("(") && cleaned.endsWith(")")) {
          cleaned=cleaned.substring(1,cleaned.length() - 1);
          Condition c=splitConditionByOperator(cleaned,parentCondition,Condition.OPERATOR_NONE);
          c.setNegated(negation);
        }
 else {
          Condition subCondition=parseAtomicCondition(cleaned);
          subCondition.setOperator(orConditionOperator);
          parentCondition.addCondition(subCondition);
        }
      }
    }
  }
  return parentCondition;
}
