{
  CheckResult cr;
  if (databaseMeta != null) {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Connection exists",stepMeta);
    remarks.add(cr);
    final PaloHelper helper=new PaloHelper(databaseMeta);
    try {
      helper.connect();
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"Connection to database OK",stepMeta);
      remarks.add(cr);
      if (!Const.isEmpty(cube)) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_OK,"The name of the cube is entered",stepMeta);
        remarks.add(cr);
      }
 else {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"The name of the cube is missing.",stepMeta);
        remarks.add(cr);
      }
      if (this.cubeMeasure == null) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Measure field is empty.",stepMeta);
        remarks.add(cr);
      }
 else {
        if (Const.isEmpty(this.cubeMeasure.getFieldName())) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Measure field Name is empty.",stepMeta);
          remarks.add(cr);
        }
        if (Const.isEmpty(this.cubeMeasure.getFieldType())) {
          cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Measure field Type is empty.",stepMeta);
          remarks.add(cr);
        }
      }
      if (this.fields == null || this.fields.size() == 0) {
        cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Cell Input Fields are empty.",stepMeta);
        remarks.add(cr);
      }
 else {
        for (        DimensionField field : this.fields) {
          if (Const.isEmpty(field.getFieldName())) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Output field for dimension " + field.getDimensionName() + " is empty.",stepMeta);
            remarks.add(cr);
          }
          if (Const.isEmpty(field.getFieldType())) {
            cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Output field type for dimension " + field.getDimensionName() + " is empty.",stepMeta);
            remarks.add(cr);
          }
        }
      }
    }
 catch (    KettleException e) {
      cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"An error occurred: " + e.getMessage(),stepMeta);
      remarks.add(cr);
    }
 finally {
      helper.disconnect();
    }
  }
 else {
    cr=new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR,"Please select or create a connection to use",stepMeta);
    remarks.add(cr);
  }
}
