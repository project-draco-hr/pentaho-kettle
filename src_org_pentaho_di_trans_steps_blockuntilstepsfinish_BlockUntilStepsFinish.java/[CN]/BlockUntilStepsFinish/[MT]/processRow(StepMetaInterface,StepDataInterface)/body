{
  meta=(BlockUntilStepsFinishMeta)smi;
  data=(BlockUntilStepsFinishData)sdi;
  if (first) {
    first=false;
    String[] stepnames=null;
    int stepnrs=0;
    if (meta.getStepName() != null && meta.getStepName().length > 0) {
      stepnames=meta.getStepName();
      stepnrs=stepnames.length;
    }
 else {
      throw new KettleException(BaseMessages.getString(PKG,"BlockUntilStepsFinish.Error.NotSteps"));
    }
    String[] targetSteps=getTransMeta().getNextStepNames(getStepMeta());
    data.stepInterfaces=new ConcurrentHashMap<Integer,StepInterface>();
    for (int i=0; i < stepnrs; i++) {
      if (stepnames[i].equals(getStepname()))       throw new KettleException("You can not wait for step [" + stepnames[i] + "] to finish!");
      if (targetSteps != null) {
        for (int j=0; j < targetSteps.length; j++) {
          if (stepnames[i].equals(targetSteps[j]))           throw new KettleException("You can not get metrics for the target step [" + targetSteps[i] + "]!");
        }
      }
      int CopyNr=Const.toInt(meta.getStepCopyNr()[i],0);
      StepInterface step=getDispatcher().findBaseSteps(stepnames[i]).get(CopyNr);
      if (step == null)       throw new KettleException("Erreur finding step [" + stepnames[i] + "] nr copy="+ CopyNr+ "!");
      data.stepInterfaces.put(i,getDispatcher().findBaseSteps(stepnames[i]).get(CopyNr));
    }
  }
  while (data.continueLoop && !isStopped()) {
    data.continueLoop=false;
    Iterator<Entry<Integer,StepInterface>> it=data.stepInterfaces.entrySet().iterator();
    while (it.hasNext()) {
      Entry<Integer,StepInterface> e=it.next();
      StepInterface step=e.getValue();
      if (step.getStatus() != StepExecutionStatus.STATUS_FINISHED) {
        data.continueLoop=true;
      }
 else {
        data.stepInterfaces.remove(e.getKey());
        if (log.isDetailed())         logDetailed("Finished running step [" + step.getStepname() + "("+ step.getCopy()+ ")].");
      }
    }
    if (data.continueLoop) {
      try {
        Thread.sleep(200);
      }
 catch (      Exception e) {
      }
    }
  }
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  putRow(getInputRowMeta(),r);
  return true;
}
