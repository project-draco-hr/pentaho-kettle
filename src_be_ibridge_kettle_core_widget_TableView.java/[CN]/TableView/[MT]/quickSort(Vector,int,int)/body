{
  int lowToHighIndex;
  int highToLowIndex;
  int pivotIndex;
  Row pivotValue;
  Row lowToHighValue;
  Row highToLowValue;
  Row parking;
  int newLowIndex;
  int newHighIndex;
  int compareResult;
  lowToHighIndex=lowIndex;
  highToLowIndex=highIndex;
  pivotIndex=(lowToHighIndex + highToLowIndex) / 2;
  pivotValue=(Row)elements.elementAt(pivotIndex);
  newLowIndex=highIndex + 1;
  newHighIndex=lowIndex - 1;
  while ((newHighIndex + 1) < newLowIndex) {
    lowToHighValue=(Row)elements.elementAt(lowToHighIndex);
    while (lowToHighIndex < newLowIndex & lowToHighValue.compare(pivotValue,sortfield + 1,sortingDescending) < 0) {
      newHighIndex=lowToHighIndex;
      lowToHighIndex++;
      lowToHighValue=(Row)elements.elementAt(lowToHighIndex);
    }
    highToLowValue=(Row)elements.elementAt(highToLowIndex);
    while (newHighIndex <= highToLowIndex & (highToLowValue.compare(pivotValue,sortfield + 1,sortingDescending) > 0)) {
      newLowIndex=highToLowIndex;
      highToLowIndex--;
      highToLowValue=(Row)elements.elementAt(highToLowIndex);
    }
    if (lowToHighIndex == highToLowIndex) {
      newHighIndex=lowToHighIndex;
    }
 else     if (lowToHighIndex < highToLowIndex) {
      compareResult=lowToHighValue.compare(highToLowValue,sortfield + 1,sortingDescending);
      if (compareResult >= 0) {
        parking=lowToHighValue;
        elements.setElementAt(highToLowValue,lowToHighIndex);
        elements.setElementAt(parking,highToLowIndex);
        newLowIndex=highToLowIndex;
        newHighIndex=lowToHighIndex;
        lowToHighIndex++;
        highToLowIndex--;
      }
    }
  }
  if (lowIndex < newHighIndex) {
    this.quickSort(elements,lowIndex,newHighIndex);
  }
  if (newLowIndex < highIndex) {
    this.quickSort(elements,newLowIndex,highIndex);
  }
}
