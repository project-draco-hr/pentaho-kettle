{
  before_edit=getItemText(row);
  field_changed=false;
  if (columns[colnr - 1].isReadOnly()) {
    return;
  }
  if (text != null && !text.isDisposed())   text.dispose();
  if (columns[colnr - 1].getSelectionAdapter() != null) {
    Event e=new Event();
    e.widget=this;
    e.x=colnr;
    e.y=rownr;
    columns[colnr - 1].getSelectionAdapter().widgetSelected(new SelectionEvent(e));
    return;
  }
  String content=row.getText(colnr) + (extra != 0 ? "" + extra : "");
  String tooltip=columns[colnr - 1].getToolTip();
  final boolean useVariables=columns[colnr - 1].isUsingVariables();
  ModifyListener modifyListener=new ModifyListener(){
    public void modifyText(    ModifyEvent me){
      String str=getTextWidgetValue(colnr);
      int strmax=dummy_gc.textExtent(str,SWT.DRAW_TAB | SWT.DRAW_DELIMITER).x + 20;
      int colmax=tablecolumn[colnr].getWidth();
      if (strmax > colmax) {
        tablecolumn[colnr].setWidth(strmax + 50);
        if (useVariables) {
          TextVar widget=(TextVar)text;
          int idx=widget.getTextWidget().getCaretPosition();
          widget.selectAll();
          widget.showSelection();
          widget.getTextWidget().setSelection(idx);
        }
 else {
          Text widget=(Text)text;
          int idx=widget.getCaretPosition();
          widget.selectAll();
          widget.showSelection();
          widget.setSelection(idx);
        }
      }
    }
  }
;
  if (useVariables) {
    GetCaretPositionInterface getCaretPositionInterface=new GetCaretPositionInterface(){
      public int getCaretPosition(){
        return ((TextVar)text).getTextWidget().getCaretPosition();
      }
    }
;
    InsertTextInterface insertTextInterface=new InsertTextInterface(){
      public void insertText(      String string,      int position){
        StringBuffer buffer=new StringBuffer(table.getItem(rownr).getText(colnr));
        buffer.insert(position,string);
        table.getItem(rownr).setText(colnr,buffer.toString());
        int newPosition=position + string.length();
        edit(rownr,colnr);
        ((TextVar)text).setSelection(newPosition);
        ((TextVar)text).showSelection();
      }
    }
;
    TextVar textWidget=new TextVar(table,SWT.NONE,getCaretPositionInterface,insertTextInterface);
    text=textWidget;
    textWidget.setText(content);
    if (lsMod != null)     textWidget.addModifyListener(lsMod);
    textWidget.addModifyListener(lsUndo);
    textWidget.setSelection(content.length());
    textWidget.addKeyListener(lsKeyText);
    textWidget.addModifyListener(modifyListener);
    if (select_text)     textWidget.selectAll();
    if (tooltip != null)     textWidget.setToolTipText(tooltip);
 else     textWidget.setToolTipText("");
    textWidget.addTraverseListener(lsTraverse);
    textWidget.addFocusListener(lsFocusText);
  }
 else {
    Text textWidget=new Text(table,SWT.NONE);
    text=textWidget;
    textWidget.setText(content);
    if (lsMod != null)     textWidget.addModifyListener(lsMod);
    textWidget.addModifyListener(lsUndo);
    textWidget.setSelection(content.length());
    textWidget.addKeyListener(lsKeyText);
    textWidget.addModifyListener(modifyListener);
    if (select_text)     textWidget.selectAll();
    if (tooltip != null)     textWidget.setToolTipText(tooltip);
 else     textWidget.setToolTipText("");
  }
  props.setLook(text,Props.WIDGET_STYLE_TABLE);
  int width=tablecolumn[colnr].getWidth();
  int height=30;
  editor.horizontalAlignment=SWT.LEFT;
  editor.grabHorizontal=true;
  editor.setEditor(text,row,colnr);
  text.setFocus();
  text.setSize(width,height);
  editor.layout();
}
