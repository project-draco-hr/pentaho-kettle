{
  super(par,SWT.NO_BACKGROUND | SWT.NO_FOCUS | SWT.NO_MERGE_PAINTS| SWT.NO_RADIO_GROUP);
  parent=par;
  style=st;
  columns=c;
  rows=r;
  props=pr;
  items=new ArrayList();
  readonly=ro;
  clipboard=null;
  sortfield=0;
  sort_desc=false;
  from_selection=-1;
  previous_shift=false;
  last_carret_position=-1;
  condition=null;
  prev_rownr=-1;
  lsMod=lsm;
  table_name=this.getClass().getName();
  clearUndo();
  lsUndo=new ModifyListener(){
    public void modifyText(    ModifyEvent arg0){
      field_changed=true;
    }
  }
;
  Display disp=parent.getDisplay();
  dummy_image=new Image(disp,1,1);
  dummy_gc=new GC(dummy_image);
  gridFont=new Font(disp,props.getGridFont());
  dummy_gc.setFont(gridFont);
  FormLayout controlLayout=new FormLayout();
  controlLayout.marginLeft=0;
  controlLayout.marginRight=0;
  controlLayout.marginTop=0;
  controlLayout.marginBottom=0;
  setLayout(controlLayout);
  table=new Table(this,style | SWT.MULTI);
  props.setLook(table,Props.WIDGET_STYLE_TABLE);
  table.setLinesVisible(true);
  FormData fdTable=new FormData();
  fdTable.left=new FormAttachment(0,0);
  fdTable.right=new FormAttachment(100,0);
  fdTable.top=new FormAttachment(0,0);
  fdTable.bottom=new FormAttachment(100,0);
  table.setLayoutData(fdTable);
  tablecolumn=new TableColumn[columns.length + 1];
  tablecolumn[0]=new TableColumn(table,SWT.RIGHT);
  tablecolumn[0].setResizable(true);
  tablecolumn[0].setText("#");
  tablecolumn[0].setWidth(25);
  tablecolumn[0].setAlignment(SWT.RIGHT);
  for (int i=0; i < columns.length; i++) {
    tablecolumn[i + 1]=new TableColumn(table,columns[i].getAllignement());
    tablecolumn[i + 1].setResizable(true);
    if (columns[i].getName() != null)     tablecolumn[i + 1].setText(columns[i].getName());
    tablecolumn[i + 1].pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (rows > 0) {
    for (int i=0; i < rows; i++) {
      TableItem item=new TableItem(table,SWT.NONE);
      for (int j=0; j < columns.length; j++) {
        item.setText(j + 1,columns[j].getDefault());
      }
      items.add(item);
    }
  }
 else {
    TableItem item=new TableItem(table,SWT.NONE);
    for (int j=0; j < columns.length; j++) {
      item.setText(j + 1,columns[j].getDefault());
    }
    Props.setTableItemLook(item,disp);
    items.add(item);
  }
  setRowNums();
  cursor=new TableCursor(table,SWT.NONE);
  cursor.setVisible(true);
  props.setLook(cursor,Props.WIDGET_STYLE_TABLE);
  cursor.layout();
  cursor.pack();
  editor=new ControlEditor(table);
  mRow=new Menu(table);
  MenuItem miRowInsBef=new MenuItem(mRow,SWT.NONE);
  miRowInsBef.setText("Insert before this row");
  MenuItem miRowInsAft=new MenuItem(mRow,SWT.NONE);
  miRowInsAft.setText("Insert after this row");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miRowUp=new MenuItem(mRow,SWT.NONE);
  miRowUp.setText("Move up\tCTRL-UP");
  MenuItem miRowDown=new MenuItem(mRow,SWT.NONE);
  miRowDown.setText("Move down\tCTRL-DOWN");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miCol1=new MenuItem(mRow,SWT.NONE);
  miCol1.setText("Optimal Column size incl. header\tF3");
  MenuItem miCol2=new MenuItem(mRow,SWT.NONE);
  miCol2.setText("Optimal Column size excl. header\tF4");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miClear=new MenuItem(mRow,SWT.NONE);
  miClear.setText("Clear all");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miSelAll=new MenuItem(mRow,SWT.NONE);
  miSelAll.setText("Select all rows\tCTRL-A");
  MenuItem miUnselAll=new MenuItem(mRow,SWT.NONE);
  miUnselAll.setText("Clear selection\tESC");
  MenuItem miFilter=new MenuItem(mRow,SWT.NONE);
  miFilter.setText("Filtered selection\tCTRL-F");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miClipAll=new MenuItem(mRow,SWT.NONE);
  miClipAll.setText("Copy selected lines to clipboard\tCTRL-C");
  MenuItem miPasteAll=new MenuItem(mRow,SWT.NONE);
  miPasteAll.setText("Paste clipboard to table\tCTRL-V");
  MenuItem miCutAll=new MenuItem(mRow,SWT.NONE);
  miCutAll.setText("Cut selected lines\tCTRL-X");
  MenuItem miDelAll=new MenuItem(mRow,SWT.NONE);
  miDelAll.setText("Delete selected lines\tDEL");
  MenuItem miKeep=new MenuItem(mRow,SWT.NONE);
  miKeep.setText("Keep only selected lines\tCTRL-K");
  new MenuItem(mRow,SWT.SEPARATOR);
  MenuItem miCopyToAll=new MenuItem(mRow,SWT.NONE);
  miCopyToAll.setText("Copy field value to all rows");
  new MenuItem(mRow,SWT.SEPARATOR);
  miEditUndo=new MenuItem(mRow,SWT.NONE);
  miEditRedo=new MenuItem(mRow,SWT.NONE);
  setUndoMenu();
  if (readonly) {
    miRowInsBef.setEnabled(false);
    miRowInsAft.setEnabled(false);
    miRowUp.setEnabled(false);
    miRowDown.setEnabled(false);
    miClear.setEnabled(false);
    miCopyToAll.setEnabled(false);
    miPasteAll.setEnabled(false);
    miDelAll.setEnabled(false);
    miCutAll.setEnabled(false);
    miKeep.setEnabled(false);
  }
  lsRowInsBef=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      insertRowBefore();
    }
  }
;
  lsRowInsAft=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      insertRowAfter();
    }
  }
;
  lsCol1=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      optWidth(true);
    }
  }
;
  lsCol2=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      optWidth(false);
    }
  }
;
  lsRowUp=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveRowUp(false);
    }
  }
;
  lsRowDown=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveRowDown(false);
    }
  }
;
  lsClear=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clearAll(true);
    }
  }
;
  lsClipAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      clipSelected();
    }
  }
;
  lsCopyToAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      copyToAll();
    }
  }
;
  lsSelAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectAll();
    }
  }
;
  lsUnselAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      unselectAll();
    }
  }
;
  lsPasteAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      pasteSelected();
    }
  }
;
  lsCutAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      cutSelected();
    }
  }
;
  lsDelAll=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      delSelected();
    }
  }
;
  lsKeep=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      keepSelected();
    }
  }
;
  lsFilter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFilter();
    }
  }
;
  lsEditUndo=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      undoAction();
    }
  }
;
  lsEditRedo=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redoAction();
    }
  }
;
  miRowInsBef.addSelectionListener(lsRowInsBef);
  miRowInsAft.addSelectionListener(lsRowInsAft);
  miCol1.addSelectionListener(lsCol1);
  miCol2.addSelectionListener(lsCol2);
  miRowUp.addSelectionListener(lsRowUp);
  miRowDown.addSelectionListener(lsRowDown);
  miClear.addSelectionListener(lsClear);
  miClipAll.addSelectionListener(lsClipAll);
  miCopyToAll.addSelectionListener(lsCopyToAll);
  miSelAll.addSelectionListener(lsSelAll);
  miUnselAll.addSelectionListener(lsUnselAll);
  miPasteAll.addSelectionListener(lsPasteAll);
  miCutAll.addSelectionListener(lsCutAll);
  miDelAll.addSelectionListener(lsDelAll);
  miKeep.addSelectionListener(lsKeep);
  miFilter.addSelectionListener(lsFilter);
  miEditUndo.addSelectionListener(lsEditUndo);
  miEditRedo.addSelectionListener(lsEditRedo);
  table.setMenu(mRow);
  cursor.setMenu(mRow);
  lsFocusText=new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      TableItem row=cursor.getRow();
      if (row == null)       return;
      int colnr=cursor.getColumn();
      int rownr=table.indexOf(row);
      row.setText(colnr,text.getText());
      text.dispose();
      cursor.redraw();
      String after_edit[]=getItemText(row);
      checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
    }
  }
;
  lsFocusCombo=new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      TableItem row=cursor.getRow();
      if (row == null)       return;
      int colnr=cursor.getColumn();
      int rownr=table.indexOf(row);
      if (colnr > 0) {
        row.setText(colnr,combo.getText());
        String after_edit[]=getItemText(row);
        checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
      }
      combo.dispose();
      cursor.redraw();
    }
  }
;
  lsModCombo=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      TableItem row=cursor.getRow();
      if (row == null)       return;
      int colnr=cursor.getColumn();
      int rownr=table.indexOf(row);
      row.setText(colnr,combo.getText());
      String after_edit[]=getItemText(row);
      checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
    }
  }
;
  lsKeyText=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      boolean right=false;
      boolean left=false;
      if (e.character == SWT.CR || e.keyCode == SWT.ARROW_DOWN || e.keyCode == SWT.ARROW_UP || e.keyCode == SWT.TAB || left || right) {
        TableItem row=cursor.getRow();
        if (row == null)         return;
        int rownr=table.indexOf(row);
        int colnr=cursor.getColumn();
        applyTextChange(row,rownr,colnr);
        int maxcols=table.getColumnCount();
        int maxrows=table.getItemCount();
        boolean sel=false;
        if (e.keyCode == SWT.ARROW_DOWN && rownr < maxrows - 1) {
          rownr++;
          sel=true;
        }
        if (e.keyCode == SWT.ARROW_UP && rownr > 0) {
          rownr--;
          sel=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) || right) {
          colnr++;
          sel=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) || left) {
          colnr--;
          sel=true;
        }
        if (colnr < 1) {
          colnr=maxcols - 1;
          if (rownr > 0)           rownr--;
        }
        if (colnr >= maxcols) {
          colnr=1;
          rownr++;
        }
        if (rownr >= maxrows) {
          TableItem item=new TableItem(table,SWT.NONE,rownr);
          item.setText(1,"field" + (table.getItemCount() - 1));
          setRowNums();
        }
        if (sel) {
          row=table.getItem(rownr);
          edit(rownr,colnr);
        }
      }
 else       if (e.keyCode == SWT.ESC) {
        text.dispose();
      }
      last_carret_position=text.isDisposed() ? -1 : text.getCaretPosition();
    }
  }
;
  lsKeyCombo=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      boolean right=false;
      boolean left=false;
      left=e.keyCode == SWT.ARROW_LEFT && last_carret_position == 0;
      if (combo != null && !combo.isDisposed())       right=e.keyCode == SWT.ARROW_RIGHT && last_carret_position == combo.getText().length();
      if (e.character == SWT.CR || e.keyCode == SWT.TAB || left || right) {
        TableItem row=cursor.getRow();
        if (row == null)         return;
        int colnr=cursor.getColumn();
        int rownr=table.indexOf(row);
        row.setText(colnr,combo.getText());
        combo.dispose();
        String after_edit[]=getItemText(row);
        checkChanged(new String[][]{before_edit},new String[][]{after_edit},new int[]{rownr});
        int maxcols=table.getColumnCount();
        int maxrows=table.getItemCount();
        boolean sel=false;
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) || right) {
          colnr++;
          sel=true;
        }
        if ((e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) || right) {
          colnr--;
          sel=true;
        }
        if (colnr < 1) {
          colnr=maxcols - 1;
          if (rownr > 0)           rownr--;
        }
        if (colnr >= maxcols) {
          colnr=1;
          rownr++;
        }
        if (rownr >= maxrows) {
          TableItem item=new TableItem(table,SWT.NONE,rownr);
          item.setText(1,"field" + (table.getItemCount() - 1));
          setRowNums();
        }
        if (sel) {
          edit(rownr,colnr);
        }
      }
 else       if (e.keyCode == SWT.ESC) {
        combo.dispose();
      }
      last_carret_position=combo.isDisposed() ? -1 : 0;
    }
  }
;
  KeyListener lsKeyCursor=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      int colnr, rownr;
      colnr=cursor.getColumn();
      TableItem row=cursor.getRow();
      if (row == null)       return;
      rownr=table.indexOf(row);
      int maxcols=table.getColumnCount();
      int maxrows=table.getItemCount();
      boolean shift=(e.stateMask & SWT.SHIFT) != 0;
      if (!previous_shift && shift) {
        from_selection=prev_rownr;
      }
      previous_shift=shift;
      if (!readonly && e.keyCode == SWT.ARROW_DOWN && ((e.stateMask & SWT.CTRL) != 0)) {
        moveRowDown(true);
      }
 else       if (!readonly && e.keyCode == SWT.ARROW_UP && ((e.stateMask & SWT.CTRL) != 0)) {
        moveRowUp(false);
      }
 else       if (e.keyCode == SWT.ARROW_DOWN && shift) {
        selectRows(from_selection,rownr);
        table.showItem(row);
      }
 else       if (e.keyCode == SWT.ARROW_UP && shift) {
        selectRows(rownr,from_selection);
        table.showItem(row);
      }
 else       if (e.keyCode == SWT.HOME && shift) {
        if (prev_rownr >= 0)         selectRows(rownr,prev_rownr);
        table.showItem(row);
      }
 else       if (e.keyCode == SWT.END && shift) {
        if (prev_rownr >= 0)         selectRows(prev_rownr,rownr);
        table.showItem(row);
      }
      if ((e.keyCode == SWT.ARROW_DOWN && !shift) || (e.keyCode == SWT.ARROW_UP && !shift) || (e.keyCode == SWT.HOME && !shift)|| (e.keyCode == SWT.END && !shift)) {
        selectRows(rownr,rownr);
      }
 else       if ((int)e.character == 1) {
        selectAll();
      }
 else       if (e.keyCode == SWT.ESC) {
        unselectAll();
        selectRows(rownr,rownr);
      }
 else       if ((int)e.character == 3) {
        clipSelected();
      }
 else       if (!readonly && (int)e.character == 11) {
        keepSelected();
      }
 else       if (!readonly && (int)e.character == 24) {
        cutSelected();
      }
      if (!readonly && (int)e.character == 22) {
        pasteSelected();
      }
 else       if (e.keyCode == SWT.F3) {
        optWidth(true);
      }
 else       if (!readonly && e.keyCode == SWT.DEL) {
        delSelected();
      }
 else       if (e.keyCode == SWT.F4) {
        optWidth(false);
      }
 else       if ((int)e.character == 25) {
        redoAction();
      }
 else       if ((int)e.character == 26) {
        undoAction();
      }
      if (colnr > 0) {
        boolean text_char=(e.character >= 'a' && e.character <= 'z') || (e.character >= 'A' && e.character <= 'Z') || (e.character >= '0' && e.character <= '9')|| (e.character == ' ')|| (e.character == '_')|| (e.character == ',')|| (e.character == '.')|| (e.character == '+')|| (e.character == '-')|| (e.character == '*')|| (e.character == '/')|| (e.character == ';');
        if (e.character == SWT.CR || e.keyCode == SWT.F2 || text_char) {
          boolean select_text=true;
          char extra_char=0;
          if (text_char) {
            extra_char=e.character;
            select_text=false;
          }
          edit(rownr,colnr,select_text,extra_char);
        }
        if (e.character == SWT.TAB) {
          if (e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) == 0)) {
            colnr++;
          }
          if (e.keyCode == SWT.TAB && ((e.stateMask & SWT.SHIFT) != 0)) {
            colnr--;
          }
          if (colnr < 1) {
            colnr=maxcols - 1;
            if (rownr > 0)             rownr--;
          }
          if (colnr >= maxcols) {
            colnr=1;
            rownr++;
          }
          if (rownr >= maxrows) {
            TableItem item=new TableItem(table,SWT.NONE,rownr);
            item.setText(1,"field" + (table.getItemCount() - 1));
            setRowNums();
          }
          edit(rownr,colnr);
        }
      }
      cursor.redraw();
      prev_rownr=rownr;
    }
  }
;
  cursor.addKeyListener(lsKeyCursor);
  MouseAdapter lsMouseT=new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 1) {
        boolean shift=(e.stateMask & SWT.SHIFT) != 0;
        boolean control=(e.stateMask & SWT.CONTROL) != 0;
        if (!shift && !control) {
          editSelected();
        }
      }
    }
  }
;
  MouseAdapter lsMouseC=new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 1) {
        editSelected();
      }
    }
  }
;
  table.addMouseListener(lsMouseT);
  cursor.addMouseListener(lsMouseC);
  cursor.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSelected();
    }
  }
);
  final int nrcols=tablecolumn.length;
  for (int i=0; i < nrcols; i++) {
    final int colnr=i;
    Listener lsSort=new Listener(){
      public void handleEvent(      Event e){
        clearUndo();
        sortTable(colnr);
      }
    }
;
    tablecolumn[i].addListener(SWT.Selection,lsSort);
  }
  lsTraverse=new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      e.doit=false;
    }
  }
;
  table.addTraverseListener(lsTraverse);
  cursor.addTraverseListener(lsTraverse);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (clipboard != null) {
        clipboard.dispose();
        clipboard=null;
      }
      dummy_gc.dispose();
      dummy_image.dispose();
      gridFont.dispose();
    }
  }
);
  Transfer[] ttypes=new Transfer[]{TextTransfer.getInstance()};
  DragSource ddSource=new DragSource(table,DND.DROP_MOVE | DND.DROP_COPY);
  ddSource.setTransfer(ttypes);
  ddSource.addDragListener(new DragSourceListener(){
    public void dragStart(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=table_name + Const.CR + getSelectedText();
    }
    public void dragFinished(    DragSourceEvent event){
    }
  }
);
  table.layout();
  table.pack();
  optWidth(true);
  layout();
  pack();
}
