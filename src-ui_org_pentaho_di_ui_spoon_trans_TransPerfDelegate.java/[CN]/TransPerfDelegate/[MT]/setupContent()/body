{
  if (!transGraph.isRunning() || transGraph.trans == null || !transGraph.trans.getTransMeta().isCapturingStepPerformanceSnapShots()) {
    showEmptyGraph();
    return;
  }
  if (perfComposite.isDisposed())   return;
  for (  Control control : perfComposite.getChildren())   if (!control.isDisposed())   control.dispose();
  emptyGraph=false;
  this.title=transGraph.trans.getTransMeta().getName();
  this.timeDifference=transGraph.trans.getTransMeta().getStepPerformanceCapturingDelay();
  this.stepPerformanceSnapShots=transGraph.trans.getStepPerformanceSnapShots();
  while (this.stepPerformanceSnapShots == null || stepPerformanceSnapShots.isEmpty()) {
    this.stepPerformanceSnapShots=transGraph.trans.getStepPerformanceSnapShots();
    try {
      Thread.sleep(100L);
    }
 catch (    InterruptedException e) {
    }
  }
  Set<String> stepsSet=stepPerformanceSnapShots.keySet();
  steps=stepsSet.toArray(new String[stepsSet.size()]);
  Arrays.sort(steps);
  Label dataListLabel=new Label(perfComposite,SWT.NONE);
  dataListLabel.setText(BaseMessages.getString(PKG,"StepPerformanceSnapShotDialog.Metrics.Label"));
  spoon.props.setLook(dataListLabel);
  FormData fdDataListLabel=new FormData();
  fdDataListLabel.left=new FormAttachment(0,0);
  fdDataListLabel.right=new FormAttachment(spoon.props.getMiddlePct() / 2,Const.MARGIN);
  fdDataListLabel.top=new FormAttachment(0,Const.MARGIN + 5);
  dataListLabel.setLayoutData(fdDataListLabel);
  dataList=new org.eclipse.swt.widgets.List(perfComposite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.LEFT| SWT.BORDER);
  spoon.props.setLook(dataList);
  dataList.setItems(dataChoices);
  dataList.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (dataList.getSelectionCount() > 1 && stepsList.getSelectionCount() > 1) {
        stepsList.setSelection(stepsList.getSelectionIndices()[0]);
      }
      updateGraph();
    }
  }
);
  FormData fdDataList=new FormData();
  fdDataList.left=new FormAttachment(0,0);
  fdDataList.right=new FormAttachment(spoon.props.getMiddlePct() / 2,Const.MARGIN);
  fdDataList.top=new FormAttachment(dataListLabel,Const.MARGIN);
  fdDataList.bottom=new FormAttachment(40,Const.MARGIN);
  dataList.setLayoutData(fdDataList);
  Label stepsListLabel=new Label(perfComposite,SWT.NONE);
  stepsListLabel.setText(BaseMessages.getString(PKG,"StepPerformanceSnapShotDialog.Steps.Label"));
  spoon.props.setLook(stepsListLabel);
  FormData fdStepsListLabel=new FormData();
  fdStepsListLabel.left=new FormAttachment(0,0);
  fdStepsListLabel.right=new FormAttachment(spoon.props.getMiddlePct() / 2,Const.MARGIN);
  fdStepsListLabel.top=new FormAttachment(dataList,Const.MARGIN);
  stepsListLabel.setLayoutData(fdStepsListLabel);
  stepsList=new org.eclipse.swt.widgets.List(perfComposite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.LEFT| SWT.BORDER);
  spoon.props.setLook(stepsList);
  stepsList.setItems(steps);
  stepsList.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (dataList.getSelectionCount() > 1 && stepsList.getSelectionCount() > 1) {
        dataList.setSelection(dataList.getSelectionIndices()[0]);
      }
      updateGraph();
    }
  }
);
  FormData fdStepsList=new FormData();
  fdStepsList.left=new FormAttachment(0,0);
  fdStepsList.right=new FormAttachment(spoon.props.getMiddlePct() / 2,Const.MARGIN);
  fdStepsList.top=new FormAttachment(stepsListLabel,Const.MARGIN);
  fdStepsList.bottom=new FormAttachment(100,Const.MARGIN);
  stepsList.setLayoutData(fdStepsList);
  canvas=new Canvas(perfComposite,SWT.NONE);
  spoon.props.setLook(canvas);
  FormData fdCanvas=new FormData();
  fdCanvas.left=new FormAttachment(spoon.props.getMiddlePct() / 2,Const.MARGIN);
  fdCanvas.right=new FormAttachment(100,0);
  fdCanvas.top=new FormAttachment(0,Const.MARGIN);
  fdCanvas.bottom=new FormAttachment(100,0);
  canvas.setLayoutData(fdCanvas);
  perfComposite.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent event){
      updateGraph();
    }
  }
);
  perfComposite.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent event){
      if (image != null)       image.dispose();
    }
  }
);
  canvas.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent event){
      if (image != null && !image.isDisposed())       event.gc.drawImage(image,0,0);
    }
  }
);
  final Timer timer=new Timer();
  timer.schedule(new TimerTask(){
    public void run(){
      updateGraph();
    }
  }
,0,5000);
  transPerfTab.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent arg0){
      timer.cancel();
    }
  }
);
}
