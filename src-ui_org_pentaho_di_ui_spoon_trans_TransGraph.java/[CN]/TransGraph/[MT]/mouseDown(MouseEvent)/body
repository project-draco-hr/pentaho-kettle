{
  boolean alt=(e.stateMask & SWT.ALT) != 0;
  boolean control=(e.stateMask & SWT.MOD1) != 0;
  boolean shift=(e.stateMask & SWT.SHIFT) != 0;
  lastButton=e.button;
  Point real=screen2real(e.x,e.y);
  lastclick=new Point(real.x,real.y);
  hideToolTips();
  if (e.button == 3) {
    setMenu(real.x,real.y);
    return;
  }
  if (e.button == 1 || e.button == 2) {
    AreaOwner areaOwner=getVisibleAreaOwner(real.x,real.y);
    if (areaOwner != null) {
switch (areaOwner.getAreaType()) {
case STEP_OUTPUT_HOP_ICON:
{
          selectedStep=null;
          startHopStep=(StepMeta)areaOwner.getParent();
          candidateHopType=null;
          startErrorHopStep=false;
        }
      break;
case STEP_INPUT_HOP_ICON:
{
      selectedStep=null;
      startHopStep=null;
      endHopStep=(StepMeta)areaOwner.getParent();
      candidateHopType=null;
      startErrorHopStep=false;
    }
  break;
case HOP_ERROR_ICON:
{
  StepMeta stepMeta=(StepMeta)areaOwner.getParent();
  spoon.editStepErrorHandling(transMeta,stepMeta);
}
break;
case STEP_TARGET_HOP_ICON_OPTION:
break;
case STEP_EDIT_ICON:
{
clearSettings();
currentStep=(StepMeta)areaOwner.getParent();
stopStepMouseOverDelayTimer(currentStep);
editStep();
}
break;
case STEP_INJECT_ICON:
{
MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_INFORMATION);
mb.setMessage(BaseMessages.getString(PKG,"TransGraph.StepInjectionSupported.Tooltip"));
mb.setText(BaseMessages.getString(PKG,"TransGraph.StepInjectionSupported.Title"));
mb.open();
}
break;
case STEP_MENU_ICON:
clearSettings();
StepMeta stepMeta=(StepMeta)areaOwner.getParent();
setMenu(stepMeta.getLocation().x,stepMeta.getLocation().y);
break;
case STEP_ICON:
stepMeta=(StepMeta)areaOwner.getOwner();
currentStep=stepMeta;
if (candidate != null) {
addCandidateAsHop(e.x,e.y);
}
if (e.button == 1 && alt && stepMeta.supportsErrorHandling()) {
spoon.editStepErrorHandling(transMeta,stepMeta);
return;
}
 else if (e.button == 2 || (e.button == 1 && shift)) {
startHopStep=stepMeta;
}
 else {
selectedSteps=transMeta.getSelectedSteps();
selectedStep=stepMeta;
previous_step_locations=transMeta.getSelectedStepLocations();
Point p=stepMeta.getLocation();
iconoffset=new Point(real.x - p.x,real.y - p.y);
}
redraw();
break;
case NOTE:
ni=(NotePadMeta)areaOwner.getOwner();
selectedNotes=transMeta.getSelectedNotes();
selectedNote=ni;
Point loc=ni.getLocation();
previous_note_locations=transMeta.getSelectedNoteLocations();
noteoffset=new Point(real.x - loc.x,real.y - loc.y);
redraw();
break;
}
}
 else {
TransHopMeta hop=findHop(real.x,real.y);
if (hop != null) {
TransHopMeta before=(TransHopMeta)hop.clone();
hop.setEnabled(!hop.isEnabled());
TransHopMeta after=(TransHopMeta)hop.clone();
spoon.addUndoChange(transMeta,new TransHopMeta[]{before},new TransHopMeta[]{after},new int[]{transMeta.indexOfTransHop(hop)});
redraw();
}
 else {
startHopStep=null;
if (!control) {
selectionRegion=new org.pentaho.di.core.gui.Rectangle(real.x,real.y,0,0);
}
redraw();
}
}
}
}
