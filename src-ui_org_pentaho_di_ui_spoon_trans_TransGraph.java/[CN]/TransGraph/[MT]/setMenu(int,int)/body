{
  try {
    currentMouseX=x;
    currentMouseY=y;
    final StepMeta stepMeta=transMeta.getStep(x,y,iconsize);
    if (stepMeta != null) {
      setCurrentStep(stepMeta);
      XulPopupMenu menu=(XulPopupMenu)menuMap.get("trans-graph-entry");
      if (menu != null) {
        int sels=transMeta.nrSelectedSteps();
        XulMenuChoice item=menu.getMenuItemById("trans-graph-entry-newhop");
        menu.addMenuListener("trans-graph-entry-newhop",this,TransGraph.class,"newHop");
        item.setEnabled(sels == 2);
        item=menu.getMenuItemById("trans-graph-entry-align-snap");
        item.setText(Messages.getString("TransGraph.PopupMenu.SnapToGrid") + ConstUI.GRID_SIZE + ")\tALT-HOME");
        XulMenu aMenu=menu.getMenuById("trans-graph-entry-align");
        if (aMenu != null) {
          aMenu.setEnabled(sels > 1);
        }
        menu.addMenuListener("trans-graph-entry-align-left",this,"allignleft");
        menu.addMenuListener("trans-graph-entry-align-right",this,"allignright");
        menu.addMenuListener("trans-graph-entry-align-top",this,"alligntop");
        menu.addMenuListener("trans-graph-entry-align-bottom",this,"allignbottom");
        menu.addMenuListener("trans-graph-entry-align-horz",this,"distributehorizontal");
        menu.addMenuListener("trans-graph-entry-align-vert",this,"distributevertical");
        menu.addMenuListener("trans-graph-entry-align-snap",this,"snaptogrid");
        item=menu.getMenuItemById("trans-graph-entry-data-movement-distribute");
        item.setChecked(stepMeta.isDistributes());
        item=menu.getMenuItemById("trans-graph-entry-data-movement-copy");
        item.setChecked(!stepMeta.isDistributes());
        item=menu.getMenuItemById("trans-graph-entry-hide");
        item.setEnabled(stepMeta.isDrawn() && !transMeta.isStepUsedInTransHops(stepMeta));
        item=menu.getMenuItemById("trans-graph-entry-detach");
        item.setEnabled(transMeta.isStepUsedInTransHops(stepMeta));
        item=menu.getMenuItemById("trans-graph-entry-errors");
        item.setEnabled(stepMeta.supportsErrorHandling());
        menu.addMenuListener("trans-graph-entry-newhop",this,"newHopChoice");
        menu.addMenuListener("trans-graph-entry-edit",this,"editStep");
        menu.addMenuListener("trans-graph-entry-edit-description",this,"editDescription");
        menu.addMenuListener("trans-graph-entry-data-movement-distribute",this,"setDistributes");
        menu.addMenuListener("trans-graph-entry-data-movement-copy",this,"setCopies");
        menu.addMenuListener("trans-graph-entry-copies",this,"copies");
        menu.addMenuListener("trans-graph-entry-copy",this,"copyStep");
        menu.addMenuListener("trans-graph-entry-duplicate",this,"dupeStep");
        menu.addMenuListener("trans-graph-entry-delete",this,"delSelected");
        menu.addMenuListener("trans-graph-entry-hide",this,"hideStep");
        menu.addMenuListener("trans-graph-entry-detach",this,"detachStep");
        menu.addMenuListener("trans-graph-entry-inputs",this,"fieldsBefore");
        menu.addMenuListener("trans-graph-entry-outputs",this,"fieldsAfter");
        menu.addMenuListener("trans-graph-entry-verify",this,"checkSelectedSteps");
        menu.addMenuListener("trans-graph-entry-mapping",this,"generateMappingToThisStep");
        menu.addMenuListener("trans-graph-entry-partitioning",this,"partitioning");
        menu.addMenuListener("trans-graph-entry-clustering",this,"clustering");
        menu.addMenuListener("trans-graph-entry-errors",this,"errorHandling");
        displayMenu(menu,canvas);
      }
    }
 else {
      final TransHopMeta hi=findHop(x,y);
      if (hi != null) {
        XulPopupMenu menu=(XulPopupMenu)menuMap.get("trans-graph-hop");
        if (menu != null) {
          setCurrentHop(hi);
          XulMenuChoice item=menu.getMenuItemById("trans-graph-hop-enabled");
          if (item != null) {
            if (hi.isEnabled()) {
              item.setText(Messages.getString("TransGraph.PopupMenu.DisableHop"));
            }
 else {
              item.setText(Messages.getString("TransGraph.PopupMenu.EnableHop"));
            }
          }
          menu.addMenuListener("trans-graph-hop-edit",this,"editHop");
          menu.addMenuListener("trans-graph-hop-flip",this,"flipHopDirection");
          menu.addMenuListener("trans-graph-hop-enabled",this,"enableHop");
          menu.addMenuListener("trans-graph-hop-delete",this,"deleteHop");
          displayMenu(menu,canvas);
        }
      }
 else {
        final NotePadMeta ni=transMeta.getNote(x,y);
        setCurrentNote(ni);
        if (ni != null) {
          XulPopupMenu menu=(XulPopupMenu)menuMap.get("trans-graph-note");
          if (menu != null) {
            menu.addMenuListener("trans-graph-note-edit",this,"editNote");
            menu.addMenuListener("trans-graph-note-delete",this,"deleteNote");
            menu.addMenuListener("trans-graph-note-raise",this,"raiseNote");
            menu.addMenuListener("trans-graph-note-lower",this,"lowerNote");
            displayMenu(menu,canvas);
          }
        }
 else {
          XulPopupMenu menu=(XulPopupMenu)menuMap.get("trans-graph-background");
          if (menu != null) {
            menu.addMenuListener("trans-graph-background-new-note",this,"newNote");
            menu.addMenuListener("trans-graph-background-paste",this,"paste");
            menu.addMenuListener("trans-graph-background-settings",this,"settings");
            final String clipcontent=spoon.fromClipboard();
            XulMenuChoice item=menu.getMenuItemById("trans-graph-background-paste");
            if (item != null) {
              item.setEnabled(clipcontent != null);
            }
            String locale=LanguageChoice.getInstance().getDefaultLocale().toString().toLowerCase();
            XulMenu subMenu=menu.getMenuById("trans-graph-background-new-step");
            if (subMenu.getItemCount() == 0) {
              StepLoader steploader=StepLoader.getInstance();
              String basecat[]=steploader.getCategories(StepPlugin.TYPE_ALL,locale);
              StepPlugin basesteps[]=steploader.getStepsWithType(StepPlugin.TYPE_ALL);
              XulMessages xulMessages=new XulMessages();
              for (int cat=0; cat < basecat.length; cat++) {
                org.pentaho.xul.swt.menu.Menu catMenu=new org.pentaho.xul.swt.menu.Menu((org.pentaho.xul.swt.menu.Menu)subMenu,basecat[cat],basecat[cat],null);
                for (int step=0; step < basesteps.length; step++) {
                  if (basesteps[step].getCategory(locale).equalsIgnoreCase(basecat[cat])) {
                    final String name=basesteps[step].getDescription();
                    new MenuChoice(catMenu,name,name,null,null,MenuChoice.TYPE_PLAIN,xulMessages);
                    menu.addMenuListener(name,this,"newStep");
                  }
                }
              }
            }
            displayMenu(menu,canvas);
          }
        }
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
