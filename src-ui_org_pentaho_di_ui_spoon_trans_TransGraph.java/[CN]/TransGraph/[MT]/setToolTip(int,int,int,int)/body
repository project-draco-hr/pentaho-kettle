{
  if (!spoon.getProperties().showToolTips())   return;
  canvas.setToolTipText("'");
  canvas.setToolTipText(null);
  String newTip=null;
  Image tipImage=null;
  final StepMeta stepMeta=transMeta.getStep(x,y,iconsize);
  if (stepMeta != null) {
    if (stepMeta.getDescription() != null) {
      String desc=stepMeta.getDescription();
      int le=desc.length() >= 200 ? 200 : desc.length();
      newTip=desc.substring(0,le);
    }
 else {
      newTip=stepMeta.getName();
    }
    StepPlugin stepPlugin=StepLoader.getInstance().getStepPlugin(stepMeta.getStepMetaInterface());
    if (stepPlugin != null) {
      newTip+=Const.CR + Const.CR + stepPlugin.getTooltip(LanguageChoice.getInstance().getDefaultLocale().toString());
      tipImage=GUIResource.getInstance().getImagesSteps().get(stepPlugin.getID()[0]);
    }
 else {
    }
    if (stepMeta.isPartitioned()) {
      newTip+=Const.CR + Const.CR + Messages.getString("TransGraph.Step.Tooltip.CurrentPartitioning")+ stepMeta.getStepPartitioningMeta().toString();
    }
    if (stepMeta.getTargetStepPartitioningMeta() != null) {
      newTip+=Const.CR + Const.CR + Messages.getString("TransGraph.Step.Tooltip.NextPartitioning")+ stepMeta.getTargetStepPartitioningMeta().toString();
    }
  }
 else {
    final TransHopMeta hi=findHop(x,y);
    StringBuffer tip=new StringBuffer();
    for (    AreaOwner areaOwner : areaOwners) {
      if (areaOwner.contains(x,y)) {
        if (areaOwner.getParent() instanceof StepMeta && areaOwner.getOwner().equals(TransPainter.STRING_REMOTE_INPUT_STEPS)) {
          StepMeta step=(StepMeta)areaOwner.getParent();
          tip.append("Remote input steps:").append(Const.CR).append("-----------------------").append(Const.CR);
          for (          RemoteStep remoteStep : step.getRemoteInputSteps()) {
            tip.append(remoteStep.toString()).append(Const.CR);
          }
        }
        if (areaOwner.getParent() instanceof StepMeta && areaOwner.getOwner().equals(TransPainter.STRING_REMOTE_OUTPUT_STEPS)) {
          StepMeta step=(StepMeta)areaOwner.getParent();
          tip.append("Remote output steps:").append(Const.CR).append("-----------------------").append(Const.CR);
          for (          RemoteStep remoteStep : step.getRemoteOutputSteps()) {
            tip.append(remoteStep.toString()).append(Const.CR);
          }
        }
        if (areaOwner.getParent() instanceof StepMeta && areaOwner.getOwner().equals(TransPainter.STRING_PARTITIONING_CURRENT_STEP)) {
          StepMeta step=(StepMeta)areaOwner.getParent();
          tip.append("Step partitioning:").append(Const.CR).append("-----------------------").append(Const.CR);
          tip.append(step.getStepPartitioningMeta().toString()).append(Const.CR);
          if (step.getTargetStepPartitioningMeta() != null) {
            tip.append(Const.CR).append(Const.CR).append("TARGET: " + step.getTargetStepPartitioningMeta().toString()).append(Const.CR);
          }
        }
        if (areaOwner.getParent() instanceof StepMeta && areaOwner.getOwner().equals(TransPainter.STRING_PARTITIONING_CURRENT_NEXT)) {
          StepMeta step=(StepMeta)areaOwner.getParent();
          tip.append("Target partitioning:").append(Const.CR).append("-----------------------").append(Const.CR);
          tip.append(step.getStepPartitioningMeta().toString()).append(Const.CR);
        }
        if (areaOwner.getParent() instanceof String && areaOwner.getOwner().equals(TransPainter.STRING_STEP_ERROR_LOG)) {
          String log=(String)areaOwner.getParent();
          tip.append(log);
          tipImage=GUIResource.getInstance().getImageStepError();
        }
        if (areaOwner.getParent() instanceof StepMeta && areaOwner.getOwner().equals(TransPainter.STRING_HOP_TYPE_COPY)) {
          StepMeta step=(StepMeta)areaOwner.getParent();
          tip.append("The origin step [" + step.getName() + "] is copying all output rows to all target steps").append(Const.CR);
          tip.append("Please note that this is different from the default behavior where rows are distributed over the target steps in a round robin fashion").append(Const.CR);
          tipImage=GUIResource.getInstance().getImageCopyHop();
        }
        if (areaOwner.getParent() instanceof StepMeta[] && areaOwner.getOwner().equals(TransPainter.STRING_HOP_TYPE_INFO)) {
          StepMeta from=((StepMeta[])(areaOwner.getParent()))[0];
          StepMeta to=((StepMeta[])(areaOwner.getParent()))[1];
          tip.append("Rows are being sent to step [" + to.getName() + "] so that they can be used as additional information.").append(Const.CR);
          tip.append("That target step specifically reads from step [" + from.getName() + "] and it is treated as a special case.").append(Const.CR);
          tip.append("That means that for this source step the normal row reading rules don't apply.").append(Const.CR);
          tip.append("Normally a step reads information from all source steps in a round robin fashion.").append(Const.CR);
          tipImage=GUIResource.getInstance().getImageInfoHop();
        }
        if (areaOwner.getParent() instanceof StepMeta[] && areaOwner.getOwner().equals(TransPainter.STRING_HOP_TYPE_ERROR)) {
          StepMeta from=((StepMeta[])(areaOwner.getParent()))[0];
          StepMeta to=((StepMeta[])(areaOwner.getParent()))[1];
          tip.append("Each row that was considered to be a cause for an error by step [" + from.getName() + "] is sent to step ["+ to.getName()+ "].").append(Const.CR);
          tip.append("This is done as part of the error handling configuration of the source step.").append(Const.CR);
          tipImage=GUIResource.getInstance().getImageErrorHop();
        }
        if (hi != null) {
          tip.append(Const.CR).append("Hop information: ").append(newTip=hi.toString()).append(Const.CR);
        }
      }
    }
    if (tip.length() == 0) {
      newTip=null;
    }
 else {
      newTip=tip.toString();
    }
  }
  if (newTip == null) {
    toolTip.hide();
    final TransHopMeta hi=findHop(x,y);
    if (hi != null) {
      newTip=Messages.getString("TransGraph.Dialog.HopInfo") + Const.CR + Messages.getString("TransGraph.Dialog.HopInfo.SourceStep")+ " "+ hi.getFromStep().getName()+ Const.CR+ Messages.getString("TransGraph.Dialog.HopInfo.TargetStep")+ " "+ hi.getToStep().getName()+ Const.CR+ Messages.getString("TransGraph.Dialog.HopInfo.Status")+ " "+ (hi.isEnabled() ? Messages.getString("TransGraph.Dialog.HopInfo.Enable") : Messages.getString("TransGraph.Dialog.HopInfo.Disable"));
      toolTip.setText(newTip);
      if (hi.isEnabled())       toolTip.setImage(GUIResource.getInstance().getImageHop());
 else       toolTip.setImage(GUIResource.getInstance().getImageDisabledHop());
      toolTip.show(new org.eclipse.swt.graphics.Point(screenX,screenY));
    }
 else {
      newTip=null;
    }
  }
 else   if (!newTip.equalsIgnoreCase(getToolTipText())) {
    if (tipImage != null) {
      toolTip.setImage(tipImage);
    }
 else {
      toolTip.setImage(GUIResource.getInstance().getImageSpoon());
    }
    toolTip.setText(newTip);
    toolTip.hide();
    toolTip.show(new org.eclipse.swt.graphics.Point(screenX,screenY));
  }
}
