{
  if (trans != null) {
    if (trans.isFinished() && (running || halted)) {
      log.logMinimal(Spoon.APP_NAME,Messages.getString("TransLog.Log.TransformationHasFinished"));
      running=false;
      initialized=false;
      halted=false;
      halting=false;
      try {
        trans.endProcessing(Database.LOG_STATUS_END);
        if (spoonHistoryRefresher != null)         spoonHistoryRefresher.markRefreshNeeded();
      }
 catch (      KettleException e) {
        new ErrorDialog(shell,Messages.getString("TransLog.Dialog.ErrorWritingLogRecord.Title"),Messages.getString("TransLog.Dialog.ErrorWritingLogRecord.Message"),e);
      }
      setControlStates();
      if (debug && lastTransDebugMeta != null && lastTransDebugMeta.getTotalNumberOfHits() == 0) {
        debug=false;
        showLastPreviewResults();
      }
      debug=false;
      if (trans.getErrors() > 0) {
        stepLogMap=new HashMap<StepMeta,String>();
        lastLog=null;
        shell.getDisplay().syncExec(new Runnable(){
          public void run(){
            lastLog=transLogDelegate.getLoggingText();
          }
        }
);
        if (!Const.isEmpty(lastLog)) {
          String lines[]=lastLog.split(Const.CR);
          for (int i=0; i < lines.length && i < 30; i++) {
            if (lines[i].indexOf(Log4jKettleLayout.ERROR_STRING) >= 0) {
              for (              StepMeta stepMeta : transMeta.getSteps()) {
                if (lines[i].indexOf(stepMeta.getName()) >= 0) {
                  String line=lines[i];
                  int index=lines[i].indexOf(") : ");
                  if (index > 0)                   line=lines[i].substring(index + 3);
                  String str=stepLogMap.get(stepMeta);
                  if (str == null) {
                    stepLogMap.put(stepMeta,line);
                  }
 else {
                    stepLogMap.put(stepMeta,str + Const.CR + line);
                  }
                }
              }
            }
          }
        }
      }
 else {
        stepLogMap=null;
      }
      shell.getDisplay().asyncExec(new Runnable(){
        public void run(){
          redraw();
        }
      }
);
    }
  }
}
