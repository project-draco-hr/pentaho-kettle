{
  final String virtualFile="ram://pdi-2607.txt";
  KettleVFS.getFileObject(virtualFile).createFile();
  final String content=new StringBuilder().append("r1c1").append('\n').append(";r1c2\n").append("r2c1").append('\n').append(";r2c2").toString();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bos.write(content.getBytes());
  OutputStream os=KettleVFS.getFileObject(virtualFile).getContent().getOutputStream();
  IOUtils.copy(new ByteArrayInputStream(bos.toByteArray()),os);
  os.close();
  TextFileInputMeta meta=new TextFileInputMeta();
  meta.content.lineWrapped=true;
  meta.content.nrWraps=1;
  meta.inputFiles.inputFields=new BaseFileInputField[]{new BaseFileInputField("col1",-1,-1),new BaseFileInputField("col2",-1,-1)};
  meta.content.fileCompression="None";
  meta.content.fileType="CSV";
  meta.content.header=false;
  meta.content.nrHeaderLines=-1;
  meta.content.footer=false;
  meta.content.nrFooterLines=-1;
  TextFileInputData data=new TextFileInputData();
  data.files=new FileInputList();
  data.files.addFile(KettleVFS.getFileObject(virtualFile));
  data.outputRowMeta=new RowMeta();
  data.outputRowMeta.addValueMeta(new ValueMetaString("col1"));
  data.outputRowMeta.addValueMeta(new ValueMetaString("col2"));
  data.dataErrorLineHandler=Mockito.mock(FileErrorHandler.class);
  data.fileFormatType=TextFileInputMeta.FILE_FORMAT_UNIX;
  data.separator=";";
  data.filterProcessor=new TextFileFilterProcessor(new TextFileFilter[0],new Variables());
  data.filePlayList=new FilePlayListAll();
  RowSet output=new BlockingRowSet(5);
  TextFileInput input=StepMockUtil.getStep(TextFileInput.class,TextFileInputMeta.class,"test");
  input.setOutputRowSets(Collections.singletonList(output));
  while (input.processRow(meta,data)) {
  }
  Object[] row1=output.getRowImmediate();
  assertRow(row1,"r1c1","r1c2");
  Object[] row2=output.getRowImmediate();
  assertRow(row2,"r2c1","r2c2");
  KettleVFS.getFileObject(virtualFile).delete();
}
