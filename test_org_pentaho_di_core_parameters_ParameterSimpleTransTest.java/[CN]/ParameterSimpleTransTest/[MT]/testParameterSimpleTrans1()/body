{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("parameter_simple_trans1");
  PluginRegistry registry=PluginRegistry.getInstance();
  String getVariablesStepname="get variables step";
  GetVariableMeta gvm=new GetVariableMeta();
  String getVariablesPid=registry.getPluginId(StepPluginType.class,gvm);
  StepMeta getVariablesStep=new StepMeta(getVariablesPid,getVariablesStepname,gvm);
  transMeta.addStep(getVariablesStep);
  String[] fieldName={"PARAM1","PARAM2"};
  String[] varName={"${Param1}","%%PARAM2%%"};
  int[] fieldType={ValueMetaInterface.TYPE_STRING,ValueMetaInterface.TYPE_STRING};
  int[] length={-1,-1};
  int[] precision={-1,-1};
  String[] format={"",""};
  String[] currency={"",""};
  String[] decimal={"",""};
  String[] grouping={"",""};
  int[] trimType={ValueMetaInterface.TRIM_TYPE_NONE,ValueMetaInterface.TRIM_TYPE_NONE};
  FieldDefinition[] fields=new FieldDefinition[fieldName.length];
  for (int i=0; i < fields.length; i++) {
    FieldDefinition field=new FieldDefinition();
    field.setFieldName(fieldName[i]);
    field.setVariableString(varName[i]);
    field.setFieldType(fieldType[i]);
    field.setFieldLength(length[i]);
    field.setFieldPrecision(precision[i]);
    field.setFieldFormat(format[i]);
    field.setCurrency(currency[i]);
    field.setDecimal(decimal[i]);
    field.setGroup(grouping[i]);
    field.setTrimType(trimType[i]);
    fields[i]=field;
  }
  gvm.setFieldDefinitions(fields);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=registry.getPluginId(StepPluginType.class,dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hi1=new TransHopMeta(getVariablesStep,dummyStep1);
  transMeta.addTransHop(hi1);
  Trans trans=new Trans(transMeta);
  trans.addParameterDefinition("Param1","","Parameter 1");
  trans.addParameterDefinition("PARAM2","","Parameter 2");
  trans.setParameterValue("Param1","ParamValue1");
  trans.setParameterValue("PARAM2","PARAMVALUE2");
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector endRc=new RowStepCollector();
  si.addRowListener(endRc);
  trans.startThreads();
  trans.waitUntilFinished();
  List<RowMetaAndData> goldenImageRows=createResultData1();
  List<RowMetaAndData> resultRows1=endRc.getRowsWritten();
  checkRows(resultRows1,goldenImageRows);
}
