{
  PluginMockInterface pluginInterface=mock(PluginMockInterface.class);
  when(pluginInterface.getName()).thenReturn(KettleExtensionPoint.TransBeforeDeleteSteps.id);
  when(pluginInterface.getMainType()).thenReturn((Class)ExtensionPointInterface.class);
  when(pluginInterface.getIds()).thenReturn(new String[]{KettleExtensionPoint.TransBeforeDeleteSteps.id});
  ExtensionPointInterface extensionPoint=mock(ExtensionPointInterface.class);
  when(pluginInterface.loadClass(ExtensionPointInterface.class)).thenReturn(extensionPoint);
  doThrow(KettleException.class).when(extensionPoint).callExtensionPoint(any(LogChannelInterface.class),any(StepMeta[].class));
  PluginRegistry.addPluginType(ExtensionPointPluginType.getInstance());
  PluginRegistry.getInstance().registerPlugin(ExtensionPointPluginType.class,pluginInterface);
  SpoonStepsDelegate delegate=mock(SpoonStepsDelegate.class);
  doCallRealMethod().when(delegate).delSteps(any(TransMeta.class),any(StepMeta[].class));
  TransMeta trans=mock(TransMeta.class);
  StepMeta[] steps=new StepMeta[]{mock(StepMeta.class)};
  delegate.delSteps(trans,steps);
  verify(extensionPoint,times(1)).callExtensionPoint(any(),eq(steps));
}
