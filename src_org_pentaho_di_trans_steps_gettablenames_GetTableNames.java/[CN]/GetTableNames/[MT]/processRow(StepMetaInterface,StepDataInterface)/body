{
  meta=(GetTableNamesMeta)smi;
  data=(GetTableNamesData)sdi;
  if (meta.isDynamicSchema()) {
    data.readrow=getRow();
    if (data.readrow == null) {
      setOutputDone();
      return false;
    }
  }
  if (first) {
    first=false;
    if (meta.isDynamicSchema()) {
      data.inputRowMeta=getInputRowMeta();
      data.outputRowMeta=data.inputRowMeta.clone();
      data.totalpreviousfields=data.inputRowMeta.size();
      if (Const.isEmpty(meta.getSchemaFieldName())) {
        logError(BaseMessages.getString(PKG,"GetTableNames.Log.NoSchemaField"));
        throw new KettleException(BaseMessages.getString(PKG,"GetTableNames.Log.NoSchemaField"));
      }
      if (data.indexOfSchemaField < 0) {
        data.indexOfSchemaField=data.inputRowMeta.indexOfValue(meta.getSchemaFieldName());
        if (data.indexOfSchemaField < 0) {
          logError(BaseMessages.getString(PKG,"GetTableNames.Log.ErrorFindingField") + "[" + meta.getSchemaFieldName()+ "]");
          throw new KettleException(BaseMessages.getString(PKG,"GetTableNames.Exception.CouldnotFindField",meta.getSchemaFieldName()));
        }
      }
    }
 else {
      data.outputRowMeta=new RowMeta();
    }
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
  }
  if (meta.isDynamicSchema()) {
    data.realSchemaName=data.inputRowMeta.getString(data.readrow,data.indexOfSchemaField);
  }
  Object[] outputRow=buildEmptyRow();
  if (meta.isDynamicSchema()) {
    System.arraycopy(data.readrow,0,outputRow,0,data.readrow.length);
  }
  if (meta.isIncludeCatalog()) {
    String ObjectType=BaseMessages.getString(PKG,"GetTableNames.ObjectType.Catalog");
    String catalogsNames[]=data.db.getCatalogs();
    for (int i=0; i < catalogsNames.length && !isStopped(); i++) {
      Object[] outputRowCatalog=outputRow;
      int outputIndex=data.totalpreviousfields;
      String catalogName=catalogsNames[i];
      outputRowCatalog[outputIndex++]=catalogName;
      if (!Const.isEmpty(data.realObjectTypeFieldName)) {
        outputRowCatalog[outputIndex++]=ObjectType;
      }
      if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
        outputRowCatalog[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(catalogName));
      }
      if (!Const.isEmpty(data.realSQLCreationFieldName)) {
        outputRowCatalog[outputIndex++]=null;
      }
      data.rownr++;
      putRow(data.outputRowMeta,outputRowCatalog);
      if (checkFeedback(getLinesRead())) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowCatalog)));
    }
  }
  if (meta.isIncludeSchema()) {
    String ObjectType=BaseMessages.getString(PKG,"GetTableNamesDialog.ObjectType.Schema");
    String schemaNames[]=new String[]{};
    if (!Const.isEmpty(data.realSchemaName))     schemaNames=new String[]{data.realSchemaName};
 else     schemaNames=data.db.getSchemas();
    for (int i=0; i < schemaNames.length && !isStopped(); i++) {
      Object[] outputRowSchema=outputRow;
      int outputIndex=data.totalpreviousfields;
      String schemaName=schemaNames[i];
      outputRowSchema[outputIndex++]=schemaName;
      if (!Const.isEmpty(data.realObjectTypeFieldName)) {
        outputRowSchema[outputIndex++]=ObjectType;
      }
      if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
        outputRowSchema[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(schemaName));
      }
      if (!Const.isEmpty(data.realSQLCreationFieldName)) {
        outputRowSchema[outputIndex++]=null;
      }
      data.rownr++;
      putRow(data.outputRowMeta,outputRowSchema);
      if (checkFeedback(getLinesRead())) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowSchema)));
    }
  }
  if (meta.isIncludeTable()) {
    String tableNames[]=data.db.getTablenames(data.realSchemaName,meta.isAddSchemaInOut());
    String ObjectType=BaseMessages.getString(PKG,"GetTableNamesDialog.ObjectType.Table");
    for (int i=0; i < tableNames.length && !isStopped(); i++) {
      Object[] outputRowTable=outputRow;
      int outputIndex=data.totalpreviousfields;
      String tableName=tableNames[i];
      outputRowTable[outputIndex++]=tableName;
      if (!Const.isEmpty(data.realObjectTypeFieldName)) {
        outputRowTable[outputIndex++]=ObjectType;
      }
      if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
        outputRowTable[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(tableName));
      }
      String pk=null;
      String[] pkc=data.db.getPrimaryKeyColumnNames(tableName);
      if (pkc != null && pkc.length == 1) {
        pk=pkc[0];
        pkc=null;
      }
      String sql=data.db.getCreateTableStatement(tableName,data.db.getTableFields(tableName),null,false,pk,true);
      if (pkc != null) {
        int IndexOfLastClosedBracket=sql.lastIndexOf(")");
        if (IndexOfLastClosedBracket > -1) {
          sql=sql.substring(0,IndexOfLastClosedBracket);
          sql+=", PRIMARY KEY (";
          for (int k=0; k < pkc.length; k++) {
            if (k > 0)             sql+=", ";
            sql+=pkc[k];
          }
          sql+=")" + Const.CR + ")"+ Const.CR+ ";";
        }
      }
      if (!Const.isEmpty(data.realSQLCreationFieldName)) {
        outputRowTable[outputIndex++]=sql;
      }
      data.rownr++;
      putRow(data.outputRowMeta,outputRowTable);
      if (checkFeedback(getLinesRead())) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowTable)));
    }
  }
  if (meta.isIncludeView()) {
    try {
      String viewNames[]=data.db.getViews(data.realSchemaName,meta.isAddSchemaInOut());
      String ObjectType=BaseMessages.getString(PKG,"GetTableNamesDialog.ObjectType.View");
      for (int i=0; i < viewNames.length && !isStopped(); i++) {
        Object[] outputRowView=outputRow;
        int outputIndex=data.totalpreviousfields;
        String viewName=viewNames[i];
        outputRowView[outputIndex++]=viewName;
        if (!Const.isEmpty(data.realObjectTypeFieldName)) {
          outputRowView[outputIndex++]=ObjectType;
        }
        if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
          outputRowView[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(viewName));
        }
        if (!Const.isEmpty(data.realSQLCreationFieldName)) {
          outputRowView[outputIndex++]=null;
        }
        data.rownr++;
        putRow(data.outputRowMeta,outputRowView);
        if (checkFeedback(getLinesRead())) {
          if (log.isDetailed())           logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
        }
        if (log.isRowLevel())         logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowView)));
      }
    }
 catch (    Exception e) {
    }
    ;
  }
  if (meta.isIncludeProcedure()) {
    String procNames[]=data.db.getProcedures();
    String ObjectType=BaseMessages.getString(PKG,"GetTableNamesDialog.ObjectType.Procedure");
    for (int i=0; i < procNames.length && !isStopped(); i++) {
      Object[] outputRowProc=outputRow;
      int outputIndex=data.totalpreviousfields;
      String procName=procNames[i];
      outputRowProc[outputIndex++]=procName;
      if (!Const.isEmpty(data.realObjectTypeFieldName)) {
        outputRowProc[outputIndex++]=ObjectType;
      }
      if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
        outputRowProc[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(procName));
      }
      if (!Const.isEmpty(data.realSQLCreationFieldName)) {
        outputRowProc[outputIndex++]=null;
      }
      data.rownr++;
      putRow(data.outputRowMeta,outputRowProc);
      if (checkFeedback(getLinesRead())) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowProc)));
    }
  }
  if (meta.isIncludeSynonym()) {
    String Synonyms[]=data.db.getSynonyms(data.realSchemaName,meta.isAddSchemaInOut());
    String ObjectType=BaseMessages.getString(PKG,"GetTableNamesDialog.ObjectType.Synonym");
    for (int i=0; i < Synonyms.length && !isStopped(); i++) {
      Object[] outputRowSyn=outputRow;
      int outputIndex=data.totalpreviousfields;
      String Synonym=Synonyms[i];
      outputRowSyn[outputIndex++]=Synonym;
      if (!Const.isEmpty(data.realObjectTypeFieldName)) {
        outputRowSyn[outputIndex++]=ObjectType;
      }
      if (!Const.isEmpty(data.realIsSystemObjectFieldName)) {
        outputRowSyn[outputIndex++]=Boolean.valueOf(data.db.isSystemTable(Synonym));
      }
      if (!Const.isEmpty(data.realSQLCreationFieldName)) {
        outputRowSyn[outputIndex++]=null;
      }
      data.rownr++;
      putRow(data.outputRowMeta,outputRowSyn);
      if (checkFeedback(getLinesRead())) {
        if (log.isDetailed())         logDetailed(BaseMessages.getString(PKG,"GetTableNames.LineNumber","" + getLinesRead()));
      }
      if (log.isRowLevel())       logRowlevel(BaseMessages.getString(PKG,"GetTableNames.Log.PutoutRow",data.outputRowMeta.getString(outputRowSyn)));
    }
  }
  if (!meta.isDynamicSchema()) {
    setOutputDone();
    return false;
  }
 else {
    return true;
  }
}
