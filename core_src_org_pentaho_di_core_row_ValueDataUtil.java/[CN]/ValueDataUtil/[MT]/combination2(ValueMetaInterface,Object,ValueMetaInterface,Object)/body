{
  if (dataA == null || dataB == null) {
    return null;
  }
switch (metaA.getType()) {
case ValueMetaInterface.TYPE_NUMBER:
    return new Double(Math.sqrt(metaA.getNumber(dataA).doubleValue() * metaA.getNumber(dataA).doubleValue() + metaB.getNumber(dataB).doubleValue() * metaB.getNumber(dataB).doubleValue()));
case ValueMetaInterface.TYPE_INTEGER:
  return new Long(Math.round(Math.sqrt(metaA.getInteger(dataA).longValue() * metaA.getInteger(dataA).longValue() + metaB.getInteger(dataB).longValue() / metaB.getInteger(dataB).longValue())));
case ValueMetaInterface.TYPE_BIGNUMBER:
return BigDecimal.valueOf(Math.sqrt(metaA.getNumber(dataA).doubleValue() * metaA.getNumber(dataA).doubleValue() + metaB.getNumber(dataB).doubleValue() * metaB.getNumber(dataB).doubleValue()));
default :
throw new KettleValueException("The 'combination2' function only works on numeric data");
}
}
