{
  Result result=previousResult;
  List<RowMetaAndData> rows=result.getRows();
  RowMetaAndData resultRow=null;
  result.setResult(true);
  nrErrors=0;
  continueProcess=true;
  nrSuccess=0;
  if (argFromPrevious) {
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobEntryTruncateTables.FoundPreviousRows",String.valueOf((rows != null ? rows.size() : 0))));
    }
    if (rows.size() == 0) {
      return result;
    }
  }
  if (connection != null) {
    Database db=new Database(this,connection);
    db.shareVariablesWith(this);
    try {
      db.connect(parentJob.getTransactionId(),null);
      if (argFromPrevious && rows != null) {
        for (int iteration=0; iteration < rows.size() && !parentJob.isStopped() && continueProcess; iteration++) {
          resultRow=rows.get(iteration);
          String tablename_previous=resultRow.getString(0,null);
          String schemaname_previous=resultRow.getString(1,null);
          if (!Utils.isEmpty(tablename_previous)) {
            if (log.isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobEntryTruncateTables.ProcessingRow",tablename_previous,schemaname_previous));
            }
            if (truncateTables(tablename_previous,schemaname_previous,db)) {
              updateSuccess();
            }
 else {
              updateErrors();
            }
          }
 else {
            logError(BaseMessages.getString(PKG,"JobEntryTruncateTables.RowEmpty"));
          }
        }
      }
 else       if (arguments != null) {
        for (int i=0; i < arguments.length && !parentJob.isStopped() && continueProcess; i++) {
          String realTablename=environmentSubstitute(arguments[i]);
          String realSchemaname=environmentSubstitute(schemaname[i]);
          if (!Utils.isEmpty(realTablename)) {
            if (log.isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobEntryTruncateTables.ProcessingArg",arguments[i],schemaname[i]));
            }
            if (truncateTables(realTablename,realSchemaname,db)) {
              updateSuccess();
            }
 else {
              updateErrors();
            }
          }
 else {
            logError(BaseMessages.getString(PKG,"JobEntryTruncateTables.ArgEmpty",arguments[i],schemaname[i]));
          }
        }
      }
    }
 catch (    Exception dbe) {
      result.setNrErrors(1);
      logError(BaseMessages.getString(PKG,"JobEntryTruncateTables.Error.RunningEntry",dbe.getMessage()));
    }
 finally {
      if (db != null) {
        db.disconnect();
      }
    }
  }
 else {
    result.setNrErrors(1);
    logError(BaseMessages.getString(PKG,"JobEntryTruncateTables.NoDbConnection"));
  }
  result.setNrErrors(nrErrors);
  result.setNrLinesDeleted(nrSuccess);
  result.setResult(nrErrors == 0);
  return result;
}
