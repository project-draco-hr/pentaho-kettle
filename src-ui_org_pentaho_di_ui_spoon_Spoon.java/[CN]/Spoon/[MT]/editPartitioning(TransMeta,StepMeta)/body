{
  StepPartitioningMeta stepPartitioningMeta=stepMeta.getStepPartitioningMeta();
  if (stepPartitioningMeta == null)   stepPartitioningMeta=new StepPartitioningMeta();
  StepMeta before=(StepMeta)stepMeta.clone();
  Set<Entry<String,Partitioner>> plugins=StepLoader.getPartitionerList().entrySet();
  String options[]=new String[StepPartitioningMeta.methodDescriptions.length + plugins.size()];
  String codes[]=new String[StepPartitioningMeta.methodDescriptions.length + plugins.size()];
  System.arraycopy(StepPartitioningMeta.methodDescriptions,0,options,0,StepPartitioningMeta.methodDescriptions.length);
  System.arraycopy(StepPartitioningMeta.methodCodes,0,codes,0,StepPartitioningMeta.methodCodes.length);
  Iterator<Entry<String,Partitioner>> it=plugins.iterator();
  int idx=0;
  while (it.hasNext()) {
    Partitioner entry=it.next().getValue();
    options[StepPartitioningMeta.methodDescriptions.length + idx]=entry.getDescription();
    codes[StepPartitioningMeta.methodCodes.length + idx]=entry.getId();
    idx++;
  }
  for (int i=0; i < codes.length; i++) {
    if (codes[i].equals(stepPartitioningMeta.getMethod())) {
      idx=i;
      break;
    }
  }
  EnterSelectionDialog dialog=new EnterSelectionDialog(shell,options,"Partioning method","Select the partitioning method");
  String methodDescription=dialog.open(idx);
  if (methodDescription != null) {
    String method=StepPartitioningMeta.methodCodes[StepPartitioningMeta.PARTITIONING_METHOD_NONE];
    for (int i=0; i < options.length; i++) {
      if (options[i].equals(methodDescription)) {
        method=codes[i];
      }
    }
    int methodType=StepPartitioningMeta.getMethodType(method);
    stepPartitioningMeta.setMethodType(methodType);
    stepPartitioningMeta.setMethod(method);
switch (methodType) {
case StepPartitioningMeta.PARTITIONING_METHOD_NONE:
      break;
case StepPartitioningMeta.PARTITIONING_METHOD_MIRROR:
case StepPartitioningMeta.PARTITIONING_METHOD_SPECIAL:
    String schemaNames[]=transMeta.getPartitionSchemasNames();
  if (schemaNames.length == 0) {
    MessageBox box=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
    box.setText("Create a partition schema");
    box.setMessage("You first need to create one or more partition schemas in the transformation settings dialog before you can select one!");
    box.open();
  }
 else {
    PartitionSchema partitionSchema=stepPartitioningMeta.getPartitionSchema();
    idx=-1;
    if (partitionSchema != null) {
      idx=Const.indexOfString(partitionSchema.getName(),schemaNames);
    }
    EnterSelectionDialog askSchema=new EnterSelectionDialog(shell,schemaNames,"Select a partition schema","Select the partition schema to use:");
    String schemaName=askSchema.open(idx);
    if (schemaName != null) {
      idx=Const.indexOfString(schemaName,schemaNames);
      stepPartitioningMeta.setPartitionSchema(transMeta.getPartitionSchemas().get(idx));
    }
  }
if (methodType == StepPartitioningMeta.PARTITIONING_METHOD_SPECIAL) {
  StepDialogInterface partitionerDialog=null;
  try {
    partitionerDialog=delegates.steps.getPartitionerDialog(stepMeta.getStepMetaInterface(),stepPartitioningMeta,transMeta);
    partitionerDialog.open();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
break;
}
StepMeta after=(StepMeta)stepMeta.clone();
addUndoChange(transMeta,new StepMeta[]{before},new StepMeta[]{after},new int[]{transMeta.indexOfStep(stepMeta)});
refreshGraph();
}
}
