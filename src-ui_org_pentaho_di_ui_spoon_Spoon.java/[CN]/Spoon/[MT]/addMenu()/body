{
  if (menuBar != null && !menuBar.isDisposed()) {
    menuBar.dispose();
  }
  try {
    menuBar=XulHelper.createMenuBar(XUL_FILE_MENUBAR,shell,new XulMessages());
    List<String> ids=new ArrayList<String>();
    ids.add("trans-class");
    ids.add("trans-class-new");
    ids.add("job-class");
    ids.add("trans-hop-class");
    ids.add("database-class");
    ids.add("partition-schema-class");
    ids.add("cluster-schema-class");
    ids.add("slave-cluster-class");
    ids.add("trans-inst");
    ids.add("job-inst");
    ids.add("step-plugin");
    ids.add("database-inst");
    ids.add("step-inst");
    ids.add("job-entry-copy-inst");
    ids.add("trans-hop-inst");
    ids.add("partition-schema-inst");
    ids.add("cluster-schema-inst");
    ids.add("slave-server-inst");
    this.menuMap=XulHelper.createPopupMenus(XUL_FILE_MENUS,shell,new XulMessages(),ids);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Exception.ErrorReadingXULFile.Title"),BaseMessages.getString(PKG,"Spoon.Exception.ErrorReadingXULFile.Message",XUL_FILE_MENUS),new Exception(t));
  }
  addMenuListeners();
  addMenuLast();
}
