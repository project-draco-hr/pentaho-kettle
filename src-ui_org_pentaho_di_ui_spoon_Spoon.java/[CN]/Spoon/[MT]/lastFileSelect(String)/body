{
  int idx=Integer.parseInt(id.substring("last-file-".length()));
  List<LastUsedFile> lastUsedFiles=props.getLastUsedFiles();
  final LastUsedFile lastUsedFile=(LastUsedFile)lastUsedFiles.get(idx);
  boolean cancelled=false;
  if (lastUsedFile.isSourceRepository() && (rep == null || !rep.getRepositoryInfo().getName().equalsIgnoreCase(lastUsedFile.getRepositoryName()))) {
    int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION};
    RepositoriesDialog rd=new RepositoriesDialog(display,perms,BaseMessages.getString(PKG,"Spoon.Application.Name"));
    rd.setRepositoryName(lastUsedFile.getRepositoryName());
    if (rd.open()) {
      if (rep != null)       rep.disconnect();
      rep=new Repository(log,rd.getRepository(),rd.getUser());
      try {
        rep.connect(APP_NAME);
      }
 catch (      KettleException ke) {
        rep=null;
        new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.UnableConnectRepository.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.UnableConnectRepository.Message"),ke);
      }
    }
 else {
      cancelled=true;
    }
  }
  if (!cancelled) {
    try {
      RepositoryMeta meta=(rep == null ? null : rep.getRepositoryInfo());
      loadLastUsedFile(lastUsedFile,meta);
      addMenuLast();
      refreshHistory();
    }
 catch (    KettleException ke) {
      new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.LoadTransformationError.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.LoadTransformationError.Message"),ke);
    }
  }
}
