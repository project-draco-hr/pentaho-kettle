{
  if (meta.getFileType().equals(LastUsedFile.FILE_TYPE_TRANSFORMATION)) {
    if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.MODIFY_TRANSFORMATION)) {
      return false;
    }
  }
  if (meta.getFileType().equals(LastUsedFile.FILE_TYPE_JOB)) {
    if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.MODIFY_JOB)) {
      return false;
    }
  }
  if (log.isDetailed())   log.logDetailed(toString(),BaseMessages.getString(PKG,"Spoon.Log.SaveToRepository"));
  if (rep != null) {
    boolean answer=true;
    boolean ask=ask_name;
    while (answer && (ask || Const.isEmpty(meta.getName()))) {
      if (!ask) {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_WARNING);
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.PromptTransformationName.Message"));
        mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.PromptTransformationName.Title"));
        mb.open();
      }
      ask=false;
      if (meta instanceof TransMeta) {
        answer=TransGraph.editProperties((TransMeta)meta,this,rep,false);
      }
      if (meta instanceof JobMeta) {
        answer=JobGraph.editProperties((JobMeta)meta,this,rep,false);
      }
    }
    if (answer && !Const.isEmpty(meta.getName())) {
      int response=SWT.YES;
      if (rep.exists(meta)) {
        MessageBox mb=new MessageBox(shell,SWT.YES | SWT.NO | SWT.ICON_QUESTION);
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.PromptOverwriteTransformation.Message",meta.getName(),Const.CR));
        mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.PromptOverwriteTransformation.Title"));
        response=mb.open();
      }
      boolean saved=false;
      if (response == SWT.YES) {
        shell.setCursor(cursor_hourglass);
        if (meta.getCreatedDate() == null) {
          meta.setCreatedDate(new Date());
          if (rep.getSecurityProvider().supportsUsers()) {
            meta.setCreatedUser(rep.getUserInfo().getLogin());
          }
        }
        meta.setModifiedDate(new Date());
        if (rep.getSecurityProvider().supportsUsers()) {
          meta.setModifiedUser(rep.getUserInfo().getLogin());
        }
        String versionComment=null;
        boolean versionOk=false;
        while (!versionOk) {
          versionComment=RepositorySecurityUI.getVersionComment(shell,rep,"Modification of [" + meta.getName() + "]");
          if (Const.isEmpty(versionComment) && rep.getSecurityProvider().isVersionCommentMandatory()) {
            if (!RepositorySecurityUI.showVersionCommentMandatoryDialog(shell)) {
              versionOk=true;
            }
          }
 else {
            versionOk=true;
          }
        }
        SaveProgressDialog tspd=new SaveProgressDialog(shell,rep,meta,versionComment);
        if (tspd.open()) {
          saved=true;
          if (!props.getSaveConfirmation()) {
            MessageDialogWithToggle md=new MessageDialogWithToggle(shell,BaseMessages.getString(PKG,"Spoon.Message.Warning.SaveOK"),null,BaseMessages.getString(PKG,"Spoon.Message.Warning.TransformationWasStored"),MessageDialog.QUESTION,new String[]{BaseMessages.getString(PKG,"Spoon.Message.Warning.OK")},0,BaseMessages.getString(PKG,"Spoon.Message.Warning.NotShowThisMessage"),props.getSaveConfirmation());
            MessageDialogWithToggle.setDefaultImage(GUIResource.getInstance().getImageSpoon());
            md.open();
            props.setSaveConfirmation(md.getToggleState());
          }
          props.addLastFile(meta.getFileType(),meta.getName(),meta.getRepositoryDirectory().getPath(),true,getRepositoryName());
          saveSettings();
          addMenuLast();
          setShellText();
        }
        shell.setCursor(null);
      }
      return saved;
    }
  }
 else {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
    mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.NoRepositoryConnection.Message"));
    mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.NoRepositoryConnection.Title"));
    mb.open();
  }
  return false;
}
