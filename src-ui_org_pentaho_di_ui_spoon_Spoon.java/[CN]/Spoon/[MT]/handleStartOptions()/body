{
  StringBuffer optionRepname=getCommandLineOption("rep").getArgument();
  StringBuffer optionFilename=getCommandLineOption("file").getArgument();
  StringBuffer optionDirname=getCommandLineOption("dir").getArgument();
  StringBuffer optionTransname=getCommandLineOption("trans").getArgument();
  StringBuffer optionJobname=getCommandLineOption("job").getArgument();
  StringBuffer optionUsername=getCommandLineOption("user").getArgument();
  StringBuffer optionPassword=getCommandLineOption("pass").getArgument();
  try {
    if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {
      if (!Const.isEmpty(optionRepname)) {
        if (rep != null) {
          if (rep.connect(Messages.getString("Spoon.Application.Name"))) {
            if (Const.isEmpty(optionDirname))             optionDirname=new StringBuffer(RepositoryDirectory.DIRECTORY_SEPARATOR);
            rep.userinfo=new UserInfo(rep,optionUsername.toString(),optionPassword.toString());
            if (rep.userinfo.getID() > 0) {
              int t=(Const.isEmpty(optionFilename) ? 0 : 1) + (Const.isEmpty(optionJobname) ? 0 : 1) + (Const.isEmpty(optionTransname) ? 0 : 1);
              if (t > 1) {
                log.logError(toString(),Messages.getString("Spoon.Log.MutuallyExcusive"));
              }
 else               if (t == 1) {
                if (!Const.isEmpty(optionFilename)) {
                  openFile(optionFilename.toString(),false);
                }
 else {
                  RepositoryDirectory repdir=rep.getDirectoryTree().findDirectory(optionDirname.toString());
                  if (repdir == null) {
                    log.logError(toString(),Messages.getString("Spoon.Log.UnableFindDirectory",optionDirname.toString()));
                  }
 else {
                    if (!Const.isEmpty(optionTransname)) {
                      TransMeta transMeta=new TransMeta(rep,optionTransname.toString(),repdir);
                      transMeta.setFilename(optionRepname.toString());
                      transMeta.clearChanged();
                      transMeta.setInternalKettleVariables();
                      addTransGraph(transMeta);
                    }
 else {
                      JobMeta jobMeta=new JobMeta(log,rep,optionJobname.toString(),repdir);
                      jobMeta.setFilename(optionRepname.toString());
                      jobMeta.clearChanged();
                      jobMeta.setInternalKettleVariables();
                      delegates.jobs.addJobGraph(jobMeta);
                    }
                  }
                }
              }
            }
 else {
              log.logError(toString(),Messages.getString("Spoon.Log.UnableVerifyUser"));
              rep.disconnect();
              rep=null;
            }
          }
 else {
            log.logError(toString(),Messages.getString("Spoon.Log.UnableConnectToRepository"));
          }
        }
 else {
          log.logError(toString(),Messages.getString("Spoon.Log.NoRepositoriesDefined"));
        }
      }
 else       if (!Const.isEmpty(optionFilename)) {
        openFile(optionFilename.toString(),false);
      }
    }
 else {
      if (rep != null && rep.userinfo != null) {
        if (!rep.connect(Messages.getString("Spoon.Application.Name"))) {
          setRepository(null);
        }
      }
      if (props.openLastFile()) {
        log.logDetailed(toString(),Messages.getString("Spoon.Log.TryingOpenLastUsedFile"));
        List<LastUsedFile> lastUsedFiles=props.getLastUsedFiles();
        if (lastUsedFiles.size() > 0) {
          LastUsedFile lastUsedFile=(LastUsedFile)lastUsedFiles.get(0);
          RepositoryMeta repInfo=(rep == null) ? null : rep.getRepositoryInfo();
          loadLastUsedFile(lastUsedFile,repInfo);
        }
      }
    }
  }
 catch (  KettleException ke) {
    log.logError(toString(),Messages.getString("Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage());
    log.logError(toString(),Const.getStackTracker(ke));
    new ErrorDialog(shell,Messages.getString("Spoon.Log.ErrorOccurred"),Messages.getString("Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage(),ke);
    rep=null;
  }
}
