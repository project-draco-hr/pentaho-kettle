{
  ResourceExportInterface resourceExportInterface=getActiveTransformation();
  if (resourceExportInterface == null)   resourceExportInterface=getActiveJob();
  if (resourceExportInterface == null)   return;
  try {
    String zipFilename=null;
    String baseFileName=null;
    while (Const.isEmpty(zipFilename)) {
      FileDialog dialog=new FileDialog(shell,SWT.SAVE);
      dialog.setText(BaseMessages.getString(PKG,"Spoon.ExportResourceSelectZipFile"));
      dialog.setFilterExtensions(new String[]{"*.zip;*.ZIP","*"});
      dialog.setFilterNames(new String[]{BaseMessages.getString(PKG,"System.FileType.ZIPFiles"),BaseMessages.getString(PKG,"System.FileType.AllFiles")});
      setFilterPath(dialog);
      if (dialog.open() != null) {
        lastDirOpened=dialog.getFilterPath();
        baseFileName=dialog.getFileName();
        zipFilename=dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName();
        FileObject zipFileObject=KettleVFS.getFileObject(zipFilename);
        if (zipFileObject.exists()) {
          MessageBox box=new MessageBox(shell,SWT.YES | SWT.NO | SWT.CANCEL);
          box.setMessage(BaseMessages.getString(PKG,"Spoon.ExportResourceZipFileExists.Message",zipFilename));
          box.setText(BaseMessages.getString(PKG,"Spoon.ExportResourceZipFileExists.Title"));
          int answer=box.open();
          if (answer == SWT.CANCEL)           return;
          if (answer == SWT.NO)           zipFilename=null;
        }
      }
 else {
        return;
      }
    }
    TopLevelResource topLevelResource=ResourceUtil.serializeResourceExportInterface(zipFilename,resourceExportInterface,(VariableSpace)resourceExportInterface,rep);
    String message=ResourceUtil.getExplanation(zipFilename,topLevelResource.getResourceName(),resourceExportInterface);
    RepositoriesMeta repositoriesMeta=new RepositoriesMeta();
    repositoriesMeta.readData();
    KettleFileRepositoryMeta fileRepositoryMeta=new KettleFileRepositoryMeta(KettleFileRepositoryMeta.REPOSITORY_TYPE_ID,"Export " + baseFileName,"Export to file : " + zipFilename,"zip://" + zipFilename + "!");
    fileRepositoryMeta.setReadOnly(true);
    int nr=2;
    String baseName=fileRepositoryMeta.getName();
    while (repositoriesMeta.findRepository(fileRepositoryMeta.getName()) != null) {
      fileRepositoryMeta.setName(baseName + " " + nr);
      nr++;
    }
    repositoriesMeta.addRepository(fileRepositoryMeta);
    repositoriesMeta.writeData();
    EnterTextDialog enterTextDialog=new EnterTextDialog(shell,"Resource serialized","This resource was serialized succesfully!",message);
    enterTextDialog.setReadOnly();
    enterTextDialog.open();
  }
 catch (  Exception e) {
    new ErrorDialog(shell,"Error","Error exporting current file",e);
  }
}
