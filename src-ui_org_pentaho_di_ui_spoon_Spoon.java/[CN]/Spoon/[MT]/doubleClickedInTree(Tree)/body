{
  TreeSelection[] objects=getTreeObjects(tree);
  if (objects.length != 1)   return;
  TreeSelection object=objects[0];
  final Object selection=object.getSelection();
  final Object parent=object.getParent();
  if (selection instanceof Class) {
    if (selection.equals(TransMeta.class))     newTransFile();
    if (selection.equals(JobMeta.class))     newJobFile();
    if (selection.equals(TransHopMeta.class))     newHop((TransMeta)parent);
    if (selection.equals(DatabaseMeta.class))     delegates.db.newConnection();
    if (selection.equals(PartitionSchema.class))     newPartitioningSchema((TransMeta)parent);
    if (selection.equals(ClusterSchema.class))     newClusteringSchema((TransMeta)parent);
    if (selection.equals(SlaveServer.class))     newSlaveServer((HasSlaveServersInterface)parent);
  }
 else {
    if (selection instanceof TransMeta)     TransGraph.editProperties((TransMeta)selection,this,rep,true);
    if (selection instanceof JobMeta)     JobGraph.editProperties((JobMeta)selection,this,rep,true);
    if (selection instanceof StepPlugin)     newStep(getActiveTransformation());
    if (selection instanceof DatabaseMeta)     delegates.db.editConnection((DatabaseMeta)selection);
    if (selection instanceof StepMeta)     delegates.steps.editStep((TransMeta)parent,(StepMeta)selection);
    if (selection instanceof JobEntryCopy)     editJobEntry((JobMeta)parent,(JobEntryCopy)selection);
    if (selection instanceof TransHopMeta)     editHop((TransMeta)parent,(TransHopMeta)selection);
    if (selection instanceof PartitionSchema)     editPartitionSchema((TransMeta)parent,(PartitionSchema)selection);
    if (selection instanceof ClusterSchema)     editClusterSchema((TransMeta)parent,(ClusterSchema)selection);
    if (selection instanceof SlaveServer)     editSlaveServer((SlaveServer)selection);
  }
}
