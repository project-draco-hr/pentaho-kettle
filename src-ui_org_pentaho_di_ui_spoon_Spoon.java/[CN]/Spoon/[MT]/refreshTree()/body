{
  if (shell.isDisposed())   return;
  if (!viewSelected)   return;
  if (selectionTree == null || selectionTree.isDisposed()) {
    selectionTree=new Tree(variableComposite,SWT.SINGLE);
    props.setLook(selectionTree);
    selectionTree.setLayout(new FillLayout());
    TreeMemory.addTreeListener(selectionTree,STRING_SPOON_MAIN_TREE);
    selectionTree.addMouseListener(new MouseAdapter(){
      public void mouseDown(      MouseEvent event){
        if (event.button == 3) {
          setMenu(selectionTree);
        }
      }
    }
);
    selectionTree.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        showSelection();
      }
    }
);
    selectionTree.addSelectionListener(new SelectionAdapter(){
      public void widgetDefaultSelected(      SelectionEvent e){
        doubleClickedInTree(selectionTree);
      }
    }
);
    selectionTree.addKeyListener(defKeys);
    addDragSourceToTree(selectionTree);
  }
  GUIResource guiResource=GUIResource.getInstance();
  TransMeta activeTransMeta=getActiveTransformation();
  JobMeta activeJobMeta=getActiveJob();
  boolean showAll=activeTransMeta == null && activeJobMeta == null;
  List<TransMeta> transformations=delegates.trans.getTransformationList();
  Collections.sort(transformations);
  TransMeta[] transMetas=transformations.toArray(new TransMeta[transformations.size()]);
  List<JobMeta> jobs=delegates.jobs.getJobList();
  Collections.sort(jobs);
  JobMeta[] jobMetas=jobs.toArray(new JobMeta[jobs.size()]);
  selectionTree.removeAll();
  if (!props.isOnlyActiveFileShownInTree() || showAll || activeTransMeta != null) {
    TreeItem tiTrans=new TreeItem(selectionTree,SWT.NONE);
    tiTrans.setText(STRING_TRANSFORMATIONS);
    tiTrans.setImage(GUIResource.getInstance().getImageBol());
    if (props.isOnlyActiveFileShownInTree()) {
      TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiTrans,true);
    }
    for (int t=0; t < transMetas.length; t++) {
      TransMeta transMeta=transMetas[t];
      if (!props.isOnlyActiveFileShownInTree() || showAll || (activeTransMeta != null && activeTransMeta.equals(transMeta))) {
        TreeItem tiTransName=new TreeItem(tiTrans,SWT.NONE);
        String name=delegates.tabs.makeTransGraphTabName(transMeta);
        if (Const.isEmpty(name))         name=STRING_TRANS_NO_NAME;
        tiTransName.setText(name);
        tiTransName.setImage(guiResource.getImageTransGraph());
        if (props.isOnlyActiveFileShownInTree()) {
          TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiTransName,true);
        }
        TreeItem tiDbTitle=new TreeItem(tiTransName,SWT.NONE);
        tiDbTitle.setText(STRING_CONNECTIONS);
        tiDbTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.nrDatabases(); i++) {
          DatabaseMeta databaseMeta=transMeta.getDatabase(i);
          TreeItem tiDb=new TreeItem(tiDbTitle,SWT.NONE);
          tiDb.setText(databaseMeta.getName());
          if (databaseMeta.isShared())           tiDb.setFont(guiResource.getFontBold());
          tiDb.setImage(guiResource.getImageConnection());
        }
        TreeItem tiStepTitle=new TreeItem(tiTransName,SWT.NONE);
        tiStepTitle.setText(STRING_STEPS);
        tiStepTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.nrSteps(); i++) {
          StepMeta stepMeta=transMeta.getStep(i);
          StepPlugin stepPlugin=StepLoader.getInstance().findStepPluginWithID(stepMeta.getStepID());
          TreeItem tiStep=new TreeItem(tiStepTitle,SWT.NONE);
          tiStep.setText(stepMeta.getName());
          if (stepMeta.isShared())           tiStep.setFont(guiResource.getFontBold());
          if (!stepMeta.isDrawn())           tiStep.setForeground(guiResource.getColorDarkGray());
          Image stepIcon=guiResource.getImagesStepsSmall().get(stepPlugin.getID()[0]);
          if (stepIcon == null)           stepIcon=guiResource.getImageBol();
          tiStep.setImage(stepIcon);
        }
        TreeItem tiHopTitle=new TreeItem(tiTransName,SWT.NONE);
        tiHopTitle.setText(STRING_HOPS);
        tiHopTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.nrTransHops(); i++) {
          TransHopMeta hopMeta=transMeta.getTransHop(i);
          TreeItem tiHop=new TreeItem(tiHopTitle,SWT.NONE);
          tiHop.setText(hopMeta.toString());
          if (hopMeta.isEnabled())           tiHop.setImage(guiResource.getImageHop());
 else           tiHop.setImage(guiResource.getImageDisabledHop());
        }
        TreeItem tiPartitionTitle=new TreeItem(tiTransName,SWT.NONE);
        tiPartitionTitle.setText(STRING_PARTITIONS);
        tiPartitionTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.getPartitionSchemas().size(); i++) {
          PartitionSchema partitionSchema=transMeta.getPartitionSchemas().get(i);
          TreeItem tiPartition=new TreeItem(tiPartitionTitle,SWT.NONE);
          tiPartition.setText(partitionSchema.getName());
          tiPartition.setImage(guiResource.getImageFolderConnections());
          if (partitionSchema.isShared())           tiPartition.setFont(guiResource.getFontBold());
        }
        TreeItem tiSlaveTitle=new TreeItem(tiTransName,SWT.NONE);
        tiSlaveTitle.setText(STRING_SLAVES);
        tiSlaveTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.getSlaveServers().size(); i++) {
          SlaveServer slaveServer=transMeta.getSlaveServers().get(i);
          TreeItem tiSlave=new TreeItem(tiSlaveTitle,SWT.NONE);
          tiSlave.setText(slaveServer.getName());
          tiSlave.setImage(guiResource.getImageSlave());
          if (slaveServer.isShared())           tiSlave.setFont(guiResource.getFontBold());
        }
        TreeItem tiClusterTitle=new TreeItem(tiTransName,SWT.NONE);
        tiClusterTitle.setText(STRING_CLUSTERS);
        tiClusterTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < transMeta.getClusterSchemas().size(); i++) {
          ClusterSchema clusterSchema=transMeta.getClusterSchemas().get(i);
          TreeItem tiCluster=new TreeItem(tiClusterTitle,SWT.NONE);
          tiCluster.setText(clusterSchema.toString());
          tiCluster.setImage(guiResource.getImageCluster());
          if (clusterSchema.isShared())           tiCluster.setFont(guiResource.getFontBold());
        }
      }
    }
  }
  if (!props.isOnlyActiveFileShownInTree() || showAll || activeJobMeta != null) {
    TreeItem tiJobs=new TreeItem(selectionTree,SWT.NONE);
    tiJobs.setText(STRING_JOBS);
    tiJobs.setImage(GUIResource.getInstance().getImageBol());
    if (props.isOnlyActiveFileShownInTree()) {
      tiJobs.setExpanded(true);
      TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiJobs,true);
    }
    for (int t=0; t < jobMetas.length; t++) {
      JobMeta jobMeta=jobMetas[t];
      if (!props.isOnlyActiveFileShownInTree() || showAll || (activeJobMeta != null && activeJobMeta.equals(jobMeta))) {
        TreeItem tiJobName=new TreeItem(tiJobs,SWT.NONE);
        String name=delegates.tabs.makeJobGraphTabName(jobMeta);
        if (Const.isEmpty(name))         name=STRING_JOB_NO_NAME;
        tiJobName.setText(name);
        tiJobName.setImage(guiResource.getImageJobGraph());
        if (props.isOnlyActiveFileShownInTree()) {
          TreeMemory.getInstance().storeExpanded(STRING_SPOON_MAIN_TREE,tiJobName,true);
        }
        TreeItem tiDbTitle=new TreeItem(tiJobName,SWT.NONE);
        tiDbTitle.setText(STRING_CONNECTIONS);
        tiDbTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < jobMeta.nrDatabases(); i++) {
          DatabaseMeta databaseMeta=jobMeta.getDatabase(i);
          TreeItem tiDb=new TreeItem(tiDbTitle,SWT.NONE);
          tiDb.setText(databaseMeta.getName());
          if (databaseMeta.isShared())           tiDb.setFont(guiResource.getFontBold());
          tiDb.setImage(guiResource.getImageConnection());
        }
        TreeItem tiJobEntriesTitle=new TreeItem(tiJobName,SWT.NONE);
        tiJobEntriesTitle.setText(STRING_JOB_ENTRIES);
        tiJobEntriesTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < jobMeta.nrJobEntries(); i++) {
          JobEntryCopy jobEntry=jobMeta.getJobEntry(i);
          TreeItem tiJobEntry=ConstUI.findTreeItem(tiJobEntriesTitle,jobEntry.getName());
          if (tiJobEntry != null)           continue;
          tiJobEntry=new TreeItem(tiJobEntriesTitle,SWT.NONE);
          tiJobEntry.setText(jobEntry.getName());
          if (jobEntry.isStart()) {
            tiJobEntry.setImage(GUIResource.getInstance().getImageStart());
          }
 else           if (jobEntry.isDummy()) {
            tiJobEntry.setImage(GUIResource.getInstance().getImageDummy());
          }
 else {
            String key=jobEntry.getEntry().getPluginID();
            if (key == null)             key=jobEntry.getEntry().getJobEntryType().name();
            Image image=GUIResource.getInstance().getImagesJobentriesSmall().get(key);
            tiJobEntry.setImage(image);
          }
        }
        TreeItem tiSlaveTitle=new TreeItem(tiJobName,SWT.NONE);
        tiSlaveTitle.setText(STRING_SLAVES);
        tiSlaveTitle.setImage(guiResource.getImageBol());
        for (int i=0; i < jobMeta.getSlaveServers().size(); i++) {
          SlaveServer slaveServer=jobMeta.getSlaveServers().get(i);
          TreeItem tiSlave=new TreeItem(tiSlaveTitle,SWT.NONE);
          tiSlave.setText(slaveServer.getName());
          tiSlave.setImage(guiResource.getImageBol());
          if (slaveServer.isShared())           tiSlave.setFont(guiResource.getFontBold());
        }
      }
    }
  }
  TreeMemory.setExpandedFromMemory(selectionTree,STRING_SPOON_MAIN_TREE);
  selectionTree.setFocus();
  selectionTree.layout();
  variableComposite.layout(true,true);
  setShellText();
}
