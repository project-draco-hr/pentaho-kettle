{
  RepositoryMeta repositoryMeta=null;
  StringBuffer optionRepname=getCommandLineOption(options,"rep").getArgument();
  StringBuffer optionFilename=getCommandLineOption(options,"file").getArgument();
  StringBuffer optionUsername=getCommandLineOption(options,"user").getArgument();
  StringBuffer optionPassword=getCommandLineOption(options,"pass").getArgument();
  if (Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename) && props.showRepositoriesDialogAtStartup()) {
    if (log.isBasic()) {
      log.logBasic(BaseMessages.getString(PKG,"Spoon.Log.AskingForRepository"));
    }
    splash.hide();
    loginDialog=new RepositoriesDialog(shell,null,new ILoginCallback(){
      public void onSuccess(      Repository repository){
        setRepository(repository);
        SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_CONNECTED);
      }
      public void onError(      Throwable t){
        if (t instanceof KettleAuthException) {
          ShowMessageDialog dialog=new ShowMessageDialog(loginDialog.getShell(),SWT.OK | SWT.ICON_ERROR,BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Title"),t.getLocalizedMessage());
          dialog.open();
        }
 else {
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
          mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Message",t.getLocalizedMessage()));
          mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Title"));
          mb.open();
        }
      }
      public void onCancel(){
      }
    }
);
    loginDialog.show();
  }
 else   if (!Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename)) {
    RepositoriesMeta repsinfo=new RepositoriesMeta();
    try {
      repsinfo.readData();
      repositoryMeta=repsinfo.findRepository(optionRepname.toString());
      if (repositoryMeta != null) {
        Repository repo=PluginRegistry.getInstance().loadClass(RepositoryPluginType.class,repositoryMeta,Repository.class);
        repo.init(repositoryMeta);
        repo.connect(optionUsername != null ? optionUsername.toString() : null,optionPassword != null ? optionPassword.toString() : null);
        setRepository(repo);
      }
 else {
        String msg=BaseMessages.getString(PKG,"Spoon.Log.NoRepositoriesDefined");
        log.logError(msg);
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(BaseMessages.getString(PKG,"Spoon.Error.Repository.NotFound",optionRepname.toString()));
        mb.setText(BaseMessages.getString(PKG,"Spoon.Error.Repository.NotFound.Title"));
        mb.open();
        loginDialog=new RepositoriesDialog(shell,null,new ILoginCallback(){
          public void onSuccess(          Repository repository){
            setRepository(repository);
            SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_CONNECTED);
          }
          public void onError(          Throwable t){
            MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
            mb.setMessage(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Message",t.getLocalizedMessage()));
            mb.setText(BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Title"));
            mb.open();
          }
          public void onCancel(){
          }
        }
);
        loginDialog.show();
      }
    }
 catch (    Exception e) {
      log.logError("Error reading repositories xml file",e);
    }
  }
}
