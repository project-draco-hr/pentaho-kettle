{
  StringBuffer optionRepname=getCommandLineOption(options,"rep").getArgument();
  StringBuffer optionFilename=getCommandLineOption(options,"file").getArgument();
  StringBuffer optionDirname=getCommandLineOption(options,"dir").getArgument();
  StringBuffer optionTransname=getCommandLineOption(options,"trans").getArgument();
  StringBuffer optionJobname=getCommandLineOption(options,"job").getArgument();
  StringBuffer optionUsername=getCommandLineOption(options,"user").getArgument();
  StringBuffer optionPassword=getCommandLineOption(options,"pass").getArgument();
  try {
    if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {
      if (!Const.isEmpty(optionRepname)) {
        if (rep != null) {
          rep.connect(BaseMessages.getString(PKG,"Spoon.Application.Name"));
          if (Const.isEmpty(optionDirname)) {
            optionDirname=new StringBuffer(RepositoryDirectory.DIRECTORY_SEPARATOR);
          }
          rep.setUserInfo(rep.loadUserInfo(optionUsername.toString(),optionPassword.toString()));
          if (rep.getUserInfo().getObjectId() != null) {
            int t=(Const.isEmpty(optionFilename) ? 0 : 1) + (Const.isEmpty(optionJobname) ? 0 : 1) + (Const.isEmpty(optionTransname) ? 0 : 1);
            if (t > 1) {
              log.logError(toString(),BaseMessages.getString(PKG,"Spoon.Log.MutuallyExcusive"));
            }
 else             if (t == 1) {
              if (!Const.isEmpty(optionFilename)) {
                openFile(optionFilename.toString(),false);
              }
 else {
                RepositoryDirectory repdir=rep.loadRepositoryDirectoryTree().findDirectory(optionDirname.toString());
                if (repdir == null) {
                  log.logError(toString(),BaseMessages.getString(PKG,"Spoon.Log.UnableFindDirectory",optionDirname.toString()));
                }
 else {
                  if (!Const.isEmpty(optionTransname)) {
                    TransMeta transMeta=rep.loadTransformation(optionTransname.toString(),repdir,null,true);
                    transMeta.setFilename(optionRepname.toString());
                    transMeta.clearChanged();
                    transMeta.setInternalKettleVariables();
                    addTransGraph(transMeta);
                  }
 else {
                    JobMeta jobMeta=rep.loadJob(optionJobname.toString(),repdir,null);
                    jobMeta.setFilename(optionRepname.toString());
                    jobMeta.clearChanged();
                    jobMeta.setInternalKettleVariables();
                    delegates.jobs.addJobGraph(jobMeta);
                  }
                }
              }
            }
          }
 else {
            log.logError(toString(),BaseMessages.getString(PKG,"Spoon.Log.UnableVerifyUser"));
            rep.disconnect();
            rep=null;
          }
        }
 else {
          log.logError(toString(),BaseMessages.getString(PKG,"Spoon.Log.NoRepositoriesDefined"));
        }
      }
 else       if (!Const.isEmpty(optionFilename)) {
        openFile(optionFilename.toString(),false);
      }
    }
 else {
      if (rep != null && rep.getUserInfo() != null) {
        try {
          rep.connect(BaseMessages.getString(PKG,"Spoon.Application.Name"));
        }
 catch (        Exception e) {
          log.logError(toString(),"Unable to connect to repository [" + rep.getName() + "]",e);
          setRepository(null);
        }
      }
      if (props.openLastFile()) {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"Spoon.Log.TryingOpenLastUsedFile"));
        List<LastUsedFile> lastUsedFiles=props.getOpenTabFiles();
        for (        LastUsedFile lastUsedFile : lastUsedFiles) {
          loadLastUsedFile(lastUsedFile,rep == null ? null : rep.getName(),false);
        }
      }
    }
  }
 catch (  KettleException ke) {
    log.logError(toString(),BaseMessages.getString(PKG,"Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage());
    log.logError(toString(),Const.getStackTracker(ke));
    new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Log.ErrorOccurred"),BaseMessages.getString(PKG,"Spoon.Log.ErrorOccurred") + Const.CR + ke.getMessage(),ke);
    rep=null;
  }
}
