{
  RepositoryMeta repositoryMeta=null;
  UserInfo userinfo=null;
  StringBuffer optionRepname=getCommandLineOption("rep").getArgument();
  StringBuffer optionFilename=getCommandLineOption("file").getArgument();
  int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION,PermissionMeta.TYPE_PERMISSION_JOB};
  if (Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename) && props.showRepositoriesDialogAtStartup()) {
    if (log.isBasic())     log.logBasic(APP_NAME,Messages.getString("Spoon.Log.AskingForRepository"));
    splash.hide();
    RepositoriesDialog rd=new RepositoriesDialog(display,perms,Messages.getString("Spoon.Application.Name"));
    return openRepositoryDialog(rd,repositoryMeta,userinfo);
  }
 else   if (!Const.isEmpty(optionRepname) && Const.isEmpty(optionFilename)) {
    RepositoriesMeta repsinfo=new RepositoriesMeta(log);
    if (repsinfo.readData()) {
      repositoryMeta=repsinfo.findRepository(optionRepname.toString());
      if (repositoryMeta != null) {
        setRepository(new Repository(log,repositoryMeta,userinfo));
      }
 else {
        String msg=Messages.getString("Spoon.Log.NoRepositoriesDefined");
        log.logError(toString(),msg);
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(Messages.getString("Spoon.Error.Repository.NotFound",optionRepname.toString()));
        mb.setText(Messages.getString("Spoon.Error.Repository.NotFound.Title"));
        mb.open();
        RepositoriesDialog rd=new RepositoriesDialog(display,perms,Messages.getString("Spoon.Application.Name"));
        return openRepositoryDialog(rd,repositoryMeta,userinfo);
      }
    }
  }
  return true;
}
