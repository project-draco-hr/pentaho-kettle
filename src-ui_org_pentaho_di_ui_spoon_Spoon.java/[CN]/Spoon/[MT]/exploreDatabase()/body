{
  if (RepositorySecurityUI.verifyOperations(shell,rep,RepositoryOperation.EXPLORE_DATABASE)) {
    return;
  }
  List<DatabaseMeta> databases=new ArrayList<DatabaseMeta>();
  HasDatabasesInterface databasesInterface=getActiveHasDatabasesInterface();
  if (databasesInterface != null) {
    databases.addAll(databasesInterface.getDatabases());
  }
  if (rep != null) {
    try {
      databases.addAll(rep.readDatabases());
    }
 catch (    KettleException e) {
      log.logError(toString(),"Unexpected repository error",e);
    }
  }
  if (databases.size() == 0)   return;
  String[] databaseNames=new String[databases.size()];
  for (int i=0; i < databases.size(); i++)   databaseNames[i]=databases.get(i).getName();
  EnterSelectionDialog dialog=new EnterSelectionDialog(shell,databaseNames,BaseMessages.getString(PKG,"Spoon.ExploreDB.SelectDB.Title"),BaseMessages.getString(PKG,"Spoon.ExploreDB.SelectDB.Message"));
  String name=dialog.open();
  if (name != null) {
    selectionObject=DatabaseMeta.findDatabase(databases,name);
    exploreDB();
  }
}
