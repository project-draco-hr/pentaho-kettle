{
  loginDialog=new RepositoriesDialog(shell,null,new ILoginCallback(){
    public void onSuccess(    Repository repository){
      if (rep != null) {
        rep.disconnect();
        SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_DISCONNECTED);
      }
      RepositoryDirectoryInterface directoryTree=null;
      try {
        setRepository(repository);
        directoryTree=rep.loadRepositoryDirectoryTree();
      }
 catch (      KettleException ke) {
        rep=null;
        new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorConnectingRepository.Message",Const.CR),ke);
      }
      TransMeta transMetas[]=getLoadedTransformations();
      for (int t=0; t < transMetas.length; t++) {
        TransMeta transMeta=transMetas[t];
        for (int i=0; i < transMeta.nrDatabases(); i++) {
          transMeta.getDatabase(i).setObjectId(null);
        }
        transMeta.setObjectId(null);
        List<DatabaseMeta> oldDatabases=transMeta.getDatabases();
        transMeta.setDatabases(new ArrayList<DatabaseMeta>());
        transMeta.setPartitionSchemas(new ArrayList<PartitionSchema>());
        transMeta.setSlaveServers(new ArrayList<SlaveServer>());
        transMeta.setClusterSchemas(new ArrayList<ClusterSchema>());
        try {
          SharedObjects sharedObjects=rep.readTransSharedObjects(transMeta);
          sharedObjectsFileMap.put(sharedObjects.getFilename(),sharedObjects);
        }
 catch (        KettleException e) {
          new ErrorDialog(shell,BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.ErrorReadingSharedObjects.Message",makeTabName(transMeta,true)),e);
        }
        for (int i=0; i < oldDatabases.size(); i++) {
          DatabaseMeta oldDatabase=oldDatabases.get(i);
          DatabaseMeta newDatabase=DatabaseMeta.findDatabase(transMeta.getDatabases(),oldDatabase.getName());
          if (newDatabase != null) {
            oldDatabase.setDatabaseInterface(newDatabase.getDatabaseInterface());
          }
 else {
            transMeta.addDatabase(oldDatabase);
          }
        }
        RepositoryDirectoryInterface redi=directoryTree.findDirectory(transMeta.getRepositoryDirectory().getPath());
        if (redi != null) {
          transMeta.setRepositoryDirectory(redi);
        }
 else {
          transMeta.setRepositoryDirectory(directoryTree);
        }
      }
      refreshTree();
      setShellText();
      SpoonPluginManager.getInstance().notifyLifecycleListeners(SpoonLifeCycleEvent.REPOSITORY_CONNECTED);
    }
    public void onError(    Throwable t){
      closeRepository();
      new ErrorDialog(loginDialog.getShell(),BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Title"),BaseMessages.getString(PKG,"Spoon.Dialog.LoginFailed.Message"),t);
    }
    public void onCancel(){
    }
  }
);
  loginDialog.show();
}
