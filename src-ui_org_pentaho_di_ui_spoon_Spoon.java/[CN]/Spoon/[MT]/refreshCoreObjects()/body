{
  if (shell.isDisposed())   return;
  if (!designSelected)   return;
  if (coreObjectsTree == null || coreObjectsTree.isDisposed()) {
    addCoreObjectsTree();
  }
  showTrans=getActiveTransformation() != null;
  showJob=getActiveJob() != null;
  if (showTrans == previousShowTrans && showJob == previousShowJob) {
    return;
  }
  TreeItem[] expandItems=coreObjectsTree.getItems();
  for (int i=0; i < expandItems.length; i++) {
    TreeItem item=expandItems[i];
    item.dispose();
  }
  if (showTrans) {
    final String locale=LanguageChoice.getInstance().getDefaultLocale().toString().toLowerCase();
    StepLoader steploader=StepLoader.getInstance();
    StepPlugin basesteps[]=steploader.getStepsWithType(StepPlugin.TYPE_ALL);
    final String basecat[]=steploader.getCategories(StepPlugin.TYPE_ALL,locale);
    Arrays.sort(basesteps,new Comparator<StepPlugin>(){
      public int compare(      StepPlugin one,      StepPlugin two){
        int idxOne=Const.indexOfString(one.getCategory(locale),basecat);
        int idxTwo=Const.indexOfString(two.getCategory(locale),basecat);
        if (idxOne == idxTwo) {
          String nameOne=one.getDescription(locale);
          String nameTwo=two.getDescription(locale);
          return nameOne.compareTo(nameTwo);
        }
 else {
          return idxOne - idxTwo;
        }
      }
    }
);
    for (int i=0; i < basecat.length; i++) {
      TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
      item.setText(basecat[i]);
      item.setImage(GUIResource.getInstance().getImageArrow());
      for (int j=0; j < basesteps.length; j++) {
        if (basesteps[j].getCategory(locale).equalsIgnoreCase(basecat[i])) {
          final Image stepimg=(Image)GUIResource.getInstance().getImagesStepsSmall().get(basesteps[j].getID()[0]);
          String pluginName=basesteps[j].getDescription(locale);
          String pluginDescription=basesteps[j].getTooltip(locale);
          boolean isPlugin=basesteps[j].isPlugin();
          if (!filterMatch(pluginName) && !filterMatch(pluginDescription))           continue;
          TreeItem stepItem=new TreeItem(item,SWT.NONE);
          stepItem.setImage(stepimg);
          stepItem.setText(pluginName);
          stepItem.addListener(SWT.Selection,new Listener(){
            public void handleEvent(            Event arg0){
              System.out.println("Tree item Listener fired");
            }
          }
);
          if (isPlugin)           stepItem.setFont(GUIResource.getInstance().getFontBold());
          coreStepToolTipMap.put(pluginName,pluginDescription);
        }
      }
    }
    TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
    item.setText(Messages.getString("Spoon.History"));
    item.setImage(GUIResource.getInstance().getImageArrow());
    List<ObjectUsageCount> pluginHistory=props.getPluginHistory();
    for (int i=0; i < pluginHistory.size() && i < 10; i++) {
      ObjectUsageCount usage=pluginHistory.get(i);
      StepPlugin stepPlugin=StepLoader.getInstance().findStepPluginWithID(usage.getObjectName());
      if (stepPlugin != null) {
        final Image stepimg=GUIResource.getInstance().getImagesSteps().get(stepPlugin.getID()[0]);
        String pluginName=Const.NVL(stepPlugin.getDescription(locale),"");
        String pluginDescription=Const.NVL(stepPlugin.getTooltip(locale),"");
        boolean isPlugin=stepPlugin.isPlugin();
        if (!filterMatch(pluginName) && !filterMatch(pluginDescription))         continue;
        TreeItem stepItem=new TreeItem(item,SWT.NONE);
        stepItem.setImage(stepimg);
        stepItem.setText(pluginName);
        stepItem.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event arg0){
            System.out.println("Tree item Listener fired");
          }
        }
);
        if (isPlugin)         stepItem.setFont(GUIResource.getInstance().getFontBold());
        coreStepToolTipMap.put(stepPlugin.getDescription(locale),pluginDescription + " (" + usage.getNrUses()+ ")");
      }
    }
  }
  if (showJob) {
    final String locale=LanguageChoice.getInstance().getDefaultLocale().toString().toLowerCase();
    JobEntryLoader jobEntryLoader=JobEntryLoader.getInstance();
    JobPlugin baseJobEntries[]=jobEntryLoader.getJobEntriesWithType(JobPlugin.TYPE_ALL);
    final String baseCategories[]=jobEntryLoader.getCategories(JobPlugin.TYPE_ALL,locale);
    Arrays.sort(baseJobEntries,new Comparator<JobPlugin>(){
      public int compare(      JobPlugin one,      JobPlugin two){
        int idxOne=Const.indexOfString(one.getCategory(locale),baseCategories);
        int idxTwo=Const.indexOfString(two.getCategory(locale),baseCategories);
        if (idxOne == idxTwo) {
          String nameOne=one.getDescription(locale);
          String nameTwo=two.getDescription(locale);
          return nameOne.compareTo(nameTwo);
        }
 else {
          return idxOne - idxTwo;
        }
      }
    }
);
    TreeItem generalItem=null;
    for (int i=0; i < baseCategories.length; i++) {
      TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
      item.setText(baseCategories[i]);
      item.setImage(GUIResource.getInstance().getImageArrow());
      if (baseCategories[i].equalsIgnoreCase(JobEntryCategory.GENERAL.getName())) {
        generalItem=item;
      }
      for (int j=0; j < baseJobEntries.length; j++) {
        if (!baseJobEntries[j].getID().equals("SPECIAL")) {
          if (baseJobEntries[j].getCategory(locale).equalsIgnoreCase(baseCategories[i])) {
            final Image jobEntryImage=(Image)GUIResource.getInstance().getImagesJobentriesSmall().get(baseJobEntries[j].getID());
            String pluginName=Const.NVL(baseJobEntries[j].getDescription(locale),"");
            String pluginDescription=Const.NVL(baseJobEntries[j].getTooltip(locale),"");
            boolean isPlugin=baseJobEntries[j].isPlugin();
            if (!filterMatch(pluginName) && !filterMatch(pluginDescription))             continue;
            TreeItem stepItem=new TreeItem(item,SWT.NONE);
            stepItem.setImage(jobEntryImage);
            stepItem.setText(pluginName);
            stepItem.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event arg0){
                System.out.println("Tree item Listener fired");
              }
            }
);
            if (isPlugin)             stepItem.setFont(GUIResource.getInstance().getFontBold());
            coreJobToolTipMap.put(pluginName,pluginDescription);
          }
        }
      }
    }
    JobEntryCopy startEntry=JobMeta.createStartEntry();
    JobEntryCopy dummyEntry=JobMeta.createDummyEntry();
    String specialText[]=new String[]{startEntry.getName(),dummyEntry.getName()};
    String specialTooltip[]=new String[]{startEntry.getDescription(),dummyEntry.getDescription()};
    Image specialImage[]=new Image[]{GUIResource.getInstance().getImageStartSmall(),GUIResource.getInstance().getImageDummySmall()};
    for (int i=0; i < specialText.length; i++) {
      TreeItem specialItem=new TreeItem(generalItem,SWT.NONE,i);
      specialItem.setImage(specialImage[i]);
      specialItem.setText(specialText[i]);
      specialItem.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event arg0){
          System.out.println("Tree item Listener fired");
        }
      }
);
      coreJobToolTipMap.put(specialText[i],specialTooltip[i]);
    }
  }
  variableComposite.layout(true,true);
  previousShowTrans=showTrans;
  previousShowJob=showJob;
}
