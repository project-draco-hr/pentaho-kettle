{
  if (shell.isDisposed())   return;
  if (!coreSelected)   return;
  if (coreObjectsTree == null || coreObjectsTree.isDisposed()) {
    addCoreObjectsTree();
  }
  showTrans=getActiveTransformation() != null;
  showJob=getActiveJob() != null;
  if (showTrans == previousShowTrans && showJob == previousShowJob) {
    return;
  }
  TreeItem[] expandItems=coreObjectsTree.getItems();
  for (int i=0; i < expandItems.length; i++) {
    TreeItem item=expandItems[i];
    item.dispose();
  }
  if (showTrans) {
    String locale=LanguageChoice.getInstance().getDefaultLocale().toString().toLowerCase();
    StepLoader steploader=StepLoader.getInstance();
    StepPlugin basesteps[]=steploader.getStepsWithType(StepPlugin.TYPE_ALL);
    String basecat[]=steploader.getCategories(StepPlugin.TYPE_ALL,locale);
    for (int i=0; i < basecat.length; i++) {
      TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
      item.setText(basecat[i]);
      item.setImage(GUIResource.getInstance().getImageArrow());
      for (int j=0; j < basesteps.length; j++) {
        if (basesteps[j].getCategory(locale).equalsIgnoreCase(basecat[i])) {
          final Image stepimg=(Image)GUIResource.getInstance().getImagesStepsSmall().get(basesteps[j].getID()[0]);
          String pluginName=basesteps[j].getDescription(locale);
          String pluginDescription=basesteps[j].getTooltip(locale);
          boolean isPlugin=basesteps[j].isPlugin();
          TreeItem stepItem=new TreeItem(item,SWT.NONE);
          stepItem.setImage(stepimg);
          stepItem.setText(pluginName);
          stepItem.addListener(SWT.Selection,new Listener(){
            public void handleEvent(            Event arg0){
              System.out.println("Tree item Listener fired");
            }
          }
);
          if (isPlugin)           stepItem.setFont(GUIResource.getInstance().getFontBold());
          coreStepToolTipMap.put(pluginName,pluginDescription);
        }
      }
    }
  }
  if (showJob) {
    TreeItem item=new TreeItem(coreObjectsTree,SWT.NONE);
    item.setText(STRING_JOB_ENTRIES);
    item.setImage(GUIResource.getInstance().getImageArrow());
    JobEntryCopy startEntry=JobMeta.createStartEntry();
    JobEntryCopy dummyEntry=JobMeta.createDummyEntry();
    String specialText[]=new String[]{startEntry.getName(),dummyEntry.getName()};
    String specialTooltip[]=new String[]{startEntry.getDescription(),dummyEntry.getDescription()};
    Image specialImage[]=new Image[]{GUIResource.getInstance().getImageStartSmall(),GUIResource.getInstance().getImageDummySmall()};
    for (int i=0; i < specialText.length; i++) {
      TreeItem specialItem=new TreeItem(item,SWT.NONE);
      specialItem.setImage(specialImage[i]);
      specialItem.setText(specialText[i]);
      specialItem.addListener(SWT.Selection,new Listener(){
        public void handleEvent(        Event arg0){
          System.out.println("Tree item Listener fired");
        }
      }
);
      coreJobToolTipMap.put(specialText[i],specialTooltip[i]);
    }
    JobEntryLoader jobEntryLoader=JobEntryLoader.getInstance();
    JobPlugin baseEntries[]=jobEntryLoader.getJobEntriesWithType(JobPlugin.TYPE_ALL);
    for (int i=0; i < baseEntries.length; i++) {
      if (!baseEntries[i].getID().equals("SPECIAL")) {
        final Image stepimg=GUIResource.getInstance().getImagesJobentriesSmall().get(baseEntries[i].getID());
        String pluginName=baseEntries[i].getDescription();
        String pluginDescription=baseEntries[i].getTooltip();
        boolean isPlugin=baseEntries[i].isPlugin();
        TreeItem jobItem=new TreeItem(item,SWT.NONE);
        jobItem.setImage(stepimg);
        jobItem.setText(pluginName);
        if (isPlugin)         jobItem.setFont(GUIResource.getInstance().getFontBold());
        jobItem.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event arg0){
            System.out.println("Tree item Listener fired");
          }
        }
);
        coreJobToolTipMap.put(pluginName,pluginDescription);
      }
    }
  }
  variableComposite.layout(true,true);
  previousShowTrans=showTrans;
  previousShowJob=showJob;
}
