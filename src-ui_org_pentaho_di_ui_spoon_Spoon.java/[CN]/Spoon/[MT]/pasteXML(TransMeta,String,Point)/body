{
  try {
    Document doc=XMLHandler.loadXMLString(clipcontent);
    Node transnode=XMLHandler.getSubNode(doc,"transformation");
    transMeta.unselectAll();
    Node stepsnode=XMLHandler.getSubNode(transnode,"steps");
    int nr=XMLHandler.countNodes(stepsnode,"step");
    log.logDebug(toString(),Messages.getString("Spoon.Log.FoundSteps","" + nr) + loc);
    StepMeta steps[]=new StepMeta[nr];
    Point min=new Point(99999999,99999999);
    for (int i=0; i < nr; i++) {
      Node stepnode=XMLHandler.getSubNodeByNr(stepsnode,"step",i);
      steps[i]=new StepMeta(stepnode,transMeta.getDatabases(),transMeta.getCounters());
      if (loc != null) {
        Point p=steps[i].getLocation();
        if (min.x > p.x)         min.x=p.x;
        if (min.y > p.y)         min.y=p.y;
      }
    }
    Node hopsnode=XMLHandler.getSubNode(transnode,"order");
    nr=XMLHandler.countNodes(hopsnode,"hop");
    log.logDebug(toString(),Messages.getString("Spoon.Log.FoundHops","" + nr));
    TransHopMeta hops[]=new TransHopMeta[nr];
    ArrayList<StepMeta> alSteps=new ArrayList<StepMeta>();
    for (int i=0; i < steps.length; i++)     alSteps.add(steps[i]);
    for (int i=0; i < nr; i++) {
      Node hopnode=XMLHandler.getSubNodeByNr(hopsnode,"hop",i);
      hops[i]=new TransHopMeta(hopnode,alSteps);
    }
    Point offset=new Point(loc.x - min.x,loc.y - min.y);
    int position[]=new int[steps.length];
    for (int i=0; i < steps.length; i++) {
      Point p=steps[i].getLocation();
      String name=steps[i].getName();
      steps[i].setLocation(p.x + offset.x,p.y + offset.y);
      steps[i].setDraw(true);
      steps[i].setName(transMeta.getAlternativeStepname(name));
      transMeta.addStep(steps[i]);
      position[i]=transMeta.indexOfStep(steps[i]);
      steps[i].setSelected(true);
    }
    for (int i=0; i < hops.length; i++) {
      transMeta.addTransHop(hops[i]);
    }
    Node notesnode=XMLHandler.getSubNode(transnode,"notepads");
    nr=XMLHandler.countNodes(notesnode,"notepad");
    log.logDebug(toString(),Messages.getString("Spoon.Log.FoundNotepads","" + nr));
    NotePadMeta notes[]=new NotePadMeta[nr];
    for (int i=0; i < notes.length; i++) {
      Node notenode=XMLHandler.getSubNodeByNr(notesnode,"notepad",i);
      notes[i]=new NotePadMeta(notenode);
      Point p=notes[i].getLocation();
      notes[i].setLocation(p.x + offset.x,p.y + offset.y);
      transMeta.addNote(notes[i]);
      notes[i].setSelected(true);
    }
    for (int i=0; i < steps.length; i++) {
      StepMetaInterface smi=steps[i].getStepMetaInterface();
      smi.searchInfoAndTargetSteps(transMeta.getSteps());
    }
    addUndoNew(transMeta,steps,position,false);
    int hoppos[]=new int[hops.length];
    for (int i=0; i < hops.length; i++)     hoppos[i]=transMeta.indexOfTransHop(hops[i]);
    addUndoNew(transMeta,hops,hoppos,true);
    int notepos[]=new int[notes.length];
    for (int i=0; i < notes.length; i++)     notepos[i]=transMeta.indexOfNote(notes[i]);
    addUndoNew(transMeta,notes,notepos,true);
    if (transMeta.haveStepsChanged()) {
      refreshTree();
      refreshGraph();
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,Messages.getString("Spoon.Dialog.UnablePasteSteps.Title"),Messages.getString("Spoon.Dialog.UnablePasteSteps.Message"),e);
  }
}
