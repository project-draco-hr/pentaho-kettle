{
  try {
    OsHelper.setAppName();
    Display display=null;
    if (System.getProperties().containsKey("SLEAK")) {
      DeviceData data=new DeviceData();
      data.tracking=true;
      display=new Display(data);
      Sleak sleak=new Sleak();
      sleak.open();
    }
 else {
      display=Display.getDefault();
    }
    OsHelper.initOsHandlers(display);
    UIManager.setLookAndFeel(new MetalLookAndFeel());
    Splash splash=null;
    registerUIPluginObjectTypes();
    KettleEnvironment.init();
    List<String> args=new ArrayList<String>(java.util.Arrays.asList(a));
    CommandLineOption[] commandLineOptions=getCommandLineArgs(args);
    initLogging(commandLineOptions);
    PropsUI.init(display,Props.TYPE_PROPERTIES_SPOON);
    CentralLogStore.init(PropsUI.getInstance().getMaxNrLinesInLog(),PropsUI.getInstance().getMaxLogLineTimeoutMinutes());
    staticSpoon=new Spoon(display);
    String pId=null;
    StringBuffer perspectiveIdBuff=Spoon.getCommandLineOption(commandLineOptions,"perspective").getArgument();
    pId=perspectiveIdBuff.toString();
    if (!pId.equals("")) {
      SpoonPerspectiveManager.getInstance().setStartupPerspective(pId);
    }
    staticSpoon.init(null);
    SpoonFactory.setSpoonInstance(staticSpoon);
    staticSpoon.setDestroy(true);
    GUIFactory.setThreadDialogs(new ThreadGuiResources());
    try {
      staticSpoon.lifecycleSupport.onStart(staticSpoon);
    }
 catch (    Throwable e) {
      new ErrorDialog(staticSpoon.shell,"Error","Error starting lifecycle listener",e);
    }
    OsHelper.customizeWindow();
    staticSpoon.setArguments(args.toArray(new String[args.size()]));
    staticSpoon.start(splash,commandLineOptions);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    if (staticSpoon != null) {
      log.logError("Fatal error : " + Const.NVL(t.toString(),Const.NVL(t.getMessage(),"Unknown error")));
      log.logError(Const.getStackTracker(t));
    }
  }
  System.exit(0);
}
