{
  roleRadioButton=(XulRadio)document.getElementById("role-radio-button");
  userRadioButton=(XulRadio)document.getElementById("user-radio-button");
  roleEditButton=(XulButton)document.getElementById("role-edit");
  roleRemoveButton=(XulButton)document.getElementById("role-remove");
  userEditButton=(XulButton)document.getElementById("user-edit");
  userRemoveButton=(XulButton)document.getElementById("user-remove");
  addUserToRoleButton=(XulButton)document.getElementById("add-user-to-role");
  removeUserFromRoleButton=(XulButton)document.getElementById("remove-user-from-role");
  addRoleToUserButton=(XulButton)document.getElementById("add-role-to-user");
  removeRoleFromUserButton=(XulButton)document.getElementById("remove-role-from-user");
  userDialog=(XulDialog)document.getElementById("add-user-dialog");
  roleDialog=(XulDialog)document.getElementById("add-role-dialog");
  userRoleDeck=(XulDeck)document.getElementById("user-role-deck");
  roleListBox=(XulListbox)document.getElementById("roles-list");
  userListBox=(XulListbox)document.getElementById("users-list");
  roleDetailTable=(XulTree)document.getElementById("role-detail-table");
  userDetailTable=(XulTree)document.getElementById("user-detail-table");
  createContent=(XulCheckbox)document.getElementById("role-create-content-checkbox");
  readContent=(XulCheckbox)document.getElementById("role-read-content-checkbox");
  administerSecurity=(XulCheckbox)document.getElementById("role-administer-security-checkbox");
  username=(XulTextbox)document.getElementById("user-name");
  userPassword=(XulTextbox)document.getElementById("user-password");
  userDescription=(XulTextbox)document.getElementById("user-description");
  availableRoles=(XulListbox)document.getElementById("available-roles-list");
  assignedRoles=(XulListbox)document.getElementById("selected-roles-list");
  assignRoleToUserButton=(XulButton)document.getElementById("assign-role-to-user");
  unassignRoleFromUserButton=(XulButton)document.getElementById("unassign-role-from-user");
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(securityUser,"name",username,"value");
  bf.createBinding(securityUser,"password",userPassword,"value");
  bf.createBinding(securityUser,"description",userDescription,"value");
  bf.createBinding(securityUser,"assignedRoles",assignedRoles,"elements");
  bf.createBinding(securityUser,"availableRoles",availableRoles,"elements");
  BindingConvertor<List<UIRepositoryRole>,Object[]> arrayToListRoleConverter=new BindingConvertor<List<UIRepositoryRole>,Object[]>(){
    @Override public Object[] sourceToTarget(    List<UIRepositoryRole> roles){
      if (roles != null) {
        Object[] retVal=new Object[roles.size()];
        int i=0;
        for (        UIRepositoryRole role : roles) {
          retVal[i++]=role;
        }
        return retVal;
      }
      return null;
    }
    @Override public List<UIRepositoryRole> targetToSource(    Object[] roles){
      if (roles != null) {
        List<UIRepositoryRole> retVal=new ArrayList<UIRepositoryRole>();
        for (int i=0; i < roles.length; i++) {
          retVal.add((UIRepositoryRole)roles[i]);
        }
        return retVal;
      }
      return null;
    }
  }
;
  BindingConvertor<List<UIRepositoryUser>,Object[]> arrayToListUserConverter=new BindingConvertor<List<UIRepositoryUser>,Object[]>(){
    @Override public Object[] sourceToTarget(    List<UIRepositoryUser> users){
      if (users != null) {
        Object[] retVal=new Object[users.size()];
        int i=0;
        for (        UIRepositoryUser user : users) {
          retVal[i++]=user;
        }
        return retVal;
      }
      return null;
    }
    @Override public List<UIRepositoryUser> targetToSource(    Object[] users){
      if (users != null) {
        List<UIRepositoryUser> retVal=new ArrayList<UIRepositoryUser>();
        for (int i=0; i < users.length; i++) {
          retVal.add((UIRepositoryUser)users[i]);
        }
        return retVal;
      }
      return null;
    }
  }
;
  bf.createBinding(securityUser,"availableSelectedRoles",availableRoles,"selectedItems",arrayToListRoleConverter);
  bf.createBinding(securityUser,"assignedSelectedRoles",assignedRoles,"selectedItems",arrayToListRoleConverter);
  bf.createBinding(security,"selectedUserIndex",userListBox,"selectedIndex");
  BindingConvertor<Integer,Boolean> accumulatorButtonConverter=new BindingConvertor<Integer,Boolean>(){
    @Override public Boolean sourceToTarget(    Integer value){
      if (value != null && value >= 0) {
        return true;
      }
      return false;
    }
    @Override public Integer targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(assignedRoles,"selectedIndex",securityUser,"roleUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableRoles,"selectedIndex",securityUser,"roleAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(securityUser,"roleUnassignmentPossible",unassignRoleFromUserButton,"!disabled");
  bf.createBinding(securityUser,"roleAssignmentPossible",assignRoleToUserButton,"!disabled");
  rolename=(XulTextbox)document.getElementById("role-name");
  roleDescription=(XulTextbox)document.getElementById("role-description");
  availableUsers=(XulListbox)document.getElementById("available-users-list");
  assignedUsers=(XulListbox)document.getElementById("selected-users-list");
  assignUserToRoleButton=(XulButton)document.getElementById("assign-user-to-role");
  unassignUserFromRoleButton=(XulButton)document.getElementById("unassign-user-from-role");
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(securityRole,"name",rolename,"value");
  bf.createBinding(securityRole,"description",roleDescription,"value");
  bf.createBinding(securityRole,"assignedUsers",assignedUsers,"elements");
  bf.createBinding(securityRole,"availableUsers",availableUsers,"elements");
  bf.createBinding(securityRole,"availableSelectedUsers",availableUsers,"selectedItems",arrayToListUserConverter);
  bf.createBinding(securityRole,"assignedSelectedUsers",assignedUsers,"selectedItems",arrayToListUserConverter);
  bf.createBinding(security,"selectedRoleIndex",roleListBox,"selectedIndex");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(assignedUsers,"selectedIndex",securityRole,"userUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableUsers,"selectedIndex",securityRole,"userAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(securityRole,"userUnassignmentPossible",unassignUserFromRoleButton,"!disabled");
  bf.createBinding(securityRole,"userAssignmentPossible",assignUserToRoleButton,"!disabled");
  try {
    bf.setBindingType(Binding.Type.ONE_WAY);
    BindingConvertor<Integer,Boolean> buttonConverter=new BindingConvertor<Integer,Boolean>(){
      @Override public Boolean sourceToTarget(      Integer value){
        if (value != null && value >= 0) {
          return false;
        }
        return true;
      }
      @Override public Integer targetToSource(      Boolean value){
        return null;
      }
    }
;
    BindingConvertor<Object,Boolean> removeButtonConverter=new BindingConvertor<Object,Boolean>(){
      @Override public Boolean sourceToTarget(      Object value){
        if (value != null) {
          return false;
        }
        return true;
      }
      @Override public Object targetToSource(      Boolean value){
        return null;
      }
    }
;
    bf.createBinding(roleListBox,"selectedIndex",roleEditButton,"disabled",buttonConverter);
    bf.createBinding(roleListBox,"selectedIndex",roleRemoveButton,"disabled",buttonConverter);
    bf.createBinding(userListBox,"selectedIndex",userEditButton,"disabled",buttonConverter);
    bf.createBinding(userListBox,"selectedIndex",userRemoveButton,"disabled",buttonConverter);
    bf.setBindingType(Binding.Type.ONE_WAY);
    bf.createBinding(roleListBox,"selectedIndex",createContent,"disabled",buttonConverter);
    bf.createBinding(roleListBox,"selectedIndex",readContent,"disabled",buttonConverter);
    bf.createBinding(roleListBox,"selectedIndex",administerSecurity,"disabled",buttonConverter);
    bf.createBinding(userListBox,"selectedItem",security,"selectedUser");
    bf.createBinding(roleListBox,"selectedItem",security,"selectedRole");
    bf.createBinding(roleListBox,"selectedIndex",addUserToRoleButton,"disabled",buttonConverter);
    bf.createBinding(roleDetailTable,"selectedItem",removeUserFromRoleButton,"disabled",removeButtonConverter);
    bf.createBinding(userListBox,"selectedIndex",addRoleToUserButton,"disabled",buttonConverter);
    bf.createBinding(userDetailTable,"selectedItem",removeRoleFromUserButton,"disabled",removeButtonConverter);
    bf.createBinding(security,"roleList",roleListBox,"elements").fireSourceChanged();
    bf.createBinding(security,"userList",userListBox,"elements").fireSourceChanged();
    bf.createBinding(roleListBox,"selectedItem",security,"selectedRole");
    bf.createBinding(userListBox,"selectedItem",security,"selectedUser");
    roleDetailBinding=bf.createBinding(security,"selectedRole",roleDetailTable,"elements",new BindingConvertor<UIRepositoryRole,List<UIRepositoryUser>>(){
      @Override public List<UIRepositoryUser> sourceToTarget(      UIRepositoryRole rr){
        List<UIRepositoryUser> rusers=new ArrayList<UIRepositoryUser>();
        if (rr != null && rr.getUsers() != null) {
          List<UserInfo> users=new ArrayList<UserInfo>(rr.getUsers());
          for (          UserInfo user : users) {
            rusers.add(new UIRepositoryUser(user));
          }
        }
        return rusers;
      }
      @Override public UIRepositoryRole targetToSource(      List<UIRepositoryUser> arg0){
        return null;
      }
    }
);
    userDetailBinding=bf.createBinding(security,"selectedUser",userDetailTable,"elements",new BindingConvertor<UIRepositoryUser,List<UIRepositoryRole>>(){
      @Override public List<UIRepositoryRole> sourceToTarget(      UIRepositoryUser ru){
        List<UIRepositoryRole> rroles=new ArrayList<UIRepositoryRole>();
        if (ru != null && ru.getRoles() != null) {
          List<RoleInfo> roles=new ArrayList<RoleInfo>(ru.getRoles());
          for (          RoleInfo role : roles) {
            rroles.add(new UIRepositoryRole(role));
          }
        }
        return rroles;
      }
      @Override public UIRepositoryUser targetToSource(      List<UIRepositoryRole> arg0){
        return null;
      }
    }
);
    bf.createBinding(security,"selectedDeck",userRoleDeck,"selectedIndex",new BindingConvertor<ObjectRecipient.Type,Integer>(){
      @Override public Integer sourceToTarget(      Type arg0){
        if (arg0 == Type.ROLE) {
          roleRadioButton.setSelected(true);
          userRadioButton.setSelected(false);
          return 0;
        }
 else         if (arg0 == Type.USER) {
          roleRadioButton.setSelected(false);
          userRadioButton.setSelected(true);
          return 1;
        }
 else         return -1;
      }
      @Override public Type targetToSource(      Integer arg0){
        return null;
      }
    }
);
    BindingConvertor<Mode,Boolean> modeBindingConverter=new BindingConvertor<Mode,Boolean>(){
      @Override public Boolean sourceToTarget(      Mode arg0){
        if (arg0.equals(Mode.ADD)) {
          return false;
        }
        return true;
      }
      @Override public Mode targetToSource(      Boolean arg0){
        return null;
      }
    }
;
    BindingConvertor<Mode,Boolean> anotherModeBindingConverter=new BindingConvertor<Mode,Boolean>(){
      @Override public Boolean sourceToTarget(      Mode arg0){
        if (arg0.equals(Mode.EDIT_MEMBER)) {
          return true;
        }
 else         return false;
      }
      @Override public Mode targetToSource(      Boolean arg0){
        return null;
      }
    }
;
    bf.createBinding(securityRole,"mode",rolename,"disabled",modeBindingConverter);
    bf.createBinding(securityRole,"mode",roleDescription,"disabled",anotherModeBindingConverter);
    bf.createBinding(securityUser,"mode",username,"disabled",modeBindingConverter);
    bf.createBinding(securityUser,"mode",userPassword,"disabled",anotherModeBindingConverter);
    bf.createBinding(securityUser,"mode",userDescription,"disabled",anotherModeBindingConverter);
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
  changeToRoleDeck();
}
