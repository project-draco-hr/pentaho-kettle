{
  Row table=new Row();
  table.addValue(new Value("ID_TRANSFORMATION",transMeta.getId()));
  table.addValue(new Value("NAME",transMeta.getName()));
  table.addValue(new Value("ID_STEP_READ",transMeta.getReadStep() == null ? -1L : transMeta.getReadStep().getID()));
  table.addValue(new Value("ID_STEP_WRITE",transMeta.getWriteStep() == null ? -1L : transMeta.getWriteStep().getID()));
  table.addValue(new Value("ID_STEP_INPUT",transMeta.getInputStep() == null ? -1L : transMeta.getInputStep().getID()));
  table.addValue(new Value("ID_STEP_OUTPUT",transMeta.getOutputStep() == null ? -1L : transMeta.getOutputStep().getID()));
  table.addValue(new Value("ID_STEP_UPDATE",transMeta.getUpdateStep() == null ? -1L : transMeta.getUpdateStep().getID()));
  table.addValue(new Value("ID_DATABASE_LOG",transMeta.getLogConnection() == null ? -1L : transMeta.getLogConnection().getID()));
  table.addValue(new Value("TABLE_NAME_LOG",transMeta.getLogTable()));
  table.addValue(new Value("USE_BATCHID",transMeta.isBatchIdUsed()));
  table.addValue(new Value("USE_LOGFIELD",transMeta.isLogfieldUsed()));
  table.addValue(new Value("ID_DATABASE_MAXDATE",transMeta.getMaxDateConnection() == null ? -1L : transMeta.getMaxDateConnection().getID()));
  table.addValue(new Value("TABLE_NAME_MAXDATE",transMeta.getMaxDateTable()));
  table.addValue(new Value("FIELD_NAME_MAXDATE",transMeta.getMaxDateField()));
  table.addValue(new Value("OFFSET_MAXDATE",transMeta.getMaxDateOffset()));
  table.addValue(new Value("DIFF_MAXDATE",transMeta.getMaxDateDifference()));
  table.addValue(new Value("MODIFIED_USER",transMeta.getModifiedUser()));
  table.addValue(new Value("MODIFIED_DATE",transMeta.getModifiedDate()));
  table.addValue(new Value("SIZE_ROWSET",(long)transMeta.getSizeRowset()));
  table.addValue(new Value("ID_DIRECTORY",transMeta.getDirectory().getID()));
  database.prepareInsert(table,"R_TRANSFORMATION");
  database.setValuesInsert(table);
  database.insertRow();
  database.closeInsert();
  insertTransAttribute(transMeta.getId(),0,"CONNECTION_GROUP",0,transMeta.getConnectionGroup());
  insertTransAttribute(transMeta.getId(),0,"FEEDBACK_SHOWN",0,transMeta.isFeedbackShown() ? "Y" : "N");
  insertTransAttribute(transMeta.getId(),0,"FEEDBACK_SIZE",transMeta.getFeedbackSize(),"");
  List schemas=transMeta.getPartitionSchemas();
  for (int i=0; i < schemas.size(); i++) {
    PartitionSchema schema=(PartitionSchema)schemas.get(i);
    String ids[]=schema.getPartitionIDs();
    insertTransAttribute(transMeta.getId(),i,"SCHEMA_NAME",ids.length,schema.getName());
    for (int p=0; p < ids.length; p++) {
      insertTransAttribute(transMeta.getId(),i,"SCHEMA_PARTITION_" + p,0,ids[p]);
    }
  }
  if (transMeta.getLogConnection() != null)   insertStepDatabase(transMeta.getId(),-1L,transMeta.getLogConnection().getID());
  if (transMeta.getMaxDateConnection() != null)   insertStepDatabase(transMeta.getId(),-1L,transMeta.getMaxDateConnection().getID());
}
