{
  KettleEnvironment.init();
  Map<Class<?>,String> dbMap=new HashMap<Class<?>,String>();
  dbMap.put(DatabaseInterface.class,SynchDBMockIface.class.getName());
  PluginRegistry preg=PluginRegistry.getInstance();
  mockDbPlugin=mock(PluginInterface.class);
  when(mockDbPlugin.matches(anyString())).thenReturn(true);
  when(mockDbPlugin.isNativePlugin()).thenReturn(true);
  when(mockDbPlugin.getMainType()).thenAnswer(new Answer<Class<?>>(){
    @Override public Class<?> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabaseInterface.class;
    }
  }
);
  when(mockDbPlugin.getPluginType()).thenAnswer(new Answer<Class<? extends PluginTypeInterface>>(){
    @Override public Class<? extends PluginTypeInterface> answer(    InvocationOnMock invocation) throws Throwable {
      return DatabasePluginType.class;
    }
  }
);
  when(mockDbPlugin.getIds()).thenReturn(new String[]{"Oracle","mock-db-id"});
  when(mockDbPlugin.getName()).thenReturn("mock-db-name");
  when(mockDbPlugin.getClassMap()).thenReturn(dbMap);
  preg.registerPlugin(DatabasePluginType.class,mockDbPlugin);
  inputList=new ArrayList<RowMetaAndData>();
  RowMetaInterface rm=new RowMeta();
  ValueMetaInterface[] valuesMeta={new ValueMeta("personName",ValueMeta.TYPE_STRING),new ValueMeta("key",ValueMeta.TYPE_STRING),new ValueMeta("flag",ValueMeta.TYPE_STRING)};
  for (int i=0; i < valuesMeta.length; i++) {
    rm.addValueMeta(valuesMeta[i]);
  }
  Object[] r1=new Object[]{"Ben","123","deleted"};
  inputList.add(new RowMetaAndData(rm,r1));
}
