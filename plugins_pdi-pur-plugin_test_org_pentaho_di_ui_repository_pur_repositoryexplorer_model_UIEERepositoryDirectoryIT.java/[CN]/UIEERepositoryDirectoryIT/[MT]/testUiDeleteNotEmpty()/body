{
  RepositoryDirectoryInterface rootDir=repository.loadRepositoryDirectoryTree();
  final String startDirName="home";
  final String testDirName="testdir";
  final String testDir2Name="testdir2";
  final String startDirPath="/" + startDirName;
  final String testDirPath=startDirPath + "/" + testDirName;
  final String testDir2Path=testDirPath + "/" + testDir2Name;
  RepositoryDirectoryInterface startDir=rootDir.findDirectory(startDirName);
  final RepositoryDirectoryInterface testDirCreated=repository.createRepositoryDirectory(startDir,testDirName);
  final RepositoryDirectoryInterface testDir2Created=repository.createRepositoryDirectory(testDirCreated,testDir2Name);
  assertNotNull(testDirCreated);
  assertNotNull(testDirCreated.getObjectId());
  assertNotNull(testDir2Created);
  rootDir=repository.loadRepositoryDirectoryTree();
  startDir=rootDir.findDirectory(startDirName);
  final RepositoryDirectoryInterface startDirFound=repository.findDirectory(startDirPath);
  final RepositoryDirectoryInterface testDirFound=repository.findDirectory(testDirPath);
  Assert.assertNotNull(testDirFound);
  final RepositoryDirectoryInterface testDir2Found=repository.findDirectory(testDir2Path);
  Assert.assertNotNull(testDir2Found);
  final UIEERepositoryDirectory startDirUi=new UIEERepositoryDirectory(startDirFound,null,repository);
  final UIEERepositoryDirectory testDirUi=new UIEERepositoryDirectory(testDirFound,startDirUi,repository);
  testDirUi.delete(true);
  RepositoryDirectoryInterface testDirFound2=repository.findDirectory(testDirPath);
  Assert.assertNull(testDirFound2);
}
