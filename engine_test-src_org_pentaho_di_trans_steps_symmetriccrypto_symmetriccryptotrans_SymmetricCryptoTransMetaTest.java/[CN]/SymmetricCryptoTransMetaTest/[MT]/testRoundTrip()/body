{
  KettleEnvironment.init();
  List<String> attributes=Arrays.asList("operation_type","algorithm","schema","secretKeyField","messageField","resultfieldname","secretKey","secretKeyInField","readKeyAsBinary","outputResultAsBinary");
  Map<String,String> getterMap=new HashMap<String,String>();
  getterMap.put("operation_type","getOperationType");
  getterMap.put("algorithm","getAlgorithm");
  getterMap.put("schema","getSchema");
  getterMap.put("secretKeyField","getSecretKeyField");
  getterMap.put("messageField","getMessageField");
  getterMap.put("resultfieldname","getResultfieldname");
  getterMap.put("secretKey","getSecretKey");
  getterMap.put("secretKeyInField","isSecretKeyInField");
  getterMap.put("readKeyAsBinary","isReadKeyAsBinary");
  getterMap.put("outputResultAsBinary","isOutputResultAsBinary");
  Map<String,String> setterMap=new HashMap<String,String>();
  setterMap.put("operation_type","setOperationType");
  setterMap.put("algorithm","setAlgorithm");
  setterMap.put("schema","setSchema");
  setterMap.put("secretKeyField","setsecretKeyField");
  setterMap.put("messageField","setMessageField");
  setterMap.put("resultfieldname","setResultfieldname");
  setterMap.put("secretKey","setSecretKey");
  setterMap.put("secretKeyInField","setSecretKeyInField");
  setterMap.put("readKeyAsBinary","setReadKeyAsBinary");
  setterMap.put("outputResultAsBinary","setOutputResultAsBinary");
  Map<String,FieldLoadSaveValidator<?>> fieldLoadSaveValidator=new HashMap<String,FieldLoadSaveValidator<?>>();
  fieldLoadSaveValidator.put("operation_type",new OperationTypeLoadSaveValidator());
  LoadSaveTester loadSaveTester=new LoadSaveTester(SymmetricCryptoTransMeta.class,attributes,getterMap,setterMap,fieldLoadSaveValidator,new HashMap<String,FieldLoadSaveValidator<?>>());
  loadSaveTester.testRepoRoundTrip();
  loadSaveTester.testXmlRoundTrip();
}
