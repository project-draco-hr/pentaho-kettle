{
  meta=(RegexEvalMeta)smi;
  data=(RegexEvalData)sdi;
  Object[] row=getRow();
  if (row == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    int captureIndex=getInputRowMeta().size();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (Const.isEmpty(environmentSubstitute(meta.getResultFieldName()))) {
      if (!meta.isAllowCaptureGroupsFlagSet()) {
        logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorResultFieldMissing"));
        throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorResultFieldMissing"));
      }
      data.indexOfResultField=-1;
    }
 else {
      if (meta.isReplacefields()) {
        data.indexOfResultField=getInputRowMeta().indexOfValue(meta.getResultFieldName());
      }
      if (data.indexOfResultField < 0) {
        data.indexOfResultField=getInputRowMeta().size();
        captureIndex++;
      }
    }
    if (meta.getMatcher() == null) {
      logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorMatcherMissing"));
      throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorMatcherMissing"));
    }
    data.indexOfFieldToEvaluate=getInputRowMeta().indexOfValue(meta.getMatcher());
    if (data.indexOfFieldToEvaluate < 0) {
      logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorFindingField") + "[" + meta.getMatcher()+ "]");
      throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.CouldnotFindField",meta.getMatcher()));
    }
    if (meta.isAllowCaptureGroupsFlagSet()) {
      data.positions=new int[meta.getFieldName().length];
      String[] fieldName=meta.getFieldName();
      for (int i=0; i < fieldName.length; i++) {
        if (fieldName[i] == null || fieldName[i].length() == 0) {
          continue;
        }
        if (meta.isReplacefields()) {
          data.positions[i]=data.outputRowMeta.indexOfValue(fieldName[i]);
        }
 else {
          data.positions[i]=captureIndex;
          captureIndex++;
        }
      }
    }
 else {
      data.positions=new int[0];
    }
    data.conversionRowMeta=data.outputRowMeta.cloneToType(ValueMetaInterface.TYPE_STRING);
  }
  Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  System.arraycopy(row,0,outputRow,0,data.outputRowMeta.size());
  try {
    String fieldValue;
    boolean isMatch;
    if (getInputRowMeta().isNull(row,data.indexOfFieldToEvaluate)) {
      fieldValue="";
      isMatch=false;
    }
 else {
      fieldValue=getInputRowMeta().getString(row,data.indexOfFieldToEvaluate);
      Matcher m=data.pattern.matcher(fieldValue);
      isMatch=m.matches();
      if (meta.isAllowCaptureGroupsFlagSet() && data.positions.length != m.groupCount()) {
        logError(BaseMessages.getString(PKG,"RegexEval.Log.ErrorCaptureGroupFieldsMismatch",String.valueOf(m.groupCount()),String.valueOf(data.positions.length)));
        throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Exception.ErrorCaptureGroupFieldsMismatch",String.valueOf(m.groupCount()),String.valueOf(data.positions.length)));
      }
      for (int i=0; i < data.positions.length; i++) {
        int index=data.positions[i];
        String value;
        if (isMatch) {
          value=m.group(i + 1);
        }
 else {
          value=null;
        }
        if (value == null) {
          try {
            value=data.outputRowMeta.getString(outputRow,index);
          }
 catch (          ArrayIndexOutOfBoundsException err) {
          }
        }
        ValueMetaInterface valueMeta=data.outputRowMeta.getValueMeta(index);
        ValueMetaInterface conversionValueMeta=data.conversionRowMeta.getValueMeta(index);
        Object convertedValue=valueMeta.convertDataFromString(value,conversionValueMeta,meta.getFieldNullIf()[i],meta.getFieldIfNull()[i],meta.getFieldTrimType()[i]);
        outputRow[index]=convertedValue;
      }
    }
    if (data.indexOfResultField >= 0) {
      outputRow[data.indexOfResultField]=isMatch;
    }
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"RegexEval.Log.ReadRow") + " " + getInputRowMeta().getString(row));
    }
    putRow(data.outputRowMeta,outputRow);
  }
 catch (  KettleException e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      throw new KettleStepException(BaseMessages.getString(PKG,"RegexEval.Log.ErrorInStep"),e);
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),outputRow,1,errorMessage,null,"REGEX001");
    }
  }
  return true;
}
