{
  KettleEnvironment.init();
  PluginRegistry registry=PluginRegistry.getInstance();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("Mapping Info Test");
  StepMeta rowGenerator=buildRowGeneratorStep(registry,"Generate Rows");
  transMeta.addStep(rowGenerator);
  String mappingName="mapping";
  MappingMeta mappingMeta=new MappingMeta();
  mappingMeta.setSpecificationMethod(ObjectLocationSpecificationMethod.FILENAME);
  mappingMeta.setFileName("test/org/pentaho/di/trans/steps/mapping/subtrans.ktr");
  String mappingInputStepName="input";
  mappingMeta.setInputMappings(Collections.singletonList(createMappingDef(rowGenerator.getName(),mappingInputStepName,"string","a")));
  String mappingPid=registry.getPluginId(StepPluginType.class,mappingMeta);
  StepMeta mapping=new StepMeta(mappingPid,mappingName,mappingMeta);
  transMeta.addStep(mapping);
  TransHopMeta hopGeneratorToMapping=new TransHopMeta(rowGenerator,mapping);
  transMeta.addTransHop(hopGeneratorToMapping);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  for (int i=0; i < transMeta.nrSteps(); i++) {
    StepMeta stepMeta=transMeta.getStep(i);
    StepMetaInterface sii=stepMeta.getStepMetaInterface();
    if (sii != null)     sii.searchInfoAndTargetSteps(transMeta.getSteps());
  }
  assertEquals("Transformation not initialized properly",2,transMeta.nrSteps());
  StepMeta meta=transMeta.getStep(1);
  assertTrue("Transformation not initialized properly",meta.getStepMetaInterface() instanceof MappingMeta);
  MappingMeta loadedMappingMeta=(MappingMeta)meta.getStepMetaInterface();
  assertEquals("Expected a single input mapping definition",1,loadedMappingMeta.getInputMappings().size());
  StepIOMetaInterface ioMeta=loadedMappingMeta.getStepIOMeta();
  assertEquals("Expected a single Info Stream",1,ioMeta.getInfoStreams().size());
  assertEquals("Expected a single Info Step",1,loadedMappingMeta.getInfoSteps().length);
  StepInterface si=trans.getStepInterface(mappingName,0);
  RowStepCollector rc=new RowStepCollector();
  si.addRowListener(rc);
  trans.startThreads();
  trans.waitUntilFinished();
  assertEquals(1,rc.getRowsRead().size());
  assertEquals(1,rc.getRowsWritten().size());
}
