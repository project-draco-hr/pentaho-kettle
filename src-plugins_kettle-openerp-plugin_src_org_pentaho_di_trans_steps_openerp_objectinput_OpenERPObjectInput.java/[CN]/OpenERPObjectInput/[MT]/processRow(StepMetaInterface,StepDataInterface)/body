{
  this.logBasic("Getting Field Row Meta.");
  this.logBasic("Getting Rows.");
  if (first == true) {
    first=false;
    try {
      final RowMetaInterface rowMeta=data.helper.getFieldRowMeta(meta.getMappings());
      ArrayList<FieldMapping> allFields=data.helper.getDefaultFieldMappings(meta.getModelName());
      FilterCollection filter=new FilterCollection();
      for (int i=0; i < meta.getFilterList().size(); i++) {
        ReadFilter filterItem=meta.getFilterList().get(i);
        FieldMapping fld=null;
        for (int j=0; j < allFields.size(); j++)         if (allFields.get(j).source_field.equals(filterItem.field_name) && allFields.get(j).source_index <= 0) {
          fld=allFields.get(j);
          break;
        }
        Object value=filterItem.value;
        if (fld == null)         value=filterItem.value;
 else         if (fld.target_field_type == ValueMetaInterface.TYPE_BOOLEAN) {
          char firstchar=filterItem.value.toLowerCase().charAt(0);
          if (firstchar == '1' || firstchar == 'y' || firstchar == 't')           value=true;
 else           if (firstchar == '0' || firstchar == 'n' || firstchar == 'f')           value=false;
 else           throw new Exception("Unknown boolean " + filterItem.value);
        }
 else         if (fld.target_field_type == ValueMetaInterface.TYPE_NUMBER)         value=Double.parseDouble(filterItem.value);
 else         if (fld.target_field_type == ValueMetaInterface.TYPE_INTEGER)         value=Integer.parseInt(filterItem.value);
        filter.add(filterItem.field_name,filterItem.operator,value);
        this.logBasic("Setting filter: [" + filterItem.field_name + ","+ filterItem.operator+ ","+ value.toString()+ "]");
      }
      data.helper.getModelData(meta.getModelName(),filter,meta.getReadBatchSize(),meta.getMappings(),new RowsReadListener(){
        @Override public void rowsRead(        RowCollection rows){
          for (          Row row : rows) {
            try {
              putRow(row,rowMeta);
            }
 catch (            KettleStepException e) {
              logError("An error occurred, processing will be stopped: " + e.getMessage());
              setErrors(1);
              stopAll();
            }
            incrementLinesInput();
          }
        }
      }
);
    }
 catch (    Exception e) {
      throw new KettleException(e.getMessage());
    }
  }
  this.logBasic("Process Ended.");
  setOutputDone();
  return false;
}
