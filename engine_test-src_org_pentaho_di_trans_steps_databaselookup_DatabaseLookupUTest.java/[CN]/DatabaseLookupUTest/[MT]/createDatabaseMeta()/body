{
  MySQLDatabaseMeta mysql=new MySQLDatabaseMeta();
  mysql.setName("MySQL");
  DatabaseMeta dbMeta=new DatabaseMeta();
  dbMeta.setDatabaseInterface(mysql);
  DatabaseLookupMeta meta=new DatabaseLookupMeta();
  meta.setDatabaseMeta(dbMeta);
  meta.setTablename("VirtualTable");
  meta.setTableKeyField(new String[]{ID_FIELD});
  meta.setKeyCondition(new String[]{"="});
  meta.setReturnValueNewName(new String[]{"returned value"});
  meta.setReturnValueField(new String[]{BINARY_FIELD});
  meta.setReturnValueDefaultType(new int[]{ValueMetaInterface.TYPE_BINARY});
  meta.setStreamKeyField1(new String[0]);
  meta.setStreamKeyField2(new String[0]);
  meta.setReturnValueDefault(new String[]{""});
  meta=spy(meta);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      RowMetaInterface row=(RowMetaInterface)invocation.getArguments()[0];
      ValueMetaInterface v=new ValueMetaBinary(BINARY_FIELD);
      row.addValueMeta(v);
      return null;
    }
  }
).when(meta).getFields(any(RowMetaInterface.class),anyString(),any(RowMetaInterface[].class),any(StepMeta.class),any(VariableSpace.class),any(Repository.class),any(IMetaStore.class));
  return meta;
}
