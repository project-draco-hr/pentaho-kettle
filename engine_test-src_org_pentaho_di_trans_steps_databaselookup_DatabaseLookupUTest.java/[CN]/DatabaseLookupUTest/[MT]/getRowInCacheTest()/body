{
  StepMockHelper<DatabaseLookupMeta,DatabaseLookupData> mockHelper=new StepMockHelper<DatabaseLookupMeta,DatabaseLookupData>("Test",DatabaseLookupMeta.class,DatabaseLookupData.class);
  when(mockHelper.logChannelInterfaceFactory.create(any(),any(LoggingObjectInterface.class))).thenReturn(mockHelper.logChannelInterface);
  DatabaseLookup look=new DatabaseLookup(mockHelper.stepMeta,mockHelper.stepDataInterface,0,mockHelper.transMeta,mockHelper.trans);
  DatabaseLookupData lookData=new DatabaseLookupData();
  lookData.look=new LinkedHashMap<RowMetaAndData,TimedRow>();
  lookData.lookupMeta=new RowMeta();
  look.init(new DatabaseLookupMeta(),lookData);
  ValueMetaInterface valueMeta=new ValueMetaInteger("fieldTest");
  RowMeta lookupMeta=new RowMeta();
  lookupMeta.setValueMetaList(Collections.singletonList(valueMeta));
  Object[] kgsRow1=new Object[1];
  kgsRow1[0]=1L;
  Object[] kgsRow2=new Object[1];
  kgsRow2[0]=2L;
  Object[] add1=new Object[1];
  add1[0]=10L;
  Object[] add2=new Object[1];
  add2[0]=20L;
  look.storeRowInCache(lookupMeta,kgsRow1,add1);
  look.storeRowInCache(lookupMeta,kgsRow2,add2);
  Object[] rowToCache=new Object[1];
  rowToCache[0]=0L;
  lookData.conditions=new int[1];
  lookData.conditions[0]=DatabaseLookupMeta.CONDITION_GE;
  Object[] dataFromCache=look.getRowFromCache(lookupMeta,rowToCache);
  Assert.assertTrue(Arrays.equals(dataFromCache,add1));
}
