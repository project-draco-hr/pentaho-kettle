{
  Database db=mock(Database.class);
  when(db.getRows(anyString(),anyInt())).thenReturn(Collections.singletonList(new Object[]{1L}));
  RowMeta returnRowMeta=new RowMeta();
  returnRowMeta.addValueMeta(new ValueMetaInteger());
  when(db.getReturnRowMeta()).thenReturn(returnRowMeta);
  DatabaseMeta dbMeta=mock(DatabaseMeta.class);
  StepMockHelper<DatabaseLookupMeta,DatabaseLookupData> mockHelper=createMockHelper();
  DatabaseLookupMeta meta=new DatabaseLookupMeta();
  meta.setCached(true);
  meta.setLoadingAllDataInCache(true);
  meta.setDatabaseMeta(dbMeta);
  meta.allocate(1,0);
  meta.setStreamKeyField1(new String[]{"Test"});
  DatabaseLookupData data=new DatabaseLookupData();
  DatabaseLookup step=spyLookup(mockHelper,db,meta.getDatabaseMeta());
  doNothing().when(step).determineFieldsTypesQueryingDb();
  doReturn(null).when(step).lookupValues(any(RowMetaInterface.class),any(Object[].class));
  RowMeta input=new RowMeta();
  input.addValueMeta(new ValueMetaInteger("Test"));
  step.setInputRowMeta(input);
  step.init(meta,data);
  data.db=db;
  data.keytypes=new int[]{ValueMetaInterface.TYPE_INTEGER};
  if (allEquals) {
    data.allEquals=true;
    data.conditions=new int[]{DatabaseLookupMeta.CONDITION_EQ};
  }
 else {
    data.allEquals=false;
    data.conditions=new int[]{DatabaseLookupMeta.CONDITION_LT};
  }
  step.processRow(meta,data);
  return data;
}
