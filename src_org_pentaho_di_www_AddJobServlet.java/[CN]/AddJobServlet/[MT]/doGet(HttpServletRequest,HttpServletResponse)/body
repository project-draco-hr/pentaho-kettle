{
  if (isJettyMode() && !request.getRequestURI().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug())   logDebug("Addition of job requested");
  boolean useXML="Y".equalsIgnoreCase(request.getParameter("xml"));
  PrintWriter out=response.getWriter();
  BufferedReader in=request.getReader();
  if (log.isDetailed())   logDetailed("Encoding: " + request.getCharacterEncoding());
  if (useXML) {
    response.setContentType("text/xml");
    out.print(XMLHandler.getXMLHeader());
  }
 else {
    response.setContentType("text/html");
    out.println("<HTML>");
    out.println("<HEAD><TITLE>Add job</TITLE></HEAD>");
    out.println("<BODY>");
  }
  response.setStatus(HttpServletResponse.SC_OK);
  try {
    int c;
    StringBuffer xml=new StringBuffer();
    while ((c=in.read()) != -1) {
      xml.append((char)c);
    }
    JobConfiguration jobConfiguration=JobConfiguration.fromXML(xml.toString());
    JobMeta jobMeta=jobConfiguration.getJobMeta();
    JobExecutionConfiguration jobExecutionConfiguration=jobConfiguration.getJobExecutionConfiguration();
    jobMeta.setLogLevel(jobExecutionConfiguration.getLogLevel());
    jobMeta.setArguments(jobExecutionConfiguration.getArgumentStrings());
    jobMeta.injectVariables(jobExecutionConfiguration.getVariables());
    final Repository repository=jobConfiguration.getJobExecutionConfiguration().getRepository();
    String carteObjectId=UUID.randomUUID().toString();
    SimpleLoggingObject servletLoggingObject=new SimpleLoggingObject(CONTEXT_PATH,LoggingObjectType.CARTE,null);
    servletLoggingObject.setContainerObjectId(carteObjectId);
    servletLoggingObject.setLogLevel(jobExecutionConfiguration.getLogLevel());
    final Job job=new Job(repository,jobMeta,servletLoggingObject);
    job.initializeVariablesFrom(null);
    job.getJobMeta().setInternalKettleVariables(job);
    job.injectVariables(jobConfiguration.getJobExecutionConfiguration().getVariables());
    job.setIgnoringCheckpoints(jobExecutionConfiguration.isIgnoringCheckpoint());
    job.copyParametersFrom(jobMeta);
    job.clearParameters();
    String[] parameterNames=job.listParameters();
    for (int idx=0; idx < parameterNames.length; idx++) {
      String thisValue=jobExecutionConfiguration.getParams().get(parameterNames[idx]);
      if (!Const.isEmpty(thisValue)) {
        jobMeta.setParameterValue(parameterNames[idx],thisValue);
      }
    }
    jobMeta.activateParameters();
    job.setSocketRepository(getSocketRepository());
    getJobMap().addJob(job.getJobname(),carteObjectId,job,jobConfiguration);
    if (repository != null) {
      job.addJobListener(new JobAdapter(){
        public void jobFinished(        Job job){
          repository.disconnect();
        }
      }
);
    }
    String message="Job '" + job.getJobname() + "' was added to the list with id "+ carteObjectId;
    if (useXML) {
      out.println(new WebResult(WebResult.STRING_OK,message,carteObjectId));
    }
 else {
      out.println("<H1>" + message + "</H1>");
      out.println("<p><a href=\"" + convertContextPath(GetJobStatusServlet.CONTEXT_PATH) + "?name="+ job.getJobname()+ "&id="+ carteObjectId+ "\">Go to the job status page</a><p>");
    }
  }
 catch (  Exception ex) {
    if (useXML) {
      out.println(new WebResult(WebResult.STRING_ERROR,Const.getStackTracker(ex)));
    }
 else {
      out.println("<p>");
      out.println("<pre>");
      ex.printStackTrace(out);
      out.println("</pre>");
    }
  }
  if (!useXML) {
    out.println("<p>");
    out.println("</BODY>");
    out.println("</HTML>");
  }
}
