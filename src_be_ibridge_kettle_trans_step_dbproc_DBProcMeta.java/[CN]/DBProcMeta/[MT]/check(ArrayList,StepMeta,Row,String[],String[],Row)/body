{
  CheckResult cr;
  String error_message="";
  if (database != null) {
    Database db=new Database(database);
    try {
      db.connect();
      if (prev != null && prev.size() > 0) {
        boolean first=true;
        error_message="";
        boolean error_found=false;
        for (int i=0; i < argument.length; i++) {
          Value v=prev.searchValue(argument[i]);
          if (v == null) {
            if (first) {
              first=false;
              error_message+="Missing arguments, not found in input from previous steps:" + Const.CR;
            }
            error_found=true;
            error_message+="\t\t" + argument[i] + Const.CR;
          }
 else {
            if (v.getType() != argumentType[i] && !(v.isNumeric() && Value.isNumeric(argumentType[i]))) {
              error_found=true;
              error_message+="\t\t" + argument[i] + " (found but wrong type: "+ v.getTypeDesc()+ " vs. "+ Value.getTypeDesc(argumentType[i])+ ")"+ Const.CR;
            }
          }
        }
        if (error_found) {
          cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
        }
 else {
          cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"All arguments found in the input stream.",stepMeta);
        }
        remarks.add(cr);
      }
 else {
        error_message="Couldn't read fields from the previous step." + Const.CR;
        cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
        remarks.add(cr);
      }
    }
 catch (    KettleException e) {
      error_message="A an error occurred: " + e.getMessage();
      cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
      remarks.add(cr);
    }
  }
 else {
    error_message="Please select or create a connection!";
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,error_message,stepMeta);
    remarks.add(cr);
  }
  if (input.length > 0) {
    cr=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from other steps.",stepMeta);
    remarks.add(cr);
  }
 else {
    cr=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No input received from other steps!",stepMeta);
    remarks.add(cr);
  }
}
