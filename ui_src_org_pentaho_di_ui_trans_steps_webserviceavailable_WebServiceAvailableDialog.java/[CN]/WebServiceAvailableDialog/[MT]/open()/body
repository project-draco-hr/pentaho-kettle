{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wlURL=new Label(shell,SWT.RIGHT);
  wlURL.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.URL.Label"));
  props.setLook(wlURL);
  fdlURL=new FormData();
  fdlURL.left=new FormAttachment(0,0);
  fdlURL.right=new FormAttachment(middle,-margin);
  fdlURL.top=new FormAttachment(wStepname,margin);
  wlURL.setLayoutData(fdlURL);
  wURL=new CCombo(shell,SWT.BORDER | SWT.READ_ONLY);
  wURL.setEditable(true);
  props.setLook(wURL);
  wURL.addModifyListener(lsMod);
  fdURL=new FormData();
  fdURL.left=new FormAttachment(middle,0);
  fdURL.top=new FormAttachment(wStepname,margin);
  fdURL.right=new FormAttachment(100,-margin);
  wURL.setLayoutData(fdURL);
  wURL.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      get();
    }
  }
);
  wlConnectTimeOut=new Label(shell,SWT.RIGHT);
  wlConnectTimeOut.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ConnectTimeOut.Label"));
  props.setLook(wlConnectTimeOut);
  fdlConnectTimeOut=new FormData();
  fdlConnectTimeOut.left=new FormAttachment(0,0);
  fdlConnectTimeOut.top=new FormAttachment(wURL,margin);
  fdlConnectTimeOut.right=new FormAttachment(middle,-margin);
  wlConnectTimeOut.setLayoutData(fdlConnectTimeOut);
  wConnectTimeOut=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wConnectTimeOut.setToolTipText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ConnectTimeOut.Tooltip"));
  props.setLook(wConnectTimeOut);
  wConnectTimeOut.addModifyListener(lsMod);
  fdConnectTimeOut=new FormData();
  fdConnectTimeOut.left=new FormAttachment(middle,0);
  fdConnectTimeOut.top=new FormAttachment(wURL,margin);
  fdConnectTimeOut.right=new FormAttachment(100,-margin);
  wConnectTimeOut.setLayoutData(fdConnectTimeOut);
  wConnectTimeOut.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wConnectTimeOut.setToolTipText(transMeta.environmentSubstitute(wConnectTimeOut.getText()));
    }
  }
);
  wlReadTimeOut=new Label(shell,SWT.RIGHT);
  wlReadTimeOut.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ReadTimeOut.Label"));
  props.setLook(wlReadTimeOut);
  fdlReadTimeOut=new FormData();
  fdlReadTimeOut.left=new FormAttachment(0,0);
  fdlReadTimeOut.top=new FormAttachment(wConnectTimeOut,margin);
  fdlReadTimeOut.right=new FormAttachment(middle,-margin);
  wlReadTimeOut.setLayoutData(fdlReadTimeOut);
  wReadTimeOut=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wReadTimeOut.setToolTipText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ReadTimeOut.Tooltip"));
  props.setLook(wReadTimeOut);
  wReadTimeOut.addModifyListener(lsMod);
  fdReadTimeOut=new FormData();
  fdReadTimeOut.left=new FormAttachment(middle,0);
  fdReadTimeOut.top=new FormAttachment(wConnectTimeOut,margin);
  fdReadTimeOut.right=new FormAttachment(100,-margin);
  wReadTimeOut.setLayoutData(fdReadTimeOut);
  wReadTimeOut.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wReadTimeOut.setToolTipText(transMeta.environmentSubstitute(wReadTimeOut.getText()));
    }
  }
);
  wlResult=new Label(shell,SWT.RIGHT);
  wlResult.setText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ResultField.Label"));
  props.setLook(wlResult);
  fdlResult=new FormData();
  fdlResult.left=new FormAttachment(0,0);
  fdlResult.right=new FormAttachment(middle,-margin);
  fdlResult.top=new FormAttachment(wReadTimeOut,margin * 2);
  wlResult.setLayoutData(fdlResult);
  wResult=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wResult.setToolTipText(BaseMessages.getString(PKG,"WebServiceAvailableDialog.ResultField.Tooltip"));
  props.setLook(wResult);
  wResult.addModifyListener(lsMod);
  fdResult=new FormData();
  fdResult.left=new FormAttachment(middle,0);
  fdResult.top=new FormAttachment(wReadTimeOut,margin * 2);
  fdResult.right=new FormAttachment(100,0);
  wResult.setLayoutData(fdResult);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wCancel},margin,wResult);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  setSize();
  getData();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return stepname;
}
