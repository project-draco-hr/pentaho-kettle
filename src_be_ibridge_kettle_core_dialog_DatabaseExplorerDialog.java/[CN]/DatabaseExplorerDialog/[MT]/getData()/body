{
  GetDatabaseInfoProgressDialog gdipd=new GetDatabaseInfoProgressDialog(shell,dbMeta);
  DatabaseMetaInformation dmi=gdipd.open();
  if (dmi != null) {
    if (tiTree != null && !tiTree.isDisposed())     tiTree.dispose();
    tiTree=new TreeItem(wTree,SWT.NONE);
    tiTree.setText(dbMeta == null ? "" : dbMeta.getName());
    Catalog[] catalogs=dmi.getCatalogs();
    if (catalogs != null) {
      TreeItem tiCat=new TreeItem(tiTree,SWT.NONE);
      tiCat.setText(STRING_CATALOG);
      for (int i=0; i < catalogs.length; i++) {
        TreeItem newCat=new TreeItem(tiCat,SWT.NONE);
        newCat.setText(catalogs[i].getCatalogName());
        for (int j=0; j < catalogs[i].getItems().length; j++) {
          String tableName=catalogs[i].getItems()[j];
          TreeItem ti=new TreeItem(newCat,SWT.NONE);
          ti.setText(tableName);
        }
      }
    }
    Schema[] schemas=dmi.getSchemas();
    if (schemas != null) {
      TreeItem tiSch=new TreeItem(tiTree,SWT.NONE);
      tiSch.setText(STRING_SCHEMAS);
      for (int i=0; i < schemas.length; i++) {
        TreeItem newSch=new TreeItem(tiSch,SWT.NONE);
        newSch.setText(schemas[i].getSchemaName());
        for (int j=0; j < schemas[i].getItems().length; j++) {
          String tableName=schemas[i].getItems()[j];
          TreeItem ti=new TreeItem(newSch,SWT.NONE);
          ti.setText(tableName);
        }
      }
    }
    TreeItem tiTab=null;
    String tabnames[]=dmi.getTables();
    if (tabnames != null) {
      tiTab=new TreeItem(tiTree,SWT.NONE);
      tiTab.setText(STRING_TABLES);
      tiTab.setExpanded(true);
      for (int i=0; i < tabnames.length; i++) {
        TreeItem newTab=new TreeItem(tiTab,SWT.NONE);
        newTab.setText(tabnames[i]);
      }
    }
    TreeItem tiView=null;
    String views[]=dmi.getViews();
    if (views != null) {
      tiView=new TreeItem(tiTree,SWT.NONE);
      tiView.setText(STRING_VIEWS);
      for (int i=0; i < views.length; i++) {
        TreeItem newView=new TreeItem(tiView,SWT.NONE);
        newView.setText(views[i]);
      }
    }
    TreeItem tiSyn=null;
    String[] syn=dmi.getSynonyms();
    if (syn != null) {
      tiSyn=new TreeItem(tiTree,SWT.NONE);
      tiSyn.setText(STRING_SYNONYMS);
      for (int i=0; i < syn.length; i++) {
        TreeItem newSyn=new TreeItem(tiSyn,SWT.NONE);
        newSyn.setText(syn[i]);
      }
    }
    if (selectTable != null && selectTable.length() > 0) {
      TreeItem ti=null;
      if (ti == null && tiTab != null)       Const.findTreeItem(tiTab,selectTable);
      if (ti == null && tiView != null)       Const.findTreeItem(tiView,selectTable);
      if (ti == null && tiTree != null)       Const.findTreeItem(tiTree,selectTable);
      if (ti == null && tiSyn != null)       Const.findTreeItem(tiSyn,selectTable);
      if (ti != null) {
        wTree.setSelection(new TreeItem[]{ti});
        wTree.showSelection();
      }
      selectTable=null;
    }
    tiTree.setExpanded(true);
  }
 else {
    return false;
  }
  return true;
}
