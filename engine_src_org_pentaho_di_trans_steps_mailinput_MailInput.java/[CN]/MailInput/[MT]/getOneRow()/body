{
  while (isFolderExausted()) {
    if (!openNextFolder())     return null;
  }
  Object[] r=buildEmptyRow();
  if (meta.isDynamicFolder())   System.arraycopy(data.readrow,0,r,0,data.readrow.length);
  try {
    Message message=data.folderIterator.next();
    if (isDebug())     logDebug(BaseMessages.getString(PKG,"MailInput.Log.FetchingMessage",message.getMessageNumber()));
    for (int i=0; i < data.nrFields; i++) {
      int index=data.totalpreviousfields + i;
      try {
switch (meta.getInputFields()[i].getColumn()) {
case MailInputField.COLUMN_MESSAGE_NR:
          r[index]=new Long(message.getMessageNumber());
        break;
case MailInputField.COLUMN_SUBJECT:
      r[index]=message.getSubject();
    break;
case MailInputField.COLUMN_SENDER:
  r[index]=StringUtils.join(message.getFrom(),";");
break;
case MailInputField.COLUMN_REPLY_TO:
r[index]=StringUtils.join(message.getReplyTo(),";");
break;
case MailInputField.COLUMN_RECIPIENTS:
r[index]=StringUtils.join(message.getAllRecipients(),";");
break;
case MailInputField.COLUMN_DESCRIPTION:
r[index]=message.getDescription();
break;
case MailInputField.COLUMN_BODY:
r[index]=data.mailConn.getMessageBody(message);
break;
case MailInputField.COLUMN_RECEIVED_DATE:
Date receivedDate=message.getReceivedDate();
r[index]=receivedDate != null ? new Date(receivedDate.getTime()) : null;
break;
case MailInputField.COLUMN_SENT_DATE:
Date sentDate=message.getSentDate();
r[index]=sentDate != null ? new Date(sentDate.getTime()) : null;
break;
case MailInputField.COLUMN_CONTENT_TYPE:
r[index]=message.getContentType();
break;
case MailInputField.COLUMN_FOLDER_NAME:
r[index]=data.mailConn.getFolderName();
break;
case MailInputField.COLUMN_SIZE:
r[index]=new Long(message.getSize());
break;
case MailInputField.COLUMN_FLAG_DRAFT:
r[index]=new Boolean(data.mailConn.isMessageDraft(message));
break;
case MailInputField.COLUMN_FLAG_FLAGGED:
r[index]=new Boolean(data.mailConn.isMessageFlagged(message));
break;
case MailInputField.COLUMN_FLAG_NEW:
r[index]=new Boolean(data.mailConn.isMessageNew(message));
break;
case MailInputField.COLUMN_FLAG_READ:
r[index]=new Boolean(data.mailConn.isMessageRead(message));
break;
case MailInputField.COLUMN_FLAG_DELETED:
r[index]=new Boolean(data.mailConn.isMessageDeleted(message));
break;
case MailInputField.COLUMN_ATTACHED_FILES_COUNT:
r[index]=new Long(data.mailConn.getAttachedFilesCount(message,null));
break;
case MailInputField.COLUMN_HEADER:
String name=meta.getInputFields()[i].getName();
String[] headerValues=message.getHeader(name);
r[index]=StringUtils.join(headerValues,";");
break;
case MailInputField.COLUMN_BODY_CONTENT_TYPE:
r[index]=data.mailConn.getMessageBodyContentType(message);
break;
default :
break;
}
}
 catch (Exception e) {
String errMsg="Error adding value for field " + meta.getInputFields()[i].getName();
if (meta.isStopOnError()) {
throw new KettleException(errMsg,e);
}
 else {
logError(errMsg,e);
}
}
}
incrementLinesInput();
data.rownr++;
}
 catch (Exception e) {
throw new KettleException("Error adding values to row!",e);
}
return r;
}
