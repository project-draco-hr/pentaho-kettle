{
  String realSearchSender=environmentSubstitute(meta.getSenderSearchTerm());
  if (!Utils.isEmpty(realSearchSender)) {
    data.mailConn.setSenderTerm(realSearchSender,meta.isNotTermSenderSearch());
  }
  String realSearchReceipient=environmentSubstitute(meta.getRecipientSearch());
  if (!Utils.isEmpty(realSearchReceipient)) {
    data.mailConn.setReceipientTerm(realSearchReceipient);
  }
  String realSearchSubject=environmentSubstitute(meta.getSubjectSearch());
  if (!Utils.isEmpty(realSearchSubject)) {
    data.mailConn.setSubjectTerm(realSearchSubject,meta.isNotTermSubjectSearch());
  }
switch (meta.getConditionOnReceivedDate()) {
case MailConnectionMeta.CONDITION_DATE_EQUAL:
    data.mailConn.setReceivedDateTermEQ(beginDate);
  break;
case MailConnectionMeta.CONDITION_DATE_GREATER:
data.mailConn.setReceivedDateTermGT(beginDate);
break;
case MailConnectionMeta.CONDITION_DATE_SMALLER:
data.mailConn.setReceivedDateTermLT(beginDate);
break;
case MailConnectionMeta.CONDITION_DATE_BETWEEN:
data.mailConn.setReceivedDateTermBetween(beginDate,endDate);
break;
default :
break;
}
if (!data.usePOP) {
switch (meta.getValueImapList()) {
case MailConnectionMeta.VALUE_IMAP_LIST_NEW:
data.mailConn.setFlagTermNew();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_OLD:
data.mailConn.setFlagTermOld();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_READ:
data.mailConn.setFlagTermRead();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_UNREAD:
data.mailConn.setFlagTermUnread();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_FLAGGED:
data.mailConn.setFlagTermFlagged();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_NOT_FLAGGED:
data.mailConn.setFlagTermNotFlagged();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_DRAFT:
data.mailConn.setFlagTermDraft();
break;
case MailConnectionMeta.VALUE_IMAP_LIST_NOT_DRAFT:
data.mailConn.setFlagTermNotDraft();
break;
default :
break;
}
}
}
