{
  try {
    if (!meta.isDynamicFolder()) {
      if (data.folderenr >= data.folders.length) {
        if (isDetailed()) {
          logDetailed(BaseMessages.getString(PKG,"MailInput.Log.FinishedProcessing"));
        }
        return false;
      }
    }
 else {
      if (first) {
        first=false;
        data.readrow=getRow();
        if (data.readrow == null) {
          if (isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"MailInput.Log.FinishedProcessing"));
          }
          return false;
        }
        data.inputRowMeta=getInputRowMeta();
        data.outputRowMeta=data.inputRowMeta.clone();
        meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
        data.totalpreviousfields=data.inputRowMeta.size();
        if (Utils.isEmpty(meta.getFolderField())) {
          logError(BaseMessages.getString(PKG,"MailInput.Error.DynamicFolderFieldMissing"));
          stopAll();
          setErrors(1);
          return false;
        }
        data.indexOfFolderField=data.inputRowMeta.indexOfValue(meta.getFolderField());
        if (data.indexOfFolderField < 0) {
          logError(BaseMessages.getString(PKG,"MailInput.Error.DynamicFolderUnreachable",meta.getFolderField()));
          stopAll();
          setErrors(1);
          return false;
        }
        String foldername=data.inputRowMeta.getString(data.readrow,data.indexOfFolderField);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"MailInput.Log.FoldernameInStream",meta.getFolderField(),foldername));
        }
        data.folders=getFolders(foldername);
      }
      if (data.folderenr >= data.folders.length) {
        data.readrow=getRow();
        if (data.readrow == null) {
          if (isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"MailInput.Log.FinishedProcessing"));
          }
          return false;
        }
        String foldername=data.inputRowMeta.getString(data.readrow,data.indexOfFolderField);
        data.folders=getFolders(foldername);
      }
    }
    data.start=parseIntWithSubstitute(meta.getStart());
    data.end=parseIntWithSubstitute(meta.getEnd());
    data.folder=data.folders[data.folderenr];
    data.folderenr++;
    if (!data.usePOP && !Utils.isEmpty(data.folder)) {
      data.mailConn.openFolder(data.folder,false);
    }
 else {
      data.mailConn.openFolder(false);
    }
    if (meta.useBatch() || (!Utils.isEmpty(environmentSubstitute(meta.getFirstMails())) && Integer.parseInt(environmentSubstitute(meta.getFirstMails())) > 0)) {
      Integer batchSize=meta.useBatch() ? meta.getBatchSize() : Integer.parseInt(environmentSubstitute(meta.getFirstMails()));
      Integer start=meta.useBatch() ? data.start : 1;
      Integer end=meta.useBatch() ? data.end : batchSize;
      data.folderIterator=new BatchFolderIterator(data.mailConn.getFolder(),batchSize,start,end);
      if (data.mailConn.getSearchTerm() != null) {
        data.folderIterator=new SearchEnabledFolderIterator(data.folderIterator,data.mailConn.getSearchTerm());
      }
    }
 else {
      data.mailConn.retrieveMessages();
      data.folderIterator=new ArrayIterator(data.mailConn.getMessages());
    }
    if (isDebug()) {
      logDebug(BaseMessages.getString(PKG,"MailInput.Log.MessagesInFolder",data.folder,data.messagesCount));
    }
  }
 catch (  Exception e) {
    logError("Error opening folder " + data.folderenr + " "+ data.folder+ ": "+ e.toString());
    logError(Const.getStackTracker(e));
    stopAll();
    setErrors(1);
    return false;
  }
  return true;
}
