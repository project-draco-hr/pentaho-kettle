{
  try {
    setID(id_jobentry_copy);
    Row r=rep.getJobEntryCopy(id_jobentry_copy);
    if (r != null) {
      long id_jobentry=r.searchValue("ID_JOBENTRY").getInteger();
      long id_jobentry_type=r.searchValue("ID_JOBENTRY_TYPE").getInteger();
      setNr((int)r.searchValue("NR").getInteger());
      int locx=(int)r.searchValue("GUI_LOCATION_X").getInteger();
      int locy=(int)r.searchValue("GUI_LOCATION_Y").getInteger();
      boolean isdrawn=r.searchValue("GUI_DRAW").getBoolean();
      boolean isparallel=r.searchValue("PARALLEL").getBoolean();
      entry=Const.findJobEntry(jobentries,id_jobentry);
      if (entry == null) {
        Row rt=rep.getJobEntryType(id_jobentry_type);
        if (rt != null) {
          String jet_code=rt.searchValue("CODE").getString();
          int jet_type=JobEntryBase.getType(jet_code);
          entry=JobEntryBase.newJobEntryInterface(jet_type);
          entry.loadRep(rep,id_jobentry,databases);
          jobentries.add(entry);
        }
 else {
          throw new KettleException("Unable to find Job Entry Type with id=" + id_jobentry_type + " in the repository");
        }
      }
      setLocation(locx,locy);
      setDrawn(isdrawn);
      setParallel(isparallel);
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to load job entry copy from repository with id_jobentry_copy=" + id_jobentry_copy,dbe);
  }
}
