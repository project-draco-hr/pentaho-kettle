{
  currentDate=new Date();
  logDate=new Date();
  startDate=Const.MIN_DATE;
  endDate=currentDate;
  resetErrors();
  DatabaseMeta logcon=jobMeta.getLogConnection();
  if (logcon != null && !Const.isEmpty(jobMeta.getLogTable())) {
    Database ldb=new Database(this,logcon);
    ldb.shareVariablesWith(this);
    try {
      boolean lockedTable=false;
      ldb.connect();
      ldb.setCommit(100);
      Long id_batch=new Long(1);
      if (jobMeta.isBatchIdUsed()) {
        ldb.lockTables(new String[]{jobMeta.getLogTable()});
        lockedTable=true;
        String sql="INSERT INTO " + logcon.quoteField(jobMeta.getLogTable()) + "("+ logcon.quoteField("ID_JOB")+ ") values (-1)";
        ldb.execStatement(sql);
        id_batch=ldb.getNextValue(null,jobMeta.getLogTable(),"ID_JOB");
        setBatchId(id_batch.longValue());
        if (getPassedBatchId() <= 0) {
          setPassedBatchId(id_batch.longValue());
        }
      }
      Object[] lastr=ldb.getLastLogDate(jobMeta.getLogTable(),jobMeta.getName(),true,LogStatus.END);
      if (!Const.isEmpty(lastr)) {
        Date last;
        try {
          last=ldb.getReturnRowMeta().getDate(lastr,0);
        }
 catch (        KettleValueException e) {
          throw new KettleJobException(BaseMessages.getString(PKG,"Job.Log.ConversionError","" + jobMeta.getLogTable()),e);
        }
        if (last != null) {
          startDate=last;
        }
      }
      depDate=currentDate;
      ldb.writeLogRecord(jobMeta.getLogTable(),jobMeta.isBatchIdUsed(),getBatchId(),true,jobMeta.getName(),LogStatus.START,0L,0L,0L,0L,0L,0L,startDate,endDate,logDate,depDate,currentDate,null);
      if (lockedTable) {
        String sql="DELETE FROM " + logcon.quoteField(jobMeta.getLogTable()) + " WHERE "+ logcon.quoteField("ID_JOB")+ "= -1";
        ldb.execStatement(sql);
        ldb.unlockTables(new String[]{jobMeta.getLogTable()});
      }
      ldb.disconnect();
    }
 catch (    KettleDatabaseException dbe) {
      addErrors(1);
      throw new KettleJobException(BaseMessages.getString(PKG,"Job.Log.UnableToProcessLoggingStart","" + jobMeta.getLogTable()),dbe);
    }
 finally {
      ldb.disconnect();
    }
  }
  return true;
}
