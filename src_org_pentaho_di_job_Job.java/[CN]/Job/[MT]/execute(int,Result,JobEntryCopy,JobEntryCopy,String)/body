{
  Result res=null;
  if (stopped.get()) {
    res=new Result(nr);
    res.stopped=true;
    return res;
  }
  if (log.isDetailed())   log.logDetailed("exec(" + nr + ", "+ (prev_result != null ? prev_result.getNrErrors() : 0)+ ", "+ (jobEntryCopy != null ? jobEntryCopy.toString() : "null")+ ")");
  JobEntryInterface jobEntryInterface=jobEntryCopy.getEntry();
  JobEntryResult jerBefore=new JobEntryResult(null,BaseMessages.getString(PKG,"Job.Comment.JobStarted"),reason,jobEntryCopy.getName(),jobEntryCopy.getNr(),environmentSubstitute(jobEntryCopy.getEntry().getFilename()));
  jobTracker.addJobTracker(new JobTracker(jobMeta,jerBefore));
  Result prevResult=null;
  if (prev_result != null) {
    prevResult=(Result)prev_result.clone();
  }
 else {
    prevResult=new Result();
  }
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(jobEntryInterface.getClass().getClassLoader());
  JobEntryInterface cloneJei=(JobEntryInterface)jobEntryInterface.clone();
  ((VariableSpace)cloneJei).copyVariablesFrom(this);
  cloneJei.setRepository(rep);
  cloneJei.setParentJob(this);
  final long start=System.currentTimeMillis();
  cloneJei.getLogChannel().logDetailed("Starting job entry");
  for (  JobEntryListener jobEntryListener : jobEntryListeners) {
    jobEntryListener.beforeExecution(this,jobEntryCopy,cloneJei);
  }
  if (interactive) {
    if (jobEntryCopy.isTransformation()) {
      getActiveJobEntryTransformations().put(jobEntryCopy,(JobEntryTrans)cloneJei);
    }
    if (jobEntryCopy.isJob()) {
      getActiveJobEntryJobs().put(jobEntryCopy,(JobEntryJob)cloneJei);
    }
  }
  final Result result=cloneJei.execute(prevResult,nr);
  final long end=System.currentTimeMillis();
  if (interactive) {
    if (jobEntryCopy.isTransformation()) {
      getActiveJobEntryTransformations().remove(jobEntryCopy);
    }
    if (jobEntryCopy.isJob()) {
      getActiveJobEntryJobs().remove(jobEntryCopy);
    }
  }
  if (cloneJei instanceof JobEntryTrans) {
    String throughput=result.getReadWriteThroughput((int)((end - start) / 1000));
    if (throughput != null) {
      log.logMinimal(cloneJei.getName(),throughput);
    }
  }
  for (  JobEntryListener jobEntryListener : jobEntryListeners) {
    jobEntryListener.afterExecution(this,jobEntryCopy,cloneJei,result);
  }
  Thread.currentThread().setContextClassLoader(cl);
  addErrors((int)result.getNrErrors());
  Log4jBufferAppender appender=CentralLogStore.getAppender();
  StringBuffer logTextBuffer=appender.getBuffer(cloneJei.getLogChannel().getLogChannelId(),true);
  result.setLogText(logTextBuffer.toString());
  JobEntryResult jerAfter=new JobEntryResult(result,BaseMessages.getString(PKG,"Job.Comment.JobFinished"),null,jobEntryCopy.getName(),jobEntryCopy.getNr(),environmentSubstitute(jobEntryCopy.getEntry().getFilename()));
  jobTracker.addJobTracker(new JobTracker(jobMeta,jerAfter));
  jobEntryResults.add(jerAfter);
  final List<Thread> threads=new ArrayList<Thread>();
  final List<Result> threadResults=new ArrayList<Result>();
  final List<KettleException> threadExceptions=new ArrayList<KettleException>();
  final List<JobEntryCopy> threadEntries=new ArrayList<JobEntryCopy>();
  int nrNext=jobMeta.findNrNextJobEntries(jobEntryCopy);
  for (int i=0; i < nrNext && !isStopped(); i++) {
    final JobEntryCopy nextEntry=jobMeta.findNextJobEntry(jobEntryCopy,i);
    final JobHopMeta hi=jobMeta.findJobHop(jobEntryCopy,nextEntry);
    final String nextComment;
    if (hi.isUnconditional()) {
      nextComment=BaseMessages.getString(PKG,"Job.Comment.FollowedUnconditional");
    }
 else {
      if (result.getResult()) {
        nextComment=BaseMessages.getString(PKG,"Job.Comment.FollowedSuccess");
      }
 else {
        nextComment=BaseMessages.getString(PKG,"Job.Comment.FollowedFailure");
      }
    }
    if (hi.isUnconditional() || (jobEntryCopy.evaluates() && (!(hi.getEvaluation() ^ result.getResult())))) {
      if (log.isBasic())       log.logBasic(jobMeta.toString(),BaseMessages.getString(PKG,"Job.Log.StartingEntry",nextEntry.getName()));
      if (nextEntry.resetErrorsBeforeExecution()) {
        result.setNrErrors(0);
      }
      if (jobEntryCopy.isLaunchingInParallel()) {
        threadEntries.add(nextEntry);
        Runnable runnable=new Runnable(){
          public void run(){
            try {
              Result threadResult=execute(nr + 1,result,nextEntry,jobEntryCopy,nextComment);
              threadResults.add(threadResult);
            }
 catch (            Throwable e) {
              log.logError(Const.getStackTracker(e));
              threadExceptions.add(new KettleException(BaseMessages.getString(PKG,"Job.Log.UnexpectedError",nextEntry.toString()),e));
              Result threadResult=new Result();
              threadResult.setResult(false);
              threadResult.setNrErrors(1L);
              threadResults.add(threadResult);
            }
          }
        }
;
        Thread thread=new Thread(runnable);
        threads.add(thread);
        thread.start();
        if (log.isBasic())         log.logBasic(BaseMessages.getString(PKG,"Job.Log.LaunchedJobEntryInParallel",nextEntry.getName()));
      }
 else {
        try {
          res=execute(nr + 1,result,nextEntry,jobEntryCopy,nextComment);
        }
 catch (        Throwable e) {
          log.logError(Const.getStackTracker(e));
          throw new KettleException(BaseMessages.getString(PKG,"Job.Log.UnexpectedError",nextEntry.toString()),e);
        }
        if (log.isBasic())         log.logBasic(BaseMessages.getString(PKG,"Job.Log.FinishedJobEntry",nextEntry.getName(),res.getResult() + ""));
      }
    }
  }
  if (jobEntryCopy.isLaunchingInParallel()) {
    for (int i=0; i < threads.size(); i++) {
      Thread thread=threads.get(i);
      JobEntryCopy nextEntry=threadEntries.get(i);
      try {
        thread.join();
      }
 catch (      InterruptedException e) {
        log.logError(jobMeta.toString(),BaseMessages.getString(PKG,"Job.Log.UnexpectedErrorWhileWaitingForJobEntry",nextEntry.getName()));
        threadExceptions.add(new KettleException(BaseMessages.getString(PKG,"Job.Log.UnexpectedErrorWhileWaitingForJobEntry",nextEntry.getName()),e));
      }
    }
  }
  if (res == null) {
    res=prevResult;
  }
  if (threadExceptions.size() > 0) {
    res.setResult(false);
    res.setNrErrors(threadExceptions.size());
    for (    KettleException e : threadExceptions) {
      log.logError(jobMeta.toString(),e.getMessage(),e);
    }
    throw threadExceptions.get(0);
  }
  for (  Result threadResult : threadResults) {
    res.add(threadResult);
  }
  if (res.getNrErrors() > 0) {
    res.setResult(false);
  }
  return res;
}
