{
  int nrkeys=wKey.nrNonEmpty();
  in.allocate(nrkeys);
  log.logDebug(toString(),Messages.getString("CombinationLookupDialog.Log.SomeKeysFound",String.valueOf(nrkeys)));
  for (int i=0; i < nrkeys; i++) {
    TableItem item=wKey.getNonEmpty(i);
    in.getKeyLookup()[i]=item.getText(1);
    in.getKeyField()[i]=item.getText(2);
  }
  in.setUseAutoinc(wAutoinc.getSelection() && wAutoinc.isEnabled());
  in.setReplaceFields(wReplace.getSelection());
  in.setUseHash(wHashcode.getSelection());
  in.setHashField(wHashfield.getText());
  in.setSchemaName(wSchema.getText());
  in.setTablename(wTable.getText());
  in.setTechnicalKeyField(wTk.getText());
  if (wAutoinc.getSelection() == true) {
    in.setTechKeyCreation(CombinationLookupMeta.CREATION_METHOD_AUTOINC);
    in.setUseAutoinc(true);
    in.setSequenceFrom(null);
  }
 else   if (wSeqButton.getSelection() == true) {
    in.setTechKeyCreation(CombinationLookupMeta.CREATION_METHOD_SEQUENCE);
    in.setUseAutoinc(false);
    in.setSequenceFrom(wSeq.getText());
  }
 else {
    in.setTechKeyCreation(CombinationLookupMeta.CREATION_METHOD_TABLEMAX);
    in.setUseAutoinc(false);
    in.setSequenceFrom(null);
  }
  in.setDatabaseMeta(transMeta.findDatabase(wConnection.getText()));
  in.setCommitSize(Const.toInt(wCommit.getText(),0));
  in.setCacheSize(Const.toInt(wCachesize.getText(),0));
}
