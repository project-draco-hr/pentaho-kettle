{
  meta=(MailValidatorMeta)smi;
  data=(MailValidatorData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.previousRowMeta=getInputRowMeta().clone();
    data.NrPrevFields=data.previousRowMeta.size();
    data.outputRowMeta=data.previousRowMeta;
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    data.realResultFieldName=environmentSubstitute(meta.getResultFieldName());
    if (Const.isEmpty(data.realResultFieldName))     throw new KettleException(Messages.getString("MailValidator.Error.ResultFieldNameMissing"));
    if (meta.isResultAsString()) {
      if (Const.isEmpty(meta.getEMailValideMsg()))       throw new KettleException(Messages.getString("MailValidator.Error.EMailValidMsgMissing"));
      if (Const.isEmpty(meta.getEMailNotValideMsg()))       throw new KettleException(Messages.getString("MailValidator.Error.EMailNotValidMsgMissing"));
      data.msgValidMail=environmentSubstitute(meta.getEMailValideMsg());
      data.msgNotValidMail=environmentSubstitute(meta.getEMailNotValideMsg());
    }
    if (Const.isEmpty(meta.getEmailField()))     throw new KettleException(Messages.getString("MailValidator.Error.FilenameFieldMissing"));
    data.realResultErrorsFieldName=environmentSubstitute(meta.getErrorsField());
    if (data.indexOfeMailField < 0) {
      data.indexOfeMailField=data.previousRowMeta.indexOfValue(meta.getEmailField());
      if (data.indexOfeMailField < 0) {
        throw new KettleException(Messages.getString("MailValidator.Exception.CouldnotFindField",meta.getEmailField()));
      }
    }
    if (meta.isSMTPCheck()) {
      if (meta.isdynamicDefaultSMTP()) {
        if (Const.isEmpty(meta.getDefaultSMTP()))         throw new KettleException(Messages.getString("MailValidator.Error.DefaultSMTPFieldMissing"));
        if (data.indexOfdefaultSMTPField < 0) {
          data.indexOfdefaultSMTPField=data.previousRowMeta.indexOfValue(meta.getDefaultSMTP());
          if (data.indexOfdefaultSMTPField < 0) {
            throw new KettleException(Messages.getString("MailValidator.Exception.CouldnotFindField",meta.getDefaultSMTP()));
          }
        }
      }
      data.timeout=Const.toInt(environmentSubstitute(meta.getTimeOut()),0);
      data.realemailSender=environmentSubstitute(meta.geteMailSender());
      data.realdefaultSMTPServer=environmentSubstitute(meta.getDefaultSMTP());
    }
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  boolean mailvalid=false;
  String mailerror=null;
  Object[] outputRow=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  for (int i=0; i < data.NrPrevFields; i++) {
    outputRow[i]=r[i];
  }
  try {
    String emailaddress=data.previousRowMeta.getString(r,data.indexOfeMailField);
    if (!Const.isEmpty(emailaddress)) {
      if (meta.isdynamicDefaultSMTP())       data.realdefaultSMTPServer=data.previousRowMeta.getString(r,data.indexOfdefaultSMTPField);
      MailValidation emailValidator=new MailValidation();
      MailValidationResult result=new MailValidationResult();
      result=emailValidator.isAddressValid(emailaddress,data.realemailSender,data.realdefaultSMTPServer,data.timeout,meta.isSMTPCheck(),getTrans().getRunThread(getStepname(),getCopy()));
      mailvalid=result.isValide();
      mailerror=result.getErrorMessage();
    }
 else     mailerror="eMail is empty!";
    if (meta.isResultAsString()) {
      if (mailvalid)       outputRow[data.NrPrevFields++]=data.msgValidMail;
 else       outputRow[data.NrPrevFields++]=data.msgNotValidMail;
    }
 else {
      outputRow[data.NrPrevFields++]=mailvalid;
    }
    if (!Const.isEmpty(data.realResultErrorsFieldName))     outputRow[data.NrPrevFields++]=mailerror;
    putRow(data.outputRowMeta,outputRow);
    if (log.isRowLevel())     log.logRowlevel(toString(),Messages.getString("MailValidator.LineNumber",getLinesRead() + " : " + getInputRowMeta().getString(r)));
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(Messages.getString("MailValidator.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,meta.getResultFieldName(),"MailValidator001");
    }
  }
  return true;
}
