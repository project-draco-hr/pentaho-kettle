{
  meta=(RestMeta)smi;
  data=(RestData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.inputRowMeta=getInputRowMeta();
    data.outputRowMeta=data.inputRowMeta.clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (meta.isUrlInField()) {
      if (Const.isEmpty(meta.getUrlField())) {
        logError(BaseMessages.getString(PKG,"Rest.Log.NoField"));
        throw new KettleException(BaseMessages.getString(PKG,"Rest.Log.NoField"));
      }
      if (data.indexOfUrlField < 0) {
        String realUrlfieldName=environmentSubstitute(meta.getUrlField());
        data.indexOfUrlField=data.inputRowMeta.indexOfValue(realUrlfieldName);
        if (data.indexOfUrlField < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",realUrlfieldName));
        }
      }
    }
 else {
      data.realUrl=environmentSubstitute(meta.getUrl());
    }
    if (meta.isDynamicMethod()) {
      String field=environmentSubstitute(meta.getMethodFieldName());
      if (Const.isEmpty(field)) {
        throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.MethodFieldMissing"));
      }
      data.indexOfMethod=data.inputRowMeta.indexOfValue(field);
      if (data.indexOfMethod < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",field));
      }
    }
    int nrargs=meta.getHeaderName() == null ? 0 : meta.getHeaderName().length;
    if (nrargs > 0) {
      data.nrheader=nrargs;
      data.indexOfHeaderFields=new int[nrargs];
      data.headerNames=new String[nrargs];
      for (int i=0; i < nrargs; i++) {
        data.headerNames[i]=environmentSubstitute(meta.getHeaderName()[i]);
        String field=environmentSubstitute(meta.getHeaderField()[i]);
        if (Const.isEmpty(field)) {
          throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.HeaderFieldEmpty"));
        }
        data.indexOfHeaderFields[i]=data.inputRowMeta.indexOfValue(field);
        if (data.indexOfHeaderFields[i] < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",field));
        }
      }
      data.useHeaders=true;
    }
    if (RestMeta.isActiveParameters(meta.getMethod())) {
      int nrparams=meta.getParameterField() == null ? 0 : meta.getParameterField().length;
      if (nrparams > 0) {
        data.nrParams=nrparams;
        data.paramNames=new String[nrparams];
        data.indexOfParamFields=new int[nrparams];
        for (int i=0; i < nrparams; i++) {
          data.paramNames[i]=environmentSubstitute(meta.getParameterName()[i]);
          String field=environmentSubstitute(meta.getParameterField()[i]);
          if (Const.isEmpty(field)) {
            throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ParamFieldEmpty"));
          }
          data.indexOfParamFields[i]=data.inputRowMeta.indexOfValue(field);
          if (data.indexOfParamFields[i] < 0) {
            throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",field));
          }
        }
        data.useParams=true;
      }
      int nrmatrixparams=meta.getMatrixParameterField() == null ? 0 : meta.getMatrixParameterField().length;
      if (nrmatrixparams > 0) {
        data.nrMatrixParams=nrmatrixparams;
        data.matrixParamNames=new String[nrmatrixparams];
        data.indexOfMatrixParamFields=new int[nrmatrixparams];
        for (int i=0; i < nrmatrixparams; i++) {
          data.matrixParamNames[i]=environmentSubstitute(meta.getMatrixParameterName()[i]);
          String field=environmentSubstitute(meta.getMatrixParameterField()[i]);
          if (Const.isEmpty(field)) {
            throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.MatrixParamFieldEmpty"));
          }
          data.indexOfMatrixParamFields[i]=data.inputRowMeta.indexOfValue(field);
          if (data.indexOfMatrixParamFields[i] < 0) {
            throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",field));
          }
        }
        data.useMatrixParams=true;
      }
    }
    if (RestMeta.isActiveBody(meta.getMethod())) {
      String field=environmentSubstitute(meta.getBodyField());
      if (!Const.isEmpty(field)) {
        data.indexOfBodyField=data.inputRowMeta.indexOfValue(field);
        if (data.indexOfBodyField < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"Rest.Exception.ErrorFindingField",field));
        }
        data.useBody=true;
      }
    }
  }
  try {
    Object[] outputRowData=callRest(r);
    putRow(data.outputRowMeta,outputRowData);
    if (checkFeedback(getLinesRead())) {
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"Rest.LineNumber") + getLinesRead());
      }
    }
  }
 catch (  KettleException e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"Rest.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      logError(Const.getStackTracker(e));
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"Rest001");
    }
  }
  return true;
}
