{
  if (meta.isUrlInField()) {
    data.realUrl=data.inputRowMeta.getString(rowData,data.indexOfUrlField);
  }
  if (meta.isDynamicMethod()) {
    data.method=data.inputRowMeta.getString(rowData,data.indexOfMethod);
    if (Const.isEmpty(data.method)) {
      throw new KettleException(BaseMessages.getString(PKG,"Rest.Error.MethodMissing"));
    }
  }
  WebResource webResource=null;
  Client client=null;
  Object[] newRow=null;
  if (rowData != null) {
    newRow=rowData.clone();
  }
  try {
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"Rest.Log.ConnectingToURL",data.realUrl));
    }
    client=getClient();
    webResource=client.resource(data.realUrl);
    long startTime=System.currentTimeMillis();
    if (data.useMatrixParams) {
      UriBuilder builder=webResource.getUriBuilder();
      for (int i=0; i < data.nrMatrixParams; i++) {
        String value=data.inputRowMeta.getString(rowData,data.indexOfMatrixParamFields[i]);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"Rest.Log.matrixParameterValue",data.matrixParamNames[i],value));
        }
        builder=builder.matrixParam(data.matrixParamNames[i],value);
      }
      webResource=client.resource(builder.build());
    }
    if (data.useParams) {
      for (int i=0; i < data.nrParams; i++) {
        MultivaluedMapImpl queryParams=new MultivaluedMapImpl();
        String value=data.inputRowMeta.getString(rowData,data.indexOfParamFields[i]);
        queryParams.add(data.paramNames[i],value);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"Rest.Log.queryParameterValue",data.paramNames[i],value));
        }
        webResource=webResource.queryParams(queryParams);
      }
    }
    if (isDebug()) {
      logDebug(BaseMessages.getString(PKG,"Rest.Log.ConnectingToURL",webResource.getURI()));
    }
    WebResource.Builder builder=webResource.getRequestBuilder();
    if (data.useHeaders) {
      for (int i=0; i < data.nrheader; i++) {
        String value=data.inputRowMeta.getString(rowData,data.indexOfHeaderFields[i]);
        builder=builder.header(data.headerNames[i],value);
        if (isDebug()) {
          logDebug(BaseMessages.getString(PKG,"Rest.Log.HeaderValue",data.headerNames[i],value));
        }
      }
    }
    ClientResponse response=null;
    String entityString="";
    if (data.useBody) {
      entityString=Const.NVL(data.inputRowMeta.getString(rowData,data.indexOfBodyField),"");
      if (isDebug()) {
        logDebug(BaseMessages.getString(PKG,"Rest.Log.BodyValue",entityString));
      }
    }
    try {
      if (data.method.equals(RestMeta.HTTP_METHOD_GET)) {
        response=builder.get(ClientResponse.class);
      }
 else       if (data.method.equals(RestMeta.HTTP_METHOD_POST)) {
        response=builder.type(data.mediaType).post(ClientResponse.class,entityString);
      }
 else       if (data.method.equals(RestMeta.HTTP_METHOD_PUT)) {
        response=builder.type(data.mediaType).put(ClientResponse.class,entityString);
      }
 else       if (data.method.equals(RestMeta.HTTP_METHOD_DELETE)) {
        response=builder.type(data.mediaType).delete(ClientResponse.class,entityString);
      }
 else       if (data.method.equals(RestMeta.HTTP_METHOD_HEAD)) {
        response=builder.head();
      }
 else       if (data.method.equals(RestMeta.HTTP_METHOD_OPTIONS)) {
        response=builder.options(ClientResponse.class);
      }
 else {
        throw new KettleException(BaseMessages.getString(PKG,"Rest.Error.UnknownMethod",data.method));
      }
    }
 catch (    UniformInterfaceException u) {
      response=u.getResponse();
    }
    long responseTime=System.currentTimeMillis() - startTime;
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"Rest.Log.ResponseTime",String.valueOf(responseTime),data.realUrl));
    }
    int status=response.getStatus();
    if (isDebug()) {
      logDebug(BaseMessages.getString(PKG,"Rest.Log.ResponseCode","" + status));
    }
    String body;
    String headerString=null;
    try {
      body=response.getEntity(String.class);
    }
 catch (    UniformInterfaceException ex) {
      body="";
    }
    MultivaluedMap<String,String> headers=searchForHeaders(response);
    JSONObject json=new JSONObject();
    for (    java.util.Map.Entry<String,List<String>> entry : headers.entrySet()) {
      String name=entry.getKey();
      List<String> value=entry.getValue();
      if (value.size() > 1) {
        json.put(name,value);
      }
 else {
        json.put(name,value.get(0));
      }
    }
    headerString=json.toJSONString();
    int returnFieldsOffset=data.inputRowMeta.size();
    if (!Const.isEmpty(data.resultFieldName)) {
      newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,body);
      returnFieldsOffset++;
    }
    if (!Const.isEmpty(data.resultCodeFieldName)) {
      newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(status));
      returnFieldsOffset++;
    }
    if (!Const.isEmpty(data.resultResponseFieldName)) {
      newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(responseTime));
    }
    if (!Const.isEmpty(data.resultHeaderFieldName)) {
      newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,headerString.toString());
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"Rest.Error.CanNotReadURL",data.realUrl),e);
  }
 finally {
    if (webResource != null) {
      webResource=null;
    }
    if (client != null) {
      client.destroy();
    }
  }
  return newRow;
}
