{
  List<FileLine> fileLines=new ArrayList<FileLine>();
  List<TextFileInputField> fields=new ArrayList<TextFileInputField>();
  List<TextFileFilter> filters=new ArrayList<TextFileFilter>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry == null) {
      continue;
    }
    String lookValue=(String)lookFields.getValue();
switch (fieldsEntry) {
case FILENAME_LINES:
{
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry == Entry.FILENAME_LINE) {
            FileLine fileLine=new FileLine();
            List<StepInjectionMetaEntry> entries=lookField.getDetails();
            for (            StepInjectionMetaEntry entry : entries) {
              Entry metaEntry=Entry.findEntry(entry.getKey());
              if (metaEntry != null) {
                String value=(String)entry.getValue();
switch (metaEntry) {
case FILENAME:
                  fileLine.filename=value;
                break;
case FILEMASK:
              fileLine.includeMask=value;
            break;
case EXCLUDE_FILEMASK:
          fileLine.excludeMask=value;
        break;
case FILE_REQUIRED:
      fileLine.required=value;
    break;
case INCLUDE_SUBFOLDERS:
  fileLine.includeSubfolders=value;
break;
default :
break;
}
}
}
fileLines.add(fileLine);
}
}
}
break;
case FIELDS:
{
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
Entry fieldEntry=Entry.findEntry(lookField.getKey());
if (fieldEntry == Entry.FIELD) {
TextFileInputField field=new TextFileInputField();
List<StepInjectionMetaEntry> entries=lookField.getDetails();
for (StepInjectionMetaEntry entry : entries) {
Entry metaEntry=Entry.findEntry(entry.getKey());
if (metaEntry != null) {
String value=(String)entry.getValue();
switch (metaEntry) {
case FIELD_NAME:
field.setName(value);
break;
case FIELD_POSITION:
field.setPosition(Const.toInt(value,-1));
break;
case FIELD_LENGTH:
field.setLength(Const.toInt(value,-1));
break;
case FIELD_TYPE:
field.setType(ValueMeta.getType(value));
break;
case FIELD_IGNORE:
field.setIgnored("Y".equalsIgnoreCase(value));
break;
case FIELD_FORMAT:
field.setFormat(value);
break;
case FIELD_TRIM_TYPE:
field.setTrimType(ValueMeta.getTrimTypeByCode(value));
break;
case FIELD_PRECISION:
field.setPrecision(Const.toInt(value,-1));
break;
case FIELD_DECIMAL:
field.setDecimalSymbol(value);
break;
case FIELD_GROUP:
field.setGroupSymbol(value);
break;
case FIELD_CURRENCY:
field.setCurrencySymbol(value);
break;
case FIELD_REPEAT:
field.setRepeated("Y".equalsIgnoreCase(value));
break;
case FIELD_NULL_STRING:
field.setNullString(value);
break;
case FIELD_IF_NULL:
field.setIfNullValue(value);
break;
default :
break;
}
}
}
fields.add(field);
}
}
}
break;
case FILTERS:
{
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
Entry fieldEntry=Entry.findEntry(lookField.getKey());
if (fieldEntry == Entry.FILTER) {
TextFileFilter filterLine=new TextFileFilter();
List<StepInjectionMetaEntry> entries=lookField.getDetails();
for (StepInjectionMetaEntry entry : entries) {
Entry metaEntry=Entry.findEntry(entry.getKey());
if (metaEntry != null) {
String value=(String)entry.getValue();
switch (metaEntry) {
case FILTER_POSITION:
filterLine.setFilterPosition(Const.toInt(value,0));
break;
case FILTER_STRING:
filterLine.setFilterString(value);
break;
case FILTER_LAST_LINE:
filterLine.setFilterLastLine("Y".equalsIgnoreCase(value));
break;
case FILTER_POSITIVE:
filterLine.setFilterPositive("Y".equalsIgnoreCase(value));
break;
default :
break;
}
}
}
filters.add(filterLine);
}
}
}
break;
case FILE_TYPE:
meta.setFileType(lookValue);
break;
case SEPARATOR:
meta.setSeparator(lookValue);
break;
case ENCLOSURE:
meta.setEnclosure(lookValue);
break;
case ESCAPE_CHAR:
meta.setEscapeCharacter(lookValue);
break;
case BREAK_IN_ENCLOSURE:
meta.setBreakInEnclosureAllowed("Y".equalsIgnoreCase(lookValue));
break;
case HEADER_PRESENT:
meta.setHeader("Y".equalsIgnoreCase(lookValue));
break;
case NR_HEADER_LINES:
meta.setNrHeaderLines(Const.toInt(lookValue,-1));
break;
case HAS_FOOTER:
meta.setFooter("Y".equalsIgnoreCase(lookValue));
break;
case NR_FOOTER_LINES:
meta.setNrFooterLines(Const.toInt(lookValue,-1));
break;
case HAS_WRAPPED_LINES:
meta.setLineWrapped("Y".equalsIgnoreCase(lookValue));
break;
case NR_WRAPS:
meta.setNrWraps(Const.toInt(lookValue,-1));
break;
case HAS_PAGED_LAYOUT:
meta.setLayoutPaged("Y".equalsIgnoreCase(lookValue));
break;
case NR_DOC_HEADER_LINES:
meta.setNrLinesDocHeader(Const.toInt(lookValue,-1));
break;
case NR_LINES_PER_PAGE:
meta.setNrLinesPerPage(Const.toInt(lookValue,-1));
break;
case COMPRESSION_TYPE:
meta.setFileCompression(lookValue);
break;
case NO_EMPTY_LINES:
meta.setNoEmptyLines("Y".equalsIgnoreCase(lookValue));
break;
case INCLUDE_FILENAME:
meta.setIncludeFilename("Y".equalsIgnoreCase(lookValue));
break;
case FILENAME_FIELD:
meta.setFilenameField(lookValue);
break;
case INCLUDE_ROW_NUMBER:
meta.setIncludeRowNumber("Y".equalsIgnoreCase(lookValue));
break;
case ROW_NUMBER_BY_FILE:
meta.setRowNumberByFile("Y".equalsIgnoreCase(lookValue));
break;
case ROW_NUMBER_FIELD:
meta.setRowNumberField(lookValue);
break;
case FILE_FORMAT:
meta.setFileFormat(lookValue);
break;
case ROW_LIMIT:
meta.setRowLimit(Const.toInt(lookValue,-1));
break;
case DATE_FORMAT_LENIENT:
meta.setDateFormatLenient("Y".equalsIgnoreCase(lookValue));
break;
case DATE_FORMAT_LOCALE:
meta.setDateFormatLocale(new Locale(lookValue));
break;
case ACCEPT_FILE_NAMES:
meta.setAcceptingFilenames("Y".equalsIgnoreCase(lookValue));
break;
case ACCEPT_FILE_STEP:
meta.setAcceptingStepName(lookValue);
break;
case ACCEPT_FILE_FIELD:
meta.setAcceptingField(lookValue);
break;
case PASS_THROUGH_FIELDS:
meta.setPassingThruFields("Y".equalsIgnoreCase(lookValue));
break;
case ADD_FILES_TO_RESULT:
meta.setAddResultFile("Y".equalsIgnoreCase(lookValue));
break;
case FILE_SHORT_FILE_FIELDNAME:
meta.setShortFileNameField(lookValue);
break;
case FILE_PATH_FIELDNAME:
meta.setPathField(lookValue);
break;
case FILE_HIDDEN_FIELDNAME:
meta.setIsHiddenField(lookValue);
break;
case FILE_LAST_MODIFICATION_FIELDNAME:
meta.setLastModificationDateField(lookValue);
break;
case FILE_URI_FIELDNAME:
meta.setUriField(lookValue);
break;
case FILE_EXTENSION_FIELDNAME:
meta.setExtensionField(lookValue);
break;
case FILE_SIZE_FIELDNAME:
meta.setSizeField(lookValue);
break;
case SKIP_BAD_FILES:
meta.setSkipBadFiles("Y".equalsIgnoreCase(lookValue));
break;
case FILE_ERROR_FIELD:
meta.setFileErrorField(lookValue);
break;
case FILE_ERROR_MESSAGE_FIELD:
meta.setFileErrorMessageField(lookValue);
break;
case IGNORE_ERRORS:
meta.setErrorIgnored("Y".equalsIgnoreCase(lookValue));
break;
case ERROR_COUNT_FIELD:
meta.setErrorCountField(lookValue);
break;
case ERROR_FIELDS_FIELD:
meta.setErrorFieldsField(lookValue);
break;
case ERROR_TEXT_FIELD:
meta.setErrorTextField(lookValue);
break;
case WARNING_FILES_TARGET_DIR:
meta.setWarningFilesDestinationDirectory(lookValue);
break;
case WARNING_FILES_EXTENTION:
meta.setWarningFilesExtension(lookValue);
break;
case ERROR_FILES_TARGET_DIR:
meta.setErrorFilesDestinationDirectory(lookValue);
break;
case ERROR_FILES_EXTENTION:
meta.setErrorLineFilesExtension(lookValue);
break;
case LINE_NR_FILES_TARGET_DIR:
meta.setLineNumberFilesDestinationDirectory(lookValue);
break;
case LINE_NR_FILES_EXTENTION:
meta.setLineNumberFilesExtension(lookValue);
break;
case ERROR_LINES_SKIPPED:
meta.setErrorLineSkipped("Y".equalsIgnoreCase(lookValue));
break;
default :
break;
}
}
if (fields.size() > 0) {
meta.setInputFields(fields.toArray(new TextFileInputField[fields.size()]));
}
if (fileLines.size() > 0) {
meta.allocateFiles(fileLines.size());
for (int i=0; i < fileLines.size(); i++) {
FileLine fileLine=fileLines.get(i);
meta.getFileName()[i]=fileLine.filename;
meta.getFileMask()[i]=fileLine.includeMask;
meta.getExludeFileMask()[i]=fileLine.excludeMask;
meta.getExludeFileMask()[i]=fileLine.excludeMask;
meta.getFileRequired()[i]=fileLine.required;
meta.getIncludeSubFolders()[i]=fileLine.includeSubfolders;
}
}
if (filters.size() > 0) {
meta.setFilter(filters.toArray(new TextFileFilter[filters.size()]));
}
}
