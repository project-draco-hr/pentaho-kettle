{
  LogWriter log=LogWriter.getInstance();
  try {
    InputStream content=getClass().getClassLoader().getResourceAsStream("META-INF/repository_plugin.xml");
    if (content != null)     readPluginFromResource(content,null,null);
  }
 catch (  Exception e) {
    throw new KettleException("Unable to load plugins specified in 'META-INF/repository_plugin.xml' files",e);
  }
  for (int dirNr=0; dirNr < pluginDirectory.length; dirNr++) {
    try {
      File f=new File(pluginDirectory[dirNr]);
      if (f.isDirectory() && f.exists()) {
        log.logDetailed(BaseMessages.getString(PKG,"RepositoryLoader.Log.RepositoryLoader.Title"),BaseMessages.getString(PKG,"RepositoryLoader.Log.RepositoryLoader.Description") + pluginDirectory[dirNr]);
        String dirs[]=f.list();
        for (int i=0; i < dirs.length; i++) {
          String piDir=pluginDirectory[dirNr] + Const.FILE_SEPARATOR + dirs[i];
          File pi=new File(piDir);
          if (pi.isDirectory()) {
            String pixml=pi.toString() + Const.FILE_SEPARATOR + "plugin.xml";
            File fpixml=new File(pixml);
            if (fpixml.canRead()) {
              readPluginFromResource(new FileInputStream(fpixml),pi.getPath(),dirs[i]);
            }
 else {
              log.logDetailed(BaseMessages.getString(PKG,"RepositoryLoader.Log.RepositoryLoader.Title"),"Plugin file [" + fpixml + "] is not readable.");
            }
          }
 else {
            log.logDetailed(BaseMessages.getString(PKG,"RepositoryLoader.Log.RepositoryLoader.Title"),"Plugin directory [" + piDir + "] is not a directory.");
          }
        }
      }
 else {
        log.logDebug(BaseMessages.getString(PKG,"RepositoryLoader.Log.RepositoryLoader.Title"),"Plugin directory not found, ignoring this: [" + pluginDirectory[dirNr] + "]");
      }
    }
 catch (    Exception e) {
      throw new KettleException(BaseMessages.getString(PKG,"RepositoryLoader.RuntimeError.CouldNotFindDirectory.TRANS0002",pluginDirectory[dirNr]),e);
    }
  }
}
