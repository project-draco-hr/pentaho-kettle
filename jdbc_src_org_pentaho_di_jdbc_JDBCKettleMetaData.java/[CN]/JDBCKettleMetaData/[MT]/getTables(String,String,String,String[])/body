{
  List<RowMetaAndData> rowAndDatas=new ArrayList<RowMetaAndData>();
  log.debug("catalog:" + catalog + " , schemaPattern:"+ schemaPattern+ " , tableNamePattern:"+ tableNamePattern);
  if (!isDir) {
    Set<Map.Entry<String,String[]>> tables=this.stepsMap.entrySet();
    log.debug("tables:" + tables);
    for (Iterator<Map.Entry<String,String[]>> iterator=tables.iterator(); iterator.hasNext(); ) {
      Map.Entry<String,String[]> o=iterator.next();
      String[] values=(o.getValue());
      for (int i=0; i < values.length; i++) {
        RowMetaAndData rd=new RowMetaAndData();
        rd.addValue("TABLE_CAT",ValueMetaInterface.TYPE_STRING,"jdbckettle");
        rd.addValue("TABLE_SCHEM",ValueMetaInterface.TYPE_STRING,"jdbckettle");
        rd.addValue("TABLE_NAME",ValueMetaInterface.TYPE_STRING,values[i]);
        rd.addValue("TABLE_TYPE",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("REMARKS",ValueMetaInterface.TYPE_STRING,"");
        rd.addValue("TYPE_CAT",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("TYPE_SCHEM",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("TYPE_NAME",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("SELF_REFERENCING_COL_NAME",ValueMetaInterface.TYPE_STRING,"");
        rd.addValue("REF_GENERATION",ValueMetaInterface.TYPE_STRING,"");
        rowAndDatas.add(rd);
      }
    }
  }
 else {
    Set<Map.Entry<String,String[]>> tables=this.stepsMap.entrySet();
    boolean isBirtSchema=this.stepsMap.keySet().contains(schemaPattern);
    for (Iterator<Map.Entry<String,String[]>> iterator=tables.iterator(); iterator.hasNext(); ) {
      Map.Entry<String,String[]> o=iterator.next();
      String schema=o.getKey();
      if ((!schema.equals(schemaPattern)) && isBirtSchema) {
        continue;
      }
      String[] values=(o.getValue());
      for (int i=0; i < values.length; i++) {
        RowMetaAndData rd=new RowMetaAndData();
        rd.addValue("TABLE_CAT",ValueMetaInterface.TYPE_STRING,"jdbckettle");
        rd.addValue("TABLE_SCHEM",ValueMetaInterface.TYPE_STRING,"jdbckettle");
        rd.addValue("TABLE_NAME",ValueMetaInterface.TYPE_STRING,values[i]);
        rd.addValue("TABLE_TYPE",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("REMARKS",ValueMetaInterface.TYPE_STRING,"");
        rd.addValue("TYPE_CAT",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("TYPE_SCHEM",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("TYPE_NAME",ValueMetaInterface.TYPE_STRING,Constants.TABLE_TYPE_TABLE);
        rd.addValue("SELF_REFERENCING_COL_NAME",ValueMetaInterface.TYPE_STRING,"");
        rd.addValue("REF_GENERATION",ValueMetaInterface.TYPE_STRING,"");
        rowAndDatas.add(rd);
      }
    }
  }
  KettleJDBCResultSet rs=new KettleJDBCResultSet(null,rowAndDatas,"*");
  return rs;
}
