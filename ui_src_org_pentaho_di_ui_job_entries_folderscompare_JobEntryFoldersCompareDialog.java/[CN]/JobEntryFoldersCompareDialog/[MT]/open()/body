{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wSettings=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wSettings);
  wSettings.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Settings.Label"));
  FormLayout groupLayout=new FormLayout();
  groupLayout.marginWidth=10;
  groupLayout.marginHeight=10;
  wSettings.setLayout(groupLayout);
  wlIncludeSubfolders=new Label(wSettings,SWT.RIGHT);
  wlIncludeSubfolders.setText(BaseMessages.getString(PKG,"JobFoldersCompare.IncludeSubfolders.Label"));
  props.setLook(wlIncludeSubfolders);
  fdlIncludeSubfolders=new FormData();
  fdlIncludeSubfolders.left=new FormAttachment(0,0);
  fdlIncludeSubfolders.top=new FormAttachment(wName,margin);
  fdlIncludeSubfolders.right=new FormAttachment(middle,-margin);
  wlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);
  wIncludeSubfolders=new Button(wSettings,SWT.CHECK);
  props.setLook(wIncludeSubfolders);
  wIncludeSubfolders.setToolTipText(BaseMessages.getString(PKG,"JobFoldersCompare.IncludeSubfolders.Tooltip"));
  fdIncludeSubfolders=new FormData();
  fdIncludeSubfolders.left=new FormAttachment(middle,0);
  fdIncludeSubfolders.top=new FormAttachment(wName,margin);
  fdIncludeSubfolders.right=new FormAttachment(100,0);
  wIncludeSubfolders.setLayoutData(fdIncludeSubfolders);
  wIncludeSubfolders.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlCompareOnly=new Label(wSettings,SWT.RIGHT);
  wlCompareOnly.setText(BaseMessages.getString(PKG,"JobFoldersCompare.CompareOnly.Label"));
  props.setLook(wlCompareOnly);
  fdlCompareOnly=new FormData();
  fdlCompareOnly.left=new FormAttachment(0,0);
  fdlCompareOnly.right=new FormAttachment(middle,0);
  fdlCompareOnly.top=new FormAttachment(wIncludeSubfolders,margin);
  wlCompareOnly.setLayoutData(fdlCompareOnly);
  wCompareOnly=new CCombo(wSettings,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wCompareOnly.add(BaseMessages.getString(PKG,"JobFoldersCompare.All_CompareOnly.Label"));
  wCompareOnly.add(BaseMessages.getString(PKG,"JobFoldersCompare.Files_CompareOnly.Label"));
  wCompareOnly.add(BaseMessages.getString(PKG,"JobFoldersCompare.Folders_CompareOnly.Label"));
  wCompareOnly.add(BaseMessages.getString(PKG,"JobFoldersCompare.Specify_CompareOnly.Label"));
  wCompareOnly.select(0);
  props.setLook(wCompareOnly);
  fdCompareOnly=new FormData();
  fdCompareOnly.left=new FormAttachment(middle,0);
  fdCompareOnly.top=new FormAttachment(wIncludeSubfolders,margin);
  fdCompareOnly.right=new FormAttachment(100,-margin);
  wCompareOnly.setLayoutData(fdCompareOnly);
  wCompareOnly.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SpecifyCompareOnlyActivate();
    }
  }
);
  wlWildcard=new Label(wSettings,SWT.RIGHT);
  wlWildcard.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Wildcard.Label"));
  props.setLook(wlWildcard);
  fdlWildcard=new FormData();
  fdlWildcard.left=new FormAttachment(0,0);
  fdlWildcard.top=new FormAttachment(wCompareOnly,margin);
  fdlWildcard.right=new FormAttachment(middle,-margin);
  wlWildcard.setLayoutData(fdlWildcard);
  wWildcard=new TextVar(jobMeta,wSettings,SWT.SINGLE | SWT.LEFT | SWT.BORDER,BaseMessages.getString(PKG,"JobFoldersCompare.Wildcard.Tooltip"));
  props.setLook(wWildcard);
  wWildcard.addModifyListener(lsMod);
  fdWildcard=new FormData();
  fdWildcard.left=new FormAttachment(middle,0);
  fdWildcard.top=new FormAttachment(wCompareOnly,margin);
  fdWildcard.right=new FormAttachment(100,-margin);
  wWildcard.setLayoutData(fdWildcard);
  wlCompareFileSize=new Label(wSettings,SWT.RIGHT);
  wlCompareFileSize.setText(BaseMessages.getString(PKG,"JobFoldersCompare.CompareFileSize.Label"));
  props.setLook(wlCompareFileSize);
  fdlCompareFileSize=new FormData();
  fdlCompareFileSize.left=new FormAttachment(0,0);
  fdlCompareFileSize.top=new FormAttachment(wWildcard,margin);
  fdlCompareFileSize.right=new FormAttachment(middle,-margin);
  wlCompareFileSize.setLayoutData(fdlCompareFileSize);
  wCompareFileSize=new Button(wSettings,SWT.CHECK);
  props.setLook(wCompareFileSize);
  wCompareFileSize.setToolTipText(BaseMessages.getString(PKG,"JobFoldersCompare.CompareFileSize.Tooltip"));
  fdCompareFileSize=new FormData();
  fdCompareFileSize.left=new FormAttachment(middle,0);
  fdCompareFileSize.top=new FormAttachment(wWildcard,margin);
  fdCompareFileSize.right=new FormAttachment(100,0);
  wCompareFileSize.setLayoutData(fdCompareFileSize);
  wCompareFileSize.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlCompareFileContent=new Label(wSettings,SWT.RIGHT);
  wlCompareFileContent.setText(BaseMessages.getString(PKG,"JobFoldersCompare.CompareFileContent.Label"));
  props.setLook(wlCompareFileContent);
  fdlCompareFileContent=new FormData();
  fdlCompareFileContent.left=new FormAttachment(0,0);
  fdlCompareFileContent.top=new FormAttachment(wCompareFileSize,margin);
  fdlCompareFileContent.right=new FormAttachment(middle,-margin);
  wlCompareFileContent.setLayoutData(fdlCompareFileContent);
  wCompareFileContent=new Button(wSettings,SWT.CHECK);
  props.setLook(wCompareFileContent);
  wCompareFileContent.setToolTipText(BaseMessages.getString(PKG,"JobFoldersCompare.CompareFileContent.Tooltip"));
  fdCompareFileContent=new FormData();
  fdCompareFileContent.left=new FormAttachment(middle,0);
  fdCompareFileContent.top=new FormAttachment(wCompareFileSize,margin);
  fdCompareFileContent.right=new FormAttachment(100,0);
  wCompareFileContent.setLayoutData(fdCompareFileContent);
  wCompareFileContent.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  fdSettings=new FormData();
  fdSettings.left=new FormAttachment(0,margin);
  fdSettings.top=new FormAttachment(wName,margin);
  fdSettings.right=new FormAttachment(100,-margin);
  wSettings.setLayoutData(fdSettings);
  wlFilename1=new Label(shell,SWT.RIGHT);
  wlFilename1.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Filename1.Label"));
  props.setLook(wlFilename1);
  fdlFilename1=new FormData();
  fdlFilename1.left=new FormAttachment(0,0);
  fdlFilename1.top=new FormAttachment(wSettings,2 * margin);
  fdlFilename1.right=new FormAttachment(middle,-margin);
  wlFilename1.setLayoutData(fdlFilename1);
  wbDirectory1=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDirectory1);
  wbDirectory1.setText(BaseMessages.getString(PKG,"JobFoldersCompare.FolderBrowse.Label"));
  fdbDirectory1=new FormData();
  fdbDirectory1.right=new FormAttachment(100,-margin);
  fdbDirectory1.top=new FormAttachment(wSettings,2 * margin);
  wbDirectory1.setLayoutData(fdbDirectory1);
  wbDirectory1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wFilename1.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wFilename1.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wFilename1.setText(dir);
      }
    }
  }
);
  wbFilename1=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbFilename1);
  wbFilename1.setText(BaseMessages.getString(PKG,"JobFoldersCompare.FileBrowse.Label"));
  fdbFilename1=new FormData();
  fdbFilename1.right=new FormAttachment(wbDirectory1,-margin);
  fdbFilename1.top=new FormAttachment(wSettings,2 * margin);
  wbFilename1.setLayoutData(fdbFilename1);
  wFilename1=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename1);
  wFilename1.addModifyListener(lsMod);
  fdFilename1=new FormData();
  fdFilename1.left=new FormAttachment(middle,0);
  fdFilename1.top=new FormAttachment(wSettings,2 * margin);
  fdFilename1.right=new FormAttachment(wbFilename1,-margin);
  wFilename1.setLayoutData(fdFilename1);
  wFilename1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFilename1.setToolTipText(jobMeta.environmentSubstitute(wFilename1.getText()));
    }
  }
);
  wbFilename1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wFilename1.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wFilename1.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wFilename1.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wlFilename2=new Label(shell,SWT.RIGHT);
  wlFilename2.setText(BaseMessages.getString(PKG,"JobFoldersCompare.Filename2.Label"));
  props.setLook(wlFilename2);
  fdlFilename2=new FormData();
  fdlFilename2.left=new FormAttachment(0,0);
  fdlFilename2.top=new FormAttachment(wFilename1,margin);
  fdlFilename2.right=new FormAttachment(middle,-margin);
  wlFilename2.setLayoutData(fdlFilename2);
  wbDirectory2=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbDirectory2);
  wbDirectory2.setText(BaseMessages.getString(PKG,"JobFoldersCompare.FolderBrowse.Label"));
  fdbDirectory2=new FormData();
  fdbDirectory2.right=new FormAttachment(100,-margin);
  fdbDirectory2.top=new FormAttachment(wFilename1,margin);
  wbDirectory2.setLayoutData(fdbDirectory2);
  wbDirectory2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog ddialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wFilename2.getText() != null) {
        ddialog.setFilterPath(jobMeta.environmentSubstitute(wFilename2.getText()));
      }
      String dir=ddialog.open();
      if (dir != null) {
        wFilename2.setText(dir);
      }
    }
  }
);
  wbFilename2=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbFilename2);
  wbFilename2.setText(BaseMessages.getString(PKG,"JobFoldersCompare.FileBrowse.Label"));
  fdbFilename2=new FormData();
  fdbFilename2.right=new FormAttachment(wbDirectory2,-margin);
  fdbFilename2.top=new FormAttachment(wFilename1,margin);
  wbFilename2.setLayoutData(fdbFilename2);
  wFilename2=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename2);
  wFilename2.addModifyListener(lsMod);
  fdFilename2=new FormData();
  fdFilename2.left=new FormAttachment(middle,0);
  fdFilename2.top=new FormAttachment(wFilename1,margin);
  fdFilename2.right=new FormAttachment(wbFilename2,-margin);
  wFilename2.setLayoutData(fdFilename2);
  wFilename2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFilename2.setToolTipText(jobMeta.environmentSubstitute(wFilename2.getText()));
    }
  }
);
  wbFilename2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wFilename2.getText() != null) {
        dialog.setFileName(jobMeta.environmentSubstitute(wFilename2.getText()));
      }
      dialog.setFilterNames(FILETYPES);
      if (dialog.open() != null) {
        wFilename2.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wFilename2);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  wFilename1.addSelectionListener(lsDef);
  wFilename2.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  SpecifyCompareOnlyActivate();
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return jobEntry;
}
