{
  try {
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    addResultFile=rep.getStepAttributeBoolean(id_step,"addresultfile");
    readurl=rep.getStepAttributeBoolean(id_step,"readurl");
    IsIgnoreEmptyFile=rep.getStepAttributeBoolean(id_step,"IsIgnoreEmptyFile");
    ignoreMissingPath=rep.getStepAttributeBoolean(id_step,"ignoreMissingPath");
    doNotFailIfNoFile=rep.getStepAttributeBoolean(id_step,"doNotFailIfNoFile");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    rowLimit=rep.getStepAttributeInteger(id_step,"limit");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFiles,nrFields);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
      excludeFileMask[i]=rep.getStepAttributeString(id_step,i,"exclude_file_mask");
      fileRequired[i]=rep.getStepAttributeString(id_step,i,"file_required");
      includeSubFolders[i]=rep.getStepAttributeString(id_step,i,"include_subfolders");
    }
    for (int i=0; i < nrFields; i++) {
      JsonInputField field=new JsonInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setPath(rep.getStepAttributeString(id_step,i,"field_path"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(JsonInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
    inFields=rep.getStepAttributeBoolean(id_step,"IsInFields");
    IsAFile=rep.getStepAttributeBoolean(id_step,"IsAFile");
    valueField=rep.getStepAttributeString(id_step,"valueField");
    shortFileFieldName=rep.getStepAttributeString(id_step,"shortFileFieldName");
    pathFieldName=rep.getStepAttributeString(id_step,"pathFieldName");
    hiddenFieldName=rep.getStepAttributeString(id_step,"hiddenFieldName");
    lastModificationTimeFieldName=rep.getStepAttributeString(id_step,"lastModificationTimeFieldName");
    rootUriNameFieldName=rep.getStepAttributeString(id_step,"rootUriNameFieldName");
    extensionFieldName=rep.getStepAttributeString(id_step,"extensionFieldName");
    sizeFieldName=rep.getStepAttributeString(id_step,"sizeFieldName");
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"JsonInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
