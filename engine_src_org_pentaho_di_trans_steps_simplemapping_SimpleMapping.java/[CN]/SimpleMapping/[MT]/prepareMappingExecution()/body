{
  data.mappingTrans=new Trans(data.mappingTransMeta,getTrans());
  setMappingParameters();
  if (data.mappingTransMeta.getTransformationType() != TransformationType.Normal) {
    data.mappingTrans.getTransMeta().setUsingThreadPriorityManagment(false);
  }
  data.mappingTrans.setParentTrans(getTrans());
  data.mappingTrans.setSafeModeEnabled(getTrans().isSafeModeEnabled());
  data.mappingTrans.setGatheringMetrics(getTrans().isGatheringMetrics());
  data.mappingTrans.setMappingStepName(getStepname());
  data.mappingTrans.setServletPrintWriter(getTrans().getServletPrintWriter());
  data.mappingTrans.setServletReponse(getTrans().getServletResponse());
  data.mappingTrans.setServletRequest(getTrans().getServletRequest());
  try {
    data.mappingTrans.prepareExecution(getTrans().getArguments());
  }
 catch (  KettleException e) {
    throw new KettleException(BaseMessages.getString(PKG,"SimpleMapping.Exception.UnableToPrepareExecutionOfMapping"),e);
  }
  MappingInput[] mappingInputs=data.mappingTrans.findMappingInput();
  if (mappingInputs.length == 0) {
    throw new KettleException("The simple mapping step needs one Mapping Input step to write to in the sub-transformation");
  }
  if (mappingInputs.length > 1) {
    throw new KettleException("The simple mapping step does not support multiple Mapping Input steps to write to in the sub-transformation");
  }
  data.mappingInput=mappingInputs[0];
  data.mappingInput.setConnectorSteps(new StepInterface[0],new ArrayList<MappingValueRename>(),null);
  MappingOutput[] mappingOutputs=data.mappingTrans.findMappingOutput();
  if (mappingOutputs.length == 0) {
    throw new KettleException("The simple mapping step needs one Mapping Output step to read from in the sub-transformation");
  }
  if (mappingOutputs.length > 1) {
    throw new KettleException("The simple mapping step does not support multiple Mapping Output steps to read from in the sub-transformation");
  }
  data.mappingOutput=mappingOutputs[0];
  getTrans().getActiveSubtransformations().put(getStepname(),data.mappingTrans);
}
