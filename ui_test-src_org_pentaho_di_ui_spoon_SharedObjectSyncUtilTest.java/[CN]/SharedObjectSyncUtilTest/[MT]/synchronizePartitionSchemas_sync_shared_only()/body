{
  final String partitionSchemaName="PartitionSchema";
  TransMeta transformarion1=createTransMeta();
  PartitionSchema partitionSchema1=createPartitionSchema(partitionSchemaName,true);
  transformarion1.setPartitionSchemas(Collections.singletonList(partitionSchema1));
  spoonDelegates.trans.addTransformation(transformarion1);
  TransMeta transformarion2=createTransMeta();
  PartitionSchema unsharedPartitionSchema2=createPartitionSchema(partitionSchemaName,false);
  transformarion2.setPartitionSchemas(Collections.singletonList(unsharedPartitionSchema2));
  spoonDelegates.trans.addTransformation(transformarion2);
  TransMeta transformarion3=createTransMeta();
  PartitionSchema partitionSchema3=createPartitionSchema(partitionSchemaName,true);
  transformarion3.setPartitionSchemas(Collections.singletonList(partitionSchema3));
  spoonDelegates.trans.addTransformation(transformarion3);
  partitionSchema3.setNumberOfPartitionsPerSlave(AFTER_SYNC_VALUE);
  sharedUtil.synchronizePartitionSchemas(partitionSchema3);
  assertThat(partitionSchema1.getNumberOfPartitionsPerSlave(),equalTo(AFTER_SYNC_VALUE));
  assertThat(unsharedPartitionSchema2.getNumberOfPartitionsPerSlave(),equalTo(BEFORE_SYNC_VALUE));
}
