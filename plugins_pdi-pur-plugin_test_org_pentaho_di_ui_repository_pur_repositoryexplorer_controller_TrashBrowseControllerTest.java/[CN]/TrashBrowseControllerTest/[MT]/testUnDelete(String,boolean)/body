{
  List<TrashBrowseController.UIDeletedObject> uiDeleteObjects=Arrays.asList(uiDeleteObjectMock);
  when(selectedTrashFileItemsMock.toArray()).thenReturn(new TrashBrowseController.UIDeletedObject[]{uiDeleteObjectMock});
  when(selectedTrashFileItemsMock.size()).thenReturn(1);
  doReturn(uiDeleteObjectMock).when(selectedTrashFileItemsMock).get(0);
  doReturn("/home/admin").when(uiDeleteObjectMock).getOriginalParentPath();
  doReturn(objectIdMock).when(uiDeleteObjectMock).getId();
  doReturn(deletedObjectType).when(uiDeleteObjectMock).getType();
  doReturn(uiDeleteObjects).when(trashServiceMock).getTrash();
  if (directoryNull) {
    doReturn(null).when(repositoryMock).findDirectory("/home/admin");
  }
 else {
    doReturn(actualSubDirMock).when(repositoryMock).findDirectory("/home/admin");
    doReturn(objectIdMock).when(actualSubDirMock).getObjectId();
    doReturn(null).when(dirMapMock).get(objectIdMock);
    doReturn(actualDirMock).when(actualSubDirMock).getParent();
    doReturn(objectIdMock2).when(actualDirMock).getObjectId();
    doReturn(repoDirMock).when(dirMapMock).get(objectIdMock2);
  }
  doReturn(transMetaMock).when(repositoryMock).loadTransformation(objectIdMock,null);
  trBrController.undelete();
}
