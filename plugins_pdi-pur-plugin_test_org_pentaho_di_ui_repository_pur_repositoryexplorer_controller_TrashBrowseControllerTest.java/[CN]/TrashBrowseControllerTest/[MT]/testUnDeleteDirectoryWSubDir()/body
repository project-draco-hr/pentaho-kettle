{
  List<TrashBrowseController.UIDeletedObject> uiDeleteObjects=Arrays.asList(uiDirectoryObjectMock);
  when(selectedTrashFileItemsMock.toArray()).thenReturn(new TrashBrowseController.UIDeletedObject[]{uiDirectoryObjectMock});
  when(selectedTrashFileItemsMock.size()).thenReturn(1);
  doReturn(uiDirectoryObjectMock).when(selectedTrashFileItemsMock).get(0);
  doReturn("/home/admin").when(uiDirectoryObjectMock).getOriginalParentPath();
  doReturn(objectIdMock).when(uiDirectoryObjectMock).getId();
  doReturn(null).when(uiDirectoryObjectMock).getType();
  doReturn(uiDeleteObjects).when(trashServiceMock).getTrash();
  doReturn(null).when(repositoryMock).findDirectory("/home/admin");
  doReturn(transMetaMock).when(repositoryMock).loadTransformation(objectIdMock,null);
  doReturn("directory").when(uiDirectoryObjectMock).getName();
  doReturn(actualDirMock).when(repositoryMock).findDirectory("/home/admin/directory");
  doReturn(Arrays.asList(actualSubDirMock)).when(actualDirMock).getChildren();
  doReturn(null).when(actualSubDirMock).getChildren();
  doReturn(Arrays.asList(objectInDirectory)).when(actualSubDirMock).getRepositoryObjects();
  doReturn(RepositoryObjectType.TRANSFORMATION).when(objectInDirectory).getObjectType();
  doReturn(objectIdMock).when(objectInDirectory).getObjectId();
  doReturn(new ArrayList<RepositoryElementMetaInterface>()).when(actualDirMock).getRepositoryObjects();
  trBrController.undelete();
  verify(trashServiceMock,times(1)).undelete(anyList());
  verify(transMetaMock,times(1)).clearChanged();
  verify(repositoryMock,times(1)).loadTransformation(objectIdMock,null);
  verify(repositoryMock,times(1)).findDirectory("/home/admin/directory");
  verify(actualDirMock,times(3)).getChildren();
  verify(actualSubDirMock,times(1)).getChildren();
  verify(deckMock,times(1)).setSelectedIndex(1);
}
