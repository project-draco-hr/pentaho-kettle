{
  if (ke.getCause() instanceof RepositoryObjectAccessException && ((RepositoryObjectAccessException)ke.getCause()).getObjectAccessType().equals(RepositoryObjectAccessException.AccessExceptionType.USER_HOME_DIR) && repoObject instanceof UIEERepositoryDirectory) {
    try {
      confirmBox=(XulConfirmBox)document.createElement("confirmbox");
      confirmBox.setTitle(BaseMessages.getString(PKG,"TrashBrowseController.DeleteHomeFolderWarningTitle"));
      confirmBox.setMessage(BaseMessages.getString(PKG,"TrashBrowseController.DeleteHomeFolderWarningMessage"));
      confirmBox.setAcceptLabel(BaseMessages.getString(PKG,"Dialog.Ok"));
      confirmBox.setCancelLabel(BaseMessages.getString(PKG,"Dialog.Cancel"));
      confirmBox.addDialogCallback(new XulDialogCallback<Object>(){
        public void onClose(        XulComponent sender,        Status returnCode,        Object retVal){
          if (returnCode == Status.ACCEPT) {
            action.onClose(sender,returnCode,retVal);
          }
        }
        public void onError(        XulComponent sender,        Throwable t){
          if (mainController == null || !mainController.handleLostRepository(t)) {
            throw new RuntimeException(t);
          }
        }
      }
);
      confirmBox.open();
    }
 catch (    Exception e) {
      if (mainController == null || !mainController.handleLostRepository(e)) {
        throw new RuntimeException(e);
      }
    }
  }
  return false;
}
