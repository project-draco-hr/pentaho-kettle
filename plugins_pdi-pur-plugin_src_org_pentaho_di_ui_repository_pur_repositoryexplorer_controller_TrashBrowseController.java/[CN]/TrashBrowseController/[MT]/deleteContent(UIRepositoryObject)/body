{
  try {
    try {
      ExtensionPointHandler.callExtensionPoint(LogChannel.GENERAL,KettleExtensionPoint.AfterDeleteRepositoryObject.id,new RepositoryExtension(repoObject));
    }
 catch (    Exception ex) {
      LogChannel.GENERAL.logError("Error calling AfterDeleteRepositoryObject extension point",ex);
    }
    repoObject.delete();
  }
 catch (  KettleException ke) {
    if (repoDir != null) {
      repoDir.refresh();
    }
    if (ke.getCause() instanceof RepositoryObjectAccessException) {
      moveDeletePrompt(ke,repoObject,new XulDialogCallback<Object>(){
        public void onClose(        XulComponent sender,        Status returnCode,        Object retVal){
          if (returnCode == Status.ACCEPT) {
            try {
              ((UIEERepositoryDirectory)repoObject).delete(true);
            }
 catch (            Exception e) {
              if (mainController == null || !mainController.handleLostRepository(e)) {
                displayExceptionMessage(BaseMessages.getString(PKG,e.getLocalizedMessage()));
              }
            }
          }
        }
        public void onError(        XulComponent sender,        Throwable t){
          if (mainController == null || !mainController.handleLostRepository(t)) {
            throw new RuntimeException(t);
          }
        }
      }
);
    }
 else {
      if (mainController == null || !mainController.handleLostRepository(ke)) {
        throw ke;
      }
    }
  }
  if (repoObject instanceof UIRepositoryDirectory) {
    directoryBinding.fireSourceChanged();
    if (repoDir != null) {
      repoDir.refresh();
    }
  }
  selectedItemsBinding.fireSourceChanged();
}
