{
  deck=(XulDeck)document.getElementById("browse-tab-right-panel-deck");
  trashFileTable=(XulTree)document.getElementById("deleted-file-table");
  deleteButton=(XulButton)document.getElementById("delete-button");
  undeleteButton=(XulButton)document.getElementById("undelete-button");
  bf.setBindingType(Binding.Type.ONE_WAY);
  BindingConvertor<List<UIDeletedObject>,Boolean> buttonConverter=new BindingConvertor<List<UIDeletedObject>,Boolean>(){
    @Override public Boolean sourceToTarget(    List<UIDeletedObject> value){
      if (value != null && value.size() > 0) {
        return true;
      }
      return false;
    }
    @Override public List<UIDeletedObject> targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.createBinding(trashFileTable,"selectedItems",this,"selectedTrashFileItems");
  bf.createBinding(trashFileTable,"selectedItems",deleteButton,"!disabled",buttonConverter);
  bf.createBinding(trashFileTable,"selectedItems",undeleteButton,"!disabled",buttonConverter);
  bf.createBinding(trashFileTable,"selectedItems","trash-context-delete","!disabled",buttonConverter);
  bf.createBinding(trashFileTable,"selectedItems","trash-context-restore","!disabled",buttonConverter);
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(this,"trash",trashFileTable,"elements",new BindingConvertor<List<IDeletedObject>,List<UIDeletedObject>>(){
    @Override public List<UIDeletedObject> sourceToTarget(    List<IDeletedObject> trash){
      List<UIDeletedObject> newList=new ArrayList<UIDeletedObject>(trash.size());
      for (      IDeletedObject obj : trash) {
        newList.add(new UIDeletedObject(obj));
      }
      Collections.sort(newList,new UIDeletedObjectComparator());
      return newList;
    }
    @Override public List<IDeletedObject> targetToSource(    List<UIDeletedObject> elements){
      return null;
    }
  }
);
}
