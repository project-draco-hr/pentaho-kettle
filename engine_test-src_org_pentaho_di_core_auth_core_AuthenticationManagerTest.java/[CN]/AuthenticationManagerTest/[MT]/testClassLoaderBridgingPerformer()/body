{
  manager.setAuthenticationPerformerFactory(new AuthenticationPerformerFactory(){
    @Override public <ReturnType,CreateArgType,ConsumedType>AuthenticationPerformer<ReturnType,CreateArgType> create(    AuthenticationProvider authenticationProvider,    AuthenticationConsumerFactory<ReturnType,CreateArgType,ConsumedType> authenticationConsumer){
      if (AuthenticationConsumerInvocationHandler.isCompatible(authenticationConsumer.getConsumedType(),authenticationProvider)) {
        return new ClassloaderBridgingAuthenticationPerformer<ReturnType,CreateArgType,ConsumedType>(authenticationProvider,authenticationConsumer);
      }
      return null;
    }
  }
);
  manager.registerConsumerClass(DelegatingNoAuthConsumer.class);
  manager.registerConsumerClass(DelegatingUsernamePasswordConsumer.class);
  manager.registerConsumerClass(DelegatingKerberosConsumerForClassloaderBridging.class);
  KerberosAuthenticationProvider kerberosAuthenticationProvider=new KerberosAuthenticationProvider("kerb","kerb",true,"pass",true,"none");
  manager.registerAuthenticationProvider(kerberosAuthenticationProvider);
  AuthenticationConsumer<Object,KerberosAuthenticationProviderProxyInterface> consumer=mock(AuthenticationConsumer.class);
  manager.getAuthenticationPerformer(Object.class,AuthenticationConsumer.class,kerberosAuthenticationProvider.getId()).perform(consumer);
  ArgumentCaptor<KerberosAuthenticationProviderProxyInterface> captor=ArgumentCaptor.forClass(KerberosAuthenticationProviderProxyInterface.class);
  verify(consumer).consume(captor.capture());
  assertEquals(kerberosAuthenticationProvider.getId(),captor.getValue().getId());
  assertEquals(kerberosAuthenticationProvider.getDisplayName(),captor.getValue().getDisplayName());
  assertEquals(kerberosAuthenticationProvider.getPrincipal(),captor.getValue().getPrincipal());
  assertEquals(kerberosAuthenticationProvider.getPassword(),captor.getValue().getPassword());
  assertEquals(kerberosAuthenticationProvider.getKeytabLocation(),captor.getValue().getKeytabLocation());
  assertEquals(kerberosAuthenticationProvider.isUseKeytab(),captor.getValue().isUseKeytab());
  assertEquals(kerberosAuthenticationProvider.isUseExternalCredentials(),captor.getValue().isUseExternalCredentials());
}
