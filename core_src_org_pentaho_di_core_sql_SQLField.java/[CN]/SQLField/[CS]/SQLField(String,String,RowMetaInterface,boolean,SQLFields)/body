{
  this.tableAlias=tableAlias;
  this.orderField=orderField;
  this.selectFields=selectFields;
  List<String> strings=ThinUtil.splitClause(fieldClause,' ','"','(');
  if (strings.size() == 0) {
    throw new KettleSQLException("Unable to find a valid field");
  }
  if (strings.size() >= 1) {
    String value=strings.get(0);
    field=ThinUtil.stripQuoteTableAlias(value,tableAlias);
    expression=field;
    if (orderField) {
      if (strings.size() > 2) {
        throw new KettleSQLException("Too many elements for an ORDER BY argument: [" + fieldClause + "]");
      }
      if (strings.size() == 2) {
        String ascDesc=strings.get(1);
        if ("ASC".equalsIgnoreCase(ascDesc)) {
          ascending=true;
        }
 else         if ("DESC".equalsIgnoreCase(ascDesc)) {
          ascending=false;
        }
 else {
          throw new KettleSQLException("Unable to recognize sort order [" + ascDesc + "]");
        }
      }
 else {
        ascending=true;
      }
    }
 else {
      for (      SQLAggregation agg : SQLAggregation.values()) {
        if (value.toUpperCase().startsWith(agg.getKeyWord() + "(")) {
          aggregation=agg;
          int openIndex=value.indexOf('(',agg.getKeyWord().length());
          if (openIndex < 0) {
            throw new KettleSQLException("No opening bracket found after keyword [" + aggregation.getKeyWord() + "] in clause ["+ fieldClause+ "]");
          }
          int closeIndex=value.indexOf(')',openIndex);
          if (closeIndex < 0) {
            throw new KettleSQLException("No closing bracket found after keyword [" + aggregation.getKeyWord() + "]");
          }
          field=ThinUtil.stripQuotes(Const.trim(value.substring(openIndex + 1,closeIndex)),'"');
          field=ThinUtil.stripQuoteTableAlias(field,tableAlias);
          break;
        }
      }
      if (SQLAggregation.COUNT == aggregation) {
        if ("*".equals(field)) {
          countStar=true;
        }
        if (field.toUpperCase().startsWith("DISTINCT ")) {
          int lastSpaceIndex=field.lastIndexOf(' ');
          field=field.substring(lastSpaceIndex + 1);
          field=ThinUtil.stripQuoteTableAlias(field,tableAlias);
          countDistinct=true;
        }
        alias=Const.NVL(alias,expression);
      }
      if (strings.size() == 2) {
        alias=ThinUtil.stripQuotes(Const.trim(strings.get(1)),'"');
      }
      if (strings.size() == 3) {
        if (!"as".equalsIgnoreCase(strings.get(1))) {
          throw new KettleSQLException("AS keyword expected between the field and the alias in field clause: [" + fieldClause + "]");
        }
        alias=ThinUtil.stripQuotes(Const.trim(strings.get(2)),'"');
      }
    }
  }
  if (!countStar) {
    if (orderField) {
      for (      SQLField selectField : selectFields.getFields()) {
        if (selectField.getExpression().equalsIgnoreCase(field)) {
          if (selectField.getAggregation() != null) {
switch (selectField.getAggregation()) {
case COUNT:
              valueMeta=new ValueMeta(field,ValueMetaInterface.TYPE_INTEGER,15);
            break;
case MIN:
case MAX:
case AVG:
case SUM:
          valueMeta=selectField.getValueMeta();
        break;
default :
      break;
  }
  alias=selectField.getAlias();
}
 else {
  field=selectField.getField();
  alias=selectField.getAlias();
}
}
}
}
if (field.startsWith("IIF(")) {
String arguments=field.substring(4,field.length() - 1);
List<String> argsList=ThinUtil.splitClause(arguments,',','\'','(');
if (argsList.size() != 3) {
throw new KettleSQLException("The IIF function requires exactly 3 arguments");
}
iif=new IifFunction(tableAlias,Const.trim(argsList.get(0)),Const.trim(argsList.get(1)),Const.trim(argsList.get(2)),serviceFields);
}
 else if (field.toUpperCase().startsWith("CASE WHEN ") && field.toUpperCase().endsWith("END")) {
String condition=Const.trim(ThinUtil.findClause(field,"WHEN","THEN"));
String trueClause=Const.trim(ThinUtil.findClause(field,"THEN","ELSE"));
String falseClause=Const.trim(ThinUtil.findClause(field,"ELSE","END"));
iif=new IifFunction(tableAlias,condition,trueClause,falseClause,serviceFields);
}
 else {
if (valueMeta == null) {
field=ThinUtil.resolveFieldName(field,serviceFields);
valueMeta=serviceFields.searchValueMeta(field);
if (orderField && selectFields != null) {
for (SQLField selectField : selectFields.getFields()) {
  if (field.equalsIgnoreCase(selectField.getAlias())) {
    valueMeta=selectField.getValueMeta();
    break;
  }
}
}
}
if (valueMeta == null) {
ValueMetaAndData vmad=ThinUtil.extractConstant(field);
if (vmad != null) {
valueMeta=vmad.getValueMeta();
valueData=vmad.getValueData();
}
 else {
throw new KettleSQLException("The field with name [" + field + "] could not be found in the service output");
}
}
}
}
}
