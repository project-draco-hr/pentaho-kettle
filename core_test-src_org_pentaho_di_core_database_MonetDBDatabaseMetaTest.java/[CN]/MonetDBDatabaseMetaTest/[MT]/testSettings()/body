{
  assertArrayEquals(new int[]{DatabaseMeta.TYPE_ACCESS_NATIVE,DatabaseMeta.TYPE_ACCESS_ODBC,DatabaseMeta.TYPE_ACCESS_JNDI},nativeMeta.getAccessTypeList());
  assertEquals(50000,nativeMeta.getDefaultDatabasePort());
  assertEquals(-1,odbcMeta.getDefaultDatabasePort());
  assertTrue(nativeMeta.supportsAutoInc());
  assertEquals(1,nativeMeta.getNotFoundTK(true));
  assertEquals(0,nativeMeta.getNotFoundTK(false));
  assertEquals("nl.cwi.monetdb.jdbc.MonetDriver",nativeMeta.getDriverClass());
  assertEquals("sun.jdbc.odbc.JdbcOdbcDriver",odbcMeta.getDriverClass());
  assertEquals("jdbc:odbc:FOO",odbcMeta.getURL("IGNORED","IGNORED","FOO"));
  assertEquals("jdbc:monetdb://FOO:BAR/WIBBLE",nativeMeta.getURL("FOO","BAR","WIBBLE"));
  assertEquals("jdbc:monetdb://FOO/WIBBLE",nativeMeta.getURL("FOO","","WIBBLE"));
  assertFalse(nativeMeta.isFetchSizeSupported());
  assertTrue(nativeMeta.supportsBitmapIndex());
  assertFalse(nativeMeta.supportsSynonyms());
  assertTrue(nativeMeta.supportsBatchUpdates());
  assertTrue(nativeMeta.supportsSetMaxRows());
  assertArrayEquals(new String[]{"monetdb-jdbc-2.8.jar"},nativeMeta.getUsedLibraries());
  assertArrayEquals(new String[]{"IS","ISNULL","NOTNULL","IN","BETWEEN","OVERLAPS","LIKE","ILIKE","NOT","AND","OR","CHAR","VARCHAR","CLOB","BLOB","DECIMAL","DEC","NUMERIC","TINYINT","SMALLINT","INT","BIGINT","REAL","DOUBLE","BOOLEAN","DATE","TIME","TIMESTAMP","INTERVAL","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","TIMEZONE","EXTRACT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","LOCALTIME","LOCALTIMESTAMP","CURRENT_TIME","SERIAL","START","WITH","INCREMENT","CACHE","CYCLE","SEQUENCE","GETANCHOR","GETBASENAME","GETCONTENT","GETCONTEXT","GETDOMAIN","GETEXTENSION","GETFILE","GETHOST","GETPORT","GETPROTOCOL","GETQUERY","GETUSER","GETROBOTURL","ISURL","NEWURL","BROADCAST","MASKLEN","SETMASKLEN","NETMASK","HOSTMASK","NETWORK","TEXT","ABBREV","CREATE","TYPE","NAME","DROP","USER"},nativeMeta.getReservedWords());
  assertTrue(nativeMeta.supportsResultSetMetadataRetrievalOnly());
  assertEquals(Integer.MAX_VALUE,nativeMeta.getMaxVARCHARLength());
  assertTrue(nativeMeta.supportsSequences());
}
