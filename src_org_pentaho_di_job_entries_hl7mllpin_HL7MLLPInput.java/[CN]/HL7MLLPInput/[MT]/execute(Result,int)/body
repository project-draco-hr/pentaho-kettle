{
  Result result=previousResult;
  try {
    String serverName=environmentSubstitute(server);
    int portNumber=Integer.parseInt(environmentSubstitute(port));
    String messageVariable=environmentSubstitute(messageVariableName);
    String messageTypeVariable=environmentSubstitute(messageTypeVariableName);
    String versionVariable=environmentSubstitute(versionVariableName);
    MLLPSocketCacheEntry entry=MLLPSocketCache.getInstance().getServerSocketStreamSource(serverName,portNumber);
    if (entry.getJobListener() != null) {
      parentJob.addJobListener(entry.getJobListener());
    }
    MLLPTransport transport=entry.getTransport();
synchronized (transport) {
      Transportable transportable=transport.doReceive();
      String message=transportable.getMessage();
      logDetailed("Received message: " + message);
      parentJob.setVariable(messageVariable,message);
      Parser parser=new GenericParser();
      ValidationContext validationContext=new NoValidation();
      parser.setValidationContext(validationContext);
      Message msg=parser.parse(message);
      Structure structure=msg.get("MSH");
      String messageType=null;
      String version=msg.getVersion();
      if (structure instanceof ca.uhn.hl7v2.model.v21.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v21.segment.MSH)structure).getMESSAGETYPE().encode();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v22.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v22.segment.MSH)structure).getMessageType().encode();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v23.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v23.segment.MSH)structure).getMessageType().encode();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v231.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v231.segment.MSH)structure).getMessageType().getMessageStructure().getValue();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v24.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v24.segment.MSH)structure).getMessageType().getMessageStructure().getValue();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v25.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v25.segment.MSH)structure).getMessageType().getMessageStructure().getValue();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v251.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v251.segment.MSH)structure).getMessageType().getMessageStructure().getValue();
      }
 else       if (structure instanceof ca.uhn.hl7v2.model.v26.segment.MSH) {
        messageType=((ca.uhn.hl7v2.model.v26.segment.MSH)structure).getMessageType().getMessageStructure().getValue();
      }
 else {
        logError("This job entry does not support the HL7 dialect used. Found MSH class: " + structure.getClass().getName());
      }
      if (!Const.isEmpty(messageTypeVariable))       parentJob.setVariable(messageTypeVariable,messageType);
      if (!Const.isEmpty(versionVariable))       parentJob.setVariable(versionVariable,version);
    }
    result.setNrErrors(0);
    result.setResult(true);
  }
 catch (  Exception e) {
    log.logError(BaseMessages.getString(PKG,"HL7MLLPInput.Exception.UnexpectedError"),e);
    result.setNrErrors(1);
    result.setResult(false);
  }
  return result;
}
