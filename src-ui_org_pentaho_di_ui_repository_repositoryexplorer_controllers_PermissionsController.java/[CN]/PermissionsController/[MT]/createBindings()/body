{
  fileFolderLabel=(XulLabel)document.getElementById("file-folder-name");
  aclDeck=(XulDeck)document.getElementById("acl-deck");
  userRoleList=(XulListbox)document.getElementById("user-role-list");
  createCheckbox=(XulCheckbox)document.getElementById("create-checkbox");
  updateCheckbox=(XulCheckbox)document.getElementById("update-checkbox");
  readCheckbox=(XulCheckbox)document.getElementById("read-checkbox");
  deleteCheckbox=(XulCheckbox)document.getElementById("delete-checkbox");
  inheritParentPermissionCheckbox=(XulCheckbox)document.getElementById("inherit-from-parent-permission-checkbox");
  modifyCheckbox=(XulCheckbox)document.getElementById("modify-checkbox");
  manageAclsDialog=(XulDialog)document.getElementById("manage-acls-dialog");
  addAclButton=(XulButton)document.getElementById("add-acl-button");
  removeAclButton=(XulButton)document.getElementById("remove-acl-button");
  availableUserList=(XulListbox)document.getElementById("available-user-list");
  selectedUserList=(XulListbox)document.getElementById("selected-user-list");
  availableRoleList=(XulListbox)document.getElementById("available-role-list");
  selectedRoleList=(XulListbox)document.getElementById("selected-role-list");
  assignRoleButton=(XulButton)document.getElementById("assign-role");
  unassignRoleButton=(XulButton)document.getElementById("unassign-role");
  assignUserButton=(XulButton)document.getElementById("assign-user");
  unassignUserButton=(XulButton)document.getElementById("unassign-user");
  applyAclConfirmationDialog=(XulDialog)document.getElementById("apply-acl-confirmation-dialog");
  applyOnlyRadioButton=(XulRadio)document.getElementById("apply-only-radio-button");
  applyRecursiveRadioButton=(XulRadio)document.getElementById("apply-recursive-radio-button");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(manageAclsModel,"availableUserList",availableUserList,"elements");
  bf.createBinding(manageAclsModel,"selectedUserList",selectedUserList,"elements");
  bf.createBinding(manageAclsModel,"availableRoleList",availableRoleList,"elements");
  bf.createBinding(manageAclsModel,"selectedRoleList",selectedRoleList,"elements");
  BindingConvertor<int[],List<UIRepositoryObjectAcl>> indicesToObjectsConverter=new BindingConvertor<int[],List<UIRepositoryObjectAcl>>(){
    @Override public int[] targetToSource(    List<UIRepositoryObjectAcl> acls){
      if (acls != null) {
        int i=0;
        int[] retVal=new int[acls.size()];
        for (        UIRepositoryObjectAcl acl : acls) {
          retVal[i++]=viewAclsModel.getAceIndex(acl.getAce());
        }
        return retVal;
      }
      return null;
    }
    @Override public List<UIRepositoryObjectAcl> sourceToTarget(    int[] indices){
      if (indices != null && indices.length > 0) {
        List<UIRepositoryObjectAcl> retVal=new ArrayList<UIRepositoryObjectAcl>();
        for (int i=0; i < indices.length; i++) {
          retVal.add(new UIRepositoryObjectAcl(viewAclsModel.getAceAtIndex(indices[i])));
        }
        return retVal;
      }
      return null;
    }
  }
;
  BindingConvertor<int[],List<UIRepositoryUser>> indexToAvalableUserConverter=new BindingConvertor<int[],List<UIRepositoryUser>>(){
    @Override public List<UIRepositoryUser> sourceToTarget(    int[] indices){
      List<UIRepositoryUser> userList=new ArrayList<UIRepositoryUser>();
      for (int i=0; i < indices.length; i++) {
        userList.add(manageAclsModel.getAvailableUser(indices[i]));
      }
      return userList;
    }
    @Override public int[] targetToSource(    List<UIRepositoryUser> userList){
      int[] indices=new int[userList.size()];
      int i=0;
      for (      UIRepositoryUser user : userList) {
        indices[i++]=manageAclsModel.getAvailableUserIndex(user);
      }
      return indices;
    }
  }
;
  BindingConvertor<int[],List<UIRepositoryRole>> indexToAvalableRoleConverter=new BindingConvertor<int[],List<UIRepositoryRole>>(){
    @Override public List<UIRepositoryRole> sourceToTarget(    int[] indices){
      List<UIRepositoryRole> roleList=new ArrayList<UIRepositoryRole>();
      for (int i=0; i < indices.length; i++) {
        roleList.add(manageAclsModel.getAvailableRole(indices[i]));
      }
      return roleList;
    }
    @Override public int[] targetToSource(    List<UIRepositoryRole> roleList){
      int[] indices=new int[roleList.size()];
      int i=0;
      for (      UIRepositoryRole role : roleList) {
        indices[i++]=manageAclsModel.getAvailableRoleIndex(role);
      }
      return indices;
    }
  }
;
  BindingConvertor<int[],List<UIRepositoryObjectAcl>> indexToSelectedUserConverter=new BindingConvertor<int[],List<UIRepositoryObjectAcl>>(){
    @Override public List<UIRepositoryObjectAcl> sourceToTarget(    int[] indices){
      List<UIRepositoryObjectAcl> userList=new ArrayList<UIRepositoryObjectAcl>();
      for (int i=0; i < indices.length; i++) {
        userList.add(manageAclsModel.getSelectedUser(indices[i]));
      }
      return userList;
    }
    @Override public int[] targetToSource(    List<UIRepositoryObjectAcl> userList){
      int[] indices=new int[userList.size()];
      int i=0;
      for (      UIRepositoryObjectAcl user : userList) {
        indices[i++]=manageAclsModel.getSelectedUserIndex(user);
      }
      return indices;
    }
  }
;
  BindingConvertor<int[],List<UIRepositoryObjectAcl>> indexToSelctedRoleConverter=new BindingConvertor<int[],List<UIRepositoryObjectAcl>>(){
    @Override public List<UIRepositoryObjectAcl> sourceToTarget(    int[] indices){
      List<UIRepositoryObjectAcl> roleList=new ArrayList<UIRepositoryObjectAcl>();
      for (int i=0; i < indices.length; i++) {
        roleList.add(manageAclsModel.getSelectedRole(indices[i]));
      }
      return roleList;
    }
    @Override public int[] targetToSource(    List<UIRepositoryObjectAcl> roleList){
      int[] indices=new int[roleList.size()];
      int i=0;
      for (      UIRepositoryObjectAcl role : roleList) {
        indices[i++]=manageAclsModel.getSelectedRoleIndex(role);
      }
      return indices;
    }
  }
;
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(availableUserList,"selectedIndices",manageAclsModel,"selectedAvailableUsers",indexToAvalableUserConverter);
  bf.createBinding(selectedUserList,"selectedIndices",manageAclsModel,"selectedAssignedUsers",indexToSelectedUserConverter);
  bf.createBinding(availableRoleList,"selectedIndices",manageAclsModel,"selectedAvailableRoles",indexToAvalableRoleConverter);
  bf.createBinding(selectedRoleList,"selectedIndices",manageAclsModel,"selectedAssignedRoles",indexToSelctedRoleConverter);
  BindingConvertor<Integer,Boolean> accumulatorButtonConverter=new BindingConvertor<Integer,Boolean>(){
    @Override public Boolean sourceToTarget(    Integer value){
      if (value != null && value >= 0) {
        return true;
      }
      return false;
    }
    @Override public Integer targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(selectedUserList,"selectedIndex",manageAclsModel,"userUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableUserList,"selectedIndex",manageAclsModel,"userAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(manageAclsModel,"userUnassignmentPossible",unassignUserButton,"!disabled");
  bf.createBinding(manageAclsModel,"userAssignmentPossible",assignUserButton,"!disabled");
  bf.createBinding(selectedRoleList,"selectedIndex",manageAclsModel,"roleUnassignmentPossible",accumulatorButtonConverter);
  bf.createBinding(availableRoleList,"selectedIndex",manageAclsModel,"roleAssignmentPossible",accumulatorButtonConverter);
  bf.createBinding(manageAclsModel,"roleUnassignmentPossible",unassignRoleButton,"!disabled");
  bf.createBinding(manageAclsModel,"roleAssignmentPossible",assignRoleButton,"!disabled");
  bf.setBindingType(Binding.Type.ONE_WAY);
  securityBinding=bf.createBinding(getBrowseController(),"repositoryObjects",userRoleList,"elements",new BindingConvertor<List<UIRepositoryObject>,List<UIRepositoryObjectAcl>>(){
    @Override public List<UIRepositoryObjectAcl> sourceToTarget(    List<UIRepositoryObject> ro){
      if (ro == null) {
        return null;
      }
      if (ro.size() <= 0) {
        return null;
      }
      setSelectedRepositoryObject(ro);
      viewAclsModel.setRemoveEnabled(false);
      uncheckAllPermissionBox();
      if (ro.get(0) instanceof UIRepositoryDirectory) {
        UIRepositoryDirectory rd=(UIRepositoryDirectory)ro.get(0);
        try {
          rd.readAcls(viewAclsModel);
          fileFolderLabel.setValue(rd.getName());
          bf.setBindingType(Binding.Type.ONE_WAY);
          bf.createBinding(viewAclsModel,"acls",userRoleList,"elements");
        }
 catch (        AccessDeniedException ade) {
          messageBox.setTitle("Error");
          messageBox.setAcceptLabel("Ok");
          messageBox.setMessage("Unable to get acls information for " + rd.getName() + "cause : "+ ade.getLocalizedMessage());
          messageBox.open();
        }
catch (        Exception e) {
          messageBox.setTitle("Error");
          messageBox.setAcceptLabel("Ok");
          messageBox.setMessage("Unable to get acls information for " + rd.getName() + "cause : "+ e.getLocalizedMessage());
          messageBox.open();
        }
      }
 else       if (ro.get(0) instanceof UIRepositoryContent) {
        UIRepositoryContent rc=(UIRepositoryContent)ro.get(0);
        try {
          fileFolderLabel.setValue(rc.getName());
          rc.readAcls(viewAclsModel);
          bf.setBindingType(Binding.Type.ONE_WAY);
          bf.createBinding(viewAclsModel,"acls",userRoleList,"elements");
        }
 catch (        AccessDeniedException ade) {
          messageBox.setTitle("Error");
          messageBox.setAcceptLabel("Ok");
          messageBox.setMessage("Unable to get acls information for " + rc.getName() + "cause : "+ ade.getLocalizedMessage());
          messageBox.open();
        }
catch (        Exception e) {
          messageBox.setTitle("Error");
          messageBox.setAcceptLabel("Ok");
          messageBox.setMessage("Unable to get acls information for " + rc.getName() + "cause : "+ e.getLocalizedMessage());
          messageBox.open();
        }
      }
      aclDeck.setSelectedIndex(ACL);
      return viewAclsModel.getAcls();
    }
    @Override public List<UIRepositoryObject> targetToSource(    List<UIRepositoryObjectAcl> elements){
      return null;
    }
  }
);
  bf.setBindingType(Binding.Type.BI_DIRECTIONAL);
  bf.createBinding(viewAclsModel,"entriesInheriting",inheritParentPermissionCheckbox,"checked");
  bf.createBinding(userRoleList,"selectedIndices",viewAclsModel,"selectedAclList",indicesToObjectsConverter);
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(viewAclsModel,"entriesInheriting",addAclButton,"disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",removeAclButton,"!disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",createCheckbox,"!disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",updateCheckbox,"!disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",readCheckbox,"!disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",deleteCheckbox,"!disabled");
  bf.createBinding(viewAclsModel,"removeEnabled",modifyCheckbox,"!disabled");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(userRoleList,"selectedItem",this,"recipientChanged");
  bf.createBinding(getBrowseController(),"repositoryDirectories",this,"switchAclDeck");
  aclDeck.setSelectedIndex(NO_ACL);
  try {
    if (securityBinding != null) {
      securityBinding.fireSourceChanged();
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}
