{
  PrioritizeStreamsData retData=new PrioritizeStreamsData();
  RowSet in1=new BlockingRowSet(4);
  RowSet in2=new BlockingRowSet(4);
  RowSet in3=new BlockingRowSet(4);
  Object[][] data1={{"a"},{"a"},{"a"}};
  Object[][] data2={{"b"},{"b"},{"b"}};
  Object[][] data3={{"c"},{"c"},{"c"}};
  RowMetaInterface rmi=new RowMeta();
  Runnable stream1=this.getInputProduser(in1,rmi,data1);
  Runnable stream2=this.getInputProduser(in2,rmi,data2);
  Runnable stream3=this.getInputProduser(in3,rmi,data3);
  retData.outputRowMeta=rmi;
switch (code) {
case ABC:
{
      retData.rowSets=new RowSet[]{in1,in2,in3};
      break;
    }
case BAC:
{
    retData.rowSets=new RowSet[]{in2,in1,in3};
    break;
  }
case BCA:
{
  retData.rowSets=new RowSet[]{in2,in3,in1};
  break;
}
case CAB:
{
retData.rowSets=new RowSet[]{in3,in1,in2};
break;
}
case CBA:
{
retData.rowSets=new RowSet[]{in3,in2,in1};
break;
}
default :
{
Assert.fail("This test data does not supported: " + code.toString());
}
}
retData.currentRowSet=retData.rowSets[0];
retData.stepnr=0;
retData.stepnrs=3;
service.execute(stream1);
service.execute(stream2);
service.execute(stream3);
return retData;
}
