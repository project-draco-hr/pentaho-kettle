{
  init();
  ClusterGenerator clusterGenerator=new ClusterGenerator();
  try {
    clusterGenerator.launchSlaveServers();
    TransMeta transMeta=loadAndModifyTestTransformation(clusterGenerator,"test/org/pentaho/di/cluster/partitioning-repartitioning-on-cluster.ktr");
    TransExecutionConfiguration config=createClusteredTransExecutionConfiguration();
    TransSplitter transSplitter=Trans.executeClustered(transMeta,config);
    long nrErrors=Trans.monitorClusteredTransformation("cluster unit test <testParallelFileReadOnMaster>",transSplitter,null,1);
    assertEquals(0L,nrErrors);
    String[] results=new String[]{"8","9","9","9","9","8","8","8","8","8","8","8"};
    String[] files=new String[]{"000","001","002","003","004","005","006","007","008","009","010","011"};
    for (int i=0; i < results.length; i++) {
      String filename="${java.io.tmpdir}/partitioning-repartitioning-on-cluster-" + files[i] + ".txt";
      String result=loadFileContent(transMeta,filename);
      assertEqualsIgnoreWhitespacesAndCase(results[i],result);
      FileObject file=KettleVFS.getFileObject(transMeta.environmentSubstitute(filename));
      file.delete();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
 finally {
    try {
      clusterGenerator.stopSlaveServers();
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.toString());
    }
  }
}
