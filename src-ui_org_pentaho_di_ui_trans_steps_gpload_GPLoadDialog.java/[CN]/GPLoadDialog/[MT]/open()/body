{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  FocusListener lsFocusLost=new FocusAdapter(){
    public void focusLost(    FocusEvent arg0){
      setTableFieldCombo();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"GPLoadDialog.Shell.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"GPLoadDialog.Stepname.Label"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wConnection=addConnectionLine(shell,wStepname,middle,margin);
  if (input.getDatabaseMeta() == null && transMeta.nrDatabases() == 1)   wConnection.select(0);
  wConnection.addModifyListener(lsMod);
  wlSchema=new Label(shell,SWT.RIGHT);
  wlSchema.setText(BaseMessages.getString(PKG,"GPLoadDialog.TargetSchema.Label"));
  props.setLook(wlSchema);
  fdlSchema=new FormData();
  fdlSchema.left=new FormAttachment(0,0);
  fdlSchema.right=new FormAttachment(middle,-margin);
  fdlSchema.top=new FormAttachment(wConnection,margin * 2);
  wlSchema.setLayoutData(fdlSchema);
  wSchema=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSchema);
  wSchema.addModifyListener(lsMod);
  wSchema.addFocusListener(lsFocusLost);
  fdSchema=new FormData();
  fdSchema.left=new FormAttachment(middle,0);
  fdSchema.top=new FormAttachment(wConnection,margin * 2);
  fdSchema.right=new FormAttachment(100,0);
  wSchema.setLayoutData(fdSchema);
  wlTable=new Label(shell,SWT.RIGHT);
  wlTable.setText(BaseMessages.getString(PKG,"GPLoadDialog.TargetTable.Label"));
  props.setLook(wlTable);
  fdlTable=new FormData();
  fdlTable.left=new FormAttachment(0,0);
  fdlTable.right=new FormAttachment(middle,-margin);
  fdlTable.top=new FormAttachment(wSchema,margin);
  wlTable.setLayoutData(fdlTable);
  wbTable=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbTable);
  wbTable.setText(BaseMessages.getString(PKG,"GPLoadDialog.Browse.Button"));
  fdbTable=new FormData();
  fdbTable.right=new FormAttachment(100,0);
  fdbTable.top=new FormAttachment(wSchema,margin);
  wbTable.setLayoutData(fdbTable);
  wTable=new TextVar(transMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wTable);
  wTable.addModifyListener(lsMod);
  wTable.addFocusListener(lsFocusLost);
  fdTable=new FormData();
  fdTable.left=new FormAttachment(middle,0);
  fdTable.top=new FormAttachment(wSchema,margin);
  fdTable.right=new FormAttachment(wbTable,-margin);
  wTable.setLayoutData(fdTable);
  wlLoadMethod=new Label(shell,SWT.RIGHT);
  wlLoadMethod.setText(BaseMessages.getString(PKG,"GPLoadDialog.LoadMethod.Label"));
  props.setLook(wlLoadMethod);
  fdlLoadMethod=new FormData();
  fdlLoadMethod.left=new FormAttachment(0,0);
  fdlLoadMethod.right=new FormAttachment(middle,-margin);
  fdlLoadMethod.top=new FormAttachment(wTable,margin);
  wlLoadMethod.setLayoutData(fdlLoadMethod);
  wLoadMethod=new CCombo(shell,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wLoadMethod.add(BaseMessages.getString(PKG,"GPLoadDialog.AutoEndLoadMethod.Label"));
  wLoadMethod.add(BaseMessages.getString(PKG,"GPLoadDialog.ManualLoadMethod.Label"));
  wLoadMethod.select(0);
  wLoadMethod.addModifyListener(lsMod);
  props.setLook(wLoadMethod);
  fdLoadMethod=new FormData();
  fdLoadMethod.left=new FormAttachment(middle,0);
  fdLoadMethod.top=new FormAttachment(wTable,margin);
  fdLoadMethod.right=new FormAttachment(100,0);
  wLoadMethod.setLayoutData(fdLoadMethod);
  wlEraseFiles=new Label(shell,SWT.RIGHT);
  wlEraseFiles.setText(BaseMessages.getString(PKG,"GPLoadDialog.EraseFiles.Label"));
  props.setLook(wlEraseFiles);
  fdlEraseFiles=new FormData();
  fdlEraseFiles.left=new FormAttachment(0,0);
  fdlEraseFiles.top=new FormAttachment(wLoadMethod,margin);
  fdlEraseFiles.right=new FormAttachment(middle,-margin);
  wlEraseFiles.setLayoutData(fdlEraseFiles);
  wEraseFiles=new Button(shell,SWT.CHECK);
  props.setLook(wEraseFiles);
  fdEraseFiles=new FormData();
  fdEraseFiles.left=new FormAttachment(middle,0);
  fdEraseFiles.top=new FormAttachment(wLoadMethod,margin);
  fdEraseFiles.right=new FormAttachment(100,0);
  wEraseFiles.setLayoutData(fdEraseFiles);
  wEraseFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      input.setChanged();
    }
  }
);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,PropsUI.WIDGET_STYLE_TAB);
  addFieldTabItem(wTabFolder,margin,lsMod);
  addLocalHostsTabItem(wTabFolder,margin,lsMod,lsFocusLost);
  addGPConfigTabItem(wTabFolder,margin,lsMod,lsFocusLost);
  FormData fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wEraseFiles,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wTabFolder.setSelection(0);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wSQL=new Button(shell,SWT.PUSH);
  wSQL.setText(BaseMessages.getString(PKG,"GPLoadDialog.SQL.Button"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wSQL,wCancel},margin,wTabFolder);
  final Runnable runnable=new Runnable(){
    public void run(){
      StepMeta stepMeta=transMeta.findStep(stepname);
      if (stepMeta != null) {
        try {
          RowMetaInterface row=transMeta.getPrevStepFields(stepMeta);
          for (int i=0; i < row.size(); i++) {
            inputFields.put(row.getValueMeta(i).getName(),Integer.valueOf(i));
          }
          setComboBoxes();
        }
 catch (        KettleException e) {
          logError(BaseMessages.getString(PKG,"System.Dialog.GetFieldsFailed.Message"));
        }
      }
    }
  }
;
  new Thread(runnable).start();
  wbGploadPath.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wGploadPath.getText() != null) {
        dialog.setFileName(wGploadPath.getText());
      }
      dialog.setFilterNames(ALL_FILETYPES);
      if (dialog.open() != null) {
        wGploadPath.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wbControlFile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wControlFile.getText() != null) {
        dialog.setFileName(wControlFile.getText());
      }
      dialog.setFilterNames(ALL_FILETYPES);
      if (dialog.open() != null) {
        wControlFile.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wbDataFile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wDataFile.getText() != null) {
        dialog.setFileName(wDataFile.getText());
      }
      dialog.setFilterNames(ALL_FILETYPES);
      if (dialog.open() != null) {
        wDataFile.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  wbLogFile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(shell,SWT.OPEN);
      dialog.setFilterExtensions(new String[]{"*"});
      if (wLogFile.getText() != null) {
        dialog.setFileName(wLogFile.getText());
      }
      dialog.setFilterNames(ALL_FILETYPES);
      if (dialog.open() != null) {
        wLogFile.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR + dialog.getFileName());
      }
    }
  }
);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsGetLU=new Listener(){
    public void handleEvent(    Event e){
      getUpdate();
    }
  }
;
  lsSQL=new Listener(){
    public void handleEvent(    Event e){
      create();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wGetLU.addListener(SWT.Selection,lsGetLU);
  wSQL.addListener(SWT.Selection,lsSQL);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wSchema.addSelectionListener(lsDef);
  wTable.addSelectionListener(lsDef);
  wMaxErrors.addSelectionListener(lsDef);
  wControlFile.addSelectionListener(lsDef);
  wDataFile.addSelectionListener(lsDef);
  wLogFile.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wbTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getTableName(wSchema,wTable);
    }
  }
);
  wbErrorTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getTableName(wSchema,wErrorTable);
    }
  }
);
  setSize();
  getData();
  setTableFieldCombo();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
