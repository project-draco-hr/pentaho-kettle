{
  executeSqlPrecondition("complex_key_test.sql");
  TableCompareMeta meta=getTableCompareMeta();
  List<RowMetaAndData> inputData=new ArrayList<RowMetaAndData>();
  inputData.add(new RowMetaAndData(getRowMeta(),getData2()));
  TransMeta trMeta=TransTestFactory.generateTestTransformationError(null,meta,"junit");
  Map<String,RowStepCollector> result=TransTestFactory.executeTestTransformationError(trMeta,"junit",inputData);
  List<RowMetaAndData> read=result.get(TransTestFactory.DUMMY_STEPNAME).getRowsRead();
  List<RowMetaAndData> errors=result.get(TransTestFactory.ERROR_STEPNAME).getRowsRead();
  Assert.assertEquals("One row passed to positive step",1,read.size());
  Assert.assertEquals("Two rows passed to negative step",2,errors.size());
  RowMetaAndData row=read.get(0);
  Assert.assertEquals("Number errors",2,row.getInteger(8).intValue());
  Assert.assertEquals("Reference table row count",4,row.getInteger(9).intValue());
  Assert.assertEquals("Compare table row count",4,row.getInteger(10).intValue());
  Assert.assertEquals("Number of left joins errors",1,row.getInteger(11).intValue());
  Assert.assertEquals("Number of inner joins errors",0,row.getInteger(12).intValue());
  Assert.assertEquals("Number of right joins errors",1,row.getInteger(13).intValue());
  row=errors.get(0);
  Assert.assertEquals("error composite key is mentioned","KEY1 = '2' and KEY2 = '1'",row.getString(0,null));
  row=errors.get(1);
  Assert.assertEquals("error composite key is mentioned","KEY1 = '2' and KEY2 = '2'",row.getString(0,null));
}
