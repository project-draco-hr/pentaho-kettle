{
  executeSqlPrecondition("complex_key_test.sql");
  TableCompareMeta meta=getTableCompareMeta();
  List<RowMetaAndData> inputData=new ArrayList<RowMetaAndData>();
  inputData.add(new RowMetaAndData(getRowMeta(),getData3()));
  TransMeta trMeta=TransTestFactory.generateTestTransformationError(null,meta,"junit");
  Map<String,RowStepCollector> result=TransTestFactory.executeTestTransformationError(trMeta,"junit",inputData);
  List<RowMetaAndData> read=result.get(TransTestFactory.DUMMY_STEPNAME).getRowsRead();
  List<RowMetaAndData> errors=result.get(TransTestFactory.ERROR_STEPNAME).getRowsRead();
  Assert.assertEquals("One row passed to positive output",1,read.size());
  Assert.assertEquals("One row passed to negative output",1,errors.size());
  RowMetaAndData row=read.get(0);
  Assert.assertEquals("One errors reported",1,row.getInteger(8).intValue());
  Assert.assertEquals("Reference table row count",4,row.getInteger(9).intValue());
  Assert.assertEquals("Compare table row count",4,row.getInteger(10).intValue());
  Assert.assertEquals("Number of left joins errors",0,row.getInteger(11).intValue());
  Assert.assertEquals("Number of inner joins errors",1,row.getInteger(12).intValue());
  Assert.assertEquals("Number of right joins errors",0,row.getInteger(13).intValue());
  row=errors.get(0);
  Assert.assertEquals("Reported key for not match value","KEY1 = '2'",row.getString(ehlkd,null));
  Assert.assertEquals("Reported reference table value","2",row.getString(ehlrvi,null));
  Assert.assertEquals("Reported compare table value","1",row.getString(ehlcvif,null));
}
