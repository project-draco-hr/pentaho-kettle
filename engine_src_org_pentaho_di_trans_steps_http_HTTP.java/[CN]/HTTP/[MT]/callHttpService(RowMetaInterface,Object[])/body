{
  String url=determineUrl(rowMeta,rowData);
  try {
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"HTTP.Log.Connecting",url));
    }
    HttpClient httpClient=SlaveConnectionManager.getInstance().createHttpClient();
    HttpMethod method=new GetMethod(url);
    if (data.realConnectionTimeout > -1) {
      httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(data.realConnectionTimeout);
    }
    if (data.realSocketTimeout > -1) {
      httpClient.getHttpConnectionManager().getParams().setSoTimeout(data.realSocketTimeout);
    }
    if (!Const.isEmpty(data.realHttpLogin)) {
      httpClient.getParams().setAuthenticationPreemptive(true);
      Credentials defaultcreds=new UsernamePasswordCredentials(data.realHttpLogin,data.realHttpPassword);
      httpClient.getState().setCredentials(AuthScope.ANY,defaultcreds);
    }
    HostConfiguration hostConfiguration=new HostConfiguration();
    if (!Const.isEmpty(data.realProxyHost)) {
      hostConfiguration.setProxy(data.realProxyHost,data.realProxyPort);
    }
    if (data.useHeaderParameters) {
      for (int i=0; i < data.header_parameters_nrs.length; i++) {
        method.addRequestHeader(data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i]));
        if (isDebug()) {
          log.logDebug(BaseMessages.getString(PKG,"HTTPDialog.Log.HeaderValue",data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i])));
        }
      }
    }
    InputStreamReader inputStreamReader=null;
    Object[] newRow=null;
    if (rowData != null) {
      newRow=rowData.clone();
    }
    try {
      long startTime=System.currentTimeMillis();
      int statusCode=requestStatusCode(method,hostConfiguration,httpClient);
      long responseTime=System.currentTimeMillis() - startTime;
      if (log.isDetailed()) {
        log.logDetailed(BaseMessages.getString(PKG,"HTTP.Log.ResponseTime",responseTime,url));
      }
      String body=null;
      String headerString=null;
      if (isDebug()) {
        logDebug(BaseMessages.getString(PKG,"HTTP.Log.ResponseStatusCode","" + statusCode));
      }
      if (statusCode != -1) {
        if (statusCode == 204) {
          body="";
        }
 else {
          if (statusCode != 401) {
            Header[] headers=searchForHeaders(method);
            String encoding=meta.getEncoding();
            if (Const.isEmpty(encoding)) {
              String contentType=method.getResponseHeader("Content-Type").getValue();
              if (contentType != null && contentType.contains("charset")) {
                encoding=contentType.replaceFirst("^.*;\\s*charset\\s*=\\s*","").replace("\"","").trim();
              }
            }
            JSONObject json=new JSONObject();
            for (            Header header : headers) {
              json.put(header.getName(),header.getValue());
            }
            headerString=json.toJSONString();
            if (isDebug()) {
              log.logDebug(toString(),BaseMessages.getString(PKG,"HTTP.Log.ResponseHeaderEncoding",encoding));
            }
            inputStreamReader=openStream(encoding,method);
            StringBuilder bodyBuffer=new StringBuilder();
            int c;
            while ((c=inputStreamReader.read()) != -1) {
              bodyBuffer.append((char)c);
            }
            inputStreamReader.close();
            body=bodyBuffer.toString();
            if (isDebug()) {
              logDebug("Response body: " + body);
            }
          }
 else {
            throw new KettleStepException(BaseMessages.getString(PKG,"HTTP.Exception.Authentication",data.realUrl));
          }
        }
      }
      int returnFieldsOffset=rowMeta.size();
      if (!Const.isEmpty(meta.getFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,body);
        returnFieldsOffset++;
      }
      if (!Const.isEmpty(meta.getResultCodeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(statusCode));
        returnFieldsOffset++;
      }
      if (!Const.isEmpty(meta.getResponseTimeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(responseTime));
      }
      if (!Const.isEmpty(meta.getResponseHeaderFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,headerString.toString());
      }
    }
  finally {
      if (inputStreamReader != null) {
        inputStreamReader.close();
      }
      method.releaseConnection();
      if (data.realcloseIdleConnectionsTime > -1) {
        httpClient.getHttpConnectionManager().closeIdleConnections(data.realcloseIdleConnectionsTime);
      }
    }
    return newRow;
  }
 catch (  UnknownHostException uhe) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTP.Error.UnknownHostException",uhe.getMessage()));
  }
catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTP.Log.UnableGetResult",url),e);
  }
}
