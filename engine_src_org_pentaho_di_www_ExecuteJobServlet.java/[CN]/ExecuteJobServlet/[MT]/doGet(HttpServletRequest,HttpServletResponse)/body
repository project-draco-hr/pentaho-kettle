{
  if (isJettyMode() && !request.getContextPath().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug()) {
    logDebug(BaseMessages.getString(PKG,"ExecuteJobServlet.Log.ExecuteJobRequested"));
  }
  String[] knownOptions=new String[]{"rep","user","pass","job","level"};
  String repOption=request.getParameter("rep");
  String userOption=request.getParameter("user");
  String passOption=Encr.decryptPasswordOptionallyEncrypted(request.getParameter("pass"));
  String jobOption=request.getParameter("job");
  String levelOption=request.getParameter("level");
  response.setStatus(HttpServletResponse.SC_OK);
  String encoding=System.getProperty("KETTLE_DEFAULT_SERVLET_ENCODING",null);
  if (encoding != null && !Const.isEmpty(encoding.trim())) {
    response.setCharacterEncoding(encoding);
    response.setContentType("text/html; charset=" + encoding);
  }
  PrintWriter out=response.getWriter();
  try {
    final Repository repository=openRepository(repOption,userOption,passOption);
    final JobMeta jobMeta=loadJob(repository,jobOption);
    String[] parameters=jobMeta.listParameters();
    Enumeration<?> parameterNames=request.getParameterNames();
    while (parameterNames.hasMoreElements()) {
      String parameter=(String)parameterNames.nextElement();
      String[] values=request.getParameterValues(parameter);
      if (Const.indexOfString(parameter,knownOptions) < 0) {
        if (Const.indexOfString(parameter,parameters) < 0) {
          jobMeta.setVariable(parameter,values[0]);
        }
 else {
          jobMeta.setParameterValue(parameter,values[0]);
        }
      }
    }
    JobExecutionConfiguration jobExecutionConfiguration=new JobExecutionConfiguration();
    LogLevel logLevel=LogLevel.getLogLevelForCode(levelOption);
    jobExecutionConfiguration.setLogLevel(logLevel);
    JobConfiguration jobConfiguration=new JobConfiguration(jobMeta,jobExecutionConfiguration);
    String carteObjectId=UUID.randomUUID().toString();
    SimpleLoggingObject servletLoggingObject=new SimpleLoggingObject(CONTEXT_PATH,LoggingObjectType.CARTE,null);
    servletLoggingObject.setContainerObjectId(carteObjectId);
    servletLoggingObject.setLogLevel(logLevel);
    final Job job=new Job(repository,jobMeta,servletLoggingObject);
    job.setRepository(repository);
    job.setSocketRepository(getSocketRepository());
    getJobMap().addJob(jobMeta.getName(),carteObjectId,job,jobConfiguration);
    job.setContainerObjectId(carteObjectId);
    if (repository != null) {
      job.addJobListener(new JobAdapter(){
        public void jobFinished(        Job job){
          repository.disconnect();
        }
      }
);
    }
    try {
      runJob(job);
      WebResult webResult=new WebResult(WebResult.STRING_OK,"Job started",carteObjectId);
      out.println(webResult.getXML());
      out.flush();
    }
 catch (    Exception executionException) {
      String logging=KettleLogStore.getAppender().getBuffer(job.getLogChannelId(),false).toString();
      throw new KettleException("Error executing job: " + logging,executionException);
    }
  }
 catch (  Exception ex) {
    out.println(new WebResult(WebResult.STRING_ERROR,BaseMessages.getString(PKG,"ExecuteJobServlet.Error.UnexpectedError",Const.CR + Const.getStackTracker(ex))));
  }
}
