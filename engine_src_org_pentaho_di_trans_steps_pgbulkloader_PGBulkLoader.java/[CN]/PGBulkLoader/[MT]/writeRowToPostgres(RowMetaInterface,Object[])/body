{
  try {
    for (int i=0; i < data.keynrs.length; i++) {
      if (i > 0) {
        data.pgOutputStream.write(data.separator);
      }
      int index=data.keynrs[i];
      ValueMetaInterface valueMeta=rowMeta.getValueMeta(index);
      Object valueData=r[index];
      if (valueData != null) {
switch (valueMeta.getType()) {
case ValueMetaInterface.TYPE_STRING:
          data.pgOutputStream.write(data.quote);
        String quoteStr=new String(data.quote);
      String escapedString=valueMeta.getString(valueData).replace(quoteStr,quoteStr + quoteStr);
    data.pgOutputStream.write(escapedString.getBytes());
  data.pgOutputStream.write(data.quote);
break;
case ValueMetaInterface.TYPE_INTEGER:
if (valueMeta.isStorageBinaryString()) {
data.pgOutputStream.write((byte[])valueData);
}
 else {
data.pgOutputStream.write(Long.toString(valueMeta.getInteger(valueData)).getBytes());
}
break;
case ValueMetaInterface.TYPE_DATE:
switch (data.dateFormatChoices[i]) {
case PGBulkLoaderMeta.NR_DATE_MASK_PASS_THROUGH:
{
if (valueMeta.isStorageBinaryString()) {
data.pgOutputStream.write((byte[])valueData);
}
 else {
String dateString=valueMeta.getString(valueData);
if (dateString != null) {
  data.pgOutputStream.write(dateString.getBytes());
}
}
}
break;
case PGBulkLoaderMeta.NR_DATE_MASK_DATE:
{
String dateString=data.dateMeta.getString(valueMeta.getDate(valueData));
if (dateString != null) {
data.pgOutputStream.write(dateString.getBytes());
}
}
break;
case PGBulkLoaderMeta.NR_DATE_MASK_DATETIME:
{
String dateTimeString=data.dateTimeMeta.getString(valueMeta.getDate(valueData));
if (dateTimeString != null) {
data.pgOutputStream.write(dateTimeString.getBytes());
}
}
break;
}
break;
case ValueMetaInterface.TYPE_BOOLEAN:
if (valueMeta.isStorageBinaryString()) {
data.pgOutputStream.write((byte[])valueData);
}
 else {
data.pgOutputStream.write(Double.toString(valueMeta.getNumber(valueData)).getBytes());
}
break;
case ValueMetaInterface.TYPE_NUMBER:
if (valueMeta.isStorageBinaryString()) {
data.pgOutputStream.write((byte[])valueData);
}
 else {
data.pgOutputStream.write(Double.toString(valueMeta.getNumber(valueData)).getBytes());
}
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
if (valueMeta.isStorageBinaryString()) {
data.pgOutputStream.write((byte[])valueData);
}
 else {
BigDecimal big=valueMeta.getBigNumber(valueData);
if (big != null) {
data.pgOutputStream.write(big.toString().getBytes());
}
}
break;
}
}
}
data.pgOutputStream.write(data.newline);
}
 catch (Exception e) {
throw new KettleException("Error serializing rows of data to the psql command",e);
}
}
