{
  StringBuffer sb=new StringBuffer(300);
  if (meta.getPsqlpath() != null) {
    try {
      FileObject fileObject=KettleVFS.getFileObject(environmentSubstitute(meta.getPsqlpath()),getTransMeta());
      String psqlexec=Const.optionallyQuoteStringByOS(KettleVFS.getFilename(fileObject));
      sb.append(psqlexec);
    }
 catch (    KettleFileException ex) {
      throw new KettleException("Error retrieving sqlldr string",ex);
    }
  }
 else {
    if (isDetailed()) {
      logDetailed("psql defaults to system path");
    }
    sb.append("psql");
  }
  DatabaseMeta dm=meta.getDatabaseMeta();
  if (dm != null) {
    String user=Const.NVL(dm.getUsername(),"");
    sb.append(" -U ").append(environmentSubstitute(user));
    String hostname=environmentSubstitute(Const.NVL(dm.getHostname(),""));
    String portnum=environmentSubstitute(Const.NVL(dm.getDatabasePortNumberString(),""));
    sb.append(" -h ");
    sb.append(hostname);
    sb.append(" -p ");
    sb.append(portnum);
    if (meta.isStopOnError()) {
      sb.append(" -v ON_ERROR_STOP=1");
    }
    String dns=environmentSubstitute(Const.NVL(dm.getDatabaseName(),""));
    sb.append(" ");
    String overrideName=environmentSubstitute(meta.getDbNameOverride());
    if (Const.isEmpty(Const.rtrim(overrideName))) {
      sb.append(environmentSubstitute(dns));
    }
 else {
      sb.append(overrideName);
    }
  }
 else {
    throw new KettleException("No connection specified");
  }
  return sb.toString();
}
