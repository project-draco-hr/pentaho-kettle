{
  FileInputList fileInputList=new FileInputList();
  final String realfolder[]=space.environmentSubstitute(folderName);
  for (int i=0; i < realfolder.length; i++) {
    final String onefile=realfolder[i];
    final boolean onerequired=YES.equalsIgnoreCase(folderRequired[i]);
    final boolean subdirs=true;
    final FileTypeFilter filter=FileTypeFilter.ONLY_FOLDERS;
    if (Const.isEmpty(onefile))     continue;
    FileObject directoryFileObject=null;
    try {
      directoryFileObject=KettleVFS.getFileObject(onefile);
      if (directoryFileObject != null && directoryFileObject.getType() == FileType.FOLDER) {
        FileObject[] fileObjects=directoryFileObject.findFiles(new AllFileSelector(){
          public boolean traverseDescendents(          FileSelectInfo info){
            return info.getDepth() == 0 || subdirs;
          }
          public boolean includeFile(          FileSelectInfo info){
            if (info.getDepth() == 0) {
              return false;
            }
            FileObject fileObject=info.getFile();
            try {
              if (fileObject != null && filter.isFileTypeAllowed(fileObject.getType())) {
                return true;
              }
              return false;
            }
 catch (            FileSystemException ex) {
              return false;
            }
          }
        }
);
        if (fileObjects != null) {
          for (int j=0; j < fileObjects.length; j++) {
            if (fileObjects[j].exists())             fileInputList.addFile(fileObjects[j]);
          }
        }
        if (Const.isEmpty(fileObjects)) {
          if (onerequired)           fileInputList.addNonAccessibleFile(directoryFileObject);
        }
        fileInputList.sortFiles();
      }
 else {
        if (onerequired && !directoryFileObject.exists())         fileInputList.addNonExistantFile(directoryFileObject);
      }
    }
 catch (    Exception e) {
      log.logError(Const.getStackTracker(e));
    }
 finally {
      try {
        if (directoryFileObject != null)         directoryFileObject.close();
        directoryFileObject=null;
      }
 catch (      Exception e) {
      }
      ;
    }
  }
  return fileInputList;
}
