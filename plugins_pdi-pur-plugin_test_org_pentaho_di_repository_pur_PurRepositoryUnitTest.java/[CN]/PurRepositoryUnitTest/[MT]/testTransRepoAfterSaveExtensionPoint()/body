{
  PluginMockInterface pluginInterface=mock(PluginMockInterface.class);
  when(pluginInterface.getName()).thenReturn(KettleExtensionPoint.TransImportAfterSaveToRepo.id);
  when(pluginInterface.getMainType()).thenReturn((Class)ExtensionPointInterface.class);
  when(pluginInterface.getIds()).thenReturn(new String[]{"extensionpointId"});
  ExtensionPointInterface extensionPoint=mock(ExtensionPointInterface.class);
  when(pluginInterface.loadClass(ExtensionPointInterface.class)).thenReturn(extensionPoint);
  PluginRegistry.addPluginType(ExtensionPointPluginType.getInstance());
  PluginRegistry.getInstance().registerPlugin(ExtensionPointPluginType.class,pluginInterface);
  PurRepository rep=mock(PurRepository.class);
  doCallRealMethod().when(rep).saveTransOrJob(any(ISharedObjectsTransformer.class),any(RepositoryElementInterface.class),anyString(),any(Calendar.class),anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean());
  IUnifiedRepository pur=mock(IUnifiedRepository.class);
  doCallRealMethod().when(rep).setTest(same(pur));
  PurRepositoryMeta mockMeta=mock(PurRepositoryMeta.class);
  doCallRealMethod().when(rep).init(same(mockMeta));
  rep.init(mockMeta);
  rep.setTest(pur);
  RepositoryFile file=mock(RepositoryFile.class);
  when(file.getId()).thenReturn("id");
  when(pur.createFile(any(Serializable.class),any(RepositoryFile.class),any(IRepositoryFileData.class),anyString())).thenReturn(file);
  TransMeta trans=mock(TransMeta.class);
  when(trans.getRepositoryElementType()).thenReturn(RepositoryObjectType.TRANSFORMATION);
  when(trans.getName()).thenReturn("trans");
  RepositoryDirectory dir=mock(RepositoryDirectory.class);
  when(dir.getObjectId()).thenReturn(new StringObjectId("id"));
  when(trans.getRepositoryDirectory()).thenReturn(dir);
  TransMeta transFromRepo=mock(TransMeta.class);
  when(rep.loadTransformation(any(ObjectId.class),isNull(String.class))).thenReturn(transFromRepo);
  ISharedObjectsTransformer transformer=mock(ISharedObjectsTransformer.class);
  rep.saveTransOrJob(transformer,trans,"",Calendar.getInstance(),false,false,false,false,false);
  verify(extensionPoint,times(1)).callExtensionPoint(any(LogChannelInterface.class),same(transFromRepo));
}
