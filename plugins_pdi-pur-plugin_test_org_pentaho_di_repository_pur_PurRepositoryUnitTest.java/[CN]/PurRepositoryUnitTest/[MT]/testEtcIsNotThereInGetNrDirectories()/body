{
  PurRepository purRepository=new PurRepository();
  IUnifiedRepository mockRepo=mock(IUnifiedRepository.class);
  RepositoryConnectResult result=mock(RepositoryConnectResult.class);
  when(result.getUnifiedRepository()).thenReturn(mockRepo);
  IRepositoryConnector connector=mock(IRepositoryConnector.class);
  when(connector.connect(anyString(),anyString())).thenReturn(result);
  PurRepositoryMeta mockMeta=mock(PurRepositoryMeta.class);
  purRepository.init(mockMeta);
  purRepository.setPurRepositoryConnector(connector);
  ObjectId objectId=mock(ObjectId.class);
  RepositoryFile mockEtcFolder=mock(RepositoryFile.class);
  RepositoryFile mockFolderVisible=mock(RepositoryFile.class);
  RepositoryFile mockRootFolder=mock(RepositoryFile.class);
  RepositoryFileTree mockRepositoryTree=mock(RepositoryFileTree.class);
  String testId="TEST_ID";
  String visibleFolderId=testId + "2";
  when(objectId.getId()).thenReturn(testId);
  when(mockRepo.getFileById(testId)).thenReturn(mockEtcFolder);
  when(mockRepo.getFile(ClientRepositoryPaths.getEtcFolderPath())).thenReturn(mockEtcFolder);
  when(mockRepo.getFileById(visibleFolderId)).thenReturn(mockFolderVisible);
  when(mockEtcFolder.getPath()).thenReturn("/etc");
  when(mockEtcFolder.getName()).thenReturn("etc");
  when(mockEtcFolder.isFolder()).thenReturn(true);
  when(mockEtcFolder.getId()).thenReturn(testId);
  when(mockFolderVisible.getPath()).thenReturn("/visible");
  when(mockFolderVisible.getName()).thenReturn("visible");
  when(mockFolderVisible.isFolder()).thenReturn(true);
  when(mockFolderVisible.getId()).thenReturn(visibleFolderId);
  when(mockRepositoryTree.getFile()).thenReturn(mockRootFolder);
  when(mockRootFolder.getId()).thenReturn("/");
  when(mockRootFolder.getPath()).thenReturn("/");
  List<RepositoryFile> rootChildren=new ArrayList<>(Arrays.asList(mockEtcFolder,mockFolderVisible));
  when(mockRepo.getChildren(argThat(IsInstanceOf.<RepositoryRequest>instanceOf(RepositoryRequest.class)))).thenReturn(rootChildren);
  when(mockRepo.getFile("/")).thenReturn(mockRootFolder);
  RepositoryFileTree repositoryFileTree=mock(RepositoryFileTree.class);
  when(mockRepo.getTree("/",-1,null,true)).thenReturn(repositoryFileTree);
  when(repositoryFileTree.getFile()).thenReturn(mockRootFolder);
  RepositoryFileTree mockEtcFolderTree=mock(RepositoryFileTree.class);
  when(mockEtcFolderTree.getFile()).thenReturn(mockEtcFolder);
  RepositoryFileTree mockFolderVisibleTree=mock(RepositoryFileTree.class);
  when(mockFolderVisibleTree.getFile()).thenReturn(mockFolderVisible);
  when(repositoryFileTree.getChildren()).thenReturn(new ArrayList<RepositoryFileTree>(Arrays.asList(mockEtcFolderTree,mockFolderVisibleTree)));
  purRepository.connect("TEST_USER","TEST_PASSWORD");
  int children=purRepository.getRootDir().getNrSubdirectories();
  assertThat(children,equalTo(1));
}
