{
  PurRepository purRepository=new PurRepository();
  IUnifiedRepository mockRepo=mock(IUnifiedRepository.class);
  RepositoryConnectResult result=mock(RepositoryConnectResult.class);
  when(result.getUnifiedRepository()).thenReturn(mockRepo);
  IRepositoryConnector connector=mock(IRepositoryConnector.class);
  when(connector.connect(anyString(),anyString())).thenReturn(result);
  PurRepositoryMeta mockMeta=mock(PurRepositoryMeta.class);
  purRepository.init(mockMeta);
  purRepository.setPurRepositoryConnector(connector);
  ObjectId objectId=mock(ObjectId.class);
  RepositoryFile mockFile=mock(RepositoryFile.class);
  RepositoryFile mockRoot=mock(RepositoryFile.class);
  RepositoryFile mockRootFolder=mock(RepositoryFile.class);
  RepositoryObjectType repositoryObjectType=RepositoryObjectType.TRANSFORMATION;
  RepositoryFileTree mockRepositoryTree=mock(RepositoryFileTree.class);
  String testId="TEST_ID";
  String testFileId="TEST_FILE_ID";
  when(objectId.getId()).thenReturn(testId);
  when(mockRepo.getFile("/")).thenReturn(mockRoot);
  when(mockRoot.getPath()).thenReturn("/");
  when(mockRepo.getFileById(testId)).thenReturn(mockFile);
  when(mockFile.getPath()).thenReturn("/home/testuser/path.ktr");
  when(mockFile.getId()).thenReturn(testFileId);
  when(mockRepo.getTree(anyString(),anyInt(),anyString(),anyBoolean())).thenReturn(mockRepositoryTree);
  when(mockRepositoryTree.getFile()).thenReturn(mockRootFolder);
  when(mockRootFolder.getId()).thenReturn("/");
  purRepository.connect("TEST_USER","TEST_PASSWORD");
  purRepository.getObjectInformation(objectId,repositoryObjectType);
  verify(mockRepo).getAcl(testFileId);
}
