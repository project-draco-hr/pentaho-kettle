{
  meta=(MergeJoinMeta)smi;
  data=(MergeJoinData)sdi;
  int compare;
  if (first) {
    first=false;
    List<StreamInterface> infoStreams=meta.getStepIOMeta().getInfoStreams();
    data.oneRowSet=findInputRowSet(infoStreams.get(0).getStepname());
    if (data.oneRowSet == null) {
      throw new KettleException(BaseMessages.getString(PKG,"MergeJoin.Exception.UnableToFindSpecifiedStep",infoStreams.get(0).getStepname()));
    }
    data.twoRowSet=findInputRowSet(infoStreams.get(1).getStepname());
    if (data.twoRowSet == null) {
      throw new KettleException(BaseMessages.getString(PKG,"MergeJoin.Exception.UnableToFindSpecifiedStep",infoStreams.get(1).getStepname()));
    }
    data.one=getRowFrom(data.oneRowSet);
    if (data.one != null) {
      data.oneMeta=data.oneRowSet.getRowMeta();
    }
 else {
      data.one=null;
      data.oneMeta=getTransMeta().getStepFields(infoStreams.get(0).getStepname());
    }
    data.two=getRowFrom(data.twoRowSet);
    if (data.two != null) {
      data.twoMeta=data.twoRowSet.getRowMeta();
    }
 else {
      data.two=null;
      data.twoMeta=getTransMeta().getStepFields(infoStreams.get(1).getStepname());
    }
    data.outputRowMeta=new RowMeta();
    data.outputRowMeta.mergeRowMeta(data.oneMeta.clone());
    data.outputRowMeta.mergeRowMeta(data.twoMeta.clone());
    if (data.one != null) {
      data.keyNrs1=new int[meta.getKeyFields1().length];
      for (int i=0; i < data.keyNrs1.length; i++) {
        data.keyNrs1[i]=data.oneMeta.indexOfValue(meta.getKeyFields1()[i]);
        if (data.keyNrs1[i] < 0) {
          String message=BaseMessages.getString(PKG,"MergeJoin.Exception.UnableToFindFieldInReferenceStream",meta.getKeyFields1()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
    if (data.two != null) {
      data.keyNrs2=new int[meta.getKeyFields2().length];
      for (int i=0; i < data.keyNrs2.length; i++) {
        data.keyNrs2[i]=data.twoMeta.indexOfValue(meta.getKeyFields2()[i]);
        if (data.keyNrs2[i] < 0) {
          String message=BaseMessages.getString(PKG,"MergeJoin.Exception.UnableToFindFieldInReferenceStream",meta.getKeyFields2()[i]);
          logError(message);
          throw new KettleStepException(message);
        }
      }
    }
    data.one_dummy=RowDataUtil.allocateRowData(data.oneMeta.size() + data.twoMeta.size());
    data.two_dummy=new Object[data.twoMeta.size()];
  }
  if (log.isRowLevel())   logRowlevel(BaseMessages.getString(PKG,"MergeJoin.Log.DataInfo",data.oneMeta.getString(data.one) + "") + data.twoMeta.getString(data.two));
  if ((data.one == null && data.two == null) || (data.one == null && data.one_optional == false) || (data.two == null && data.two_optional == false)) {
    while (data.one != null && !isStopped())     data.one=getRowFrom(data.oneRowSet);
    while (data.two != null && !isStopped())     data.two=getRowFrom(data.twoRowSet);
    setOutputDone();
    return false;
  }
  if (data.one == null) {
    compare=-1;
  }
 else {
    if (data.two == null) {
      compare=1;
    }
 else {
      int cmp=data.oneMeta.compare(data.one,data.twoMeta,data.two,data.keyNrs1,data.keyNrs2);
      compare=cmp > 0 ? 1 : cmp < 0 ? -1 : 0;
    }
  }
switch (compare) {
case 0:
    data.one_next=getRowFrom(data.oneRowSet);
  data.two_next=getRowFrom(data.twoRowSet);
int compare1=(data.one_next == null) ? -1 : data.oneMeta.compare(data.one,data.one_next,data.keyNrs1,data.keyNrs1);
int compare2=(data.two_next == null) ? -1 : data.twoMeta.compare(data.two,data.two_next,data.keyNrs2,data.keyNrs2);
if (compare1 == 0 || compare2 == 0) {
if (data.ones == null) data.ones=new ArrayList<Object[]>();
 else data.ones.clear();
if (data.twos == null) data.twos=new ArrayList<Object[]>();
 else data.twos.clear();
data.ones.add(data.one);
if (compare1 == 0) {
data.ones.add(data.one_next);
for (; !isStopped(); ) {
  data.one_next=getRowFrom(data.oneRowSet);
  if (0 != ((data.one_next == null) ? -1 : data.oneMeta.compare(data.one,data.one_next,data.keyNrs1,data.keyNrs1))) {
    break;
  }
  data.ones.add(data.one_next);
}
if (isStopped()) return false;
}
data.twos.add(data.two);
if (compare2 == 0) {
data.twos.add(data.two_next);
for (; !isStopped(); ) {
  data.two_next=getRowFrom(data.twoRowSet);
  if (0 != ((data.two_next == null) ? -1 : data.twoMeta.compare(data.two,data.two_next,data.keyNrs2,data.keyNrs2))) {
    break;
  }
  data.twos.add(data.two_next);
}
if (isStopped()) return false;
}
for (Iterator<Object[]> oneIter=data.ones.iterator(); oneIter.hasNext() && !isStopped(); ) {
Object[] one=oneIter.next();
for (Iterator<Object[]> twoIter=data.twos.iterator(); twoIter.hasNext() && !isStopped(); ) {
  Object[] two=twoIter.next();
  Object[] oneBig=RowDataUtil.createResizedCopy(one,data.oneMeta.size() + data.twoMeta.size());
  Object[] combi=RowDataUtil.addRowData(oneBig,data.oneMeta.size(),two);
  putRow(data.outputRowMeta,combi);
}
oneIter.remove();
}
data.twos.clear();
}
 else {
Object[] outputRowData=RowDataUtil.addRowData(data.one,data.oneMeta.size(),data.two);
putRow(data.outputRowMeta,outputRowData);
}
data.one=data.one_next;
data.two=data.two_next;
break;
case 1:
if (log.isDebug()) logDebug("First stream has missing key");
if (data.one_optional == true) {
if (data.two != null) {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one_dummy,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two);
putRow(data.outputRowMeta,outputRowData);
data.two=getRowFrom(data.twoRowSet);
}
 else if (data.two_optional == false) {
while (data.one != null && !isStopped()) data.one=getRowFrom(data.oneRowSet);
while (data.two != null && !isStopped()) data.two=getRowFrom(data.twoRowSet);
setOutputDone();
return false;
}
 else {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two_dummy);
putRow(data.outputRowMeta,outputRowData);
data.one=getRowFrom(data.oneRowSet);
}
}
 else if (data.two == null && data.two_optional == true) {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two_dummy);
putRow(data.outputRowMeta,outputRowData);
data.one=getRowFrom(data.oneRowSet);
}
 else if (data.two != null) {
data.two=getRowFrom(data.twoRowSet);
}
break;
case -1:
if (log.isDebug()) logDebug("Second stream has missing key");
if (data.two_optional == true) {
if (data.one != null) {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two_dummy);
putRow(data.outputRowMeta,outputRowData);
data.one=getRowFrom(data.oneRowSet);
}
 else if (data.one_optional == false) {
while (data.one != null && !isStopped()) data.one=getRowFrom(data.oneRowSet);
while (data.two != null && !isStopped()) data.two=getRowFrom(data.twoRowSet);
setOutputDone();
return false;
}
 else {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one_dummy,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two);
putRow(data.outputRowMeta,outputRowData);
data.two=getRowFrom(data.twoRowSet);
}
}
 else if (data.one == null && data.one_optional == true) {
Object[] outputRowData=RowDataUtil.createResizedCopy(data.one_dummy,data.outputRowMeta.size());
outputRowData=RowDataUtil.addRowData(outputRowData,data.oneMeta.size(),data.two);
putRow(data.outputRowMeta,outputRowData);
data.two=getRowFrom(data.twoRowSet);
}
 else if (data.one != null) {
data.one=getRowFrom(data.oneRowSet);
}
break;
default :
logDebug("We shouldn't be here!!");
data.one=getRowFrom(data.oneRowSet);
data.two=getRowFrom(data.twoRowSet);
break;
}
if (checkFeedback(getLinesRead())) logBasic(BaseMessages.getString(PKG,"MergeJoin.LineNumber") + getLinesRead());
return true;
}
