{
  ArrayList list=new ArrayList();
  Row r=null;
  final String par="Parameter";
  final String val="Value";
  Value testValue=new Value("FIELD",Value.VALUE_TYPE_STRING);
  testValue.setLength(30);
  if (databaseInterface != null) {
    r=new Row();
    r.addValue(new Value(par,"Database type"));
    r.addValue(new Value(val,getDatabaseTypeDesc()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Access type"));
    r.addValue(new Value(val,getAccessTypeDesc()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Database name"));
    r.addValue(new Value(val,getDatabaseName()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Server hostname"));
    r.addValue(new Value(val,getHostname()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Service port"));
    r.addValue(new Value(val,getDatabasePortNumberString()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Username"));
    r.addValue(new Value(val,getUsername()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Informix server name"));
    r.addValue(new Value(val,getServername()));
    list.add(r);
    Enumeration keys=getAttributes().keys();
    while (keys.hasMoreElements()) {
      String key=(String)keys.nextElement();
      String value=getAttributes().getProperty(key);
      r=new Row();
      r.addValue(new Value(par,"Extra attribute [" + key + "]"));
      r.addValue(new Value(val,value));
      list.add(r);
    }
    r=new Row();
    r.addValue(new Value(par,"Driver class"));
    r.addValue(new Value(val,getDriverClass()));
    list.add(r);
    String pwd=getPassword();
    setPassword("password");
    String url="";
    try {
      url=getURL();
    }
 catch (    KettleDatabaseException e) {
    }
    r=new Row();
    r.addValue(new Value(par,"URL"));
    r.addValue(new Value(val,url));
    list.add(r);
    setPassword(pwd);
    r=new Row();
    r.addValue(new Value(par,"SQL: next sequence value"));
    r.addValue(new Value(val,getSeqNextvalSQL("SEQUENCE")));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supported: set fetch size"));
    r.addValue(new Value(val,isFetchSizeSupported()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"auto increment field needs placeholder"));
    r.addValue(new Value(val,needsPlaceHolder()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"SUM aggregate function"));
    r.addValue(new Value(val,getFunctionSum()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"AVG aggregate function"));
    r.addValue(new Value(val,getFunctionAverage()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"MIN aggregate function"));
    r.addValue(new Value(val,getFunctionMinimum()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"MAX aggregate function"));
    r.addValue(new Value(val,getFunctionMaximum()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"COUNT aggregate function"));
    r.addValue(new Value(val,getFunctionCount()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Schema / Table combination"));
    r.addValue(new Value(val,getSchemaTableCombination("SCHEMA","TABLE")));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"LIMIT clause for 100 rows"));
    r.addValue(new Value(val,getLimitClause(100)));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Add column statement"));
    r.addValue(new Value(val,getAddColumnStatement("TABLE",testValue,null,false,null,false)));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Drop column statement"));
    r.addValue(new Value(val,getDropColumnStatement("TABLE",testValue,null,false,null,false)));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Modify column statement"));
    r.addValue(new Value(val,getModifyColumnStatement("TABLE",testValue,null,false,null,false)));
    list.add(r);
    String reserved="";
    if (getReservedWords() != null)     for (int i=0; i < getReservedWords().length; i++)     reserved+=(i > 0 ? ", " : "") + getReservedWords()[i];
    r=new Row();
    r.addValue(new Value(par,"List of reserved words"));
    r.addValue(new Value(val,reserved));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Quote reserved words?"));
    r.addValue(new Value(val,quoteReservedWords()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"Start quote for reserved words"));
    r.addValue(new Value(val,getStartQuote()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"End quote for reserved words"));
    r.addValue(new Value(val,getEndQuote()));
    list.add(r);
    String types="";
    String slist[]=getTableTypes();
    if (slist != null)     for (int i=0; i < slist.length; i++)     types+=(i > 0 ? ", " : "") + slist[i];
    r=new Row();
    r.addValue(new Value(par,"List of JDBC table types"));
    r.addValue(new Value(val,types));
    list.add(r);
    types="";
    slist=getViewTypes();
    if (slist != null)     for (int i=0; i < slist.length; i++)     types+=(i > 0 ? ", " : "") + slist[i];
    r=new Row();
    r.addValue(new Value(par,"List of JDBC view types"));
    r.addValue(new Value(val,types));
    list.add(r);
    types="";
    slist=getSynonymTypes();
    if (slist != null)     for (int i=0; i < slist.length; i++)     types+=(i > 0 ? ", " : "") + slist[i];
    r=new Row();
    r.addValue(new Value(par,"List of JDBC synonym types"));
    r.addValue(new Value(val,types));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"use schema name to get table list?"));
    r.addValue(new Value(val,useSchemaNameForTableList()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports views?"));
    r.addValue(new Value(val,supportsViews()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports synonyms?"));
    r.addValue(new Value(val,supportsSynonyms()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"SQL: list of procedures"));
    r.addValue(new Value(val,getSQLListOfProcedures()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"SQL: truncate table"));
    r.addValue(new Value(val,getTruncateTableStatement(null,"TABLE")));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports floating point rounding on update/insert"));
    r.addValue(new Value(val,supportsFloatRoundingOnUpdate()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports timestamp-date conversion"));
    r.addValue(new Value(val,supportsTimeStampToDateConversion()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports batch updates"));
    r.addValue(new Value(val,supportsBatchUpdates()));
    list.add(r);
    r=new Row();
    r.addValue(new Value(par,"supports boolean data type"));
    r.addValue(new Value(val,supportsBooleanDataType()));
    list.add(r);
  }
  return list;
}
