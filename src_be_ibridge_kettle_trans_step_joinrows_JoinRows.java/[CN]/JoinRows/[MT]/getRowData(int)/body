{
  data.restart[filenr]=false;
  Row r=null;
  if (filenr == 0) {
    if (log.isDebug())     debug="Get row from rowset #" + filenr;
    r=getRowFrom(0);
    if (log.isRowLevel())     logRowlevel(Messages.getString("JoinRows.Log.ReadRowFromStream") + (r == null ? "<null>" : r.toString()));
  }
 else {
    if (data.cache[filenr] == null) {
      if (log.isDebug())       debug="Get row from file #" + filenr;
      if (data.dataInputStream[filenr] == null) {
        try {
          data.fileInputStream[filenr]=new FileInputStream(data.file[filenr]);
          data.dataInputStream[filenr]=new DataInputStream(data.fileInputStream[filenr]);
        }
 catch (        FileNotFoundException fnfe) {
          logError(Messages.getString("JoinRows.Log.UnableToFindOrOpenTemporaryFile") + data.file[filenr] + "] : "+ fnfe.toString());
          setErrors(1);
          stopAll();
          return null;
        }
      }
      if (log.isDebug())       debug="Read row from the data input stream #" + filenr;
      if (data.size[filenr] == 0) {
        logBasic(Messages.getString("JoinRows.Log.NoRowsComingFromStep") + data.rs[filenr].getOriginStepName() + "]");
        return null;
      }
      try {
        r=new Row(data.dataInputStream[filenr],data.row[filenr].size(),data.row[filenr]);
      }
 catch (      KettleFileException e) {
        logError(Messages.getString("JoinRows.Log.UnableToReadDataFromTempFile") + filenr + " ["+ data.file[filenr]+ "]");
        setErrors(1);
        stopAll();
        return null;
      }
      if (log.isRowLevel())       logRowlevel(Messages.getString("JoinRows.Log.ReadRowFromFile") + filenr + " : "+ r);
      data.position[filenr]++;
      if (data.position[filenr] >= data.size[filenr]) {
        debug="Close stream #" + filenr;
        try {
          data.dataInputStream[filenr].close();
          data.fileInputStream[filenr].close();
          data.dataInputStream[filenr]=null;
          data.fileInputStream[filenr]=null;
          data.position[filenr]=0;
          data.restart[filenr]=true;
        }
 catch (        IOException ioe) {
          logError(Messages.getString("JoinRows.Log.UnableToCloseInputStream") + data.file[filenr] + "] : "+ ioe.toString());
          setErrors(1);
          stopAll();
          return null;
        }
      }
    }
 else {
      if (log.isDebug())       debug="Get row from cache #" + filenr + " size="+ data.cache[filenr].size();
      if (data.size[filenr] == 0) {
        logBasic(Messages.getString("JoinRows.Log.NoRowsComingFromStep") + data.rs[filenr].getOriginStepName() + "]");
        return null;
      }
      r=(Row)data.cache[filenr].get(data.position[data.filenr]);
      data.position[filenr]++;
      if (data.position[filenr] >= data.size[filenr]) {
        debug="Position=0, restart=true for filenr=" + filenr;
        data.position[filenr]=0;
        data.restart[filenr]=true;
      }
    }
  }
  return r;
}
