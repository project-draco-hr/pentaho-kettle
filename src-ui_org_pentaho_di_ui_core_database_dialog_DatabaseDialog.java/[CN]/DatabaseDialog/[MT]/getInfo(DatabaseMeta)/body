{
  if (this.databaseMeta != null && this.databaseMeta != databaseMeta) {
    databaseMeta.initializeVariablesFrom(this.databaseMeta);
  }
  databaseMeta.getAttributes().clear();
  databaseMeta.setName(wConn.getText());
  String contype[]=wConnType.getSelection();
  if (contype.length > 0) {
    databaseMeta.setDatabaseType(contype[0]);
  }
  String acctype[]=wConnAcc.getSelection();
  if (acctype.length > 0) {
    databaseMeta.setAccessType(DatabaseMeta.getAccessType(acctype[0]));
  }
  databaseMeta.setHostname(wHostName.getText());
  databaseMeta.setDBName(wDBName.getText());
  databaseMeta.setDBPort(wPort.getText());
  databaseMeta.setUsername(wUsername.getText());
  databaseMeta.setPassword(wPassword.getText());
  databaseMeta.setServername(wServername.getText());
  databaseMeta.setStreamingResults(wStreamResult.getSelection());
  databaseMeta.setDataTablespace(wData.getText());
  databaseMeta.setIndexTablespace(wIndex.getText());
  databaseMeta.getAttributes().put(SAPR3DatabaseMeta.ATTRIBUTE_SAP_LANGUAGE,wSAPLanguage.getText());
  databaseMeta.getAttributes().put(SAPR3DatabaseMeta.ATTRIBUTE_SAP_SYSTEM_NUMBER,wSAPSystemNumber.getText());
  databaseMeta.getAttributes().put(SAPR3DatabaseMeta.ATTRIBUTE_SAP_CLIENT,wSAPClient.getText());
  databaseMeta.setQuoteAllFields(wQuoteAllFields.getSelection());
  databaseMeta.getAttributes().put(GenericDatabaseMeta.ATRRIBUTE_CUSTOM_URL,wURL.getText());
  databaseMeta.getAttributes().put(GenericDatabaseMeta.ATRRIBUTE_CUSTOM_DRIVER_CLASS,wDriverClass.getText());
  String[] remarks=databaseMeta.checkParameters();
  if (remarks.length != 0) {
    String message="";
    for (int i=0; i < remarks.length; i++)     message+="    * " + remarks[i] + Const.CR;
    throw new KettleException(Messages.getString("DatabaseDialog.Exception.IncorrectParameter") + Const.CR + message);
  }
  int nrNonEmptyOptions=wOptions.nrNonEmpty();
  for (int i=0; i < nrNonEmptyOptions; i++) {
    TableItem item=wOptions.getNonEmpty(i);
    String dbTypeStr=item.getText(1);
    String parameter=item.getText(2);
    String value=item.getText(3);
    int dbType=DatabaseMeta.getDatabaseType(dbTypeStr);
    if (!Const.isEmpty(parameter) && dbType != DatabaseMeta.TYPE_DATABASE_NONE) {
      if (Const.isEmpty(value))       value=DatabaseMeta.EMPTY_OPTIONS_STRING;
      String typedParameter=BaseDatabaseMeta.ATTRIBUTE_PREFIX_EXTRA_OPTION + DatabaseMeta.getDatabaseTypeCode(dbType) + "."+ parameter;
      databaseMeta.getAttributes().put(typedParameter,value);
    }
  }
  databaseMeta.setConnectSQL(wSQL.getText());
  databaseMeta.setUsingConnectionPool(wUsePool.getSelection());
  databaseMeta.setInitialPoolSize(Const.toInt(wInitPool.getText(),ConnectionPoolUtil.defaultInitialNrOfConnections));
  databaseMeta.setMaximumPoolSize(Const.toInt(wMaxPool.getText(),ConnectionPoolUtil.defaultMaximumNrOfConnections));
  Properties poolProperties=new Properties();
  int nrNonEmptyPoolParameters=wPoolParameters.nrNonEmpty();
  for (int i=0; i < nrNonEmptyPoolParameters; i++) {
    TableItem item=wPoolParameters.getNonEmpty(i);
    String parameterName=item.getText(1);
    String value=item.getText(3);
    if (!Const.isEmpty(parameterName) && !Const.isEmpty(value)) {
      poolProperties.setProperty(parameterName,value);
    }
  }
  databaseMeta.setConnectionPoolingProperties(poolProperties);
  databaseMeta.setPartitioned(wUseCluster.getSelection());
  PartitionDatabaseMeta[] clusterInfo=new PartitionDatabaseMeta[wCluster.nrNonEmpty()];
  for (int i=0; i < clusterInfo.length; i++) {
    TableItem tableItem=wCluster.getNonEmpty(i);
    String partitionId=tableItem.getText(1);
    String hostname=tableItem.getText(2);
    String port=tableItem.getText(3);
    String dbName=tableItem.getText(4);
    String username=tableItem.getText(5);
    String password=tableItem.getText(6);
    clusterInfo[i]=new PartitionDatabaseMeta(partitionId,hostname,port,dbName);
    clusterInfo[i].setUsername(username);
    clusterInfo[i].setPassword(password);
  }
  databaseMeta.setPartitioningInformation(clusterInfo);
}
