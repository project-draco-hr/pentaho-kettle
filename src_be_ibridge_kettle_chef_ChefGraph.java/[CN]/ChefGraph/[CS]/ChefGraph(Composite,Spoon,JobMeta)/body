{
  super(par,SWT.V_SCROLL | SWT.H_SCROLL | SWT.NO_BACKGROUND);
  shell=par.getShell();
  this.log=LogWriter.getInstance();
  this.spoon=spoon;
  this.canvas=this;
  this.jobMeta=jobMeta;
  newProps();
  selrect=null;
  hop_candidate=null;
  last_hop_split=null;
  selected_entries=null;
  selected_note=null;
  hori=getHorizontalBar();
  vert=getVerticalBar();
  hori.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  vert.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      redraw();
    }
  }
);
  hori.setThumb(100);
  vert.setThumb(100);
  hori.setVisible(true);
  vert.setVisible(true);
  setVisible(true);
  addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      ChefGraph.this.paintControl(e);
    }
  }
);
  selected_entries=null;
  lastclick=null;
  addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      clearSettings();
      Point real=screen2real(e.x,e.y);
      JobEntryCopy jobentry=jobMeta.getChefGraphEntry(real.x,real.y,iconsize);
      if (jobentry != null) {
        if (e.button == 1) {
          editEntry(jobentry);
        }
 else {
          launchStuff(jobentry);
        }
      }
 else {
        JobHopMeta online=findJobHop(real.x,real.y);
        if (online != null) {
        }
 else {
          NotePadMeta ni=jobMeta.getNote(real.x,real.y);
          if (ni != null) {
            editNote(ni);
          }
        }
      }
    }
    public void mouseDown(    MouseEvent e){
      clearSettings();
      last_button=e.button;
      Point real=screen2real(e.x,e.y);
      setToolTipText(null);
      if (e.button == 3) {
        setMenu(real.x,real.y);
        return;
      }
      JobEntryCopy je=jobMeta.getChefGraphEntry(real.x,real.y,iconsize);
      if (je != null) {
        selected_entries=jobMeta.getSelectedEntries();
        selected_icon=je;
        prev_locations=jobMeta.getSelectedLocations();
        Point p=je.getLocation();
        iconoffset=new Point(real.x - p.x,real.y - p.y);
      }
 else {
        NotePadMeta ni=jobMeta.getNote(real.x,real.y);
        if (ni != null && last_button == 1) {
          selected_note=ni;
          Point loc=ni.getLocation();
          previous_note_location=new Point(loc.x,loc.y);
          noteoffset=new Point(real.x - loc.x,real.y - loc.y);
        }
 else {
          selrect=new Rectangle(real.x,real.y,0,0);
        }
      }
      lastclick=new Point(real.x,real.y);
      redraw();
    }
    public void mouseUp(    MouseEvent e){
      boolean control=(e.stateMask & SWT.CONTROL) != 0;
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point real=screen2real(e.x,e.y);
      Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
      if (hop_candidate != null) {
        if (jobMeta.findJobHop(hop_candidate.from_entry,hop_candidate.to_entry) == null) {
          if (!hop_candidate.from_entry.evaluates() && hop_candidate.from_entry.isUnconditional()) {
            hop_candidate.setUnconditional();
          }
 else {
            hop_candidate.setConditional();
            int nr=jobMeta.findNrNextChefGraphEntries(hop_candidate.from_entry);
            if (nr == 1) {
              JobEntryCopy jge=jobMeta.findNextChefGraphEntry(hop_candidate.from_entry,0);
              JobHopMeta other=jobMeta.findJobHop(hop_candidate.from_entry,jge);
              if (other != null) {
                hop_candidate.setEvaluation(!other.getEvaluation());
              }
            }
          }
          jobMeta.addJobHop(hop_candidate);
          spoon.addUndoNew(jobMeta,new JobHopMeta[]{hop_candidate},new int[]{jobMeta.indexOfJobHop(hop_candidate)});
          spoon.refreshTree();
        }
        hop_candidate=null;
        selected_entries=null;
        last_button=0;
        redraw();
      }
 else       if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        jobMeta.unselectAll();
        jobMeta.selectInRect(selrect);
        selrect=null;
        redraw();
      }
 else       if (selected_icon != null) {
        if (e.button == 1) {
          if (lastclick.x == real.x && lastclick.y == real.y) {
            if (control) {
              selected_icon.flipSelected();
            }
 else {
              jobMeta.unselectAll();
              selected_icon.setSelected(true);
            }
          }
 else           if (selected_entries != null && prev_locations != null) {
            int indexes[]=jobMeta.getEntryIndexes(selected_entries);
            spoon.addUndoPosition(jobMeta,selected_entries,indexes,prev_locations,jobMeta.getSelectedLocations());
          }
        }
        if (split_hop) {
          JobHopMeta hi=findJobHop(icon.x + iconsize / 2,icon.y + iconsize / 2);
          if (hi != null) {
            int id=0;
            if (!spoon.props.getAutoSplit()) {
              MessageDialogWithToggle md=new MessageDialogWithToggle(shell,Messages.getString("ChefGraph.Dialog.SplitHop.Title"),null,Messages.getString("ChefGraph.Dialog.SplitHop.Message") + Const.CR + hi.from_entry.getName()+ " --> "+ hi.to_entry.getName(),MessageDialog.QUESTION,new String[]{Messages.getString("System.Button.Yes"),Messages.getString("System.Button.No")},0,Messages.getString("ChefGraph.Dialog.SplitHop.Toggle"),spoon.props.getAutoSplit());
              id=md.open();
              spoon.props.setAutoSplit(md.getToggleState());
            }
            if ((id & 0xFF) == 0) {
              JobHopMeta newhop1=new JobHopMeta(hi.from_entry,selected_icon);
              jobMeta.addJobHop(newhop1);
              JobHopMeta newhop2=new JobHopMeta(selected_icon,hi.to_entry);
              jobMeta.addJobHop(newhop2);
              if (!selected_icon.evaluates())               newhop2.setUnconditional();
              spoon.addUndoNew(jobMeta,new JobHopMeta[]{(JobHopMeta)newhop1.clone(),(JobHopMeta)newhop2.clone()},new int[]{jobMeta.indexOfJobHop(newhop1),jobMeta.indexOfJobHop(newhop2)});
              int idx=jobMeta.indexOfJobHop(hi);
              spoon.addUndoDelete(jobMeta,new JobHopMeta[]{(JobHopMeta)hi.clone()},new int[]{idx});
              jobMeta.removeJobHop(idx);
              spoon.refreshTree();
            }
          }
          split_hop=false;
        }
        selected_entries=null;
        redraw();
      }
 else       if (selected_note != null) {
        Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
        if (last_button == 1) {
          if (lastclick.x != real.x || lastclick.y != real.y) {
            int indexes[]=new int[]{jobMeta.indexOfNote(selected_note)};
            spoon.addUndoPosition(jobMeta,new NotePadMeta[]{selected_note},indexes,new Point[]{previous_note_location},new Point[]{note});
          }
        }
        selected_note=null;
      }
    }
  }
);
  addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      boolean shift=(e.stateMask & SWT.SHIFT) != 0;
      lastMove=new Point(e.x,e.y);
      if (iconoffset == null)       iconoffset=new Point(0,0);
      Point real=screen2real(e.x,e.y);
      Point icon=new Point(real.x - iconoffset.x,real.y - iconoffset.y);
      setToolTip(real.x,real.y);
      if (selected_icon != null && !selected_icon.isSelected()) {
        jobMeta.unselectAll();
        selected_icon.setSelected(true);
        selected_entries=new JobEntryCopy[]{selected_icon};
        prev_locations=new Point[]{selected_icon.getLocation()};
      }
      if (selrect != null) {
        selrect.width=real.x - selrect.x;
        selrect.height=real.y - selrect.y;
        redraw();
      }
 else       if (selected_entries != null) {
        if (last_button == 1 && !shift) {
          int dx=icon.x - selected_icon.getLocation().x;
          int dy=icon.y - selected_icon.getLocation().y;
          JobHopMeta hi=findJobHop(icon.x + iconsize / 2,icon.y + iconsize / 2);
          if (hi != null) {
            if (!jobMeta.isEntryUsedInHops(selected_icon)) {
              split_hop=true;
              last_hop_split=hi;
              hi.setSplit(true);
            }
          }
 else {
            if (last_hop_split != null) {
              last_hop_split.setSplit(false);
              last_hop_split=null;
              split_hop=false;
            }
          }
          for (int i=0; i < jobMeta.nrJobEntries(); i++) {
            JobEntryCopy je=jobMeta.getJobEntry(i);
            if (je.isSelected()) {
              je.setLocation(je.getLocation().x + dx,je.getLocation().y + dy);
            }
          }
          redraw();
        }
 else         if (last_button == 2 || (last_button == 1 && shift)) {
          JobEntryCopy si=jobMeta.getChefGraphEntry(real.x,real.y,iconsize);
          if (si != null && !selected_icon.equals(si)) {
            if (hop_candidate == null) {
              hop_candidate=new JobHopMeta(selected_icon,si);
              redraw();
            }
          }
 else {
            if (hop_candidate != null) {
              hop_candidate=null;
              redraw();
            }
          }
        }
      }
 else       if (selected_note != null) {
        if (last_button == 1) {
          Point note=new Point(real.x - noteoffset.x,real.y - noteoffset.y);
          selected_note.setLocation(note.x,note.y);
          spoon.refreshGraph();
        }
      }
    }
  }
);
  Transfer[] ttypes=new Transfer[]{XMLTransfer.getInstance()};
  DropTarget ddTarget=new DropTarget(this,DND.DROP_MOVE);
  ddTarget.setTransfer(ttypes);
  ddTarget.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent event){
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void dragLeave(    DropTargetEvent event){
      drop_candidate=null;
      redraw();
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetEvent event){
      drop_candidate=getRealPosition(canvas,event.x,event.y);
      redraw();
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Point p=getRealPosition(canvas,event.x,event.y);
      try {
        DragAndDropContainer container=(DragAndDropContainer)event.data;
        String entry=container.getData();
switch (container.getType()) {
case DragAndDropContainer.TYPE_BASE_JOB_ENTRY:
{
            JobEntryCopy jge=spoon.newJobEntry(jobMeta,entry,false);
            if (jge != null) {
              jge.setLocation(p.x,p.y);
              jge.setDrawn();
              redraw();
            }
          }
        break;
case DragAndDropContainer.TYPE_JOB_ENTRY:
{
        JobEntryCopy jge=jobMeta.findJobEntry(entry,0,true);
        if (jge != null) {
          if (jge.isStart() && jge.isDrawn()) {
            showOnlyStartOnceMessage(shell);
            return;
          }
          boolean jge_changed=false;
          JobEntryCopy before=(JobEntryCopy)jge.clone_deep();
          JobEntryCopy newjge=jge;
          if (jge.isDrawn()) {
            newjge=(JobEntryCopy)jge.clone();
            if (newjge != null) {
              log.logDebug(toString(),"entry aft = " + ((Object)jge.getEntry()).toString());
              newjge.setNr(jobMeta.findUnusedNr(newjge.getName()));
              jobMeta.addJobEntry(newjge);
              spoon.addUndoNew(jobMeta,new JobEntryCopy[]{newjge},new int[]{jobMeta.indexOfJobEntry(newjge)});
            }
 else {
              log.logDebug(toString(),"jge is not cloned!");
            }
          }
 else {
            log.logDebug(toString(),jge.toString() + " is not drawn");
            jge_changed=true;
          }
          newjge.setLocation(p.x,p.y);
          newjge.setDrawn();
          if (jge_changed) {
            spoon.addUndoChange(jobMeta,new JobEntryCopy[]{before},new JobEntryCopy[]{newjge},new int[]{jobMeta.indexOfJobEntry(newjge)});
          }
          redraw();
          spoon.refreshTree();
          log.logBasic("DropTargetEvent","DROP " + newjge.toString() + "!, type="+ JobEntryCopy.getTypeDesc(newjge.getType()));
        }
 else {
          log.logError(toString(),"Unknown job entry dropped onto the canvas.");
        }
      }
    break;
default :
  break;
}
}
 catch (Exception e) {
new ErrorDialog(shell,Messages.getString("ChefGraph.Dialog.ErrorDroppingObject.Message"),Messages.getString("Chefraph.Dialog.ErrorDroppingObject.Title"),e);
}
}
public void dropAccept(DropTargetEvent event){
drop_candidate=null;
}
}
);
addKeyListener(new KeyAdapter(){
public void keyPressed(KeyEvent e){
if (e.character == 3) {
spoon.copyJobEntries(jobMeta,jobMeta.getSelectedEntries());
}
if (e.character == 22) {
String clipcontent=spoon.fromClipboard();
if (clipcontent != null) {
if (lastMove != null) {
  spoon.pasteXML(jobMeta,clipcontent,lastMove);
}
}
}
if (e.keyCode == SWT.ESC) {
jobMeta.unselectAll();
redraw();
}
if (e.keyCode == SWT.DEL) {
JobEntryCopy copies[]=jobMeta.getSelectedEntries();
if (copies != null && copies.length > 0) {
delSelected();
}
}
if (e.keyCode == SWT.ARROW_UP && (e.stateMask & SWT.CONTROL) != 0) {
alligntop();
}
if (e.keyCode == SWT.ARROW_DOWN && (e.stateMask & SWT.CONTROL) != 0) {
allignbottom();
}
if (e.keyCode == SWT.ARROW_LEFT && (e.stateMask & SWT.CONTROL) != 0) {
allignleft();
}
if (e.keyCode == SWT.ARROW_RIGHT && (e.stateMask & SWT.CONTROL) != 0) {
allignright();
}
if (e.keyCode == SWT.ARROW_RIGHT && (e.stateMask & SWT.ALT) != 0) {
distributehorizontal();
}
if (e.keyCode == SWT.ARROW_UP && (e.stateMask & SWT.ALT) != 0) {
distributevertical();
}
if (e.keyCode == SWT.HOME && (e.stateMask & SWT.ALT) != 0) {
snaptogrid(Const.GRID_SIZE);
}
}
}
);
addKeyListener(spoon.defKeys);
setBackground(GUIResource.getInstance().getColorBackground());
}
