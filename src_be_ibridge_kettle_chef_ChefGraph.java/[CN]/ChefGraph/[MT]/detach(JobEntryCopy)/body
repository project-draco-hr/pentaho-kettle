{
  JobHopMeta hfrom=chef.jobMeta.findJobHopTo(je);
  JobHopMeta hto=chef.jobMeta.findJobHopFrom(je);
  if (hfrom != null && hto != null) {
    if (chef.jobMeta.findJobHop(hfrom.from_entry,hto.to_entry) == null) {
      JobHopMeta hnew=new JobHopMeta(hfrom.from_entry,hto.to_entry);
      chef.jobMeta.addJobHop(hnew);
      chef.addUndoNew(new JobHopMeta[]{(JobHopMeta)hnew.clone()},new int[]{chef.jobMeta.indexOfJobHop(hnew)});
    }
  }
  if (hfrom != null) {
    int fromidx=chef.jobMeta.indexOfJobHop(hfrom);
    if (fromidx >= 0) {
      chef.jobMeta.removeJobHop(fromidx);
      chef.addUndoDelete(new JobHopMeta[]{hfrom},new int[]{fromidx});
    }
  }
  if (hto != null) {
    int toidx=chef.jobMeta.indexOfJobHop(hto);
    if (toidx >= 0) {
      chef.jobMeta.removeJobHop(toidx);
      chef.addUndoDelete(new JobHopMeta[]{hto},new int[]{toidx});
    }
  }
  chef.refreshTree();
  redraw();
}
