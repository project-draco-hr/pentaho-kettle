{
  meta=(FilesToResultMeta)smi;
  data=(FilesToResultData)sdi;
  Object[] r=getRow();
  if (r == null) {
    Iterator it=data.filenames.iterator();
    while (it.hasNext()) {
      addResultFile((ResultFile)it.next());
    }
    logBasic(Messages.getString("FilesToResult.Log.AddedNrOfFiles",String.valueOf(data.filenames.size())));
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    for (int i=0; i < r.length; i++)     if (((ValueMeta)r[i]).getName().equals(meta.getFilenameField())) {
      data.filenameIndex=i;
      break;
    }
    if (data.filenameIndex < 0) {
      logError(Messages.getString("FilesToResult.Log.CouldNotFindField",meta.getFilenameField()));
      setErrors(1);
      stopAll();
      return false;
    }
  }
  ValueMeta filenameValue=(ValueMeta)r[data.filenameIndex];
  String filename=filenameValue.getString(filenameValue);
  try {
    ResultFile resultFile=new ResultFile(meta.getFileType(),KettleVFS.getFileObject(filename),getTrans().getName(),getStepname());
    data.filenames.add(resultFile);
  }
 catch (  IOException e) {
    throw new KettleException(e);
  }
  data.outputRowMeta=(RowMetaInterface)getInputRowMeta().clone();
  meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
  putRow(data.outputRowMeta,r);
  if ((linesRead > 0) && (linesRead % Const.ROWS_UPDATE) == 0)   logBasic(Messages.getString("FilesToResult.Log.LineNumber") + linesRead);
  return true;
}
