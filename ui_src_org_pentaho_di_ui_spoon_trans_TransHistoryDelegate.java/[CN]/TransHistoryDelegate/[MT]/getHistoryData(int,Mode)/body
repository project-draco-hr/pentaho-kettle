{
  final int BATCH_SIZE=Props.getInstance().getLinesInHistoryFetchSize();
  boolean moreRows=false;
  LogTableInterface logTable=models[index].logTable;
  if (transMeta != null && !Const.isEmpty(transMeta.getName()) && logTable.isDefined()) {
    Database database=null;
    try {
      DatabaseMeta logConnection=logTable.getDatabaseMeta();
      database=new Database(loggingObject,logConnection);
      database.shareVariablesWith(transMeta);
      database.connect();
      int queryLimit=0;
switch (mode) {
case ALL:
        models[index].batchCount=0;
      queryLimit=Props.getInstance().getMaxNrLinesInHistory();
    break;
case NEXT_BATCH:
  models[index].batchCount++;
queryLimit=BATCH_SIZE * models[index].batchCount;
break;
case INITIAL:
models[index].batchCount=1;
queryLimit=BATCH_SIZE;
break;
}
database.setQueryLimit(queryLimit);
String schemaTable=logTable.getQuotedSchemaTableCombination();
String sql="SELECT ";
boolean first=true;
for (LogTableField field : logTable.getFields()) {
if (field.isEnabled() && field.isVisible()) {
if (!first) sql+=", ";
first=false;
sql+=logConnection.quoteField(field.getFieldName());
}
}
sql+=" FROM " + schemaTable;
RowMetaAndData params=new RowMetaAndData();
LogTableField nameField=logTable.getNameField();
LogTableField keyField=logTable.getKeyField();
if (nameField != null) {
if (transMeta.isUsingAClusterSchema()) {
sql+=" WHERE " + logConnection.quoteField(nameField.getFieldName()) + " LIKE ?";
params.addValue(new ValueMeta("transname_literal",ValueMetaInterface.TYPE_STRING),transMeta.getName());
sql+=" OR    " + logConnection.quoteField(nameField.getFieldName()) + " LIKE ?";
params.addValue(new ValueMeta("transname_cluster",ValueMetaInterface.TYPE_STRING),transMeta.getName() + " (%");
}
 else {
sql+=" WHERE " + logConnection.quoteField(nameField.getFieldName()) + " = ?";
params.addValue(new ValueMeta("transname_literal",ValueMetaInterface.TYPE_STRING),transMeta.getName());
}
}
if (keyField != null && keyField.isEnabled()) {
sql+=" ORDER BY " + logConnection.quoteField(keyField.getFieldName()) + " DESC";
}
ResultSet resultSet=database.openQuery(sql,params.getRowMeta(),params.getData());
List<Object[]> rows=new ArrayList<Object[]>();
Object[] rowData=database.getRow(resultSet);
int rowsFetched=1;
while (rowData != null) {
rows.add(rowData);
rowData=database.getRow(resultSet);
rowsFetched++;
}
if (rowsFetched >= queryLimit) {
moreRows=true;
}
database.closeQuery(resultSet);
models[index].rows=rows;
}
 catch (Exception e) {
LogChannel.GENERAL.logError("Unable to get rows of data from logging table " + models[index].logTable,e);
models[index].rows=new ArrayList<Object[]>();
}
 finally {
if (database != null) database.disconnect();
}
}
 else {
models[index].rows=new ArrayList<Object[]>();
}
return moreRows;
}
