{
  try {
    ObjectId[] dirids=dirTree.getDirectoryIDs();
    System.out.println("Going through " + dirids.length + " directories in directory ["+ dirTree.getPath()+ "]");
    if (monitor != null) {
      monitor.subTask("Exporting the jobs...");
    }
    boolean continueOnError=true;
    for (int d=0; d < dirids.length && (monitor == null || (monitor != null && !monitor.isCanceled())); d++) {
      RepositoryDirectoryInterface repdir=dirTree.findDirectory(dirids[d]);
      String[] jobs=repository.getJobNames(dirids[d],false);
      for (int i=0; i < jobs.length && (monitor == null || (monitor != null && !monitor.isCanceled())); i++) {
        try {
          JobMeta jobMeta=repository.loadJob(jobs[i],repdir,null,null);
          jobMeta.setRepository(repository);
          System.out.println("Loading/Exporting job [" + repdir.getPath() + " : "+ jobs[i]+ "]");
          if (monitor != null) {
            monitor.subTask("Exporting job [" + jobs[i] + "]");
          }
          convertFromFileRepository(jobMeta);
          try {
            RepositoryImporter.validateImportedElement(importRules,jobMeta);
          }
 catch (          KettleException ve) {
            continueOnError=false;
            throw (ve);
          }
          writer.write(jobMeta.getXML() + Const.CR);
        }
 catch (        KettleException ke) {
          if (continueOnError) {
            log.logError("An error occurred reading job [" + jobs[i] + "] from directory ["+ repdir+ "] : ",ke);
          }
 else {
            throw ke;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("Error while exporting repository jobs",e);
  }
}
