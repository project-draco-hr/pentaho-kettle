{
  DatabaseConnectionMap map=DatabaseConnectionMap.getInstance();
  List<Database> databaseList=new ArrayList<Database>(map.getMap().values());
  for (  Database database : databaseList) {
    if (database.getConnectionGroup().equals(getThreadName())) {
      try {
        if (result.getNrErrors() > 0) {
          try {
            database.rollback(true);
            log.logBasic(toString(),Messages.getString("Trans.Exception.TransactionsRolledBackOnConnection",database.toString()));
          }
 catch (          Exception e) {
            throw new KettleDatabaseException(Messages.getString("Trans.Exception.ErrorRollingBackUniqueConnection",database.toString()),e);
          }
        }
 else {
          try {
            database.commit(true);
            log.logBasic(toString(),Messages.getString("Trans.Exception.TransactionsCommittedOnConnection",database.toString()));
          }
 catch (          Exception e) {
            throw new KettleDatabaseException(Messages.getString("Trans.Exception.ErrorCommittingUniqueConnection",database.toString()),e);
          }
        }
        database.closeConnectionOnly();
        map.removeConnection(database.getConnectionGroup(),database.getPartitionId(),database);
      }
 catch (      Exception e) {
        log.logError(toString(),Messages.getString("Trans.Exception.ErrorHandlingTransformationTransaction",database.toString()),e);
        result.setNrErrors(result.getNrErrors() + 1);
      }
    }
  }
}
