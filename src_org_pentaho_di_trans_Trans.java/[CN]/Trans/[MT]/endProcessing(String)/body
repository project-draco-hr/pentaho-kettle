{
  Result result=getResult();
  if (transMeta.isUsingUniqueConnections()) {
    closeUniqueDatabaseConnections(result);
  }
  logDate=new Date();
  String log_string=null;
  if (transMeta.isLogfieldUsed()) {
    log_string=stringAppender.getBuffer().append(Const.CR + "END" + Const.CR).toString();
    log.removeAppender(stringAppender);
  }
  DatabaseMeta logcon=transMeta.getLogConnection();
  if (logcon != null) {
    Database ldb=new Database(logcon);
    ldb.shareVariablesWith(this);
    try {
      ldb.connect();
      if (!Const.isEmpty(transMeta.getLogTable())) {
        ldb.writeLogRecord(transMeta.getLogTable(),transMeta.isBatchIdUsed(),getBatchId(),false,transMeta.getName(),status,result.getNrLinesRead(),result.getNrLinesWritten(),result.getNrLinesUpdated(),result.getNrLinesInput() + result.getNrFilesRetrieved(),result.getNrLinesOutput(),result.getNrErrors(),startDate,endDate,logDate,depDate,currentDate,log_string);
      }
      if (!Const.isEmpty(transMeta.getStepPerformanceLogTable()) && transMeta.isCapturingStepPerformanceSnapShots()) {
        RowMetaInterface rowMeta=Database.getStepPerformanceLogrecordFields();
        ldb.prepareInsert(rowMeta,transMeta.getStepPerformanceLogTable());
        for (        String key : stepPerformanceSnapShots.keySet()) {
          List<StepPerformanceSnapShot> snapshots=stepPerformanceSnapShots.get(key);
          long seqNr=1;
          for (          StepPerformanceSnapShot snapshot : snapshots) {
            Object[] row=new Object[rowMeta.size()];
            int outputIndex=0;
            row[outputIndex++]=new Long(getBatchId());
            row[outputIndex++]=new Long(seqNr++);
            row[outputIndex++]=snapshot.getDate();
            row[outputIndex++]=transMeta.getName();
            row[outputIndex++]=snapshot.getStepName();
            row[outputIndex++]=new Long(snapshot.getStepCopy());
            row[outputIndex++]=new Long(snapshot.getLinesRead());
            row[outputIndex++]=new Long(snapshot.getLinesWritten());
            row[outputIndex++]=new Long(snapshot.getLinesUpdated());
            row[outputIndex++]=new Long(snapshot.getLinesInput());
            row[outputIndex++]=new Long(snapshot.getLinesOutput());
            row[outputIndex++]=new Long(snapshot.getLinesRejected());
            row[outputIndex++]=new Long(snapshot.getErrors());
            row[outputIndex++]=new Long(snapshot.getInputBufferSize());
            row[outputIndex++]=new Long(snapshot.getOutputBufferSize());
            ldb.setValuesInsert(rowMeta,row);
            ldb.insertRow(true);
          }
        }
        ldb.insertFinished(true);
      }
    }
 catch (    Exception e) {
      throw new KettleException(Messages.getString("Trans.Exception.ErrorWritingLogRecordToTable") + transMeta.getLogTable() + "]",e);
    }
 finally {
      ldb.disconnect();
    }
  }
  return true;
}
