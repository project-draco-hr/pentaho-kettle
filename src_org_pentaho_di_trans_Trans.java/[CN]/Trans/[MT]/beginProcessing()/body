{
  TransLogTable transLogTable=transMeta.getTransLogTable();
  int intervalInSeconds=Const.toInt(environmentSubstitute(transLogTable.getLogInterval()),-1);
  try {
    String logTable=transLogTable.getTableName();
    SimpleDateFormat df=new SimpleDateFormat(REPLAY_DATE_FORMAT);
    log.logBasic(BaseMessages.getString(PKG,"Trans.Log.TransformationCanBeReplayed") + df.format(currentDate));
    try {
      if (transLogTableDatabaseConnection != null && !Const.isEmpty(logTable) && !Const.isEmpty(transMeta.getName())) {
        transLogTableDatabaseConnection.writeLogRecord(transLogTable,LogStatus.START,this);
        if (intervalInSeconds > 0) {
          final Timer timer=new Timer(getName() + " - interval logging timer");
          TimerTask timerTask=new TimerTask(){
            public void run(){
              try {
                endProcessing(LogStatus.RUNNING);
              }
 catch (              Exception e) {
                log.logError(BaseMessages.getString(PKG,"Trans.Exception.UnableToPerformIntervalLogging"),e);
                errors.incrementAndGet();
                stopAll();
              }
            }
          }
;
          timer.schedule(timerTask,intervalInSeconds * 1000,intervalInSeconds * 1000);
          addTransListener(new TransListener(){
            public void transFinished(            Trans trans){
              timer.cancel();
            }
          }
);
        }
        addTransListener(new TransListener(){
          public void transFinished(          Trans trans) throws KettleException {
            try {
              if (trans.isStopped()) {
                endProcessing(LogStatus.STOP);
              }
 else {
                endProcessing(LogStatus.END);
              }
            }
 catch (            KettleException e) {
              throw new KettleException(BaseMessages.getString(PKG,"Trans.Exception.UnableToPerformLoggingAtTransEnd"),e);
            }
          }
        }
);
      }
    }
 catch (    KettleException e) {
      throw new KettleTransException(BaseMessages.getString(PKG,"Trans.Exception.ErrorWritingLogRecordToTable",logTable),e);
    }
 finally {
      if (transLogTableDatabaseConnection != null && (intervalInSeconds <= 0)) {
        transLogTableDatabaseConnection.disconnect();
        transLogTableDatabaseConnection=null;
      }
    }
  }
 catch (  KettleException e) {
    throw new KettleTransException(BaseMessages.getString(PKG,"Trans.Exception.UnableToBeginProcessingTransformation"),e);
  }
}
