{
  try {
    currentDate=new Date();
    logDate=new Date();
    startDate=Const.MIN_DATE;
    endDate=currentDate;
    SimpleDateFormat df=new SimpleDateFormat(REPLAY_DATE_FORMAT);
    log.logBasic(toString(),Messages.getString("Trans.Log.TransformationCanBeReplayed") + df.format(currentDate));
    Database ldb=null;
    try {
      DatabaseMeta logcon=transMeta.getLogConnection();
      if (logcon != null) {
        if (transMeta.getLogTable() == null) {
          throw new KettleTransException(Messages.getString("Trans.Exception.NoLogTableDefined"));
        }
        ldb=new Database(logcon);
        ldb.shareVariablesWith(this);
        log.logDetailed(toString(),Messages.getString("Trans.Log.OpeningLogConnection","" + transMeta.getLogConnection()));
        ldb.connect();
        Object[] lastr=ldb.getLastLogDate(transMeta.getLogTable(),transMeta.getName(),false,Messages.getString("Trans.Row.Status.End"));
        if (lastr != null && lastr.length > 0) {
          startDate=(Date)lastr[0];
          log.logDetailed(toString(),Messages.getString("Trans.Log.StartDateFound") + startDate);
        }
        if (transMeta.getMaxDateConnection() != null && transMeta.getMaxDateTable() != null && transMeta.getMaxDateTable().length() > 0 && transMeta.getMaxDateField() != null && transMeta.getMaxDateField().length() > 0) {
          log.logDetailed(toString(),Messages.getString("Trans.Log.LookingForMaxdateConnection","" + transMeta.getMaxDateConnection()));
          DatabaseMeta maxcon=transMeta.getMaxDateConnection();
          if (maxcon != null) {
            Database maxdb=new Database(maxcon);
            maxdb.shareVariablesWith(this);
            try {
              log.logDetailed(toString(),Messages.getString("Trans.Log.OpeningMaximumDateConnection"));
              maxdb.connect();
              String sql="SELECT MAX(" + transMeta.getMaxDateField() + ") FROM "+ transMeta.getMaxDateTable();
              RowMetaAndData r1=maxdb.getOneRow(sql);
              if (r1 != null) {
                Date maxvalue=r1.getRowMeta().getDate(r1.getData(),0);
                if (maxvalue != null) {
                  log.logDetailed(toString(),Messages.getString("Trans.Log.LastDateFoundOnTheMaxdateConnection") + r1);
                  endDate.setTime((long)(maxvalue.getTime() + (transMeta.getMaxDateOffset() * 1000)));
                }
              }
 else {
                log.logDetailed(toString(),Messages.getString("Trans.Log.NoLastDateFoundOnTheMaxdateConnection"));
              }
            }
 catch (            KettleException e) {
              throw new KettleTransException(Messages.getString("Trans.Exception.ErrorConnectingToDatabase","" + transMeta.getMaxDateConnection()),e);
            }
 finally {
              maxdb.disconnect();
            }
          }
 else {
            throw new KettleTransException(Messages.getString("Trans.Exception.MaximumDateConnectionCouldNotBeFound","" + transMeta.getMaxDateConnection()));
          }
        }
        if (transMeta.nrDependencies() > 0) {
          log.logDetailed(toString(),Messages.getString("Trans.Log.CheckingForMaxDependencyDate"));
          depDate=Const.MIN_DATE;
          Date maxdepdate=Const.MIN_DATE;
          if (lastr != null && lastr.length > 0) {
            Date dep=(Date)lastr[1];
            if (dep != null) {
              maxdepdate=dep;
              depDate=dep;
            }
          }
          for (int i=0; i < transMeta.nrDependencies(); i++) {
            TransDependency td=transMeta.getDependency(i);
            DatabaseMeta depcon=td.getDatabase();
            if (depcon != null) {
              Database depdb=new Database(depcon);
              try {
                depdb.connect();
                String sql="SELECT MAX(" + td.getFieldname() + ") FROM "+ td.getTablename();
                RowMetaAndData r1=depdb.getOneRow(sql);
                if (r1 != null) {
                  Date maxvalue=(Date)r1.getData()[0];
                  if (maxvalue != null) {
                    log.logDetailed(toString(),Messages.getString("Trans.Log.FoundDateFromTable",td.getTablename(),"." + td.getFieldname()," = " + maxvalue.toString()));
                    if (maxvalue.getTime() > maxdepdate.getTime()) {
                      maxdepdate=maxvalue;
                    }
                  }
 else {
                    throw new KettleTransException(Messages.getString("Trans.Exception.UnableToGetDependencyInfoFromDB",td.getDatabase().getName() + ".",td.getTablename() + ".",td.getFieldname()));
                  }
                }
 else {
                  throw new KettleTransException(Messages.getString("Trans.Exception.UnableToGetDependencyInfoFromDB",td.getDatabase().getName() + ".",td.getTablename() + ".",td.getFieldname()));
                }
              }
 catch (              KettleException e) {
                throw new KettleTransException(Messages.getString("Trans.Exception.ErrorInDatabase","" + td.getDatabase()),e);
              }
 finally {
                depdb.disconnect();
              }
            }
 else {
              throw new KettleTransException(Messages.getString("Trans.Exception.ConnectionCouldNotBeFound","" + td.getDatabase()));
            }
            log.logDetailed(toString(),Messages.getString("Trans.Log.Maxdepdate") + (XMLHandler.date2string(maxdepdate)));
          }
          if (maxdepdate.getTime() > depDate.getTime()) {
            depDate=maxdepdate;
            startDate=Const.MIN_DATE;
          }
        }
 else {
          depDate=currentDate;
        }
        if (transMeta.isBatchIdUsed()) {
          Long id_batch=ldb.getNextValue(transMeta.getCounters(),transMeta.getLogTable(),"ID_BATCH");
          setBatchId(id_batch.longValue());
        }
      }
      if (transMeta.getMaxDateDifference() > 0.0 && startDate.getTime() > Const.MIN_DATE.getTime()) {
        Date maxdesired=new Date(startDate.getTime() + ((long)transMeta.getMaxDateDifference() * 1000));
        if (endDate.compareTo(maxdesired) > 0)         endDate=maxdesired;
      }
      if (Const.isEmpty(transMeta.getName()) && logcon != null && transMeta.getLogTable() != null) {
        throw new KettleException(Messages.getString("Trans.Exception.NoTransnameAvailableForLogging"));
      }
      if (logcon != null && transMeta.getLogTable() != null && transMeta.getName() != null) {
        ldb.writeLogRecord(transMeta.getLogTable(),transMeta.isBatchIdUsed(),getBatchId(),false,transMeta.getName(),"start",0L,0L,0L,0L,0L,0L,startDate,endDate,logDate,depDate,currentDate,null);
      }
    }
 catch (    KettleException e) {
      throw new KettleTransException(Messages.getString("Trans.Exception.ErrorWritingLogRecordToTable",transMeta.getLogTable()),e);
    }
 finally {
      if (ldb != null)       ldb.disconnect();
    }
    if (transMeta.isLogfieldUsed()) {
      stringAppender=LogWriter.createStringAppender();
      log.addAppender(stringAppender);
      stringAppender.setBuffer(new StringBuffer(Messages.getString("Trans.Log.Start") + Const.CR));
    }
  }
 catch (  KettleException e) {
    throw new KettleTransException(Messages.getString("Trans.Exception.UnableToBeginProcessingTransformation"),e);
  }
}
