{
  try {
    TransMeta master=transSplitter.getMaster();
    final SlaveServer[] slaves=transSplitter.getSlaveTargets();
    final Thread[] threads=new Thread[slaves.length];
    final Throwable[] errors=new Throwable[slaves.length];
    SlaveServer masterServer=null;
    List<StepMeta> masterSteps=master.getTransHopSteps(false);
    if (masterSteps.size() > 0) {
      masterServer=transSplitter.getMasterServer();
      if (executionConfiguration.isClusterPosting()) {
        TransConfiguration transConfiguration=new TransConfiguration(master,executionConfiguration);
        Map<String,String> variables=transConfiguration.getTransExecutionConfiguration().getVariables();
        variables.put(Const.INTERNAL_VARIABLE_CLUSTER_SIZE,Integer.toString(slaves.length));
        variables.put(Const.INTERNAL_VARIABLE_CLUSTER_MASTER,"Y");
        String masterReply=masterServer.sendXML(transConfiguration.getXML(),AddTransServlet.CONTEXT_PATH + "/?xml=Y");
        WebResult webResult=WebResult.fromXMLString(masterReply);
        if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
          throw new KettleException("An error occurred sending the master transformation: " + webResult.getMessage());
        }
      }
    }
    for (int i=0; i < slaves.length; i++) {
      final int index=i;
      final TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
      if (executionConfiguration.isClusterPosting()) {
        Runnable runnable=new Runnable(){
          public void run(){
            try {
              TransExecutionConfiguration slaveTransExecutionConfiguration=(TransExecutionConfiguration)executionConfiguration.clone();
              TransConfiguration transConfiguration=new TransConfiguration(slaveTrans,slaveTransExecutionConfiguration);
              Map<String,String> variables=slaveTransExecutionConfiguration.getVariables();
              variables.put(Const.INTERNAL_VARIABLE_SLAVE_SERVER_NUMBER,Integer.toString(index));
              variables.put(Const.INTERNAL_VARIABLE_SLAVE_SERVER_NAME,slaves[index].getName());
              variables.put(Const.INTERNAL_VARIABLE_CLUSTER_SIZE,Integer.toString(slaves.length));
              variables.put(Const.INTERNAL_VARIABLE_CLUSTER_MASTER,"N");
              String slaveReply=slaves[index].sendXML(transConfiguration.getXML(),AddTransServlet.CONTEXT_PATH + "/?xml=Y");
              WebResult webResult=WebResult.fromXMLString(slaveReply);
              if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
                throw new KettleException("An error occurred sending a slave transformation: " + webResult.getMessage());
              }
            }
 catch (            Throwable t) {
              errors[index]=t;
            }
          }
        }
;
        threads[i]=new Thread(runnable);
      }
    }
    for (int i=0; i < threads.length; i++) {
      if (threads[i] != null) {
        threads[i].start();
      }
    }
    for (int i=0; i < threads.length; i++) {
      if (threads[i] != null) {
        threads[i].join();
        if (errors[i] != null)         throw new KettleException(errors[i]);
      }
    }
    if (executionConfiguration.isClusterPosting()) {
      if (executionConfiguration.isClusterPreparing()) {
        if (masterSteps.size() > 0) {
          String masterReply=masterServer.getContentFromServer(PrepareExecutionTransServlet.CONTEXT_PATH + "/?name=" + master.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(masterReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while preparing the execution of the master transformation: " + webResult.getMessage());
          }
        }
        for (int i=0; i < slaves.length; i++) {
          TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
          String slaveReply=slaves[i].getContentFromServer(PrepareExecutionTransServlet.CONTEXT_PATH + "/?name=" + slaveTrans.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(slaveReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while preparing the execution of a slave transformation: " + webResult.getMessage());
          }
        }
      }
      if (executionConfiguration.isClusterStarting()) {
        if (masterSteps.size() > 0) {
          String masterReply=masterServer.getContentFromServer(StartExecutionTransServlet.CONTEXT_PATH + "/?name=" + master.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(masterReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while starting the execution of the master transformation: " + webResult.getMessage());
          }
        }
        for (int i=0; i < slaves.length; i++) {
          TransMeta slaveTrans=(TransMeta)transSplitter.getSlaveTransMap().get(slaves[i]);
          String slaveReply=slaves[i].getContentFromServer(StartExecutionTransServlet.CONTEXT_PATH + "/?name=" + slaveTrans.getName()+ "&xml=Y");
          WebResult webResult=WebResult.fromXMLString(slaveReply);
          if (!webResult.getResult().equalsIgnoreCase(WebResult.STRING_OK)) {
            throw new KettleException("An error occurred while starting the execution of a slave transformation: " + webResult.getMessage());
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException("There was an error during transformation split",e);
  }
}
