{
  long errors=0L;
  SlaveServer[] slaveServers=transSplitter.getSlaveTargets();
  TransMeta[] slaves=transSplitter.getSlaves();
  SlaveServer masterServer;
  try {
    masterServer=transSplitter.getMasterServer();
  }
 catch (  KettleException e) {
    log.logError("Error getting the master server",e);
    masterServer=null;
    errors++;
  }
  TransMeta masterTransMeta=transSplitter.getMaster();
  TransMeta transMeta=transSplitter.getOriginalTransformation();
  boolean allFinished=false;
  while (!allFinished && errors == 0 && (parentJob == null || !parentJob.isStopped())) {
    allFinished=true;
    errors=0L;
    for (int s=0; s < slaveServers.length && allFinished && errors == 0; s++) {
      try {
        SlaveServerTransStatus transStatus=slaveServers[s].getTransStatus(slaves[s].getName());
        if (transStatus.isRunning()) {
          if (log.isDetailed())           log.logDetailed("Slave transformation on '" + slaveServers[s] + "' is still running.");
          allFinished=false;
        }
 else {
          if (log.isDetailed())           log.logDetailed("Slave transformation on '" + slaveServers[s] + "' has finished.");
        }
        errors+=transStatus.getNrStepErrors();
      }
 catch (      Exception e) {
        errors+=1;
        log.logError("Unable to contact slave server '" + slaveServers[s].getName() + "' to check slave transformation : "+ e.toString());
      }
    }
    if (allFinished && errors == 0 && masterTransMeta != null && masterTransMeta.nrSteps() > 0) {
      try {
        SlaveServerTransStatus transStatus=masterServer.getTransStatus(masterTransMeta.getName());
        if (transStatus.isRunning()) {
          if (log.isDetailed())           log.logDetailed("Master transformation is still running.");
          allFinished=false;
        }
 else {
          if (log.isDetailed())           log.logDetailed("Master transformation has finished.");
        }
        Result result=transStatus.getResult(transSplitter.getOriginalTransformation());
        errors+=result.getNrErrors();
      }
 catch (      Exception e) {
        errors+=1;
        log.logError("Unable to contact master server '" + masterServer.getName() + "' to check master transformation : "+ e.toString());
      }
    }
    if ((parentJob != null && parentJob.isStopped()) || errors != 0) {
      for (int s=0; s < slaveServers.length && allFinished && errors == 0; s++) {
        try {
          WebResult webResult=slaveServers[s].stopTransformation(slaves[s].getName());
          if (!WebResult.STRING_OK.equals(webResult.getResult())) {
            log.logError("Unable to stop slave transformation '" + slaves[s].getName() + "' : "+ webResult.getMessage());
          }
        }
 catch (        Exception e) {
          errors+=1;
          log.logError("Unable to contact slave server '" + slaveServers[s].getName() + "' to stop transformation : "+ e.toString());
        }
      }
      try {
        WebResult webResult=masterServer.stopTransformation(masterTransMeta.getName());
        if (!WebResult.STRING_OK.equals(webResult.getResult())) {
          log.logError("Unable to stop master transformation '" + masterServer.getName() + "' : "+ webResult.getMessage());
        }
      }
 catch (      Exception e) {
        errors+=1;
        log.logError("Unable to contact master server '" + masterServer.getName() + "' to stop the master : "+ e.toString());
      }
    }
    if (!allFinished) {
      if (log.isDetailed())       log.logDetailed("Clustered transformation is still running, waiting a few seconds...");
      try {
        Thread.sleep(sleepTimeSeconds * 2000);
      }
 catch (      Exception e) {
      }
    }
  }
  log.logMinimal("All transformations in the cluster have finished.");
  for (int s=0; s < slaveServers.length; s++) {
    try {
      WebResult webResult=slaveServers[s].cleanupTransformation(slaves[s].getName());
      if (!WebResult.STRING_OK.equals(webResult.getResult())) {
        log.logError("Unable to run clean-up on slave transformation '" + slaves[s].getName() + "' : "+ webResult.getMessage());
        errors+=1;
      }
    }
 catch (    Exception e) {
      errors+=1;
      log.logError("Unable to contact slave server '" + slaveServers[s].getName() + "' to check slave transformation : "+ e.toString());
    }
  }
  if (masterTransMeta != null && masterTransMeta.nrSteps() > 0) {
    try {
      WebResult webResult=masterServer.cleanupTransformation(masterTransMeta.getName());
      if (!WebResult.STRING_OK.equals(webResult.getResult())) {
        log.logError("Unable to run clean-up on master transformation '" + masterTransMeta.getName() + "' : "+ webResult.getMessage());
        errors+=1;
      }
      webResult=masterServer.deallocatePorts(transMeta.getName());
      if (!WebResult.STRING_OK.equals(webResult.getResult())) {
        log.logError("Unable to run clean-up on master transformation '" + masterTransMeta.getName() + "' : "+ webResult.getMessage());
        errors+=1;
      }
    }
 catch (    Exception e) {
      errors+=1;
      log.logError("Unable to contact master server '" + masterServer.getName() + "' to clean up master transformation : "+ e.toString());
    }
  }
  return errors;
}
