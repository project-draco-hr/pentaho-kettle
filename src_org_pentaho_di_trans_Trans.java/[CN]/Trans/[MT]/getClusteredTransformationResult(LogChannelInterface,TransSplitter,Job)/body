{
  Result result=new Result();
  SlaveServer[] slaveServers=transSplitter.getSlaveTargets();
  TransMeta[] slaves=transSplitter.getSlaves();
  SlaveServer masterServer;
  try {
    masterServer=transSplitter.getMasterServer();
  }
 catch (  KettleException e) {
    log.logError("Error getting the master server",e);
    masterServer=null;
    result.setNrErrors(result.getNrErrors() + 1);
  }
  TransMeta master=transSplitter.getMaster();
  for (int s=0; s < slaveServers.length; s++) {
    try {
      SlaveServerTransStatus transStatus=slaveServers[s].getTransStatus(slaves[s].getName());
      Result transResult=transStatus.getResult(slaves[s]);
      result.add(transResult);
    }
 catch (    Exception e) {
      result.setNrErrors(result.getNrErrors() + 1);
      log.logError("Unable to contact slave server '" + slaveServers[s].getName() + "' to get result of slave transformation : "+ e.toString());
    }
  }
  if (master != null && master.nrSteps() > 0) {
    try {
      SlaveServerTransStatus transStatus=masterServer.getTransStatus(master.getName());
      Result transResult=transStatus.getResult(master);
      result.add(transResult);
    }
 catch (    Exception e) {
      result.setNrErrors(result.getNrErrors() + 1);
      log.logError("Unable to contact master server '" + masterServer.getName() + "' to get result of master transformation : "+ e.toString());
    }
  }
  return result;
}
