{
  for (int i=0; i < steps.size(); i++) {
    final StepMetaDataCombi sid=steps.get(i);
    sid.step.markStart();
    sid.step.initBeforeStart();
  }
  if (transMeta.isCapturingStepPerformanceSnapShots()) {
    stepPerformanceSnapShots=new HashMap<String,List<StepPerformanceSnapShot>>();
    stepPerformanceSnapShotTimer=new Timer();
    TimerTask timerTask=new TimerTask(){
      public void run(){
        addStepPerformanceSnapShot();
      }
    }
;
    stepPerformanceSnapShotTimer.schedule(timerTask,100,transMeta.getStepPerformanceCapturingDelay());
  }
  for (int i=0; i < steps.size(); i++) {
    steps.get(i).step.start();
  }
  running=true;
  log.logDetailed(toString(),Messages.getString("Trans.Log.TransformationHasAllocated",String.valueOf(steps.size()),String.valueOf(rowsets.size())));
}
