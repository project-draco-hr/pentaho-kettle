{
  StepMeta singleMeta=new StepMeta("single",null);
  StepMeta copiedMeta=new StepMeta("copied",null);
  when(mockHelper.transMeta.findNextSteps(mockHelper.stepMeta)).thenReturn(Arrays.asList(singleMeta,copiedMeta));
  StepInterface single=mock(StepInterface.class);
  when(mockHelper.trans.findStepInterfaces("single")).thenReturn(Collections.singletonList(single));
  StepInterface copy1=mock(StepInterface.class);
  StepInterface copy2=mock(StepInterface.class);
  when(mockHelper.trans.findStepInterfaces("copied")).thenReturn(Arrays.asList(copy1,copy2));
  MappingIODefinition definition=new MappingIODefinition(null,null);
  StepInterface[] targetSteps=mapping.pickupTargetStepsFor(definition);
  assertThat(Arrays.asList(targetSteps),JUnitMatchers.hasItems(is(single),is(copy1),is(copy2)));
}
