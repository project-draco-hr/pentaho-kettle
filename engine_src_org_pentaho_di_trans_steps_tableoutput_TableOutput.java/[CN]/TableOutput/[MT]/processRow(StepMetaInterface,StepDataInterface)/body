{
  meta=(TableOutputMeta)smi;
  data=(TableOutputData)sdi;
  Object[] r=getRow();
  if (r == null) {
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    if (!meta.specifyFields()) {
      data.insertRowMeta=getInputRowMeta().clone();
    }
 else {
      data.insertRowMeta=new RowMeta();
      data.valuenrs=new int[meta.getFieldDatabase().length];
      for (int i=0; i < meta.getFieldDatabase().length; i++) {
        data.valuenrs[i]=getInputRowMeta().indexOfValue(meta.getFieldStream()[i]);
        if (data.valuenrs[i] < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"TableOutput.Exception.FieldRequired",meta.getFieldStream()[i]));
        }
      }
      for (int i=0; i < meta.getFieldDatabase().length; i++) {
        ValueMetaInterface insValue=getInputRowMeta().searchValueMeta(meta.getFieldStream()[i]);
        if (insValue != null) {
          ValueMetaInterface insertValue=insValue.clone();
          insertValue.setName(meta.getFieldDatabase()[i]);
          data.insertRowMeta.addValueMeta(insertValue);
        }
 else {
          throw new KettleStepException(BaseMessages.getString(PKG,"TableOutput.Exception.FailedToFindField",meta.getFieldStream()[i]));
        }
      }
    }
  }
  try {
    Object[] outputRowData=writeToTable(getInputRowMeta(),r);
    if (outputRowData != null) {
      putRow(data.outputRowMeta,outputRowData);
      incrementLinesOutput();
    }
    if (checkFeedback(getLinesRead())) {
      if (log.isBasic())       logBasic("linenr " + getLinesRead());
    }
  }
 catch (  KettleException e) {
    logError("Because of an error, this step can't continue: ",e);
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  return true;
}
