{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText("Enter the mapping");
  int margin=Const.MARGIN;
  wlSource=new Label(shell,SWT.NONE);
  wlSource.setText("Source fields: ");
  props.setLook(wlSource);
  fdlSource=new FormData();
  fdlSource.left=new FormAttachment(0,0);
  fdlSource.top=new FormAttachment(0,margin);
  wlSource.setLayoutData(fdlSource);
  wSource=new List(shell,SWT.SINGLE | SWT.RIGHT | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  for (int i=0; i < sourceList.length; i++)   wSource.add(sourceList[i]);
  props.setLook(wSource);
  fdSource=new FormData();
  fdSource.left=new FormAttachment(0,0);
  fdSource.right=new FormAttachment(25,0);
  fdSource.top=new FormAttachment(wlSource,margin);
  fdSource.bottom=new FormAttachment(100,-30);
  wSource.setLayoutData(fdSource);
  wlTarget=new Label(shell,SWT.NONE);
  wlTarget.setText("Target fields: ");
  props.setLook(wlTarget);
  fdlTarget=new FormData();
  fdlTarget.left=new FormAttachment(wSource,margin * 2);
  fdlTarget.top=new FormAttachment(0,margin);
  wlTarget.setLayoutData(fdlTarget);
  wTarget=new List(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  for (int i=0; i < targetList.length; i++)   wTarget.add(targetList[i]);
  props.setLook(wTarget);
  fdTarget=new FormData();
  fdTarget.left=new FormAttachment(wSource,margin * 2);
  fdTarget.right=new FormAttachment(50,0);
  fdTarget.top=new FormAttachment(wlTarget,margin);
  fdTarget.bottom=new FormAttachment(100,-30);
  wTarget.setLayoutData(fdTarget);
  wAdd=new Button(shell,SWT.PUSH);
  fdAdd=new FormData();
  wAdd.setText("  &Add  ");
  fdAdd.left=new FormAttachment(wTarget,margin * 2);
  fdAdd.top=new FormAttachment(wTarget,0,SWT.CENTER);
  wAdd.setLayoutData(fdAdd);
  Listener lsAdd=new Listener(){
    public void handleEvent(    Event e){
      add();
    }
  }
;
  wAdd.addListener(SWT.Selection,lsAdd);
  wDelete=new Button(shell,SWT.PUSH);
  fdDelete=new FormData();
  wDelete.setText("  &Delete  ");
  fdDelete.left=new FormAttachment(wTarget,margin * 2);
  fdDelete.top=new FormAttachment(wAdd,margin * 2);
  wDelete.setLayoutData(fdDelete);
  Listener lsDelete=new Listener(){
    public void handleEvent(    Event e){
      delete();
    }
  }
;
  wDelete.addListener(SWT.Selection,lsDelete);
  wlResult=new Label(shell,SWT.NONE);
  wlResult.setText("Result mappings: ");
  props.setLook(wlResult);
  fdlResult=new FormData();
  fdlResult.left=new FormAttachment(wDelete,margin * 2);
  fdlResult.top=new FormAttachment(0,margin);
  wlResult.setLayoutData(fdlResult);
  wResult=new List(shell,SWT.MULTI | SWT.LEFT | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  for (int i=0; i < targetList.length; i++)   wResult.add(targetList[i]);
  props.setLook(wResult);
  fdResult=new FormData();
  fdResult.left=new FormAttachment(wDelete,margin * 2);
  fdResult.right=new FormAttachment(100,0);
  fdResult.top=new FormAttachment(wlResult,margin);
  fdResult.bottom=new FormAttachment(100,-30);
  wResult.setLayoutData(fdResult);
  wOK=new Button(shell,SWT.PUSH);
  fdOK=new FormData();
  wOK.setText("  &OK  ");
  fdOK.left=new FormAttachment(33,0);
  fdOK.bottom=new FormAttachment(100,0);
  wOK.setLayoutData(fdOK);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText("  &Cancel  ");
  fdCancel=new FormData();
  fdCancel.left=new FormAttachment(66,0);
  fdCancel.bottom=new FormAttachment(100,0);
  wCancel.setLayoutData(fdCancel);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wSource.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      findTarget();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      add();
    }
  }
);
  wTarget.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      findSource();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      add();
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  WindowProperty winprop=props.getScreen(shell.getText());
  if (winprop != null)   winprop.setShell(shell);
 else   shell.pack();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return mappings;
}
