{
  row=new RowMetaAndData(rowsMeta,"text",null,null);
  assertEquals("text",row.getAsJavaType("str",String.class,converter));
  row=new RowMetaAndData(rowsMeta,"7",null,null);
  assertEquals(7,row.getAsJavaType("str",int.class,converter));
  assertEquals(7,row.getAsJavaType("str",Integer.class,converter));
  assertEquals(7L,row.getAsJavaType("str",long.class,converter));
  assertEquals(7L,row.getAsJavaType("str",Long.class,converter));
  row=new RowMetaAndData(rowsMeta,"y",null,null);
  assertEquals(true,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(true,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"yes",null,null);
  assertEquals(true,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(true,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"true",null,null);
  assertEquals(true,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(true,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"no",null,null);
  assertEquals(false,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(false,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"n",null,null);
  assertEquals(false,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(false,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"false",null,null);
  assertEquals(false,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(false,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"f",null,null);
  assertEquals(false,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(false,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,"other",null,null);
  assertEquals(false,row.getAsJavaType("str",boolean.class,converter));
  assertEquals(false,row.getAsJavaType("str",Boolean.class,converter));
  row=new RowMetaAndData(rowsMeta,TestEnum.ONE.name(),null,null);
  assertEquals(TestEnum.ONE,row.getAsJavaType("str",TestEnum.class,converter));
  row=new RowMetaAndData(rowsMeta,TestEnum.Two.name(),null,null);
  assertEquals(TestEnum.Two,row.getAsJavaType("str",TestEnum.class,converter));
  row=new RowMetaAndData(rowsMeta,TestEnum.three.name(),null,null);
  assertEquals(TestEnum.three,row.getAsJavaType("str",TestEnum.class,converter));
  row=new RowMetaAndData(rowsMeta,null,null,null);
  assertEquals(null,row.getAsJavaType("str",String.class,converter));
  assertEquals(null,row.getAsJavaType("str",Integer.class,converter));
  assertEquals(null,row.getAsJavaType("str",Long.class,converter));
  assertEquals(null,row.getAsJavaType("str",Boolean.class,converter));
}
