{
  try {
    targeturl=rep.getStepAttributeString(id_step,"targeturl");
    username=rep.getStepAttributeString(id_step,"username");
    password=rep.getStepAttributeString(id_step,"password");
    if (password != null && password.startsWith("Encrypted")) {
      password=Encr.decryptPassword(password.replace("Encrypted","").replace(" ",""));
    }
    module=rep.getStepAttributeString(id_step,"module");
    condition=rep.getStepAttributeString(id_step,"condition");
    query=rep.getStepAttributeString(id_step,"query");
    specifyQuery=rep.getStepAttributeBoolean(id_step,"specifyQuery");
    includeTargetURL=rep.getStepAttributeBoolean(id_step,"include_targeturl");
    targetURLField=rep.getStepAttributeString(id_step,"targeturl_field");
    includeModule=rep.getStepAttributeBoolean(id_step,"include_module");
    moduleField=rep.getStepAttributeString(id_step,"module_field");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"include_rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    includeSQL=rep.getStepAttributeBoolean(id_step,"include_sql");
    sqlField=rep.getStepAttributeString(id_step,"sql_field");
    includeTimestamp=rep.getStepAttributeBoolean(id_step,"include_Timestamp");
    timestampField=rep.getStepAttributeString(id_step,"timestamp_field");
    rowLimit=rep.getStepAttributeString(id_step,"limit");
    timeout=rep.getStepAttributeString(id_step,"timeout");
    readFrom=rep.getStepAttributeString(id_step,"read_from");
    readTo=rep.getStepAttributeString(id_step,"read_to");
    recordsFilter=SalesforceConnectionUtils.getRecordsFilterByCode(Const.NVL(rep.getStepAttributeString(id_step,"records_filter"),""));
    int nrFields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      SalesforceInputField field=new SalesforceInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setField(rep.getStepAttributeString(id_step,i,"field_attribut"));
      field.setType(ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(SalesforceInputField.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputMeta.Exception.ErrorReadingRepository"),e);
  }
}
