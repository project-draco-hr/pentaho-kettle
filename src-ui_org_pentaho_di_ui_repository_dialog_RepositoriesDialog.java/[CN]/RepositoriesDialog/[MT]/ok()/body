{
  if (wRepository.getItemCount() != 0) {
    int idx=wRepository.getSelectionIndex();
    if (idx >= 0) {
      RepositoryMeta repinfo=input.getRepository(idx);
      try {
        repository=RepositoryLoader.getInstance().createRepositoryObject(repinfo.getId());
        repository.init(repinfo);
        repository.connect(wUsername.getText(),wPassword.getText());
      }
 catch (      KettleException ke) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.RepositoryUnableToConnect.Title"),BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.RepositoryUnableToConnect.Message1") + Const.CR + ke.getSuperMessage(),ke);
        return;
      }
      props.setLastRepository(repinfo.getName());
      props.setLastRepositoryLogin(wUsername.getText());
    }
 else {
      MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
      mb.setMessage(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.PleaseSelectARepsitory.Message"));
      mb.setText(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.PleaseSelectARepsitory.Title"));
      mb.open();
      return;
    }
  }
  try {
    input.writeData();
  }
 catch (  Exception e) {
    new ErrorDialog(shell,"Error","Unexpected error writing repository definitions to file",e);
  }
  RepositoryCapabilities capabilities=repository == null ? null : repository.getRepositoryMeta().getRepositoryCapabilities();
  dispose();
}
