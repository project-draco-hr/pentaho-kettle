{
  if (wRepository.getItemCount() != 0) {
    int idx=wRepository.getSelectionIndex();
    if (idx >= 0) {
      repinfo=input.getRepository(idx);
      Repository rep=null;
      try {
        rep=RepositoryLoader.getInstance().createRepositoryObject(repinfo.getId());
        if (!repinfo.getRepositoryCapabilities().managesUsers()) {
          userinfo=new UserInfo(wUsername.getText());
          userinfo.setPassword(wPassword.getText());
          ProfileMeta adminProfile=new ProfileMeta("Administrator","Administrator");
          adminProfile.addPermission(Permission.ADMIN);
          userinfo.setProfile(adminProfile);
        }
        rep.init(repinfo,userinfo);
        rep.connect();
      }
 catch (      KettleException ke) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.RepositoryUnableToConnect.Title"),BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.RepositoryUnableToConnect.Message1") + Const.CR + ke.getSuperMessage(),ke);
        return;
      }
      try {
        if (repinfo.getRepositoryCapabilities().managesUsers()) {
          userinfo=rep.getSecurityProvider().loadUserInfo(wUsername.getText(),wPassword.getText());
        }
        props.setLastRepository(repinfo.getName());
        props.setLastRepositoryLogin(wUsername.getText());
      }
 catch (      KettleException e) {
        userinfo=null;
        repinfo=null;
        if (!(e instanceof KettleDatabaseException)) {
          new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.UnexpectedError.Title"),BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.UnexpectedError.Message"),e);
        }
      }
 finally {
        rep.disconnect();
      }
    }
 else {
      MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
      mb.setMessage(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.PleaseSelectARepsitory.Message"));
      mb.setText(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.PleaseSelectARepsitory.Title"));
      mb.open();
      return;
    }
  }
  try {
    input.writeData();
  }
 catch (  Exception e) {
    new ErrorDialog(shell,"Error","Unexpected error writing repository definitions to file",e);
  }
  RepositoryCapabilities capabilities=repinfo.getRepositoryCapabilities();
  if (!capabilities.supportsUsers()) {
    dispose();
    return;
  }
  if (userinfo == null) {
    MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
    mb.setMessage(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.IncorrectUserPassword.Message"));
    mb.setText(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.IncorrectUserPassword.Title"));
    mb.open();
  }
 else {
    boolean ok=true;
    String mess="";
    for (int i=0; i < toolsPermissions.length; i++) {
switch (toolsPermissions[i]) {
case TRANSFORMATION:
        ok=ok && userinfo.useTransformations();
      mess+=mess.length() > 0 ? ", " : "";
    mess+="Spoon";
  break;
case SCHEMA:
ok=ok && userinfo.useSchemas();
mess+=mess.length() > 0 ? ", " : "";
mess+="Menu";
break;
case JOB:
ok=ok && userinfo.useJobs();
mess+=mess.length() > 0 ? ", " : "";
mess+="Chef";
break;
default :
break;
}
}
if (!ok) {
int idx=mess.lastIndexOf(',');
if (idx > 0) mess=mess.substring(0,idx) + "and" + mess.substring(idx + 1);
MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
mb.setMessage(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.NoPermissions.Message") + mess);
mb.setText(BaseMessages.getString(PKG,"RepositoriesDialog.Dialog.NoPermissions.Title"));
mb.open();
userinfo=null;
repinfo=null;
}
 else {
dispose();
}
}
}
