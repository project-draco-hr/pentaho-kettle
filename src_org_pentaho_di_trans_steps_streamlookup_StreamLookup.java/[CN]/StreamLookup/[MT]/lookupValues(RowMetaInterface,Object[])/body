{
  if (isStopped())   return null;
  if (data.lookupColumnIndex == null) {
    String names[]=data.lookupMeta.getFieldNames();
    data.lookupColumnIndex=new int[names.length];
    for (int i=0; i < names.length; i++) {
      data.lookupColumnIndex[i]=rowMeta.indexOfValue(names[i]);
      if (data.lookupColumnIndex[i] < 0) {
        throw new KettleStepException("The lookup column '" + names[i] + "' could not be found");
      }
    }
  }
  Object[] lu=new Object[data.keynrs.length];
  for (int i=0; i < data.keynrs.length; i++)   lu[i]=row[data.keynrs[i]];
  if (data.keyTypes != null) {
    for (int i=0; i < data.lookupMeta.size(); i++) {
      ValueMetaInterface inputValue=data.lookupMeta.getValueMeta(i);
      ValueMetaInterface lookupValue=data.keyTypes.getValueMeta(i);
      if (inputValue.getType() != lookupValue.getType()) {
        try {
          lu[i]=lookupValue.convertDataCompatible(inputValue,lu[i]);
        }
 catch (        KettleValueException e) {
          throw new KettleStepException("Error converting data while looking up value",e);
        }
      }
    }
  }
  Object[] add=null;
  if (data.hasLookupRows) {
    try {
      if (meta.getKeystream().length > 0) {
        add=getFromCache(data.keyTypes,lu);
      }
 else {
        throw new KettleStepException(Messages.getString("StreamLookup.Log.GotRowWithoutKeys"));
      }
    }
 catch (    Exception e) {
      throw new KettleStepException(e);
    }
  }
  if (add == null) {
    add=data.nullIf;
  }
  return RowDataUtil.addRowData(row,rowMeta.size(),add);
}
