{
  if (transMeta != null && !Const.isEmpty(transMeta.getName())) {
    if (transMeta.getLogConnection() != null) {
      if (!Const.isEmpty(transMeta.getLogTable())) {
        Database database=null;
        try {
          database=new Database(transMeta.getLogConnection());
          database.shareVariablesWith(transMeta);
          database.connect();
          RowMetaAndData params=new RowMetaAndData();
          params.addValue(new ValueMeta("transname",ValueMetaInterface.TYPE_STRING),transMeta.getName() + "%");
          ResultSet resultSet=database.openQuery("SELECT * FROM " + transMeta.getLogTable() + " WHERE TRANSNAME LIKE ? ORDER BY ID_BATCH desc",params.getRowMeta(),params.getData());
          rowList=new ArrayList<RowMetaAndData>();
          Object[] rowData=database.getRow(resultSet);
          while (rowData != null) {
            rowList.add(new RowMetaAndData(database.getReturnRowMeta(),rowData));
            rowData=database.getRow(resultSet);
          }
          database.closeQuery(resultSet);
          if (rowList.size() > 0) {
            wFields.table.clearAll();
            for (int i=0; i < rowList.size(); i++) {
              RowMetaAndData row=rowList.get(i);
              if (i == 0) {
                RowMetaInterface rowMeta=row.getRowMeta();
                for (int v=0; v < rowMeta.size(); v++) {
                  if (rowMeta.getValueMeta(v).isNumeric())                   rowMeta.getValueMeta(v).setLength(-1,-1);
                }
              }
              TableItem item=new TableItem(wFields.table,SWT.NONE);
              String batchID=row.getString("ID_BATCH","");
              int index=1;
              item.setText(index++,Const.NVL(row.getString("TRANSNAME",""),""));
              if (batchID != null)               item.setText(index++,batchID);
              item.setText(index++,Const.NVL(row.getString("STATUS",""),""));
              item.setText(index++,Const.NVL(row.getString("LINES_READ",""),""));
              item.setText(index++,Const.NVL(row.getString("LINES_WRITTEN",""),""));
              item.setText(index++,Const.NVL(row.getString("LINES_UPDATED",""),""));
              item.setText(index++,Const.NVL(row.getString("LINES_INPUT",""),""));
              item.setText(index++,Const.NVL(row.getString("LINES_OUTPUT",""),""));
              item.setText(index++,Const.NVL(row.getString("ERRORS",""),""));
              item.setText(index++,Const.NVL(row.getString("STARTDATE",""),""));
              item.setText(index++,Const.NVL(row.getString("ENDDATE",""),""));
              item.setText(index++,Const.NVL(row.getString("LOGDATE",""),""));
              item.setText(index++,Const.NVL(row.getString("DEPDATE",""),""));
              String replayDate=row.getString("REPLAYDATE","");
              if (replayDate == null)               replayDate=Const.NULL_STRING;
              item.setText(index++,replayDate);
            }
            wFields.removeEmptyRows();
            wFields.setRowNums();
            wFields.optWidth(true);
            wFields.table.setSelection(0);
            showLogEntry();
          }
        }
 catch (        KettleException e) {
          StringBuffer message=new StringBuffer();
          message.append(Messages.getString("TransHistory.Error.GettingInfoFromLoggingTable")).append(Const.CR).append(Const.CR);
          message.append(e.toString()).append(Const.CR).append(Const.CR);
          message.append(Const.getStackTracker(e)).append(Const.CR);
          wText.setText(message.toString());
          wFields.clearAll(false);
        }
 finally {
          if (database != null)           database.disconnect();
        }
      }
 else {
        wFields.clearAll(false);
      }
    }
 else {
      wFields.clearAll(false);
    }
  }
 else {
    wFields.clearAll(false);
  }
}
