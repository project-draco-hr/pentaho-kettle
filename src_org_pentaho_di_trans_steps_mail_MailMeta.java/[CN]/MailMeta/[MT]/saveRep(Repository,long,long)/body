{
  try {
    rep.saveJobEntryAttribute(id_step,getID(),"server",this.server);
    rep.saveJobEntryAttribute(id_step,getID(),"port",this.port);
    rep.saveJobEntryAttribute(id_step,getID(),"destination",this.destination);
    rep.saveJobEntryAttribute(id_step,getID(),"destinationCc",this.destinationCc);
    rep.saveJobEntryAttribute(id_step,getID(),"destinationBCc",this.destinationBCc);
    rep.saveJobEntryAttribute(id_step,getID(),"replyto",this.replyAddress);
    rep.saveJobEntryAttribute(id_step,getID(),"replytoname",this.replyName);
    rep.saveJobEntryAttribute(id_step,getID(),"subject",this.subject);
    rep.saveJobEntryAttribute(id_step,getID(),"include_date",this.includeDate);
    rep.saveJobEntryAttribute(id_step,getID(),"include_subfolders",this.includeSubFolders);
    rep.saveJobEntryAttribute(id_step,getID(),"zipFilenameDynamic",this.zipFilenameDynamic);
    rep.saveJobEntryAttribute(id_step,getID(),"isFilenameDynamic",isFilenameDynamic);
    rep.saveJobEntryAttribute(id_step,getID(),"dynamicFieldname",dynamicFieldname);
    rep.saveJobEntryAttribute(id_step,getID(),"dynamicWildcard",dynamicWildcard);
    rep.saveJobEntryAttribute(id_step,getID(),"dynamicZipFilename",dynamicZipFilename);
    rep.saveJobEntryAttribute(id_step,getID(),"sourcefilefoldername",sourcefilefoldername);
    rep.saveJobEntryAttribute(id_step,getID(),"sourcewildcard",sourcewildcard);
    rep.saveJobEntryAttribute(id_step,getID(),"contact_person",contactPerson);
    rep.saveJobEntryAttribute(id_step,getID(),"contact_phone",contactPhone);
    rep.saveJobEntryAttribute(id_step,getID(),"comment",comment);
    rep.saveJobEntryAttribute(id_step,getID(),"encoding",encoding);
    rep.saveJobEntryAttribute(id_step,getID(),"priority",priority);
    rep.saveJobEntryAttribute(id_step,getID(),"importance",importance);
    rep.saveJobEntryAttribute(id_step,getID(),"include_files",includingFiles);
    rep.saveJobEntryAttribute(id_step,getID(),"use_auth",usingAuthentication);
    rep.saveJobEntryAttribute(id_step,getID(),"use_secure_auth",usingSecureAuthentication);
    rep.saveJobEntryAttribute(id_step,getID(),"auth_user",authenticationUser);
    rep.saveJobEntryAttribute(id_step,getID(),"auth_password",Encr.encryptPasswordIfNotUsingVariables(authenticationPassword));
    rep.saveJobEntryAttribute(id_step,getID(),"only_comment",onlySendComment);
    rep.saveJobEntryAttribute(id_step,getID(),"use_HTML",useHTML);
    rep.saveJobEntryAttribute(id_step,getID(),"use_Priority",usePriority);
    rep.saveJobEntryAttribute(id_step,getID(),"secureconnectiontype",secureconnectiontype);
    if (fileType != null) {
      for (int i=0; i < fileType.length; i++) {
        rep.saveJobEntryAttribute(id_step,getID(),i,"file_type",ResultFile.getTypeCode(fileType[i]));
      }
    }
    rep.saveJobEntryAttribute(id_step,getID(),"zip_files",zipFiles);
    rep.saveJobEntryAttribute(id_step,getID(),"zip_name",zipFilename);
    rep.saveJobEntryAttribute(id_step,getID(),"zip_limit_size",ziplimitsize);
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save job entry of type 'mail' to the repository for id_step=" + id_step,dbe);
  }
}
