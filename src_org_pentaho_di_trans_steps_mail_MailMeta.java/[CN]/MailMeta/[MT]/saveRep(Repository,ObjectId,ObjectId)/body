{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"server",this.server);
    rep.saveStepAttribute(id_transformation,id_step,"port",this.port);
    rep.saveStepAttribute(id_transformation,id_step,"destination",this.destination);
    rep.saveStepAttribute(id_transformation,id_step,"destinationCc",this.destinationCc);
    rep.saveStepAttribute(id_transformation,id_step,"destinationBCc",this.destinationBCc);
    rep.saveStepAttribute(id_transformation,id_step,"replyToAddresses",this.replyToAddresses);
    rep.saveStepAttribute(id_transformation,id_step,"replyto",this.replyAddress);
    rep.saveStepAttribute(id_transformation,id_step,"replytoname",this.replyName);
    rep.saveStepAttribute(id_transformation,id_step,"subject",this.subject);
    rep.saveStepAttribute(id_transformation,id_step,"include_date",this.includeDate);
    rep.saveStepAttribute(id_transformation,id_step,"include_subfolders",this.includeSubFolders);
    rep.saveStepAttribute(id_transformation,id_step,"zipFilenameDynamic",this.zipFilenameDynamic);
    rep.saveStepAttribute(id_transformation,id_step,"isFilenameDynamic",isFilenameDynamic);
    rep.saveStepAttribute(id_transformation,id_step,"dynamicFieldname",dynamicFieldname);
    rep.saveStepAttribute(id_transformation,id_step,"dynamicWildcard",dynamicWildcard);
    rep.saveStepAttribute(id_transformation,id_step,"dynamicZipFilename",dynamicZipFilename);
    rep.saveStepAttribute(id_transformation,id_step,"sourcefilefoldername",sourcefilefoldername);
    rep.saveStepAttribute(id_transformation,id_step,"sourcewildcard",sourcewildcard);
    rep.saveStepAttribute(id_transformation,id_step,"contact_person",contactPerson);
    rep.saveStepAttribute(id_transformation,id_step,"contact_phone",contactPhone);
    rep.saveStepAttribute(id_transformation,id_step,"comment",comment);
    rep.saveStepAttribute(id_transformation,id_step,"encoding",encoding);
    rep.saveStepAttribute(id_transformation,id_step,"priority",priority);
    rep.saveStepAttribute(id_transformation,id_step,"importance",importance);
    rep.saveStepAttribute(id_transformation,id_step,"include_files",includingFiles);
    rep.saveStepAttribute(id_transformation,id_step,"use_auth",usingAuthentication);
    rep.saveStepAttribute(id_transformation,id_step,"use_secure_auth",usingSecureAuthentication);
    rep.saveStepAttribute(id_transformation,id_step,"auth_user",authenticationUser);
    rep.saveStepAttribute(id_transformation,id_step,"auth_password",Encr.encryptPasswordIfNotUsingVariables(authenticationPassword));
    rep.saveStepAttribute(id_transformation,id_step,"only_comment",onlySendComment);
    rep.saveStepAttribute(id_transformation,id_step,"use_HTML",useHTML);
    rep.saveStepAttribute(id_transformation,id_step,"use_Priority",usePriority);
    rep.saveStepAttribute(id_transformation,id_step,"secureconnectiontype",secureconnectiontype);
    rep.saveStepAttribute(id_transformation,id_step,"zip_files",zipFiles);
    rep.saveStepAttribute(id_transformation,id_step,"zip_name",zipFilename);
    rep.saveStepAttribute(id_transformation,id_step,"zip_limit_size",ziplimitsize);
    if (embeddedimages != null) {
      for (int i=0; i < embeddedimages.length; i++) {
        rep.saveStepAttribute(id_transformation,id_step,i,"embeddedimage",embeddedimages[i]);
        rep.saveStepAttribute(id_transformation,id_step,i,"contentid",contentids[i]);
      }
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to save step type 'mail' to the repository for id_step=" + id_step,dbe);
  }
}
