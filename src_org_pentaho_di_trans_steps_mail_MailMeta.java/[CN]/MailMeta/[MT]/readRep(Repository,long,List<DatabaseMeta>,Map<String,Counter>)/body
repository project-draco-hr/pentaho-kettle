{
  try {
    this.server=rep.getJobEntryAttributeString(id_step,"server");
    this.port=rep.getJobEntryAttributeString(id_step,"port");
    this.destination=rep.getJobEntryAttributeString(id_step,"destination");
    this.destinationCc=rep.getJobEntryAttributeString(id_step,"destinationCc");
    this.destinationBCc=rep.getJobEntryAttributeString(id_step,"destinationBCc");
    this.replyAddress=rep.getJobEntryAttributeString(id_step,"replyto");
    this.replyName=rep.getJobEntryAttributeString(id_step,"replytoname");
    this.subject=rep.getJobEntryAttributeString(id_step,"subject");
    this.includeDate=rep.getJobEntryAttributeBoolean(id_step,"include_date");
    this.includeSubFolders=rep.getJobEntryAttributeBoolean(id_step,"include_subfolders");
    this.zipFilenameDynamic=rep.getJobEntryAttributeBoolean(id_step,"zipFilenameDynamic");
    this.isFilenameDynamic=rep.getJobEntryAttributeBoolean(id_step,"isFilenameDynamic");
    this.dynamicFieldname=rep.getJobEntryAttributeString(id_step,"dynamicFieldname");
    this.dynamicWildcard=rep.getJobEntryAttributeString(id_step,"dynamicWildcard");
    this.dynamicZipFilename=rep.getJobEntryAttributeString(id_step,"dynamicZipFilename");
    this.sourcefilefoldername=rep.getJobEntryAttributeString(id_step,"sourcefilefoldername");
    this.sourcewildcard=rep.getJobEntryAttributeString(id_step,"sourcewildcard");
    this.contactPerson=rep.getJobEntryAttributeString(id_step,"contact_person");
    this.contactPhone=rep.getJobEntryAttributeString(id_step,"contact_phone");
    this.comment=rep.getJobEntryAttributeString(id_step,"comment");
    this.encoding=rep.getJobEntryAttributeString(id_step,"encoding");
    this.priority=rep.getJobEntryAttributeString(id_step,"priority");
    this.importance=rep.getJobEntryAttributeString(id_step,"importance");
    this.includingFiles=rep.getJobEntryAttributeBoolean(id_step,"include_files");
    this.usingAuthentication=rep.getJobEntryAttributeBoolean(id_step,"use_auth");
    this.usingSecureAuthentication=rep.getJobEntryAttributeBoolean(id_step,"use_secure_auth");
    this.authenticationUser=rep.getJobEntryAttributeString(id_step,"auth_user");
    this.authenticationPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_step,"auth_password"));
    this.onlySendComment=rep.getJobEntryAttributeBoolean(id_step,"only_comment");
    this.useHTML=rep.getJobEntryAttributeBoolean(id_step,"use_HTML");
    this.usePriority=rep.getJobEntryAttributeBoolean(id_step,"use_Priority");
    this.secureconnectiontype=rep.getJobEntryAttributeString(id_step,"secureconnectiontype");
    int nrTypes=rep.countNrJobEntryAttributes(id_step,"file_type");
    allocate(nrTypes);
    for (int i=0; i < nrTypes; i++) {
      String typeCode=rep.getJobEntryAttributeString(id_step,i,"file_type");
      this.fileType[i]=ResultFile.getType(typeCode);
    }
    this.zipFiles=rep.getJobEntryAttributeBoolean(id_step,"zip_files");
    this.zipFilename=rep.getJobEntryAttributeString(id_step,"zip_name");
    this.ziplimitsize=rep.getJobEntryAttributeString(id_step,"zip_limit_size");
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException("Unable to load job entry of type 'mail' from the repository with id_step=" + id_step,dbe);
  }
}
