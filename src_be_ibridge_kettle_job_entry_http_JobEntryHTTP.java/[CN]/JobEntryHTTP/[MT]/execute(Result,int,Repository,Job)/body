{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  log.logBasic(toString(),"Start of HTTP job entry.");
  List resultRows;
  String urlFieldnameToUse=URL_FIELDNAME;
  if (runForEveryRow) {
    resultRows=previousResult.getRows();
    if (resultRows == null) {
      result.setNrErrors(1);
      log.logError(toString(),"Unable to get result from previous job entry : can't continue.");
      return result;
    }
  }
 else {
    resultRows=new ArrayList();
    Row row=new Row();
    row.addValue(new Value(urlFieldnameToUse,StringUtil.environmentSubstitute(url)));
    resultRows.add(row);
    System.out.println("Added one row to rows: " + row);
  }
  URL server=null;
  String beforeProxyHost=System.getProperty("http.proxyHost");
  String beforeProxyPort=System.getProperty("http.proxyPort");
  String beforeNonProxyHosts=System.getProperty("http.nonProxyHosts");
  for (int i=0; i < resultRows.size() && result.getNrErrors() == 0; i++) {
    Row row=(Row)resultRows.get(i);
    FileOutputStream outputFile=null;
    OutputStream uploadStream=null;
    BufferedInputStream fileStream=null;
    InputStream input=null;
    try {
      String urlToUse=StringUtil.environmentSubstitute(row.getString(urlFieldnameToUse,""));
      log.logBasic(toString(),"Connecting to URL: " + urlToUse);
      if (!Const.isEmpty(proxyHostname)) {
        System.setProperty("http.proxyHost",StringUtil.environmentSubstitute(proxyHostname));
        System.setProperty("http.proxyPort",StringUtil.environmentSubstitute(proxyPort));
        if (nonProxyHosts != null)         System.setProperty("http.nonProxyHosts",StringUtil.environmentSubstitute(nonProxyHosts));
      }
      if (!Const.isEmpty(username)) {
        Authenticator.setDefault(new Authenticator(){
          protected PasswordAuthentication getPasswordAuthentication(){
            String realPassword=StringUtil.environmentSubstitute(password);
            return new PasswordAuthentication(StringUtil.environmentSubstitute(username),realPassword != null ? realPassword.toCharArray() : new char[]{});
          }
        }
);
      }
      String realTargetFile=StringUtil.environmentSubstitute(targetFilename);
      if (dateTimeAdded) {
        SimpleDateFormat daf=new SimpleDateFormat();
        Date now=new Date();
        daf.applyPattern("yyyMMdd");
        realTargetFile+="_" + daf.format(now);
        daf.applyPattern("HHmmss");
        realTargetFile+="_" + daf.format(now);
        if (!Const.isEmpty(targetFilenameExtention)) {
          realTargetFile+="." + StringUtil.environmentSubstitute(targetFilenameExtention);
        }
      }
      outputFile=new FileOutputStream(new File(realTargetFile),fileAppended);
      server=new URL(urlToUse);
      URLConnection connection=server.openConnection();
      String realUploadFilename=StringUtil.environmentSubstitute(uploadFilename);
      if (!Const.isEmpty(realUploadFilename)) {
        log.logDetailed(toString(),"Start sending content of file [" + realUploadFilename + "] to server.");
        connection.setDoOutput(true);
        uploadStream=connection.getOutputStream();
        fileStream=new BufferedInputStream(new FileInputStream(new File(realUploadFilename)));
        int c;
        while ((c=fileStream.read()) >= 0) {
          uploadStream.write(c);
        }
        uploadStream.close();
        uploadStream=null;
        fileStream.close();
        fileStream=null;
        log.logDetailed(toString(),"Finished sending content to server.");
      }
      log.logDetailed(toString(),"Start reading reply from webserver.");
      input=server.openStream();
      Date date=new Date(connection.getLastModified());
      log.logBasic(toString(),"Resource type: \"" + connection.getContentType() + "\", last modified on: \""+ date+ "\".");
      int oneChar;
      long bytesRead=0L;
      while ((oneChar=input.read()) != -1) {
        outputFile.write(oneChar);
        bytesRead++;
      }
      log.logBasic(toString(),"Finished writing " + bytesRead + " bytes to result file ["+ realTargetFile+ "]");
      ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,KettleVFS.getFileObject(realTargetFile),parentJob.getJobname(),toString());
      result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
      result.setResult(true);
    }
 catch (    MalformedURLException e) {
      result.setNrErrors(1);
      e.printStackTrace();
      log.logError(toString(),"The specified URL is not valid [" + url + "] : "+ e.getMessage());
    }
catch (    IOException e) {
      result.setNrErrors(1);
      e.printStackTrace();
      log.logError(toString(),"I was unable to save the HTTP result to file because of a I/O error: " + e.getMessage());
    }
catch (    Exception e) {
      result.setNrErrors(1);
      e.printStackTrace();
      log.logError(toString(),"Error getting file from HTTP : " + e.getMessage());
    }
 finally {
      try {
        if (uploadStream != null)         uploadStream.close();
        if (fileStream != null)         fileStream.close();
        if (input != null)         input.close();
        if (outputFile != null)         outputFile.close();
      }
 catch (      Exception e) {
        log.logError(toString(),"Unable to close streams : " + e.getMessage());
        result.setNrErrors(1);
      }
      System.setProperty("http.proxyHost",Const.NVL(beforeProxyHost,""));
      System.setProperty("http.proxyPort",Const.NVL(beforeProxyPort,""));
      System.setProperty("http.nonProxyHosts",Const.NVL(beforeNonProxyHosts,""));
    }
  }
  return result;
}
