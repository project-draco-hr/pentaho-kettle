{
  final String content=new StringBuilder().append("r1c1").append('\n').append(";r1c2\n").append("r2c1").append('\n').append(";r2c2").toString();
  final String virtualFile=createVirtualFile("pdi-2607.txt",content);
  TextFileInputMeta meta=new TextFileInputMeta();
  meta.setLineWrapped(true);
  meta.setNrWraps(1);
  meta.setInputFields(new TextFileInputField[]{field("col1"),field("col2")});
  meta.setFileCompression("None");
  meta.setFileType("CSV");
  meta.setHeader(false);
  meta.setNrHeaderLines(-1);
  meta.setFooter(false);
  meta.setNrFooterLines(-1);
  TextFileInputData data=new TextFileInputData();
  data.setFiles(new FileInputList());
  data.getFiles().addFile(KettleVFS.getFileObject(virtualFile));
  data.outputRowMeta=new RowMeta();
  data.outputRowMeta.addValueMeta(new ValueMetaString("col1"));
  data.outputRowMeta.addValueMeta(new ValueMetaString("col2"));
  data.dataErrorLineHandler=Mockito.mock(FileErrorHandler.class);
  data.fileFormatType=TextFileInputMeta.FILE_FORMAT_UNIX;
  data.separator=";";
  data.filterProcessor=new TextFileFilterProcessor(new TextFileFilter[0]);
  data.filePlayList=new FilePlayListAll();
  TextFileInput input=StepMockUtil.getStep(TextFileInput.class,TextFileInputMeta.class,"test");
  List<Object[]> output=TransTestingUtil.execute(input,meta,data,2,false);
  TransTestingUtil.assertResult(new Object[]{"r1c1","r1c2"},output.get(0));
  TransTestingUtil.assertResult(new Object[]{"r2c1","r2c2"},output.get(1));
  deleteVfsFile(virtualFile);
}
