{
  StepMeta stepMeta=new StepMeta();
  PluginRegistry registry=PluginRegistry.getInstance();
  try {
    RowMetaAndData r=getStep(stepId);
    if (r != null) {
      stepMeta.setObjectId(stepId);
      stepMeta.setName(r.getString(KettleDatabaseRepository.FIELD_STEP_NAME,null));
      stepMeta.setDescription(r.getString(KettleDatabaseRepository.FIELD_STEP_DESCRIPTION,null));
      long id_step_type=r.getInteger(KettleDatabaseRepository.FIELD_STEP_ID_STEP_TYPE,-1L);
      RowMetaAndData steptyperow=getStepType(new LongObjectId(id_step_type));
      stepMeta.setStepID(steptyperow.getString(KettleDatabaseRepository.FIELD_STEP_TYPE_CODE,null));
      stepMeta.setDistributes(r.getBoolean(KettleDatabaseRepository.FIELD_STEP_DISTRIBUTE,true));
      int copies=(int)r.getInteger(KettleDatabaseRepository.FIELD_STEP_COPIES,1);
      String copiesString=r.getString(KettleDatabaseRepository.FIELD_STEP_COPIES_STRING,null);
      if (!Const.isEmpty(copiesString)) {
        stepMeta.setCopiesString(copiesString);
      }
 else {
        stepMeta.setCopies(copies);
      }
      int x=(int)r.getInteger(KettleDatabaseRepository.FIELD_STEP_GUI_LOCATION_X,0);
      int y=(int)r.getInteger(KettleDatabaseRepository.FIELD_STEP_GUI_LOCATION_Y,0);
      stepMeta.setLocation(new Point(x,y));
      stepMeta.setDraw(r.getBoolean(KettleDatabaseRepository.FIELD_STEP_GUI_DRAW,false));
      PluginInterface sp=registry.findPluginWithId(StepPluginType.class,stepMeta.getStepID());
      if (sp != null) {
        stepMeta.setStepMetaInterface((StepMetaInterface)registry.loadClass(sp));
      }
 else {
        throw new KettlePluginLoaderException(stepMeta.getStepID(),BaseMessages.getString(PKG,"StepMeta.Exception.UnableToLoadClass",stepMeta.getStepID() + Const.CR));
      }
      if (stepMeta.getStepMetaInterface() != null) {
        readRepCompatibleStepMeta(stepMeta.getStepMetaInterface(),repository,stepMeta.getObjectId(),databases);
        stepMeta.getStepMetaInterface().readRep(repository,repository.metaStore,stepMeta.getObjectId(),databases);
      }
      stepMeta.setStepPartitioningMeta(loadStepPartitioningMeta(stepMeta.getObjectId()));
      stepMeta.getStepPartitioningMeta().setPartitionSchemaAfterLoading(partitionSchemas);
      stepMeta.setClusterSchemaName(repository.getStepAttributeString(stepId,"cluster_schema"));
      String rowDistributionCode=repository.getStepAttributeString(stepId,0,"row_distribution_code");
      RowDistributionInterface rowDistribution=PluginRegistry.getInstance().loadClass(RowDistributionPluginType.class,rowDistributionCode,RowDistributionInterface.class);
      stepMeta.setRowDistribution(rowDistribution);
      stepMeta.setAttributesMap(loadStepAttributesMap(stepId));
      return stepMeta;
    }
 else {
      throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepInfoCouldNotBeFound",String.valueOf(stepId)));
    }
  }
 catch (  KettleDatabaseException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"StepMeta.Exception.StepCouldNotBeLoaded",String.valueOf(stepMeta.getObjectId())),dbe);
  }
}
