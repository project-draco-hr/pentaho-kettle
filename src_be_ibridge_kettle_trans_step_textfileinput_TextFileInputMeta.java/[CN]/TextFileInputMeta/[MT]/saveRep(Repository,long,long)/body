{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"separator",separator);
    rep.saveStepAttribute(id_transformation,id_step,"enclosure",enclosure);
    rep.saveStepAttribute(id_transformation,id_step,"escapechar",escapeCharacter);
    rep.saveStepAttribute(id_transformation,id_step,"header",header);
    rep.saveStepAttribute(id_transformation,id_step,"footer",footer);
    rep.saveStepAttribute(id_transformation,id_step,"noempty",noEmptyLines);
    rep.saveStepAttribute(id_transformation,id_step,"include",includeFilename);
    rep.saveStepAttribute(id_transformation,id_step,"include_field",filenameField);
    rep.saveStepAttribute(id_transformation,id_step,"rownum",includeRowNumber);
    rep.saveStepAttribute(id_transformation,id_step,"rownum_field",rowNumberField);
    rep.saveStepAttribute(id_transformation,id_step,"format",fileFormat);
    rep.saveStepAttribute(id_transformation,id_step,"encoding",encoding);
    rep.saveStepAttribute(id_transformation,id_step,"filter",filter);
    rep.saveStepAttribute(id_transformation,id_step,"filter_position",filterPosition);
    rep.saveStepAttribute(id_transformation,id_step,"filter_string",filterString);
    rep.saveStepAttribute(id_transformation,id_step,"limit",rowLimit);
    for (int i=0; i < fileName.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"file_name",fileName[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"file_mask",fileMask[i]);
    }
    rep.saveStepAttribute(id_transformation,id_step,"file_type",fileType);
    rep.saveStepAttribute(id_transformation,id_step,"file_zipped",zipped);
    for (int i=0; i < inputFields.length; i++) {
      TextFileInputField field=inputFields[i];
      rep.saveStepAttribute(id_transformation,id_step,i,"field_name",field.getName());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_type",field.getTypeDesc());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_format",field.getFormat());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_currency",field.getCurrencySymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_decimal",field.getDecimalSymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_group",field.getGroupSymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_nullif",field.getNullString());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_position",field.getPosition());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_length",field.getLength());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_precision",field.getPrecision());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_trim_type",field.getTrimTypeDesc());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_repeat",field.isRepeated());
    }
    rep.saveStepAttribute(id_transformation,id_step,"error_ignored",errorIgnored);
    rep.saveStepAttribute(id_transformation,id_step,"error_count_field",errorCountField);
    rep.saveStepAttribute(id_transformation,id_step,"error_fields_field",errorFieldsField);
    rep.saveStepAttribute(id_transformation,id_step,"error_text_field",errorTextField);
  }
 catch (  Exception e) {
    throw new KettleException("Unable to save step information to the repository for id_step=" + id_step,e);
  }
}
