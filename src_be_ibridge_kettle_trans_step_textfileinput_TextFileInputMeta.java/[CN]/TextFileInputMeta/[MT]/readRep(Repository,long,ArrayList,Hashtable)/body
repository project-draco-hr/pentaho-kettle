{
  try {
    separator=rep.getStepAttributeString(id_step,"separator");
    enclosure=rep.getStepAttributeString(id_step,"enclosure");
    escapeCharacter=rep.getStepAttributeString(id_step,"escapechar");
    header=rep.getStepAttributeBoolean(id_step,"header");
    nrHeaderLines=(int)rep.getStepAttributeInteger(id_step,"nr_headerlines");
    footer=rep.getStepAttributeBoolean(id_step,"footer");
    nrFooterLines=(int)rep.getStepAttributeInteger(id_step,"nr_footerlines");
    lineWrapped=rep.getStepAttributeBoolean(id_step,"line_wrapped");
    nrWraps=(int)rep.getStepAttributeInteger(id_step,"nr_wraps");
    noEmptyLines=rep.getStepAttributeBoolean(id_step,"noempty");
    includeFilename=rep.getStepAttributeBoolean(id_step,"include");
    filenameField=rep.getStepAttributeString(id_step,"include_field");
    includeRowNumber=rep.getStepAttributeBoolean(id_step,"rownum");
    rowNumberField=rep.getStepAttributeString(id_step,"rownum_field");
    fileFormat=rep.getStepAttributeString(id_step,"format");
    encoding=rep.getStepAttributeString(id_step,"encoding");
    filter=rep.getStepAttributeBoolean(id_step,"filter");
    filterPosition=(int)rep.getStepAttributeInteger(id_step,"filter_position");
    filterString=rep.getStepAttributeString(id_step,"filter_string");
    rowLimit=(int)rep.getStepAttributeInteger(id_step,"limit");
    int nrfiles=rep.countNrStepAttributes(id_step,"file_name");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfiles,nrfields);
    for (int i=0; i < nrfiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
    }
    fileType=rep.getStepAttributeString(id_step,"file_type");
    zipped=rep.getStepAttributeBoolean(id_step,"file_zipped");
    for (int i=0; i < nrfields; i++) {
      TextFileInputField field=new TextFileInputField();
      field.setName(rep.getStepAttributeString(id_step,i,"field_name"));
      field.setType(Value.getType(rep.getStepAttributeString(id_step,i,"field_type")));
      field.setFormat(rep.getStepAttributeString(id_step,i,"field_format"));
      field.setCurrencySymbol(rep.getStepAttributeString(id_step,i,"field_currency"));
      field.setDecimalSymbol(rep.getStepAttributeString(id_step,i,"field_decimal"));
      field.setGroupSymbol(rep.getStepAttributeString(id_step,i,"field_group"));
      field.setNullString(rep.getStepAttributeString(id_step,i,"field_nullif"));
      field.setPosition((int)rep.getStepAttributeInteger(id_step,i,"field_position"));
      field.setLength((int)rep.getStepAttributeInteger(id_step,i,"field_length"));
      field.setPrecision((int)rep.getStepAttributeInteger(id_step,i,"field_precision"));
      field.setTrimType(getTrimType(rep.getStepAttributeString(id_step,i,"field_trim_type")));
      field.setRepeated(rep.getStepAttributeBoolean(id_step,i,"field_repeat"));
      inputFields[i]=field;
    }
    errorIgnored=rep.getStepAttributeBoolean(id_step,"error_ignored");
    errorCountField=rep.getStepAttributeString(id_step,"error_count_field");
    errorFieldsField=rep.getStepAttributeString(id_step,"error_fields_field");
    errorTextField=rep.getStepAttributeString(id_step,"error_text_field");
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
