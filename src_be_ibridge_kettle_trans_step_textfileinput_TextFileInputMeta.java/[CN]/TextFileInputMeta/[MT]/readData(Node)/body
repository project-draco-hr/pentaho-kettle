{
  try {
    separator=XMLHandler.getTagValue(stepnode,"separator");
    enclosure=XMLHandler.getTagValue(stepnode,"enclosure");
    escapeCharacter=XMLHandler.getTagValue(stepnode,"escapechar");
    header="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"header"));
    nrHeaderLines=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_headerlines"),1);
    footer="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"footer"));
    nrFooterLines=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_footerlines"),1);
    lineWrapped="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"line_wrapped"));
    nrWraps=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_wraps"),1);
    layoutPaged="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"layout_paged"));
    nrLinesPerPage=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_lines_per_page"),1);
    nrLinesDocHeader=Const.toInt(XMLHandler.getTagValue(stepnode,"nr_lines_doc_header"),1);
    String nempty=XMLHandler.getTagValue(stepnode,"noempty");
    noEmptyLines="Y".equalsIgnoreCase(nempty) || nempty == null;
    includeFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"include"));
    filenameField=XMLHandler.getTagValue(stepnode,"include_field");
    includeRowNumber="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rownum"));
    rowNumberField=XMLHandler.getTagValue(stepnode,"rownum_field");
    fileFormat=XMLHandler.getTagValue(stepnode,"format");
    encoding=XMLHandler.getTagValue(stepnode,"encoding");
    Node filenode=XMLHandler.getSubNode(stepnode,"file");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    Node filtersNode=XMLHandler.getSubNode(stepnode,"filters");
    int nrfiles=XMLHandler.countNodes(filenode,"name");
    int nrfields=XMLHandler.countNodes(fields,"field");
    int nrfilters=XMLHandler.countNodes(fields,"filter");
    allocate(nrfiles,nrfields,nrfilters);
    for (int i=0; i < nrfiles; i++) {
      Node filenamenode=XMLHandler.getSubNodeByNr(filenode,"name",i);
      Node filemasknode=XMLHandler.getSubNodeByNr(filenode,"filemask",i);
      fileName[i]=XMLHandler.getNodeValue(filenamenode);
      fileMask[i]=XMLHandler.getNodeValue(filemasknode);
    }
    fileType=XMLHandler.getTagValue(stepnode,"file","type");
    zipped="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","zipped"));
    if (XMLHandler.getTagValue(stepnode,"filter") != null) {
      filter=new TextFileFilter[1];
      filter[0]=new TextFileFilter();
      filter[0].setFilterPosition(Const.toInt(XMLHandler.getTagValue(stepnode,"filter_position"),-1));
      filter[0].setFilterString(XMLHandler.getTagValue(stepnode,"filter_string"));
      filter[0].setFilterLastLine("Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"filter_is_last_line")));
    }
 else {
      for (int i=0; i < nrfilters; i++) {
        Node fnode=XMLHandler.getSubNodeByNr(filtersNode,"filter",i);
        filter[i]=new TextFileFilter();
        filter[i].setFilterPosition(Const.toInt(XMLHandler.getTagValue(fnode,"filter_position"),-1));
        filter[i].setFilterString(XMLHandler.getTagValue(fnode,"filter_string"));
        filter[i].setFilterLastLine("Y".equalsIgnoreCase(XMLHandler.getTagValue(fnode,"filter_is_last_line")));
      }
    }
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      TextFileInputField field=new TextFileInputField();
      field.setName(XMLHandler.getTagValue(fnode,"name"));
      field.setType(Value.getType(XMLHandler.getTagValue(fnode,"type")));
      field.setFormat(XMLHandler.getTagValue(fnode,"format"));
      field.setCurrencySymbol(XMLHandler.getTagValue(fnode,"currency"));
      field.setDecimalSymbol(XMLHandler.getTagValue(fnode,"decimal"));
      field.setGroupSymbol(XMLHandler.getTagValue(fnode,"group"));
      field.setNullString(XMLHandler.getTagValue(fnode,"nullif"));
      field.setPosition(Const.toInt(XMLHandler.getTagValue(fnode,"position"),-1));
      field.setLength(Const.toInt(XMLHandler.getTagValue(fnode,"length"),-1));
      field.setPrecision(Const.toInt(XMLHandler.getTagValue(fnode,"precision"),-1));
      field.setTrimType(getTrimType(XMLHandler.getTagValue(fnode,"trim_type")));
      String srepeat=XMLHandler.getTagValue(fnode,"repeat");
      if (srepeat != null)       field.setRepeated("Y".equalsIgnoreCase(srepeat));
 else       field.setRepeated(false);
      inputFields[i]=field;
    }
    rowLimit=Const.toLong(XMLHandler.getTagValue(stepnode,"limit"),0L);
    errorIgnored="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"error_ignored"));
    errorCountField=XMLHandler.getTagValue(stepnode,"error_count_field");
    errorFieldsField=XMLHandler.getTagValue(stepnode,"error_fields_field");
    errorTextField=XMLHandler.getTagValue(stepnode,"error_text_field");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
