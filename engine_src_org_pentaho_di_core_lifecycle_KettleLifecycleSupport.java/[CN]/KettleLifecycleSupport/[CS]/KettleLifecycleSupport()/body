{
  Set<KettleLifecycleListener> listeners=LifecycleSupport.loadPlugins(KettleLifecyclePluginType.class,KettleLifecycleListener.class);
  kettleLifecycleListeners=new ConcurrentHashMap<KettleLifecycleListener,Boolean>(Maps.asMap(listeners,Functions.constant(false)));
  registry.addPluginListener(KettleLifecyclePluginType.class,new PluginTypeListener(){
    @Override public void pluginAdded(    Object serviceObject){
      KettleLifecycleListener listener=null;
      try {
        listener=(KettleLifecycleListener)registry.loadClass((PluginInterface)serviceObject);
      }
 catch (      KettlePluginException e) {
        e.printStackTrace();
        return;
      }
      kettleLifecycleListeners.put(listener,false);
      if (initialized.get()) {
        try {
          onEnvironmentInit(listener);
        }
 catch (        Throwable e) {
          Throwables.propagate(e);
        }
      }
    }
    @Override public void pluginRemoved(    Object serviceObject){
      kettleLifecycleListeners.remove(serviceObject);
    }
    @Override public void pluginChanged(    Object serviceObject){
    }
  }
);
}
