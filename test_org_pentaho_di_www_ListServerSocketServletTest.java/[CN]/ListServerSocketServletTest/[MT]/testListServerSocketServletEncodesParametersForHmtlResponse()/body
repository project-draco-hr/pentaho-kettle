{
  HttpServletRequest mockRequest=mock(HttpServletRequest.class);
  HttpServletResponse mockResponse=mock(HttpServletResponse.class);
  SocketPortAllocation mockSocketPortAllocation=mock(SocketPortAllocation.class);
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  ServletOutputStream servletOutputStream=new ServletOutputStream(){
    @Override public void write(    int b) throws IOException {
      byteArrayOutputStream.write(b);
    }
  }
;
  when(mockRequest.getContextPath()).thenReturn(ListServerSocketServlet.CONTEXT_PATH);
  when(mockRequest.getParameter(anyString())).thenReturn(ServletTestUtils.BAD_STRING);
  when(mockResponse.getOutputStream()).thenReturn(servletOutputStream);
  when(mockTransformationMap.allocateServerSocketPort(anyInt(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString())).thenReturn(mockSocketPortAllocation);
  listServerSocketServlet.doGet(mockRequest,mockResponse);
  String response=byteArrayOutputStream.toString();
  assertFalse(ServletTestUtils.hasBadText(ServletTestUtils.getInsideOfTag("H1",response)));
}
