{
  LDAPInput ldapInput=new LDAPInput(stepMockHelper.stepMeta,stepMockHelper.stepDataInterface,0,stepMockHelper.transMeta,stepMockHelper.trans);
  LDAPInputData data=new LDAPInputData();
  LDAPInputMeta meta=mockMeta();
  LDAPInputField[] fields=new LDAPInputField[]{new LDAPInputField("dn"),new LDAPInputField("cn"),new LDAPInputField("role")};
  int sortedField=1;
  fields[sortedField].setSortedKey(true);
  when(meta.getInputFields()).thenReturn(fields);
  when(meta.getProtocol()).thenReturn(LdapMockProtocol.getName());
  when(meta.getHost()).thenReturn("host.mock");
  when(meta.getDerefAliases()).thenReturn("never");
  when(meta.getReferrals()).thenReturn("ignore");
  LdapMockProtocol.setup();
  try {
    assertTrue("Input Initialization Failed",ldapInput.init(meta,data));
    assertEquals("Field not marked as sorted",1,data.connection.getSortingAttributes().size());
    assertEquals("Field not marked as sorted",data.attrReturned[sortedField],data.connection.getSortingAttributes().get(0));
    assertNotNull(data.attrReturned[sortedField]);
  }
  finally {
    LdapMockProtocol.cleanup();
  }
}
