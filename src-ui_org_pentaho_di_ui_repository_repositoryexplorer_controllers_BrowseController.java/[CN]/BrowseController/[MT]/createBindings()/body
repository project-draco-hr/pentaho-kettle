{
  folderTree=(XulTree)document.getElementById("folder-tree");
  fileTable=(XulTree)document.getElementById("file-table");
  revisionTable=(XulTree)document.getElementById("revision-table");
  directoryBinding=bf.createBinding(repositoryDirectory,"children",folderTree,"elements");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(folderTree,"selectedItems",fileTable,"elements",new BindingConvertor<List<UIRepositoryDirectory>,UIRepositoryObjects>(){
    @Override public UIRepositoryObjects sourceToTarget(    List<UIRepositoryDirectory> rd){
      UIRepositoryObjects listOfObjects=new UIRepositoryObjects();
      if (rd == null) {
        return null;
      }
      if (rd.size() <= 0) {
        return null;
      }
      try {
        listOfObjects=rd.get(0).getRepositoryObjects();
        bf.setBindingType(Binding.Type.ONE_WAY);
        bf.createBinding(listOfObjects,"children",fileTable,"elements");
      }
 catch (      Exception e) {
      }
      return listOfObjects;
    }
    @Override public List<UIRepositoryDirectory> targetToSource(    UIRepositoryObjects elements){
      return null;
    }
  }
);
  bf.setBindingType(Binding.Type.ONE_WAY);
  Binding revisionTreeBinding=bf.createBinding(repositoryDirectory,"revisionsSupported","revision-table","!disabled");
  Binding revisionLabelBinding=bf.createBinding(repositoryDirectory,"revisionsSupported","revision-label","!disabled");
  BindingConvertor<int[],Boolean> forButtons=new BindingConvertor<int[],Boolean>(){
    @Override public Boolean sourceToTarget(    int[] value){
      return value != null && !(value.length <= 0);
    }
    @Override public int[] targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.createBinding(revisionTable,"selectedRows","revision-open","!disabled",forButtons);
  bf.createBinding(revisionTable,"selectedRows","revision-remove","!disabled",forButtons);
  Binding revisionBinding=null;
  if (repositoryDirectory.isRevisionsSupported()) {
    bf.setBindingType(Binding.Type.ONE_WAY);
    revisionBinding=bf.createBinding(fileTable,"selectedItems",revisionTable,"elements",new BindingConvertor<List<UIRepositoryObject>,UIRepositoryObjectRevisions>(){
      @Override public UIRepositoryObjectRevisions sourceToTarget(      List<UIRepositoryObject> ro){
        UIRepositoryObjectRevisions revisions=new UIRepositoryObjectRevisions();
        if (ro == null) {
          return null;
        }
        if (ro.size() <= 0) {
          return null;
        }
        if (ro.get(0) instanceof UIRepositoryDirectory) {
          return null;
        }
        try {
          UIRepositoryContent rc=(UIRepositoryContent)ro.get(0);
          revisions=rc.getRevisions();
          bf.setBindingType(Binding.Type.ONE_WAY);
          bf.createBinding(revisions,"children",revisionTable,"elements");
        }
 catch (        Exception e) {
        }
        return revisions;
      }
      @Override public List<UIRepositoryObject> targetToSource(      UIRepositoryObjectRevisions elements){
        return null;
      }
    }
);
  }
  try {
    directoryBinding.fireSourceChanged();
    revisionTreeBinding.fireSourceChanged();
    revisionLabelBinding.fireSourceChanged();
    if (revisionBinding != null) {
      revisionBinding.fireSourceChanged();
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}
