{
  folderTree=(XulTree)document.getElementById("folder-tree");
  fileTable=(XulTree)document.getElementById("file-table");
  if (!repositoryDirectory.isVisible()) {
    folderTree.setHiddenrootnode(true);
  }
 else {
    folderTree.setHiddenrootnode(false);
  }
  BindingConvertor<List<UIRepositoryObject>,Boolean> checkIfMultipleItemsAreSelected=new BindingConvertor<List<UIRepositoryObject>,Boolean>(){
    @Override public Boolean sourceToTarget(    List<UIRepositoryObject> value){
      return value != null && value.size() == 1 && value.get(0) != null;
    }
    @Override public List<UIRepositoryObject> targetToSource(    Boolean value){
      return null;
    }
  }
;
  bf.createBinding(fileTable,"selectedItems","file-context-rename","!disabled",checkIfMultipleItemsAreSelected);
  bf.createBinding(fileTable,"selectedItems",this,"selectedFileItems");
  PropertyChangeListener childrenListener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      fireRepositoryDirectoryChange();
    }
  }
;
  repositoryDirectory.addPropertyChangeListener("children",childrenListener);
  directoryBinding=createDirectoryBinding();
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(folderTree,"selectedItems",this,"selectedFolderItems");
  bf.createBinding(this,"repositoryDirectories",fileTable,"elements",new BindingConvertor<List<UIRepositoryDirectory>,UIRepositoryObjects>(){
    @Override public UIRepositoryObjects sourceToTarget(    List<UIRepositoryDirectory> rd){
      UIRepositoryObjects listOfObjects=new UIRepositoryObjects();
      if (rd == null) {
        return null;
      }
      if (rd.size() <= 0) {
        return null;
      }
      try {
        listOfObjects=rd.get(0).getRepositoryObjects();
      }
 catch (      KettleException e) {
        throw new RuntimeException(e);
      }
      bf.setBindingType(Binding.Type.ONE_WAY);
      bf.createBinding(listOfObjects,"children",fileTable,"elements");
      return listOfObjects;
    }
    @Override public List<UIRepositoryDirectory> targetToSource(    UIRepositoryObjects elements){
      return null;
    }
  }
);
  doCreateBindings();
  try {
    directoryBinding.fireSourceChanged();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    RepositoryDirectory homeDir=repository.getUserHomeDirectory();
    int currentDir=0;
    String[] homePath=homeDir.getPathArray();
    if (homePath != null) {
      UIRepositoryDirectory tempRoot=repositoryDirectory;
      if (homePath.length > 0 && tempRoot.getName().equalsIgnoreCase(homePath[currentDir])) {
        if (homePath.length == 1) {
          setSelectedFolderItems(Arrays.asList(tempRoot));
        }
        currentDir++;
      }
      for (; currentDir < homePath.length; currentDir++) {
        for (        UIRepositoryObject uiObj : tempRoot.getChildren()) {
          if (uiObj instanceof UIRepositoryDirectory) {
            if (uiObj.getName().equalsIgnoreCase(homePath[currentDir])) {
              tempRoot=(UIRepositoryDirectory)uiObj;
              break;
            }
          }
        }
      }
      if (homePath.length == currentDir) {
        setSelectedFolderItems(Arrays.asList(tempRoot));
        folderTree.setSelectedItems(this.selectedFolderItems);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
