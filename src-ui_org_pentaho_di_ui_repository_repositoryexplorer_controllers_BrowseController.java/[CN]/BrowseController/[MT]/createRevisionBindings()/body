{
  revisionTable=(XulTree)document.getElementById("revision-table");
  historyDeck=(XulDeck)document.getElementById("history-deck");
  bf.setBindingType(Binding.Type.ONE_WAY);
  Binding revisionTreeBinding=bf.createBinding(repositoryDirectory,"revisionsSupported","revision-table","!disabled");
  Binding revisionLabelBinding=bf.createBinding(repositoryDirectory,"revisionsSupported","revision-label","!disabled");
  BindingConvertor<int[],Boolean> forButtons=new BindingConvertor<int[],Boolean>(){
    @Override public Boolean sourceToTarget(    int[] value){
      return value != null && !(value.length <= 0);
    }
    @Override public int[] targetToSource(    Boolean value){
      return null;
    }
  }
;
  Binding buttonBinding=bf.createBinding(revisionTable,"selectedRows","revision-open","!disabled",forButtons);
  Binding revisionBinding=null;
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(folderTree,"selectedItems",this,"noHistoryDeck");
  bf.setBindingType(Binding.Type.ONE_WAY);
  bf.createBinding(fileTable,"selectedItems",this,"selectedFileItems");
  revisionBinding=bf.createBinding(this,"repositoryObjects",revisionTable,"elements",new BindingConvertor<List<UIRepositoryObject>,UIRepositoryObjectRevisions>(){
    @Override public UIRepositoryObjectRevisions sourceToTarget(    List<UIRepositoryObject> ro){
      UIRepositoryObjectRevisions revisions=new UIRepositoryObjectRevisions();
      if (ro == null) {
        return null;
      }
      if (ro.size() <= 0) {
        return null;
      }
      if (ro.get(0) instanceof UIRepositoryDirectory) {
        historyDeck.setSelectedIndex(NO_HISTORY);
        return null;
      }
      try {
        UIRepositoryContent rc=(UIRepositoryContent)ro.get(0);
        revisions=rc.getRevisions();
        bf.setBindingType(Binding.Type.ONE_WAY);
        bf.createBinding(revisions,"children",revisionTable,"elements");
      }
 catch (      KettleException e) {
        throw new RuntimeException(e);
      }
      historyDeck.setSelectedIndex(HISTORY);
      return revisions;
    }
    @Override public List<UIRepositoryObject> targetToSource(    UIRepositoryObjectRevisions elements){
      return null;
    }
  }
);
  try {
    revisionTreeBinding.fireSourceChanged();
    revisionLabelBinding.fireSourceChanged();
    buttonBinding.fireSourceChanged();
    revisionBinding.fireSourceChanged();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
