{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlspecificRep=new Label(shell,SWT.RIGHT);
  wlspecificRep.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.specificRep.Label"));
  props.setLook(wlspecificRep);
  fdlspecificRep=new FormData();
  fdlspecificRep.left=new FormAttachment(0,0);
  fdlspecificRep.top=new FormAttachment(wName,margin);
  fdlspecificRep.right=new FormAttachment(middle,-margin);
  wlspecificRep.setLayoutData(fdlspecificRep);
  wspecificRep=new Button(shell,SWT.CHECK);
  props.setLook(wspecificRep);
  wspecificRep.setToolTipText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.specificRep.Tooltip"));
  fdspecificRep=new FormData();
  fdspecificRep.left=new FormAttachment(middle,0);
  fdspecificRep.top=new FormAttachment(wName,margin);
  fdspecificRep.right=new FormAttachment(100,0);
  wspecificRep.setLayoutData(fdspecificRep);
  wspecificRep.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      activeSpecRep();
    }
  }
);
  wlRepName=new Label(shell,SWT.RIGHT);
  wlRepName.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.RepName.Label"));
  props.setLook(wlRepName);
  fdlRepName=new FormData();
  fdlRepName.left=new FormAttachment(0,0);
  fdlRepName.right=new FormAttachment(middle,-margin);
  fdlRepName.top=new FormAttachment(wspecificRep,margin);
  wlRepName.setLayoutData(fdlRepName);
  wbRepositoryname=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbRepositoryname);
  wbRepositoryname.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.ListRepositories.Label"));
  wbRepositoryname.setToolTipText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.ListRepositories.Tooltip"));
  fdbRepositoryname=new FormData();
  fdbRepositoryname.right=new FormAttachment(100,0);
  fdbRepositoryname.top=new FormAttachment(wspecificRep,0);
  wbRepositoryname.setLayoutData(fdbRepositoryname);
  wbRepositoryname.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      getListRepositories();
    }
  }
);
  wRepName=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wRepName);
  wRepName.setToolTipText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.RepName.Tooltip"));
  wRepName.addModifyListener(lsMod);
  fdRepName=new FormData();
  fdRepName.left=new FormAttachment(middle,0);
  fdRepName.top=new FormAttachment(wspecificRep,margin);
  fdRepName.right=new FormAttachment(wbRepositoryname,-margin);
  wRepName.setLayoutData(fdRepName);
  wlspecificUser=new Label(shell,SWT.RIGHT);
  wlspecificUser.setText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.specificUser.Label"));
  props.setLook(wlspecificUser);
  fdlspecificUser=new FormData();
  fdlspecificUser.left=new FormAttachment(0,0);
  fdlspecificUser.top=new FormAttachment(wRepName,margin);
  fdlspecificUser.right=new FormAttachment(middle,-margin);
  wlspecificUser.setLayoutData(fdlspecificUser);
  wspecificUser=new Button(shell,SWT.CHECK);
  props.setLook(wspecificUser);
  wspecificUser.setToolTipText(BaseMessages.getString(PKG,"JobEntryConnectedToRepositoryDialog.specificUser.Tooltip"));
  fdspecificUser=new FormData();
  fdspecificUser.left=new FormAttachment(middle,0);
  fdspecificUser.top=new FormAttachment(wRepName,margin);
  fdspecificUser.right=new FormAttachment(100,0);
  wspecificUser.setLayoutData(fdspecificUser);
  wspecificUser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      activeSpecUser();
    }
  }
);
  wlUserName=new Label(shell,SWT.RIGHT);
  wlUserName.setText(BaseMessages.getString(PKG,"JobEntryConnectedToUserositoryDialog.UserName.Label"));
  props.setLook(wlUserName);
  fdlUserName=new FormData();
  fdlUserName.left=new FormAttachment(0,0);
  fdlUserName.right=new FormAttachment(middle,-margin);
  fdlUserName.top=new FormAttachment(wspecificUser,margin);
  wlUserName.setLayoutData(fdlUserName);
  wUserName=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wUserName);
  wUserName.setToolTipText(BaseMessages.getString(PKG,"JobEntryConnectedToUserositoryDialog.UserName.Tooltip"));
  wUserName.addModifyListener(lsMod);
  fdUserName=new FormData();
  fdUserName.left=new FormAttachment(middle,0);
  fdUserName.top=new FormAttachment(wspecificUser,margin);
  fdUserName.right=new FormAttachment(100,-margin);
  wUserName.setLayoutData(fdUserName);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wUserName);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  activeSpecRep();
  activeSpecUser();
  BaseStepDialog.setSize(shell);
  shell.open();
  props.setDialogSize(shell,"JobSuccessDialogSize");
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
