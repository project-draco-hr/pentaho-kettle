{
  Object[] outputRowData=RowDataUtil.allocateRowData(data.outputRowMeta.size());
  int outputIndex=0;
  int removeIndex=0;
  for (int i=0; i < rowMeta.size(); i++) {
    if (removeIndex < data.removeNrs.length && i == data.removeNrs[removeIndex]) {
      removeIndex++;
    }
 else {
      outputRowData[outputIndex++]=rowData[i];
    }
  }
  for (int i=0; i < data.targetResult.length; i++) {
    Object resultValue=data.targetResult[i];
    DenormaliserTargetField field=meta.getDenormaliserTargetField()[i];
switch (field.getTargetAggregationType()) {
case DenormaliserTargetField.TYPE_AGGR_AVERAGE:
      long count=data.counters[i];
    Object sum=data.sum[i];
  if (count > 0) {
    if (sum instanceof Long)     resultValue=(long)((Long)sum / count);
 else     if (sum instanceof Double)     resultValue=(double)((Double)sum / count);
 else     if (sum instanceof BigDecimal)     resultValue=((BigDecimal)sum).divide(new BigDecimal(count));
 else     resultValue=null;
  }
break;
default :
break;
}
outputRowData[outputIndex++]=resultValue;
}
return outputRowData;
}
