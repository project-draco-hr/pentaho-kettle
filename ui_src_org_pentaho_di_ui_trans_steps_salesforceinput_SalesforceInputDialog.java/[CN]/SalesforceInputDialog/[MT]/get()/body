{
  SalesforceConnection connection=null;
  try {
    SalesforceInputMeta meta=new SalesforceInputMeta();
    getInfo(meta);
    wFields.removeAll();
    String realModule=transMeta.environmentSubstitute(meta.getModule());
    String realURL=transMeta.environmentSubstitute(meta.getTargetURL());
    String realUsername=transMeta.environmentSubstitute(meta.getUserName());
    String realPassword=transMeta.environmentSubstitute(meta.getPassword());
    int realTimeOut=Const.toInt(transMeta.environmentSubstitute(meta.getTimeOut()),0);
    connection=new SalesforceConnection(log,realURL,realUsername,realPassword);
    connection.setTimeOut(realTimeOut);
    String[] fieldsName=null;
    if (meta.isSpecifyQuery()) {
      String realQuery=transMeta.environmentSubstitute(meta.getQuery());
      connection.setSQL(realQuery);
      connection.connect();
      MessageElement[] fields=connection.getElements();
      int nrFields=fields.length;
      List<String> fieldNames=new ArrayList<String>();
      for (int i=0; i < nrFields; i++) {
        addFields("",fieldNames,fields[i]);
      }
      fieldsName=new String[nrFields];
    }
 else {
      connection.connect();
      Field[] fields=connection.getObjectFields(realModule);
      fieldsName=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        String FieldLabel=field.getLabel();
        String FieldName=field.getName();
        fieldsName[i]=FieldName;
        String FieldType=field.getType().getValue();
        String FieldLengh=String.valueOf(field.getLength());
        String FieldPrecision=String.valueOf(field.getPrecision());
        TableItem item=new TableItem(wFields.table,SWT.NONE);
        item.setText(1,FieldLabel);
        item.setText(2,FieldName);
        item.setText(3,field.isIdLookup() ? BaseMessages.getString(PKG,"System.Combo.Yes") : BaseMessages.getString(PKG,"System.Combo.No"));
        if (FieldType.equals("boolean")) {
          item.setText(4,"Boolean");
        }
 else         if (FieldType.equals("date")) {
          item.setText(4,"Date");
          item.setText(5,DEFAULT_DATE_FORMAT);
        }
 else         if (FieldType.equals("datetime")) {
          item.setText(4,"Date");
          item.setText(5,DEFAULT_DATE_TIME_FORMAT);
        }
 else         if (FieldType.equals("double")) {
          item.setText(4,"Number");
        }
 else         if (FieldType.equals("int")) {
          item.setText(4,"Integer");
        }
 else {
          item.setText(4,"String");
        }
        if (!FieldType.equals("boolean") && !FieldType.equals("datetime") && !FieldType.equals("date")) {
          item.setText(6,FieldLengh);
        }
        if (!FieldType.equals("boolean") && !FieldType.equals("datetime") && !FieldType.equals("date")) {
          item.setText(7,FieldPrecision);
        }
      }
    }
    if (fieldsName != null)     colinf[1].setComboValues(fieldsName);
    wFields.removeEmptyRows();
    wFields.setRowNums();
    wFields.optWidth(true);
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"SalesforceInputMeta.ErrorRetrieveData.DialogTitle"),BaseMessages.getString(PKG,"SalesforceInputMeta.ErrorRetrieveData.DialogMessage"),e);
  }
catch (  Exception e) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"SalesforceInputMeta.ErrorRetrieveData.DialogTitle"),BaseMessages.getString(PKG,"SalesforceInputMeta.ErrorRetrieveData.DialogMessage"),e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      Exception e) {
      }
      ;
    }
  }
}
