{
  PluginRegistry registry=getInstance();
  try {
    annotationDB=new AnnotationDB();
    List<URL> urlList=new ArrayList<URL>();
    List<PluginFolderInterface> folders=PluginFolder.populateFolders(null);
    for (    PluginFolderInterface pluginFolder : folders) {
      try {
        FileObject[] fileObjects=pluginFolder.findJarFiles();
        if (fileObjects != null) {
          for (          FileObject fileObject : fileObjects) {
            String uri=fileObject.getName().getURI();
            urlList.add(new URL(URLDecoder.decode(uri,"UTF-8")));
          }
        }
      }
 catch (      Exception e) {
        LogChannel.GENERAL.logError("Error searching for jar files in plugin folder '" + pluginFolder + "'",e);
      }
    }
    LogChannel.GENERAL.logBasic("Found " + urlList.size() + " objects to scan for annotated plugins.");
    long startScan=System.currentTimeMillis();
    URL[] urls=urlList.toArray(new URL[urlList.size()]);
    annotationDB.scanArchives(urls);
    LogChannel.GENERAL.logBasic("Finished annotation scan in " + (System.currentTimeMillis() - startScan) + "ms.");
    classPathFinder=new ClassPathFinder(urls);
  }
 catch (  Exception e) {
    throw new KettlePluginException("Unable to scan for annotations in the classpath",e);
  }
  for (  PluginTypeInterface pluginType : pluginTypes) {
    registry.registerPluginType(pluginType.getClass());
    long startScan=System.currentTimeMillis();
    pluginType.searchPlugins();
    LogChannel.GENERAL.logDetailed("Registered " + registry.getPlugins(pluginType.getClass()).size() + " plugins of type '"+ pluginType.getName()+ "' in "+ (System.currentTimeMillis() - startScan)+ "ms.");
  }
}
