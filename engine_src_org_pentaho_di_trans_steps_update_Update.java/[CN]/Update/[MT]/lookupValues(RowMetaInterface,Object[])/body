{
  Object[] outputRow=row;
  Object[] add;
  if (!Const.isEmpty(meta.getIgnoreFlagField())) {
    outputRow=new Object[data.outputRowMeta.size()];
    for (int i=0; i < rowMeta.size(); i++) {
      outputRow[i]=row[i];
    }
  }
  Object[] lookupRow=new Object[data.lookupParameterRowMeta.size()];
  int lookupIndex=0;
  for (int i=0; i < data.keynrs.length; i++) {
    if (data.keynrs[i] >= 0) {
      lookupRow[lookupIndex]=row[data.keynrs[i]];
      lookupIndex++;
    }
    if (data.keynrs2[i] >= 0) {
      lookupRow[lookupIndex]=row[data.keynrs2[i]];
      lookupIndex++;
    }
  }
  RowMetaInterface returnRowMeta=null;
  if (!meta.isSkipLookup()) {
    data.db.setValues(data.lookupParameterRowMeta,lookupRow,data.prepStatementLookup);
    if (log.isDebug()) {
      logDebug(BaseMessages.getString(PKG,"Update.Log.ValuesSetForLookup",data.lookupParameterRowMeta.getString(lookupRow),rowMeta.getString(row)));
    }
    add=data.db.getLookup(data.prepStatementLookup);
    returnRowMeta=data.db.getReturnRowMeta();
  }
 else {
    add=null;
  }
  incrementLinesInput();
  if (add == null && !meta.isSkipLookup()) {
    if (!meta.isErrorIgnored()) {
      if (getStepMeta().isDoingErrorHandling()) {
        outputRow=null;
        if (data.stringErrorKeyNotFound == null) {
          data.stringErrorKeyNotFound=BaseMessages.getString(PKG,"Update.Exception.KeyCouldNotFound") + data.lookupParameterRowMeta.getString(lookupRow);
          data.stringFieldnames="";
          for (int i=0; i < data.lookupParameterRowMeta.size(); i++) {
            if (i > 0) {
              data.stringFieldnames+=", ";
            }
            data.stringFieldnames+=data.lookupParameterRowMeta.getValueMeta(i).getName();
          }
        }
        putError(rowMeta,row,1L,data.stringErrorKeyNotFound,data.stringFieldnames,"UPD001");
      }
 else {
        throw new KettleDatabaseException(BaseMessages.getString(PKG,"Update.Exception.KeyCouldNotFound") + data.lookupParameterRowMeta.getString(lookupRow));
      }
    }
 else {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"Update.Log.KeyCouldNotFound") + data.lookupParameterRowMeta.getString(lookupRow));
      }
      if (!Const.isEmpty(meta.getIgnoreFlagField())) {
        outputRow[rowMeta.size()]=Boolean.FALSE;
      }
    }
  }
 else {
    if (!meta.isSkipLookup()) {
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"Update.Log.FoundRow") + data.lookupReturnRowMeta.getString(add));
      }
    }
    boolean update=false;
    if (meta.isSkipLookup()) {
      update=true;
    }
 else {
      for (int i=0; i < data.valuenrs.length; i++) {
        ValueMetaInterface valueMeta=rowMeta.getValueMeta(data.valuenrs[i]);
        Object rowvalue=row[data.valuenrs[i]];
        ValueMetaInterface returnValueMeta=returnRowMeta.getValueMeta(i);
        Object retvalue=add[i];
        if (returnValueMeta.compare(retvalue,valueMeta,rowvalue) != 0) {
          update=true;
        }
      }
    }
    if (update) {
      Object[] updateRow=new Object[data.updateParameterRowMeta.size()];
      for (int i=0; i < data.valuenrs.length; i++) {
        updateRow[i]=row[data.valuenrs[i]];
      }
      for (int i=0; i < lookupRow.length; i++) {
        updateRow[data.valuenrs.length + i]=lookupRow[i];
      }
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"Update.Log.UpdateRow") + data.lookupParameterRowMeta.getString(lookupRow));
      }
      data.db.setValues(data.updateParameterRowMeta,updateRow,data.prepStatementUpdate);
      data.db.insertRow(data.prepStatementUpdate,meta.useBatchUpdate(),true);
      incrementLinesUpdated();
    }
 else {
      incrementLinesSkipped();
    }
    if (!Const.isEmpty(meta.getIgnoreFlagField())) {
      outputRow[rowMeta.size()]=Boolean.TRUE;
    }
  }
  return outputRow;
}
