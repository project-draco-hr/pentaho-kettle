{
  if (conversionMetadata != null) {
    return conversionMetadata.getDecimalFormat(useBigDecimal);
  }
  if (decimalFormat == null || decimalFormatChanged) {
    decimalFormat=(DecimalFormat)NumberFormat.getInstance();
    decimalFormat.setParseBigDecimal(useBigDecimal);
    DecimalFormatSymbols decimalFormatSymbols=decimalFormat.getDecimalFormatSymbols();
    if (!Const.isEmpty(currencySymbol))     decimalFormatSymbols.setCurrencySymbol(currencySymbol);
    if (!Const.isEmpty(groupingSymbol))     decimalFormatSymbols.setGroupingSeparator(groupingSymbol.charAt(0));
    if (!Const.isEmpty(decimalSymbol))     decimalFormatSymbols.setDecimalSeparator(decimalSymbol.charAt(0));
    decimalFormat.setDecimalFormatSymbols(decimalFormatSymbols);
    if (!Const.isEmpty(conversionMask)) {
      decimalFormat.applyPattern(conversionMask);
    }
 else {
switch (type) {
case TYPE_INTEGER:
{
          if (length < 1) {
            decimalFormat.applyPattern(" ###############0;-###############0");
          }
 else {
            StringBuffer integerPattern=new StringBuffer();
            integerPattern.append(" ");
            for (int i=0; i < getLength(); i++)             integerPattern.append('0');
            integerPattern.append(";");
            integerPattern.append("-");
            for (int i=0; i < getLength(); i++)             integerPattern.append('0');
            decimalFormat.applyPattern(integerPattern.toString());
          }
        }
      break;
case TYPE_BIGNUMBER:
case TYPE_NUMBER:
{
      if (length < 1) {
        decimalFormat.applyPattern(" ##########0.0########;-#########0.0########");
      }
 else {
        StringBuffer numberPattern=new StringBuffer();
        numberPattern.append(' ');
        if (precision < 0) {
          for (int i=0; i < length; i++)           numberPattern.append('0');
          numberPattern.append(".00");
        }
 else {
          for (int i=0; i <= length; i++)           numberPattern.append('0');
          int pos=length - precision + 1;
          if (pos >= 0 && pos < numberPattern.length()) {
            numberPattern.setCharAt(length - precision + 1,'.');
          }
        }
        StringBuffer negativePattern=new StringBuffer(numberPattern);
        negativePattern.setCharAt(0,'-');
        numberPattern.append(";");
        numberPattern.append(negativePattern);
        decimalFormat.applyPattern(numberPattern.toString());
      }
    }
  break;
default :
break;
}
}
decimalFormatChanged=false;
}
return decimalFormat;
}
