{
  if (convertMeta == null) {
    throw new KettleValueException("API coding error: convertMeta input parameter should not be equals to null");
  }
  String null_value=nullIf;
  int inValueType=convertMeta.getType();
  int outValueType=getType();
  if (null_value == null) {
switch (inValueType) {
case ValueMetaInterface.TYPE_BOOLEAN:
      null_value=Const.NULL_BOOLEAN;
    break;
case ValueMetaInterface.TYPE_STRING:
  null_value=Const.NULL_STRING;
break;
case ValueMetaInterface.TYPE_BIGNUMBER:
null_value=Const.NULL_BIGNUMBER;
break;
case ValueMetaInterface.TYPE_NUMBER:
null_value=Const.NULL_NUMBER;
break;
case ValueMetaInterface.TYPE_INTEGER:
null_value=Const.NULL_INTEGER;
break;
case ValueMetaInterface.TYPE_DATE:
null_value=Const.NULL_DATE;
break;
case ValueMetaInterface.TYPE_BINARY:
null_value=Const.NULL_BINARY;
break;
default :
null_value=Const.NULL_NONE;
break;
}
}
if (!Const.isEmpty(ifNull)) {
if (Const.isEmpty(pol) || pol.equalsIgnoreCase(Const.rightPad(new StringBuilder(null_value),pol.length()))) {
pol=ifNull;
}
}
boolean isStringValue=outValueType == Value.VALUE_TYPE_STRING;
Object emptyValue=isStringValue ? Const.NULL_STRING : null;
Boolean isEmptyAndNullDiffer=convertStringToBoolean(Const.NVL(System.getProperty(Const.KETTLE_EMPTY_STRING_DIFFERS_FROM_NULL,"N"),"N"));
if (pol == null && isStringValue && isEmptyAndNullDiffer) {
pol=Const.NULL_STRING;
}
if (pol == null) {
return null;
}
 else if (Const.isEmpty(pol) && !isStringValue) {
return null;
}
 else {
if (!Const.isEmpty(null_value)) {
if (null_value.length() <= pol.length()) {
if (pol.equalsIgnoreCase(Const.rightPad(new StringBuilder(null_value),pol.length()))) {
return emptyValue;
}
}
}
 else {
if (Const.onlySpaces(pol)) {
return emptyValue;
}
}
}
StringBuilder strpol;
switch (trim_type) {
case ValueMetaInterface.TRIM_TYPE_LEFT:
strpol=new StringBuilder(pol);
while (strpol.length() > 0 && strpol.charAt(0) == ' ') {
strpol.deleteCharAt(0);
}
pol=strpol.toString();
break;
case ValueMetaInterface.TRIM_TYPE_RIGHT:
strpol=new StringBuilder(pol);
while (strpol.length() > 0 && strpol.charAt(strpol.length() - 1) == ' ') {
strpol.deleteCharAt(strpol.length() - 1);
}
pol=strpol.toString();
break;
case ValueMetaInterface.TRIM_TYPE_BOTH:
strpol=new StringBuilder(pol);
while (strpol.length() > 0 && strpol.charAt(0) == ' ') {
strpol.deleteCharAt(0);
}
while (strpol.length() > 0 && strpol.charAt(strpol.length() - 1) == ' ') {
strpol.deleteCharAt(strpol.length() - 1);
}
pol=strpol.toString();
break;
default :
break;
}
return convertData(convertMeta,pol);
}
