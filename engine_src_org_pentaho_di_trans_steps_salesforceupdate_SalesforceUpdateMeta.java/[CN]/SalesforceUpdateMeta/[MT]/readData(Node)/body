{
  try {
    targeturl=XMLHandler.getTagValue(stepnode,"targeturl");
    username=XMLHandler.getTagValue(stepnode,"username");
    password=XMLHandler.getTagValue(stepnode,"password");
    if (password != null && password.startsWith("Encrypted")) {
      password=Encr.decryptPassword(password.replace("Encrypted","").replace(" ",""));
    }
    module=XMLHandler.getTagValue(stepnode,"module");
    batchSize=XMLHandler.getTagValue(stepnode,"batchSize");
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrFields=XMLHandler.countNodes(fields,"field");
    allocate(nrFields);
    for (int i=0; i < nrFields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      updateLookup[i]=XMLHandler.getTagValue(fnode,"name");
      updateStream[i]=XMLHandler.getTagValue(fnode,"field");
      if (updateStream[i] == null) {
        updateStream[i]=updateLookup[i];
      }
      String updateValue=XMLHandler.getTagValue(fnode,"useExternalId");
      if (updateValue == null) {
        useExternalId[i]=Boolean.FALSE;
      }
 else {
        if (updateValue.equalsIgnoreCase("Y")) {
          useExternalId[i]=Boolean.TRUE;
        }
 else {
          useExternalId[i]=Boolean.FALSE;
        }
      }
    }
    useCompression="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"useCompression"));
    rollbackAllChangesOnError="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"rollbackAllChangesOnError"));
    timeout=XMLHandler.getTagValue(stepnode,"timeout");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
