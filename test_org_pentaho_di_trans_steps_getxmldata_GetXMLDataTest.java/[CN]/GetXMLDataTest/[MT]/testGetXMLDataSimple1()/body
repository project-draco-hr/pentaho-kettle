{
  EnvUtil.environmentInit();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("getxmldata1");
  StepLoader steploader=StepLoader.getInstance();
  String injectorStepname="injector step";
  InjectorMeta im=new InjectorMeta();
  String injectorPid=steploader.getStepPluginID(im);
  StepMeta injectorStep=new StepMeta(injectorPid,injectorStepname,im);
  transMeta.addStep(injectorStep);
  String getXMLDataName="get xml data step";
  GetXMLDataMeta gxdm=new GetXMLDataMeta();
  String getXMLDataPid=steploader.getStepPluginID(gxdm);
  StepMeta getXMLDataStep=new StepMeta(getXMLDataPid,getXMLDataName,gxdm);
  transMeta.addStep(getXMLDataStep);
  GetXMLDataField[] fields=new GetXMLDataField[5];
  for (int idx=0; idx < fields.length; idx++) {
    fields[idx]=new GetXMLDataField();
  }
  fields[0].setName("objectid");
  fields[0].setXPath("ObjectID");
  fields[0].setElementType(GetXMLDataField.ELEMENT_TYPE_NODE);
  fields[0].setType(ValueMetaInterface.TYPE_STRING);
  fields[0].setFormat("");
  fields[0].setLength(-1);
  fields[0].setPrecision(-1);
  fields[0].setCurrencySymbol("");
  fields[0].setDecimalSymbol("");
  fields[0].setGroupSymbol("");
  fields[0].setTrimType(GetXMLDataField.TYPE_TRIM_NONE);
  fields[1].setName("sapident");
  fields[1].setXPath("SAPIDENT");
  fields[1].setElementType(GetXMLDataField.ELEMENT_TYPE_NODE);
  fields[1].setType(ValueMetaInterface.TYPE_STRING);
  fields[1].setFormat("");
  fields[1].setLength(-1);
  fields[1].setPrecision(-1);
  fields[1].setCurrencySymbol("");
  fields[1].setDecimalSymbol("");
  fields[1].setGroupSymbol("");
  fields[1].setTrimType(GetXMLDataField.TYPE_TRIM_NONE);
  fields[2].setName("quantity");
  fields[2].setXPath("Quantity");
  fields[2].setElementType(GetXMLDataField.ELEMENT_TYPE_NODE);
  fields[2].setType(ValueMetaInterface.TYPE_STRING);
  fields[2].setFormat("");
  fields[2].setLength(-1);
  fields[2].setPrecision(-1);
  fields[2].setCurrencySymbol("");
  fields[2].setDecimalSymbol("");
  fields[2].setGroupSymbol("");
  fields[2].setTrimType(GetXMLDataField.TYPE_TRIM_NONE);
  fields[3].setName("merkmalname");
  fields[3].setXPath("Merkmalname");
  fields[3].setElementType(GetXMLDataField.ELEMENT_TYPE_NODE);
  fields[3].setType(ValueMetaInterface.TYPE_STRING);
  fields[3].setFormat("");
  fields[3].setLength(-1);
  fields[3].setPrecision(-1);
  fields[3].setCurrencySymbol("");
  fields[3].setDecimalSymbol("");
  fields[3].setGroupSymbol("");
  fields[3].setTrimType(GetXMLDataField.TYPE_TRIM_NONE);
  fields[4].setName("merkmalswert");
  fields[4].setXPath("Merkmalswert");
  fields[4].setElementType(GetXMLDataField.ELEMENT_TYPE_NODE);
  fields[4].setType(ValueMetaInterface.TYPE_STRING);
  fields[4].setFormat("");
  fields[4].setLength(-1);
  fields[4].setPrecision(-1);
  fields[4].setCurrencySymbol("");
  fields[4].setDecimalSymbol("");
  fields[4].setGroupSymbol("");
  fields[4].setTrimType(GetXMLDataField.TYPE_TRIM_NONE);
  gxdm.setEncoding("UTF-8");
  gxdm.setIsAFile(false);
  gxdm.setInFields(true);
  gxdm.setLoopXPath("Level1/Level2/Props");
  gxdm.setXMLField("field1");
  gxdm.setInputFields(fields);
  TransHopMeta hi=new TransHopMeta(injectorStep,getXMLDataStep);
  transMeta.addTransHop(hi);
  String dummyStepname1="dummy step 1";
  DummyTransMeta dm1=new DummyTransMeta();
  String dummyPid1=steploader.getStepPluginID(dm1);
  StepMeta dummyStep1=new StepMeta(dummyPid1,dummyStepname1,dm1);
  transMeta.addStep(dummyStep1);
  TransHopMeta hi1=new TransHopMeta(getXMLDataStep,dummyStep1);
  transMeta.addTransHop(hi1);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(dummyStepname1,0);
  RowStepCollector dummyRc1=new RowStepCollector();
  si.addRowListener(dummyRc1);
  RowProducer rp=trans.addRowProducer(injectorStepname,0);
  trans.startThreads();
  List<RowMetaAndData> inputList=createData();
  Iterator<RowMetaAndData> it=inputList.iterator();
  while (it.hasNext()) {
    RowMetaAndData rm=it.next();
    rp.putRow(rm.getRowMeta(),rm.getData());
  }
  rp.finished();
  trans.waitUntilFinished();
  List<RowMetaAndData> resultRows=dummyRc1.getRowsWritten();
  List<RowMetaAndData> goldenImageRows=createResultData1();
  checkRows(goldenImageRows,resultRows);
}
