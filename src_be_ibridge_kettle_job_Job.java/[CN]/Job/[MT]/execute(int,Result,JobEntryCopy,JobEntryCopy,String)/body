{
  Result res=null;
  if (stopped) {
    res=new Result(nr);
    res.stopped=true;
    return res;
  }
  log.logDetailed(toString(),"exec(" + nr + ", "+ (prev_result != null ? prev_result.getNrErrors() : 0)+ ", "+ (startpoint != null ? startpoint.toString() : "null")+ ")");
  if (startpoint == null) {
    beginProcessing();
    startpoint=jobMeta.findJobEntry(JobMeta.STRING_SPECIAL_START,0);
    if (startpoint == null) {
      log.logError(toString(),"Couldn't find starting point in this job.");
      return prev_result;
    }
  }
  JobEntryInterface jei=startpoint.getEntry();
  JobEntryResult jerBefore=new JobEntryResult(null,"Job entry started",reason,startpoint);
  jobTracker.addJobTracker(new JobTracker(jobMeta,jerBefore));
  Result result=jei.execute(prev_result,nr,rep,this);
  JobEntryResult jerAfter=new JobEntryResult(result,"Job entry ended",null,startpoint);
  jobTracker.addJobTracker(new JobTracker(jobMeta,jerAfter));
  int nrNext=jobMeta.findNrNextChefGraphEntries(startpoint);
  for (int i=0; i < nrNext && !isStopped(); i++) {
    JobEntryCopy nextEntry=jobMeta.findNextChefGraphEntry(startpoint,i);
    JobHopMeta hi=jobMeta.findJobHop(startpoint,nextEntry);
    String nextComment=null;
    if (hi.isUnconditional()) {
      nextComment="Followed unconditional link";
    }
 else {
      if (result.getResult())       nextComment="Followed link after succes!";
 else       nextComment="Followed link after failure!";
    }
    if (hi.isUnconditional() || (startpoint.evaluates() && (!(hi.getEvaluation() ^ result.getResult())))) {
      log.logBasic(jobMeta.toString(),"Starting entry [" + nextEntry.getName() + "]");
      res=execute(nr + 1,result,nextEntry,startpoint,nextComment);
      log.logBasic(jobMeta.toString(),"Finished jobentry [" + nextEntry.getName() + "] (result="+ res.getResult()+ ")");
    }
  }
  if (res == null) {
    res=prev_result;
  }
  return res;
}
