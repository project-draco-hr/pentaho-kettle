{
  meta=(FarragoStreamingLoaderMeta)smi;
  data=(FarragoStreamingLoaderData)sdi;
  if (super.init(smi,sdi)) {
    try {
      if (log.isDebug())       logDebug("Connecting to LucidDB...");
      data.db=new Database(this,meta.getDatabaseMeta());
      data.db.shareVariablesWith(this);
      if (getTransMeta().isUsingUniqueConnections()) {
synchronized (getTrans()) {
          data.db.connect(getTrans().getThreadName(),getPartitionID());
        }
      }
 else {
        data.db.connect(getPartitionID());
      }
      if (log.isDebug())       logDebug("Connected to LucidDB");
      if (log.isDebug())       logDebug("Preparing sql statements: " + Const.CR + meta.getSql_statement());
      String sql=meta.getSql_statement();
      PreparedStatement ps=data.db.prepareSQL(sql);
      if (log.isDebug())       logDebug("Executing sql statements...");
      data.sqlRunner=new SqlRunner(data,ps);
      data.sqlRunner.start();
      if (log.isDebug())       logDebug("Remote rows is up now...");
      if (log.isDebug())       logDebug("Sleeping for 1second");
      Thread.sleep(1000);
      if (log.isDebug())       logDebug("Initialize local socket connection...");
      if (log.isDebug())       logDebug("Parameters for socket: Host: " + meta.getHost() + " Port: "+ meta.getPort());
      int try_cnt=0;
      while (true) {
        try {
          data.client=new Socket(meta.getHost(),Integer.valueOf(meta.getPort()));
          data.objOut=new ObjectOutputStream(data.client.getOutputStream());
          if (log.isDebug())           logDebug("Local socket connection is ready");
          break;
        }
 catch (        SocketException se) {
          if (try_cnt < 5) {
            logBasic("Local socket connection is not ready, so try to connect in 5 second");
            Thread.sleep(5000);
            data.client=null;
            try_cnt++;
          }
 else {
            throw new KettleException("Fatal Error: Remote_rows UDX can't be connected! Please check...");
          }
        }
catch (        Exception ex) {
          throw ex;
        }
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
      logError(e.getMessage());
      return false;
    }
catch (    UnknownHostException e) {
      e.printStackTrace();
      logError(e.getMessage());
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      logError(e.getMessage());
      return false;
    }
catch (    KettleDatabaseException e) {
      e.printStackTrace();
      logError(e.getMessage());
      return false;
    }
catch (    Exception e) {
      e.printStackTrace();
      logError(e.getMessage());
      return false;
    }
    return true;
  }
  return false;
}
