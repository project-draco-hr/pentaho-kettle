{
  try {
    outputValue=rep.getStepAttributeString(id_step,"outputValue");
    jsonBloc=rep.getStepAttributeString(id_step,"jsonBloc");
    nrRowsInBloc=rep.getStepAttributeString(id_step,"nrRowsInBloc");
    operationType=getOperationTypeByCode(Const.NVL(rep.getStepAttributeString(id_step,"operation_type"),""));
    encoding=rep.getStepAttributeString(id_step,"encoding");
    AddToResult=rep.getStepAttributeBoolean(id_step,"addtoresult");
    fileName=rep.getStepAttributeString(id_step,"file_name");
    extension=rep.getStepAttributeString(id_step,"file_extention");
    fileAppended=rep.getStepAttributeBoolean(id_step,"file_append");
    stepNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_stepnr");
    partNrInFilename=rep.getStepAttributeBoolean(id_step,"file_add_partnr");
    dateInFilename=rep.getStepAttributeBoolean(id_step,"file_add_date");
    timeInFilename=rep.getStepAttributeBoolean(id_step,"file_add_time");
    createparentfolder=rep.getStepAttributeBoolean(id_step,"create_parent_folder");
    DoNotOpenNewFileInit=rep.getStepAttributeBoolean(id_step,"DoNotOpenNewFileInit");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      outputFields[i]=new JsonOutputField();
      outputFields[i].setFieldName(rep.getStepAttributeString(id_step,i,"field_name"));
      outputFields[i].setElementName(rep.getStepAttributeString(id_step,i,"field_element"));
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unexpected error reading step information from the repository",e);
  }
}
