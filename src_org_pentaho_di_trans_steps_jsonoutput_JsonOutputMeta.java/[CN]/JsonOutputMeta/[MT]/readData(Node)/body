{
  try {
    outputValue=XMLHandler.getTagValue(stepnode,"outputValue");
    jsonBloc=XMLHandler.getTagValue(stepnode,"jsonBloc");
    nrRowsInBloc=XMLHandler.getTagValue(stepnode,"nrRowsInBloc");
    operationType=getOperationTypeByCode(Const.NVL(XMLHandler.getTagValue(stepnode,"operation_type"),""));
    compatibilityMode="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"compatibility_mode"));
    encoding=XMLHandler.getTagValue(stepnode,"encoding");
    AddToResult="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"AddToResult"));
    fileName=XMLHandler.getTagValue(stepnode,"file","name");
    createparentfolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","create_parent_folder"));
    extension=XMLHandler.getTagValue(stepnode,"file","extention");
    fileAppended="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","append"));
    stepNrInFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","split"));
    partNrInFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","haspartno"));
    dateInFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","add_date"));
    timeInFilename="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","add_time"));
    DoNotOpenNewFileInit="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","DoNotOpenNewFileInit"));
    servletOutput="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"file","servlet_output"));
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    int nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      outputFields[i]=new JsonOutputField();
      outputFields[i].setFieldName(XMLHandler.getTagValue(fnode,"name"));
      outputFields[i].setElementName(XMLHandler.getTagValue(fnode,"element"));
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to load step info from XML",e);
  }
}
