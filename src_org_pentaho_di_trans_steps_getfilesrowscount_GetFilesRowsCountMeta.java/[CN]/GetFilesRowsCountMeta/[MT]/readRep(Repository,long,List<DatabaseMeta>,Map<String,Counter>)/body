{
  try {
    includeFilesCount=rep.getStepAttributeBoolean(id_step,"files_count");
    filesCountFieldName=rep.getStepAttributeString(id_step,"files_count_fieldname");
    rowsCountFieldName=rep.getStepAttributeString(id_step,"rows_count_fieldname");
    RowSeparator_format=rep.getStepAttributeString(id_step,"rowseparator_format");
    RowSeparator=rep.getStepAttributeString(id_step,"row_separator");
    String addresult=rep.getStepAttributeString(id_step,"isaddresult");
    if (Const.isEmpty(addresult))     isaddresult=true;
 else     isaddresult=rep.getStepAttributeBoolean(id_step,"isaddresult");
    filefield=rep.getStepAttributeBoolean(id_step,"filefield");
    outputFilenameField=rep.getStepAttributeString(id_step,"filename_Field");
    int nrFiles=rep.countNrStepAttributes(id_step,"file_name");
    allocate(nrFiles);
    for (int i=0; i < nrFiles; i++) {
      fileName[i]=rep.getStepAttributeString(id_step,i,"file_name");
      fileMask[i]=rep.getStepAttributeString(id_step,i,"file_mask");
    }
  }
 catch (  Exception e) {
    throw new KettleException(Messages.getString("GetFilesRowsCountMeta.Exception.ErrorReadingRepository"),e);
  }
}
