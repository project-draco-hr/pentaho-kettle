{
  PluginRegistry.addPluginType(ValueMetaPluginType.getInstance());
  PluginRegistry.init(true);
  MySQLBulkLoader loader;
  MySQLBulkLoaderData ld=new MySQLBulkLoaderData();
  MySQLBulkLoaderMeta lm=new MySQLBulkLoaderMeta();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("loader");
  PluginRegistry plugReg=PluginRegistry.getInstance();
  String loaderPid=plugReg.getPluginId(StepPluginType.class,lm);
  StepMeta stepMeta=new StepMeta(loaderPid,"loader",lm);
  Trans trans=new Trans(transMeta);
  transMeta.addStep(stepMeta);
  trans.setRunning(true);
  loader=Mockito.spy(new MySQLBulkLoader(stepMeta,ld,1,transMeta,trans));
  RowMeta rm=new RowMeta();
  ValueMetaNumber vm=new ValueMetaNumber("Test");
  rm.addValueMeta(vm);
  RowMeta spyRowMeta=Mockito.spy(new RowMeta());
  Mockito.when(spyRowMeta.getValueMeta(Mockito.anyInt())).thenReturn(vm);
  loader.setInputRowMeta(spyRowMeta);
  MySQLBulkLoaderMeta smi=new MySQLBulkLoaderMeta();
  smi.setFieldStream(new String[]{"Test"});
  smi.setFieldFormatType(new int[]{MySQLBulkLoaderMeta.FIELD_FORMAT_TYPE_OK});
  smi.setDatabaseMeta(Mockito.mock(DatabaseMeta.class));
  ValueMetaNumber vmn=new ValueMetaNumber("Test");
  vmn.setLength(6,3);
  MySQLBulkLoaderData sdi=new MySQLBulkLoaderData();
  sdi.keynrs=new int[1];
  sdi.keynrs[0]=0;
  sdi.fifoStream=Mockito.mock(OutputStream.class);
  sdi.bulkFormatMeta=new ValueMetaInterface[]{vmn};
  loader.init(smi,sdi);
  loader.first=false;
  Mockito.when(loader.getRow()).thenReturn(new Double[]{1.023});
  loader.processRow(smi,sdi);
  Mockito.verify(sdi.fifoStream,Mockito.times(1)).write(" 001.023".getBytes());
  Assert.assertEquals(" #000.000;-#000.000",vmn.getDecimalFormat().toPattern());
}
