{
  PluginRegistry.addPluginType(ValueMetaPluginType.getInstance());
  PluginRegistry.init(true);
  MySQLBulkLoader loader;
  MySQLBulkLoaderData ld=new MySQLBulkLoaderData();
  MySQLBulkLoaderMeta lm=new MySQLBulkLoaderMeta();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("loader");
  PluginRegistry plugReg=PluginRegistry.getInstance();
  String loaderPid=plugReg.getPluginId(StepPluginType.class,lm);
  StepMeta stepMeta=new StepMeta(loaderPid,"loader",lm);
  Trans trans=new Trans(transMeta);
  transMeta.addStep(stepMeta);
  trans.setRunning(true);
  loader=Mockito.spy(new MySQLBulkLoader(stepMeta,ld,1,transMeta,trans));
  RowMeta rm=new RowMeta();
  ValueMetaString vm=new ValueMetaString("I don't want NPE!");
  rm.addValueMeta(vm);
  RowMeta spyRowMeta=Mockito.spy(new RowMeta());
  Mockito.when(spyRowMeta.getValueMeta(Mockito.anyInt())).thenReturn(vm);
  loader.setInputRowMeta(spyRowMeta);
  MySQLBulkLoaderMeta smi=new MySQLBulkLoaderMeta();
  smi.setFieldStream(new String[]{"Test"});
  smi.setFieldFormatType(new int[]{MySQLBulkLoaderMeta.FIELD_FORMAT_TYPE_STRING_ESCAPE});
  smi.setEscapeChar("\\");
  smi.setEnclosure("\"");
  smi.setDatabaseMeta(Mockito.mock(DatabaseMeta.class));
  MySQLBulkLoaderData sdi=new MySQLBulkLoaderData();
  sdi.keynrs=new int[1];
  sdi.keynrs[0]=0;
  sdi.fifoStream=Mockito.mock(OutputStream.class);
  loader.init(smi,sdi);
  loader.first=false;
  Mockito.when(loader.getRow()).thenReturn(new String[]{"test\"Escape\\"});
  loader.processRow(smi,sdi);
  Mockito.verify(sdi.fifoStream,Mockito.times(1)).write("test\\\"Escape\\\\".getBytes());
}
