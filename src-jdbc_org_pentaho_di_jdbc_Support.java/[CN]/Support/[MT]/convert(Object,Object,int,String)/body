{
  try {
switch (jdbcType) {
case java.sql.Types.TINYINT:
case java.sql.Types.SMALLINT:
case java.sql.Types.INTEGER:
      if (x == null) {
        return INTEGER_ZERO;
      }
 else       if (x instanceof Integer) {
        return x;
      }
 else       if (x instanceof Byte) {
        return new Integer(((Byte)x).byteValue() & 0xFF);
      }
 else       if (x instanceof Number) {
        return new Integer(((Number)x).intValue());
      }
 else       if (x instanceof String) {
        return new Integer(((String)x).trim());
      }
 else       if (x instanceof Boolean) {
        return ((Boolean)x).booleanValue() ? INTEGER_ONE : INTEGER_ZERO;
      }
    break;
case java.sql.Types.BIGINT:
  if (x == null) {
    return LONG_ZERO;
  }
 else   if (x instanceof Long) {
    return x;
  }
 else   if (x instanceof Byte) {
    return new Long(((Byte)x).byteValue() & 0xFF);
  }
 else   if (x instanceof Number) {
    return new Long(((Number)x).longValue());
  }
 else   if (x instanceof String) {
    return new Long(((String)x).trim());
  }
 else   if (x instanceof Boolean) {
    return ((Boolean)x).booleanValue() ? LONG_ONE : LONG_ZERO;
  }
break;
case java.sql.Types.REAL:
if (x == null) {
return FLOAT_ZERO;
}
 else if (x instanceof Float) {
return x;
}
 else if (x instanceof Byte) {
return new Float(((Byte)x).byteValue() & 0xFF);
}
 else if (x instanceof Number) {
return new Float(((Number)x).floatValue());
}
 else if (x instanceof String) {
return new Float(((String)x).trim());
}
 else if (x instanceof Boolean) {
return ((Boolean)x).booleanValue() ? FLOAT_ONE : FLOAT_ZERO;
}
break;
case java.sql.Types.FLOAT:
case java.sql.Types.DOUBLE:
if (x == null) {
return DOUBLE_ZERO;
}
 else if (x instanceof Double) {
return x;
}
 else if (x instanceof Byte) {
return new Double(((Byte)x).byteValue() & 0xFF);
}
 else if (x instanceof Number) {
return new Double(((Number)x).doubleValue());
}
 else if (x instanceof String) {
return new Double(((String)x).trim());
}
 else if (x instanceof Boolean) {
return ((Boolean)x).booleanValue() ? DOUBLE_ONE : DOUBLE_ZERO;
}
break;
case java.sql.Types.NUMERIC:
case java.sql.Types.DECIMAL:
if (x == null) {
return null;
}
 else if (x instanceof BigDecimal) {
return x;
}
 else if (x instanceof Number) {
return new BigDecimal(x.toString());
}
 else if (x instanceof String) {
return new BigDecimal((String)x);
}
 else if (x instanceof Boolean) {
return ((Boolean)x).booleanValue() ? BIG_DECIMAL_ONE : BIG_DECIMAL_ZERO;
}
break;
case java.sql.Types.VARCHAR:
case java.sql.Types.CHAR:
if (x == null) {
return null;
}
 else if (x instanceof String) {
return x;
}
 else if (x instanceof Number) {
return x.toString();
}
 else if (x instanceof Boolean) {
return ((Boolean)x).booleanValue() ? "1" : "0";
}
 else if (x instanceof Clob) {
Clob clob=(Clob)x;
long length=clob.length();
if (length > Integer.MAX_VALUE) {
throw new SQLException(Messages.get("error.normalize.lobtoobig"),"22000");
}
return clob.getSubString(1,(int)length);
}
 else if (x instanceof Blob) {
Blob blob=(Blob)x;
long length=blob.length();
if (length > Integer.MAX_VALUE) {
throw new SQLException(Messages.get("error.normalize.lobtoobig"),"22000");
}
x=blob.getBytes(1,(int)length);
}
if (x instanceof byte[]) {
return toHex((byte[])x);
}
return x.toString();
case java.sql.Types.BIT:
case java.sql.Types.BOOLEAN:
if (x == null) {
return Boolean.FALSE;
}
 else if (x instanceof Boolean) {
return x;
}
 else if (x instanceof Number) {
return (((Number)x).intValue() == 0) ? Boolean.FALSE : Boolean.TRUE;
}
 else if (x instanceof String) {
String tmp=((String)x).trim();
return ("1".equals(tmp) || "true".equalsIgnoreCase(tmp)) ? Boolean.TRUE : Boolean.FALSE;
}
break;
case java.sql.Types.VARBINARY:
case java.sql.Types.BINARY:
if (x == null) {
return null;
}
 else if (x instanceof byte[]) {
return x;
}
 else if (x instanceof Blob) {
Blob blob=(Blob)x;
return blob.getBytes(1,(int)blob.length());
}
 else if (x instanceof Clob) {
Clob clob=(Clob)x;
long length=clob.length();
if (length > Integer.MAX_VALUE) {
throw new SQLException(Messages.get("error.normalize.lobtoobig"),"22000");
}
x=clob.getSubString(1,(int)length);
}
if (x instanceof String) {
if (charSet == null) {
charSet="ISO-8859-1";
}
try {
return ((String)x).getBytes(charSet);
}
 catch (UnsupportedEncodingException e) {
return ((String)x).getBytes();
}
}
 else if (x instanceof UniqueIdentifier) {
return ((UniqueIdentifier)x).getBytes();
}
break;
case java.sql.Types.TIMESTAMP:
if (x == null) {
return null;
}
 else if (x instanceof DateTime) {
return ((DateTime)x).toTimestamp();
}
 else if (x instanceof java.sql.Timestamp) {
return x;
}
 else if (x instanceof java.sql.Date) {
return new java.sql.Timestamp(((java.sql.Date)x).getTime());
}
 else if (x instanceof java.sql.Time) {
return new java.sql.Timestamp(((java.sql.Time)x).getTime());
}
 else if (x instanceof java.lang.String) {
return java.sql.Timestamp.valueOf(((String)x).trim());
}
break;
case java.sql.Types.DATE:
if (x == null) {
return null;
}
 else if (x instanceof DateTime) {
return ((DateTime)x).toDate();
}
 else if (x instanceof java.sql.Date) {
return x;
}
 else if (x instanceof java.sql.Time) {
return DATE_ZERO;
}
 else if (x instanceof java.sql.Timestamp) {
synchronized (cal) {
cal.setTime((java.util.Date)x);
cal.set(Calendar.HOUR_OF_DAY,0);
cal.set(Calendar.MINUTE,0);
cal.set(Calendar.SECOND,0);
cal.set(Calendar.MILLISECOND,0);
return new java.sql.Date(cal.getTime().getTime());
}
}
 else if (x instanceof java.lang.String) {
return java.sql.Date.valueOf(((String)x).trim());
}
break;
case java.sql.Types.TIME:
if (x == null) {
return null;
}
 else if (x instanceof DateTime) {
return ((DateTime)x).toTime();
}
 else if (x instanceof java.sql.Time) {
return x;
}
 else if (x instanceof java.sql.Date) {
return TIME_ZERO;
}
 else if (x instanceof java.sql.Timestamp) {
synchronized (cal) {
cal.setTime((java.util.Date)x);
cal.set(Calendar.YEAR,1970);
cal.set(Calendar.MONTH,0);
cal.set(Calendar.DAY_OF_MONTH,1);
return new java.sql.Time(cal.getTime().getTime());
}
}
 else if (x instanceof java.lang.String) {
return java.sql.Time.valueOf(((String)x).trim());
}
break;
case java.sql.Types.OTHER:
return x;
case java.sql.Types.JAVA_OBJECT:
throw new SQLException(Messages.get("error.convert.badtypes",x.getClass().getName(),getJdbcTypeName(jdbcType)),"22005");
case java.sql.Types.LONGVARBINARY:
case java.sql.Types.BLOB:
if (x == null) {
return null;
}
 else if (x instanceof Blob) {
return x;
}
 else if (x instanceof byte[]) {
return new BlobImpl(getConnection(callerReference),(byte[])x);
}
 else if (x instanceof Clob) {
Clob clob=(Clob)x;
try {
if (charSet == null) {
charSet="ISO-8859-1";
}
Reader rdr=clob.getCharacterStream();
BlobImpl blob=new BlobImpl(getConnection(callerReference));
BufferedWriter out=new BufferedWriter(new OutputStreamWriter(blob.setBinaryStream(1),charSet));
int c;
while ((c=rdr.read()) >= 0) {
out.write(c);
}
out.close();
rdr.close();
return blob;
}
 catch (UnsupportedEncodingException e) {
x=clob.getSubString(1,(int)clob.length());
}
catch (IOException e) {
throw new SQLException(Messages.get("error.generic.ioerror",e.getMessage()),"HY000");
}
}
if (x instanceof String) {
BlobImpl blob=new BlobImpl(getConnection(callerReference));
String data=(String)x;
if (charSet == null) {
charSet="ISO-8859-1";
}
try {
blob.setBytes(1,data.getBytes(charSet));
}
 catch (UnsupportedEncodingException e) {
blob.setBytes(1,data.getBytes());
}
return blob;
}
break;
case java.sql.Types.LONGVARCHAR:
case java.sql.Types.CLOB:
if (x == null) {
return null;
}
 else if (x instanceof Clob) {
return x;
}
 else if (x instanceof Blob) {
Blob blob=(Blob)x;
try {
InputStream is=blob.getBinaryStream();
ClobImpl clob=new ClobImpl(getConnection(callerReference));
Writer out=clob.setCharacterStream(1);
int b;
while ((b=is.read()) >= 0) {
out.write(hex[b >> 4]);
out.write(hex[b & 0x0F]);
}
out.close();
is.close();
return clob;
}
 catch (IOException e) {
throw new SQLException(Messages.get("error.generic.ioerror",e.getMessage()),"HY000");
}
}
 else if (x instanceof Boolean) {
x=((Boolean)x).booleanValue() ? "1" : "0";
}
 else if (!(x instanceof byte[])) {
x=x.toString();
}
if (x instanceof byte[]) {
ClobImpl clob=new ClobImpl(getConnection(callerReference));
clob.setString(1,toHex((byte[])x));
return clob;
}
 else if (x instanceof String) {
return new ClobImpl(getConnection(callerReference),(String)x);
}
break;
default :
throw new SQLException(Messages.get("error.convert.badtypeconst",getJdbcTypeName(jdbcType)),"HY004");
}
throw new SQLException(Messages.get("error.convert.badtypes",x.getClass().getName(),getJdbcTypeName(jdbcType)),"22005");
}
 catch (NumberFormatException nfe) {
throw new SQLException(Messages.get("error.convert.badnumber",getJdbcTypeName(jdbcType)),"22000");
}
}
