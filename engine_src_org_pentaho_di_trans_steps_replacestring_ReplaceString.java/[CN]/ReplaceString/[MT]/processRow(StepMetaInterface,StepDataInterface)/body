{
  meta=(ReplaceStringMeta)smi;
  data=(ReplaceStringData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    data.inputFieldsNr=data.outputRowMeta.size();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,repository,metaStore);
    data.numFields=meta.getFieldInStream().length;
    data.inStreamNrs=new int[data.numFields];
    data.outStreamNrs=new String[data.numFields];
    data.patterns=new Pattern[data.numFields];
    data.replaceByString=new String[data.numFields];
    data.setEmptyString=new boolean[data.numFields];
    data.replaceFieldIndex=new int[data.numFields];
    for (int i=0; i < data.numFields; i++) {
      data.inStreamNrs[i]=getInputRowMeta().indexOfValue(meta.getFieldInStream()[i]);
      if (data.inStreamNrs[i] < 0) {
        throw new KettleStepException(BaseMessages.getString(PKG,"ReplaceString.Exception.FieldRequired",meta.getFieldInStream()[i]));
      }
      if (getInputRowMeta().getValueMeta(data.inStreamNrs[i]).getType() != ValueMetaInterface.TYPE_STRING) {
        throw new KettleStepException(BaseMessages.getString(PKG,"ReplaceString.Exception.FieldTypeNotString",meta.getFieldInStream()[i]));
      }
      data.outStreamNrs[i]=environmentSubstitute(meta.getFieldOutStream()[i]);
      data.patterns[i]=buildPattern(meta.getUseRegEx()[i] != ReplaceStringMeta.USE_REGEX_YES,meta.getCaseSensitive()[i] == ReplaceStringMeta.CASE_SENSITIVE_YES,meta.getWholeWord()[i] == ReplaceStringMeta.WHOLE_WORD_YES,environmentSubstitute(meta.getReplaceString()[i]));
      String field=meta.getFieldReplaceByString()[i];
      if (!Const.isEmpty(field)) {
        data.replaceFieldIndex[i]=getInputRowMeta().indexOfValue(field);
        if (data.replaceFieldIndex[i] < 0) {
          throw new KettleStepException(BaseMessages.getString(PKG,"ReplaceString.Exception.FieldRequired",field));
        }
      }
 else {
        data.replaceFieldIndex[i]=-1;
        data.replaceByString[i]=environmentSubstitute(meta.getReplaceByString()[i]);
      }
      data.setEmptyString[i]=meta.isSetEmptyString()[i];
    }
  }
  try {
    Object[] output=getOneRow(getInputRowMeta(),r);
    putRow(data.outputRowMeta,output);
    if (checkFeedback(getLinesRead())) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"ReplaceString.Log.LineNumber") + getLinesRead());
      }
    }
  }
 catch (  KettleException e) {
    boolean sendToErrorRow=false;
    String errorMessage=null;
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"ReplaceString.Log.ErrorInStep",e.getMessage()));
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"ReplaceString001");
    }
  }
  return true;
}
