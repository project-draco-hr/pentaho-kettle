{
  try {
    int nrkeys=rep.countNrStepAttributes(id_step,"in_stream_name");
    allocate(nrkeys);
    for (int i=0; i < nrkeys; i++) {
      fieldInStream[i]=Const.NVL(rep.getStepAttributeString(id_step,i,"in_stream_name"),"");
      fieldOutStream[i]=Const.NVL(rep.getStepAttributeString(id_step,i,"out_stream_name"),"");
      useRegEx[i]=getCaseSensitiveByCode(Const.NVL(rep.getStepAttributeString(id_step,i,"use_regex"),""));
      replaceString[i]=Const.NVL(rep.getStepAttributeString(id_step,i,"replace_string"),"");
      replaceByString[i]=Const.NVL(rep.getStepAttributeString(id_step,i,"replace_by_string"),"");
      setEmptyString[i]=rep.getStepAttributeBoolean(id_step,i,"set_empty_string",false);
      replaceFieldByString[i]=Const.NVL(rep.getStepAttributeString(id_step,i,"replace_field_by_string"),"");
      wholeWord[i]=getWholeWordByCode(Const.NVL(rep.getStepAttributeString(id_step,i,"whole_world"),""));
      caseSensitive[i]=getCaseSensitiveByCode(Const.NVL(rep.getStepAttributeString(id_step,i,"case_sensitive"),""));
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"ReplaceStringMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
