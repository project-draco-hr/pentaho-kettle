{
  progressMonitor.beginTask(BaseMessages.getString(PKG,"TransPreviewProgressDialog.Monitor.BeginTask.Title"),100);
  trans=new Trans(transMeta);
  try {
    trans.prepareExecution(null);
  }
 catch (  final KettleException e) {
    shell.getDisplay().asyncExec(new Runnable(){
      public void run(){
        new ErrorDialog(shell,BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"TransPreviewProgressDialog.Exception.ErrorPreparingTransformation"),e);
      }
    }
);
    return;
  }
  transDebugMeta=new TransDebugMeta(transMeta);
  for (int i=0; i < previewStepNames.length; i++) {
    StepMeta stepMeta=transMeta.findStep(previewStepNames[i]);
    StepDebugMeta stepDebugMeta=new StepDebugMeta(stepMeta);
    stepDebugMeta.setReadingFirstRows(true);
    stepDebugMeta.setRowCount(previewSize[i]);
    transDebugMeta.getStepDebugMetaMap().put(stepMeta,stepDebugMeta);
  }
  transDebugMeta.addRowListenersToTransformation(trans);
  try {
    trans.startThreads();
  }
 catch (  final KettleException e) {
    shell.getDisplay().asyncExec(new Runnable(){
      public void run(){
        new ErrorDialog(shell,BaseMessages.getString(PKG,"System.Dialog.Error.Title"),BaseMessages.getString(PKG,"TransPreviewProgressDialog.Exception.ErrorPreparingTransformation"),e);
      }
    }
);
    return;
  }
  int previousPct=0;
  final List<String> previewComplete=new ArrayList<String>();
  while (previewComplete.size() < previewStepNames.length && !trans.isFinished() && !progressMonitor.isCanceled()) {
    transDebugMeta.addBreakPointListers(new BreakPointListener(){
      public void breakPointHit(      TransDebugMeta transDebugMeta,      StepDebugMeta stepDebugMeta,      RowMetaInterface rowBufferMeta,      List<Object[]> rowBuffer){
        String stepName=stepDebugMeta.getStepMeta().getName();
        previewComplete.add(stepName);
        progressMonitor.subTask(BaseMessages.getString(PKG,"TransPreviewProgressDialog.SubTask.StepPreviewFinished",stepName));
      }
    }
);
    int nrDone=0;
    int nrTotal=0;
    for (    StepDebugMeta stepDebugMeta : transDebugMeta.getStepDebugMetaMap().values()) {
      nrDone+=stepDebugMeta.getRowBuffer().size();
      nrTotal+=stepDebugMeta.getRowCount();
    }
    int pct=100 * nrDone / nrTotal;
    int worked=pct - previousPct;
    if (worked > 0) {
      progressMonitor.worked(worked);
    }
    previousPct=pct;
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
    if (progressMonitor.isCanceled()) {
      cancelled=true;
      trans.stopAll();
    }
  }
  trans.stopAll();
  loggingText=KettleLogStore.getAppender().getBuffer(trans.getLogChannel().getLogChannelId(),true).toString();
  progressMonitor.done();
}
