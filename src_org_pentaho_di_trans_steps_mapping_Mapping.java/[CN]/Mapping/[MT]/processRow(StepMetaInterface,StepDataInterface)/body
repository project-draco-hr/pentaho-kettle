{
  try {
    meta=(MappingMeta)smi;
    data=(MappingData)sdi;
    MappingInput[] mappingInputs=data.mappingTrans.findMappingInput();
    if (!getInputRowSets().isEmpty()) {
      for (      RowSet rowSet : new ArrayList<RowSet>(getInputRowSets())) {
        if (mappingInputs.length == 1) {
          mappingInputs[0].getInputRowSets().add(rowSet);
        }
 else {
          throw new KettleException("Unsupported situation detected where more than one Mapping Input step needs to be handled.  To solve it, insert a dummy step before the mapping step.");
        }
      }
      getInputRowSets().clear();
    }
    if (!getRemoteInputSteps().isEmpty()) {
      for (      RemoteStep remoteStep : getRemoteInputSteps()) {
        if (mappingInputs.length == 1) {
          mappingInputs[0].getRemoteInputSteps().add(remoteStep);
        }
 else {
          throw new KettleException("Unsupported situation detected where a remote input step is expecting data to end up in a particular Mapping Input step of a sub-transformation.  To solve it, insert a dummy step before the mapping.");
        }
      }
      getRemoteInputSteps().clear();
    }
    setMappingParameters();
    data.mappingTrans.startThreads();
    if (getTransMeta().getTransformationType() == TransformationType.Normal) {
      data.mappingTrans.waitUntilFinished();
      Result result=data.mappingTrans.getResult();
      setErrors(result.getNrErrors());
      setLinesRead(result.getNrLinesRead());
      setLinesWritten(result.getNrLinesWritten());
      setLinesInput(result.getNrLinesInput());
      setLinesOutput(result.getNrLinesOutput());
      setLinesUpdated(result.getNrLinesUpdated());
      setLinesRejected(result.getNrLinesRejected());
    }
    return false;
  }
 catch (  Throwable t) {
    if (data.mappingTrans != null)     data.mappingTrans.stopAll();
    throw new KettleException(t);
  }
}
