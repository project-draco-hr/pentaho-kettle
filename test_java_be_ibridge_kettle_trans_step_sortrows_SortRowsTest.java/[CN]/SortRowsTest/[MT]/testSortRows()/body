{
  LogWriter log=LogWriter.getInstance();
  EnvUtil.environmentInit();
  try {
    TransMeta transMeta=new TransMeta();
    transMeta.setName("transname");
    for (int i=0; i < databasesXML.length; i++) {
      DatabaseMeta databaseMeta=new DatabaseMeta(databasesXML[i]);
      transMeta.addDatabase(databaseMeta);
    }
    DatabaseMeta dbInfo=transMeta.findDatabase("db");
    Database database=new Database(dbInfo);
    database.connect();
    createTables(database);
    createData(database);
    StepLoader steploader=StepLoader.getInstance();
    String fromstepname="read from [" + source_table + "]";
    TableInputMeta tii=new TableInputMeta();
    tii.setDatabaseMeta(transMeta.findDatabase("db"));
    String selectSQL="SELECT " + Const.CR;
    selectSQL+="KEY1, KEY2 ";
    selectSQL+="FROM " + source_table + ";";
    tii.setSQL(selectSQL);
    String fromstepid=steploader.getStepPluginID(tii);
    StepMeta fromstep=new StepMeta(log,fromstepid,fromstepname,(StepMetaInterface)tii);
    fromstep.setLocation(150,100);
    fromstep.setDraw(true);
    fromstep.setDescription("Reads information from table [" + source_table + "] on database ["+ dbInfo+ "]");
    transMeta.addStep(fromstep);
    String sortstepname="sort step";
    SortRowsMeta srm=new SortRowsMeta();
    srm.setSortSize(MAX_COUNT / 10);
    String[] sortFields={"KEY1","KEY2"};
    boolean[] ascendingFields={true,true};
    srm.setFieldName(sortFields);
    srm.setAscending(ascendingFields);
    srm.setPrefix("SortRowsTest");
    srm.setDirectory(".");
    String sortstepid=steploader.getStepPluginID(srm);
    StepMeta sortstep=new StepMeta(log,sortstepid,sortstepname,(StepMetaInterface)srm);
    sortstep.setLocation(250,100);
    sortstep.setDraw(true);
    sortstep.setDescription("sort the table");
    transMeta.addStep(sortstep);
    String savestepname="save step";
    CombinationLookupMeta clm=new CombinationLookupMeta();
    String lookupKey[]={"KEY1","KEY2"};
    clm.setTablename(target_table);
    clm.setKeyField(lookupKey);
    clm.setKeyLookup(lookupKey);
    clm.setTechnicalKeyField("ID");
    clm.setTechKeyCreation(CombinationLookupMeta.CREATION_METHOD_TABLEMAX);
    clm.setCacheSize(10);
    sortstep.setLocation(350,100);
    clm.setDatabase(dbInfo);
    String savestepid=steploader.getStepPluginID(clm);
    StepMeta savestep=new StepMeta(log,savestepid,savestepname,(StepMetaInterface)clm);
    savestep.setDescription("saves information in database [" + dbInfo + "]");
    transMeta.addStep(savestep);
    TransHopMeta hi=new TransHopMeta(fromstep,sortstep);
    transMeta.addTransHop(hi);
    hi=new TransHopMeta(sortstep,savestep);
    transMeta.addTransHop(hi);
    Trans trans=new Trans(log,transMeta);
    trans.execute(null);
    trans.waitUntilFinished();
    checkResults(database);
  }
  finally {
  }
}
