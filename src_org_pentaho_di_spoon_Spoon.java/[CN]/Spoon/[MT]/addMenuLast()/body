{
  XulMenuItem sep=menuBar.getSeparatorById("file-last-separator");
  XulMenu msFile=null;
  if (sep != null) {
    msFile=sep.getMenu();
  }
  if (msFile == null || sep == null) {
    return;
  }
  int idx=msFile.indexOf(sep);
  int max=msFile.getItemCount();
  for (int i=max - 1; i > idx; i--) {
    XulMenuItem mi=msFile.getItem(i);
    msFile.remove(mi);
    mi.dispose();
  }
  List<LastUsedFile> lastUsedFiles=props.getLastUsedFiles();
  for (int i=0; i < lastUsedFiles.size(); i++) {
    final LastUsedFile lastUsedFile=lastUsedFiles.get(i);
    char chr=(char)('1' + i);
    String accessKey="ctrl-" + chr;
    String accessText="CTRL-" + chr;
    String text=lastUsedFile.toString();
    String id="last-file-" + i;
    if (i > 9) {
      accessKey=null;
      accessText=null;
    }
    MenuChoice miFileLast=new MenuChoice(msFile,text,id,accessText,accessKey,MenuChoice.TYPE_PLAIN,null);
    if (lastUsedFile.isTransformation()) {
      miFileLast.setImage(GUIResource.getInstance().getImageTransGraph());
    }
 else     if (lastUsedFile.isJob()) {
      miFileLast.setImage(GUIResource.getInstance().getImageJobGraph());
    }
    menuBar.addMenuListener(id,this,"lastFileSelect");
  }
}
