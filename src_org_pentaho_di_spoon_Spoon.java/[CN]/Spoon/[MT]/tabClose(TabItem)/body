{
  ArrayList<TabMapEntry> collection=new ArrayList<TabMapEntry>();
  collection.addAll(tabMap.values());
  boolean close=true;
  for (Iterator iter=collection.iterator(); iter.hasNext(); ) {
    TabMapEntry entry=(TabMapEntry)iter.next();
    if (item.equals(entry.getTabItem())) {
      TabItemInterface itemInterface=entry.getObject();
      if (!itemInterface.canBeClosed()) {
        int reply=itemInterface.showChangedWarning();
        if (reply == SWT.YES) {
          close=itemInterface.applyChanges();
        }
 else {
          if (reply == SWT.CANCEL) {
            close=false;
          }
 else {
            close=true;
          }
        }
      }
      if (close) {
        if (entry.getObject() instanceof TransGraph) {
          TransMeta transMeta=(TransMeta)entry.getObject().getManagedObject();
          closeTransformation(transMeta);
          refreshTree();
        }
 else         if (entry.getObject() instanceof JobGraph) {
          JobMeta jobMeta=(JobMeta)entry.getObject().getManagedObject();
          closeJob(jobMeta);
          refreshTree();
        }
 else         if (entry.getObject() instanceof SpoonBrowser) {
          closeSpoonBrowser();
          refreshTree();
        }
        if (entry.getObject() instanceof Composite) {
          Composite comp=(Composite)entry.getObject();
          if (comp != null && !comp.isDisposed())           comp.dispose();
        }
      }
    }
  }
  return close;
}
