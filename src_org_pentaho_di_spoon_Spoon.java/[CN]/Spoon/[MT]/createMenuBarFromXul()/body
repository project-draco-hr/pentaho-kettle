{
  if (menuBar != null && !menuBar.isDisposed()) {
    menuBar.dispose();
  }
  XulMessages xulMessages=new XulMessages();
  try {
    File xulFile=new File(XUL_FILE);
    if (xulFile.exists()) {
      Document doc=XMLHandler.loadXMLFile(xulFile);
      menuBar=MenuObject.createMenuBarFromXul(doc,shell,xulMessages);
      shell.setMenuBar(menuBar.getSwtMenu());
    }
 else {
      throw new KettleException(Messages.getString("Spoon.Exception.XULFileNotFound.Message",XUL_FILE));
    }
  }
 catch (  Throwable t) {
    log.logError(toString(),Const.getStackTracker(t));
    new ErrorDialog(shell,Messages.getString("Spoon.Exception.ErrorReadingXULFile.Title"),Messages.getString("Spoon.Exception.ErrorReadingXULFile.Message",XUL_FILE),new Exception(t));
  }
  try {
    File xulFile=new File("ui/menus.xul");
    if (xulFile.exists()) {
      Document doc=XMLHandler.loadXMLFile(xulFile);
      List<String> ids=new ArrayList<String>();
      ids.add("trans-class");
      ids.add("trans-class-new");
      ids.add("job-class");
      ids.add("trans-hop-class");
      ids.add("database-class");
      ids.add("partition-schema-class");
      ids.add("cluster-schema-class");
      ids.add("slave-cluster-class");
      ids.add("trans-inst");
      ids.add("job-inst");
      ids.add("step-plugin");
      ids.add("database-inst");
      ids.add("step-inst");
      ids.add("job-entry-copy-inst");
      ids.add("trans-hop-inst");
      ids.add("partition-schema-inst");
      ids.add("cluster-schema-inst");
      ids.add("slave-server-inst");
      menuMap=MenuObject.createPopupMenusFromXul(doc,shell,xulMessages,ids);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
