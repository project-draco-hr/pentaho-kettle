{
  WSDLOperation vOperation=null;
  for (Iterator vIterator=wsdlServices.iterator(); vIterator.hasNext() && vOperation == null; ) {
    WSDLService vWSDLService=(WSDLService)vIterator.next();
    for (Iterator vItOperation=vWSDLService.getOperations().iterator(); vItOperation.hasNext() && vOperation == null; ) {
      WSDLOperation vCurrentOperation=(WSDLOperation)vItOperation.next();
      if (vCurrentOperation.getName().equals(anOperationName)) {
        vOperation=vCurrentOperation;
      }
    }
  }
  if (anOperationName != null && !anOperationName.equalsIgnoreCase(meta.getOperationNameWebService())) {
    if (vOperation != null) {
      meta.setOperationNameWebService(vOperation.getName());
      meta.getFieldInWebService().clear();
      meta.getValueInWebService().clear();
      meta.getValueInLinkWebServiceFieldList().clear();
      Collections.sort(vOperation.getArguments(),new Comparator(){
        public int compare(        Object o1,        Object o2){
          return ((WSDLArgument)o1).getName().compareTo(((WSDLArgument)o2).getName());
        }
      }
);
      for (Iterator iter=vOperation.getArguments().iterator(); iter.hasNext(); ) {
        WSDLArgument vArgument=(WSDLArgument)iter.next();
        if (vArgument.isMultiple()) {
          Collections.sort(vArgument.getParameters(),new Comparator(){
            public int compare(            Object o1,            Object o2){
              return ((WSDLParameter)o1).getName().compareTo(((WSDLParameter)o2).getName());
            }
          }
);
          meta.setInFieldArgumentNameWebService(vArgument.getName());
          for (Iterator iterator=vArgument.getParameters().iterator(); iterator.hasNext(); ) {
            WSDLParameter vParameter=(WSDLParameter)iterator.next();
            meta.getFieldInWebService().add(vParameter);
          }
        }
 else {
          meta.setInValueArgumentNameWebService(vArgument.getName());
          for (Iterator iterator=vArgument.getParameters().iterator(); iterator.hasNext(); ) {
            WSDLParameter vParameter=(WSDLParameter)iterator.next();
            meta.getValueInWebService().add(vParameter);
          }
        }
      }
      meta.getFieldOutWebService().clear();
      meta.getFieldInLinkWebServiceFieldList().clear();
      for (Iterator iter=vOperation.getReturns().iterator(); iter.hasNext(); ) {
        WSDLArgument vArgument=(WSDLArgument)iter.next();
        if (vArgument.isMultiple()) {
          Collections.sort(vArgument.getParameters(),new Comparator(){
            public int compare(            Object o1,            Object o2){
              return ((WSDLParameter)o1).getName().compareTo(((WSDLParameter)o2).getName());
            }
          }
);
          meta.setOutFieldArgumentNameWebService(vArgument.getName());
          for (Iterator iterator=vArgument.getParameters().iterator(); iterator.hasNext(); ) {
            WSDLParameter vParameter=(WSDLParameter)iterator.next();
            meta.getFieldOutWebService().add(vParameter);
            meta.getFieldOutLinkWebServiceFieldList().add(new FieldLinkWebServiceField(new Value(vParameter.getName(),XsdType.xdsTypeToKettleType(vParameter.getType())),vParameter.getName()));
          }
        }
      }
    }
  }
  removeTabValueIn();
  boolean valuesIn=false;
  removeTabFieldIn();
  boolean fieldsIn=false;
  removeTabFieldOut();
  boolean fieldsOut=false;
  if (vOperation != null) {
    for (Iterator iter=vOperation.getArguments().iterator(); iter.hasNext(); ) {
      WSDLArgument vArgument=(WSDLArgument)iter.next();
      if (vArgument.isMultiple()) {
        fieldsIn=vArgument.getParameters() != null && vArgument.getParameters().size() > 0;
      }
 else {
        valuesIn=vArgument.getParameters() != null && vArgument.getParameters().size() > 0;
      }
    }
    for (Iterator iter=vOperation.getReturns().iterator(); iter.hasNext(); ) {
      WSDLArgument vArgument=(WSDLArgument)iter.next();
      if (vArgument.isMultiple()) {
        fieldsOut=true;
      }
    }
  }
  if (fieldsIn || valuesIn) {
    addTabFieldIn(valuesIn);
  }
  if (fieldsOut) {
    addTabFieldOut();
  }
}
