{
  wSafeMode=new Button(gDetails,SWT.CHECK);
  wSafeMode.setText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.SafeMode.Label"));
  wSafeMode.setToolTipText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.SafeMode.Tooltip"));
  props.setLook(wSafeMode);
  FormData fdSafeMode=new FormData();
  fdSafeMode.right=new FormAttachment(0,186);
  if (Const.isLinux()) {
    fdSafeMode.top=new FormAttachment(0,30);
  }
  if (Const.isOSX()) {
    fdSafeMode.top=new FormAttachment(0,33);
  }
  if (Const.isWindows()) {
    fdSafeMode.top=new FormAttachment(0,33);
  }
  fdSafeMode.left=new FormAttachment(0,10);
  wSafeMode.setLayoutData(fdSafeMode);
  wGatherMetrics=new Button(gDetails,SWT.CHECK);
  wGatherMetrics.setText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.GatherMetrics.Label"));
  wGatherMetrics.setToolTipText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.GatherMetrics.Tooltip"));
  props.setLook(wGatherMetrics);
  FormData fdGatherMetrics=new FormData();
  fdGatherMetrics.right=new FormAttachment(0,230);
  fdGatherMetrics.top=new FormAttachment(0,55);
  fdGatherMetrics.left=new FormAttachment(0,10);
  wGatherMetrics.setLayoutData(fdGatherMetrics);
  wClearLog=new Button(gDetails,SWT.CHECK);
  wClearLog.setText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.ClearLog.Label"));
  wClearLog.setToolTipText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.ClearLog.Tooltip"));
  props.setLook(wClearLog);
  FormData fdClearLog=new FormData();
  fdClearLog.right=new FormAttachment(0,200);
  if (Const.isLinux()) {
    fdClearLog.top=new FormAttachment(0,5);
  }
  if (Const.isOSX()) {
    fdClearLog.top=new FormAttachment(0,10);
  }
  if (Const.isWindows()) {
    fdClearLog.top=new FormAttachment(0,10);
  }
  fdClearLog.left=new FormAttachment(0,10);
  wClearLog.setLayoutData(fdClearLog);
  wlLogLevel=new Label(gDetails,SWT.RIGHT);
  props.setLook(wlLogLevel);
  wlLogLevel.setText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.LogLevel.Label"));
  wlLogLevel.setToolTipText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.LogLevel.Tooltip"));
  FormData fdlLogLevel=new FormData();
  fdlLogLevel.right=new FormAttachment(0,333);
  if (Const.isLinux()) {
    fdlLogLevel.top=new FormAttachment(0,7);
  }
  if (Const.isOSX()) {
    fdlLogLevel.top=new FormAttachment(0,10);
  }
  if (Const.isWindows()) {
    fdlLogLevel.top=new FormAttachment(0,10);
  }
  fdlLogLevel.left=new FormAttachment(0,260);
  wlLogLevel.setLayoutData(fdlLogLevel);
  wLogLevel=new CCombo(gDetails,SWT.READ_ONLY | SWT.BORDER);
  wLogLevel.setToolTipText(BaseMessages.getString(PKG,"TransExecutionConfigurationDialog.LogLevel.Tooltip"));
  props.setLook(wLogLevel);
  FormData fdLogLevel=new FormData();
  fdLogLevel.left=new FormAttachment(wlLogLevel,6);
  if (Const.isOSX()) {
    fdLogLevel.top=new FormAttachment(wClearLog,2,SWT.TOP);
  }
 else {
    fdLogLevel.top=new FormAttachment(wClearLog,-2,SWT.TOP);
  }
  fdLogLevel.right=new FormAttachment(0,540);
  wLogLevel.setLayoutData(fdLogLevel);
  wLogLevel.setItems(LogLevel.getLogLevelDescriptions());
}
