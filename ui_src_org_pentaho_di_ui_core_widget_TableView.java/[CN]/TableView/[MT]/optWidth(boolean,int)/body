{
  for (int c=0; c < table.getColumnCount(); c++) {
    TableColumn tc=table.getColumn(c);
    int max=0;
    if (header) {
      max=TableView.dummy_gc.textExtent(tc.getText(),SWT.DRAW_TAB | SWT.DRAW_DELIMITER).x;
      if (c == sortfield && sortable) {
        max+=15;
      }
    }
    Set<String> columnStrings=new HashSet<String>();
    boolean haveToGetTexts=false;
    if (c > 0) {
      final ColumnInfo column=columns[c - 1];
      if (column != null) {
switch (column.getType()) {
case ColumnInfo.COLUMN_TYPE_TEXT:
          haveToGetTexts=true;
        break;
case ColumnInfo.COLUMN_TYPE_CCOMBO:
case ColumnInfo.COLUMN_TYPE_FORMAT:
      haveToGetTexts=true;
    if (column.getComboValues() != null) {
      for (      String comboValue : columns[c - 1].getComboValues()) {
        columnStrings.add(comboValue);
      }
    }
  break;
case ColumnInfo.COLUMN_TYPE_BUTTON:
columnStrings.add(column.getButtonText());
break;
default :
break;
}
}
}
 else {
haveToGetTexts=true;
}
if (haveToGetTexts) {
for (int r=0; r < table.getItemCount() && (r < nrLines || nrLines <= 0); r++) {
TableItem ti=table.getItem(r);
if (ti != null) {
columnStrings.add(ti.getText(c));
}
}
}
for (String str : columnStrings) {
int len=TableView.dummy_gc.textExtent(str == null ? "" : str,SWT.DRAW_TAB | SWT.DRAW_DELIMITER).x;
if (len > max) max=len;
}
try {
int extra=15;
if (Const.isWindows()) {
extra+=15;
}
 else if (Const.isLinux()) {
extra+=15;
}
if (tc.getWidth() != max + extra) {
tc.setWidth(max + extra);
}
}
 catch (Exception e) {
}
}
unEdit();
}
