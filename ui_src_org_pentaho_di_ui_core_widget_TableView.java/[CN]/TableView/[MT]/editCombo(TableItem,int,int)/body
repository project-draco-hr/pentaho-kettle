{
  beforeEdit=getItemText(row);
  fieldChanged=false;
  ColumnInfo colinfo=columns[colnr - 1];
  if (colinfo.isReadOnly() && colinfo.getSelectionAdapter() != null) {
    return;
  }
  if (colinfo.getDisabledListener() != null) {
    boolean disabled=colinfo.getDisabledListener().isFieldDisabled(rownr);
    if (disabled) {
      return;
    }
  }
  combo=new CCombo(table,colinfo.isReadOnly() ? SWT.READ_ONLY : SWT.NONE);
  props.setLook(combo,Props.WIDGET_STYLE_TABLE);
  combo.addTraverseListener(lsTraverse);
  combo.addModifyListener(lsModCombo);
  combo.addFocusListener(lsFocusCombo);
  String[] opt=getComboValues(row,colinfo);
  if (colinfo.getComboValuesSelectionListener() != null) {
    opt=colinfo.getComboValuesSelectionListener().getComboValues(row,rownr,colnr);
  }
  combo.setItems(opt);
  combo.setVisibleItemCount(opt.length);
  combo.setText(row.getText(colnr));
  if (lsMod != null) {
    combo.addModifyListener(lsMod);
  }
  combo.addModifyListener(lsUndo);
  combo.setToolTipText(colinfo.getToolTip() == null ? "" : colinfo.getToolTip());
  combo.setVisible(true);
  combo.addKeyListener(lsKeyCombo);
  if (colinfo.getSelectionAdapter() != null) {
    combo.addSelectionListener(columns[colnr - 1].getSelectionAdapter());
  }
  editor.horizontalAlignment=SWT.LEFT;
  editor.layout();
  editor.setEditor(combo,row,colnr);
  combo.setFocus();
  combo.layout();
}
