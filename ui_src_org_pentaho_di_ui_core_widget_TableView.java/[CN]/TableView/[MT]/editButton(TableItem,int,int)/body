{
  beforeEdit=getItemText(row);
  fieldChanged=false;
  ColumnInfo colinfo=columns[colnr - 1];
  if (colinfo.isReadOnly()) {
    return;
  }
  if (colinfo.getDisabledListener() != null) {
    boolean disabled=colinfo.getDisabledListener().isFieldDisabled(rownr);
    if (disabled) {
      return;
    }
  }
  button=new Button(table,SWT.PUSH);
  props.setLook(button,Props.WIDGET_STYLE_TABLE);
  String buttonText=columns[colnr - 1].getButtonText();
  if (buttonText != null) {
    button.setText(buttonText);
  }
  button.setImage(GUIResource.getInstance().getImage("ui/images/edittext.png"));
  SelectionListener selAdpt=colinfo.getSelectionAdapter();
  if (selAdpt != null) {
    button.addSelectionListener(selAdpt);
  }
  buttonRownr=rownr;
  buttonColnr=colnr;
  buttonContent=row.getText(colnr);
  String tooltip=columns[colnr - 1].getToolTip();
  if (tooltip != null) {
    button.setToolTipText(tooltip);
  }
 else {
    button.setToolTipText("");
  }
  button.addTraverseListener(lsTraverse);
  button.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent arg0){
      closeActiveButton();
    }
  }
);
  editor.horizontalAlignment=SWT.LEFT;
  editor.verticalAlignment=SWT.TOP;
  editor.grabHorizontal=false;
  editor.grabVertical=false;
  Point size=button.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  editor.minimumWidth=size.x;
  editor.minimumHeight=size.y - 2;
  editor.layout();
  editor.setEditor(button);
  button.setFocus();
}
