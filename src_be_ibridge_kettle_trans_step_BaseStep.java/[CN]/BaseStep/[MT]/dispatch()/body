{
  int i, c;
  RowSet rs;
  int nrinput, nroutput;
  int nrcopies, prevcopies, nextcopies;
  int disptype;
  if (transMeta == null) {
    return;
  }
  StepMeta stepMeta=transMeta.findStep(stepname);
  logDetailed(Messages.getString("BaseStep.Log.StartingBuffersAllocation"));
  nrinput=transMeta.findNrPrevSteps(stepMeta,true);
  nroutput=transMeta.findNrNextSteps(stepMeta);
  inputRowSets=new ArrayList();
  outputRowSets=new ArrayList();
  prev=new StepMeta[nrinput];
  next=new StepMeta[nroutput];
  in_handling=0;
  logDetailed(Messages.getString("BaseStep.Log.StepInfo",String.valueOf(nrinput),String.valueOf(nroutput)));
  for (i=0; i < nrinput; i++) {
    prev[i]=transMeta.findPrevStep(stepMeta,i,true);
    logDetailed(Messages.getString("BaseStep.Log.GotPreviousStep",stepname,String.valueOf(i),prev[i].getName()));
    prevcopies=prev[i].getCopies();
    nextcopies=stepMeta.getCopies();
    logDetailed(Messages.getString("BaseStep.Log.InputRowInfo",String.valueOf(prevcopies),String.valueOf(nextcopies)));
    if (prevcopies == 1 && nextcopies == 1) {
      disptype=Trans.TYPE_DISP_1_1;
      nrcopies=1;
    }
 else     if (prevcopies == 1 && nextcopies > 1) {
      disptype=Trans.TYPE_DISP_1_N;
      nrcopies=1;
    }
 else     if (prevcopies > 1 && nextcopies == 1) {
      disptype=Trans.TYPE_DISP_N_1;
      nrcopies=prevcopies;
    }
 else     if (prevcopies == nextcopies) {
      disptype=Trans.TYPE_DISP_N_N;
      nrcopies=1;
    }
 else {
      log.logError(toString(),Messages.getString("BaseStep.Log.AllowedRelationships"));
      log.logError(toString(),Messages.getString("BaseStep.Log.XYRelationshipsNotAllowed"));
      setErrors(1);
      stopAll();
      return;
    }
    for (c=0; c < nrcopies; c++) {
      rs=null;
switch (disptype) {
case Trans.TYPE_DISP_1_1:
        rs=trans.findRowSet(prev[i].getName(),0,stepname,0);
      break;
case Trans.TYPE_DISP_1_N:
    rs=trans.findRowSet(prev[i].getName(),0,stepname,getCopy());
  break;
case Trans.TYPE_DISP_N_1:
rs=trans.findRowSet(prev[i].getName(),c,stepname,0);
break;
case Trans.TYPE_DISP_N_N:
rs=trans.findRowSet(prev[i].getName(),getCopy(),stepname,getCopy());
break;
}
if (rs != null) {
inputRowSets.add(rs);
logDetailed(Messages.getString("BaseStep.Log.FoundInputRowset",rs.getName()));
}
 else {
logError(Messages.getString("BaseStep.Log.UnableToFindInputRowset"));
setErrors(1);
stopAll();
return;
}
}
}
for (i=0; i < nroutput; i++) {
next[i]=transMeta.findNextStep(stepMeta,i);
prevcopies=stepMeta.getCopies();
nextcopies=next[i].getCopies();
logDetailed(Messages.getString("BaseStep.Log.OutputRowInfo",String.valueOf(prevcopies),String.valueOf(nextcopies)));
if (prevcopies == 1 && nextcopies == 1) {
disptype=Trans.TYPE_DISP_1_1;
nrcopies=1;
}
 else if (prevcopies == 1 && nextcopies > 1) {
disptype=Trans.TYPE_DISP_1_N;
nrcopies=nextcopies;
}
 else if (prevcopies > 1 && nextcopies == 1) {
disptype=Trans.TYPE_DISP_N_1;
nrcopies=1;
}
 else if (prevcopies == nextcopies) {
disptype=Trans.TYPE_DISP_N_N;
nrcopies=1;
}
 else {
log.logError(toString(),Messages.getString("BaseStep.Log.AllowedRelationships"));
log.logError(toString(),Messages.getString("BaseStep.Log.XYRelationshipsNotAllowed"));
setErrors(1);
stopAll();
return;
}
for (c=0; c < nrcopies; c++) {
rs=null;
switch (disptype) {
case Trans.TYPE_DISP_1_1:
rs=trans.findRowSet(stepname,0,next[i].getName(),0);
break;
case Trans.TYPE_DISP_1_N:
rs=trans.findRowSet(stepname,0,next[i].getName(),c);
break;
case Trans.TYPE_DISP_N_1:
rs=trans.findRowSet(stepname,getCopy(),next[i].getName(),0);
break;
case Trans.TYPE_DISP_N_N:
rs=trans.findRowSet(stepname,getCopy(),next[i].getName(),getCopy());
break;
}
if (rs != null) {
outputRowSets.add(rs);
logDetailed(Messages.getString("BaseStep.Log.FoundOutputRowset",rs.getName()));
}
 else {
logError(Messages.getString("BaseStep.Log.UnableToFindOutputRowset"));
setErrors(1);
stopAll();
return;
}
}
}
logDetailed(Messages.getString("BaseStep.Log.FinishedDispatching"));
}
