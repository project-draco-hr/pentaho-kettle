{
  if (previewSize > 0 && previewBuffer.size() < previewSize) {
    previewBuffer.add(new Row(row));
  }
  for (int i=0; i < rowListeners.size(); i++) {
    RowListener rowListener=(RowListener)rowListeners.get(i);
    rowListener.rowWrittenEvent(row);
  }
  if (terminator && terminator_rows != null) {
    terminator_rows.add(new Row(row));
  }
  if (outputRowSets.size() == 0) {
    return;
  }
  for (int i=0; i < outputRowSets.size(); i++) {
    int sleeptime=transMeta.getSleepTimeFull();
    RowSet rs=(RowSet)outputRowSets.get(i);
    try {
      rs.setPriorityFrom(calcPutPriority(rs));
    }
 catch (    Exception e) {
      logError(Messages.getString("BaseStep.Log.ErrorSettingPriority"));
      setErrors(1);
      stopAll();
      return;
    }
    while (rs.isFull() && !stopped) {
      try {
        if (sleeptime > 0)         sleep(0,sleeptime);
 else         super.notifyAll();
      }
 catch (      Exception e) {
        logError(Messages.getString("BaseStep.Log.ErrorInThreadSleeping") + e.toString());
        setErrors(1);
        stopAll();
        return;
      }
      nrPutSleeps+=sleeptime;
      if (sleeptime < 100)       sleeptime=((int)(sleeptime * 1.2)) + 1;
 else       sleeptime=100;
    }
  }
  if (stopped) {
    if (log.isDebug())     logDebug(Messages.getString("BaseStep.Log.StopPuttingARow"));
    stopAll();
    return;
  }
  if (distributed) {
    RowSet rs=(RowSet)outputRowSets.get(out_handling);
    rs.putRow(row);
    linesWritten++;
    if (outputRowSets.size() > 1) {
      out_handling++;
      if (out_handling >= outputRowSets.size())       out_handling=0;
    }
  }
 else {
    for (int i=1; i < outputRowSets.size(); i++) {
      RowSet rs=(RowSet)outputRowSets.get(i);
      rs.putRow(new Row(row));
      linesWritten++;
    }
    RowSet rs=(RowSet)outputRowSets.get(0);
    rs.putRow(row);
    linesWritten++;
  }
}
