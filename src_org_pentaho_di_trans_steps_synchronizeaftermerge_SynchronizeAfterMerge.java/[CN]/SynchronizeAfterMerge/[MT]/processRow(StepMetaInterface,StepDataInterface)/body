{
  meta=(SynchronizeAfterMergeMeta)smi;
  data=(SynchronizeAfterMergeData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    data.inputRowMeta=data.outputRowMeta;
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this);
    if (meta.istablenameInField()) {
      if (data.indexOfTableNameField < 0) {
        data.indexOfTableNameField=data.inputRowMeta.indexOfValue(meta.gettablenameField());
        if (data.indexOfTableNameField < 0) {
          String message="It was not possible to find table [" + meta.gettablenameField() + "] in the input fields.";
          log.logError(toString(),message);
          throw new KettleStepException(message);
        }
      }
    }
 else {
      data.realTableName=environmentSubstitute(meta.getTableName());
      if (Const.isEmpty(data.realTableName))       throw new KettleStepException("The table name is not specified (or the input field is empty)");
      data.realSchemaTable=data.db.getDatabaseMeta().getQuotedSchemaTableCombination(data.realSchemaName,data.realTableName);
    }
    if (data.indexOfOperationOrderField < 0) {
      data.indexOfOperationOrderField=data.inputRowMeta.indexOfValue(meta.getOperationOrderField());
      if (data.indexOfOperationOrderField < 0) {
        String message="It was not possible to find operation field [" + meta.getOperationOrderField() + "] in the input stream!";
        log.logError(toString(),message);
        throw new KettleStepException(message);
      }
    }
    data.insertValue=environmentSubstitute(meta.getOrderInsert());
    data.updateValue=environmentSubstitute(meta.getOrderUpdate());
    data.deleteValue=environmentSubstitute(meta.getOrderDelete());
    data.insertRowMeta=new RowMeta();
    if (log.isDebug())     logDebug(Messages.getString("SynchronizeAfterMerge.Log.CheckingRow") + r.toString());
    data.keynrs=new int[meta.getKeyStream().length];
    data.keynrs2=new int[meta.getKeyStream().length];
    for (int i=0; i < meta.getKeyStream().length; i++) {
      data.keynrs[i]=data.inputRowMeta.indexOfValue(meta.getKeyStream()[i]);
      if (data.keynrs[i] < 0 && !"IS NULL".equalsIgnoreCase(meta.getKeyCondition()[i]) && !"IS NOT NULL".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("SynchronizeAfterMerge.Exception.FieldRequired",meta.getKeyStream()[i]));
      }
      data.keynrs2[i]=data.inputRowMeta.indexOfValue(meta.getKeyStream2()[i]);
      if (data.keynrs2[i] < 0 && "BETWEEN".equalsIgnoreCase(meta.getKeyCondition()[i])) {
        throw new KettleStepException(Messages.getString("SynchronizeAfterMerge.Exception.FieldRequired",meta.getKeyStream2()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("SynchronizeAfterMerge.Log.FieldHasDataNumbers",meta.getKeyStream()[i]) + data.keynrs[i]);
    }
    for (int i=0; i < meta.getUpdateLookup().length; i++) {
      ValueMetaInterface insValue=data.insertRowMeta.searchValueMeta(meta.getUpdateLookup()[i]);
      if (insValue == null) {
        ValueMetaInterface insertValue=data.inputRowMeta.searchValueMeta(meta.getUpdateStream()[i]).clone();
        insertValue.setName(meta.getUpdateLookup()[i]);
        data.insertRowMeta.addValueMeta(insertValue);
      }
 else {
        throw new KettleStepException(Messages.getString("SynchronizeAfterMerge.Error.SameColumnInsertedTwice",insValue.getName()));
      }
    }
    data.valuenrs=new int[meta.getUpdateLookup().length];
    for (int i=0; i < meta.getUpdateLookup().length; i++) {
      data.valuenrs[i]=data.inputRowMeta.indexOfValue(meta.getUpdateStream()[i]);
      if (data.valuenrs[i] < 0) {
        throw new KettleStepException(Messages.getString("SynchronizeAfterMerge.Exception.FieldRequired",meta.getUpdateStream()[i]));
      }
      if (log.isDebug())       logDebug(Messages.getString("SynchronizeAfterMerge.Log.FieldHasDataNumbers",meta.getUpdateStream()[i]) + data.valuenrs[i]);
    }
    if (!meta.istablenameInField()) {
      if (meta.isPerformLookup()) {
        data.lookupStatement=(PreparedStatement)data.preparedStatements.get(data.realSchemaTable + "lookup");
        if (data.lookupStatement == null) {
          String sql=getLookupStatement(data.inputRowMeta);
          if (log.isDebug())           logDebug("Preparation of the lookup SQL statement : " + sql);
          data.lookupStatement=data.db.prepareSQL(sql);
          data.preparedStatements.put(data.realSchemaTable + "lookup",data.lookupStatement);
        }
      }
      data.insertStatement=(PreparedStatement)data.preparedStatements.get(data.realSchemaTable + "insert");
      if (data.insertStatement == null) {
        String sql=data.db.getInsertStatement(data.realSchemaName,data.realTableName,data.insertRowMeta);
        if (log.isDebug())         logDebug("Preparation of the Insert SQL statement : " + sql);
        data.insertStatement=data.db.prepareSQL(sql);
        data.preparedStatements.put(data.realSchemaTable + "insert",data.insertStatement);
      }
      data.updateStatement=(PreparedStatement)data.preparedStatements.get(data.realSchemaTable + "update");
      if (data.updateStatement == null) {
        String sql=getUpdateStatement(data.inputRowMeta);
        data.updateStatement=data.db.prepareSQL(sql);
        data.preparedStatements.put(data.realSchemaTable + "update",data.updateStatement);
        if (log.isDebug())         logDebug("Preparation of the Update SQL statement : " + sql);
      }
      data.deleteStatement=(PreparedStatement)data.preparedStatements.get(data.realSchemaTable + "delete");
      if (data.deleteStatement == null) {
        String sql=getDeleteStatement(data.inputRowMeta);
        data.deleteStatement=data.db.prepareSQL(sql);
        data.preparedStatements.put(data.realSchemaTable + "delete",data.deleteStatement);
        if (log.isDebug())         logDebug("Preparation of the Delete SQL statement : " + sql);
      }
    }
  }
  try {
    lookupValues(r);
    putRow(data.outputRowMeta,r);
    if (checkFeedback(getLinesRead())) {
      if (log.isDetailed())       logDetailed(Messages.getString("SynchronizeAfterMerge.Log.LineNumber") + getLinesRead());
    }
  }
 catch (  KettleException e) {
    logError("Because of an error, this step can't continue: ",e);
    setErrors(1);
    stopAll();
    setOutputDone();
    return false;
  }
  return true;
}
