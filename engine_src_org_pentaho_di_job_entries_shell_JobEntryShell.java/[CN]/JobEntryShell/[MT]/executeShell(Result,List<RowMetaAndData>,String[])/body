{
  FileObject fileObject=null;
  String realScript=null;
  FileObject tempFile=null;
  try {
    String[] base=null;
    List<String> cmds=new ArrayList<String>();
    if (log.isBasic()) {
      logBasic(BaseMessages.getString(PKG,"JobShell.RunningOn",Const.getOS()));
    }
    if (insertScript) {
      realScript=environmentSubstitute(script);
    }
 else {
      String realFilename=environmentSubstitute(getFilename());
      fileObject=KettleVFS.getFileObject(realFilename,this);
    }
    if (Const.getOS().equals("Windows 95")) {
      base=new String[]{"command.com","/C"};
      if (insertScript) {
        tempFile=KettleVFS.createTempFile("kettle","shell.bat",environmentSubstitute(workDirectory),this);
        fileObject=createTemporaryShellFile(tempFile,realScript);
      }
    }
 else     if (Const.getOS().startsWith("Windows")) {
      base=new String[]{"cmd.exe","/C"};
      if (insertScript) {
        tempFile=KettleVFS.createTempFile("kettle","shell.bat",environmentSubstitute(workDirectory),this);
        fileObject=createTemporaryShellFile(tempFile,realScript);
      }
    }
 else {
      if (insertScript) {
        tempFile=KettleVFS.createTempFile("kettle","shell",environmentSubstitute(workDirectory),this);
        fileObject=createTemporaryShellFile(tempFile,realScript);
      }
      base=new String[]{KettleVFS.getFilename(fileObject)};
    }
    if (argFromPrevious && cmdRows != null) {
      for (int i=0; i < base.length; i++) {
        cmds.add(base[i]);
      }
      if (Const.getOS().equals("Windows 95") || Const.getOS().startsWith("Windows")) {
        StringBuffer cmdline=new StringBuffer(300);
        cmdline.append('"');
        cmdline.append(Const.optionallyQuoteStringByOS(KettleVFS.getFilename(fileObject)));
        for (int i=0; i < cmdRows.size(); i++) {
          RowMetaAndData r=cmdRows.get(i);
          for (int j=0; j < r.size(); j++) {
            cmdline.append(' ');
            cmdline.append(Const.optionallyQuoteStringByOS(r.getString(j,null)));
          }
        }
        cmdline.append('"');
        cmds.add(cmdline.toString());
      }
 else {
        for (int i=0; i < cmdRows.size(); i++) {
          RowMetaAndData r=cmdRows.get(i);
          for (int j=0; j < r.size(); j++) {
            cmds.add(Const.optionallyQuoteStringByOS(r.getString(j,null)));
          }
        }
      }
    }
 else     if (args != null) {
      for (int i=0; i < base.length; i++) {
        cmds.add(base[i]);
      }
      if (Const.getOS().equals("Windows 95") || Const.getOS().startsWith("Windows")) {
        StringBuffer cmdline=new StringBuffer(300);
        cmdline.append('"');
        cmdline.append(Const.optionallyQuoteStringByOS(KettleVFS.getFilename(fileObject)));
        for (int i=0; i < args.length; i++) {
          cmdline.append(' ');
          cmdline.append(Const.optionallyQuoteStringByOS(args[i]));
        }
        cmdline.append('"');
        cmds.add(cmdline.toString());
      }
 else {
        for (int i=0; i < args.length; i++) {
          cmds.add(args[i]);
        }
      }
    }
    StringBuffer command=new StringBuffer();
    Iterator<String> it=cmds.iterator();
    boolean first=true;
    while (it.hasNext()) {
      if (!first) {
        command.append(' ');
      }
 else {
        first=false;
      }
      command.append(it.next());
    }
    if (log.isBasic()) {
      logBasic(BaseMessages.getString(PKG,"JobShell.ExecCommand",command.toString()));
    }
    ProcessBuilder procBuilder=new ProcessBuilder(cmds);
    Map<String,String> env=procBuilder.environment();
    String[] variables=listVariables();
    for (int i=0; i < variables.length; i++) {
      env.put(variables[i],getVariable(variables[i]));
    }
    if (getWorkDirectory() != null && !Const.isEmpty(Const.rtrim(getWorkDirectory()))) {
      String vfsFilename=environmentSubstitute(getWorkDirectory());
      File file=new File(KettleVFS.getFilename(KettleVFS.getFileObject(vfsFilename,this)));
      procBuilder.directory(file);
    }
    Process proc=procBuilder.start();
    StreamLogger errorLogger=new StreamLogger(log,proc.getErrorStream(),"(stderr)",true);
    StreamLogger outputLogger=new StreamLogger(log,proc.getInputStream(),"(stdout)");
    Thread errorLoggerThread=new Thread(errorLogger);
    errorLoggerThread.start();
    Thread outputLoggerThread=new Thread(outputLogger);
    outputLoggerThread.start();
    proc.waitFor();
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobShell.CommandFinished",command.toString()));
    }
    result.setExitStatus(proc.exitValue());
    if (result.getExitStatus() != 0) {
      if (log.isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobShell.ExitStatus",environmentSubstitute(getFilename()),"" + result.getExitStatus()));
      }
      result.setNrErrors(1);
    }
    errorLoggerThread.join();
    outputLoggerThread.join();
    proc.getErrorStream().close();
    proc.getOutputStream().close();
  }
 catch (  IOException ioe) {
    logError(BaseMessages.getString(PKG,"JobShell.ErrorRunningShell",environmentSubstitute(getFilename()),ioe.toString()),ioe);
    result.setNrErrors(1);
  }
catch (  InterruptedException ie) {
    logError(BaseMessages.getString(PKG,"JobShell.Shellinterupted",environmentSubstitute(getFilename()),ie.toString()),ie);
    result.setNrErrors(1);
  }
catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"JobShell.UnexpectedError",environmentSubstitute(getFilename()),e.toString()),e);
    result.setNrErrors(1);
  }
 finally {
    if (tempFile != null) {
      try {
        tempFile.delete();
      }
 catch (      Exception e) {
        BaseMessages.getString(PKG,"JobShell.UnexpectedError",tempFile.toString(),e.toString());
      }
    }
  }
  if (result.getNrErrors() > 0) {
    result.setResult(false);
  }
 else {
    result.setResult(true);
  }
}
