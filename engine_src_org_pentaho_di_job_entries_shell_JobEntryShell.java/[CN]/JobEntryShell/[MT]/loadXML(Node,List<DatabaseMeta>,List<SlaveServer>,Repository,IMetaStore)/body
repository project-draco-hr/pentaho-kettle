{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    setFileName(XMLHandler.getTagValue(entrynode,"filename"));
    setWorkDirectory(XMLHandler.getTagValue(entrynode,"work_directory"));
    argFromPrevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"arg_from_previous"));
    execPerRow="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"exec_per_row"));
    setLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_logfile"));
    setAppendLogfile="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"set_append_logfile"));
    addDate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_date"));
    addTime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"add_time"));
    logfile=XMLHandler.getTagValue(entrynode,"logfile");
    logext=XMLHandler.getTagValue(entrynode,"logext");
    logFileLevel=LogLevel.getLogLevelForCode(XMLHandler.getTagValue(entrynode,"loglevel"));
    insertScript="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"insertScript"));
    script=XMLHandler.getTagValue(entrynode,"script");
    int argnr=0;
    while (XMLHandler.getTagValue(entrynode,"argument" + argnr) != null) {
      argnr++;
    }
    allocate(argnr);
    for (int a=0; a < argnr; a++) {
      arguments[a]=XMLHandler.getTagValue(entrynode,"argument" + a);
    }
  }
 catch (  KettleException e) {
    throw new KettleXMLException("Unable to load job entry of type 'shell' from XML node",e);
  }
}
