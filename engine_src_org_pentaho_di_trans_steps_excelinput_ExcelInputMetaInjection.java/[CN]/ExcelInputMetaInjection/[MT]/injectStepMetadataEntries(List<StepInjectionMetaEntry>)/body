{
  List<ExcelInputField> excelInputFields=new ArrayList<ExcelInputField>();
  List<ExcelInputSheet> sheets=new ArrayList<ExcelInputMetaInjection.ExcelInputSheet>();
  List<FileLine> fileLines=new ArrayList<FileLine>();
  for (  StepInjectionMetaEntry lookFields : all) {
    Entry fieldsEntry=Entry.findEntry(lookFields.getKey());
    if (fieldsEntry != null) {
      if (fieldsEntry == Entry.FIELDS) {
        for (        StepInjectionMetaEntry lookField : lookFields.getDetails()) {
          Entry fieldEntry=Entry.findEntry(lookField.getKey());
          if (fieldEntry != null) {
            if (fieldEntry == Entry.FIELD) {
              ExcelInputField inputField=new ExcelInputField();
              List<StepInjectionMetaEntry> entries=lookField.getDetails();
              for (              StepInjectionMetaEntry entry : entries) {
                Entry metaEntry=Entry.findEntry(entry.getKey());
                if (metaEntry != null) {
                  String value=(String)entry.getValue();
switch (metaEntry) {
case NAME:
                    inputField.setName(value);
                  break;
case TYPE:
                inputField.setType(ValueMeta.getType(value));
              break;
case LENGTH:
            inputField.setLength(Const.toInt(value,-1));
          break;
case PRECISION:
        inputField.setPrecision(Const.toInt(value,-1));
      break;
case CURRENCY:
    inputField.setCurrencySymbol(value);
  break;
case GROUP:
inputField.setGroupSymbol(value);
break;
case DECIMAL:
inputField.setDecimalSymbol(value);
break;
case FORMAT:
inputField.setFormat(value);
break;
case TRIM_TYPE:
inputField.setTrimType(ValueMeta.getTrimTypeByCode(value));
break;
case REPEAT:
inputField.setRepeated(ValueMeta.convertStringToBoolean(value));
break;
}
}
}
excelInputFields.add(inputField);
}
}
}
}
if (fieldsEntry == Entry.SHEETS) {
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
Entry fieldEntry=Entry.findEntry(lookField.getKey());
if (fieldEntry != null) {
if (fieldEntry == Entry.SHEET) {
String sheetName=null;
int startCol=0;
int startRow=0;
List<StepInjectionMetaEntry> entries=lookField.getDetails();
for (StepInjectionMetaEntry entry : entries) {
Entry metaEntry=Entry.findEntry(entry.getKey());
if (metaEntry != null) {
String value=(String)entry.getValue();
switch (metaEntry) {
case SHEET_NAME:
sheetName=value;
break;
case SHEET_START_ROW:
startRow=Const.toInt(Const.trim(value),0);
break;
case SHEET_START_COL:
startCol=Const.toInt(Const.trim(value),0);
break;
}
}
}
sheets.add(new ExcelInputSheet(sheetName,startCol,startRow));
}
}
}
}
if (fieldsEntry == Entry.FILENAME_LINES) {
for (StepInjectionMetaEntry lookField : lookFields.getDetails()) {
Entry fieldEntry=Entry.findEntry(lookField.getKey());
if (fieldEntry == Entry.FILENAME_LINE) {
FileLine fileLine=new FileLine();
List<StepInjectionMetaEntry> entries=lookField.getDetails();
for (StepInjectionMetaEntry entry : entries) {
Entry metaEntry=Entry.findEntry(entry.getKey());
if (metaEntry != null) {
String value=(String)entry.getValue();
switch (metaEntry) {
case FILENAME:
fileLine.filename=value;
break;
case FILEMASK:
fileLine.includeMask=value;
break;
case EXCLUDE_FILEMASK:
fileLine.excludeMask=value;
break;
case FILE_REQUIRED:
fileLine.required=value;
break;
case INCLUDE_SUBFOLDERS:
fileLine.includeSubfolders=value;
break;
}
}
}
fileLines.add(fileLine);
}
}
}
}
}
if (excelInputFields.size() > 0) {
meta.setField(excelInputFields.toArray(new ExcelInputField[excelInputFields.size()]));
}
if (sheets.size() > 0) {
String[] sheetNames=new String[sheets.size()];
int[] startCols=new int[sheets.size()];
int[] startRows=new int[sheets.size()];
for (int i=0; i < sheets.size(); i++) {
sheetNames[i]=sheets.get(i).sheetName;
startCols[i]=sheets.get(i).startCol;
startRows[i]=sheets.get(i).startRow;
}
meta.setSheetName(sheetNames);
meta.setStartColumn(startCols);
meta.setStartRow(startRows);
}
if (fileLines.size() > 0) {
meta.allocateFiles(fileLines.size());
for (int i=0; i < fileLines.size(); i++) {
FileLine fileLine=fileLines.get(i);
meta.getFileName()[i]=fileLine.filename;
meta.getFileMask()[i]=fileLine.includeMask;
meta.getExludeFileMask()[i]=fileLine.excludeMask;
meta.getExludeFileMask()[i]=fileLine.excludeMask;
meta.getFileRequired()[i]=fileLine.required;
meta.getIncludeSubFolders()[i]=fileLine.includeSubfolders;
}
}
}
