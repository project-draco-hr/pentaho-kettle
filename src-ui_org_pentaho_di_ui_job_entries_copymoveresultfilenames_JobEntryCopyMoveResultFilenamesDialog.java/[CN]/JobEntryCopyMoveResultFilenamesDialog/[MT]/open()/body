{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,props.getJobsDialogStyle());
  props.setLook(shell);
  JobDialog.setShellImage(shell,jobEntry);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      jobEntry.setChanged();
    }
  }
;
  changed=jobEntry.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Title"));
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlName=new Label(shell,SWT.RIGHT);
  wlName.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Name.Label"));
  props.setLook(wlName);
  fdlName=new FormData();
  fdlName.left=new FormAttachment(0,0);
  fdlName.right=new FormAttachment(middle,-margin);
  fdlName.top=new FormAttachment(0,margin);
  wlName.setLayoutData(fdlName);
  wName=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wName);
  wName.addModifyListener(lsMod);
  fdName=new FormData();
  fdName.left=new FormAttachment(middle,0);
  fdName.top=new FormAttachment(0,margin);
  fdName.right=new FormAttachment(100,0);
  wName.setLayoutData(fdName);
  wlAction=new Label(shell,SWT.RIGHT);
  wlAction.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Action.Label"));
  props.setLook(wlAction);
  fdlAction=new FormData();
  fdlAction.left=new FormAttachment(0,0);
  fdlAction.right=new FormAttachment(middle,0);
  fdlAction.top=new FormAttachment(wName,2 * margin);
  wlAction.setLayoutData(fdlAction);
  wAction=new CCombo(shell,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wAction.add(Messages.getString("JobEntryCopyMoveResultFilenames.Copy.Label"));
  wAction.add(Messages.getString("JobEntryCopyMoveResultFilenames.Move.Label"));
  wAction.select(0);
  props.setLook(wAction);
  fdAction=new FormData();
  fdAction.left=new FormAttachment(middle,0);
  fdAction.top=new FormAttachment(wName,2 * margin);
  fdAction.right=new FormAttachment(100,0);
  wAction.setLayoutData(fdAction);
  wlFoldername=new Label(shell,SWT.RIGHT);
  wlFoldername.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Foldername.Label"));
  props.setLook(wlFoldername);
  fdlFoldername=new FormData();
  fdlFoldername.left=new FormAttachment(0,0);
  fdlFoldername.top=new FormAttachment(wAction,margin);
  fdlFoldername.right=new FormAttachment(middle,-margin);
  wlFoldername.setLayoutData(fdlFoldername);
  wbFoldername=new Button(shell,SWT.PUSH | SWT.CENTER);
  props.setLook(wbFoldername);
  wbFoldername.setText(Messages.getString("System.Button.Browse"));
  fdbFoldername=new FormData();
  fdbFoldername.right=new FormAttachment(100,0);
  fdbFoldername.top=new FormAttachment(wAction,0);
  wbFoldername.setLayoutData(fdbFoldername);
  wFoldername=new TextVar(jobMeta,shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFoldername);
  wFoldername.addModifyListener(lsMod);
  fdFoldername=new FormData();
  fdFoldername.left=new FormAttachment(middle,0);
  fdFoldername.top=new FormAttachment(wAction,margin);
  fdFoldername.right=new FormAttachment(wbFoldername,-margin);
  wFoldername.setLayoutData(fdFoldername);
  wFoldername.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFoldername.setToolTipText(jobMeta.environmentSubstitute(wFoldername.getText()));
    }
  }
);
  wbFoldername.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
      if (wFoldername.getText() != null) {
        dialog.setFilterPath(jobMeta.environmentSubstitute(wFoldername.getText()));
      }
      String dir=dialog.open();
      if (dir != null) {
        wFoldername.setText(dir);
      }
    }
  }
);
  wlCreateDestinationFolder=new Label(shell,SWT.RIGHT);
  wlCreateDestinationFolder.setText(Messages.getString("JobEntryCopyMoveResultFilenames.CreateDestinationFolder.Label"));
  props.setLook(wlCreateDestinationFolder);
  fdlCreateDestinationFolder=new FormData();
  fdlCreateDestinationFolder.left=new FormAttachment(0,0);
  fdlCreateDestinationFolder.top=new FormAttachment(wFoldername,margin);
  fdlCreateDestinationFolder.right=new FormAttachment(middle,-margin);
  wlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);
  wCreateDestinationFolder=new Button(shell,SWT.CHECK);
  props.setLook(wCreateDestinationFolder);
  wCreateDestinationFolder.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.CreateDestinationFolder.Tooltip"));
  fdCreateDestinationFolder=new FormData();
  fdCreateDestinationFolder.left=new FormAttachment(middle,0);
  fdCreateDestinationFolder.top=new FormAttachment(wFoldername,margin);
  fdCreateDestinationFolder.right=new FormAttachment(100,0);
  wCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);
  wCreateDestinationFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlOverwriteFile=new Label(shell,SWT.RIGHT);
  wlOverwriteFile.setText(Messages.getString("JobEntryCopyMoveResultFilenames.OverwriteFile.Label"));
  props.setLook(wlOverwriteFile);
  fdlOverwriteFile=new FormData();
  fdlOverwriteFile.left=new FormAttachment(0,0);
  fdlOverwriteFile.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdlOverwriteFile.right=new FormAttachment(middle,-margin);
  wlOverwriteFile.setLayoutData(fdlOverwriteFile);
  wOverwriteFile=new Button(shell,SWT.CHECK);
  props.setLook(wOverwriteFile);
  wOverwriteFile.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.OverwriteFile.Tooltip"));
  fdOverwriteFile=new FormData();
  fdOverwriteFile.left=new FormAttachment(middle,0);
  fdOverwriteFile.top=new FormAttachment(wCreateDestinationFolder,margin);
  fdOverwriteFile.right=new FormAttachment(100,0);
  wOverwriteFile.setLayoutData(fdOverwriteFile);
  wOverwriteFile.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlRemovedSourceFilename=new Label(shell,SWT.RIGHT);
  wlRemovedSourceFilename.setText(Messages.getString("JobEntryCopyMoveResultFilenames.RemovedSourceFilename.Label"));
  props.setLook(wlRemovedSourceFilename);
  fdlRemovedSourceFilename=new FormData();
  fdlRemovedSourceFilename.left=new FormAttachment(0,0);
  fdlRemovedSourceFilename.top=new FormAttachment(wOverwriteFile,margin);
  fdlRemovedSourceFilename.right=new FormAttachment(middle,-margin);
  wlRemovedSourceFilename.setLayoutData(fdlRemovedSourceFilename);
  wRemovedSourceFilename=new Button(shell,SWT.CHECK);
  props.setLook(wRemovedSourceFilename);
  wRemovedSourceFilename.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.RemovedSourceFilename.Tooltip"));
  fdRemovedSourceFilename=new FormData();
  fdRemovedSourceFilename.left=new FormAttachment(middle,0);
  fdRemovedSourceFilename.top=new FormAttachment(wOverwriteFile,margin);
  fdRemovedSourceFilename.right=new FormAttachment(100,0);
  wRemovedSourceFilename.setLayoutData(fdRemovedSourceFilename);
  wRemovedSourceFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddDestinationFilename=new Label(shell,SWT.RIGHT);
  wlAddDestinationFilename.setText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDestinationFilename.Label"));
  props.setLook(wlAddDestinationFilename);
  fdlAddDestinationFilename=new FormData();
  fdlAddDestinationFilename.left=new FormAttachment(0,0);
  fdlAddDestinationFilename.top=new FormAttachment(wRemovedSourceFilename,margin);
  fdlAddDestinationFilename.right=new FormAttachment(middle,-margin);
  wlAddDestinationFilename.setLayoutData(fdlAddDestinationFilename);
  wAddDestinationFilename=new Button(shell,SWT.CHECK);
  props.setLook(wAddDestinationFilename);
  wAddDestinationFilename.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDestinationFilename.Tooltip"));
  fdAddDestinationFilename=new FormData();
  fdAddDestinationFilename.left=new FormAttachment(middle,0);
  fdAddDestinationFilename.top=new FormAttachment(wRemovedSourceFilename,margin);
  fdAddDestinationFilename.right=new FormAttachment(100,0);
  wAddDestinationFilename.setLayoutData(fdAddDestinationFilename);
  wAddDestinationFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
    }
  }
);
  wlAddDate=new Label(shell,SWT.RIGHT);
  wlAddDate.setText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDate.Label"));
  props.setLook(wlAddDate);
  fdlAddDate=new FormData();
  fdlAddDate.left=new FormAttachment(0,0);
  fdlAddDate.top=new FormAttachment(wAddDestinationFilename,margin);
  fdlAddDate.right=new FormAttachment(middle,-margin);
  wlAddDate.setLayoutData(fdlAddDate);
  wAddDate=new Button(shell,SWT.CHECK);
  props.setLook(wAddDate);
  wAddDate.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDate.Tooltip"));
  fdAddDate=new FormData();
  fdAddDate.left=new FormAttachment(middle,0);
  fdAddDate.top=new FormAttachment(wAddDestinationFilename,margin);
  fdAddDate.right=new FormAttachment(100,0);
  wAddDate.setLayoutData(fdAddDate);
  wAddDate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddDateBeforeExtension();
    }
  }
);
  wlAddTime=new Label(shell,SWT.RIGHT);
  wlAddTime.setText(Messages.getString("JobEntryCopyMoveResultFilenames.AddTime.Label"));
  props.setLook(wlAddTime);
  fdlAddTime=new FormData();
  fdlAddTime.left=new FormAttachment(0,0);
  fdlAddTime.top=new FormAttachment(wAddDate,margin);
  fdlAddTime.right=new FormAttachment(middle,-margin);
  wlAddTime.setLayoutData(fdlAddTime);
  wAddTime=new Button(shell,SWT.CHECK);
  props.setLook(wAddTime);
  wAddTime.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.AddTime.Tooltip"));
  fdAddTime=new FormData();
  fdAddTime.left=new FormAttachment(middle,0);
  fdAddTime.top=new FormAttachment(wAddDate,margin);
  fdAddTime.right=new FormAttachment(100,0);
  wAddTime.setLayoutData(fdAddTime);
  wAddTime.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setAddDateBeforeExtension();
    }
  }
);
  wlSpecifyFormat=new Label(shell,SWT.RIGHT);
  wlSpecifyFormat.setText(Messages.getString("JobEntryCopyMoveResultFilenames.SpecifyFormat.Label"));
  props.setLook(wlSpecifyFormat);
  fdlSpecifyFormat=new FormData();
  fdlSpecifyFormat.left=new FormAttachment(0,0);
  fdlSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdlSpecifyFormat.right=new FormAttachment(middle,-margin);
  wlSpecifyFormat.setLayoutData(fdlSpecifyFormat);
  wSpecifyFormat=new Button(shell,SWT.CHECK);
  props.setLook(wSpecifyFormat);
  wSpecifyFormat.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.SpecifyFormat.Tooltip"));
  fdSpecifyFormat=new FormData();
  fdSpecifyFormat.left=new FormAttachment(middle,0);
  fdSpecifyFormat.top=new FormAttachment(wAddTime,margin);
  fdSpecifyFormat.right=new FormAttachment(100,0);
  wSpecifyFormat.setLayoutData(fdSpecifyFormat);
  wSpecifyFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      setDateTimeFormat();
      setAddDateBeforeExtension();
    }
  }
);
  String dats[]=Const.getDateFormats();
  wlDateTimeFormat=new Label(shell,SWT.RIGHT);
  wlDateTimeFormat.setText(Messages.getString("JobEntryCopyMoveResultFilenames.DateTimeFormat.Label"));
  props.setLook(wlDateTimeFormat);
  fdlDateTimeFormat=new FormData();
  fdlDateTimeFormat.left=new FormAttachment(0,0);
  fdlDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdlDateTimeFormat.right=new FormAttachment(middle,-margin);
  wlDateTimeFormat.setLayoutData(fdlDateTimeFormat);
  wDateTimeFormat=new CCombo(shell,SWT.BORDER | SWT.READ_ONLY);
  wDateTimeFormat.setEditable(true);
  props.setLook(wDateTimeFormat);
  wDateTimeFormat.addModifyListener(lsMod);
  fdDateTimeFormat=new FormData();
  fdDateTimeFormat.left=new FormAttachment(middle,0);
  fdDateTimeFormat.top=new FormAttachment(wSpecifyFormat,margin);
  fdDateTimeFormat.right=new FormAttachment(100,0);
  wDateTimeFormat.setLayoutData(fdDateTimeFormat);
  for (int x=0; x < dats.length; x++)   wDateTimeFormat.add(dats[x]);
  wlAddDateBeforeExtension=new Label(shell,SWT.RIGHT);
  wlAddDateBeforeExtension.setText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDateBeforeExtension.Label"));
  props.setLook(wlAddDateBeforeExtension);
  fdlAddDateBeforeExtension=new FormData();
  fdlAddDateBeforeExtension.left=new FormAttachment(0,0);
  fdlAddDateBeforeExtension.top=new FormAttachment(wDateTimeFormat,margin);
  fdlAddDateBeforeExtension.right=new FormAttachment(middle,-margin);
  wlAddDateBeforeExtension.setLayoutData(fdlAddDateBeforeExtension);
  wAddDateBeforeExtension=new Button(shell,SWT.CHECK);
  props.setLook(wAddDateBeforeExtension);
  wAddDateBeforeExtension.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.AddDateBeforeExtension.Tooltip"));
  fdAddDateBeforeExtension=new FormData();
  fdAddDateBeforeExtension.left=new FormAttachment(middle,0);
  fdAddDateBeforeExtension.top=new FormAttachment(wDateTimeFormat,margin);
  fdAddDateBeforeExtension.right=new FormAttachment(100,0);
  wAddDateBeforeExtension.setLayoutData(fdAddDateBeforeExtension);
  wAddDateBeforeExtension.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      CheckLimit();
    }
  }
);
  wLimitTo=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wLimitTo);
  wLimitTo.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Group.LimitTo.Label"));
  FormLayout groupLayout=new FormLayout();
  groupLayout.marginWidth=10;
  groupLayout.marginHeight=10;
  wLimitTo.setLayout(groupLayout);
  wlSpecifyWilcard=new Label(wLimitTo,SWT.RIGHT);
  wlSpecifyWilcard.setText(Messages.getString("JobEntryCopyMoveResultFilenames.SpecifyWilcard.Label"));
  props.setLook(wlSpecifyWilcard);
  fdlSpecifyWilcard=new FormData();
  fdlSpecifyWilcard.left=new FormAttachment(0,0);
  fdlSpecifyWilcard.top=new FormAttachment(wAddDateBeforeExtension,margin);
  fdlSpecifyWilcard.right=new FormAttachment(middle,-margin);
  wlSpecifyWilcard.setLayoutData(fdlSpecifyWilcard);
  wSpecifyWilcard=new Button(wLimitTo,SWT.CHECK);
  props.setLook(wSpecifyWilcard);
  wSpecifyWilcard.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.SpecifyWilcard.Tooltip"));
  fdSpecifyWilcard=new FormData();
  fdSpecifyWilcard.left=new FormAttachment(middle,0);
  fdSpecifyWilcard.top=new FormAttachment(wAddDateBeforeExtension,margin);
  fdSpecifyWilcard.right=new FormAttachment(100,0);
  wSpecifyWilcard.setLayoutData(fdSpecifyWilcard);
  wSpecifyWilcard.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      jobEntry.setChanged();
      CheckLimit();
    }
  }
);
  wlWildcard=new Label(wLimitTo,SWT.RIGHT);
  wlWildcard.setText(Messages.getString("JobEntryCopyMoveResultFilenames.Wildcard.Label"));
  props.setLook(wlWildcard);
  fdlWildcard=new FormData();
  fdlWildcard.left=new FormAttachment(0,0);
  fdlWildcard.top=new FormAttachment(wSpecifyWilcard,margin);
  fdlWildcard.right=new FormAttachment(middle,-margin);
  wlWildcard.setLayoutData(fdlWildcard);
  wWildcard=new TextVar(jobMeta,wLimitTo,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wWildcard.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.Wildcard.Tooltip"));
  props.setLook(wWildcard);
  wWildcard.addModifyListener(lsMod);
  fdWildcard=new FormData();
  fdWildcard.left=new FormAttachment(middle,0);
  fdWildcard.top=new FormAttachment(wSpecifyWilcard,margin);
  fdWildcard.right=new FormAttachment(100,-margin);
  wWildcard.setLayoutData(fdWildcard);
  wWildcard.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wWildcard.setToolTipText(jobMeta.environmentSubstitute(wWildcard.getText()));
    }
  }
);
  wlWildcardExclude=new Label(wLimitTo,SWT.RIGHT);
  wlWildcardExclude.setText(Messages.getString("JobEntryCopyMoveResultFilenames.WildcardExclude.Label"));
  props.setLook(wlWildcardExclude);
  fdlWildcardExclude=new FormData();
  fdlWildcardExclude.left=new FormAttachment(0,0);
  fdlWildcardExclude.top=new FormAttachment(wWildcard,margin);
  fdlWildcardExclude.right=new FormAttachment(middle,-margin);
  wlWildcardExclude.setLayoutData(fdlWildcardExclude);
  wWildcardExclude=new TextVar(jobMeta,wLimitTo,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wWildcardExclude.setToolTipText(Messages.getString("JobEntryCopyMoveResultFilenames.WildcardExclude.Tooltip"));
  props.setLook(wWildcardExclude);
  wWildcardExclude.addModifyListener(lsMod);
  fdWildcardExclude=new FormData();
  fdWildcardExclude.left=new FormAttachment(middle,0);
  fdWildcardExclude.top=new FormAttachment(wWildcard,margin);
  fdWildcardExclude.right=new FormAttachment(100,-margin);
  wWildcardExclude.setLayoutData(fdWildcardExclude);
  wWildcardExclude.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wWildcardExclude.setToolTipText(jobMeta.environmentSubstitute(wWildcardExclude.getText()));
    }
  }
);
  fdLimitTo=new FormData();
  fdLimitTo.left=new FormAttachment(0,margin);
  fdLimitTo.top=new FormAttachment(wAddDateBeforeExtension,margin);
  fdLimitTo.right=new FormAttachment(100,-margin);
  wLimitTo.setLayoutData(fdLimitTo);
  wSuccessOn=new Group(shell,SWT.SHADOW_NONE);
  props.setLook(wSuccessOn);
  wSuccessOn.setText(Messages.getString("JobEntryCopyMoveResultFilenames.SuccessOn.Group.Label"));
  FormLayout successongroupLayout=new FormLayout();
  successongroupLayout.marginWidth=10;
  successongroupLayout.marginHeight=10;
  wSuccessOn.setLayout(successongroupLayout);
  wlSuccessCondition=new Label(wSuccessOn,SWT.RIGHT);
  wlSuccessCondition.setText(Messages.getString("JobEntryCopyMoveResultFilenames.SuccessCondition.Label"));
  props.setLook(wlSuccessCondition);
  fdlSuccessCondition=new FormData();
  fdlSuccessCondition.left=new FormAttachment(0,0);
  fdlSuccessCondition.right=new FormAttachment(middle,0);
  fdlSuccessCondition.top=new FormAttachment(wLimitTo,2 * margin);
  wlSuccessCondition.setLayoutData(fdlSuccessCondition);
  wSuccessCondition=new CCombo(wSuccessOn,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
  wSuccessCondition.add(Messages.getString("JobEntryCopyMoveResultFilenames.SuccessWhenAllWorksFine.Label"));
  wSuccessCondition.add(Messages.getString("JobEntryCopyMoveResultFilenames.SuccessWhenAtLeat.Label"));
  wSuccessCondition.add(Messages.getString("JobEntryCopyMoveResultFilenames.SuccessWhenErrorsLessThan.Label"));
  wSuccessCondition.select(0);
  props.setLook(wSuccessCondition);
  fdSuccessCondition=new FormData();
  fdSuccessCondition.left=new FormAttachment(middle,0);
  fdSuccessCondition.top=new FormAttachment(wLimitTo,2 * margin);
  fdSuccessCondition.right=new FormAttachment(100,0);
  wSuccessCondition.setLayoutData(fdSuccessCondition);
  wSuccessCondition.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      activeSuccessCondition();
    }
  }
);
  wlNrErrorsLessThan=new Label(wSuccessOn,SWT.RIGHT);
  wlNrErrorsLessThan.setText(Messages.getString("JobEntryCopyMoveResultFilenames.NrErrorsLessThan.Label"));
  props.setLook(wlNrErrorsLessThan);
  fdlNrErrorsLessThan=new FormData();
  fdlNrErrorsLessThan.left=new FormAttachment(0,0);
  fdlNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdlNrErrorsLessThan.right=new FormAttachment(middle,-margin);
  wlNrErrorsLessThan.setLayoutData(fdlNrErrorsLessThan);
  wNrErrorsLessThan=new TextVar(jobMeta,wSuccessOn,SWT.SINGLE | SWT.LEFT | SWT.BORDER,Messages.getString("JobEntryCopyMoveResultFilenames.NrErrorsLessThan.Tooltip"));
  props.setLook(wNrErrorsLessThan);
  wNrErrorsLessThan.addModifyListener(lsMod);
  fdNrErrorsLessThan=new FormData();
  fdNrErrorsLessThan.left=new FormAttachment(middle,0);
  fdNrErrorsLessThan.top=new FormAttachment(wSuccessCondition,margin);
  fdNrErrorsLessThan.right=new FormAttachment(100,-margin);
  wNrErrorsLessThan.setLayoutData(fdNrErrorsLessThan);
  fdSuccessOn=new FormData();
  fdSuccessOn.left=new FormAttachment(0,margin);
  fdSuccessOn.top=new FormAttachment(wLimitTo,margin);
  fdSuccessOn.right=new FormAttachment(100,-margin);
  wSuccessOn.setLayoutData(fdSuccessOn);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,wSuccessOn);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wName.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  getData();
  CheckLimit();
  setDateTimeFormat();
  activeSuccessCondition();
  setAddDateBeforeExtension();
  BaseStepDialog.setSize(shell);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return jobEntry;
}
