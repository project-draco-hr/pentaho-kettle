{
  this();
  statusDescription=XMLHandler.getTagValue(statusNode,"statusdesc");
  memoryFree=Const.toLong(XMLHandler.getTagValue(statusNode,"memory_free"),-1L);
  memoryTotal=Const.toLong(XMLHandler.getTagValue(statusNode,"memory_total"),-1L);
  String cpuCoresStr=XMLHandler.getTagValue(statusNode,"cpu_cores");
  cpuCores=Const.toInt(cpuCoresStr,-1);
  String cpuProcessTimeStr=XMLHandler.getTagValue(statusNode,"cpu_process_time");
  cpuProcessTime=Utils.isEmpty(cpuProcessTimeStr) ? 0L : Long.valueOf(cpuProcessTimeStr);
  uptime=Const.toLong(XMLHandler.getTagValue(statusNode,"uptime"),-1);
  threadCount=Const.toInt(XMLHandler.getTagValue(statusNode,"thread_count"),-1);
  loadAvg=Const.toDouble(XMLHandler.getTagValue(statusNode,"load_avg"),-1.0);
  osName=XMLHandler.getTagValue(statusNode,"os_name");
  osVersion=XMLHandler.getTagValue(statusNode,"os_version");
  osArchitecture=XMLHandler.getTagValue(statusNode,"os_arch");
  Node listTransNode=XMLHandler.getSubNode(statusNode,"transstatuslist");
  Node listJobsNode=XMLHandler.getSubNode(statusNode,"jobstatuslist");
  int nrTrans=XMLHandler.countNodes(listTransNode,SlaveServerTransStatus.XML_TAG);
  int nrJobs=XMLHandler.countNodes(listJobsNode,SlaveServerJobStatus.XML_TAG);
  for (int i=0; i < nrTrans; i++) {
    Node transStatusNode=XMLHandler.getSubNodeByNr(listTransNode,SlaveServerTransStatus.XML_TAG,i);
    transStatusList.add(new SlaveServerTransStatus(transStatusNode));
  }
  for (int i=0; i < nrJobs; i++) {
    Node jobStatusNode=XMLHandler.getSubNodeByNr(listJobsNode,SlaveServerJobStatus.XML_TAG,i);
    jobStatusList.add(new SlaveServerJobStatus(jobStatusNode));
  }
}
