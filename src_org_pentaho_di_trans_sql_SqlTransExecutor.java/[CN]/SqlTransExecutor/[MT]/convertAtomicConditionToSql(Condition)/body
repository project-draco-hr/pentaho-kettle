{
  StringBuilder sql=new StringBuilder();
  String fieldName=atomicCondition.getLeftValuename();
  FieldVariableMapping mapping=FieldVariableMapping.findFieldVariableMappingByFieldName(service.getFieldVariableMappings(),atomicCondition.getLeftValuename());
  if (mapping != null) {
    fieldName=mapping.getTargetName();
  }
  sql.append(fieldName).append(" ");
switch (atomicCondition.getFunction()) {
case Condition.FUNC_EQUAL:
    sql.append("=");
  break;
case Condition.FUNC_NOT_EQUAL:
sql.append("<>");
break;
case Condition.FUNC_LARGER:
sql.append(">");
break;
case Condition.FUNC_LARGER_EQUAL:
sql.append(">=");
break;
case Condition.FUNC_SMALLER:
sql.append("<");
break;
case Condition.FUNC_SMALLER_EQUAL:
sql.append("<=");
break;
case Condition.FUNC_NULL:
sql.append("IS NULL");
break;
case Condition.FUNC_NOT_NULL:
sql.append("IS NOT NULL");
break;
case Condition.FUNC_CONTAINS:
sql.append("LIKE");
break;
}
sql.append(" ");
sql.append(getAtomicConditionRightSql(atomicCondition));
return sql.toString();
}
