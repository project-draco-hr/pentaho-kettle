{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(Messages.getString("TextFileInputDialog.DialogTitle"));
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(Messages.getString("System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wFileTab=new CTabItem(wTabFolder,SWT.NONE);
  wFileTab.setText(Messages.getString("TextFileInputDialog.FileTab.TabTitle"));
  wFileComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wFileComp);
  FormLayout fileLayout=new FormLayout();
  fileLayout.marginWidth=3;
  fileLayout.marginHeight=3;
  wFileComp.setLayout(fileLayout);
  wlChefInput=new Label(wFileComp,SWT.RIGHT);
  wlChefInput.setText("Get file from Chef");
  props.setLook(wlChefInput);
  fdlChefInput=new FormData();
  fdlChefInput.left=new FormAttachment(0,0);
  fdlChefInput.top=new FormAttachment(0,0);
  fdlChefInput.right=new FormAttachment(middle,-margin);
  wlChefInput.setLayoutData(fdlChefInput);
  wChefInput=new Button(wFileComp,SWT.CHECK);
  props.setLook(wChefInput);
  fdChefInput=new FormData();
  fdChefInput.left=new FormAttachment(middle,0);
  fdChefInput.right=new FormAttachment(100,0);
  fdChefInput.top=new FormAttachment(0,0);
  wChefInput.setLayoutData(fdChefInput);
  wlFilename=new Label(wFileComp,SWT.RIGHT);
  wlFilename.setText(Messages.getString("TextFileInputDialog.Filename.Label"));
  props.setLook(wlFilename);
  fdlFilename=new FormData();
  fdlFilename.left=new FormAttachment(0,0);
  fdlFilename.top=new FormAttachment(0,0);
  fdlFilename.right=new FormAttachment(middle,-margin);
  wlFilename.setLayoutData(fdlFilename);
  wbbFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbbFilename);
  wbbFilename.setText(Messages.getString("System.Button.Browse"));
  wbbFilename.setToolTipText(Messages.getString("System.Tooltip.BrowseForFileOrDirAndAdd"));
  fdbFilename=new FormData();
  fdbFilename.right=new FormAttachment(100,0);
  fdbFilename.top=new FormAttachment(wChefInput,margin);
  wbbFilename.setLayoutData(fdbFilename);
  wbvFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbvFilename);
  wbvFilename.setText(Messages.getString("System.Button.Variable"));
  wbvFilename.setToolTipText(Messages.getString("System.Tooltip.VariableToFileOrDir"));
  fdbvFilename=new FormData();
  fdbvFilename.right=new FormAttachment(wbbFilename,-margin);
  fdbvFilename.top=new FormAttachment(wChefInput,margin);
  wbvFilename.setLayoutData(fdbvFilename);
  wbaFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbaFilename);
  wbaFilename.setText(Messages.getString("TextFileInputDialog.FilenameAdd.Button"));
  wbaFilename.setToolTipText(Messages.getString("TextFileInputDialog.FilenameAdd.Tooltip"));
  fdbaFilename=new FormData();
  fdbaFilename.right=new FormAttachment(wbvFilename,-margin);
  fdbaFilename.top=new FormAttachment(wChefInput,margin);
  wbaFilename.setLayoutData(fdbaFilename);
  wFilename=new Text(wFileComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename);
  wFilename.addModifyListener(lsMod);
  fdFilename=new FormData();
  fdFilename.left=new FormAttachment(middle,0);
  fdFilename.right=new FormAttachment(wbaFilename,-margin);
  fdFilename.top=new FormAttachment(wChefInput,margin);
  wFilename.setLayoutData(fdFilename);
  wlFilemask=new Label(wFileComp,SWT.RIGHT);
  wlFilemask.setText(Messages.getString("TextFileInputDialog.Filemask.Label"));
  props.setLook(wlFilemask);
  fdlFilemask=new FormData();
  fdlFilemask.left=new FormAttachment(0,0);
  fdlFilemask.top=new FormAttachment(wFilename,margin);
  fdlFilemask.right=new FormAttachment(middle,-margin);
  wlFilemask.setLayoutData(fdlFilemask);
  wFilemask=new Text(wFileComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilemask);
  wFilemask.addModifyListener(lsMod);
  fdFilemask=new FormData();
  fdFilemask.left=new FormAttachment(middle,0);
  fdFilemask.top=new FormAttachment(wFilename,margin);
  fdFilemask.right=new FormAttachment(100,0);
  wFilemask.setLayoutData(fdFilemask);
  wFilename.addModifyListener(getModifyListenerTooltipText(wFilename));
  wbvFilename.addSelectionListener(VariableButtonListenerFactory.getSelectionAdapter(shell,wFilename));
  wlFilenameList=new Label(wFileComp,SWT.RIGHT);
  wlFilenameList.setText(Messages.getString("TextFileInputDialog.FilenameList.Label"));
  props.setLook(wlFilenameList);
  fdlFilenameList=new FormData();
  fdlFilenameList.left=new FormAttachment(0,0);
  fdlFilenameList.top=new FormAttachment(wFilemask,margin);
  fdlFilenameList.right=new FormAttachment(middle,-margin);
  wlFilenameList.setLayoutData(fdlFilenameList);
  wbdFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbdFilename);
  wbdFilename.setText(Messages.getString("TextFileInputDialog.FilenameDelete.Button"));
  wbdFilename.setToolTipText(Messages.getString("TextFileInputDialog.FilenameDelete.Tooltip"));
  fdbdFilename=new FormData();
  fdbdFilename.right=new FormAttachment(100,0);
  fdbdFilename.top=new FormAttachment(wFilemask,40);
  wbdFilename.setLayoutData(fdbdFilename);
  wbeFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbeFilename);
  wbeFilename.setText(Messages.getString("TextFileInputDialog.FilenameEdit.Button"));
  wbeFilename.setToolTipText(Messages.getString("TextFileInputDialog.FilenameEdit.Tooltip"));
  fdbeFilename=new FormData();
  fdbeFilename.right=new FormAttachment(100,0);
  fdbeFilename.top=new FormAttachment(wbdFilename,margin);
  wbeFilename.setLayoutData(fdbeFilename);
  wbShowFiles=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbShowFiles);
  wbShowFiles.setText(Messages.getString("TextFileInputDialog.ShowFiles.Button"));
  fdbShowFiles=new FormData();
  fdbShowFiles.left=new FormAttachment(middle,0);
  fdbShowFiles.bottom=new FormAttachment(100,0);
  wbShowFiles.setLayoutData(fdbShowFiles);
  wFirst=new Button(wFileComp,SWT.PUSH);
  wFirst.setText(Messages.getString("TextFileInputDialog.First.Button"));
  fdFirst=new FormData();
  fdFirst.left=new FormAttachment(wbShowFiles,margin * 2);
  fdFirst.bottom=new FormAttachment(100,0);
  wFirst.setLayoutData(fdFirst);
  wFirstHeader=new Button(wFileComp,SWT.PUSH);
  wFirstHeader.setText(Messages.getString("TextFileInputDialog.FirstHeader.Button"));
  fdFirstHeader=new FormData();
  fdFirstHeader.left=new FormAttachment(wFirst,margin * 2);
  fdFirstHeader.bottom=new FormAttachment(100,0);
  wFirstHeader.setLayoutData(fdFirstHeader);
  ColumnInfo[] colinfo=new ColumnInfo[3];
  colinfo[0]=new ColumnInfo(Messages.getString("TextFileInputDialog.FileDirColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  colinfo[1]=new ColumnInfo(Messages.getString("TextFileInputDialog.WildcardColumn.Column"),ColumnInfo.COLUMN_TYPE_TEXT,false);
  colinfo[1].setToolTip(Messages.getString("TextFileInputDialog.RegExpColumn.Column"));
  colinfo[2]=new ColumnInfo(Messages.getString("TextFileInputDialog.RequiredColumn.Column"),ColumnInfo.COLUMN_TYPE_CCOMBO,YES_NO_COMBO);
  colinfo[2].setToolTip(Messages.getString("TextFileInputDialog.RequiredColumn.Tooltip"));
  wFilenameList=new TableView(wFileComp,SWT.FULL_SELECTION | SWT.SINGLE | SWT.BORDER,colinfo,3,lsMod,props);
  props.setLook(wFilenameList);
  fdFilenameList=new FormData();
  fdFilenameList.left=new FormAttachment(middle,0);
  fdFilenameList.right=new FormAttachment(wbdFilename,-margin);
  fdFilenameList.top=new FormAttachment(wFilemask,margin);
  fdFilenameList.bottom=new FormAttachment(wbShowFiles,-margin);
  wFilenameList.setLayoutData(fdFilenameList);
  fdFileComp=new FormData();
  fdFileComp.left=new FormAttachment(0,0);
  fdFileComp.top=new FormAttachment(0,0);
  fdFileComp.right=new FormAttachment(100,0);
  fdFileComp.bottom=new FormAttachment(100,0);
  wFileComp.setLayoutData(fdFileComp);
  wFileComp.layout();
  wFileTab.setControl(wFileComp);
  addContentTab();
  addErrorTab();
  addFiltersTabs();
  addFieldsTabs();
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(Messages.getString("System.Button.OK"));
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(Messages.getString("TextFileInputDialog.Preview.Button"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(Messages.getString("System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wPreview,wCancel},margin,wTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsFirst=new Listener(){
    public void handleEvent(    Event e){
      first(false);
    }
  }
;
  lsFirstHeader=new Listener(){
    public void handleEvent(    Event e){
      first(true);
    }
  }
;
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wFirst.addListener(SWT.Selection,lsFirst);
  wFirstHeader.addListener(SWT.Selection,lsFirstHeader);
  wGet.addListener(SWT.Selection,lsGet);
  wPreview.addListener(SWT.Selection,lsPreview);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wChefInput.addSelectionListener(lsDef);
  wStepname.addSelectionListener(lsDef);
  wSeparator.addSelectionListener(lsDef);
  wLimit.addSelectionListener(lsDef);
  wInclRownumField.addSelectionListener(lsDef);
  wInclFilenameField.addSelectionListener(lsDef);
  wNrHeader.addSelectionListener(lsDef);
  wNrFooter.addSelectionListener(lsDef);
  wNrWraps.addSelectionListener(lsDef);
  wWarnDestDir.addSelectionListener(lsDef);
  wWarnExt.addSelectionListener(lsDef);
  wErrorDestDir.addSelectionListener(lsDef);
  wErrorExt.addSelectionListener(lsDef);
  wLineNrDestDir.addSelectionListener(lsDef);
  wLineNrExt.addSelectionListener(lsDef);
  SelectionAdapter selA=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      wFilenameList.add(new String[]{wFilename.getText(),wFilemask.getText()});
      wFilename.setText("");
      wFilemask.setText("");
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
      wFilenameList.optWidth(true);
    }
  }
;
  wbaFilename.addSelectionListener(selA);
  wFilename.addSelectionListener(selA);
  wbdFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx[]=wFilenameList.getSelectionIndices();
      wFilenameList.remove(idx);
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbeFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx=wFilenameList.getSelectionIndex();
      if (idx >= 0) {
        String string[]=wFilenameList.getItem(idx);
        wFilename.setText(string[0]);
        wFilemask.setText(string[1]);
        wFilenameList.remove(idx);
      }
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbShowFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TextFileInputMeta tfii=new TextFileInputMeta();
      getInfo(tfii);
      String files[]=tfii.getFilePaths();
      if (files != null && files.length > 0) {
        EnterSelectionDialog esd=new EnterSelectionDialog(shell,props,files,"Files read","Files read:");
        esd.setViewOnly();
        esd.open();
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage(Messages.getString("TextFileInputDialog.NoFilesFound.DialogMessage"));
        mb.setText(Messages.getString("System.Dialog.Error.Title"));
        mb.open();
      }
    }
  }
);
  wbSeparator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      wSeparator.insert("\t");
    }
  }
);
  SelectionAdapter lsFlags=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFlags();
    }
  }
;
  wInclFilename.addSelectionListener(lsFlags);
  wInclRownum.addSelectionListener(lsFlags);
  wErrorIgnored.addSelectionListener(lsFlags);
  wHeader.addSelectionListener(lsFlags);
  wFooter.addSelectionListener(lsFlags);
  wWraps.addSelectionListener(lsFlags);
  wLayoutPaged.addSelectionListener(lsFlags);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (wFilemask.getText() != null && wFilemask.getText().length() > 0) {
        DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
        if (wFilename.getText() != null) {
          String fpath=StringUtil.environmentSubstitute(wFilename.getText());
          dialog.setFilterPath(fpath);
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath();
          wFilename.setText(str);
        }
      }
 else {
        FileDialog dialog=new FileDialog(shell,SWT.OPEN);
        if (wZipped.getSelection()) {
          dialog.setFilterExtensions(new String[]{"*.zip","*.txt;*.csv","*.csv","*.txt","*"});
        }
 else {
          dialog.setFilterExtensions(new String[]{"*.txt;*.csv","*.csv","*.txt","*"});
        }
        if (wFilename.getText() != null) {
          String fname=StringUtil.environmentSubstitute(wFilename.getText());
          dialog.setFileName(fname);
        }
        if (wZipped.getSelection()) {
          dialog.setFilterNames(new String[]{Messages.getString("System.FileType.ZipFiles"),Messages.getString("TextFileInputDialog.FileType.TextAndCSVFiles"),Messages.getString("System.FileType.CSVFiles"),Messages.getString("System.FileType.TextFiles"),Messages.getString("System.FileType.AllFiles")});
        }
 else {
          dialog.setFilterNames(new String[]{Messages.getString("TextFileInputDialog.FileType.TextAndCSVFiles"),Messages.getString("System.FileType.CSVFiles"),Messages.getString("System.FileType.TextFiles"),Messages.getString("System.FileType.AllFiles")});
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName();
          wFilename.setText(str);
        }
      }
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  getData(input);
  setSize();
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
