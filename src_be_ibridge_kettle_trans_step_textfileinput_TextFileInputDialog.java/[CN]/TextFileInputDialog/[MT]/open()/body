{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText("Text file input");
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText("Step name ");
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  wFileTab=new CTabItem(wTabFolder,SWT.NONE);
  wFileTab.setText("File");
  wFileComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wFileComp);
  FormLayout fileLayout=new FormLayout();
  fileLayout.marginWidth=3;
  fileLayout.marginHeight=3;
  wFileComp.setLayout(fileLayout);
  wlFilename=new Label(wFileComp,SWT.RIGHT);
  wlFilename.setText("File or directory ");
  props.setLook(wlFilename);
  fdlFilename=new FormData();
  fdlFilename.left=new FormAttachment(0,0);
  fdlFilename.top=new FormAttachment(0,0);
  fdlFilename.right=new FormAttachment(middle,-margin);
  wlFilename.setLayoutData(fdlFilename);
  wbbFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbbFilename);
  wbbFilename.setText("&Browse");
  wbbFilename.setToolTipText("Browse for a file or directory & add to the list");
  fdbFilename=new FormData();
  fdbFilename.right=new FormAttachment(100,0);
  fdbFilename.top=new FormAttachment(0,0);
  wbbFilename.setLayoutData(fdbFilename);
  wbvFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbvFilename);
  wbvFilename.setText("&Variable");
  wbvFilename.setToolTipText("Insert a variable in the filename or directory");
  fdbvFilename=new FormData();
  fdbvFilename.right=new FormAttachment(wbbFilename,-margin);
  fdbvFilename.top=new FormAttachment(0,0);
  wbvFilename.setLayoutData(fdbvFilename);
  wbaFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbaFilename);
  wbaFilename.setText("&Add");
  wbaFilename.setToolTipText("Add this entry to the list of files & directories.");
  fdbaFilename=new FormData();
  fdbaFilename.right=new FormAttachment(wbvFilename,-margin);
  fdbaFilename.top=new FormAttachment(0,0);
  wbaFilename.setLayoutData(fdbaFilename);
  wFilename=new Text(wFileComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilename);
  wFilename.addModifyListener(lsMod);
  fdFilename=new FormData();
  fdFilename.left=new FormAttachment(middle,0);
  fdFilename.right=new FormAttachment(wbaFilename,-margin);
  fdFilename.top=new FormAttachment(0,0);
  wFilename.setLayoutData(fdFilename);
  wlFilemask=new Label(wFileComp,SWT.RIGHT);
  wlFilemask.setText("Regular Expression ");
  props.setLook(wlFilemask);
  fdlFilemask=new FormData();
  fdlFilemask.left=new FormAttachment(0,0);
  fdlFilemask.top=new FormAttachment(wFilename,margin);
  fdlFilemask.right=new FormAttachment(middle,-margin);
  wlFilemask.setLayoutData(fdlFilemask);
  wFilemask=new Text(wFileComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilemask);
  wFilemask.addModifyListener(lsMod);
  fdFilemask=new FormData();
  fdFilemask.left=new FormAttachment(middle,0);
  fdFilemask.top=new FormAttachment(wFilename,margin);
  fdFilemask.right=new FormAttachment(100,0);
  wFilemask.setLayoutData(fdFilemask);
  wlFilenameList=new Label(wFileComp,SWT.RIGHT);
  wlFilenameList.setText("Selected files: ");
  props.setLook(wlFilenameList);
  fdlFilenameList=new FormData();
  fdlFilenameList.left=new FormAttachment(0,0);
  fdlFilenameList.top=new FormAttachment(wFilemask,margin);
  fdlFilenameList.right=new FormAttachment(middle,-margin);
  wlFilenameList.setLayoutData(fdlFilenameList);
  wbdFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbdFilename);
  wbdFilename.setText("&Delete");
  wbdFilename.setToolTipText("Delete the selected entries from the list of files.");
  fdbdFilename=new FormData();
  fdbdFilename.right=new FormAttachment(100,0);
  fdbdFilename.top=new FormAttachment(wFilemask,40);
  wbdFilename.setLayoutData(fdbdFilename);
  wbeFilename=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbeFilename);
  wbeFilename.setText("&Edit");
  wbeFilename.setToolTipText("Edit the selected file and remove from the list.");
  fdbeFilename=new FormData();
  fdbeFilename.right=new FormAttachment(100,0);
  fdbeFilename.top=new FormAttachment(wbdFilename,margin);
  wbeFilename.setLayoutData(fdbeFilename);
  wbShowFiles=new Button(wFileComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbShowFiles);
  wbShowFiles.setText("&Show filename(s)...");
  fdbShowFiles=new FormData();
  fdbShowFiles.left=new FormAttachment(middle,0);
  fdbShowFiles.bottom=new FormAttachment(100,0);
  wbShowFiles.setLayoutData(fdbShowFiles);
  wFirst=new Button(wFileComp,SWT.PUSH);
  wFirst.setText(" Show &file content ");
  fdFirst=new FormData();
  fdFirst.left=new FormAttachment(wbShowFiles,margin * 2);
  fdFirst.bottom=new FormAttachment(100,0);
  wFirst.setLayoutData(fdFirst);
  wFirstHeader=new Button(wFileComp,SWT.PUSH);
  wFirstHeader.setText(" Show &content from first data line");
  fdFirstHeader=new FormData();
  fdFirstHeader.left=new FormAttachment(wFirst,margin * 2);
  fdFirstHeader.bottom=new FormAttachment(100,0);
  wFirstHeader.setLayoutData(fdFirstHeader);
  ColumnInfo[] colinfo=new ColumnInfo[2];
  colinfo[0]=new ColumnInfo("File/Directory",ColumnInfo.COLUMN_TYPE_TEXT,false);
  colinfo[1]=new ColumnInfo("Wildcard",ColumnInfo.COLUMN_TYPE_TEXT,false);
  colinfo[1].setToolTip("Enter a regular expression here and a directory in the first column.");
  wFilenameList=new TableView(wFileComp,SWT.FULL_SELECTION | SWT.SINGLE | SWT.BORDER,colinfo,2,lsMod,props);
  props.setLook(wFilenameList);
  fdFilenameList=new FormData();
  fdFilenameList.left=new FormAttachment(middle,0);
  fdFilenameList.right=new FormAttachment(wbdFilename,-margin);
  fdFilenameList.top=new FormAttachment(wFilemask,margin);
  fdFilenameList.bottom=new FormAttachment(wbShowFiles,-margin);
  wFilenameList.setLayoutData(fdFilenameList);
  fdFileComp=new FormData();
  fdFileComp.left=new FormAttachment(0,0);
  fdFileComp.top=new FormAttachment(0,0);
  fdFileComp.right=new FormAttachment(100,0);
  fdFileComp.bottom=new FormAttachment(100,0);
  wFileComp.setLayoutData(fdFileComp);
  wFileComp.layout();
  wFileTab.setControl(wFileComp);
  wContentTab=new CTabItem(wTabFolder,SWT.NONE);
  wContentTab.setText("Content");
  FormLayout contentLayout=new FormLayout();
  contentLayout.marginWidth=3;
  contentLayout.marginHeight=3;
  wContentComp=new Composite(wTabFolder,SWT.NONE);
  props.setLook(wContentComp);
  wContentComp.setLayout(contentLayout);
  wlFiletype=new Label(wContentComp,SWT.RIGHT);
  wlFiletype.setText("Filetype ");
  props.setLook(wlFiletype);
  fdlFiletype=new FormData();
  fdlFiletype.left=new FormAttachment(0,0);
  fdlFiletype.top=new FormAttachment(0,0);
  fdlFiletype.right=new FormAttachment(middle,-margin);
  wlFiletype.setLayoutData(fdlFiletype);
  wFiletype=new CCombo(wContentComp,SWT.BORDER | SWT.READ_ONLY);
  wFiletype.setText("Filetype");
  props.setLook(wFiletype);
  wFiletype.add("CSV");
  wFiletype.add("Fixed");
  wFiletype.select(0);
  wFiletype.addModifyListener(lsMod);
  fdFiletype=new FormData();
  fdFiletype.left=new FormAttachment(middle,0);
  fdFiletype.top=new FormAttachment(0,0);
  fdFiletype.right=new FormAttachment(100,0);
  wFiletype.setLayoutData(fdFiletype);
  wlSeparator=new Label(wContentComp,SWT.RIGHT);
  wlSeparator.setText("Separator ");
  props.setLook(wlSeparator);
  fdlSeparator=new FormData();
  fdlSeparator.left=new FormAttachment(0,0);
  fdlSeparator.top=new FormAttachment(wFiletype,margin);
  fdlSeparator.right=new FormAttachment(middle,-margin);
  wlSeparator.setLayoutData(fdlSeparator);
  wbSeparator=new Button(wContentComp,SWT.PUSH | SWT.CENTER);
  props.setLook(wbSeparator);
  wbSeparator.setText("Insert &TAB");
  fdbSeparator=new FormData();
  fdbSeparator.right=new FormAttachment(100,0);
  fdbSeparator.top=new FormAttachment(wFiletype,0);
  wbSeparator.setLayoutData(fdbSeparator);
  wSeparator=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wSeparator);
  wSeparator.addModifyListener(lsMod);
  fdSeparator=new FormData();
  fdSeparator.left=new FormAttachment(middle,0);
  fdSeparator.top=new FormAttachment(wFiletype,margin);
  fdSeparator.right=new FormAttachment(wbSeparator,-margin);
  wSeparator.setLayoutData(fdSeparator);
  wlEnclosure=new Label(wContentComp,SWT.RIGHT);
  wlEnclosure.setText("Enclosure ");
  props.setLook(wlEnclosure);
  fdlEnclosure=new FormData();
  fdlEnclosure.left=new FormAttachment(0,0);
  fdlEnclosure.top=new FormAttachment(wSeparator,margin);
  fdlEnclosure.right=new FormAttachment(middle,-margin);
  wlEnclosure.setLayoutData(fdlEnclosure);
  wEnclosure=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wEnclosure);
  wEnclosure.addModifyListener(lsMod);
  fdEnclosure=new FormData();
  fdEnclosure.left=new FormAttachment(middle,0);
  fdEnclosure.top=new FormAttachment(wSeparator,margin);
  fdEnclosure.right=new FormAttachment(100,0);
  wEnclosure.setLayoutData(fdEnclosure);
  wlEscape=new Label(wContentComp,SWT.RIGHT);
  wlEscape.setText("Escape ");
  props.setLook(wlEscape);
  fdlEscape=new FormData();
  fdlEscape.left=new FormAttachment(0,0);
  fdlEscape.top=new FormAttachment(wEnclosure,margin);
  fdlEscape.right=new FormAttachment(middle,-margin);
  wlEscape.setLayoutData(fdlEscape);
  wEscape=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wEscape);
  wEscape.addModifyListener(lsMod);
  fdEscape=new FormData();
  fdEscape.left=new FormAttachment(middle,0);
  fdEscape.top=new FormAttachment(wEnclosure,margin);
  fdEscape.right=new FormAttachment(100,0);
  wEscape.setLayoutData(fdEscape);
  wlHeader=new Label(wContentComp,SWT.RIGHT);
  wlHeader.setText("Header ");
  props.setLook(wlHeader);
  fdlHeader=new FormData();
  fdlHeader.left=new FormAttachment(0,0);
  fdlHeader.top=new FormAttachment(wEscape,margin);
  fdlHeader.right=new FormAttachment(middle,-margin);
  wlHeader.setLayoutData(fdlHeader);
  wHeader=new Button(wContentComp,SWT.CHECK);
  props.setLook(wHeader);
  fdHeader=new FormData();
  fdHeader.left=new FormAttachment(middle,0);
  fdHeader.top=new FormAttachment(wEscape,margin);
  wHeader.setLayoutData(fdHeader);
  wlNrHeader=new Label(wContentComp,SWT.RIGHT);
  wlNrHeader.setText("Number of header lines");
  props.setLook(wlNrHeader);
  fdlNrHeader=new FormData();
  fdlNrHeader.left=new FormAttachment(wHeader,margin);
  fdlNrHeader.top=new FormAttachment(wEscape,margin);
  wlNrHeader.setLayoutData(fdlNrHeader);
  wNrHeader=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wNrHeader.setTextLimit(3);
  props.setLook(wNrHeader);
  wNrHeader.addModifyListener(lsMod);
  fdNrHeader=new FormData();
  fdNrHeader.left=new FormAttachment(wlNrHeader,margin);
  fdNrHeader.top=new FormAttachment(wEscape,margin);
  wNrHeader.setLayoutData(fdNrHeader);
  wlFooter=new Label(wContentComp,SWT.RIGHT);
  wlFooter.setText("Footer ");
  props.setLook(wlFooter);
  fdlFooter=new FormData();
  fdlFooter.left=new FormAttachment(0,0);
  fdlFooter.top=new FormAttachment(wHeader,margin);
  fdlFooter.right=new FormAttachment(middle,-margin);
  wlFooter.setLayoutData(fdlFooter);
  wFooter=new Button(wContentComp,SWT.CHECK);
  props.setLook(wFooter);
  fdFooter=new FormData();
  fdFooter.left=new FormAttachment(middle,0);
  fdFooter.top=new FormAttachment(wHeader,margin);
  wFooter.setLayoutData(fdFooter);
  wlNrFooter=new Label(wContentComp,SWT.RIGHT);
  wlNrFooter.setText("Number of footer lines");
  props.setLook(wlNrFooter);
  fdlNrFooter=new FormData();
  fdlNrFooter.left=new FormAttachment(wFooter,margin);
  fdlNrFooter.top=new FormAttachment(wHeader,margin);
  wlNrFooter.setLayoutData(fdlNrFooter);
  wNrFooter=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wNrFooter.setTextLimit(3);
  props.setLook(wNrFooter);
  wNrFooter.addModifyListener(lsMod);
  fdNrFooter=new FormData();
  fdNrFooter.left=new FormAttachment(wlNrFooter,margin);
  fdNrFooter.top=new FormAttachment(wHeader,margin);
  wNrFooter.setLayoutData(fdNrFooter);
  wlWraps=new Label(wContentComp,SWT.RIGHT);
  wlWraps.setText("Wrapped lines?");
  props.setLook(wlWraps);
  fdlWraps=new FormData();
  fdlWraps.left=new FormAttachment(0,0);
  fdlWraps.top=new FormAttachment(wFooter,margin);
  fdlWraps.right=new FormAttachment(middle,-margin);
  wlWraps.setLayoutData(fdlWraps);
  wWraps=new Button(wContentComp,SWT.CHECK);
  props.setLook(wWraps);
  fdWraps=new FormData();
  fdWraps.left=new FormAttachment(middle,0);
  fdWraps.top=new FormAttachment(wFooter,margin);
  wWraps.setLayoutData(fdWraps);
  wlNrWraps=new Label(wContentComp,SWT.RIGHT);
  wlNrWraps.setText("Number of times wrapped");
  props.setLook(wlNrWraps);
  fdlNrWraps=new FormData();
  fdlNrWraps.left=new FormAttachment(wWraps,margin);
  fdlNrWraps.top=new FormAttachment(wFooter,margin);
  wlNrWraps.setLayoutData(fdlNrWraps);
  wNrWraps=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wNrWraps.setTextLimit(3);
  props.setLook(wNrWraps);
  wNrWraps.addModifyListener(lsMod);
  fdNrWraps=new FormData();
  fdNrWraps.left=new FormAttachment(wlNrWraps,margin);
  fdNrWraps.top=new FormAttachment(wFooter,margin);
  wNrWraps.setLayoutData(fdNrWraps);
  wlLayoutPaged=new Label(wContentComp,SWT.RIGHT);
  wlLayoutPaged.setText("Paged layout (printout)?");
  props.setLook(wlLayoutPaged);
  fdlLayoutPaged=new FormData();
  fdlLayoutPaged.left=new FormAttachment(0,0);
  fdlLayoutPaged.top=new FormAttachment(wWraps,margin);
  fdlLayoutPaged.right=new FormAttachment(middle,-margin);
  wlLayoutPaged.setLayoutData(fdlLayoutPaged);
  wLayoutPaged=new Button(wContentComp,SWT.CHECK);
  props.setLook(wLayoutPaged);
  fdLayoutPaged=new FormData();
  fdLayoutPaged.left=new FormAttachment(middle,0);
  fdLayoutPaged.top=new FormAttachment(wWraps,margin);
  wLayoutPaged.setLayoutData(fdLayoutPaged);
  wlNrLinesPerPage=new Label(wContentComp,SWT.RIGHT);
  wlNrLinesPerPage.setText("Number lines per page");
  props.setLook(wlNrLinesPerPage);
  fdlNrLinesPerPage=new FormData();
  fdlNrLinesPerPage.left=new FormAttachment(wLayoutPaged,margin);
  fdlNrLinesPerPage.top=new FormAttachment(wWraps,margin);
  wlNrLinesPerPage.setLayoutData(fdlNrLinesPerPage);
  wNrLinesPerPage=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wNrLinesPerPage.setTextLimit(3);
  props.setLook(wNrLinesPerPage);
  wNrLinesPerPage.addModifyListener(lsMod);
  fdNrLinesPerPage=new FormData();
  fdNrLinesPerPage.left=new FormAttachment(wlNrLinesPerPage,margin);
  fdNrLinesPerPage.top=new FormAttachment(wWraps,margin);
  wNrLinesPerPage.setLayoutData(fdNrLinesPerPage);
  wlNrLinesDocHeader=new Label(wContentComp,SWT.RIGHT);
  wlNrLinesDocHeader.setText("Document header lines ");
  props.setLook(wlNrLinesDocHeader);
  fdlNrLinesDocHeader=new FormData();
  fdlNrLinesDocHeader.left=new FormAttachment(wNrLinesPerPage,margin);
  fdlNrLinesDocHeader.top=new FormAttachment(wWraps,margin);
  wlNrLinesDocHeader.setLayoutData(fdlNrLinesDocHeader);
  wNrLinesDocHeader=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wNrLinesDocHeader.setTextLimit(3);
  props.setLook(wNrLinesDocHeader);
  wNrLinesDocHeader.addModifyListener(lsMod);
  fdNrLinesDocHeader=new FormData();
  fdNrLinesDocHeader.left=new FormAttachment(wlNrLinesDocHeader,margin);
  fdNrLinesDocHeader.top=new FormAttachment(wWraps,margin);
  wNrLinesDocHeader.setLayoutData(fdNrLinesDocHeader);
  wlZipped=new Label(wContentComp,SWT.RIGHT);
  wlZipped.setText("Zipped ");
  props.setLook(wlZipped);
  fdlZipped=new FormData();
  fdlZipped.left=new FormAttachment(0,0);
  fdlZipped.top=new FormAttachment(wNrLinesDocHeader,margin);
  fdlZipped.right=new FormAttachment(middle,-margin);
  wlZipped.setLayoutData(fdlZipped);
  wZipped=new Button(wContentComp,SWT.CHECK);
  props.setLook(wZipped);
  wZipped.setToolTipText("Only the first entry in the archive is read!");
  fdZipped=new FormData();
  fdZipped.left=new FormAttachment(middle,0);
  fdZipped.top=new FormAttachment(wNrLinesDocHeader,margin);
  fdZipped.right=new FormAttachment(100,0);
  wZipped.setLayoutData(fdZipped);
  wlNoempty=new Label(wContentComp,SWT.RIGHT);
  wlNoempty.setText("No empty rows ");
  props.setLook(wlNoempty);
  fdlNoempty=new FormData();
  fdlNoempty.left=new FormAttachment(0,0);
  fdlNoempty.top=new FormAttachment(wZipped,margin);
  fdlNoempty.right=new FormAttachment(middle,-margin);
  wlNoempty.setLayoutData(fdlNoempty);
  wNoempty=new Button(wContentComp,SWT.CHECK);
  props.setLook(wNoempty);
  wNoempty.setToolTipText("Check this to remove empty lines from the output rows.");
  fdNoempty=new FormData();
  fdNoempty.left=new FormAttachment(middle,0);
  fdNoempty.top=new FormAttachment(wZipped,margin);
  fdNoempty.right=new FormAttachment(100,0);
  wNoempty.setLayoutData(fdNoempty);
  wlInclFilename=new Label(wContentComp,SWT.RIGHT);
  wlInclFilename.setText("Include filename in output? ");
  props.setLook(wlInclFilename);
  fdlInclFilename=new FormData();
  fdlInclFilename.left=new FormAttachment(0,0);
  fdlInclFilename.top=new FormAttachment(wNoempty,margin);
  fdlInclFilename.right=new FormAttachment(middle,-margin);
  wlInclFilename.setLayoutData(fdlInclFilename);
  wInclFilename=new Button(wContentComp,SWT.CHECK);
  props.setLook(wInclFilename);
  wInclFilename.setToolTipText("Check this to add a field (String) containing the filename.");
  fdInclFilename=new FormData();
  fdInclFilename.left=new FormAttachment(middle,0);
  fdInclFilename.top=new FormAttachment(wNoempty,margin);
  wInclFilename.setLayoutData(fdInclFilename);
  wlInclFilenameField=new Label(wContentComp,SWT.LEFT);
  wlInclFilenameField.setText("Filename fieldname ");
  props.setLook(wlInclFilenameField);
  fdlInclFilenameField=new FormData();
  fdlInclFilenameField.left=new FormAttachment(wInclFilename,margin);
  fdlInclFilenameField.top=new FormAttachment(wNoempty,margin);
  wlInclFilenameField.setLayoutData(fdlInclFilenameField);
  wInclFilenameField=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wInclFilenameField);
  wInclFilenameField.addModifyListener(lsMod);
  fdInclFilenameField=new FormData();
  fdInclFilenameField.left=new FormAttachment(wlInclFilenameField,margin);
  fdInclFilenameField.top=new FormAttachment(wNoempty,margin);
  fdInclFilenameField.right=new FormAttachment(100,0);
  wInclFilenameField.setLayoutData(fdInclFilenameField);
  wlInclRownum=new Label(wContentComp,SWT.RIGHT);
  wlInclRownum.setText("Rownum in output? ");
  props.setLook(wlInclRownum);
  fdlInclRownum=new FormData();
  fdlInclRownum.left=new FormAttachment(0,0);
  fdlInclRownum.top=new FormAttachment(wInclFilenameField,margin);
  fdlInclRownum.right=new FormAttachment(middle,-margin);
  wlInclRownum.setLayoutData(fdlInclRownum);
  wInclRownum=new Button(wContentComp,SWT.CHECK);
  props.setLook(wInclRownum);
  wInclRownum.setToolTipText("Check this to add a field (String) containing the filename.");
  fdRownum=new FormData();
  fdRownum.left=new FormAttachment(middle,0);
  fdRownum.top=new FormAttachment(wInclFilenameField,margin);
  wInclRownum.setLayoutData(fdRownum);
  wlInclRownumField=new Label(wContentComp,SWT.RIGHT);
  wlInclRownumField.setText("Rownum fieldname ");
  props.setLook(wlInclRownumField);
  fdlInclRownumField=new FormData();
  fdlInclRownumField.left=new FormAttachment(wInclRownum,margin);
  fdlInclRownumField.top=new FormAttachment(wInclFilenameField,margin);
  wlInclRownumField.setLayoutData(fdlInclRownumField);
  wInclRownumField=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wInclRownumField);
  wInclRownumField.addModifyListener(lsMod);
  fdInclRownumField=new FormData();
  fdInclRownumField.left=new FormAttachment(wlInclRownumField,margin);
  fdInclRownumField.top=new FormAttachment(wInclFilenameField,margin);
  fdInclRownumField.right=new FormAttachment(100,0);
  wInclRownumField.setLayoutData(fdInclRownumField);
  wlFormat=new Label(wContentComp,SWT.RIGHT);
  wlFormat.setText("Format ");
  props.setLook(wlFormat);
  fdlFormat=new FormData();
  fdlFormat.left=new FormAttachment(0,0);
  fdlFormat.top=new FormAttachment(wInclRownumField,margin);
  fdlFormat.right=new FormAttachment(middle,-margin);
  wlFormat.setLayoutData(fdlFormat);
  wFormat=new CCombo(wContentComp,SWT.BORDER | SWT.READ_ONLY);
  wFormat.setText("Format");
  props.setLook(wFormat);
  wFormat.add("DOS");
  wFormat.add("Unix");
  wFormat.select(0);
  wFormat.addModifyListener(lsMod);
  fdFormat=new FormData();
  fdFormat.left=new FormAttachment(middle,0);
  fdFormat.top=new FormAttachment(wInclRownumField,margin);
  fdFormat.right=new FormAttachment(100,0);
  wFormat.setLayoutData(fdFormat);
  wlEncoding=new Label(wContentComp,SWT.RIGHT);
  wlEncoding.setText("Encoding ");
  props.setLook(wlEncoding);
  fdlEncoding=new FormData();
  fdlEncoding.left=new FormAttachment(0,0);
  fdlEncoding.top=new FormAttachment(wFormat,margin);
  fdlEncoding.right=new FormAttachment(middle,-margin);
  wlEncoding.setLayoutData(fdlEncoding);
  wEncoding=new CCombo(wContentComp,SWT.BORDER | SWT.READ_ONLY);
  wEncoding.setEditable(true);
  props.setLook(wEncoding);
  wEncoding.addModifyListener(lsMod);
  fdEncoding=new FormData();
  fdEncoding.left=new FormAttachment(middle,0);
  fdEncoding.top=new FormAttachment(wFormat,margin);
  fdEncoding.right=new FormAttachment(100,0);
  wEncoding.setLayoutData(fdEncoding);
  wEncoding.addFocusListener(new FocusListener(){
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
    }
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      Cursor busy=new Cursor(shell.getDisplay(),SWT.CURSOR_WAIT);
      shell.setCursor(busy);
      setEncodings();
      shell.setCursor(null);
      busy.dispose();
    }
  }
);
  wlLimit=new Label(wContentComp,SWT.RIGHT);
  wlLimit.setText("Limit ");
  props.setLook(wlLimit);
  fdlLimit=new FormData();
  fdlLimit.left=new FormAttachment(0,0);
  fdlLimit.top=new FormAttachment(wEncoding,margin);
  fdlLimit.right=new FormAttachment(middle,-margin);
  wlLimit.setLayoutData(fdlLimit);
  wLimit=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wLimit);
  wLimit.addModifyListener(lsMod);
  fdLimit=new FormData();
  fdLimit.left=new FormAttachment(middle,0);
  fdLimit.top=new FormAttachment(wEncoding,margin);
  fdLimit.right=new FormAttachment(100,0);
  wLimit.setLayoutData(fdLimit);
  wlFilter=new Label(wContentComp,SWT.RIGHT);
  wlFilter.setText("Filter ");
  props.setLook(wlFilter);
  fdlFilter=new FormData();
  fdlFilter.left=new FormAttachment(0,0);
  fdlFilter.top=new FormAttachment(wLimit,margin);
  fdlFilter.right=new FormAttachment(middle,-margin);
  wlFilter.setLayoutData(fdlFilter);
  wFilter=new Button(wContentComp,SWT.CHECK);
  props.setLook(wFilter);
  wFilter.setToolTipText("Filter rows that have a value on a certain (character) position." + Const.CR + "The first position has number 0!");
  fdFilter=new FormData();
  fdFilter.left=new FormAttachment(middle,0);
  fdFilter.top=new FormAttachment(wLimit,margin);
  wFilter.setLayoutData(fdFilter);
  wlFilterPos=new Label(wContentComp,SWT.LEFT);
  wlFilterPos.setText("Pos ");
  props.setLook(wlFilterPos);
  fdlFilterPos=new FormData();
  fdlFilterPos.left=new FormAttachment(wFilter,margin * 2);
  fdlFilterPos.top=new FormAttachment(wLimit,margin);
  wlFilterPos.setLayoutData(fdlFilterPos);
  wFilterPos=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilterPos);
  wFilterPos.addModifyListener(lsMod);
  fdFilterPos=new FormData();
  fdFilterPos.left=new FormAttachment(wlFilterPos,margin * 2);
  fdFilterPos.top=new FormAttachment(wLimit,margin);
  fdFilterPos.right=new FormAttachment(wlFilterPos,margin * 2 + 50);
  wFilterPos.setLayoutData(fdFilterPos);
  wlFilterStr=new Label(wContentComp,SWT.LEFT);
  wlFilterStr.setText("Value ");
  props.setLook(wlFilterStr);
  fdlFilterStr=new FormData();
  fdlFilterStr.left=new FormAttachment(wFilterPos,margin * 2);
  fdlFilterStr.top=new FormAttachment(wLimit,margin);
  wlFilterStr.setLayoutData(fdlFilterStr);
  wFilterStr=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wFilterStr);
  wFilterStr.addModifyListener(lsMod);
  fdFilterStr=new FormData();
  fdFilterStr.left=new FormAttachment(wlFilterStr,margin);
  fdFilterStr.top=new FormAttachment(wLimit,margin);
  fdFilterStr.right=new FormAttachment(wlFilterStr,200);
  wFilterStr.setLayoutData(fdFilterStr);
  wlFilterLast=new Label(wContentComp,SWT.RIGHT);
  wlFilterLast.setText("Stop on filter? ");
  props.setLook(wlFilterLast);
  fdlFilterLast=new FormData();
  fdlFilterLast.left=new FormAttachment(wFilterStr,margin);
  fdlFilterLast.top=new FormAttachment(wLimit,margin);
  wlFilterLast.setLayoutData(fdlFilterLast);
  wFilterLast=new Button(wContentComp,SWT.CHECK);
  props.setLook(wFilterLast);
  wFilterLast.setToolTipText("Check this to stop processing when the filter string is encountered in the specified position");
  fdFilterLast=new FormData();
  fdFilterLast.left=new FormAttachment(wlFilterLast,margin);
  fdFilterLast.top=new FormAttachment(wLimit,margin);
  wFilterLast.setLayoutData(fdFilterLast);
  wlErrorIgnored=new Label(wContentComp,SWT.RIGHT);
  wlErrorIgnored.setText("Ignore errors? ");
  props.setLook(wlErrorIgnored);
  fdlErrorIgnored=new FormData();
  fdlErrorIgnored.left=new FormAttachment(0,0);
  fdlErrorIgnored.top=new FormAttachment(wFilterStr,margin);
  fdlErrorIgnored.right=new FormAttachment(middle,-margin);
  wlErrorIgnored.setLayoutData(fdlErrorIgnored);
  wErrorIgnored=new Button(wContentComp,SWT.CHECK);
  props.setLook(wErrorIgnored);
  wErrorIgnored.setToolTipText("Ignore parsing errors that occur, optionally log information about the errors.");
  fdErrorIgnored=new FormData();
  fdErrorIgnored.left=new FormAttachment(middle,0);
  fdErrorIgnored.top=new FormAttachment(wFilterStr,margin);
  wErrorIgnored.setLayoutData(fdErrorIgnored);
  wlErrorCount=new Label(wContentComp,SWT.RIGHT);
  wlErrorCount.setText("Error count fieldname ");
  props.setLook(wlErrorCount);
  fdlErrorCount=new FormData();
  fdlErrorCount.left=new FormAttachment(0,0);
  fdlErrorCount.top=new FormAttachment(wErrorIgnored,margin);
  fdlErrorCount.right=new FormAttachment(middle,-margin);
  wlErrorCount.setLayoutData(fdlErrorCount);
  wErrorCount=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wErrorCount);
  wErrorCount.addModifyListener(lsMod);
  fdErrorCount=new FormData();
  fdErrorCount.left=new FormAttachment(middle,0);
  fdErrorCount.top=new FormAttachment(wErrorIgnored,margin);
  fdErrorCount.right=new FormAttachment(100,0);
  wErrorCount.setLayoutData(fdErrorCount);
  wlErrorFields=new Label(wContentComp,SWT.RIGHT);
  wlErrorFields.setText("Error fields fieldname");
  props.setLook(wlErrorFields);
  fdlErrorFields=new FormData();
  fdlErrorFields.left=new FormAttachment(0,0);
  fdlErrorFields.top=new FormAttachment(wErrorCount,margin);
  fdlErrorFields.right=new FormAttachment(middle,-margin);
  wlErrorFields.setLayoutData(fdlErrorFields);
  wErrorFields=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wErrorFields);
  wErrorFields.addModifyListener(lsMod);
  fdErrorFields=new FormData();
  fdErrorFields.left=new FormAttachment(middle,0);
  fdErrorFields.top=new FormAttachment(wErrorCount,margin);
  fdErrorFields.right=new FormAttachment(100,0);
  wErrorFields.setLayoutData(fdErrorFields);
  wlErrorText=new Label(wContentComp,SWT.RIGHT);
  wlErrorText.setText("Error text fieldname");
  props.setLook(wlErrorText);
  fdlErrorText=new FormData();
  fdlErrorText.left=new FormAttachment(0,0);
  fdlErrorText.top=new FormAttachment(wErrorFields,margin);
  fdlErrorText.right=new FormAttachment(middle,-margin);
  wlErrorText.setLayoutData(fdlErrorText);
  wErrorText=new Text(wContentComp,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  props.setLook(wErrorText);
  wErrorText.addModifyListener(lsMod);
  fdErrorText=new FormData();
  fdErrorText.left=new FormAttachment(middle,0);
  fdErrorText.top=new FormAttachment(wErrorFields,margin);
  fdErrorText.right=new FormAttachment(100,0);
  wErrorText.setLayoutData(fdErrorText);
  fdContentComp=new FormData();
  fdContentComp.left=new FormAttachment(0,0);
  fdContentComp.top=new FormAttachment(0,0);
  fdContentComp.right=new FormAttachment(100,0);
  fdContentComp.bottom=new FormAttachment(100,0);
  wContentComp.setLayoutData(fdContentComp);
  wContentComp.layout();
  wContentTab.setControl(wContentComp);
  wFieldsTab=new CTabItem(wTabFolder,SWT.NONE);
  wFieldsTab.setText("Fields");
  FormLayout fieldsLayout=new FormLayout();
  fieldsLayout.marginWidth=Const.FORM_MARGIN;
  fieldsLayout.marginHeight=Const.FORM_MARGIN;
  wFieldsComp=new Composite(wTabFolder,SWT.NONE);
  wFieldsComp.setLayout(fieldsLayout);
  props.setLook(wFieldsComp);
  wGet=new Button(wFieldsComp,SWT.PUSH);
  wGet.setText(" &Get fields ");
  fdGet=new FormData();
  fdGet.left=new FormAttachment(50,0);
  fdGet.bottom=new FormAttachment(100,0);
  wGet.setLayoutData(fdGet);
  final int FieldsRows=input.getInputFields().length;
  String formats[]=Const.getConversionFormats();
  ColumnInfo[] colinf=new ColumnInfo[]{new ColumnInfo("Name",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Type",ColumnInfo.COLUMN_TYPE_CCOMBO,Value.getTypes(),true),new ColumnInfo("Format",ColumnInfo.COLUMN_TYPE_CCOMBO,formats),new ColumnInfo("Position",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Length",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Precision",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Currency",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Decimal",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Group",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Null if",ColumnInfo.COLUMN_TYPE_TEXT,false),new ColumnInfo("Trim type",ColumnInfo.COLUMN_TYPE_CCOMBO,TextFileInputMeta.trimTypeDesc,true),new ColumnInfo("Repeat",ColumnInfo.COLUMN_TYPE_CCOMBO,new String[]{"Y","N"},true)};
  colinf[11].setToolTip("set this field to Y if you want to repeat values when the next are empty");
  wFields=new TableView(wFieldsComp,SWT.FULL_SELECTION | SWT.MULTI,colinf,FieldsRows,lsMod,props);
  fdFields=new FormData();
  fdFields.left=new FormAttachment(0,0);
  fdFields.top=new FormAttachment(0,0);
  fdFields.right=new FormAttachment(100,0);
  fdFields.bottom=new FormAttachment(wGet,-margin);
  wFields.setLayoutData(fdFields);
  fdFieldsComp=new FormData();
  fdFieldsComp.left=new FormAttachment(0,0);
  fdFieldsComp.top=new FormAttachment(0,0);
  fdFieldsComp.right=new FormAttachment(100,0);
  fdFieldsComp.bottom=new FormAttachment(100,0);
  wFieldsComp.setLayoutData(fdFieldsComp);
  wFieldsComp.layout();
  wFieldsTab.setControl(wFieldsComp);
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(" &OK ");
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(STRING_PREVIEW_ROWS);
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(" &Cancel ");
  setButtonPositions(new Button[]{wOK,wPreview,wCancel},margin,wTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsFirst=new Listener(){
    public void handleEvent(    Event e){
      first(false);
    }
  }
;
  lsFirstHeader=new Listener(){
    public void handleEvent(    Event e){
      first(true);
    }
  }
;
  lsGet=new Listener(){
    public void handleEvent(    Event e){
      get();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wFirst.addListener(SWT.Selection,lsFirst);
  wFirstHeader.addListener(SWT.Selection,lsFirstHeader);
  wGet.addListener(SWT.Selection,lsGet);
  wPreview.addListener(SWT.Selection,lsPreview);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wSeparator.addSelectionListener(lsDef);
  wLimit.addSelectionListener(lsDef);
  wInclRownumField.addSelectionListener(lsDef);
  wInclFilenameField.addSelectionListener(lsDef);
  wNrHeader.addSelectionListener(lsDef);
  wNrFooter.addSelectionListener(lsDef);
  wNrWraps.addSelectionListener(lsDef);
  SelectionAdapter selA=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      wFilenameList.add(new String[]{wFilename.getText(),wFilemask.getText()});
      wFilename.setText("");
      wFilemask.setText("");
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
      wFilenameList.optWidth(true);
    }
  }
;
  wbaFilename.addSelectionListener(selA);
  wFilename.addSelectionListener(selA);
  wbdFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx[]=wFilenameList.getSelectionIndices();
      wFilenameList.remove(idx);
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbeFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx=wFilenameList.getSelectionIndex();
      if (idx >= 0) {
        String string[]=wFilenameList.getItem(idx);
        wFilename.setText(string[0]);
        wFilemask.setText(string[1]);
        wFilenameList.remove(idx);
      }
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbShowFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TextFileInputMeta tfii=new TextFileInputMeta();
      getInfo(tfii);
      String files[]=tfii.getFiles();
      if (files != null && files.length > 0) {
        EnterSelectionDialog esd=new EnterSelectionDialog(shell,props,files,"Files read","Files read:");
        esd.setViewOnly();
        esd.open();
      }
 else {
        MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
        mb.setMessage("No files found!  Please check the filename/directory and regular expression options.");
        mb.setText("ERROR");
        mb.open();
      }
    }
  }
);
  wbSeparator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      wSeparator.insert("\t");
    }
  }
);
  SelectionAdapter lsFlags=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setFlags();
    }
  }
;
  wInclFilename.addSelectionListener(lsFlags);
  wInclRownum.addSelectionListener(lsFlags);
  wFilter.addSelectionListener(lsFlags);
  wErrorIgnored.addSelectionListener(lsFlags);
  wHeader.addSelectionListener(lsFlags);
  wFooter.addSelectionListener(lsFlags);
  wWraps.addSelectionListener(lsFlags);
  wLayoutPaged.addSelectionListener(lsFlags);
  wFilename.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFilename.setToolTipText(Const.replEnv(wFilename.getText()));
    }
  }
);
  wbvFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Properties sp=System.getProperties();
      System.out.println("sp.keySet().size()=" + sp.keySet().size());
      ArrayList keys=new ArrayList(sp.keySet());
      Collections.sort(keys);
      int size=keys.size();
      String key[]=new String[size];
      String val[]=new String[size];
      String str[]=new String[size];
      for (int i=0; i < keys.size(); i++) {
        key[i]=(String)keys.get(i);
        val[i]=sp.getProperty(key[i]);
        str[i]=key[i] + "  [" + val[i]+ "]";
      }
      EnterSelectionDialog esd=new EnterSelectionDialog(shell,props,str,"Select an Environment Variable","Select an Environment Variable");
      if (esd.open() != null) {
        int nr=esd.getSelectionNr();
        wFilename.insert("%%" + key[nr] + "%%");
        wFilename.setToolTipText(Const.replEnv(wFilename.getText()));
      }
    }
  }
);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (wFilemask.getText() != null && wFilemask.getText().length() > 0) {
        DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
        if (wFilename.getText() != null) {
          String fpath=Const.replEnv(wFilename.getText());
          dialog.setFilterPath(fpath);
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath();
          wFilename.setText(str);
        }
      }
 else {
        FileDialog dialog=new FileDialog(shell,SWT.OPEN);
        if (wZipped.getSelection()) {
          dialog.setFilterExtensions(new String[]{"*.zip","*.txt;*.csv","*.csv","*.txt","*"});
        }
 else {
          dialog.setFilterExtensions(new String[]{"*.txt;*.csv","*.csv","*.txt","*"});
        }
        if (wFilename.getText() != null) {
          String fname=Const.replEnv(wFilename.getText());
          dialog.setFileName(fname);
        }
        if (wZipped.getSelection()) {
          dialog.setFilterNames(new String[]{"Zip archives","Text and CSV files","Comma Seperated Values","Text files","All files"});
        }
 else {
          dialog.setFilterNames(new String[]{"Text and CSV files","Comma Seperated Values","Text files","All files"});
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName();
          wFilename.setText(str);
        }
      }
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  setSize();
  getData(input);
  input.setChanged(changed);
  wFields.optWidth(true);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
