{
  Object next=null;
  if (meta.isDatabaseUsed()) {
    try {
      next=data.getDb().getNextSequenceValue(meta.getSchemaName(),meta.getSequenceName(),meta.getValuename());
    }
 catch (    KettleDatabaseException dbe) {
      throw new KettleStepException(Messages.getString("AddSequence.Exception.ErrorReadingSequence",meta.getSequenceName()),dbe);
    }
  }
 else   if (meta.isCounterUsed()) {
    Long prev=(Long)getTransMeta().getCounters().get(data.getLookup());
    long nval=prev.longValue() + meta.getIncrementBy();
    if (meta.getIncrementBy() > 0 && meta.getMaxValue() > meta.getStartAt() && nval > meta.getMaxValue())     nval=meta.getStartAt();
    if (meta.getIncrementBy() < 0 && meta.getMaxValue() < meta.getStartAt() && nval < meta.getMaxValue())     nval=meta.getStartAt();
    getTransMeta().getCounters().put(data.getLookup(),new Long(nval));
    next=prev;
  }
 else {
    throw new KettleStepException(Messages.getString("AddSequence.Exception.NoSpecifiedMethod"));
  }
  if (next != null) {
    return RowDataUtil.addValueData(inputRowData,next);
  }
 else {
    throw new KettleStepException(Messages.getString("AddSequence.Exception.CouldNotFindNextValueForSequence") + meta.getValuename());
  }
}
