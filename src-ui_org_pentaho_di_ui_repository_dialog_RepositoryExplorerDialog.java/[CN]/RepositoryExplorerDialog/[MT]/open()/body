{
  debug="opening repository explorer";
  try {
    debug="open new independent shell";
    Shell parent=getParent();
    Display display=parent.getDisplay();
    shell=new Shell(display,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
    props.setLook(shell);
    shell.setImage(GUIResource.getInstance().getImageFolderConnections());
    shell.setText(Messages.getString("RepositoryExplorerDialog.Title") + rep.getName() + "]");
    FormLayout formLayout=new FormLayout();
    formLayout.marginWidth=Const.FORM_MARGIN;
    formLayout.marginHeight=Const.FORM_MARGIN;
    shell.setLayout(formLayout);
    Menu mBar=new Menu(shell,SWT.BAR);
    shell.setMenuBar(mBar);
    MenuItem mFile=new MenuItem(mBar,SWT.CASCADE);
    mFile.setText(Messages.getString("RepositoryExplorerDialog.Menu.File"));
    Menu msFile=new Menu(shell,SWT.DROP_DOWN);
    mFile.setMenu(msFile);
    MenuItem miFileExport=new MenuItem(msFile,SWT.CASCADE);
    miFileExport.setText(Messages.getString("RepositoryExplorerDialog.Menu.FileExportAll"));
    miFileExport.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        exportAll(null);
      }
    }
);
    MenuItem miFileImport=new MenuItem(msFile,SWT.CASCADE);
    miFileImport.setText(Messages.getString("RepositoryExplorerDialog.Menu.FileImportAll"));
    miFileImport.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        importAll();
      }
    }
);
    new MenuItem(msFile,SWT.SEPARATOR);
    MenuItem miFileClose=new MenuItem(msFile,SWT.CASCADE);
    miFileClose.setText(Messages.getString("RepositoryExplorerDialog.Menu.FileClose"));
    miFileClose.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        commit();
      }
    }
);
    ToolBar treeTb=new ToolBar(shell,SWT.HORIZONTAL | SWT.FLAT);
    expandAll=new ToolItem(treeTb,SWT.PUSH);
    expandAll.setImage(GUIResource.getInstance().getImageExpandAll());
    collapseAll=new ToolItem(treeTb,SWT.PUSH);
    collapseAll.setImage(GUIResource.getInstance().getImageCollapseAll());
    fdexpandAll=new FormData();
    fdexpandAll.right=new FormAttachment(100,-20);
    fdexpandAll.top=new FormAttachment(0,0);
    treeTb.setLayoutData(fdexpandAll);
    wTree=new Tree(shell,SWT.MULTI | SWT.BORDER);
    wTree.setHeaderVisible(true);
    props.setLook(wTree);
    nameColumn=new TreeColumn(wTree,SWT.LEFT);
    nameColumn.setText(Messages.getString("RepositoryExplorerDialog.Column.Name"));
    nameColumn.setWidth(350);
    nameColumn.setAlignment(10);
    nameColumn.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        setSort(0);
      }
    }
);
    typeColumn=new TreeColumn(wTree,SWT.LEFT);
    typeColumn.setText(Messages.getString("RepositoryExplorerDialog.Column.Type"));
    typeColumn.setWidth(100);
    typeColumn.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        setSort(1);
      }
    }
);
    userColumn=new TreeColumn(wTree,SWT.LEFT);
    userColumn.setText(Messages.getString("RepositoryExplorerDialog.Column.User"));
    userColumn.setWidth(100);
    userColumn.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        setSort(2);
      }
    }
);
    changedColumn=new TreeColumn(wTree,SWT.LEFT);
    changedColumn.setText(Messages.getString("RepositoryExplorerDialog.Column.Changed"));
    changedColumn.setWidth(120);
    changedColumn.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        setSort(3);
      }
    }
);
    descriptionColumn=new TreeColumn(wTree,SWT.LEFT);
    descriptionColumn.setText(Messages.getString("RepositoryExplorerDialog.Column.Description"));
    descriptionColumn.setWidth(120);
    descriptionColumn.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        setSort(4);
      }
    }
);
    TreeMemory.addTreeListener(wTree,STRING_REPOSITORY_EXPLORER_TREE_NAME);
    wCommit=new Button(shell,SWT.PUSH);
    wCommit.setText(Messages.getString("RepositoryExplorerDialog.Button.Commit"));
    wRollback=new Button(shell,SWT.PUSH);
    wRollback.setText(Messages.getString("RepositoryExplorerDialog.Button.Rollback"));
    FormData fdTree=new FormData();
    int margin=10;
    fdTree.left=new FormAttachment(0,0);
    fdTree.top=new FormAttachment(0,0);
    fdTree.right=new FormAttachment(100,0);
    fdTree.bottom=new FormAttachment(100,-50);
    wTree.setLayoutData(fdTree);
    BaseStepDialog.positionBottomButtons(shell,new Button[]{wCommit,wRollback},margin,null);
    wCommit.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        commit();
      }
    }
);
    wRollback.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event e){
        rollback();
      }
    }
);
    wTree.addMouseListener(new MouseAdapter(){
      public void mouseDown(      MouseEvent e){
        if (e.button == 3) {
          setTreeMenu();
        }
      }
      public void mouseDoubleClick(      MouseEvent e){
        if (e.button == 1) {
          doDoubleClick();
        }
      }
    }
);
    wTree.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent e){
        if (e.keyCode == SWT.F2) {
          if (!userinfo.isReadonly())           renameInTree();
        }
        if (e.keyCode == SWT.F5) {
          refreshTree();
        }
      }
    }
);
    expandAll.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        expandAllItems(wTree.getItems(),true);
      }
    }
);
    collapseAll.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        expandAllItems(wTree.getItems(),false);
      }
    }
);
    Transfer[] ttypes=new Transfer[]{TextTransfer.getInstance()};
    DragSource ddSource=new DragSource(wTree,DND.DROP_MOVE);
    ddSource.setTransfer(ttypes);
    ddSource.addDragListener(new DragSourceListener(){
      public void dragStart(      DragSourceEvent event){
        debug="drag start";
        event.doit=true;
      }
      public void dragSetData(      DragSourceEvent event){
        debug="drag set data";
        event.data="";
        event.doit=false;
        TreeItem ti[]=wTree.getSelection();
        if (ti.length >= 1) {
          int cat=getItemCategory(ti[0]);
          if (cat == ITEM_CATEGORY_TRANSFORMATION) {
            debug="drag set: drag around transformation";
            RepositoryDirectory repdir=getDirectory(ti[0]);
            if (repdir != null) {
              String xml=XMLHandler.getXMLHeader();
              xml+="<dragdrop>" + Const.CR;
              xml+="  " + XMLHandler.addTagValue("directory",repdir.getPath());
              xml+="  " + XMLHandler.addTagValue("transformation",ti[0].getText());
              xml+="</dragdrop>" + Const.CR;
              event.data=xml;
              event.doit=true;
            }
          }
 else           if (cat == ITEM_CATEGORY_JOB) {
            debug="drag set: drag around job";
            RepositoryDirectory repdir=getDirectory(ti[0]);
            if (repdir != null) {
              String xml=XMLHandler.getXMLHeader();
              xml+="<dragdrop>" + Const.CR;
              xml+="  " + XMLHandler.addTagValue("directory",repdir.getPath());
              xml+="  " + XMLHandler.addTagValue("job",ti[0].getText());
              xml+="</dragdrop>" + Const.CR;
              event.data=xml;
              event.doit=true;
            }
          }
 else {
            debug="do nothing";
            String xml=XMLHandler.getXMLHeader();
            xml+="<dragdrop>" + Const.CR;
            xml+="</dragdrop>" + Const.CR;
            event.data=xml;
            event.doit=true;
          }
        }
      }
      public void dragFinished(      DragSourceEvent event){
      }
    }
);
    DropTarget ddTarget=new DropTarget(wTree,DND.DROP_MOVE);
    ddTarget.setTransfer(ttypes);
    ddTarget.addDropListener(new DropTargetListener(){
      public void dragEnter(      DropTargetEvent event){
      }
      public void dragLeave(      DropTargetEvent event){
        debug="drag leave";
      }
      public void dragOperationChanged(      DropTargetEvent event){
      }
      public void dragOver(      DropTargetEvent event){
        debug="drag over";
      }
      public void drop(      DropTargetEvent event){
        try {
          debug="Drop item in tree";
          if (event.data == null) {
            event.detail=DND.DROP_NONE;
            return;
          }
          TreeItem ti=(TreeItem)event.item;
          if (ti != null) {
            debug="Get category";
            int category=getItemCategory(ti);
            if (category == ITEM_CATEGORY_TRANSFORMATION_DIRECTORY || category == ITEM_CATEGORY_TRANSFORMATION) {
              debug="Get directory";
              RepositoryDirectory repdir=getDirectory(ti);
              if (repdir != null) {
                event.feedback=DND.FEEDBACK_SELECT | DND.FEEDBACK_SCROLL;
                if (moveTransformation((String)event.data,repdir)) {
                  refreshTree();
                }
 else {
                  MessageBox mb=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
                  mb.setMessage(Messages.getString("RepositoryExplorerDialog.Trans.Move.UnableToMove.Message"));
                  mb.setText(Messages.getString("RepositoryExplorerDialog.Trans.Move.UnableToMove.Title"));
                  mb.open();
                }
              }
            }
 else             if (category == ITEM_CATEGORY_JOB_DIRECTORY || category == ITEM_CATEGORY_JOB) {
              debug="Get directory";
              RepositoryDirectory repdir=getDirectory(ti);
              if (repdir != null) {
                event.feedback=DND.FEEDBACK_SELECT | DND.FEEDBACK_SCROLL;
                if (moveJob((String)event.data,repdir)) {
                  refreshTree();
                }
 else {
                  MessageBox mb=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
                  mb.setMessage(Messages.getString("RepositoryExplorerDialog.Job.Move.UnableToMove.Message"));
                  mb.setText(Messages.getString("RepositoryExplorerDialog.Job.Move.UnableToMove.Title"));
                  mb.open();
                }
              }
            }
 else {
              MessageBox mb=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
              mb.setMessage(Messages.getString("RepositoryExplorerDialog.Trans.Move.SorryOneItemAtATime.Message"));
              mb.setText(Messages.getString("RepositoryExplorerDialog.Trans.Move.SorryOneItemAtATime.Title"));
              mb.open();
            }
          }
        }
 catch (        Throwable e) {
          new ErrorDialog(shell,Messages.getString("RepositoryExplorerDialog.Drop.UnexpectedError.Title"),Messages.getString("RepositoryExplorerDialog.Drop.UnexpectedError.Message1") + debug + "]"+ Const.CR+ Messages.getString("RepositoryExplorerDialog.Drop.UnexpectedError.Message2"),e);
        }
      }
      public void dropAccept(      DropTargetEvent event){
        debug="drop accept";
      }
    }
);
    shell.addShellListener(new ShellAdapter(){
      public void shellClosed(      ShellEvent e){
        checkRollback(e);
      }
    }
);
    debug="set screen size and position";
    BaseStepDialog.setSize(shell,400,480,true);
    setSort(0);
    shell.open();
    while (!shell.isDisposed()) {
      if (!display.readAndDispatch())       display.sleep();
    }
  }
 catch (  Throwable e) {
    new ErrorDialog(shell,Messages.getString("RepositoryExplorerDialog.Main.UnexpectedError.Title"),Messages.getString("RepositoryExplorerDialog.Main.UnexpectedError.Message1") + debug + "]"+ Const.CR+ Messages.getString("RepositoryExplorerDialog.Main.UnexpectedError.Message2")+ Const.CR+ Messages.getString("RepositoryExplorerDialog.Main.UnexpectedError.Message3"),e);
  }
  return lastOpened;
}
