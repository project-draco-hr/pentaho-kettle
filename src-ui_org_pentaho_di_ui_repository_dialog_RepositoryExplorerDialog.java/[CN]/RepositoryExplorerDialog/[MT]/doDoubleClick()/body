{
  final TreeItem tisel[]=wTree.getSelection();
  if (tisel.length == 1 || sameCategory(tisel)) {
    final TreeItem ti=tisel[0];
    final int level=ConstUI.getTreeLevel(ti);
    final String path[]=ConstUI.getTreeStrings(ti);
    final String item=ti.getText();
    int cat=getItemCategory(ti);
switch (cat) {
case ITEM_CATEGORY_PARTITION:
{
        if (!userinfo.isReadonly())         editPartitionSchema(item);
      }
    break;
case ITEM_CATEGORY_CLUSTER:
{
    if (!userinfo.isReadonly())     editCluster(item);
  }
break;
case ITEM_CATEGORY_TRANSFORMATION:
if (level >= 2) {
String realpath[]=new String[level - 2];
for (int i=0; i < realpath.length; i++) realpath[i]=path[i + 2];
final RepositoryDirectory repdir=rep.getDirectoryTree().findDirectory(realpath);
openTransformation(item,repdir);
}
break;
case ITEM_CATEGORY_JOB_DIRECTORY:
case ITEM_CATEGORY_TRANSFORMATION_DIRECTORY:
if (level >= 2) {
String realpath[]=new String[level - 1];
for (int i=0; i < realpath.length; i++) realpath[i]=path[i + 2];
final RepositoryDirectory repdir=rep.getDirectoryTree().findDirectory(realpath);
if (!userinfo.isReadonly()) createDirectory(ti,repdir);
}
break;
case ITEM_CATEGORY_JOB:
{
String realpath[]=new String[level - 2];
for (int i=0; i < realpath.length; i++) realpath[i]=path[i + 2];
final RepositoryDirectory repdir=rep.getDirectoryTree().findDirectory(realpath);
openJob(item,repdir);
}
break;
default :
}
}
}
