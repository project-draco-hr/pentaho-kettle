{
  try {
    UserInfo userinfo=securityProvider.getUserInfo();
    wTree.removeAll();
    objectMap.clear();
    directoryTree=rep.loadRepositoryDirectoryTree();
    TreeItem tiTree=new TreeItem(wTree,SWT.NONE);
    tiTree.setImage(GUIResource.getInstance().getImageFolderConnections());
    tiTree.setText(rep.getName() == null ? "-" : rep.getName());
    TreeItem tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setImage(GUIResource.getInstance().getImageBol());
    tiParent.setText(STRING_DATABASES);
    if (!!readonly)     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newDatabase();
      }
    }
);
    String names[]=rep.getDatabaseNames(includeDeleted);
    for (int i=0; i < names.length; i++) {
      TreeItem newDB=new TreeItem(tiParent,SWT.NONE);
      newDB.setImage(GUIResource.getInstance().getImageConnection());
      newDB.setText(Const.NVL(names[i],""));
      if (!readonly)       TreeItemAccelerator.addDoubleClick(newDB,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editDatabase(treeItem.getText());
        }
      }
);
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setImage(GUIResource.getInstance().getImageBol());
    tiParent.setText(STRING_PARTITIONS);
    if (!readonly)     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newPartitionSchema();
      }
    }
);
    names=rep.getPartitionSchemaNames(includeDeleted);
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setImage(GUIResource.getInstance().getImageFolderConnections());
      newItem.setText(Const.NVL(names[i],""));
      if (!readonly)       TreeItemAccelerator.addDoubleClick(newItem,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editPartitionSchema(treeItem.getText());
        }
      }
);
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setImage(GUIResource.getInstance().getImageBol());
    tiParent.setText(STRING_SLAVES);
    if (!readonly)     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newSlaveServer();
      }
    }
);
    names=rep.getSlaveNames(includeDeleted);
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setImage(GUIResource.getInstance().getImageSlave());
      newItem.setText(Const.NVL(names[i],""));
      if (!readonly)       TreeItemAccelerator.addDoubleClick(newItem,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editSlaveServer(treeItem.getText());
        }
      }
);
    }
    tiParent=new TreeItem(tiTree,SWT.NONE);
    tiParent.setImage(GUIResource.getInstance().getImageBol());
    tiParent.setText(STRING_CLUSTERS);
    if (!readonly)     TreeItemAccelerator.addDoubleClick(tiParent,new DoubleClickInterface(){
      public void action(      TreeItem treeItem){
        newCluster();
      }
    }
);
    names=rep.getClusterNames(includeDeleted);
    for (int i=0; i < names.length; i++) {
      TreeItem newItem=new TreeItem(tiParent,SWT.NONE);
      newItem.setImage(GUIResource.getInstance().getImageCluster());
      newItem.setText(Const.NVL(names[i],""));
      if (!readonly)       TreeItemAccelerator.addDoubleClick(newItem,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          editCluster(treeItem.getText());
        }
      }
);
    }
    if (!capabilities.supportsUsers() || userinfo.useTransformations()) {
      TreeItem tiTrans=new TreeItem(tiTree,SWT.NONE);
      tiTrans.setImage(GUIResource.getInstance().getImageTransGraph());
      tiTrans.setText(STRING_TRANSFORMATIONS);
      TreeItem newCat=new TreeItem(tiTrans,SWT.NONE);
      newCat.setImage(GUIResource.getInstance().getImageLogoSmall());
      Color dircolor=GUIResource.getInstance().getColorDirectory();
      RepositoryDirectoryUI.getTreeWithNames(newCat,rep,objectMap,dircolor,sortColumn,includeDeleted,ascending,true,false,directoryTree,null,null);
    }
    if (!capabilities.supportsUsers() || userinfo.useJobs()) {
      TreeItem tiJob=new TreeItem(tiTree,SWT.NONE);
      tiJob.setImage(GUIResource.getInstance().getImageJobGraph());
      tiJob.setText(STRING_JOBS);
      TreeItem newJob=new TreeItem(tiJob,SWT.NONE);
      newJob.setImage(GUIResource.getInstance().getImageLogoSmall());
      Color dircolor=GUIResource.getInstance().getColorDirectory();
      RepositoryDirectoryUI.getTreeWithNames(newJob,rep,objectMap,dircolor,sortColumn,includeDeleted,ascending,false,true,directoryTree,null,null);
    }
    if (capabilities.supportsUsers() && capabilities.managesUsers()) {
      TreeItem tiUser=new TreeItem(tiTree,SWT.NONE);
      tiUser.setImage(GUIResource.getInstance().getImageBol());
      tiUser.setText(STRING_USERS);
      if (!readonly)       TreeItemAccelerator.addDoubleClick(tiUser,new DoubleClickInterface(){
        public void action(        TreeItem treeItem){
          newUser();
        }
      }
);
      String users[]=securityManager.getUserLogins();
      for (int i=0; i < users.length; i++) {
        if (userinfo.isAdministrator() || userinfo.getLogin().equalsIgnoreCase(users[i])) {
          if (users[i] != null) {
            TreeItem newUser=new TreeItem(tiUser,SWT.NONE);
            newUser.setImage(GUIResource.getInstance().getImageUser());
            newUser.setText(users[i]);
            if (!readonly)             TreeItemAccelerator.addDoubleClick(newUser,new DoubleClickInterface(){
              public void action(              TreeItem treeItem){
                editUser(treeItem.getText());
              }
            }
);
          }
        }
      }
      if (userinfo.isAdministrator()) {
        TreeItem tiProf=new TreeItem(tiTree,SWT.NONE);
        tiProf.setImage(GUIResource.getInstance().getImageBol());
        tiProf.setText(STRING_PROFILES);
        TreeItemAccelerator.addDoubleClick(tiProf,new DoubleClickInterface(){
          public void action(          TreeItem treeItem){
            newProfile();
          }
        }
);
        String prof[]=securityManager.getProfiles();
        for (int i=0; i < prof.length; i++) {
          TreeItem newProf=new TreeItem(tiProf,SWT.NONE);
          newProf.setImage(GUIResource.getInstance().getImageProfil());
          newProf.setText(prof[i]);
          TreeItemAccelerator.addDoubleClick(newProf,new DoubleClickInterface(){
            public void action(            TreeItem treeItem){
              editProfile(treeItem.getText());
            }
          }
);
        }
      }
    }
    TreeMemory.getInstance().storeExpanded(STRING_REPOSITORY_EXPLORER_TREE_NAME,new String[]{tiTree.getText()},true);
    TreeMemory.setExpandedFromMemory(wTree,STRING_REPOSITORY_EXPLORER_TREE_NAME);
  }
 catch (  KettleException dbe) {
    new ErrorDialog(shell,BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Dialog.ErrorRefreshingTree.Title"),BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Dialog.ErrorRefreshingTree.Message"),dbe);
  }
}
