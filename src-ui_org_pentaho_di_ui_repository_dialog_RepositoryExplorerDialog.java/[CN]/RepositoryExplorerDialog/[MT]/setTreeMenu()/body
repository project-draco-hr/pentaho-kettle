{
  Menu mTree=new Menu(shell,SWT.POP_UP);
  final TreeItem tisel[]=wTree.getSelection();
  if (tisel.length == 1 || sameCategory(tisel)) {
    final TreeItem ti=tisel[0];
    final int level=ConstUI.getTreeLevel(ti);
    final String path[]=ConstUI.getTreeStrings(ti);
    final String fullPath=ConstUI.getTreePath(ti,0);
    final String item=ti.getText();
    final RepositoryElementMetaInterface repositoryObject=objectMap.get(fullPath);
    int cat=getItemCategory(ti);
switch (cat) {
case ITEM_CATEGORY_ROOT:
{
        MenuItem miExp=new MenuItem(mTree,SWT.PUSH);
        miExp.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportAll"));
        SelectionAdapter lsExp=new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            exportAll(directoryTree);
          }
        }
;
        miExp.addSelectionListener(lsExp);
        MenuItem miImp=new MenuItem(mTree,SWT.PUSH);
        miImp.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ImportAll"));
        SelectionAdapter lsImp=new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            importAll();
          }
        }
;
        miImp.addSelectionListener(lsImp);
        miImp.setEnabled(!readonly);
        MenuItem miTrans=new MenuItem(mTree,SWT.PUSH);
        miTrans.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportTrans"));
        SelectionAdapter lsTrans=new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            exportTransformations(directoryTree);
          }
        }
;
        miTrans.addSelectionListener(lsTrans);
        MenuItem miJobs=new MenuItem(mTree,SWT.PUSH);
        miJobs.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportJob"));
        SelectionAdapter lsJobs=new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            exportJobs(directoryTree);
          }
        }
;
        miJobs.addSelectionListener(lsJobs);
      }
    break;
case ITEM_CATEGORY_DATABASES_ROOT:
{
    MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
    miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.ConnectionsRoot.New"));
    SelectionAdapter lsNew=new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        newDatabase();
      }
    }
;
    miNew.addSelectionListener(lsNew);
    miNew.setEnabled(!readonly);
  }
break;
case ITEM_CATEGORY_DATABASE:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Connections.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
  public void widgetSelected(  SelectionEvent e){
    newDatabase();
  }
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
MenuItem miEdit=new MenuItem(mTree,SWT.PUSH);
miEdit.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Connections.Edit"));
SelectionAdapter lsEdit=new SelectionAdapter(){
  public void widgetSelected(  SelectionEvent e){
    editDatabase(item);
  }
}
;
miEdit.addSelectionListener(lsEdit);
miEdit.setEnabled(!readonly);
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Connections.Delete"));
SelectionAdapter lsDel=new SelectionAdapter(){
  public void widgetSelected(  SelectionEvent e){
    delDatabase(item);
  }
}
;
miDel.addSelectionListener(lsDel);
miDel.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_SLAVES_ROOT:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Slave.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newSlaveServer();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_SLAVE:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Slave.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newSlaveServer();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
MenuItem miEdit=new MenuItem(mTree,SWT.PUSH);
miEdit.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Slave.Edit"));
SelectionAdapter lsEdit=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
editSlaveServer(item);
}
}
;
miEdit.addSelectionListener(lsEdit);
miEdit.setEnabled(!readonly);
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Slave.Delete"));
SelectionAdapter lsDel=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delSlaveServer(item);
}
}
;
miDel.addSelectionListener(lsDel);
miDel.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_PARTITIONS_ROOT:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.PartitionSchema.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newPartitionSchema();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_PARTITION:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.PartitionSchema.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newPartitionSchema();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
MenuItem miEdit=new MenuItem(mTree,SWT.PUSH);
miEdit.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.PartitionSchema.Edit"));
SelectionAdapter lsEdit=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
editPartitionSchema(item);
}
}
;
miEdit.addSelectionListener(lsEdit);
miEdit.setEnabled(!readonly);
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.PartitionSchema.Delete"));
SelectionAdapter lsDel=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delPartitionSchema(item);
}
}
;
miDel.addSelectionListener(lsDel);
miDel.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_CLUSTERS_ROOT:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Cluster.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newCluster();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_CLUSTER:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Cluster.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newCluster();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
MenuItem miEdit=new MenuItem(mTree,SWT.PUSH);
miEdit.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Cluster.Edit"));
SelectionAdapter lsEdit=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
editCluster(item);
}
}
;
miEdit.addSelectionListener(lsEdit);
miEdit.setEnabled(!readonly);
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Cluster.Delete"));
SelectionAdapter lsDel=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delCluster(item);
}
}
;
miDel.addSelectionListener(lsDel);
miDel.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_TRANSFORMATIONS_ROOT:
break;
case ITEM_CATEGORY_TRANSFORMATION:
if (level >= 2 && repositoryObject != null) {
final RepositoryDirectoryInterface repdir=repositoryObject.getRepositoryDirectory();
if (tisel.length == 1) {
if (!repositoryObject.isDeleted()) {
MenuItem miOpen=new MenuItem(mTree,SWT.PUSH);
miOpen.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Transformations.Open"));
miOpen.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
openTransformation(item,repdir);
}
}
);
MenuItem miRen=new MenuItem(mTree,SWT.PUSH);
miRen.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Transformations.Rename"));
miRen.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
renameTransformation(item,repdir);
}
}
);
miRen.setEnabled(!readonly);
}
}
if (repositoryObject.isDeleted()) {
if (capabilities.supportsRevisions()) {
MenuItem miRestore=new MenuItem(mTree,SWT.PUSH);
miRestore.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Transformations.Restore"));
miRestore.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
restoreSelectedObjects();
}
}
);
}
}
 else {
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Transformations.Delete"));
miDel.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delSelectedObjects();
}
}
);
miDel.setEnabled(!readonly);
}
}
break;
case ITEM_CATEGORY_JOB_DIRECTORY:
case ITEM_CATEGORY_TRANSFORMATION_DIRECTORY:
if (level >= 2) {
String realpath[]=new String[level - 1];
for (int i=0; i < realpath.length; i++) realpath[i]=path[i + 2];
final RepositoryDirectoryInterface repdir=directoryTree.findDirectory(realpath);
MenuItem miExp=new MenuItem(mTree,SWT.PUSH);
miExp.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportAll"));
SelectionAdapter lsExp=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
exportAll(repdir);
}
}
;
miExp.addSelectionListener(lsExp);
miExp.setEnabled(!readonly);
if (cat == ITEM_CATEGORY_TRANSFORMATION_DIRECTORY) {
MenuItem miTrans=new MenuItem(mTree,SWT.PUSH);
miTrans.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportTrans"));
SelectionAdapter lsTrans=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
exportTransformations(repdir);
}
}
;
miTrans.addSelectionListener(lsTrans);
}
if (cat == ITEM_CATEGORY_JOB_DIRECTORY) {
MenuItem miJobs=new MenuItem(mTree,SWT.PUSH);
miJobs.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Objects.ExportJob"));
SelectionAdapter lsJobs=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
exportJobs(repdir);
}
}
;
miJobs.addSelectionListener(lsJobs);
}
MenuItem miCreate=new MenuItem(mTree,SWT.PUSH);
miCreate.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.TransDirectory.Create"));
miCreate.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createDirectory(ti,repdir);
}
}
);
if (level > 2) {
MenuItem miRename=new MenuItem(mTree,SWT.PUSH);
miRename.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.TransDirectory.Rename"));
miRename.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
renameDirectory(ti,repdir);
}
}
);
MenuItem miDelete=new MenuItem(mTree,SWT.PUSH);
miDelete.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.TransDirectory.Delete"));
miDelete.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delDirectory(ti,repdir);
}
}
);
}
}
break;
case ITEM_CATEGORY_JOBS_ROOT:
break;
case ITEM_CATEGORY_JOB:
if (level >= 2 && repositoryObject != null) {
final RepositoryDirectoryInterface repdir=repositoryObject.getRepositoryDirectory();
if (tisel.length == 1) {
if (!repositoryObject.isDeleted()) {
MenuItem miOpen=new MenuItem(mTree,SWT.PUSH);
miOpen.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Jobs.Open"));
miOpen.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
openJob(item,repdir);
}
}
);
MenuItem miRen=new MenuItem(mTree,SWT.PUSH);
miRen.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Jobs.Rename"));
miRen.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
renameJob(ti,item,repdir);
}
}
);
miRen.setEnabled(!readonly);
}
}
if (repositoryObject.isDeleted()) {
if (capabilities.supportsRevisions()) {
MenuItem miRestore=new MenuItem(mTree,SWT.PUSH);
miRestore.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Jobs.Restore"));
miRestore.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
restoreSelectedObjects();
}
}
);
}
}
 else {
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Jobs.Delete"));
miDel.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delSelectedObjects();
}
}
);
miDel.setEnabled(!readonly);
}
}
break;
case ITEM_CATEGORY_USERS_ROOT:
{
mTree=new Menu(shell,SWT.POP_UP);
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.UsersRoot.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newUser();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
}
break;
case ITEM_CATEGORY_USER:
{
MenuItem miNew=new MenuItem(mTree,SWT.PUSH);
miNew.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Users.New"));
SelectionAdapter lsNew=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
newUser();
}
}
;
miNew.addSelectionListener(lsNew);
miNew.setEnabled(!readonly);
MenuItem miEdit=new MenuItem(mTree,SWT.PUSH);
miEdit.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Users.Edit"));
SelectionAdapter lsEdit=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
editUser(item);
}
}
;
miEdit.addSelectionListener(lsEdit);
miEdit.setEnabled(!readonly);
MenuItem miRen=new MenuItem(mTree,SWT.PUSH);
miRen.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Users.Rename"));
SelectionAdapter lsRen=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
renameUser();
}
}
;
miRen.addSelectionListener(lsRen);
miRen.setEnabled(!readonly);
MenuItem miDel=new MenuItem(mTree,SWT.PUSH);
miDel.setText(BaseMessages.getString(PKG,"RepositoryExplorerDialog.PopupMenu.Users.Delete"));
SelectionAdapter lsDel=new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
delUser(item);
}
}
;
miDel.addSelectionListener(lsDel);
miDel.setEnabled(!readonly);
}
break;
default :
mTree=null;
}
}
ConstUI.displayMenu(mTree,wTree);
}
