{
  try {
    DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
    if (dialog.open() != null) {
      String directory=dialog.getFilterPath();
      long dirids[]=((null == root) ? rep.getDirectoryTree() : root).getDirectoryIDs();
      for (int d=0; d < dirids.length; d++) {
        RepositoryDirectory repdir=rep.getDirectoryTree().findDirectory(dirids[d]);
        String jobs[]=rep.getJobNames(dirids[d]);
        for (int i=0; i < jobs.length; i++) {
          JobMeta ji=new JobMeta(log,rep,jobs[i],repdir);
          log.logBasic("Exporting Jobs","[" + jobs[i] + "] in directory ["+ repdir.getPath()+ "]");
          String xml=XMLHandler.getXMLHeader() + ji.getXML();
          File dir=new File(directory + repdir.getPath());
          if (!dir.exists()) {
            dir.mkdir();
            log.logBasic("Exporting Jobs","Created directory [" + dir.getName() + "]");
          }
          String filename=directory + repdir.getPath() + Const.FILE_SEPARATOR+ fixFileName(jobs[i])+ ".kjb";
          File f=new File(filename);
          try {
            FileOutputStream fos=new FileOutputStream(f);
            fos.write(xml.getBytes(Const.XML_ENCODING));
            fos.close();
          }
 catch (          IOException e) {
            log.logError("Exporting Jobs","Couldn't create file [" + filename + "]");
          }
        }
      }
    }
  }
 catch (  KettleException e) {
    new ErrorDialog(shell,Messages.getString("RepositoryExplorerDialog.ExportJobs.UnexpectedError.Title"),Messages.getString("RepositoryExplorerDialog.ExportJobs.UnexpectedError.Message"),e);
  }
}
