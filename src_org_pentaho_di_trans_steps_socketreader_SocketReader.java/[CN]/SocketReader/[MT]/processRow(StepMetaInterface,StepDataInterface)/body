{
  meta=(SocketReaderMeta)smi;
  data=(SocketReaderData)sdi;
  try {
    Object[] r;
    if (first) {
      long startTime=System.currentTimeMillis();
      boolean connected=false;
      KettleException lastException=null;
      while (!connected && (TIMEOUT_IN_SECONDS > (System.currentTimeMillis() - startTime) / 1000) && !isStopped()) {
        try {
          int port=Integer.parseInt(environmentSubstitute(meta.getPort()));
          int bufferSize=Integer.parseInt(environmentSubstitute(meta.getBufferSize()));
          data.socket=new Socket(environmentSubstitute(meta.getHostname()),port);
          connected=true;
          if (meta.isCompressed()) {
            data.outputStream=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(data.socket.getOutputStream()),bufferSize));
            data.inputStream=new DataInputStream(new BufferedInputStream(new GZIPInputStream(data.socket.getInputStream()),bufferSize));
          }
 else {
            data.outputStream=new DataOutputStream(new BufferedOutputStream(data.socket.getOutputStream(),bufferSize));
            data.inputStream=new DataInputStream(new BufferedInputStream(data.socket.getInputStream(),bufferSize));
          }
          lastException=null;
        }
 catch (        Exception e) {
          lastException=new KettleException("Unable to open socket to server " + environmentSubstitute(meta.getHostname()) + " port "+ environmentSubstitute(meta.getPort()),e);
        }
        if (lastException != null) {
          Thread.sleep(1000);
        }
      }
      if (lastException != null) {
        logError("Error initialising step: " + lastException.toString());
        logError(Const.getStackTracker(lastException));
        throw lastException;
      }
 else {
        if (data.inputStream == null)         throw new KettleException("Unable to connect to the SocketWriter in the " + TIMEOUT_IN_SECONDS + "s timeout period.");
      }
      data.rowMeta=new RowMeta(data.inputStream);
      first=false;
    }
    r=data.rowMeta.readData(data.inputStream);
    incrementLinesInput();
    if (checkFeedback(getLinesInput()))     logBasic(Messages.getString("SocketReader.Log.LineNumber") + getLinesInput());
    putRow(data.rowMeta,r);
  }
 catch (  KettleEOFException e) {
    setOutputDone();
    return false;
  }
catch (  Exception e) {
    throw new KettleException(e);
  }
  return true;
}
