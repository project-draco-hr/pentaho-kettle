{
  try {
    this.binding=(SoapBindingStub)new SforceServiceLocator().getSoap();
    if (log.isDetailed())     logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginURL",binding._getProperty(SoapBindingStub.ENDPOINT_ADDRESS_PROPERTY)));
    if (this.timeout > 0)     binding.setTimeout(this.timeout);
    if (this.timeout > 0 && log.isDebug())     logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.SettingTimeout","" + this.timeout));
    this.binding._setProperty(SoapBindingStub.ENDPOINT_ADDRESS_PROPERTY,this.url);
    if (log.isDetailed()) {
      logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginNow"));
      logInterface.logDetailed("----------------------------------------->");
      logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginURL",this.url));
      logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginUsername",username));
      if (this.module != null)       logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginModule",this.module));
      if (this.condition != null)       logInterface.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.LoginCondition",this.condition));
      logInterface.logDetailed("<-----------------------------------------");
    }
    this.loginResult=this.binding.login(this.username,this.password);
    if (log.isDebug()) {
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.SessionId") + " : " + this.loginResult.getSessionId());
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.NewServerURL") + " : " + this.loginResult.getServerUrl());
    }
    this.binding._setProperty(SoapBindingStub.ENDPOINT_ADDRESS_PROPERTY,this.loginResult.getServerUrl());
    SessionHeader sh=new SessionHeader();
    sh.setSessionId(loginResult.getSessionId());
    this.binding.setHeader(new SforceServiceLocator().getServiceName().getNamespaceURI(),"SessionHeader",sh);
    this.userInfo=this.binding.getUserInfo();
    if (log.isDebug()) {
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.UserInfos") + " : " + this.userInfo.getUserFullName());
      logInterface.logDebug("----------------------------------------->");
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.UserName") + " : " + this.userInfo.getUserFullName());
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.UserEmail") + " : " + this.userInfo.getUserEmail());
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.UserLanguage") + " : " + this.userInfo.getUserLanguage());
      logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.UserOrganization") + " : " + this.userInfo.getOrganizationName());
      logInterface.logDebug("<-----------------------------------------");
    }
    this.serverTimestamp=this.binding.getServerTimestamp().toString();
    if (log.isDebug())     BaseMessages.getString(PKG,"SalesforceInput.Log.ServerTimestamp","" + this.serverTimestamp);
    if (log.isDebug())     logInterface.logDebug(BaseMessages.getString(PKG,"SalesforceInput.Log.Connected"));
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.Error.Connection"),e);
  }
}
