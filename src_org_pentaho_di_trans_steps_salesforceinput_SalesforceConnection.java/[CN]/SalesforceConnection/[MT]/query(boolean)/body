{
  if (getBinding() == null)   throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.Exception.CanNotGetBiding"));
  try {
    if (!specifyQuery) {
      DescribeSObjectResult describeSObjectResult=getBinding().describeSObject(getModule());
      if (describeSObjectResult == null)       throw new KettleException(BaseMessages.getString(PKG,"SalesforceInput.ErrorGettingObject"));
      if (!describeSObjectResult.isQueryable())       throw new KettleException(BaseMessages.getString(PKG,"SalesforceInputDialog.ObjectNotQueryable",module));
    }
    if (getSQL() != null && log.isDetailed())     log.logDetailed(BaseMessages.getString(PKG,"SalesforceInput.Log.SQLString") + " : " + getSQL());
switch (this.recordsFilter) {
case SalesforceConnectionUtils.RECORDS_FILTER_UPDATED:
      GetUpdatedResult updatedRecords=getBinding().getUpdated(getModule(),this.startDate,this.endDate);
    if (updatedRecords.getIds() != null && updatedRecords.getIds().length > 0) {
      this.sObjects=getBinding().retrieve(this.fieldsList,getModule(),updatedRecords.getIds());
      this.queryResultSize=this.sObjects.length;
    }
  break;
case SalesforceConnectionUtils.RECORDS_FILTER_DELETED:
GetDeletedResult deletedRecordsResult=getBinding().getDeleted(getModule(),this.startDate,this.endDate);
DeletedRecord[] deletedRecords=deletedRecordsResult.getDeletedRecords();
List<String> idlist=new ArrayList<String>();
if (deletedRecords != null && deletedRecords.length > 0) {
for (DeletedRecord deletedRecord : deletedRecords) {
idlist.add(deletedRecord.getId());
}
this.qr=getBinding().queryAll(getSQL());
this.sObjects=getQueryResult().getRecords();
this.queryResultSize=this.sObjects.length;
}
break;
default :
this.qr=getBinding().query(getSQL());
this.sObjects=getQueryResult().getRecords();
this.queryResultSize=getQueryResult().getSize();
break;
}
if (this.sObjects != null) this.recordsCount=this.sObjects.length;
}
 catch (Exception e) {
throw new KettleException(BaseMessages.getString(PKG,"SalesforceConnection.Exception.Query"),e);
}
}
