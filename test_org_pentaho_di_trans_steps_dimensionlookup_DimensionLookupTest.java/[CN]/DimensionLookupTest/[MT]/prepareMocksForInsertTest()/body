{
  mockDimensionLookupData.schemaTable="testSchemaTable";
  ValueMetaInterface mockKeyValueMeta=mock(ValueMetaInterface.class);
  when(mockDimensionLookupMeta.getDatabaseMeta()).thenReturn(mockDatabaseMeta);
  when(mockDatabaseMeta.quoteField(anyString())).thenAnswer(new Answer<String>(){
    public String answer(    InvocationOnMock invocation) throws Throwable {
      return "\"" + invocation.getArguments()[0] + "\"";
    }
  }
);
  String keyField="testKeyField";
  when(mockDimensionLookupMeta.getKeyField()).thenReturn(keyField);
  when(mockDimensionLookupMeta.getVersionField()).thenReturn("testVersionField");
  when(mockDimensionLookupMeta.getDateFrom()).thenReturn("1900-01-01");
  when(mockDimensionLookupMeta.getDateTo()).thenReturn("1901-01-01");
  when(mockDimensionLookupMeta.getKeyLookup()).thenReturn(new String[]{});
  when(mockDimensionLookupMeta.getFieldLookup()).thenReturn(new String[]{});
  when(mockDimensionLookupMeta.getFieldUpdate()).thenReturn(new int[]{});
  mockDimensionLookupData.keynrs=new int[]{};
  mockDimensionLookupData.fieldnrs=new int[]{};
  Database mockDatabase=mock(Database.class);
  when(mockDatabase.getConnection()).thenReturn(mockConnection);
  mockDimensionLookupData.db=mockDatabase;
  when(mockKeyValueMeta.getName()).thenReturn("testKey");
  when(mockOutputRowMeta.getValueMeta(0)).thenReturn(mockKeyValueMeta);
}
