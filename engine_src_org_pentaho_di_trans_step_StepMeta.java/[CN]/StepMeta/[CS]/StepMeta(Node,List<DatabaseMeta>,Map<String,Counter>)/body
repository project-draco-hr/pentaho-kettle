{
  this();
  PluginRegistry registry=PluginRegistry.getInstance();
  try {
    stepname=XMLHandler.getTagValue(stepnode,"name");
    stepid=XMLHandler.getTagValue(stepnode,"type");
    PluginInterface sp=registry.findPluginWithId(StepPluginType.class,stepid);
    if (sp != null) {
      setStepMetaInterface((StepMetaInterface)registry.loadClass(sp));
      stepid=sp.getIds()[0];
    }
 else {
      throw new KettlePluginLoaderException(stepid,BaseMessages.getString(PKG,"StepMeta.Exception.UnableToLoadClass",stepid));
    }
    if (stepMetaInterface != null) {
      stepMetaInterface.loadXML(stepnode,databases,counters);
    }
    description=XMLHandler.getTagValue(stepnode,"description");
    copiesString=XMLHandler.getTagValue(stepnode,"copies");
    String sdistri=XMLHandler.getTagValue(stepnode,"distribute");
    distributes="Y".equalsIgnoreCase(sdistri);
    if (sdistri == null)     distributes=true;
    String sloadb=XMLHandler.getTagValue(stepnode,"loadbalance");
    loadBalancing="Y".equalsIgnoreCase(sloadb);
    if (sloadb == null)     loadBalancing=false;
    String xloc, yloc;
    int x, y;
    xloc=XMLHandler.getTagValue(stepnode,"GUI","xloc");
    yloc=XMLHandler.getTagValue(stepnode,"GUI","yloc");
    try {
      x=Integer.parseInt(xloc);
    }
 catch (    Exception e) {
      x=0;
    }
    try {
      y=Integer.parseInt(yloc);
    }
 catch (    Exception e) {
      y=0;
    }
    location=new Point(x,y);
    drawstep="Y".equalsIgnoreCase(XMLHandler.getTagValue(stepnode,"GUI","draw"));
    Node partNode=XMLHandler.getSubNode(stepnode,"partitioning");
    stepPartitioningMeta=new StepPartitioningMeta(partNode);
    Node targetPartNode=XMLHandler.getSubNode(stepnode,"target_step_partitioning");
    partNode=XMLHandler.getSubNode(targetPartNode,"partitioning");
    if (partNode != null) {
      targetStepPartitioningMeta=new StepPartitioningMeta(partNode);
    }
    clusterSchemaName=XMLHandler.getTagValue(stepnode,"cluster_schema");
    Node remotestepsNode=XMLHandler.getSubNode(stepnode,"remotesteps");
    Node inputNode=XMLHandler.getSubNode(remotestepsNode,"input");
    int nrInput=XMLHandler.countNodes(inputNode,RemoteStep.XML_TAG);
    for (int i=0; i < nrInput; i++) {
      remoteInputSteps.add(new RemoteStep(XMLHandler.getSubNodeByNr(inputNode,RemoteStep.XML_TAG,i)));
    }
    Node outputNode=XMLHandler.getSubNode(remotestepsNode,"output");
    int nrOutput=XMLHandler.countNodes(outputNode,RemoteStep.XML_TAG);
    for (int i=0; i < nrOutput; i++) {
      remoteOutputSteps.add(new RemoteStep(XMLHandler.getSubNodeByNr(outputNode,RemoteStep.XML_TAG,i)));
    }
  }
 catch (  KettlePluginLoaderException e) {
    throw e;
  }
catch (  Exception e) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"StepMeta.Exception.UnableToLoadStepInfo") + e.toString(),e);
  }
}
