{
  meta=(SingleThreaderMeta)smi;
  setData((SingleThreaderData)sdi);
  SingleThreaderData singleThreaderData=getData();
  if (super.init(smi,sdi)) {
    try {
      singleThreaderData.batchSize=Const.toInt(environmentSubstitute(meta.getBatchSize()),0);
      singleThreaderData.batchTime=Const.toInt(environmentSubstitute(meta.getBatchTime()),0);
      meta.setRepository(getTransMeta().getRepository());
      singleThreaderData.mappingTransMeta=SingleThreaderMeta.loadSingleThreadedTransMeta(meta,meta.getRepository(),this);
      if (singleThreaderData.mappingTransMeta != null) {
        String injectStepName=environmentSubstitute(meta.getInjectStep());
        singleThreaderData.injectStepMeta=singleThreaderData.mappingTransMeta.findStep(injectStepName);
        if (singleThreaderData.injectStepMeta == null) {
          logError("The inject step with name '" + injectStepName + "' couldn't be found in the sub-transformation");
        }
        String retrieveStepName=environmentSubstitute(meta.getRetrieveStep());
        if (!Utils.isEmpty(retrieveStepName)) {
          singleThreaderData.retrieveStepMeta=singleThreaderData.mappingTransMeta.findStep(retrieveStepName);
          if (singleThreaderData.retrieveStepMeta == null) {
            logError("The retrieve step with name '" + retrieveStepName + "' couldn't be found in the sub-transformation");
          }
        }
        prepareMappingExecution();
        if (getStepMeta().isDoingErrorHandling()) {
          singleThreaderData.errorBuffer=new ArrayList<Object[]>();
        }
        return true;
      }
 else {
        logError("No valid mapping was specified!");
        return false;
      }
    }
 catch (    Exception e) {
      logError("Unable to load the mapping transformation because of an error : " + e.toString());
      logError(Const.getStackTracker(e));
    }
  }
  return false;
}
