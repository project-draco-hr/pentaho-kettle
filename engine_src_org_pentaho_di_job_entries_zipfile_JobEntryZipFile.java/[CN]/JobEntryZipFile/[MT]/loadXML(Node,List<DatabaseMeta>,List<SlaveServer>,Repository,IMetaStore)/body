{
  try {
    super.loadXML(entrynode,databases,slaveServers);
    zipFilename=XMLHandler.getTagValue(entrynode,"zipfilename");
    compressionRate=Const.toInt(XMLHandler.getTagValue(entrynode,"compressionrate"),-1);
    ifZipFileExists=Const.toInt(XMLHandler.getTagValue(entrynode,"ifzipfileexists"),-1);
    afterZip=Const.toInt(XMLHandler.getTagValue(entrynode,"afterzip"),-1);
    wildCard=XMLHandler.getTagValue(entrynode,"wildcard");
    excludeWildCard=XMLHandler.getTagValue(entrynode,"wildcardexclude");
    sourceDirectory=XMLHandler.getTagValue(entrynode,"sourcedirectory");
    movetoDirectory=XMLHandler.getTagValue(entrynode,"movetodirectory");
    addFileToResult="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addfiletoresult"));
    isFromPrevious="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"isfromprevious"));
    createParentFolder="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createparentfolder"));
    addDate="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"adddate"));
    addTime="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"addtime"));
    specifyFormat="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"SpecifyFormat"));
    dateTimeFormat=XMLHandler.getTagValue(entrynode,"date_time_format");
    createMoveToDirectory="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"createMoveToDirectory"));
    includingSubFolders="Y".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,"include_subfolders"));
    storedSourcePathDepth=XMLHandler.getTagValue(entrynode,"stored_source_path_depth");
  }
 catch (  KettleXMLException xe) {
    throw new KettleXMLException(BaseMessages.getString(PKG,"JobEntryZipFile.UnableLoadJobEntryXML"),xe);
  }
}
