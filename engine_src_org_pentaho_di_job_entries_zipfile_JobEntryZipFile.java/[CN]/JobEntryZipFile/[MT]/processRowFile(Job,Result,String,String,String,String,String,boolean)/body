{
  boolean Fileexists=false;
  File tempFile=null;
  File fileZip=null;
  boolean resultat=false;
  boolean renameOk=false;
  boolean orginExist=false;
  FileObject originFile=null;
  ZipInputStream zin=null;
  byte[] buffer=null;
  OutputStream dest=null;
  BufferedOutputStream buff=null;
  ZipOutputStream out=null;
  ZipEntry entry=null;
  String localSourceFilename=realSourceDirectoryOrFile;
  try {
    originFile=KettleVFS.getFileObject(realSourceDirectoryOrFile,this);
    localSourceFilename=KettleVFS.getFilename(originFile);
    orginExist=originFile.exists();
  }
 catch (  Exception e) {
  }
 finally {
    if (originFile != null) {
      try {
        originFile.close();
      }
 catch (      IOException ex) {
      }
      ;
    }
  }
  String localrealZipfilename=realZipfilename;
  if (realZipfilename != null && orginExist) {
    FileObject fileObject=null;
    try {
      fileObject=KettleVFS.getFileObject(localrealZipfilename,this);
      localrealZipfilename=KettleVFS.getFilename(fileObject);
      if (fileObject.exists()) {
        Fileexists=true;
        if (log.isDebug())         logDebug(BaseMessages.getString(PKG,"JobZipFiles.Zip_FileExists1.Label") + localrealZipfilename + BaseMessages.getString(PKG,"JobZipFiles.Zip_FileExists2.Label"));
      }
      if (createparentfolder) {
        createParentFolder(localrealZipfilename);
      }
      if (ifzipfileexists == 3 && Fileexists) {
        resultat=false;
      }
 else       if (ifzipfileexists == 2 && Fileexists) {
        if (addfiletoresult) {
          ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,fileObject,parentJob.getJobname(),toString());
          result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
        }
        resultat=true;
      }
 else       if (afterzip == 2 && realMovetodirectory == null) {
        resultat=false;
        logError(BaseMessages.getString(PKG,"JobZipFiles.AfterZip_No_DestinationFolder_Defined.Label"));
      }
 else {
        FileObject[] fileList=null;
        FileObject sourceFileOrFolder=KettleVFS.getFileObject(localSourceFilename);
        boolean isSourceDirectory=sourceFileOrFolder.getType().equals(FileType.FOLDER);
        final Pattern pattern;
        final Pattern patternexclude;
        if (isSourceDirectory) {
          if (!Const.isEmpty(realWildcard))           pattern=Pattern.compile(realWildcard);
 else           pattern=null;
          if (!Const.isEmpty(realWildcardExclude))           patternexclude=Pattern.compile(realWildcardExclude);
 else           patternexclude=null;
          if (includingSubFolders) {
            fileList=sourceFileOrFolder.findFiles(new FileSelector(){
              public boolean traverseDescendents(              FileSelectInfo fileInfo) throws Exception {
                return true;
              }
              public boolean includeFile(              FileSelectInfo fileInfo) throws Exception {
                boolean include;
                if (fileInfo.getFile().getType().equals(FileType.FILE)) {
                  include=true;
                  if (pattern != null) {
                    String name=fileInfo.getFile().getName().getPath();
                    include=pattern.matcher(name).matches();
                  }
                  if (include && patternexclude != null) {
                    String name=fileInfo.getFile().getName().getPath();
                    include=!pattern.matcher(name).matches();
                  }
                }
 else {
                  include=false;
                }
                return include;
              }
            }
);
          }
 else {
            fileList=sourceFileOrFolder.getChildren();
          }
        }
 else {
          pattern=null;
          patternexclude=null;
          fileList=new FileObject[]{sourceFileOrFolder};
        }
        if (fileList.length == 0) {
          resultat=false;
          logError(BaseMessages.getString(PKG,"JobZipFiles.Log.FolderIsEmpty",localSourceFilename));
        }
 else         if (!checkContainsFile(localSourceFilename,fileList,isSourceDirectory)) {
          resultat=false;
          logError(BaseMessages.getString(PKG,"JobZipFiles.Log.NoFilesInFolder",localSourceFilename));
        }
 else {
          if (ifzipfileexists == 0 && Fileexists) {
            if (localrealZipfilename.toLowerCase().endsWith(".zip")) {
              localrealZipfilename=localrealZipfilename.substring(0,localrealZipfilename.length() - 4);
            }
            localrealZipfilename+="_" + StringUtil.getFormattedDateTimeNow(true) + ".zip";
            if (log.isDebug())             logDebug(BaseMessages.getString(PKG,"JobZipFiles.Zip_FileNameChange1.Label") + localrealZipfilename + BaseMessages.getString(PKG,"JobZipFiles.Zip_FileNameChange1.Label"));
          }
 else           if (ifzipfileexists == 1 && Fileexists) {
            fileZip=getFile(localrealZipfilename);
            tempFile=File.createTempFile(fileZip.getName(),null);
            tempFile.delete();
            renameOk=fileZip.renameTo(tempFile);
            if (!renameOk) {
              logError(BaseMessages.getString(PKG,"JobZipFiles.Cant_Rename_Temp1.Label") + fileZip.getAbsolutePath() + BaseMessages.getString(PKG,"JobZipFiles.Cant_Rename_Temp2.Label")+ tempFile.getAbsolutePath()+ BaseMessages.getString(PKG,"JobZipFiles.Cant_Rename_Temp3.Label"));
            }
            if (log.isDebug())             logDebug(BaseMessages.getString(PKG,"JobZipFiles.Zip_FileAppend1.Label") + localrealZipfilename + BaseMessages.getString(PKG,"JobZipFiles.Zip_FileAppend2.Label"));
          }
          if (log.isDetailed())           logDetailed(BaseMessages.getString(PKG,"JobZipFiles.Files_Found1.Label") + fileList.length + BaseMessages.getString(PKG,"JobZipFiles.Files_Found2.Label")+ localSourceFilename+ BaseMessages.getString(PKG,"JobZipFiles.Files_Found3.Label"));
          buffer=new byte[18024];
          dest=KettleVFS.getOutputStream(localrealZipfilename,false);
          buff=new BufferedOutputStream(dest);
          out=new ZipOutputStream(buff);
          HashSet<String> fileSet=new HashSet<String>();
          if (renameOk) {
            zin=new ZipInputStream(new FileInputStream(tempFile));
            entry=zin.getNextEntry();
            while (entry != null) {
              String name=entry.getName();
              if (!fileSet.contains(name)) {
                out.putNextEntry(new ZipEntry(name));
                int len;
                while ((len=zin.read(buffer)) > 0) {
                  out.write(buffer,0,len);
                }
                fileSet.add(name);
              }
              entry=zin.getNextEntry();
            }
            zin.close();
          }
          out.setMethod(ZipOutputStream.DEFLATED);
          if (compressionrate == 0) {
            out.setLevel(Deflater.NO_COMPRESSION);
          }
 else           if (compressionrate == 1) {
            out.setLevel(Deflater.DEFAULT_COMPRESSION);
          }
          if (compressionrate == 2) {
            out.setLevel(Deflater.BEST_COMPRESSION);
          }
          if (compressionrate == 3) {
            out.setLevel(Deflater.BEST_SPEED);
          }
          FileObject[] zippedFiles=new FileObject[fileList.length];
          int fileNum=0;
          for (int i=0; i < fileList.length && !parentJob.isStopped(); i++) {
            boolean getIt=true;
            boolean getItexclude=false;
            if (isSourceDirectory) {
              String filename;
              if (includingSubFolders) {
                filename=fileList[i].getName().getPath();
              }
 else {
                filename=fileList[i].getName().getBaseName();
              }
              if (pattern != null) {
                Matcher matcher=pattern.matcher(filename);
                getIt=matcher.matches();
              }
              if (patternexclude != null) {
                Matcher matcherexclude=patternexclude.matcher(filename);
                getItexclude=matcherexclude.matches();
              }
            }
            String targetFilename=KettleVFS.getFilename(fileList[i]);
            if (sourceFileOrFolder.getType().equals(FileType.FILE)) {
              targetFilename=localSourceFilename;
            }
            FileObject file=KettleVFS.getFileObject(targetFilename);
            boolean isTargetDirectory=file.exists() && file.getType().equals(FileType.FOLDER);
            if (getIt && !getItexclude && !isTargetDirectory&& !fileSet.contains(targetFilename)) {
              if (log.isDebug())               logDebug(BaseMessages.getString(PKG,"JobZipFiles.Add_FilesToZip1.Label") + fileList[i] + BaseMessages.getString(PKG,"JobZipFiles.Add_FilesToZip2.Label")+ localSourceFilename+ BaseMessages.getString(PKG,"JobZipFiles.Add_FilesToZip3.Label"));
              InputStream in=KettleVFS.getInputStream(file);
              String relativeName;
              String fullName=fileList[i].getName().getPath();
              String basePath=sourceFileOrFolder.getName().getPath();
              if (isSourceDirectory) {
                if (fullName.startsWith(basePath)) {
                  relativeName=fullName.substring(basePath.length() + 1);
                }
 else {
                  relativeName=fullName;
                }
              }
 else {
                relativeName=fileList[i].getName().getBaseName();
              }
              out.putNextEntry(new ZipEntry(relativeName));
              int len;
              while ((len=in.read(buffer)) > 0) {
                out.write(buffer,0,len);
              }
              out.flush();
              out.closeEntry();
              in.close();
              zippedFiles[fileNum]=fileList[i];
              fileNum=fileNum + 1;
            }
          }
          out.close();
          buff.close();
          dest.close();
          if (log.isBasic())           logBasic(BaseMessages.getString(PKG,"JobZipFiles.Log.TotalZippedFiles","" + zippedFiles.length));
          if (tempFile != null) {
            tempFile.delete();
          }
          if (afterzip == 1 || afterzip == 2) {
            for (int i=0; i < zippedFiles.length; i++) {
              if (zippedFiles[i] != null) {
                FileObject fileObjectd=zippedFiles[i];
                if (!isSourceDirectory) {
                  fileObjectd=KettleVFS.getFileObject(localSourceFilename);
                }
                if (afterzip == 1) {
                  boolean deleted=fileObjectd.delete();
                  if (!deleted) {
                    resultat=false;
                    logError(BaseMessages.getString(PKG,"JobZipFiles.Cant_Delete_File1.Label") + localSourceFilename + Const.FILE_SEPARATOR+ zippedFiles[i]+ BaseMessages.getString(PKG,"JobZipFiles.Cant_Delete_File2.Label"));
                  }
                  if (log.isDebug())                   logDebug(BaseMessages.getString(PKG,"JobZipFiles.File_Deleted1.Label") + localSourceFilename + Const.FILE_SEPARATOR+ zippedFiles[i]+ BaseMessages.getString(PKG,"JobZipFiles.File_Deleted2.Label"));
                }
 else                 if (afterzip == 2) {
                  FileObject fileObjectm=null;
                  try {
                    fileObjectm=KettleVFS.getFileObject(realMovetodirectory + Const.FILE_SEPARATOR + fileObjectd.getName().getBaseName());
                    fileObjectd.moveTo(fileObjectm);
                  }
 catch (                  IOException e) {
                    logError(BaseMessages.getString(PKG,"JobZipFiles.Cant_Move_File1.Label") + zippedFiles[i] + BaseMessages.getString(PKG,"JobZipFiles.Cant_Move_File2.Label")+ e.getMessage());
                    resultat=false;
                  }
 finally {
                    try {
                      if (fileObjectm != null) {
                        fileObjectm.close();
                      }
                    }
 catch (                    Exception e) {
                    }
                    ;
                  }
                  if (log.isDebug())                   logDebug(BaseMessages.getString(PKG,"JobZipFiles.File_Moved1.Label") + zippedFiles[i] + BaseMessages.getString(PKG,"JobZipFiles.File_Moved2.Label"));
                }
              }
            }
          }
          if (addfiletoresult) {
            ResultFile resultFile=new ResultFile(ResultFile.FILE_TYPE_GENERAL,fileObject,parentJob.getJobname(),toString());
            result.getResultFiles().put(resultFile.getFile().toString(),resultFile);
          }
          resultat=true;
        }
      }
    }
 catch (    Exception e) {
      logError(BaseMessages.getString(PKG,"JobZipFiles.Cant_CreateZipFile1.Label") + localrealZipfilename + BaseMessages.getString(PKG,"JobZipFiles.Cant_CreateZipFile2.Label")+ e.getMessage());
      resultat=false;
    }
 finally {
      if (fileObject != null) {
        try {
          fileObject.close();
          fileObject=null;
        }
 catch (        IOException ex) {
        }
        ;
      }
      try {
        if (out != null)         out.close();
        if (buff != null)         buff.close();
        if (dest != null)         dest.close();
        if (zin != null)         zin.close();
        if (entry != null)         entry=null;
      }
 catch (      IOException ex) {
      }
      ;
    }
  }
 else {
    resultat=true;
    if (localrealZipfilename == null)     logError(BaseMessages.getString(PKG,"JobZipFiles.No_ZipFile_Defined.Label"));
    if (!orginExist)     logError(BaseMessages.getString(PKG,"JobZipFiles.No_FolderCible_Defined.Label",localSourceFilename));
  }
  return resultat;
}
