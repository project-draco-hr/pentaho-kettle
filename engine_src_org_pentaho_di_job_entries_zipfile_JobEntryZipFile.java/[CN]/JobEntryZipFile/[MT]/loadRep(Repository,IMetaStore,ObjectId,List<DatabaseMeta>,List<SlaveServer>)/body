{
  try {
    zipFilename=rep.getJobEntryAttributeString(id_jobentry,"zipfilename");
    compressionRate=(int)rep.getJobEntryAttributeInteger(id_jobentry,"compressionrate");
    ifZipFileExists=(int)rep.getJobEntryAttributeInteger(id_jobentry,"ifzipfileexists");
    afterZip=(int)rep.getJobEntryAttributeInteger(id_jobentry,"afterzip");
    wildCard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    excludeWildCard=rep.getJobEntryAttributeString(id_jobentry,"wildcardexclude");
    sourceDirectory=rep.getJobEntryAttributeString(id_jobentry,"sourcedirectory");
    movetoDirectory=rep.getJobEntryAttributeString(id_jobentry,"movetodirectory");
    addFileToResult=rep.getJobEntryAttributeBoolean(id_jobentry,"addfiletoresult");
    isFromPrevious=rep.getJobEntryAttributeBoolean(id_jobentry,"isfromprevious");
    createParentFolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createparentfolder");
    addDate=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    addTime=rep.getJobEntryAttributeBoolean(id_jobentry,"addtime");
    specifyFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyFormat");
    dateTimeFormat=rep.getJobEntryAttributeString(id_jobentry,"date_time_format");
    createMoveToDirectory=rep.getJobEntryAttributeBoolean(id_jobentry,"createMoveToDirectory");
    includingSubFolders=rep.getJobEntryAttributeBoolean(id_jobentry,"include_subfolders");
    storedSourcePathDepth=rep.getJobEntryAttributeString(id_jobentry,"stored_source_path_depth");
  }
 catch (  KettleException dbe) {
    throw new KettleException(BaseMessages.getString(PKG,"JobEntryZipFile.UnableLoadJobEntryRep","" + id_jobentry),dbe);
  }
}
