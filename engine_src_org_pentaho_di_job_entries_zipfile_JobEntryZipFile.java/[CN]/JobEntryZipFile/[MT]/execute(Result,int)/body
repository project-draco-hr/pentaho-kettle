{
  Result result=previousResult;
  List<RowMetaAndData> rows=result.getRows();
  String realZipfilename;
  String realWildcard=null;
  String realWildcardExclude=null;
  String realTargetdirectory;
  String realMovetodirectory=environmentSubstitute(movetoDirectory);
  boolean SanityControlOK=true;
  if (afterZip == 2) {
    if (Utils.isEmpty(realMovetodirectory)) {
      SanityControlOK=false;
      logError(BaseMessages.getString(PKG,"JobZipFiles.AfterZip_No_DestinationFolder_Defined.Label"));
    }
 else {
      FileObject moveToDirectory=null;
      try {
        moveToDirectory=KettleVFS.getFileObject(realMovetodirectory,this);
        if (moveToDirectory.exists()) {
          if (moveToDirectory.getType() == FileType.FOLDER) {
            if (log.isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobZipFiles.Log.MoveToFolderExist",realMovetodirectory));
            }
          }
 else {
            SanityControlOK=false;
            logError(BaseMessages.getString(PKG,"JobZipFiles.Log.MoveToFolderNotFolder",realMovetodirectory));
          }
        }
 else {
          if (log.isDetailed()) {
            logDetailed(BaseMessages.getString(PKG,"JobZipFiles.Log.MoveToFolderNotNotExist",realMovetodirectory));
          }
          if (createMoveToDirectory) {
            moveToDirectory.createFolder();
            if (log.isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobZipFiles.Log.MoveToFolderCreaterd",realMovetodirectory));
            }
          }
 else {
            SanityControlOK=false;
            logError(BaseMessages.getString(PKG,"JobZipFiles.Log.MoveToFolderNotNotExist",realMovetodirectory));
          }
        }
      }
 catch (      Exception e) {
        SanityControlOK=false;
        logError(BaseMessages.getString(PKG,"JobZipFiles.ErrorGettingMoveToFolder.Label",realMovetodirectory),e);
      }
 finally {
        if (moveToDirectory != null) {
          realMovetodirectory=KettleVFS.getFilename(moveToDirectory);
          try {
            moveToDirectory.close();
          }
 catch (          Exception e) {
            logError("Error moving to directory",e);
            SanityControlOK=false;
          }
        }
      }
    }
  }
  if (!SanityControlOK) {
    return errorResult(result);
  }
  if (isFromPrevious) {
    if (log.isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobZipFiles.ArgFromPrevious.Found",(rows != null ? rows.size() : 0) + ""));
    }
  }
  if (isFromPrevious && rows != null) {
    try {
      for (int iteration=0; iteration < rows.size() && !parentJob.isStopped(); iteration++) {
        RowMetaAndData resultRow=rows.get(iteration);
        realTargetdirectory=resultRow.getString(0,null);
        if (!Utils.isEmpty(realTargetdirectory)) {
          if (!Utils.isEmpty(resultRow.getString(1,null))) {
            realWildcard=resultRow.getString(1,null);
          }
          if (!Utils.isEmpty(resultRow.getString(2,null))) {
            realWildcardExclude=resultRow.getString(2,null);
          }
          realZipfilename=resultRow.getString(3,null);
          if (!Utils.isEmpty(realZipfilename)) {
            if (!processRowFile(parentJob,result,realZipfilename,realWildcard,realWildcardExclude,realTargetdirectory,realMovetodirectory,createParentFolder)) {
              return errorResult(result);
            }
          }
 else {
            logError("destination zip filename is empty! Ignoring row...");
          }
        }
 else {
          logError("Target directory is empty! Ignoring row...");
        }
      }
    }
 catch (    Exception e) {
      logError("Erreur during process!",e);
      result.setResult(false);
      result.setNrErrors(1);
    }
  }
 else   if (!isFromPrevious) {
    if (!Utils.isEmpty(sourceDirectory)) {
      realZipfilename=getFullFilename(environmentSubstitute(zipFilename),addDate,addTime,specifyFormat,dateTimeFormat);
      realWildcard=environmentSubstitute(wildCard);
      realWildcardExclude=environmentSubstitute(excludeWildCard);
      realTargetdirectory=environmentSubstitute(sourceDirectory);
      boolean success=processRowFile(parentJob,result,realZipfilename,realWildcard,realWildcardExclude,realTargetdirectory,realMovetodirectory,createParentFolder);
      if (success) {
        result.setResult(true);
      }
 else {
        errorResult(result);
      }
    }
 else {
      logError("Source folder/file is empty! Ignoring row...");
    }
  }
  return result;
}
