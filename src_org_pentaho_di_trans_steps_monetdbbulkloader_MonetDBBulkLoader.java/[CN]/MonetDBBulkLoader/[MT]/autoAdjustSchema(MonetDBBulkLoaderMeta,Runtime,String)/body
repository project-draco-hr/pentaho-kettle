{
  ProcessHolder holder=null;
  try {
    if (log.isDetailed())     logDetailed("Attempting to auto adjust table structure");
    dropTable(rt,mClientCmd);
    mClientCmd=createCommandLine(meta,false);
    holder=startMClient(rt,mClientCmd);
    if (!holder.isRunning) {
      message=holder.message;
      throw new KettleException("An error occurred writing data to the mclient process: " + message);
    }
    if (log.isDetailed())     logDetailed("getTransMeta: " + getTransMeta());
    if (log.isDetailed())     logDetailed("getStepname: " + getStepname());
    SQLStatement statement=meta.getTableDdl(getTransMeta(),getStepname(),true,data,true);
    if (log.isDetailed())     logDetailed("Statement: " + statement);
    if (log.isDetailed() && statement != null)     logDetailed("Statement has SQL: " + statement.hasSQL());
    if (statement != null && statement.hasSQL()) {
      String cmd=statement.getSQL();
      this.message="";
      if (log.isDetailed())       logDetailed("Trying: " + cmd);
      holder.stdIn.write(cmd.getBytes());
      holder.stdIn.flush();
      holder.stdIn.close();
      try {
        int exitVal=holder.process.waitFor();
        byte buffer[]=new byte[4096];
        holder.stdOut.read(buffer);
        this.message=new String(buffer);
        logBasic(BaseMessages.getString(PKG,"MonetDBBulkLoader.Log.ExitValuePsqlPath","" + exitVal));
        if (exitVal != 0) {
          logError(BaseMessages.getString(PKG,"MonetDBBulkLoader.Log.ExitMessage",message));
        }
 else {
          logDebug(BaseMessages.getString(PKG,"MonetDBBulkLoader.Log.ExitMessage",message));
        }
        if (exitVal != 0) {
          throw new KettleException("An error occurred executing a statement");
        }
      }
 catch (      Exception e) {
        if (holder != null && holder.stdOut != null) {
          byte buffer[]=new byte[4096];
          try {
            holder.stdOut.read(buffer);
            this.message=new String(buffer);
            logError(BaseMessages.getString(PKG,"MonetDBBulkLoader.Log.ExitMessage",new String(buffer)));
          }
 catch (          IOException e1) {
          }
        }
        throw new KettleException("An error occurred writing data to the mclient process",e);
      }
    }
 else {
      this.message=statement.getError();
      logError(statement.getError());
      throw new KettleException("An error occurred creating SQL statement");
    }
  }
 catch (  Exception e) {
    throw new KettleException("An error occurred writing data to the mclient process",e);
  }
  if (log.isDetailed())   logDetailed("Successfull");
}
