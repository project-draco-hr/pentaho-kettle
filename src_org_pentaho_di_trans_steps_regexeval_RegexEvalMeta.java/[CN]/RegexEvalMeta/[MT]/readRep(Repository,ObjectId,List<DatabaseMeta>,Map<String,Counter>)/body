{
  try {
    script=rep.getStepAttributeString(id_step,"script");
    matcher=rep.getStepAttributeString(id_step,"matcher");
    resultfieldname=rep.getStepAttributeString(id_step,"resultfieldname");
    usevar=rep.getStepAttributeBoolean(id_step,"usevar");
    allowcapturegroups=rep.getStepAttributeBoolean(id_step,"allowcapturegroups");
    replacefields=rep.getStepAttributeBoolean(id_step,"replacefields");
    canoneq=rep.getStepAttributeBoolean(id_step,"canoneq");
    caseinsensitive=rep.getStepAttributeBoolean(id_step,"caseinsensitive");
    comment=rep.getStepAttributeBoolean(id_step,"comment");
    multiline=rep.getStepAttributeBoolean(id_step,"multiline");
    dotall=rep.getStepAttributeBoolean(id_step,"dotall");
    unicode=rep.getStepAttributeBoolean(id_step,"unicode");
    unix=rep.getStepAttributeBoolean(id_step,"unix");
    int nrfields=rep.countNrStepAttributes(id_step,"field_name");
    allocate(nrfields);
    for (int i=0; i < nrfields; i++) {
      fieldName[i]=rep.getStepAttributeString(id_step,i,"field_name");
      fieldType[i]=ValueMeta.getType(rep.getStepAttributeString(id_step,i,"field_type"));
      fieldFormat[i]=rep.getStepAttributeString(id_step,i,"field_format");
      fieldGroup[i]=rep.getStepAttributeString(id_step,i,"field_group");
      fieldDecimal[i]=rep.getStepAttributeString(id_step,i,"field_decimal");
      fieldLength[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_length");
      fieldPrecision[i]=(int)rep.getStepAttributeInteger(id_step,i,"field_precision");
      fieldNullIf[i]=rep.getStepAttributeString(id_step,i,"field_nullif");
      fieldIfNull[i]=rep.getStepAttributeString(id_step,i,"field_ifnull");
      fieldTrimType[i]=ValueMeta.getTrimTypeByCode(rep.getStepAttributeString(id_step,i,"field_trimtype"));
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"RegexEvalMeta.Exception.UnexpectedErrorInReadingStepInfo"),e);
  }
}
