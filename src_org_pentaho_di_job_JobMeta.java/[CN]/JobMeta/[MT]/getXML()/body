{
  Props props=null;
  if (Props.isInitialized())   props=Props.getInstance();
  StringBuffer retval=new StringBuffer(500);
  retval.append("<").append(XML_TAG).append(">").append(Const.CR);
  retval.append("  ").append(XMLHandler.addTagValue("name",getName()));
  retval.append("    ").append(XMLHandler.addTagValue("description",description));
  retval.append("    ").append(XMLHandler.addTagValue("extended_description",extendedDescription));
  retval.append("    ").append(XMLHandler.addTagValue("job_version",jobVersion));
  if (jobStatus >= 0) {
    retval.append("    ").append(XMLHandler.addTagValue("job_status",jobStatus));
  }
  retval.append("  ").append(XMLHandler.addTagValue("directory",directory.getPath()));
  retval.append("  ").append(XMLHandler.addTagValue("created_user",created_user));
  retval.append("  ").append(XMLHandler.addTagValue("created_date",XMLHandler.date2string(created_date)));
  retval.append("  ").append(XMLHandler.addTagValue("modified_user",modifiedUser));
  retval.append("  ").append(XMLHandler.addTagValue("modified_date",XMLHandler.date2string(created_date)));
  retval.append("    ").append(XMLHandler.openTag(XML_TAG_PARAMETERS)).append(Const.CR);
  String[] parameters=listParameters();
  for (int idx=0; idx < parameters.length; idx++) {
    retval.append("        ").append(XMLHandler.openTag("parameter")).append(Const.CR);
    retval.append("            ").append(XMLHandler.addTagValue("name",parameters[idx]));
    try {
      retval.append("            ").append(XMLHandler.addTagValue("default_value",getParameterDefault(parameters[idx])));
      retval.append("            ").append(XMLHandler.addTagValue("description",getParameterDescription(parameters[idx])));
    }
 catch (    UnknownParamException e) {
    }
    retval.append("        ").append(XMLHandler.closeTag("parameter")).append(Const.CR);
  }
  retval.append("    ").append(XMLHandler.closeTag(XML_TAG_PARAMETERS)).append(Const.CR);
  for (int i=0; i < nrDatabases(); i++) {
    DatabaseMeta dbMeta=getDatabase(i);
    if (props != null && props.areOnlyUsedConnectionsSavedToXML()) {
      if (isDatabaseConnectionUsed(dbMeta)) {
        retval.append(dbMeta.getXML());
      }
    }
 else {
      retval.append(dbMeta.getXML());
    }
  }
  retval.append("    ").append(XMLHandler.openTag(XML_TAG_SLAVESERVERS)).append(Const.CR);
  for (int i=0; i < slaveServers.size(); i++) {
    SlaveServer slaveServer=slaveServers.get(i);
    retval.append("         ").append(slaveServer.getXML()).append(Const.CR);
  }
  retval.append("    ").append(XMLHandler.closeTag(XML_TAG_SLAVESERVERS)).append(Const.CR);
  retval.append(jobLogTable.getXML());
  retval.append("   ").append(XMLHandler.addTagValue("pass_batchid",batchIdPassed));
  retval.append("   ").append(XMLHandler.addTagValue("shared_objects_file",sharedObjectsFile));
  retval.append("  <entries>").append(Const.CR);
  for (int i=0; i < nrJobEntries(); i++) {
    JobEntryCopy jge=getJobEntry(i);
    retval.append(jge.getXML());
  }
  retval.append("  </entries>").append(Const.CR);
  retval.append("  <hops>").append(Const.CR);
  for (  JobHopMeta hi : jobhops) {
    retval.append(hi.getXML());
  }
  retval.append("  </hops>").append(Const.CR);
  retval.append("  <notepads>").append(Const.CR);
  for (int i=0; i < nrNotes(); i++) {
    NotePadMeta ni=getNote(i);
    retval.append(ni.getXML());
  }
  retval.append("  </notepads>").append(Const.CR);
  retval.append("</").append(XML_TAG).append(">").append(Const.CR);
  return retval.toString();
}
