{
  Props props=null;
  if (Props.isInitialized())   props=Props.getInstance();
  try {
    clear();
    setName(XMLHandler.getTagValue(jobnode,"name"));
    if (rep != null) {
      String directoryPath=XMLHandler.getTagValue(jobnode,"directory");
      if (directoryPath != null) {
        directory=rep.getDirectoryTree().findDirectory(directoryPath);
        if (directory == null) {
          directory=new RepositoryDirectory();
        }
      }
    }
    description=XMLHandler.getTagValue(jobnode,"description");
    extendedDescription=XMLHandler.getTagValue(jobnode,"extended_description");
    jobVersion=XMLHandler.getTagValue(jobnode,"job_version");
    jobStatus=Const.toInt(XMLHandler.getTagValue(jobnode,"job_status"),-1);
    created_user=XMLHandler.getTagValue(jobnode,"created_user");
    String createDate=XMLHandler.getTagValue(jobnode,"created_date");
    if (createDate != null) {
      created_date=XMLHandler.stringToDate(createDate);
    }
    modifiedUser=XMLHandler.getTagValue(jobnode,"modified_user");
    String modDate=XMLHandler.getTagValue(jobnode,"modified_date");
    if (modDate != null) {
      modifiedDate=XMLHandler.stringToDate(modDate);
    }
    try {
      sharedObjectsFile=XMLHandler.getTagValue(jobnode,"shared_objects_file");
      sharedObjects=readSharedObjects(rep);
    }
 catch (    Exception e) {
      LogWriter.getInstance().logError(toString(),Messages.getString("JobMeta.ErrorReadingSharedObjects.Message",e.toString()));
      LogWriter.getInstance().logError(toString(),Const.getStackTracker(e));
    }
    Node paramsNode=XMLHandler.getSubNode(jobnode,XML_TAG_PARAMETERS);
    int nrParams=XMLHandler.countNodes(paramsNode,"parameter");
    for (int i=0; i < nrParams; i++) {
      Node paramNode=XMLHandler.getSubNodeByNr(paramsNode,"parameter",i);
      String paramName=XMLHandler.getTagValue(paramNode,"name");
      String defValue=XMLHandler.getTagValue(paramNode,"default_value");
      String descr=XMLHandler.getTagValue(paramNode,"description");
      addParameterDefinition(paramName,defValue,descr);
    }
    int nr=XMLHandler.countNodes(jobnode,"connection");
    for (int i=0; i < nr; i++) {
      Node dbnode=XMLHandler.getSubNodeByNr(jobnode,"connection",i);
      DatabaseMeta dbcon=new DatabaseMeta(dbnode);
      dbcon.shareVariablesWith(this);
      DatabaseMeta exist=findDatabase(dbcon.getName());
      if (exist == null) {
        addDatabase(dbcon);
      }
 else {
        if (!exist.isShared()) {
          boolean askOverwrite=Props.isInitialized() ? props.askAboutReplacingDatabaseConnections() : false;
          boolean overwrite=Props.isInitialized() ? props.replaceExistingDatabaseConnections() : true;
          if (askOverwrite && prompter != null) {
            overwrite=prompter.overwritePrompt(Messages.getString("JobMeta.Dialog.ConnectionExistsOverWrite.Message",dbcon.getName()),Messages.getString("JobMeta.Dialog.ConnectionExistsOverWrite.DontShowAnyMoreMessage"),Props.STRING_ASK_ABOUT_REPLACING_DATABASES);
          }
          if (overwrite) {
            int idx=indexOfDatabase(exist);
            removeDatabase(idx);
            addDatabase(idx,dbcon);
          }
        }
      }
    }
    Node slaveServersNode=XMLHandler.getSubNode(jobnode,XML_TAG_SLAVESERVERS);
    int nrSlaveServers=XMLHandler.countNodes(slaveServersNode,SlaveServer.XML_TAG);
    for (int i=0; i < nrSlaveServers; i++) {
      Node slaveServerNode=XMLHandler.getSubNodeByNr(slaveServersNode,SlaveServer.XML_TAG,i);
      SlaveServer slaveServer=new SlaveServer(slaveServerNode);
      SlaveServer check=findSlaveServer(slaveServer.getName());
      if (check != null) {
        if (!check.isShared()) {
          addOrReplaceSlaveServer(slaveServer);
        }
      }
 else {
        slaveServers.add(slaveServer);
      }
    }
    String logcon=XMLHandler.getTagValue(jobnode,"logconnection");
    logConnection=findDatabase(logcon);
    logTable=XMLHandler.getTagValue(jobnode,"logtable");
    useBatchId="Y".equalsIgnoreCase(XMLHandler.getTagValue(jobnode,"use_batchid"));
    batchIdPassed="Y".equalsIgnoreCase(XMLHandler.getTagValue(jobnode,"pass_batchid"));
    logfieldUsed="Y".equalsIgnoreCase(XMLHandler.getTagValue(jobnode,"use_logfield"));
    logSizeLimit=XMLHandler.getTagValue(jobnode,"log","size_limit_lines");
    Node entriesnode=XMLHandler.getSubNode(jobnode,"entries");
    int tr=XMLHandler.countNodes(entriesnode,"entry");
    for (int i=0; i < tr; i++) {
      Node entrynode=XMLHandler.getSubNodeByNr(entriesnode,"entry",i);
      JobEntryCopy je=new JobEntryCopy(entrynode,databases,slaveServers,rep);
      JobEntryCopy prev=findJobEntry(je.getName(),0,true);
      if (prev != null) {
        if (je.getNr() == 0) {
          int idx=indexOfJobEntry(prev);
          removeJobEntry(idx);
        }
 else         if (je.getNr() > 0) {
          je.setEntry(prev.getEntry());
          prev=findJobEntry(je.getName(),je.getNr(),true);
          if (prev != null) {
            int idx=indexOfJobEntry(prev);
            removeJobEntry(idx);
          }
        }
      }
      addJobEntry(je);
    }
    Node hopsnode=XMLHandler.getSubNode(jobnode,"hops");
    int ho=XMLHandler.countNodes(hopsnode,"hop");
    for (int i=0; i < ho; i++) {
      Node hopnode=XMLHandler.getSubNodeByNr(hopsnode,"hop",i);
      JobHopMeta hi=new JobHopMeta(hopnode,this);
      jobhops.add(hi);
    }
    Node notepadsnode=XMLHandler.getSubNode(jobnode,"notepads");
    int nrnotes=XMLHandler.countNodes(notepadsnode,"notepad");
    for (int i=0; i < nrnotes; i++) {
      Node notepadnode=XMLHandler.getSubNodeByNr(notepadsnode,"notepad",i);
      NotePadMeta ni=new NotePadMeta(notepadnode);
      notes.add(ni);
    }
    clearChanged();
  }
 catch (  Exception e) {
    throw new KettleXMLException(Messages.getString("JobMeta.Exception.UnableToLoadJobFromXMLNode"),e);
  }
 finally {
    setInternalKettleVariables();
  }
}
