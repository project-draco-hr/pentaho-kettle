{
  try {
    String slen, sprc;
    int i, nrfields, nrscripts;
    script=XMLHandler.getTagValue(stepnode,"script");
    Node scripts=XMLHandler.getSubNode(stepnode,"jsScripts");
    nrscripts=XMLHandler.countNodes(scripts,"jsScript");
    jsScripts=new ScriptValuesScript[nrscripts];
    for (i=0; i < nrscripts; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(scripts,"jsScript",i);
      jsScripts[i]=new ScriptValuesScript(Integer.parseInt(XMLHandler.getTagValue(fnode,"jsScript_type")),XMLHandler.getTagValue(fnode,"jsScript_name"),XMLHandler.getTagValue(fnode,"jsScript_script"));
    }
    Node fields=XMLHandler.getSubNode(stepnode,"fields");
    nrfields=XMLHandler.countNodes(fields,"field");
    allocate(nrfields);
    for (i=0; i < nrfields; i++) {
      Node fnode=XMLHandler.getSubNodeByNr(fields,"field",i);
      name[i]=XMLHandler.getTagValue(fnode,"name");
      rename[i]=XMLHandler.getTagValue(fnode,"rename");
      type[i]=Value.getType(XMLHandler.getTagValue(fnode,"type"));
      slen=XMLHandler.getTagValue(fnode,"length");
      sprc=XMLHandler.getTagValue(fnode,"precision");
      length[i]=Const.toInt(slen,-1);
      precision[i]=Const.toInt(sprc,-1);
    }
  }
 catch (  Exception e) {
    throw new KettleXMLException(Messages.getString("ScriptValuesMetaMod.Exception.UnableToLoadStepInfoFromXML"),e);
  }
}
