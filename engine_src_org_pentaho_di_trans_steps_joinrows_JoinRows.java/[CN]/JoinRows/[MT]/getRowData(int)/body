{
  data.restart[filenr]=false;
  Object[] rowData=null;
  if (filenr == 0) {
    RowSet rowSet=getInputRowSets().get(0);
    rowData=getRowFrom(rowSet);
    if (rowData != null) {
      data.fileRowMeta[0]=rowSet.getRowMeta();
    }
    if (log.isRowLevel()) {
      logRowlevel(BaseMessages.getString(PKG,"JoinRows.Log.ReadRowFromStream") + (rowData == null ? "<null>" : rowData.toString()));
    }
  }
 else {
    if (data.cache[filenr] == null) {
      if (data.dataInputStream[filenr] == null) {
        try {
          data.fileInputStream[filenr]=new FileInputStream(data.file[filenr]);
          data.dataInputStream[filenr]=new DataInputStream(data.fileInputStream[filenr]);
        }
 catch (        FileNotFoundException fnfe) {
          logError(BaseMessages.getString(PKG,"JoinRows.Log.UnableToFindOrOpenTemporaryFile") + data.file[filenr] + "] : "+ fnfe.toString());
          setErrors(1);
          stopAll();
          return null;
        }
      }
      if (data.size[filenr] == 0) {
        if (log.isBasic()) {
          logBasic(BaseMessages.getString(PKG,"JoinRows.Log.NoRowsComingFromStep") + data.rs[filenr].getOriginStepName() + "]");
        }
        return null;
      }
      try {
        rowData=data.fileRowMeta[filenr].readData(data.dataInputStream[filenr]);
      }
 catch (      KettleFileException e) {
        logError(BaseMessages.getString(PKG,"JoinRows.Log.UnableToReadDataFromTempFile") + filenr + " ["+ data.file[filenr]+ "]");
        setErrors(1);
        stopAll();
        return null;
      }
catch (      SocketTimeoutException e) {
        logError(BaseMessages.getString(PKG,"JoinRows.Log.UnableToReadDataFromTempFile") + filenr + " ["+ data.file[filenr]+ "]");
        setErrors(1);
        stopAll();
        return null;
      }
      if (log.isRowLevel()) {
        logRowlevel(BaseMessages.getString(PKG,"JoinRows.Log.ReadRowFromFile") + filenr + " : "+ getInputRowMeta().getString(rowData));
      }
      data.position[filenr]++;
      if (data.position[filenr] >= data.size[filenr]) {
        try {
          data.dataInputStream[filenr].close();
          data.fileInputStream[filenr].close();
          data.dataInputStream[filenr]=null;
          data.fileInputStream[filenr]=null;
          data.position[filenr]=0;
          data.restart[filenr]=true;
        }
 catch (        IOException ioe) {
          logError(BaseMessages.getString(PKG,"JoinRows.Log.UnableToCloseInputStream") + data.file[filenr] + "] : "+ ioe.toString());
          setErrors(1);
          stopAll();
          return null;
        }
      }
    }
 else {
      if (data.size[filenr] == 0) {
        if (log.isBasic()) {
          logBasic(BaseMessages.getString(PKG,"JoinRows.Log.NoRowsComingFromStep") + data.rs[filenr].getOriginStepName() + "]");
        }
        return null;
      }
      rowData=data.cache[filenr].get(data.position[data.filenr]);
      rowData=data.fileRowMeta[filenr].cloneRow(rowData);
      data.position[filenr]++;
      if (data.position[filenr] >= data.size[filenr]) {
        data.position[filenr]=0;
        data.restart[filenr]=true;
      }
    }
  }
  return rowData;
}
