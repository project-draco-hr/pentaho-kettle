{
  meta=(ZipFileMeta)smi;
  data=(ZipFileData)sdi;
  Object[] r=getRow();
  if (r == null) {
    setOutputDone();
    return false;
  }
  if (first) {
    first=false;
    data.outputRowMeta=getInputRowMeta().clone();
    meta.getFields(data.outputRowMeta,getStepname(),null,null,this,getTrans().getRepository(),getTrans().getMetaStore());
    if (Const.isEmpty(meta.getDynamicSourceFileNameField())) {
      throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.SourceFilenameFieldMissing"));
    }
    if (Const.isEmpty(meta.getDynamicTargetFileNameField())) {
      throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.TargetFilenameFieldMissing"));
    }
    if (data.indexOfSourceFilename < 0) {
      data.indexOfSourceFilename=getInputRowMeta().indexOfValue(meta.getDynamicSourceFileNameField());
      if (data.indexOfSourceFilename < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Exception.CouldnotFindField",meta.getDynamicSourceFileNameField()));
      }
    }
    data.indexOfZipFilename=getInputRowMeta().indexOfValue(meta.getDynamicTargetFileNameField());
    if (data.indexOfZipFilename < 0) {
      throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Exception.CouldnotFindField",meta.getDynamicTargetFileNameField()));
    }
    if (meta.isKeepSouceFolder()) {
      if (!Const.isEmpty(meta.getBaseFolderField())) {
        data.indexOfBaseFolder=getInputRowMeta().indexOfValue(meta.getBaseFolderField());
        if (data.indexOfBaseFolder < 0) {
          throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Exception.CouldnotFindField",meta.getBaseFolderField()));
        }
      }
    }
    if (meta.getOperationType() == ZipFileMeta.OPERATION_TYPE_MOVE) {
      if (Const.isEmpty(meta.getMoveToFolderField())) {
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Exception.EmptyMovetoFolder"));
      }
      data.indexOfMoveToFolder=getInputRowMeta().indexOfValue(meta.getMoveToFolderField());
      if (data.indexOfMoveToFolder < 0) {
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Exception.CouldnotFindField",meta.getMoveToFolderField()));
      }
    }
  }
  boolean sendToErrorRow=false;
  String errorMessage=null;
  try {
    String sourceFilename=getInputRowMeta().getString(r,data.indexOfSourceFilename);
    if (Const.isEmpty(sourceFilename)) {
      log.logError(toString(),BaseMessages.getString(PKG,"ZipFile.Error.SourceFileEmpty"));
      throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.SourceFileEmpty"));
    }
    data.sourceFile=KettleVFS.getFileObject(sourceFilename);
    boolean skip=false;
    if (!data.sourceFile.exists()) {
      log.logError(toString(),BaseMessages.getString(PKG,"ZipFile.Error.SourceFileNotExist",sourceFilename));
      throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.SourceFileNotExist",sourceFilename));
    }
 else {
      if (data.sourceFile.getType() != FileType.FILE) {
        log.logError(toString(),BaseMessages.getString(PKG,"ZipFile.Error.SourceFileNotFile",sourceFilename));
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.SourceFileNotFile",sourceFilename));
      }
    }
    if (data.indexOfBaseFolder > -1) {
      data.baseFolder=getInputRowMeta().getString(r,data.indexOfBaseFolder);
    }
    String moveToFolder=null;
    if (data.indexOfMoveToFolder > -1) {
      moveToFolder=getInputRowMeta().getString(r,data.indexOfMoveToFolder);
      if (Const.isEmpty(moveToFolder)) {
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.EmptyMoveToFolder"));
      }
    }
    if (!skip) {
      String targetFilename=getInputRowMeta().getString(r,data.indexOfZipFilename);
      if (Const.isEmpty(targetFilename)) {
        log.logError(toString(),BaseMessages.getString(PKG,"ZipFile.Error.TargetFileEmpty"));
        throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.TargetFileEmpty"));
      }
      data.zipFile=KettleVFS.getFileObject(targetFilename);
      if (data.zipFile.exists()) {
        if (log.isDetailed())         log.logDetailed(toString(),BaseMessages.getString(PKG,"ZipFile.Log.TargetFileExists",targetFilename));
      }
 else {
        FileObject parentFolder=data.zipFile.getParent();
        if (!parentFolder.exists()) {
          if (!meta.isCreateParentFolder()) {
            throw new KettleException(BaseMessages.getString(PKG,"ZipFile.Error.TargetParentFolderNotExists",parentFolder.toString()));
          }
 else {
            parentFolder.createFolder();
          }
        }
        if (parentFolder != null)         parentFolder.close();
      }
      zipFile();
      processFile(moveToFolder);
      addFilenameToResult();
    }
    getLinesInput();
    putRow(data.outputRowMeta,r);
    if (checkFeedback(getLinesRead())) {
      if (log.isDetailed())       logDetailed(BaseMessages.getString(PKG,"ZipFile.LineNumber","" + getLinesRead()));
    }
  }
 catch (  Exception e) {
    if (getStepMeta().isDoingErrorHandling()) {
      sendToErrorRow=true;
      errorMessage=e.toString();
    }
 else {
      logError(BaseMessages.getString(PKG,"ZipFile.ErrorInStepRunning") + e.getMessage());
      setErrors(1);
      stopAll();
      setOutputDone();
      return false;
    }
    if (sendToErrorRow) {
      putError(getInputRowMeta(),r,1,errorMessage,null,"ZipFile001");
    }
  }
 finally {
    try {
      if (data.sourceFile != null)       data.sourceFile.close();
      if (data.zipFile != null)       data.zipFile.close();
    }
 catch (    Exception e) {
    }
    ;
  }
  return true;
}
