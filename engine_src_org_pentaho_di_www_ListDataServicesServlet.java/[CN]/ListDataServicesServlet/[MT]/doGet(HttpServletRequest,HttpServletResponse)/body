{
  if (isJettyMode() && !request.getContextPath().startsWith(CONTEXT_PATH)) {
    return;
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"LisDataServicesServlet.ListRequested"));
  response.setStatus(HttpServletResponse.SC_OK);
  Map<String,String> parameters=TransDataServlet.getParametersFromRequestHeader(request);
  response.setContentType("text/xml");
  response.getWriter().println(XMLHandler.getXMLHeader());
  response.getWriter().println(XMLHandler.openTag(XML_TAG_SERVICES));
  List<TransDataService> services=new ArrayList<TransDataService>(transformationMap.getSlaveServerConfig().getServices());
  IMetaStore metaStore=transformationMap.getSlaveServerConfig().getMetaStore();
  Repository repository=transformationMap.getSlaveServerConfig().getRepository();
  if (repository != null) {
    try {
      List<DataServiceMeta> dataServices=DataServiceMetaStoreUtil.getDataServices(metaStore);
      for (      DataServiceMeta dataService : dataServices) {
        if (!Const.isEmpty(dataService.getName()) && !Const.isEmpty(dataService.getStepname())) {
          dataService.lookupTransObjectId(repository);
          if (!Const.isEmpty(dataService.getTransFilename()) || dataService.getTransObjectId() != null) {
            if (Const.isEmpty(dataService.getStepname())) {
              log.logError("A data service without a stepname specification was found : '" + dataService.getName() + "'");
            }
 else             if (Const.isEmpty(dataService.getName())) {
              log.logError("A data service without a name was found'");
            }
 else {
              services.add(new TransDataService(dataService.getName(),dataService.getTransFilename(),dataService.getTransObjectId(),dataService.getStepname()));
            }
          }
 else {
            log.logError("The transformation specification for data service '" + dataService.getName() + "' could not be found");
          }
        }
      }
    }
 catch (    Exception e) {
      log.logError("Unable to list extra repository services",e);
    }
  }
  for (  TransDataService service : services) {
    response.getWriter().println(XMLHandler.openTag(XML_TAG_SERVICE));
    response.getWriter().println(XMLHandler.addTagValue("name",service.getName()));
    try {
      TransMeta transMeta=null;
      if (repository != null && service.getObjectId() != null) {
        transMeta=repository.loadTransformation(service.getObjectId(),null);
      }
 else       if (repository != null && service.getName() != null) {
        String path="/";
        String name=service.getName();
        int lastSlashIndex=service.getName().lastIndexOf('/');
        if (lastSlashIndex >= 0) {
          path=service.getName().substring(0,lastSlashIndex + 1);
          name=service.getName().substring(lastSlashIndex + 1);
        }
        RepositoryDirectoryInterface tree=repository.loadRepositoryDirectoryTree();
        RepositoryDirectoryInterface rd=tree.findDirectory(path);
        if (rd == null)         rd=tree;
        transMeta=repository.loadTransformation(name,rd,null,true,null);
      }
 else {
        transMeta=new TransMeta(service.getFileName());
      }
      for (      String name : parameters.keySet()) {
        transMeta.setParameterValue(name,parameters.get(name));
      }
      transMeta.activateParameters();
      RowMetaInterface serviceFields=transMeta.getStepFields(service.getServiceStepName());
      response.getWriter().println(serviceFields.getMetaXML());
    }
 catch (    Exception e) {
      log.logError("Unable to get fields for service " + service.getName() + ", transformation: "+ service.getFileName());
    }
    response.getWriter().println(XMLHandler.closeTag(XML_TAG_SERVICE));
  }
  response.getWriter().println(XMLHandler.closeTag(XML_TAG_SERVICES));
}
