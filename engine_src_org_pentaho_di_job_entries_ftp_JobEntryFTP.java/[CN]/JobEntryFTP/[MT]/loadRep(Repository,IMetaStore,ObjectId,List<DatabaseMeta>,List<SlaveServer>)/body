{
  try {
    port=rep.getJobEntryAttributeString(id_jobentry,"port");
    serverName=rep.getJobEntryAttributeString(id_jobentry,"servername");
    userName=rep.getJobEntryAttributeString(id_jobentry,"username");
    password=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"password"));
    ftpDirectory=rep.getJobEntryAttributeString(id_jobentry,"ftpdirectory");
    targetDirectory=rep.getJobEntryAttributeString(id_jobentry,"targetdirectory");
    wildcard=rep.getJobEntryAttributeString(id_jobentry,"wildcard");
    binaryMode=rep.getJobEntryAttributeBoolean(id_jobentry,"binary");
    timeout=(int)rep.getJobEntryAttributeInteger(id_jobentry,"timeout");
    remove=rep.getJobEntryAttributeBoolean(id_jobentry,"remove");
    onlyGettingNewFiles=rep.getJobEntryAttributeBoolean(id_jobentry,"only_new");
    activeConnection=rep.getJobEntryAttributeBoolean(id_jobentry,"active");
    controlEncoding=rep.getJobEntryAttributeString(id_jobentry,"control_encoding");
    if (controlEncoding == null) {
      controlEncoding=LEGACY_CONTROL_ENCODING;
    }
    movefiles=rep.getJobEntryAttributeBoolean(id_jobentry,"movefiles");
    movetodirectory=rep.getJobEntryAttributeString(id_jobentry,"movetodirectory");
    adddate=rep.getJobEntryAttributeBoolean(id_jobentry,"adddate");
    addtime=rep.getJobEntryAttributeBoolean(id_jobentry,"addtime");
    SpecifyFormat=rep.getJobEntryAttributeBoolean(id_jobentry,"SpecifyFormat");
    date_time_format=rep.getJobEntryAttributeString(id_jobentry,"date_time_format");
    AddDateBeforeExtension=rep.getJobEntryAttributeBoolean(id_jobentry,"AddDateBeforeExtension");
    String addToResult=rep.getJobEntryAttributeString(id_jobentry,"isaddresult");
    if (Utils.isEmpty(addToResult)) {
      isaddresult=true;
    }
 else {
      isaddresult=rep.getJobEntryAttributeBoolean(id_jobentry,"isaddresult");
    }
    createmovefolder=rep.getJobEntryAttributeBoolean(id_jobentry,"createmovefolder");
    proxyHost=rep.getJobEntryAttributeString(id_jobentry,"proxy_host");
    proxyPort=rep.getJobEntryAttributeString(id_jobentry,"proxy_port");
    proxyUsername=rep.getJobEntryAttributeString(id_jobentry,"proxy_username");
    proxyPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"proxy_password"));
    socksProxyHost=rep.getJobEntryAttributeString(id_jobentry,"socksproxy_host");
    socksProxyPort=rep.getJobEntryAttributeString(id_jobentry,"socksproxy_port");
    socksProxyUsername=rep.getJobEntryAttributeString(id_jobentry,"socksproxy_username");
    socksProxyPassword=Encr.decryptPasswordOptionallyEncrypted(rep.getJobEntryAttributeString(id_jobentry,"socksproxy_password"));
    SifFileExists=rep.getJobEntryAttributeString(id_jobentry,"ifFileExists");
    if (Utils.isEmpty(SifFileExists)) {
      ifFileExists=ifFileExistsSkip;
    }
 else {
      if (SifFileExists.equals(SifFileExistsCreateUniq)) {
        ifFileExists=ifFileExistsCreateUniq;
      }
 else       if (SifFileExists.equals(SifFileExistsFail)) {
        ifFileExists=ifFileExistsFail;
      }
 else {
        ifFileExists=ifFileExistsSkip;
      }
    }
    nr_limit=rep.getJobEntryAttributeString(id_jobentry,"nr_limit");
    success_condition=Const.NVL(rep.getJobEntryAttributeString(id_jobentry,"success_condition"),SUCCESS_IF_NO_ERRORS);
  }
 catch (  KettleException dbe) {
    throw new KettleException("Unable to load job entry of type 'ftp' from the repository for id_jobentry=" + id_jobentry,dbe);
  }
}
