{
  if (textFileLine == null || textFileLine.line == null) {
    return null;
  }
  Object[] r=RowDataUtil.allocateRowData(outputRowMeta.size());
  int nrfields=info.inputFiles.inputFields.length;
  int fieldnr;
  Long errorCount=null;
  if (info.errorHandling.errorIgnored && info.getErrorCountField() != null && info.getErrorCountField().length() > 0) {
    errorCount=new Long(0L);
  }
  String errorFields=null;
  if (info.errorHandling.errorIgnored && info.getErrorFieldsField() != null && info.getErrorFieldsField().length() > 0) {
    errorFields="";
  }
  String errorText=null;
  if (info.errorHandling.errorIgnored && info.getErrorTextField() != null && info.getErrorTextField().length() > 0) {
    errorText="";
  }
  try {
    String[] strings=convertLineToStrings(log,textFileLine.line,info,delimiter,enclosure,escapeCharacter);
    int shiftFields=(passThruFields == null ? 0 : nrPassThruFields);
    for (fieldnr=0; fieldnr < nrfields; fieldnr++) {
      TextFileInputField f=info.inputFiles.inputFields[fieldnr];
      int valuenr=shiftFields + fieldnr;
      ValueMetaInterface valueMeta=outputRowMeta.getValueMeta(valuenr);
      ValueMetaInterface convertMeta=convertRowMeta.getValueMeta(valuenr);
      Object value;
      String nullif=fieldnr < nrfields ? f.getNullString() : "";
      String ifnull=fieldnr < nrfields ? f.getIfNullValue() : "";
      int trim_type=fieldnr < nrfields ? f.getTrimType() : ValueMetaInterface.TRIM_TYPE_NONE;
      if (fieldnr < strings.length) {
        String pol=strings[fieldnr];
        try {
          value=valueMeta.convertDataFromString(pol,convertMeta,nullif,ifnull,trim_type);
        }
 catch (        Exception e) {
          String message=BaseMessages.getString(PKG,"TextFileInput.Log.CoundNotParseField",valueMeta.toStringMeta(),"" + pol,valueMeta.getConversionMask(),"" + rowNr);
          if (info.errorHandling.errorIgnored) {
            log.logDetailed(fname,BaseMessages.getString(PKG,"TextFileInput.Log.Warning") + ": " + message+ " : "+ e.getMessage());
            value=null;
            if (errorCount != null) {
              errorCount=new Long(errorCount.longValue() + 1L);
            }
            if (errorFields != null) {
              StringBuilder sb=new StringBuilder(errorFields);
              if (sb.length() > 0) {
                sb.append("\t");
              }
              sb.append(valueMeta.getName());
              errorFields=sb.toString();
            }
            if (errorText != null) {
              StringBuilder sb=new StringBuilder(errorText);
              if (sb.length() > 0) {
                sb.append(Const.CR);
              }
              sb.append(message);
              errorText=sb.toString();
            }
            if (errorHandler != null) {
              errorHandler.handleLineError(textFileLine.lineNumber,AbstractFileErrorHandler.NO_PARTS);
            }
            if (info.isErrorLineSkipped()) {
              r=null;
            }
          }
 else {
            throw new KettleException(message,e);
          }
        }
      }
 else {
        value=null;
      }
      if (r != null) {
        r[valuenr]=value;
      }
    }
    if (r != null) {
      if (fieldnr < nrfields) {
        for (int i=fieldnr; i < info.inputFiles.inputFields.length; i++) {
          r[shiftFields + i]=null;
        }
      }
      int index=shiftFields + nrfields;
      if (errorCount != null) {
        r[index]=errorCount;
        index++;
      }
      if (errorFields != null) {
        r[index]=errorFields;
        index++;
      }
      if (errorText != null) {
        r[index]=errorText;
        index++;
      }
      if (info.content.includeFilename) {
        r[index]=fname;
        index++;
      }
      if (info.content.includeRowNumber) {
        r[index]=new Long(rowNr);
        index++;
      }
      if (additionalOutputFields.shortFilenameField != null) {
        r[index]=shortFilename;
        index++;
      }
      if (additionalOutputFields.extensionField != null) {
        r[index]=extension;
        index++;
      }
      if (additionalOutputFields.pathField != null) {
        r[index]=path;
        index++;
      }
      if (additionalOutputFields.sizeField != null) {
        r[index]=new Long(size);
        index++;
      }
      if (additionalOutputFields.hiddenField != null) {
        r[index]=hidden;
        index++;
      }
      if (additionalOutputFields.lastModificationField != null) {
        r[index]=modificationDateTime;
        index++;
      }
      if (additionalOutputFields.uriField != null) {
        r[index]=uri;
        index++;
      }
      if (additionalOutputFields.rootUriField != null) {
        r[index]=rooturi;
        index++;
      }
    }
  }
 catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"TextFileInput.Log.Error.ErrorConvertingLineText"),e);
  }
  if (r != null && passThruFields != null) {
    for (int i=0; i < nrPassThruFields; i++) {
      r[i]=passThruFields[i];
    }
  }
  return r;
}
