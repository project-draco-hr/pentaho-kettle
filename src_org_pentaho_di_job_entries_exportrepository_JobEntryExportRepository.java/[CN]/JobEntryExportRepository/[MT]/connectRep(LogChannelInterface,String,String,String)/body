{
  this.repsinfo=new RepositoriesMeta();
  try {
    this.repsinfo.readData();
  }
 catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRep"));
    throw new Exception(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRep"));
  }
  this.repinfo=this.repsinfo.findRepository(realrepName);
  if (this.repinfo == null) {
    logError(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepSystem"));
    throw new Exception(BaseMessages.getString(PKG,"JobExportRepository.Error.NoRepSystem"));
  }
  this.repository=RepositoryLoader.createRepository(this.repinfo,this.userinfo);
  try {
    this.repository.connect();
  }
 catch (  Exception e) {
    logError(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnectRep"));
    throw new Exception(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotConnectRep"),e);
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"JobExportRepository.Log.CheckSuppliedUserPass"));
  this.userinfo=this.repository.getSecurityProvider().loadUserInfo(realusername,realpassword);
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"JobExportRepository.Log.CheckingUser",userinfo.getUsername()));
  if (this.userinfo.getObjectId() == null) {
    logError(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotVerifyUserPass"));
    throw new Exception(BaseMessages.getString(PKG,"JobExportRepository.Error.CanNotVerifyUserPass"));
  }
  if (log.isDebug())   logDebug(BaseMessages.getString(PKG,"JobExportRepository.Log.SuppliedUserPassVerified"));
}
