{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX| SWT.MIN);
  props.setLook(shell);
  setShellImage(shell,input);
  lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText(BaseMessages.getString(PKG,"JsonInputDialog.DialogTitle"));
  middle=props.getMiddlePct();
  margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText(BaseMessages.getString(PKG,"System.Label.StepName"));
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.top=new FormAttachment(0,margin);
  fdlStepname.right=new FormAttachment(middle,-margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wTabFolder=new CTabFolder(shell,SWT.BORDER);
  props.setLook(wTabFolder,Props.WIDGET_STYLE_TAB);
  addFileTab();
  addContentTab();
  addFieldsTab();
  addAdditionalFieldsTab();
  fdTabFolder=new FormData();
  fdTabFolder.left=new FormAttachment(0,0);
  fdTabFolder.top=new FormAttachment(wStepname,margin);
  fdTabFolder.right=new FormAttachment(100,0);
  fdTabFolder.bottom=new FormAttachment(100,-50);
  wTabFolder.setLayoutData(fdTabFolder);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText(BaseMessages.getString(PKG,"System.Button.OK"));
  wPreview=new Button(shell,SWT.PUSH);
  wPreview.setText(BaseMessages.getString(PKG,"JsonInputDialog.Button.PreviewRows"));
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText(BaseMessages.getString(PKG,"System.Button.Cancel"));
  setButtonPositions(new Button[]{wOK,wPreview,wCancel},margin,wTabFolder);
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  lsPreview=new Listener(){
    public void handleEvent(    Event e){
      preview();
    }
  }
;
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  wOK.addListener(SWT.Selection,lsOK);
  wPreview.addListener(SWT.Selection,lsPreview);
  wCancel.addListener(SWT.Selection,lsCancel);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  wLimit.addSelectionListener(lsDef);
  wInclRownumField.addSelectionListener(lsDef);
  wInclFilenameField.addSelectionListener(lsDef);
  SelectionAdapter selA=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      wFilenameList.add(new String[]{wFilename.getText(),wFilemask.getText(),wExcludeFilemask.getText(),JsonInputMeta.RequiredFilesCode[0],JsonInputMeta.RequiredFilesCode[0]});
      wFilename.setText("");
      wFilemask.setText("");
      wExcludeFilemask.setText("");
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
      wFilenameList.optWidth(true);
    }
  }
;
  wbaFilename.addSelectionListener(selA);
  wFilename.addSelectionListener(selA);
  wbdFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int[] idx=wFilenameList.getSelectionIndices();
      wFilenameList.remove(idx);
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbeFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      int idx=wFilenameList.getSelectionIndex();
      if (idx >= 0) {
        String[] string=wFilenameList.getItem(idx);
        wFilename.setText(string[0]);
        wFilemask.setText(string[1]);
        wExcludeFilemask.setText(string[2]);
        wFilenameList.remove(idx);
      }
      wFilenameList.removeEmptyRows();
      wFilenameList.setRowNums();
    }
  }
);
  wbShowFiles.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        JsonInputMeta tfii=new JsonInputMeta();
        getInfo(tfii);
        FileInputList fileInputList=tfii.getFiles(transMeta);
        String[] files=fileInputList.getFileStrings();
        if (files != null && files.length > 0) {
          EnterSelectionDialog esd=new EnterSelectionDialog(shell,files,BaseMessages.getString(PKG,"JsonInputDialog.FilesReadSelection.DialogTitle"),BaseMessages.getString(PKG,"JsonInputDialog.FilesReadSelection.DialogMessage"));
          esd.setViewOnly();
          esd.open();
        }
 else {
          MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
          mb.setMessage(BaseMessages.getString(PKG,"JsonInputDialog.NoFileFound.DialogMessage"));
          mb.setText(BaseMessages.getString(PKG,"System.Dialog.Error.Title"));
          mb.open();
        }
      }
 catch (      KettleException ex) {
        new ErrorDialog(shell,BaseMessages.getString(PKG,"JsonInputDialog.ErrorParsingData.DialogTitle"),BaseMessages.getString(PKG,"JsonInputDialog.ErrorParsingData.DialogMessage"),ex);
      }
    }
  }
);
  wInclFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setIncludeFilename();
    }
  }
);
  wInclRownum.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setIncludeRownum();
    }
  }
);
  wFilename.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      wFilename.setToolTipText(wFilename.getText());
    }
  }
);
  wbbFilename.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (!Utils.isEmpty(wFilemask.getText()) || !Utils.isEmpty(wExcludeFilemask.getText())) {
        DirectoryDialog dialog=new DirectoryDialog(shell,SWT.OPEN);
        if (wFilename.getText() != null) {
          String fpath=transMeta.environmentSubstitute(wFilename.getText());
          dialog.setFilterPath(fpath);
        }
        if (dialog.open() != null) {
          String str=dialog.getFilterPath();
          wFilename.setText(str);
        }
      }
 else {
        FileDialog dialog=new FileDialog(shell,SWT.OPEN);
        dialog.setFilterExtensions(new String[]{"*.js;*.JS;*.json;*.JSON","*"});
        if (wFilename.getText() != null) {
          String fname=transMeta.environmentSubstitute(wFilename.getText());
          dialog.setFileName(fname);
        }
        dialog.setFilterNames(new String[]{BaseMessages.getString(PKG,"System.FileType.JsonFiles"),BaseMessages.getString(PKG,"System.FileType.AllFiles")});
        if (dialog.open() != null) {
          String str=dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName();
          wFilename.setText(str);
        }
      }
    }
  }
);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  wTabFolder.setSelection(0);
  setSize();
  getData(input);
  activeStreamField();
  setIncludeFilename();
  setIncludeRownum();
  input.setChanged(changed);
  wFields.optWidth(true);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return stepname;
}
