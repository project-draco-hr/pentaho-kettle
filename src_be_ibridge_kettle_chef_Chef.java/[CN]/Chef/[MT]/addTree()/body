{
  SashForm leftsplit=new SashForm(sashform,SWT.VERTICAL);
  leftsplit.setLayout(new FillLayout());
  Composite cCSH=new Composite(leftsplit,SWT.NONE);
  cCSH.setLayout(new FillLayout());
  leftsplit.setWeights(new int[]{100});
  tMain=new Tree(cCSH,SWT.SINGLE | SWT.BORDER);
  TreeMemory.addTreeListener(tMain,STRING_CHEF_MAIN_TREE_NAME);
  TreeItem tiConnections=new TreeItem(tMain,SWT.NONE);
  tiConnections.setText(STRING_CONNECTIONS);
  TreeItem tiEntries=new TreeItem(tMain,SWT.NONE);
  tiEntries.setText(STRING_JOBENTRIES);
  TreeItem tiBaseEntries=new TreeItem(tMain,SWT.NONE);
  tiBaseEntries.setText(STRING_BASE_JOBENTRIES);
  JobEntryLoader jobEntryLoader=JobEntryLoader.getInstance();
  JobPlugin baseJobEntries[]=jobEntryLoader.getJobEntriesWithType(JobPlugin.TYPE_NATIVE);
  for (int i=0; i < baseJobEntries.length; i++) {
    JobPlugin plugin=baseJobEntries[i];
    if (!plugin.getID().equals("SPECIAL")) {
      TreeItem tiBase=new TreeItem(tiBaseEntries,SWT.NONE);
      tiBase.setText(baseJobEntries[i].getDescription());
      Image image=(Image)GUIResource.getInstance().getImagesJobentriesSmall().get(plugin.getID());
      tiBase.setImage(image);
    }
  }
  TreeItem tiPluginEntries=new TreeItem(tMain,SWT.NONE);
  tiPluginEntries.setText(STRING_PLUGIN_JOBENTRIES);
  JobPlugin pluginJobEntries[]=jobEntryLoader.getJobEntriesWithType(JobPlugin.TYPE_PLUGIN);
  for (int i=0; i < pluginJobEntries.length; i++) {
    TreeItem tiPlugin=new TreeItem(tiPluginEntries,SWT.NONE);
    tiPlugin.setText(pluginJobEntries[i].getDescription());
  }
  props.setLook(tMain);
  lsNew=new Listener(){
    public void handleEvent(    Event e){
      newSelected();
    }
  }
;
  lsEdit=new Listener(){
    public void handleEvent(    Event e){
      editSelected();
    }
  }
;
  lsDupe=new Listener(){
    public void handleEvent(    Event e){
      dupeSelected();
    }
  }
;
  lsDel=new Listener(){
    public void handleEvent(    Event e){
      delSelected();
    }
  }
;
  lsSQL=new Listener(){
    public void handleEvent(    Event e){
      sqlSelected();
    }
  }
;
  lsCache=new Listener(){
    public void handleEvent(    Event e){
      clearDBCache();
    }
  }
;
  lsExpl=new Listener(){
    public void handleEvent(    Event e){
      exploreDB();
    }
  }
;
  lsEditDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      editSelected();
    }
  }
;
  lsNewDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      newSelected();
    }
  }
;
  lsEditSel=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setMenu(e);
    }
  }
;
  tMain.addSelectionListener(lsEditDef);
  tMain.addSelectionListener(lsNewDef);
  tMain.addSelectionListener(lsEditSel);
  addDragSourceToTree(tMain);
  tMain.addKeyListener(defKeys);
  tiConnections.setImage(GUIResource.getInstance().getImageConnection());
  tiEntries.setImage(GUIResource.getInstance().getImageBol());
  tiBaseEntries.setImage(GUIResource.getInstance().getImageBol());
  tiPluginEntries.setImage(GUIResource.getInstance().getImageBol());
}
