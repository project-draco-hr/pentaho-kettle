{
  final String[] tables=tablesToRip;
  final DatabaseMeta sourceDbInfo=srcDbInfo;
  final DatabaseMeta targetDbInfo=tgtDbInfo;
  final RepositoryDirectory repdir=repositoryDirectory;
  final String jobname=jobName;
  jobMeta=new JobMeta(log);
  jobMeta.readDatabases(rep);
  setFilename(null);
  jobMeta.setName(jobname);
  jobMeta.setDirectory(repdir);
  refreshTree();
  refreshGraph();
  final Point location=new Point(50,50);
  final JobEntryCopy start=jobMeta.findStart();
  start.setLocation(new Point(location.x,location.y));
  start.setDrawn();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask("Building new job...",tables.length);
      monitor.worked(0);
      JobEntryCopy previous=start;
      for (int i=0; i < tables.length && !monitor.isCanceled(); i++) {
        monitor.setTaskName("Processing table [" + tables[i] + "]...");
        String transname="copy [" + sourceDbInfo + "].["+ tables[i]+ "] to ["+ targetDbInfo+ "]";
        TransMeta ti=new TransMeta((String)null,transname,null);
        ti.setDirectory(repdir);
        String note="Reads information from table [" + tables[i] + "] on database ["+ sourceDbInfo+ "]"+ Const.CR;
        note+="After that, it writes the information to table [" + tables[i] + "] on database ["+ targetDbInfo+ "]";
        NotePadMeta ni=new NotePadMeta(note,150,10,-1,-1);
        ti.addNote(ni);
        String fromstepname="read from [" + tables[i] + "]";
        TableInputMeta tii=new TableInputMeta();
        tii.setDatabaseMeta(sourceDbInfo);
        tii.setSQL("SELECT * FROM " + tables[i]);
        String fromstepid=StepLoader.getInstance().getStepPluginID(tii);
        StepMeta fromstep=new StepMeta(log,fromstepid,fromstepname,(StepMetaInterface)tii);
        fromstep.setLocation(150,100);
        fromstep.setDraw(true);
        fromstep.setDescription("Reads information from table [" + tables[i] + "] on database ["+ sourceDbInfo+ "]");
        ti.addStep(fromstep);
        String tostepname="write to [" + tables[i] + "]";
        TableOutputMeta toi=new TableOutputMeta();
        toi.setDatabase(targetDbInfo);
        toi.setTablename(tables[i]);
        toi.setCommitSize(100);
        toi.setTruncateTable(true);
        String tostepid=StepLoader.getInstance().getStepPluginID(toi);
        StepMeta tostep=new StepMeta(log,tostepid,tostepname,(StepMetaInterface)toi);
        tostep.setLocation(500,100);
        tostep.setDraw(true);
        tostep.setDescription("Write information to table [" + tables[i] + "] on database ["+ targetDbInfo+ "]");
        ti.addStep(tostep);
        TransHopMeta hi=new TransHopMeta(fromstep,tostep);
        ti.addTransHop(hi);
        String tmpSql=tii.getSQL();
        tii.setSQL(tii.getSQL() + sourceDbInfo.getLimitClause(1));
        String sql="";
        try {
          sql=ti.getSQLStatementsString();
        }
 catch (        KettleStepException kse) {
          throw new InvocationTargetException(kse,"Error getting SQL from transformation [" + ti + "] : "+ kse.getMessage());
        }
        tii.setSQL(tmpSql);
        try {
          ti.saveRep(rep);
        }
 catch (        KettleException dbe) {
          throw new InvocationTargetException(dbe,"Unable to save transformation to the repository");
        }
        location.x=250;
        if (i > 0)         location.y+=100;
        if (sql != null && sql.length() > 0) {
          String jesqlname="Create table [" + tables[i] + "]";
          JobEntrySQL jesql=new JobEntrySQL(jesqlname);
          jesql.setDatabase(targetDbInfo);
          jesql.setSQL(sql);
          jesql.setDescription("This executes the SQL to create table [" + targetDbInfo + "].["+ tables[i]+ "]");
          JobEntryCopy jecsql=new JobEntryCopy(log);
          jecsql.setEntry(jesql);
          jecsql.setLocation(new Point(location.x,location.y));
          jecsql.setDrawn();
          jobMeta.addJobEntry(jecsql);
          JobHopMeta jhi=new JobHopMeta(previous,jecsql);
          jobMeta.addJobHop(jhi);
          previous=jecsql;
        }
        String jetransname="Copy data to [" + tables[i] + "]";
        JobEntryTrans jetrans=new JobEntryTrans(jetransname);
        jetrans.setTransname(ti.getName());
        jetrans.setDirectory(ti.getDirectory());
        JobEntryCopy jectrans=new JobEntryCopy(log,jetrans);
        jectrans.setDescription("This job entry executes the transformation to copy data" + Const.CR + "from: ["+ sourceDbInfo+ "].["+ tables[i]+ "]"+ Const.CR+ "to:   ["+ targetDbInfo+ "].["+ tables[i]+ "]");
        jectrans.setDrawn();
        location.x+=400;
        jectrans.setLocation(new Point(location.x,location.y));
        jobMeta.addJobEntry(jectrans);
        JobHopMeta jhi2=new JobHopMeta(previous,jectrans);
        jobMeta.addJobHop(jhi2);
        previous=jectrans;
        monitor.worked(1);
      }
      monitor.worked(100);
      monitor.done();
    }
  }
;
  try {
    ProgressMonitorDialog pmd=new ProgressMonitorDialog(shell);
    pmd.run(false,true,op);
  }
 catch (  InvocationTargetException e) {
    new ErrorDialog(shell,props,"Error ripping database","An error occured ripping the database!",e);
    return false;
  }
catch (  InterruptedException e) {
    new ErrorDialog(shell,props,"Error ripping database","An error occured ripping the database!",e);
    return false;
  }
 finally {
    refreshGraph();
    refreshTree();
  }
  return true;
}
