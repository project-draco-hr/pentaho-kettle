{
  int perms[]=new int[]{PermissionMeta.TYPE_PERMISSION_TRANSFORMATION};
  RepositoriesDialog rd=new RepositoriesDialog(disp,SWT.NONE,perms,APP_NAME);
  rd.getShell().setImage(GUIResource.getInstance().getImageSpoon());
  if (rd.open()) {
    if (rep != null)     rep.disconnect();
    rep=new Repository(log,rd.getRepository(),rd.getUser());
    if (!rep.connect("Spoon")) {
      rep=null;
      MessageBox mb=new MessageBox(shell,SWT.OK | SWT.ICON_ERROR);
      mb.setMessage("An error occured connecting to the repository!" + Const.CR + "See the log for more information.");
      mb.setText("Error!");
      mb.open();
    }
    for (int i=0; i < jobMeta.nrDatabases(); i++) {
      jobMeta.getDatabase(i).setID(-1L);
    }
    jobMeta.setID(-1L);
    ArrayList oldDatabases=jobMeta.getDatabases();
    loadRepositoryObjects();
    for (int i=0; i < oldDatabases.size(); i++) {
      DatabaseMeta oldDatabase=(DatabaseMeta)oldDatabases.get(i);
      DatabaseMeta newDatabase=Const.findDatabase(jobMeta.getDatabases(),oldDatabase.getName());
      if (newDatabase != null) {
        oldDatabase.setDatabaseInterface(newDatabase.getDatabaseInterface());
      }
 else {
        jobMeta.addDatabase(oldDatabase);
      }
    }
    RepositoryDirectory redi=rep.getDirectoryTree().findDirectory(jobMeta.getDirectory().getPath());
    if (redi != null) {
      jobMeta.setDirectory(redi);
    }
 else {
      jobMeta.setDirectory(rep.getDirectoryTree());
    }
    refreshTree();
    setShellText();
  }
 else {
    if (!rd.isCancelled()) {
      closeRepository();
    }
  }
}
