{
  Menu mBar=new Menu(shell,SWT.BAR);
  shell.setMenuBar(mBar);
  MenuItem mFile=new MenuItem(mBar,SWT.CASCADE);
  mFile.setText(Messages.getString("Chef.Menu.File"));
  msFile=new Menu(shell,SWT.DROP_DOWN);
  mFile.setMenu(msFile);
  MenuItem miFileNew=new MenuItem(msFile,SWT.CASCADE);
  miFileNew.setText(Messages.getString("Chef.Menu.File.New"));
  MenuItem miFileOpen=new MenuItem(msFile,SWT.CASCADE);
  miFileOpen.setText(Messages.getString("Chef.Menu.File.Open"));
  MenuItem miFileSave=new MenuItem(msFile,SWT.CASCADE);
  miFileSave.setText(Messages.getString("Chef.Menu.File.Save"));
  MenuItem miFileSaveAs=new MenuItem(msFile,SWT.CASCADE);
  miFileSaveAs.setText(Messages.getString("Chef.Menu.File.SaveAs"));
  new MenuItem(msFile,SWT.SEPARATOR);
  MenuItem miFilePrint=new MenuItem(msFile,SWT.CASCADE);
  miFilePrint.setText(Messages.getString("Chef.Menu.File.Print"));
  new MenuItem(msFile,SWT.SEPARATOR);
  MenuItem miFileQuit=new MenuItem(msFile,SWT.CASCADE);
  miFileQuit.setText(Messages.getString("Chef.Menu.File.Quit"));
  miFileSep3=new MenuItem(msFile,SWT.SEPARATOR);
  addMenuLast();
  Listener lsFileOpen=new Listener(){
    public void handleEvent(    Event e){
      openFile(false);
    }
  }
;
  Listener lsFileNew=new Listener(){
    public void handleEvent(    Event e){
      newFile();
    }
  }
;
  Listener lsFileSave=new Listener(){
    public void handleEvent(    Event e){
      saveFile();
    }
  }
;
  Listener lsFileSaveAs=new Listener(){
    public void handleEvent(    Event e){
      saveFileAs();
    }
  }
;
  Listener lsFilePrint=new Listener(){
    public void handleEvent(    Event e){
      printFile();
    }
  }
;
  Listener lsFileQuit=new Listener(){
    public void handleEvent(    Event e){
      quitFile();
    }
  }
;
  miFileOpen.addListener(SWT.Selection,lsFileOpen);
  miFileNew.addListener(SWT.Selection,lsFileNew);
  miFileSave.addListener(SWT.Selection,lsFileSave);
  miFileSaveAs.addListener(SWT.Selection,lsFileSaveAs);
  miFilePrint.addListener(SWT.Selection,lsFilePrint);
  miFileQuit.addListener(SWT.Selection,lsFileQuit);
  MenuItem mEdit=new MenuItem(mBar,SWT.CASCADE);
  mEdit.setText(Messages.getString("Chef.Menu.Edit"));
  Menu msEdit=new Menu(shell,SWT.DROP_DOWN);
  mEdit.setMenu(msEdit);
  miEditUndo=new MenuItem(msEdit,SWT.CASCADE);
  miEditRedo=new MenuItem(msEdit,SWT.CASCADE);
  setUndoMenu();
  new MenuItem(msEdit,SWT.SEPARATOR);
  MenuItem miEditUnselectAll=new MenuItem(msEdit,SWT.CASCADE);
  miEditUnselectAll.setText(Messages.getString("Chef.Menu.Edit.ClearSelection"));
  MenuItem miEditSelectAll=new MenuItem(msEdit,SWT.CASCADE);
  miEditSelectAll.setText(Messages.getString("Chef.Menu.Edit.SelectAllSteps"));
  new MenuItem(msEdit,SWT.SEPARATOR);
  MenuItem miEditOptions=new MenuItem(msEdit,SWT.CASCADE);
  miEditOptions.setText(Messages.getString("Chef.Menu.Edit.Options"));
  Listener lsEditUndo=new Listener(){
    public void handleEvent(    Event e){
      undoAction();
    }
  }
;
  Listener lsEditRedo=new Listener(){
    public void handleEvent(    Event e){
      redoAction();
    }
  }
;
  Listener lsEditUnselectAll=new Listener(){
    public void handleEvent(    Event e){
      editUnselectAll();
    }
  }
;
  Listener lsEditSelectAll=new Listener(){
    public void handleEvent(    Event e){
      editSelectAll();
    }
  }
;
  Listener lsEditOptions=new Listener(){
    public void handleEvent(    Event e){
      editOptions();
    }
  }
;
  miEditUndo.addListener(SWT.Selection,lsEditUndo);
  miEditRedo.addListener(SWT.Selection,lsEditRedo);
  miEditUnselectAll.addListener(SWT.Selection,lsEditUnselectAll);
  miEditSelectAll.addListener(SWT.Selection,lsEditSelectAll);
  miEditOptions.addListener(SWT.Selection,lsEditOptions);
  MenuItem mRep=new MenuItem(mBar,SWT.CASCADE);
  mRep.setText(Messages.getString("Chef.Menu.Repository"));
  Menu msRep=new Menu(shell,SWT.DROP_DOWN);
  mRep.setMenu(msRep);
  MenuItem miRepConnect=new MenuItem(msRep,SWT.CASCADE);
  miRepConnect.setText(Messages.getString("Chef.Menu.Repository.Connect"));
  MenuItem miRepDisconnect=new MenuItem(msRep,SWT.CASCADE);
  miRepDisconnect.setText(Messages.getString("Chef.Menu.Repository.Disconnect"));
  MenuItem miRepExplore=new MenuItem(msRep,SWT.CASCADE);
  miRepExplore.setText(Messages.getString("Chef.Menu.Repository.Explore"));
  new MenuItem(msRep,SWT.SEPARATOR);
  MenuItem miRepUser=new MenuItem(msRep,SWT.CASCADE);
  miRepUser.setText(Messages.getString("Chef.Menu.Repository.EditUser"));
  Listener lsRepConnect=new Listener(){
    public void handleEvent(    Event e){
      openRepository();
    }
  }
;
  Listener lsRepDisconnect=new Listener(){
    public void handleEvent(    Event e){
      closeRepository();
    }
  }
;
  Listener lsRepExplore=new Listener(){
    public void handleEvent(    Event e){
      exploreRepository();
    }
  }
;
  Listener lsRepUser=new Listener(){
    public void handleEvent(    Event e){
      editRepositoryUser();
    }
  }
;
  miRepConnect.addListener(SWT.Selection,lsRepConnect);
  miRepDisconnect.addListener(SWT.Selection,lsRepDisconnect);
  miRepExplore.addListener(SWT.Selection,lsRepExplore);
  miRepUser.addListener(SWT.Selection,lsRepUser);
  MenuItem mJob=new MenuItem(mBar,SWT.CASCADE);
  mJob.setText(Messages.getString("Chef.Menu.Job"));
  Menu msJob=new Menu(shell,SWT.DROP_DOWN);
  mJob.setMenu(msJob);
  MenuItem miJobRun=new MenuItem(msJob,SWT.CASCADE);
  miJobRun.setText(Messages.getString("Chef.Menu.Job.Run"));
  new MenuItem(msJob,SWT.SEPARATOR);
  MenuItem miJobCopy=new MenuItem(msJob,SWT.CASCADE);
  miJobCopy.setText(Messages.getString("Chef.Menu.Job.CopyToClipboard"));
  new MenuItem(msJob,SWT.SEPARATOR);
  MenuItem miJobInfo=new MenuItem(msJob,SWT.CASCADE);
  miJobInfo.setText(Messages.getString("Chef.Menu.Job.Settings"));
  Listener lsJobRun=new Listener(){
    public void handleEvent(    Event e){
      tabfolder.setSelection(1);
      cheflog.startJob();
    }
  }
;
  miJobRun.addListener(SWT.Selection,lsJobRun);
  Listener lsJobInfo=new Listener(){
    public void handleEvent(    Event e){
      setJob();
    }
  }
;
  miJobInfo.addListener(SWT.Selection,lsJobInfo);
  Listener lsJobCopy=new Listener(){
    public void handleEvent(    Event e){
      toClipboard(XMLHandler.getXMLHeader() + jobMeta.getXML());
    }
  }
;
  miJobCopy.addListener(SWT.Selection,lsJobCopy);
  MenuItem mWizard=new MenuItem(mBar,SWT.CASCADE);
  mWizard.setText(Messages.getString("Chef.Menu.Wizard"));
  Menu msWizard=new Menu(shell,SWT.DROP_DOWN);
  mWizard.setMenu(msWizard);
  MenuItem miWizardNewConnection=new MenuItem(msWizard,SWT.CASCADE);
  miWizardNewConnection.setText(Messages.getString("Chef.Menu.Wizard.CreateDatabaseConnection"));
  Listener lsWizardNewConnection=new Listener(){
    public void handleEvent(    Event e){
      createDatabaseWizard();
    }
  }
;
  miWizardNewConnection.addListener(SWT.Selection,lsWizardNewConnection);
  MenuItem miWizardRipDatabase=new MenuItem(msWizard,SWT.CASCADE);
  miWizardRipDatabase.setText(Messages.getString("Chef.Menu.Wizard.CopyTables"));
  Listener lsWizardRipDatabase=new Listener(){
    public void handleEvent(    Event e){
      ripDBWizard();
    }
  }
;
  miWizardRipDatabase.addListener(SWT.Selection,lsWizardRipDatabase);
  MenuItem mHelp=new MenuItem(mBar,SWT.CASCADE);
  mHelp.setText(Messages.getString("Chef.Menu.Help"));
  Menu msHelp=new Menu(shell,SWT.DROP_DOWN);
  mHelp.setMenu(msHelp);
  MenuItem miHelpAbout=new MenuItem(msHelp,SWT.CASCADE);
  miHelpAbout.setText(Messages.getString("Chef.Menu.Help.About"));
  Listener lsHelpAbout=new Listener(){
    public void handleEvent(    Event e){
      helpAbout();
    }
  }
;
  miHelpAbout.addListener(SWT.Selection,lsHelpAbout);
}
