{
  final int gettersAmount=30;
  final int cycles=100;
  AtomicBoolean condition=new AtomicBoolean(true);
  List<Getter> getters=new ArrayList<Getter>(gettersAmount);
  for (int i=0; i < gettersAmount; i++) {
    Class<? extends PluginTypeInterface> type=(i % 2 == 0) ? type1 : type2;
    getters.add(new Getter(type,condition));
  }
  List<Registrar> registrars=asList(new Registrar(type1,cycles,type1.getName()),new Registrar(type2,cycles,type2.getName()));
  TestRunner runner=new TestRunner(registrars,getters,condition);
  runner.runConcurrentTest();
  List<Exception> exceptions=runner.getExceptions();
  if (!exceptions.isEmpty()) {
    for (    Exception exception : exceptions) {
      exception.printStackTrace();
    }
    fail("There is expected no exceptions during the test");
  }
}
