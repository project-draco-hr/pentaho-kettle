{
  LogWriter log=LogWriter.getInstance();
  Result result=previousResult;
  result.setResult(false);
  if (connection != null) {
    Database db=new Database(connection);
    db.shareVariablesWith(this);
    try {
      db.connect();
      String realTablename=environmentSubstitute(tablename);
      String realSchemaname=environmentSubstitute(schemaname);
      if (!Const.isEmpty(realSchemaname)) {
        realTablename=db.getDatabaseMeta().getQuotedSchemaTableCombination(realSchemaname,realTablename);
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("TableExists.Log.SchemaTable",realTablename));
      }
      if (db.checkTableExists(realTablename)) {
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("TableExists.Log.TableExists",realTablename));
        result.setResult(true);
      }
 else {
        if (log.isDetailed())         log.logDetailed(toString(),Messages.getString("TableExists.Log.TableNotExists",realTablename));
      }
    }
 catch (    KettleDatabaseException dbe) {
      result.setNrErrors(1);
      log.logError(toString(),Messages.getString("TableExists.Error.RunningJobEntry",dbe.getMessage()));
    }
 finally {
      if (db != null)       try {
        db.disconnect();
      }
 catch (      Exception e) {
      }
      ;
    }
  }
 else {
    result.setNrErrors(1);
    log.logError(toString(),Messages.getString("TableExists.Error.NoConnectionDefined"));
  }
  return result;
}
