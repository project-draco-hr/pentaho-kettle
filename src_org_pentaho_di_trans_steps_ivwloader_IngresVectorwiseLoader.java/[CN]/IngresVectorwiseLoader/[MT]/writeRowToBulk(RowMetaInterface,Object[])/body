{
  try {
    byte[] delimiter;
    if (meta.isUseSSV()) {
      delimiter=data.semicolon;
    }
 else {
      delimiter=data.separator;
    }
    for (int i=0; i < data.keynrs.length; i++) {
      if (i > 0) {
        write(delimiter);
      }
      int index=data.keynrs[i];
      ValueMetaInterface valueMeta=rowMeta.getValueMeta(index);
      Object valueData=r[index];
      if (valueData == null) {
      }
 else {
        if (valueMeta.isStorageBinaryString()) {
          byte[] value=valueMeta.getBinaryString(valueData);
          write(value);
        }
 else {
          String string=valueMeta.getString(valueData);
          if (string != null) {
            if (meta.isUseSSV()) {
              if (meta.isEscapingSpecialCharacters() && valueMeta.isString()) {
                StringBuilder builder=new StringBuilder(string);
                String[] escapeStrings=new String[]{"\"","\n","\r"};
                String[] replaceStrings=new String[]{"\\\"","\\n","\\r"};
                for (int e=0; e < escapeStrings.length; e++) {
                  String chr=escapeStrings[e];
                  String rep=replaceStrings[e];
                  int idx=builder.indexOf(chr,0);
                  while (idx > 0) {
                    builder.replace(idx,idx + chr.length(),rep);
                    idx=builder.indexOf(chr,idx + rep.length());
                  }
                }
                string=builder.toString();
              }
              write(data.doubleQuote);
              write(data.getBytes(string));
              write(data.doubleQuote);
            }
 else {
              write(data.getBytes(string));
            }
          }
        }
      }
    }
    write(data.newline);
  }
 catch (  Exception e) {
    try {
      data.sqlRunner.checkExcn();
    }
 catch (    Exception loadEx) {
      throw new KettleException("Error serializing rows of data to the fifo file",loadEx);
    }
    throw new KettleException("Error serializing rows of data to the fifo file",e);
  }
}
