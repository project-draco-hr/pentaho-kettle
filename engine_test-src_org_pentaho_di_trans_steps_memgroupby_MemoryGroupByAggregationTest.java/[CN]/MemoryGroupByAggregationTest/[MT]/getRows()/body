{
  if (data.isEmpty()) {
    return ImmutableSet.of();
  }
  Range<Integer> rows=Range.closed(0,data.rowMap().lastKey());
  return FluentIterable.from(ContiguousSet.create(rows,DiscreteDomain.integers())).transform(Functions.forMap(data.rowMap(),ImmutableMap.<Integer,Optional<Object>>of())).transform(new Function<Map<Integer,Optional<Object>>,Object[]>(){
    @Override public Object[] apply(    Map<Integer,Optional<Object>> input){
      Object[] row=new Object[rowMeta.size()];
      for (      Map.Entry<Integer,Optional<Object>> entry : input.entrySet()) {
        row[entry.getKey()]=entry.getValue().orNull();
      }
      return row;
    }
  }
);
}
