{
  variables.setVariable(Const.KETTLE_AGGREGATION_ALL_NULLS_ARE_ZERO,"Y");
  addColumn(new ValueMetaInteger("nul"));
  addColumn(new ValueMetaInteger("both"),-2L,0L,null,10L);
  addColumn(new ValueMetaNumber("both_num"),-2.0,0.0,null,10.0);
  RowMetaAndData output=runStep();
  assertThat(output.getInteger("nul_min"),is(0L));
  assertThat(output.getInteger("nul_max"),is(0L));
  assertThat(output.getInteger("nul_sum"),is(0L));
  assertThat(output.getInteger("nul_ave"),is(0L));
  assertThat(output.getInteger("nul_count"),is(0L));
  assertThat(output.getInteger("nul_count_any"),is(4L));
  assertThat(output.getInteger("nul_count_distinct"),is(0L));
  assertThat(output.getInteger("both_max"),is(10L));
  assertThat(output.getInteger("both_min"),is(-2L));
  assertThat(output.getInteger("both_sum"),is(8L));
  assertThat(output.getInteger("both_ave"),is(2L));
  assertThat(output.getInteger("both_count"),is(3L));
  assertThat(output.getInteger("both_count_any"),is(4L));
  assertThat(output.getInteger("both_count_distinct"),is(3L));
  assertThat(output.getNumber("both_num_max",Double.NaN),is(10.0));
  assertThat(output.getNumber("both_num_min",Double.NaN),is(-2.0));
  assertThat(output.getNumber("both_num_sum",Double.NaN),is(8.0));
  assertEquals(2.666666,output.getNumber("both_num_ave",Double.NaN),0.000001);
  assertThat(output.getInteger("both_num_count"),is(3L));
  assertThat(output.getInteger("both_num_count_any"),is(4L));
  assertThat(output.getInteger("both_num_count_distinct"),is(3L));
}
