{
  try {
    rep.saveStepAttribute(id_transformation,id_step,"include",includeFilename);
    rep.saveStepAttribute(id_transformation,id_step,"include_field",filenameField);
    rep.saveStepAttribute(id_transformation,id_step,"rownum",includeRowNumber);
    rep.saveStepAttribute(id_transformation,id_step,"rownum_field",rowNumberField);
    rep.saveStepAttribute(id_transformation,id_step,"limit",rowLimit);
    for (int i=0; i < fileName.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"file_name",fileName[i]);
      rep.saveStepAttribute(id_transformation,id_step,i,"file_mask",fileMask[i]);
    }
    for (int i=0; i < this.getDefinitionLength(); i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"def_element",this.getDefiningElement(i));
      rep.saveStepAttribute(id_transformation,id_step,i,"def_attribute",this.getDefiningAttribute(i));
    }
    for (int i=0; i < inputFields.length; i++) {
      XMLInputSaxField field=inputFields[i];
      rep.saveStepAttribute(id_transformation,id_step,i,"field_name",field.getName());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_type",field.getTypeDesc());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_format",field.getFormat());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_currency",field.getCurrencySymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_decimal",field.getDecimalSymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_group",field.getGroupSymbol());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_length",field.getLength());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_precision",field.getPrecision());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_trim_type",field.getTrimTypeDesc());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_repeat",field.isRepeated());
      rep.saveStepAttribute(id_transformation,id_step,i,"field_position_code",field.getFieldPositionsCode());
    }
    for (int i=0; i < inputPosition.length; i++) {
      rep.saveStepAttribute(id_transformation,id_step,i,"input_position",inputPosition[i].toString());
    }
  }
 catch (  Exception e) {
    throw new KettleException("Unable to save step information to the repository for id_step=" + id_step,e);
  }
}
