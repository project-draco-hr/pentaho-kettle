{
  Shell parent=getParent();
  Display display=parent.getDisplay();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);
  props.setLook(shell);
  ModifyListener lsMod=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      input.setChanged();
    }
  }
;
  changed=input.hasChanged();
  FormLayout formLayout=new FormLayout();
  formLayout.marginWidth=Const.FORM_MARGIN;
  formLayout.marginHeight=Const.FORM_MARGIN;
  shell.setLayout(formLayout);
  shell.setText("Mapping (excute sub-transformation)");
  int middle=props.getMiddlePct();
  int margin=Const.MARGIN;
  wlStepname=new Label(shell,SWT.RIGHT);
  wlStepname.setText("Step name ");
  props.setLook(wlStepname);
  fdlStepname=new FormData();
  fdlStepname.left=new FormAttachment(0,0);
  fdlStepname.right=new FormAttachment(middle,-margin);
  fdlStepname.top=new FormAttachment(0,margin);
  wlStepname.setLayoutData(fdlStepname);
  wStepname=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wStepname.setText(stepname);
  props.setLook(wStepname);
  wStepname.addModifyListener(lsMod);
  fdStepname=new FormData();
  fdStepname.left=new FormAttachment(middle,0);
  fdStepname.top=new FormAttachment(0,margin);
  fdStepname.right=new FormAttachment(100,0);
  wStepname.setLayoutData(fdStepname);
  wlTransformation=new Label(shell,SWT.RIGHT);
  wlTransformation.setText("Transformation ");
  props.setLook(wlTransformation);
  fdlTransformation=new FormData();
  fdlTransformation.left=new FormAttachment(0,0);
  fdlTransformation.right=new FormAttachment(middle,-margin);
  fdlTransformation.top=new FormAttachment(wStepname,margin);
  wlTransformation.setLayoutData(fdlTransformation);
  wbTransformation=new Button(shell,SWT.PUSH);
  wbTransformation.setText("...");
  props.setLook(wbTransformation);
  fdbTransformation=new FormData();
  fdbTransformation.right=new FormAttachment(100,0);
  fdbTransformation.top=new FormAttachment(wStepname,margin);
  wbTransformation.setLayoutData(fdbTransformation);
  wTransformation=new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER);
  wTransformation.setEditable(false);
  props.setLook(wTransformation);
  wTransformation.addModifyListener(lsMod);
  fdTransformation=new FormData();
  fdTransformation.left=new FormAttachment(middle,0);
  fdTransformation.right=new FormAttachment(wbTransformation,-margin);
  fdTransformation.top=new FormAttachment(wStepname,margin);
  wTransformation.setLayoutData(fdTransformation);
  wbTransformation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (repository != null) {
        try {
          SelectObjectDialog sod=new SelectObjectDialog(shell,props,repository,true,false,false);
          String transName=sod.open();
          RepositoryDirectory repdir=sod.getDirectory();
          if (transName != null && repdir != null) {
            mappingTransMeta=new TransMeta(repository,transName,repdir);
            System.out.println("transformation id: " + transMeta.getID());
            updateTransformationPath(mappingTransMeta);
          }
        }
 catch (        KettleException ke) {
          new ErrorDialog(shell,props,"Error","Error selecting object from repository",ke);
        }
      }
 else {
        new ErrorDialog(shell,props,"Sorry","XML Files are not yet supported",new KettleException("XML Files are not yet accepted"));
      }
    }
  }
);
  wOK=new Button(shell,SWT.PUSH);
  wOK.setText("  &OK  ");
  wCancel=new Button(shell,SWT.PUSH);
  wCancel.setText("  &Cancel  ");
  setButtonPositions(new Button[]{wOK,wCancel},margin,wTransformation);
  lsCancel=new Listener(){
    public void handleEvent(    Event e){
      cancel();
    }
  }
;
  lsOK=new Listener(){
    public void handleEvent(    Event e){
      ok();
    }
  }
;
  wCancel.addListener(SWT.Selection,lsCancel);
  wOK.addListener(SWT.Selection,lsOK);
  lsDef=new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      ok();
    }
  }
;
  wStepname.addSelectionListener(lsDef);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      cancel();
    }
  }
);
  setSize();
  getData();
  input.setChanged(changed);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return stepname;
}
