{
  stepname=wStepname.getText();
  if (Const.isEmpty(wTransformation.getText())) {
    input.setMappingTransMeta(null);
  }
 else {
    if (transModified && repository == null) {
      try {
        if (repository == null) {
          input.setFileName(wTransformation.getText());
          input.loadMappingMeta(repository);
          input.getMappingTransMeta().setFilename(wTransformation.getText());
        }
      }
 catch (      KettleException e) {
        new ErrorDialog(shell,props,"Error","There was an error parsing transformation [" + wTransformation.getText() + "]");
      }
    }
 else {
      input.setMappingTransMeta(mappingTransMeta);
    }
  }
  int nrInput=wInputFields.nrNonEmpty();
  int nrOutput=wOutputFields.nrNonEmpty();
  input.allocate(nrInput,nrOutput);
  for (int i=0; i < nrInput; i++) {
    TableItem item=wInputFields.getNonEmpty(i);
    input.getInputField()[i]=item.getText(1);
    input.getInputMapping()[i]=item.getText(2);
  }
  for (int i=0; i < nrOutput; i++) {
    TableItem item=wOutputFields.getNonEmpty(i);
    input.getOutputMapping()[i]=item.getText(1);
    input.getOutputField()[i]=item.getText(2);
  }
  dispose();
}
