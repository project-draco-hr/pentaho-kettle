{
  shell.getDisplay().asyncExec(new Runnable(){
    public void run(){
      List<SpoonUiExtenderPluginInterface> relevantExtenders=SpoonUiExtenderPluginType.getInstance().getRelevantExtenders(TransPreviewDialogSetDataWrapper.class,TRANS_PREVIEW_DIALOG_SET_DATA);
      TransPreviewDialogSetDataWrapper transDebugMetaWrapper=new TransPreviewDialogSetDataWrapper(TransPreviewDialog.this,stepDebugMeta);
      for (      SpoonUiExtenderPluginInterface relevantExtender : relevantExtenders) {
        relevantExtender.uiEvent(transDebugMetaWrapper,TRANS_PREVIEW_DIALOG_SET_DATA);
      }
      String stepName=stepDebugMeta.getStepMeta().getName();
      shell.setText(stepName);
      wlFields.setText(BaseMessages.getString(PKG,"PreviewRowsDialog.Header",stepName));
      int margin=Const.MARGIN;
      ColumnInfo[] colinf=new ColumnInfo[rowMeta.size()];
      for (int i=0; i < rowMeta.size(); i++) {
        ValueMetaInterface v=rowMeta.getValueMeta(i);
        colinf[i]=new ColumnInfo(v.getName(),ColumnInfo.COLUMN_TYPE_TEXT,v.isNumeric());
        colinf[i].setToolTip(v.toStringMeta());
        colinf[i].setValueMeta(v);
      }
      if (wFields != null) {
        wFields.dispose();
      }
      wFields=new TableView(variables,rowsComposite,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,colinf,0,null,props);
      FormData fdFields=new FormData();
      fdFields.left=new FormAttachment(0,0);
      fdFields.top=new FormAttachment(wlFields,margin);
      fdFields.right=new FormAttachment(100,0);
      fdFields.bottom=new FormAttachment(100,0);
      wFields.setLayoutData(fdFields);
      wFields.setShowingBlueNullValues(true);
      shell.layout(true,true);
      int i=0;
      for (      Object[] row : buffer) {
        TableItem item;
        if (i == 0) {
          item=wFields.table.getItem(i);
        }
 else {
          item=new TableItem(wFields.table,SWT.NONE);
        }
        int nrErrors=0;
        String strNr;
        int lineNr=i + 1;
        try {
          strNr=wFields.getNumberColumn().getValueMeta().getString(new Long(lineNr));
        }
 catch (        Exception e) {
          strNr=Integer.toString(lineNr);
        }
        item.setText(0,strNr);
        for (int c=0; c < rowMeta.size(); c++) {
          ValueMetaInterface v=rowMeta.getValueMeta(c);
          String show;
          try {
            show=v.getString(row[c]);
            if (v.isBinary() && show != null && show.length() > MAX_BINARY_STRING_PREVIEW_SIZE) {
              show=show.substring(0,MAX_BINARY_STRING_PREVIEW_SIZE);
            }
          }
 catch (          KettleValueException e) {
            nrErrors++;
            if (nrErrors < 25) {
              log.logError(Const.getStackTracker(e));
            }
            show=null;
          }
catch (          ArrayIndexOutOfBoundsException e) {
            nrErrors++;
            if (nrErrors < 25) {
              log.logError(Const.getStackTracker(e));
            }
            show=null;
          }
          if (show != null) {
            item.setText(c + 1,show);
            item.setForeground(c + 1,GUIResource.getInstance().getColorBlack());
          }
 else {
            item.setText(c + 1,"<null>");
            item.setForeground(c + 1,GUIResource.getInstance().getColorBlue());
          }
        }
        i++;
      }
      if (!wFields.isDisposed()) {
        wFields.optWidth(true,200);
      }
      wNext.setEnabled(true);
    }
  }
);
}
