{
  KettleEnvironment.init();
  TransMeta transMeta=new TransMeta();
  transMeta.setName("constanttest1");
  PluginRegistry registry=PluginRegistry.getInstance();
  String rowGeneratorStepname="row generator step";
  RowGeneratorMeta rm=new RowGeneratorMeta();
  String rowGeneratorPid=registry.getPluginId(StepPluginType.class,rm);
  StepMeta rowGeneratorStep=new StepMeta(rowGeneratorPid,rowGeneratorStepname,rm);
  transMeta.addStep(rowGeneratorStep);
  String[] fieldName={};
  String[] type={};
  String[] value={};
  String[] fieldFormat={};
  String[] group={};
  String[] decimal={};
  int[] intDummies={};
  rm.setDefault();
  rm.setFieldName(fieldName);
  rm.setFieldType(type);
  rm.setValue(value);
  rm.setFieldLength(intDummies);
  rm.setFieldPrecision(intDummies);
  rm.setRowLimit("1");
  rm.setFieldFormat(fieldFormat);
  rm.setGroup(group);
  rm.setDecimal(decimal);
  String constStepname1="constant 1";
  ConstantMeta cnst1=new ConstantMeta();
  String[] fieldName1={"boolean1","boolean2","boolean3","boolean4","boolean5","boolean6","boolean7","string1","string2","string3","integer1","integer2","integer3","integer4","number1","number2","number3","number4","timestamp1"};
  String[] type1={"boolean","Boolean","bOOLEAN","BOOLEAN","boolean","boolean","boolean","string","string","String","integer","integer","integer","integer","number","number","number","number","timestamp"};
  String[] value1={"Y","T","a","TRUE","0","9","","AAAAAAAAAAAAAA","   ","","-100","0","212","","-100.2","0.0","212.23","","1970-01-01 00:00:00.000"};
  String[] fieldFormat1={"","","","","","","","","","","","","","","","","","",""};
  String[] group1={"","","","","","","","","","","","","","",",",",",",",",",""};
  String[] decimal1={"","","","","","","","","","","","","","",".",".",".",".",""};
  String[] currency={"","","","","","","","","","","","","","","","","","",""};
  int[] intDummies1={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  boolean[] setEmptystring={false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};
  cnst1.setFieldName(fieldName1);
  cnst1.setFieldType(type1);
  cnst1.setValue(value1);
  cnst1.setFieldLength(intDummies1);
  cnst1.setFieldPrecision(intDummies1);
  cnst1.setFieldFormat(fieldFormat1);
  cnst1.setGroup(group1);
  cnst1.setDecimal(decimal1);
  cnst1.setCurrency(currency);
  cnst1.setEmptyString(setEmptystring);
  String addSeqPid1=registry.getPluginId(StepPluginType.class,cnst1);
  StepMeta addSeqStep1=new StepMeta(addSeqPid1,constStepname1,cnst1);
  transMeta.addStep(addSeqStep1);
  TransHopMeta hi1=new TransHopMeta(rowGeneratorStep,addSeqStep1);
  transMeta.addTransHop(hi1);
  Trans trans=new Trans(transMeta);
  trans.prepareExecution(null);
  StepInterface si=trans.getStepInterface(constStepname1,0);
  RowStepCollector endRc=new RowStepCollector();
  si.addRowListener(endRc);
  trans.startThreads();
  trans.waitUntilFinished();
  List<RowMetaAndData> goldenImageRows=createResultData1();
  List<RowMetaAndData> resultRows1=endRc.getRowsWritten();
  checkRows(resultRows1,goldenImageRows);
}
