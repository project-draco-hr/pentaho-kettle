{
  StringBuffer retval=new StringBuffer(300);
  retval.append("    <filter>").append(Const.CR);
  retval.append("      ").append(XMLHandler.addTagValue("filterfiletype",fileTypeFilter.toString()));
  retval.append("    </filter>").append(Const.CR);
  retval.append("    ").append(XMLHandler.addTagValue("doNotFailIfNoFile",doNotFailIfNoFile));
  retval.append("    ").append(XMLHandler.addTagValue("rownum",includeRowNumber));
  retval.append("    ").append(XMLHandler.addTagValue("isaddresult",isaddresult));
  retval.append("    ").append(XMLHandler.addTagValue("filefield",filefield));
  retval.append("    ").append(XMLHandler.addTagValue("rownum_field",rowNumberField));
  retval.append("    ").append(XMLHandler.addTagValue("filename_Field",dynamicFilenameField));
  retval.append("    ").append(XMLHandler.addTagValue("wildcard_Field",dynamicWildcardField));
  retval.append("    ").append(XMLHandler.addTagValue("exclude_wildcard_Field",dynamicExcludeWildcardField));
  retval.append("    ").append(XMLHandler.addTagValue("dynamic_include_subfolders",dynamicIncludeSubFolders));
  retval.append("    ").append(XMLHandler.addTagValue("limit",rowLimit));
  retval.append("    <file>").append(Const.CR);
  for (int i=0; i < fileName.length; i++) {
    retval.append("      ").append(XMLHandler.addTagValue("name",fileName[i]));
    retval.append("      ").append(XMLHandler.addTagValue("filemask",fileMask[i]));
    retval.append("      ").append(XMLHandler.addTagValue("exclude_filemask",excludeFileMask[i]));
    retval.append("      ").append(XMLHandler.addTagValue("file_required",fileRequired[i]));
    retval.append("      ").append(XMLHandler.addTagValue("include_subfolders",includeSubFolders[i]));
  }
  retval.append("    </file>").append(Const.CR);
  return retval.toString();
}
