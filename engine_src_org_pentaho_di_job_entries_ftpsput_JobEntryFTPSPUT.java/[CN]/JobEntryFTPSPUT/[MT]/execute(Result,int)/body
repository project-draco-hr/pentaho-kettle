{
  Result result=previousResult;
  result.setResult(false);
  long filesput=0;
  if (isDetailed()) {
    logDetailed(BaseMessages.getString(PKG,"JobFTPSPUT.Log.Starting"));
  }
  String realServerName=environmentSubstitute(serverName);
  String realServerPort=environmentSubstitute(serverPort);
  String realUsername=environmentSubstitute(userName);
  String realPassword=Encr.decryptPasswordOptionallyEncrypted(environmentSubstitute(password));
  String realRemoteDirectory=environmentSubstitute(remoteDirectory);
  String realWildcard=environmentSubstitute(wildcard);
  String realLocalDirectory=environmentSubstitute(localDirectory);
  FTPSConnection connection=null;
  try {
    int realPort=Const.toInt(environmentSubstitute(realServerPort),0);
    connection=new FTPSConnection(getConnectionType(),realServerName,realPort,realUsername,realPassword);
    this.buildFTPSConnection(connection);
    if (!Utils.isEmpty(realRemoteDirectory)) {
      connection.changeDirectory(realRemoteDirectory);
      if (isDetailed()) {
        logDetailed(BaseMessages.getString(PKG,"JobFTPSPUT.Log.ChangedDirectory",realRemoteDirectory));
      }
    }
    realRemoteDirectory=Const.NVL(realRemoteDirectory,FTPSConnection.HOME_FOLDER);
    ArrayList<String> myFileList=new ArrayList<String>();
    File localFiles=new File(realLocalDirectory);
    if (!localFiles.exists()) {
      String error=BaseMessages.getString(PKG,"JobFTPSPUT.LocalFileDirectoryNotExists") + realLocalDirectory;
      throw new Exception(error);
    }
    File[] children=localFiles.listFiles();
    for (int i=0; i < children.length; i++) {
      if (!children[i].isDirectory()) {
        myFileList.add(children[i].getName());
      }
    }
    String[] filelist=new String[myFileList.size()];
    myFileList.toArray(filelist);
    if (isDetailed()) {
      logDetailed(BaseMessages.getString(PKG,"JobFTPSPUT.Log.FoundFileLocalDirectory",filelist.length,realLocalDirectory));
    }
    Pattern pattern=null;
    if (!Utils.isEmpty(realWildcard)) {
      pattern=Pattern.compile(realWildcard);
    }
    for (int i=0; i < filelist.length && !parentJob.isStopped(); i++) {
      boolean getIt=true;
      if (pattern != null) {
        Matcher matcher=pattern.matcher(filelist[i]);
        getIt=matcher.matches();
      }
      if (getIt) {
        boolean fileExist=connection.isFileExists(filelist[i]);
        if (isDebug()) {
          if (fileExist) {
            logDebug(BaseMessages.getString(PKG,"JobFTPSPUT.Log.FileExists",filelist[i]));
          }
 else {
            logDebug(BaseMessages.getString(PKG,"JobFTPSPUT.Log.FileDoesNotExists",filelist[i]));
          }
        }
        if (!fileExist || (!onlyPuttingNewFiles && fileExist)) {
          String localFilename=realLocalDirectory + Const.FILE_SEPARATOR + filelist[i];
          if (isDebug()) {
            logDebug(BaseMessages.getString(PKG,"JobFTPSPUT.Log.PuttingFileToRemoteDirectory",localFilename,realRemoteDirectory));
          }
          connection.uploadFile(localFilename,filelist[i]);
          filesput++;
          if (remove) {
            new File(localFilename).delete();
            if (isDetailed()) {
              logDetailed(BaseMessages.getString(PKG,"JobFTPSPUT.Log.DeletedFile",localFilename));
            }
          }
        }
      }
    }
    result.setResult(true);
    result.setNrLinesOutput(filesput);
    if (isDetailed()) {
      logDebug(BaseMessages.getString(PKG,"JobFTPSPUT.Log.WeHavePut",filesput));
    }
  }
 catch (  Exception e) {
    result.setNrErrors(1);
    logError(BaseMessages.getString(PKG,"JobFTPSPUT.Log.ErrorPuttingFiles",e.getMessage()));
    logError(Const.getStackTracker(e));
  }
 finally {
    if (connection != null) {
      try {
        connection.disconnect();
      }
 catch (      Exception e) {
        logError(BaseMessages.getString(PKG,"JobFTPSPUT.Log.ErrorQuitingFTP",e.getMessage()));
      }
    }
  }
  return result;
}
