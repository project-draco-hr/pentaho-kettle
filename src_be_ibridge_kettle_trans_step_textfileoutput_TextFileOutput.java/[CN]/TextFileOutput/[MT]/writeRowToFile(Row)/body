{
  debug="row to file";
  Value v;
  try {
    debug="Start";
    if (first) {
      first=false;
      if (!meta.isFileAppended() && (meta.isHeaderEnabled() || meta.isFooterEnabled())) {
        data.headerrow=new Row(r);
        if (meta.isHeaderEnabled()) {
          if (writeHeader())           return false;
        }
      }
      data.fieldnrs=new int[meta.getOutputFields().length];
      debug="Get fieldnrs... field_name.length=" + meta.getOutputFields().length;
      for (int i=0; i < meta.getOutputFields().length; i++) {
        data.fieldnrs[i]=r.searchValueIndex(meta.getOutputFields()[i].getName());
        if (data.fieldnrs[i] < 0) {
          logError("Field [" + meta.getOutputFields()[i].getName() + "] couldn't be found in the input stream!");
          setErrors(1);
          stopAll();
          return false;
        }
      }
    }
    if (meta.getOutputFields() == null || meta.getOutputFields().length == 0) {
      debug="Loop fields 0.." + r.size();
      for (int i=0; i < r.size(); i++) {
        debug="start for loop";
        if (i > 0)         data.fw.write(meta.getSeparator().getBytes());
        debug="Get value " + i + " of "+ r.size();
        v=r.getValue(i);
        debug="Write field to output stream: [" + v.toString() + "] of type ["+ v.toStringMeta()+ "]";
        writeField(v,-1);
      }
      data.fw.write(meta.getNewline().getBytes());
    }
 else {
      debug="Loop fields 0.." + meta.getOutputFields().length;
      for (int i=0; i < meta.getOutputFields().length; i++) {
        debug="start for loop";
        if (i > 0)         data.fw.write(meta.getSeparator().getBytes());
        debug="Get value " + data.fieldnrs[i] + " of row ";
        v=r.getValue(data.fieldnrs[i]);
        v.setLength(meta.getOutputFields()[i].getLength(),meta.getOutputFields()[i].getPrecision());
        writeField(v,i);
      }
      data.fw.write(meta.getNewline().getBytes());
    }
  }
 catch (  Exception e) {
    logError("Error writing line in [" + debug + "] :"+ e.toString());
    return false;
  }
  linesOutput++;
  return true;
}
