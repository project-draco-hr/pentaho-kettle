{
  String retval="";
  TextFileField field=null;
  if (idx >= 0)   field=meta.getOutputFields()[idx];
  if (v.isString()) {
    if (v.isNull() || v.getString() == null) {
      if (idx >= 0 && field != null && field.getNullString() != null) {
        if (meta.isEnclosureForced() && meta.getEnclosure() != null) {
          retval=meta.getEnclosure() + field.getNullString() + meta.getEnclosure();
        }
 else {
          retval=field.getNullString();
        }
      }
    }
 else {
      String value=v.toString();
      String separator=meta.getSeparator();
      boolean enclosureIsOptional=!meta.isEnclosureForced();
      if (separator == null || (value.indexOf(separator) < 0 && enclosureIsOptional)) {
        retval=v.toString();
      }
 else {
        retval=meta.getEnclosure() + v.toString() + meta.getEnclosure();
      }
    }
  }
 else   if (v.isBigNumber() || v.isNumber() || v.isInteger()) {
    if (idx >= 0 && field != null && field.getFormat() != null) {
      if (v.isNull()) {
        if (field.getNullString() != null)         retval=field.getNullString();
 else         retval="";
      }
 else {
        if (!Const.isEmpty(field.getFormat())) {
          data.df.applyPattern(field.getFormat());
        }
 else {
          data.df.applyPattern(data.defaultDecimalFormat.toLocalizedPattern());
        }
        if (!Const.isEmpty(field.getDecimalSymbol())) {
          data.dfs.setDecimalSeparator(field.getDecimalSymbol().charAt(0));
        }
 else {
          data.dfs.setDecimalSeparator(data.defaultDecimalFormatSymbols.getDecimalSeparator());
        }
        if (!Const.isEmpty(field.getGroupingSymbol())) {
          data.dfs.setGroupingSeparator(field.getGroupingSymbol().charAt(0));
        }
 else {
          data.dfs.setGroupingSeparator(data.defaultDecimalFormatSymbols.getGroupingSeparator());
        }
        if (!Const.isEmpty(field.getCurrencySymbol())) {
          data.dfs.setCurrencySymbol(field.getCurrencySymbol());
        }
 else {
          data.dfs.setCurrencySymbol(data.defaultDecimalFormatSymbols.getCurrencySymbol());
        }
        data.df.setDecimalFormatSymbols(data.dfs);
        if (v.isBigNumber()) {
          retval=data.df.format(v.getBigNumber());
        }
 else         if (v.isNumber()) {
          retval=data.df.format(v.getNumber());
        }
 else {
          retval=data.df.format(v.getInteger());
        }
      }
    }
 else {
      if (v.isNull()) {
        if (idx >= 0 && field != null && field.getNullString() != null)         retval=field.getNullString();
 else         retval="";
      }
 else {
        retval=v.toString();
      }
    }
  }
 else   if (v.isDate()) {
    if (idx >= 0 && field != null && field.getFormat() != null && v.getDate() != null) {
      if (!Const.isEmpty(field.getFormat())) {
        data.daf.applyPattern(field.getFormat());
      }
 else {
        data.daf.applyPattern(data.defaultDateFormat.toLocalizedPattern());
      }
      data.daf.setDateFormatSymbols(data.dafs);
      retval=data.daf.format(v.getDate());
    }
 else {
      if (v.isNull() || v.getDate() == null) {
        if (idx >= 0 && field != null && field.getNullString() != null) {
          retval=field.getNullString();
        }
      }
 else {
        retval=v.toString();
      }
    }
  }
 else   if (v.isBinary()) {
    if (v.isNull()) {
      if (field.getNullString() != null)       retval=field.getNullString();
 else       retval=Const.NULL_BINARY;
    }
 else {
      try {
        retval=new String(v.getBytes(),"US-ASCII");
      }
 catch (      UnsupportedEncodingException e) {
        retval=Const.NULL_BINARY;
      }
    }
  }
 else {
    if (v.isNull()) {
      if (idx >= 0 && field != null && field.getNullString() != null)       retval=field.getNullString();
    }
 else {
      retval=v.toString();
    }
  }
  if (meta.isPadded()) {
    int length, precision;
    if (idx < 0 || field == null) {
      length=v.getLength() < 0 ? 0 : v.getLength();
      precision=v.getPrecision() < 0 ? 0 : v.getPrecision();
    }
 else {
      length=field.getLength() < 0 ? 0 : field.getLength();
      precision=field.getPrecision() < 0 ? 0 : field.getPrecision();
    }
    if (v.isNumber()) {
      length++;
      if (precision > 0)       length++;
    }
    if (v.isDate()) {
      length=23;
      precision=0;
    }
    if (v.isBoolean()) {
      length=5;
      precision=0;
    }
    retval=Const.rightPad(new StringBuffer(retval),length + precision);
  }
  return retval;
}
