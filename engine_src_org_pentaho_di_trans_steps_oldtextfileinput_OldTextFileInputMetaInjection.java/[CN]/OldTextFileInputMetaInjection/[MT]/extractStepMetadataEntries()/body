{
  List<StepInjectionMetaEntry> result=new ArrayList<StepInjectionMetaEntry>();
  result.add(getEntry(Entry.FILE_TYPE,meta.getFileType()));
  result.add(getEntry(Entry.SEPARATOR,meta.getSeparator()));
  result.add(getEntry(Entry.ENCLOSURE,meta.getEnclosure()));
  result.add(getEntry(Entry.ESCAPE_CHAR,meta.getEscapeCharacter()));
  result.add(getEntry(Entry.BREAK_IN_ENCLOSURE,meta.isBreakInEnclosureAllowed()));
  result.add(getEntry(Entry.HEADER_PRESENT,meta.hasHeader()));
  result.add(getEntry(Entry.NR_HEADER_LINES,meta.getNrHeaderLines()));
  result.add(getEntry(Entry.HAS_FOOTER,meta.hasFooter()));
  result.add(getEntry(Entry.NR_FOOTER_LINES,meta.getNrFooterLines()));
  result.add(getEntry(Entry.HAS_WRAPPED_LINES,meta.isLineWrapped()));
  result.add(getEntry(Entry.NR_WRAPS,meta.getNrWraps()));
  result.add(getEntry(Entry.HAS_PAGED_LAYOUT,meta.isLayoutPaged()));
  result.add(getEntry(Entry.NR_DOC_HEADER_LINES,meta.getNrLinesDocHeader()));
  result.add(getEntry(Entry.NR_LINES_PER_PAGE,meta.getNrLinesPerPage()));
  result.add(getEntry(Entry.COMPRESSION_TYPE,meta.getFileCompression()));
  result.add(getEntry(Entry.NO_EMPTY_LINES,meta.noEmptyLines()));
  result.add(getEntry(Entry.INCLUDE_FILENAME,meta.includeFilename()));
  result.add(getEntry(Entry.FILENAME_FIELD,meta.getFilenameField()));
  result.add(getEntry(Entry.INCLUDE_ROW_NUMBER,meta.includeRowNumber()));
  result.add(getEntry(Entry.ROW_NUMBER_BY_FILE,meta.isRowNumberByFile()));
  result.add(getEntry(Entry.ROW_NUMBER_FIELD,meta.getRowNumberField()));
  result.add(getEntry(Entry.FILE_FORMAT,meta.getFileFormat()));
  result.add(getEntry(Entry.ENCODING,meta.getEncoding()));
  result.add(getEntry(Entry.ROW_LIMIT,meta.getRowLimit()));
  result.add(getEntry(Entry.DATE_FORMAT_LENIENT,meta.isDateFormatLenient()));
  result.add(getEntry(Entry.DATE_FORMAT_LOCALE,meta.getDateFormatLocale()));
  result.add(getEntry(Entry.ACCEPT_FILE_NAMES,meta.isAcceptingFilenames()));
  result.add(getEntry(Entry.ACCEPT_FILE_STEP,meta.getAcceptingStepName()));
  result.add(getEntry(Entry.ACCEPT_FILE_FIELD,meta.getAcceptingField()));
  result.add(getEntry(Entry.PASS_THROUGH_FIELDS,meta.isPassingThruFields()));
  result.add(getEntry(Entry.ADD_FILES_TO_RESULT,meta.isAddResultFile()));
  result.add(getEntry(Entry.FILE_SHORT_FILE_FIELDNAME,meta.getShortFileNameField()));
  result.add(getEntry(Entry.FILE_PATH_FIELDNAME,meta.getPathField()));
  result.add(getEntry(Entry.FILE_HIDDEN_FIELDNAME,meta.isHiddenField()));
  result.add(getEntry(Entry.FILE_LAST_MODIFICATION_FIELDNAME,meta.getLastModificationDateField()));
  result.add(getEntry(Entry.FILE_URI_FIELDNAME,meta.getUriField()));
  result.add(getEntry(Entry.FILE_EXTENSION_FIELDNAME,meta.getExtensionField()));
  result.add(getEntry(Entry.FILE_SIZE_FIELDNAME,meta.getSizeField()));
  result.add(getEntry(Entry.SKIP_BAD_FILES,meta.isSkipBadFiles()));
  result.add(getEntry(Entry.FILE_ERROR_FIELD,meta.getFileErrorField()));
  result.add(getEntry(Entry.FILE_ERROR_MESSAGE_FIELD,meta.getFileErrorMessageField()));
  result.add(getEntry(Entry.IGNORE_ERRORS,meta.isErrorIgnored()));
  result.add(getEntry(Entry.ERROR_COUNT_FIELD,meta.getErrorCountField()));
  result.add(getEntry(Entry.ERROR_FIELDS_FIELD,meta.getErrorFieldsField()));
  result.add(getEntry(Entry.ERROR_TEXT_FIELD,meta.getErrorTextField()));
  result.add(getEntry(Entry.WARNING_FILES_TARGET_DIR,meta.getWarningFilesDestinationDirectory()));
  result.add(getEntry(Entry.WARNING_FILES_EXTENTION,meta.getWarningFilesExtension()));
  result.add(getEntry(Entry.ERROR_FILES_TARGET_DIR,meta.getErrorFilesDestinationDirectory()));
  result.add(getEntry(Entry.ERROR_FILES_EXTENTION,meta.getErrorLineFilesExtension()));
  result.add(getEntry(Entry.LINE_NR_FILES_TARGET_DIR,meta.getLineNumberFilesDestinationDirectory()));
  result.add(getEntry(Entry.LINE_NR_FILES_EXTENTION,meta.getLineNumberFilesExtension()));
  result.add(getEntry(Entry.ERROR_LINES_SKIPPED,meta.isErrorLineSkipped()));
  StepInjectionMetaEntry filenameLinesEntry=getEntry(Entry.FILENAME_LINES);
  if (!Const.isEmpty(meta.getFileName())) {
    for (int i=0, len=meta.getFileName().length; i < len; i++) {
      StepInjectionMetaEntry filenameLineEntry=getEntry(Entry.FILENAME_LINE);
      filenameLinesEntry.getDetails().add(filenameLineEntry);
      List<StepInjectionMetaEntry> filenameLineEntryDetails=filenameLineEntry.getDetails();
      filenameLineEntryDetails.add(getEntry(Entry.FILENAME,meta.getFileName()[i]));
      filenameLineEntryDetails.add(getEntry(Entry.FILEMASK,meta.getFileMask()[i]));
      filenameLineEntryDetails.add(getEntry(Entry.EXCLUDE_FILEMASK,meta.getExludeFileMask()[i]));
      filenameLineEntryDetails.add(getEntry(Entry.FILE_REQUIRED,meta.getFileRequired()[i]));
      filenameLineEntryDetails.add(getEntry(Entry.INCLUDE_SUBFOLDERS,meta.getIncludeSubFolders()[i]));
    }
  }
  result.add(filenameLinesEntry);
  StepInjectionMetaEntry fieldsEntry=getEntry(Entry.FIELDS);
  if (!Const.isEmpty(meta.getInputFields())) {
    for (    TextFileInputField inputField : meta.getInputFields()) {
      StepInjectionMetaEntry fieldEntry=getEntry(Entry.FIELD);
      fieldsEntry.getDetails().add(fieldEntry);
      List<StepInjectionMetaEntry> fieldDetails=fieldEntry.getDetails();
      fieldDetails.add(getEntry(Entry.FIELD,inputField.getName()));
      fieldDetails.add(getEntry(Entry.FIELD_POSITION,inputField.getPosition()));
      fieldDetails.add(getEntry(Entry.FIELD_LENGTH,inputField.getLength()));
      fieldDetails.add(getEntry(Entry.FIELD_TYPE,inputField.getType()));
      fieldDetails.add(getEntry(Entry.FIELD_IGNORE,inputField.isIgnored()));
      fieldDetails.add(getEntry(Entry.FIELD_FORMAT,inputField.getFormat()));
      fieldDetails.add(getEntry(Entry.FIELD_TRIM_TYPE,inputField.getTrimType()));
      fieldDetails.add(getEntry(Entry.FIELD_PRECISION,inputField.getPrecision()));
      fieldDetails.add(getEntry(Entry.FIELD_DECIMAL,inputField.getDecimalSymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_GROUP,inputField.getGroupSymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_CURRENCY,inputField.getCurrencySymbol()));
      fieldDetails.add(getEntry(Entry.FIELD_REPEAT,inputField.isRepeated()));
      fieldDetails.add(getEntry(Entry.FIELD_NULL_STRING,inputField.getNullString()));
      fieldDetails.add(getEntry(Entry.FIELD_IF_NULL,inputField.getIfNullValue()));
    }
  }
  result.add(fieldsEntry);
  return result;
}
