{
  EnvUtil.environmentInit();
  Trans trans=null;
  LogWriter log;
  LogWriter.setConsoleAppenderDebug();
  log=LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);
  log.logMinimal("JarPan","Start of run.");
  StepLoader steploader=StepLoader.getInstance();
  if (!steploader.read()) {
    log.logError("JarPan","Error loading steps... halting Pan!");
    System.exit(8);
  }
  Date start, stop;
  Calendar cal;
  SimpleDateFormat df=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
  cal=Calendar.getInstance();
  start=cal.getTime();
  try {
    log.logDebug("JarPan","Load the transformation.");
    TransMeta transMeta=new TransMeta(JarfileGenerator.TRANSFORMATION_FILENAME);
    trans=new Trans(log,transMeta);
  }
 catch (  KettleException e) {
    trans=null;
    System.out.println("Processing has stopped because of an error: " + e.getMessage());
  }
  if (trans == null) {
    System.out.println("ERROR: JarPan can't continue because the transformation couldn't be loaded.");
    System.exit(7);
  }
  try {
    boolean ok=trans.execute(null);
    if (!ok) {
      System.out.println("Unable to prepare and initialize this transformation");
      System.exit(3);
    }
    trans.waitUntilFinished();
    trans.endProcessing("end");
    log.logMinimal("JarPan","Finished!");
    cal=Calendar.getInstance();
    stop=cal.getTime();
    String begin=df.format(start).toString();
    String end=df.format(stop).toString();
    log.logMinimal("JarPan","Start=" + begin + ", Stop="+ end);
    long millis=stop.getTime() - start.getTime();
    log.logMinimal("JarPan","Processing ended after " + (millis / 1000) + " seconds.");
    if (trans.getResult().getNrErrors() == 0) {
      trans.printStats((int)millis / 1000);
      System.exit(0);
    }
 else {
      System.exit(1);
    }
  }
 catch (  KettleException ke) {
    System.out.println("ERROR occurred: " + ke.getMessage());
    log.logError("JarPan","Unexpected error occurred: " + ke.getMessage());
    System.exit(2);
  }
}
