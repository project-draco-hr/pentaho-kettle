{
  if (partitionSchema.getObjectId() == null) {
    partitionSchema.setObjectId(insertPartitionSchema(partitionSchema));
  }
 else {
    ObjectId existingPartitionSchemaId=getPartitionSchemaID(partitionSchema.getName());
    if (existingPartitionSchemaId != null && !partitionSchema.getObjectId().equals(existingPartitionSchemaId)) {
      if (overwrite) {
        repository.deletePartitionSchema(existingPartitionSchemaId);
        updatePartitionSchema(partitionSchema);
        repository.delPartitions(partitionSchema.getObjectId());
      }
 else {
        throw new KettleObjectExistsException("Failed to save object to repository. Object [" + partitionSchema.getName() + "] already exists.");
      }
    }
 else {
      updatePartitionSchema(partitionSchema);
      repository.delPartitions(partitionSchema.getObjectId());
    }
  }
  for (int i=0; i < partitionSchema.getPartitionIDs().size(); i++) {
    insertPartition(partitionSchema.getObjectId(),partitionSchema.getPartitionIDs().get(i));
  }
  if (isUsedByTransformation) {
    repository.insertTransformationPartitionSchema(id_transformation,partitionSchema.getObjectId());
  }
}
