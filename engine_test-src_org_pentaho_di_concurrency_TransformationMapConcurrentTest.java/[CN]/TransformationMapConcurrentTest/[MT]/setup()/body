{
  transformationMap=new TransformationMap();
  concurrentAllocateTasks=new ArrayList<>();
  concurrentDeallocateTasks=new ArrayList<>();
  for (int i=1; i <= numberOfSameAllocations; i++) {
    concurrentAllocateTasks.add(new ConcurrentAllocate(40000,"host0","id0","trans0","slave0","source0","0","slave-0","target0","0"));
  }
  for (int i=1; i <= numberOfSameSourceAndTargetSlaveNameAllocations; i++) {
    concurrentAllocateTasks.add(new ConcurrentAllocate(40000,"host1","id" + i,"trans" + i,"slave-1","source" + i,"" + i,"slave-2","target" + i,"" + i));
  }
  for (int i=2; i <= numberOfDifferentAllocations + 1; i++) {
    concurrentAllocateTasks.add(new ConcurrentAllocate(40000,"host" + i,"id" + i,"trans" + i,"slave-" + i,"source" + i,"" + i,"slave-" + i,"target" + i,"" + i));
  }
  for (int i=1; i <= numberOfSameHosts; i++) {
    concurrentAllocateTasks.add(new ConcurrentAllocate(40000,"host" + i,"diff","diff","diff","diff","diff","diff","diff","diff"));
  }
  for (int i=0; i < numberOfDeallocateTasks; i++) {
    CarteObjectEntry carteObjectEntry=new CarteObjectEntry("trans" + i,"id" + 1);
    concurrentDeallocateTasks.add(new ConcurrentDeallocate(i,"host" + i,carteObjectEntry));
  }
}
