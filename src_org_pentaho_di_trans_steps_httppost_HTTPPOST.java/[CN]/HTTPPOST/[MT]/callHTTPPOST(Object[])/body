{
  if (meta.isUrlInField())   data.realUrl=data.inputRowMeta.getString(rowData,data.indexOfUrlField);
  FileInputStream fis=null;
  try {
    if (isDetailed())     logDetailed(BaseMessages.getString(PKG,"HTTPPOST.Log.ConnectingToURL",data.realUrl));
    HttpClient HTTPPOSTclient=new HttpClient();
    PostMethod post=new PostMethod(data.realUrl);
    if (data.realConnectionTimeout > -1)     HTTPPOSTclient.getHttpConnectionManager().getParams().setConnectionTimeout(data.realConnectionTimeout);
    if (data.realSocketTimeout > -1)     HTTPPOSTclient.getHttpConnectionManager().getParams().setSoTimeout(data.realSocketTimeout);
    if (!Const.isEmpty(data.realHttpLogin)) {
      HTTPPOSTclient.getParams().setAuthenticationPreemptive(true);
      Credentials defaultcreds=new UsernamePasswordCredentials(data.realHttpLogin,data.realHttpPassword);
      HTTPPOSTclient.getState().setCredentials(AuthScope.ANY,defaultcreds);
    }
    HostConfiguration hostConfiguration=new HostConfiguration();
    if (!Const.isEmpty(data.realProxyHost)) {
      hostConfiguration.setProxy(data.realProxyHost,data.realProxyPort);
    }
    if (!data.contentTypeHeaderOverwrite) {
      if (Const.isEmpty(data.realEncoding)) {
        post.setRequestHeader(CONTENT_TYPE,CONTENT_TYPE_TEXT_XML);
        if (isDebug())         logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",CONTENT_TYPE,CONTENT_TYPE_TEXT_XML));
      }
 else {
        post.setRequestHeader(CONTENT_TYPE,CONTENT_TYPE_TEXT_XML + "; " + data.realEncoding);
        if (isDebug())         logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",CONTENT_TYPE,CONTENT_TYPE_TEXT_XML + "; " + data.realEncoding));
      }
    }
    if (data.useHeaderParameters) {
      for (int i=0; i < data.header_parameters_nrs.length; i++) {
        post.addRequestHeader(data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i]));
        if (isDebug())         logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.HeaderValue",data.headerParameters[i].getName(),data.inputRowMeta.getString(rowData,data.header_parameters_nrs[i])));
      }
    }
    if (data.useBodyParameters) {
      for (int i=0; i < data.body_parameters_nrs.length; i++) {
        data.bodyParameters[i].setValue(data.inputRowMeta.getString(rowData,data.body_parameters_nrs[i]));
        if (isDebug())         logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.BodyValue",data.bodyParameters[i].getName(),data.inputRowMeta.getString(rowData,data.body_parameters_nrs[i])));
      }
      post.setRequestBody(data.bodyParameters);
    }
    if (data.useQueryParameters) {
      for (int i=0; i < data.query_parameters_nrs.length; i++) {
        data.queryParameters[i].setValue(data.inputRowMeta.getString(rowData,data.query_parameters_nrs[i]));
        if (isDebug())         logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.QueryValue",data.queryParameters[i].getName(),data.inputRowMeta.getString(rowData,data.query_parameters_nrs[i])));
      }
      post.setQueryString(data.queryParameters);
    }
    if (data.indexOfRequestEntity >= 0) {
      String tmp=data.inputRowMeta.getString(rowData,data.indexOfRequestEntity);
      if (meta.isPostAFile()) {
        File input=new File(tmp);
        fis=new FileInputStream(input);
        post.setRequestEntity(new InputStreamRequestEntity(fis,input.length()));
      }
 else {
        post.setRequestEntity(new InputStreamRequestEntity(new ByteArrayInputStream(tmp.getBytes()),tmp.length()));
      }
    }
    InputStreamReader inputStreamReader=null;
    Object[] newRow=null;
    if (rowData != null)     newRow=rowData.clone();
    try {
      long startTime=System.currentTimeMillis();
      int statusCode=HTTPPOSTclient.executeMethod(hostConfiguration,post);
      long responseTime=System.currentTimeMillis() - startTime;
      if (isDetailed())       logDetailed(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseTime",responseTime,data.realUrl));
      if (isDebug())       logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseCode",String.valueOf(statusCode)));
      String body=null;
      if (statusCode != -1) {
        if (statusCode != 401) {
          String encoding=data.realEncoding;
          if (Const.isEmpty(encoding)) {
            String contentType=post.getResponseHeader("Content-Type").getValue();
            if (contentType != null && contentType.contains("charset")) {
              encoding=contentType.replaceFirst("^.*;\\s*charset\\s*=\\s*","").replace("\"","").trim();
            }
          }
          if (Const.isEmpty(encoding)) {
            if (isDebug())             logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.Encoding","ISO-8859-1"));
            inputStreamReader=new InputStreamReader(post.getResponseBodyAsStream());
          }
 else {
            if (isDebug())             logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.Encoding",encoding));
            inputStreamReader=new InputStreamReader(post.getResponseBodyAsStream(),encoding);
          }
          StringBuffer bodyBuffer=new StringBuffer();
          int c;
          while ((c=inputStreamReader.read()) != -1) {
            bodyBuffer.append((char)c);
          }
          inputStreamReader.close();
          body=bodyBuffer.toString();
          if (isDebug())           logDebug(BaseMessages.getString(PKG,"HTTPPOST.Log.ResponseBody",body));
        }
 else {
          throw new KettleStepException(BaseMessages.getString(PKG,"HTTPPOST.Exception.Authentication",data.realUrl));
        }
      }
      int returnFieldsOffset=data.inputRowMeta.size();
      if (!Const.isEmpty(meta.getFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,body);
        returnFieldsOffset++;
      }
      if (!Const.isEmpty(meta.getResultCodeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(statusCode));
        returnFieldsOffset++;
      }
      if (!Const.isEmpty(meta.getResponseTimeFieldName())) {
        newRow=RowDataUtil.addValueData(newRow,returnFieldsOffset,new Long(responseTime));
      }
    }
  finally {
      if (inputStreamReader != null)       inputStreamReader.close();
      post.releaseConnection();
      if (data.realcloseIdleConnectionsTime > -1)       HTTPPOSTclient.getHttpConnectionManager().closeIdleConnections(data.realcloseIdleConnectionsTime);
    }
    return newRow;
  }
 catch (  UnknownHostException uhe) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Error.UnknownHostException",uhe.getMessage()));
  }
catch (  Exception e) {
    throw new KettleException(BaseMessages.getString(PKG,"HTTPPOST.Error.CanNotReadURL",data.realUrl),e);
  }
 finally {
    if (fis != null) {
      BaseStep.closeQuietly(fis);
    }
  }
}
